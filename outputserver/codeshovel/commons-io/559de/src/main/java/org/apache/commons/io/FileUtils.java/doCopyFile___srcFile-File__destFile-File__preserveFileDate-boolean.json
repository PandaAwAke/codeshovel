{
  "origin": "codeshovel",
  "repositoryName": "commons-io",
  "repositoryPath": "/repos/commons-io/.git",
  "startCommitName": "559de2c461e94ab636c959149c775bb27111fb48",
  "sourceFileName": "FileUtils.java",
  "functionName": "doCopyFile",
  "functionId": "doCopyFile___srcFile-File__destFile-File__preserveFileDate-boolean",
  "sourceFilePath": "src/main/java/org/apache/commons/io/FileUtils.java",
  "functionStartLine": 1125,
  "functionEndLine": 1158,
  "changeHistory": [
    "4dc97b64005f0083b2facaa70f661138a4fa3fc0",
    "6c3a1bb78c3e92fded50c1c1e9f4c3e2e6e9dd4c",
    "583638baf42a6ca0cdba74d8f0fd9206823d73d4",
    "32d58f94667615eabe93258d0ba38048f75ba148",
    "28e27d5452bd9cfc707231b1b3f5234422711109",
    "7f15b0e5cdb5c92eab77b33da0eaae6e546910f7",
    "6aa00766b9103d75c763160280429af8e1f0549e",
    "1170279dc85c2bbdea594b053c56b379a72a2104",
    "0e035427fb7efb8892e15594810687a3d327a651",
    "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a",
    "63213c888b3a47036105bfa9caddf63f73cd695d",
    "ae8a261d47bec45e42904fd3e761860bab1e404c",
    "64320f1c02f6173874ffcd7d5261a0f193c206a0",
    "f0c9d8d08404ba2bad6c581bc76ecb1eef6c9bff",
    "4127f8592e1e43b72626998fdee07f1e3c0ec928",
    "1bdcc3d74cd87ca5a128f466d31dbca61429ce30",
    "d5e24a4f1a2ff0e5c565f5b78fc0691e639b876e",
    "418d7a0ac343be700fd251d747bcc2d7ac0056d7",
    "3e4ec2a42b3118266deada58dbee39db2a48677b",
    "6a1bb4d53562a50bbaad48ee2c94971649e24cf5",
    "7748ed36401ea37104ae313be804f81f2526cd6d",
    "8eeb52fc81c4e65c00839cfeef9f1cde8b1cc613",
    "c360a10db25701f682849e5913d150f13a09f3bb"
  ],
  "changeHistoryShort": {
    "4dc97b64005f0083b2facaa70f661138a4fa3fc0": "Ybodychange",
    "6c3a1bb78c3e92fded50c1c1e9f4c3e2e6e9dd4c": "Ybodychange",
    "583638baf42a6ca0cdba74d8f0fd9206823d73d4": "Ybodychange",
    "32d58f94667615eabe93258d0ba38048f75ba148": "Ybodychange",
    "28e27d5452bd9cfc707231b1b3f5234422711109": "Ybodychange",
    "7f15b0e5cdb5c92eab77b33da0eaae6e546910f7": "Ybodychange",
    "6aa00766b9103d75c763160280429af8e1f0549e": "Ymultichange(Ybodychange,Yparametermetachange)",
    "1170279dc85c2bbdea594b053c56b379a72a2104": "Ybodychange",
    "0e035427fb7efb8892e15594810687a3d327a651": "Ybodychange",
    "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a": "Yfilerename",
    "63213c888b3a47036105bfa9caddf63f73cd695d": "Ybodychange",
    "ae8a261d47bec45e42904fd3e761860bab1e404c": "Ybodychange",
    "64320f1c02f6173874ffcd7d5261a0f193c206a0": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
    "f0c9d8d08404ba2bad6c581bc76ecb1eef6c9bff": "Ybodychange",
    "4127f8592e1e43b72626998fdee07f1e3c0ec928": "Ybodychange",
    "1bdcc3d74cd87ca5a128f466d31dbca61429ce30": "Ymultichange(Yparameterchange,Ybodychange)",
    "d5e24a4f1a2ff0e5c565f5b78fc0691e639b876e": "Ymultichange(Ybodychange,Yparametermetachange)",
    "418d7a0ac343be700fd251d747bcc2d7ac0056d7": "Ybodychange",
    "3e4ec2a42b3118266deada58dbee39db2a48677b": "Ybodychange",
    "6a1bb4d53562a50bbaad48ee2c94971649e24cf5": "Ybodychange",
    "7748ed36401ea37104ae313be804f81f2526cd6d": "Ybodychange",
    "8eeb52fc81c4e65c00839cfeef9f1cde8b1cc613": "Ymovefromfile",
    "c360a10db25701f682849e5913d150f13a09f3bb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4dc97b64005f0083b2facaa70f661138a4fa3fc0": {
      "type": "Ybodychange",
      "commitMessage": "[IO-505] Deprecated of all IOUtils.closeQuietly() methods and use try-with-resources internally.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1742675 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1462579617000,
      "commitName": "4dc97b64005f0083b2facaa70f661138a4fa3fc0",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": 1461715185000,
      "commitNameOld": "6c3a1bb78c3e92fded50c1c1e9f4c3e2e6e9dd4c",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 10.01,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,34 @@\n     private static void doCopyFile(final File srcFile, final File destFile, final boolean preserveFileDate)\n             throws IOException {\n         if (destFile.exists() \u0026\u0026 destFile.isDirectory()) {\n             throw new IOException(\"Destination \u0027\" + destFile + \"\u0027 exists but is a directory\");\n         }\n \n-        FileInputStream fis \u003d null;\n-        FileOutputStream fos \u003d null;\n-        FileChannel input \u003d null;\n-        FileChannel output \u003d null;\n-        try {\n-            fis \u003d new FileInputStream(srcFile);\n-            fos \u003d new FileOutputStream(destFile);\n-            input \u003d fis.getChannel();\n-            output \u003d fos.getChannel();\n+        try (FileInputStream fis \u003d new FileInputStream(srcFile);\n+             FileChannel input \u003d fis.getChannel();\n+             FileOutputStream fos \u003d new FileOutputStream(destFile);\n+             FileChannel output \u003d fos.getChannel()) {\n             final long size \u003d input.size(); // TODO See IO-386\n             long pos \u003d 0;\n             long count \u003d 0;\n             while (pos \u003c size) {\n                 final long remain \u003d size - pos;\n                 count \u003d remain \u003e FILE_COPY_BUFFER_SIZE ? FILE_COPY_BUFFER_SIZE : remain;\n                 final long bytesCopied \u003d output.transferFrom(input, pos, count);\n                 if (bytesCopied \u003d\u003d 0) { // IO-385 - can happen if file is truncated after caching the size\n                     break; // ensure we don\u0027t loop forever\n                 }\n                 pos +\u003d bytesCopied;\n             }\n-\n-            output.close();\n-            output \u003d null;\n-\n-            fos.close();\n-            fos \u003d null;\n-\n-            input.close();\n-            input \u003d null;\n-\n-            fis.close();\n-            fis \u003d null;\n-        } finally {\n-            IOUtils.closeQuietly(output, fos, input, fis);\n         }\n \n         final long srcLen \u003d srcFile.length(); // TODO See IO-386\n         final long dstLen \u003d destFile.length(); // TODO See IO-386\n         if (srcLen !\u003d dstLen) {\n             throw new IOException(\"Failed to copy full contents from \u0027\" +\n                     srcFile + \"\u0027 to \u0027\" + destFile + \"\u0027 Expected length: \" + srcLen + \" Actual: \" + dstLen);\n         }\n         if (preserveFileDate) {\n             destFile.setLastModified(srcFile.lastModified());\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6c3a1bb78c3e92fded50c1c1e9f4c3e2e6e9dd4c": {
      "type": "Ybodychange",
      "commitMessage": "[IO-502] Exceptions are suppressed incorrectly when copying files.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1741124 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1461715185000,
      "commitName": "6c3a1bb78c3e92fded50c1c1e9f4c3e2e6e9dd4c",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": 1460666659000,
      "commitNameOld": "31373778a21bf4124ba2c120e384db8062f0a2b6",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 12.14,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,53 @@\n     private static void doCopyFile(final File srcFile, final File destFile, final boolean preserveFileDate)\n             throws IOException {\n         if (destFile.exists() \u0026\u0026 destFile.isDirectory()) {\n             throw new IOException(\"Destination \u0027\" + destFile + \"\u0027 exists but is a directory\");\n         }\n \n         FileInputStream fis \u003d null;\n         FileOutputStream fos \u003d null;\n         FileChannel input \u003d null;\n         FileChannel output \u003d null;\n         try {\n             fis \u003d new FileInputStream(srcFile);\n             fos \u003d new FileOutputStream(destFile);\n             input \u003d fis.getChannel();\n             output \u003d fos.getChannel();\n             final long size \u003d input.size(); // TODO See IO-386\n             long pos \u003d 0;\n             long count \u003d 0;\n             while (pos \u003c size) {\n                 final long remain \u003d size - pos;\n                 count \u003d remain \u003e FILE_COPY_BUFFER_SIZE ? FILE_COPY_BUFFER_SIZE : remain;\n                 final long bytesCopied \u003d output.transferFrom(input, pos, count);\n                 if (bytesCopied \u003d\u003d 0) { // IO-385 - can happen if file is truncated after caching the size\n                     break; // ensure we don\u0027t loop forever\n                 }\n                 pos +\u003d bytesCopied;\n             }\n+\n+            output.close();\n+            output \u003d null;\n+\n+            fos.close();\n+            fos \u003d null;\n+\n+            input.close();\n+            input \u003d null;\n+\n+            fis.close();\n+            fis \u003d null;\n         } finally {\n             IOUtils.closeQuietly(output, fos, input, fis);\n         }\n \n         final long srcLen \u003d srcFile.length(); // TODO See IO-386\n         final long dstLen \u003d destFile.length(); // TODO See IO-386\n         if (srcLen !\u003d dstLen) {\n             throw new IOException(\"Failed to copy full contents from \u0027\" +\n                     srcFile + \"\u0027 to \u0027\" + destFile + \"\u0027 Expected length: \" + srcLen + \" Actual: \" + dstLen);\n         }\n         if (preserveFileDate) {\n             destFile.setLastModified(srcFile.lastModified());\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "583638baf42a6ca0cdba74d8f0fd9206823d73d4": {
      "type": "Ybodychange",
      "commitMessage": "[IO-426] Add API IOUtils.closeQuietly(Closeable...)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1565317 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1391702540000,
      "commitName": "583638baf42a6ca0cdba74d8f0fd9206823d73d4",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": 1391197530000,
      "commitNameOld": "bf545e4dd3a0414879b5707c8750613c24db8730",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 5.85,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,40 @@\n     private static void doCopyFile(final File srcFile, final File destFile, final boolean preserveFileDate) throws IOException {\n         if (destFile.exists() \u0026\u0026 destFile.isDirectory()) {\n             throw new IOException(\"Destination \u0027\" + destFile + \"\u0027 exists but is a directory\");\n         }\n \n         FileInputStream fis \u003d null;\n         FileOutputStream fos \u003d null;\n         FileChannel input \u003d null;\n         FileChannel output \u003d null;\n         try {\n             fis \u003d new FileInputStream(srcFile);\n             fos \u003d new FileOutputStream(destFile);\n             input  \u003d fis.getChannel();\n             output \u003d fos.getChannel();\n             final long size \u003d input.size(); // TODO See IO-386\n             long pos \u003d 0;\n             long count \u003d 0;\n             while (pos \u003c size) {\n                 final long remain \u003d size - pos;\n                 count \u003d remain \u003e FILE_COPY_BUFFER_SIZE ? FILE_COPY_BUFFER_SIZE : remain;\n                 final long bytesCopied \u003d output.transferFrom(input, pos, count);\n                 if (bytesCopied \u003d\u003d 0) { // IO-385 - can happen if file is truncated after caching the size\n                     break; // ensure we don\u0027t loop forever\n                 }\n                 pos +\u003d bytesCopied;\n             }\n         } finally {\n-            IOUtils.closeQuietly(output);\n-            IOUtils.closeQuietly(fos);\n-            IOUtils.closeQuietly(input);\n-            IOUtils.closeQuietly(fis);\n+            IOUtils.closeQuietly(output, fos, input, fis);\n         }\n \n         final long srcLen \u003d srcFile.length(); // TODO See IO-386\n         final long dstLen \u003d destFile.length(); // TODO See IO-386\n         if (srcLen !\u003d dstLen) {\n             throw new IOException(\"Failed to copy full contents from \u0027\" +\n                     srcFile + \"\u0027 to \u0027\" + destFile + \"\u0027 Expected length: \" + srcLen +\" Actual: \" + dstLen);\n         }\n         if (preserveFileDate) {\n             destFile.setLastModified(srcFile.lastModified());\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "32d58f94667615eabe93258d0ba38048f75ba148": {
      "type": "Ybodychange",
      "commitMessage": "IO-385 FileUtils.doCopyFile can potentially loop for ever\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1489171 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1370293145000,
      "commitName": "32d58f94667615eabe93258d0ba38048f75ba148",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": 1370287973000,
      "commitNameOld": "3cd6a2c19f46fdaf8396f15e15bc789c745cb9b9",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,43 @@\n     private static void doCopyFile(final File srcFile, final File destFile, final boolean preserveFileDate) throws IOException {\n         if (destFile.exists() \u0026\u0026 destFile.isDirectory()) {\n             throw new IOException(\"Destination \u0027\" + destFile + \"\u0027 exists but is a directory\");\n         }\n \n         FileInputStream fis \u003d null;\n         FileOutputStream fos \u003d null;\n         FileChannel input \u003d null;\n         FileChannel output \u003d null;\n         try {\n             fis \u003d new FileInputStream(srcFile);\n             fos \u003d new FileOutputStream(destFile);\n             input  \u003d fis.getChannel();\n             output \u003d fos.getChannel();\n             final long size \u003d input.size(); // TODO See IO-386\n             long pos \u003d 0;\n             long count \u003d 0;\n             while (pos \u003c size) {\n-                count \u003d size - pos \u003e FILE_COPY_BUFFER_SIZE ? FILE_COPY_BUFFER_SIZE : size - pos;\n-                pos +\u003d output.transferFrom(input, pos, count);\n+                final long remain \u003d size - pos;\n+                count \u003d remain \u003e FILE_COPY_BUFFER_SIZE ? FILE_COPY_BUFFER_SIZE : remain;\n+                final long bytesCopied \u003d output.transferFrom(input, pos, count);\n+                if (bytesCopied \u003d\u003d 0) { // IO-385 - can happen if file is truncated after caching the size\n+                    break; // ensure we don\u0027t loop forever\n+                }\n+                pos +\u003d bytesCopied;\n             }\n         } finally {\n             IOUtils.closeQuietly(output);\n             IOUtils.closeQuietly(fos);\n             IOUtils.closeQuietly(input);\n             IOUtils.closeQuietly(fis);\n         }\n \n         final long srcLen \u003d srcFile.length(); // TODO See IO-386\n         final long dstLen \u003d destFile.length(); // TODO See IO-386\n         if (srcLen !\u003d dstLen) {\n             throw new IOException(\"Failed to copy full contents from \u0027\" +\n                     srcFile + \"\u0027 to \u0027\" + destFile + \"\u0027 Expected length: \" + srcLen +\" Actual: \" + dstLen);\n         }\n         if (preserveFileDate) {\n             destFile.setLastModified(srcFile.lastModified());\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "28e27d5452bd9cfc707231b1b3f5234422711109": {
      "type": "Ybodychange",
      "commitMessage": "Point to JIRA with details of inconsistency\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1488711 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1370180534000,
      "commitName": "28e27d5452bd9cfc707231b1b3f5234422711109",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": 1370179022000,
      "commitNameOld": "7f15b0e5cdb5c92eab77b33da0eaae6e546910f7",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n     private static void doCopyFile(final File srcFile, final File destFile, final boolean preserveFileDate) throws IOException {\n         if (destFile.exists() \u0026\u0026 destFile.isDirectory()) {\n             throw new IOException(\"Destination \u0027\" + destFile + \"\u0027 exists but is a directory\");\n         }\n \n         FileInputStream fis \u003d null;\n         FileOutputStream fos \u003d null;\n         FileChannel input \u003d null;\n         FileChannel output \u003d null;\n         try {\n             fis \u003d new FileInputStream(srcFile);\n             fos \u003d new FileOutputStream(destFile);\n             input  \u003d fis.getChannel();\n             output \u003d fos.getChannel();\n-            final long size \u003d input.size();\n+            final long size \u003d input.size(); // TODO See IO-386\n             long pos \u003d 0;\n             long count \u003d 0;\n             while (pos \u003c size) {\n                 count \u003d size - pos \u003e FILE_COPY_BUFFER_SIZE ? FILE_COPY_BUFFER_SIZE : size - pos;\n                 pos +\u003d output.transferFrom(input, pos, count);\n             }\n         } finally {\n             IOUtils.closeQuietly(output);\n             IOUtils.closeQuietly(fos);\n             IOUtils.closeQuietly(input);\n             IOUtils.closeQuietly(fis);\n         }\n \n-        final long srcLen \u003d srcFile.length();\n-        final long dstLen \u003d destFile.length();\n+        final long srcLen \u003d srcFile.length(); // TODO See IO-386\n+        final long dstLen \u003d destFile.length(); // TODO See IO-386\n         if (srcLen !\u003d dstLen) {\n             throw new IOException(\"Failed to copy full contents from \u0027\" +\n                     srcFile + \"\u0027 to \u0027\" + destFile + \"\u0027 Expected length: \" + srcLen +\" Actual: \" + dstLen);\n         }\n         if (preserveFileDate) {\n             destFile.setLastModified(srcFile.lastModified());\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7f15b0e5cdb5c92eab77b33da0eaae6e546910f7": {
      "type": "Ybodychange",
      "commitMessage": "IO-383 FileUtils.doCopyFile caches the file size; needs to be documented\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1488708 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1370179022000,
      "commitName": "7f15b0e5cdb5c92eab77b33da0eaae6e546910f7",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": 1368711865000,
      "commitNameOld": "982ecd8aaf88282a64c96fd274bac94a405cc419",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 16.98,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,38 @@\n     private static void doCopyFile(final File srcFile, final File destFile, final boolean preserveFileDate) throws IOException {\n         if (destFile.exists() \u0026\u0026 destFile.isDirectory()) {\n             throw new IOException(\"Destination \u0027\" + destFile + \"\u0027 exists but is a directory\");\n         }\n \n         FileInputStream fis \u003d null;\n         FileOutputStream fos \u003d null;\n         FileChannel input \u003d null;\n         FileChannel output \u003d null;\n         try {\n             fis \u003d new FileInputStream(srcFile);\n             fos \u003d new FileOutputStream(destFile);\n             input  \u003d fis.getChannel();\n             output \u003d fos.getChannel();\n             final long size \u003d input.size();\n             long pos \u003d 0;\n             long count \u003d 0;\n             while (pos \u003c size) {\n                 count \u003d size - pos \u003e FILE_COPY_BUFFER_SIZE ? FILE_COPY_BUFFER_SIZE : size - pos;\n                 pos +\u003d output.transferFrom(input, pos, count);\n             }\n         } finally {\n             IOUtils.closeQuietly(output);\n             IOUtils.closeQuietly(fos);\n             IOUtils.closeQuietly(input);\n             IOUtils.closeQuietly(fis);\n         }\n \n-        if (srcFile.length() !\u003d destFile.length()) {\n+        final long srcLen \u003d srcFile.length();\n+        final long dstLen \u003d destFile.length();\n+        if (srcLen !\u003d dstLen) {\n             throw new IOException(\"Failed to copy full contents from \u0027\" +\n-                    srcFile + \"\u0027 to \u0027\" + destFile + \"\u0027\");\n+                    srcFile + \"\u0027 to \u0027\" + destFile + \"\u0027 Expected length: \" + srcLen +\" Actual: \" + dstLen);\n         }\n         if (preserveFileDate) {\n             destFile.setLastModified(srcFile.lastModified());\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6aa00766b9103d75c763160280429af8e1f0549e": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1354308699000,
      "commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
      "commitAuthor": "Gary D. Gregory",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1354308699000,
          "commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": 1351082444000,
          "commitNameOld": "965f66687351e0abd445925d0497f96e5656ff13",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 37.34,
          "commitsBetweenForRepo": 34,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,36 @@\n-    private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\n+    private static void doCopyFile(final File srcFile, final File destFile, final boolean preserveFileDate) throws IOException {\n         if (destFile.exists() \u0026\u0026 destFile.isDirectory()) {\n             throw new IOException(\"Destination \u0027\" + destFile + \"\u0027 exists but is a directory\");\n         }\n \n         FileInputStream fis \u003d null;\n         FileOutputStream fos \u003d null;\n         FileChannel input \u003d null;\n         FileChannel output \u003d null;\n         try {\n             fis \u003d new FileInputStream(srcFile);\n             fos \u003d new FileOutputStream(destFile);\n             input  \u003d fis.getChannel();\n             output \u003d fos.getChannel();\n-            long size \u003d input.size();\n+            final long size \u003d input.size();\n             long pos \u003d 0;\n             long count \u003d 0;\n             while (pos \u003c size) {\n                 count \u003d size - pos \u003e FILE_COPY_BUFFER_SIZE ? FILE_COPY_BUFFER_SIZE : size - pos;\n                 pos +\u003d output.transferFrom(input, pos, count);\n             }\n         } finally {\n             IOUtils.closeQuietly(output);\n             IOUtils.closeQuietly(fos);\n             IOUtils.closeQuietly(input);\n             IOUtils.closeQuietly(fis);\n         }\n \n         if (srcFile.length() !\u003d destFile.length()) {\n             throw new IOException(\"Failed to copy full contents from \u0027\" +\n                     srcFile + \"\u0027 to \u0027\" + destFile + \"\u0027\");\n         }\n         if (preserveFileDate) {\n             destFile.setLastModified(srcFile.lastModified());\n         }\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1354308699000,
          "commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": 1351082444000,
          "commitNameOld": "965f66687351e0abd445925d0497f96e5656ff13",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 37.34,
          "commitsBetweenForRepo": 34,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,36 @@\n-    private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\n+    private static void doCopyFile(final File srcFile, final File destFile, final boolean preserveFileDate) throws IOException {\n         if (destFile.exists() \u0026\u0026 destFile.isDirectory()) {\n             throw new IOException(\"Destination \u0027\" + destFile + \"\u0027 exists but is a directory\");\n         }\n \n         FileInputStream fis \u003d null;\n         FileOutputStream fos \u003d null;\n         FileChannel input \u003d null;\n         FileChannel output \u003d null;\n         try {\n             fis \u003d new FileInputStream(srcFile);\n             fos \u003d new FileOutputStream(destFile);\n             input  \u003d fis.getChannel();\n             output \u003d fos.getChannel();\n-            long size \u003d input.size();\n+            final long size \u003d input.size();\n             long pos \u003d 0;\n             long count \u003d 0;\n             while (pos \u003c size) {\n                 count \u003d size - pos \u003e FILE_COPY_BUFFER_SIZE ? FILE_COPY_BUFFER_SIZE : size - pos;\n                 pos +\u003d output.transferFrom(input, pos, count);\n             }\n         } finally {\n             IOUtils.closeQuietly(output);\n             IOUtils.closeQuietly(fos);\n             IOUtils.closeQuietly(input);\n             IOUtils.closeQuietly(fis);\n         }\n \n         if (srcFile.length() !\u003d destFile.length()) {\n             throw new IOException(\"Failed to copy full contents from \u0027\" +\n                     srcFile + \"\u0027 to \u0027\" + destFile + \"\u0027\");\n         }\n         if (preserveFileDate) {\n             destFile.setLastModified(srcFile.lastModified());\n         }\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "1170279dc85c2bbdea594b053c56b379a72a2104": {
      "type": "Ybodychange",
      "commitMessage": "Remove noisy and unnecessary parens. Especially painful in return statements: \"return (foo + bar);\" vs. \"return foo + bar;\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1302748 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1332207332000,
      "commitName": "1170279dc85c2bbdea594b053c56b379a72a2104",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": 1331694657000,
      "commitNameOld": "3fdb1c369b9d805af90c3bdb1c7943c3ec691a19",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 5.93,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n     private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\n         if (destFile.exists() \u0026\u0026 destFile.isDirectory()) {\n             throw new IOException(\"Destination \u0027\" + destFile + \"\u0027 exists but is a directory\");\n         }\n \n         FileInputStream fis \u003d null;\n         FileOutputStream fos \u003d null;\n         FileChannel input \u003d null;\n         FileChannel output \u003d null;\n         try {\n             fis \u003d new FileInputStream(srcFile);\n             fos \u003d new FileOutputStream(destFile);\n             input  \u003d fis.getChannel();\n             output \u003d fos.getChannel();\n             long size \u003d input.size();\n             long pos \u003d 0;\n             long count \u003d 0;\n             while (pos \u003c size) {\n-                count \u003d (size - pos) \u003e FILE_COPY_BUFFER_SIZE ? FILE_COPY_BUFFER_SIZE : (size - pos);\n+                count \u003d size - pos \u003e FILE_COPY_BUFFER_SIZE ? FILE_COPY_BUFFER_SIZE : size - pos;\n                 pos +\u003d output.transferFrom(input, pos, count);\n             }\n         } finally {\n             IOUtils.closeQuietly(output);\n             IOUtils.closeQuietly(fos);\n             IOUtils.closeQuietly(input);\n             IOUtils.closeQuietly(fis);\n         }\n \n         if (srcFile.length() !\u003d destFile.length()) {\n             throw new IOException(\"Failed to copy full contents from \u0027\" +\n                     srcFile + \"\u0027 to \u0027\" + destFile + \"\u0027\");\n         }\n         if (preserveFileDate) {\n             destFile.setLastModified(srcFile.lastModified());\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0e035427fb7efb8892e15594810687a3d327a651": {
      "type": "Ybodychange",
      "commitMessage": "IO-266 FileUtils.copyFile() throws IOException when copying large files to a shared directory\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1101118 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1304961656000,
      "commitName": "0e035427fb7efb8892e15594810687a3d327a651",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": 1304777362000,
      "commitNameOld": "c6f1249b3698a7151be813de1b33ca99837324ef",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 2.13,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n     private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\n         if (destFile.exists() \u0026\u0026 destFile.isDirectory()) {\n             throw new IOException(\"Destination \u0027\" + destFile + \"\u0027 exists but is a directory\");\n         }\n \n         FileInputStream fis \u003d null;\n         FileOutputStream fos \u003d null;\n         FileChannel input \u003d null;\n         FileChannel output \u003d null;\n         try {\n             fis \u003d new FileInputStream(srcFile);\n             fos \u003d new FileOutputStream(destFile);\n             input  \u003d fis.getChannel();\n             output \u003d fos.getChannel();\n             long size \u003d input.size();\n             long pos \u003d 0;\n             long count \u003d 0;\n             while (pos \u003c size) {\n-                count \u003d (size - pos) \u003e FIFTY_MB ? FIFTY_MB : (size - pos);\n+                count \u003d (size - pos) \u003e FILE_COPY_BUFFER_SIZE ? FILE_COPY_BUFFER_SIZE : (size - pos);\n                 pos +\u003d output.transferFrom(input, pos, count);\n             }\n         } finally {\n             IOUtils.closeQuietly(output);\n             IOUtils.closeQuietly(fos);\n             IOUtils.closeQuietly(input);\n             IOUtils.closeQuietly(fis);\n         }\n \n         if (srcFile.length() !\u003d destFile.length()) {\n             throw new IOException(\"Failed to copy full contents from \u0027\" +\n                     srcFile + \"\u0027 to \u0027\" + destFile + \"\u0027\");\n         }\n         if (preserveFileDate) {\n             destFile.setLastModified(srcFile.lastModified());\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a": {
      "type": "Yfilerename",
      "commitMessage": "Build changes - re-organize to standard m2 layout, remove useless JIRA report and fix some Ant issues\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1004358 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1286218476000,
      "commitName": "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": 1286214840000,
      "commitNameOld": "19f48eb1711427a43a5e10c84bbbf1218a08bdd2",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/io/FileUtils.java",
        "newPath": "src/main/java/org/apache/commons/io/FileUtils.java"
      }
    },
    "63213c888b3a47036105bfa9caddf63f73cd695d": {
      "type": "Ybodychange",
      "commitMessage": "Fix fir IO-175 IOUtils.doCopyFile() issues with very large files and closing file input streams - thanks to David Sitsky\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@723199 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1228361423000,
      "commitName": "63213c888b3a47036105bfa9caddf63f73cd695d",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": 1218455263000,
      "commitNameOld": "934d08cb4a4566eeffdb8c429f6294dba63b56b8",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 114.65,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,36 @@\n     private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\n         if (destFile.exists() \u0026\u0026 destFile.isDirectory()) {\n             throw new IOException(\"Destination \u0027\" + destFile + \"\u0027 exists but is a directory\");\n         }\n \n-        FileChannel input \u003d new FileInputStream(srcFile).getChannel();\n+        FileInputStream fis \u003d null;\n+        FileOutputStream fos \u003d null;\n+        FileChannel input \u003d null;\n+        FileChannel output \u003d null;\n         try {\n-            FileChannel output \u003d new FileOutputStream(destFile).getChannel();\n-            try {\n-                output.transferFrom(input, 0, input.size());\n-            } finally {\n-                IOUtils.closeQuietly(output);\n+            fis \u003d new FileInputStream(srcFile);\n+            fos \u003d new FileOutputStream(destFile);\n+            input  \u003d fis.getChannel();\n+            output \u003d fos.getChannel();\n+            long size \u003d input.size();\n+            long pos \u003d 0;\n+            long count \u003d 0;\n+            while (pos \u003c size) {\n+                count \u003d (size - pos) \u003e FIFTY_MB ? FIFTY_MB : (size - pos);\n+                pos +\u003d output.transferFrom(input, pos, count);\n             }\n         } finally {\n+            IOUtils.closeQuietly(output);\n+            IOUtils.closeQuietly(fos);\n             IOUtils.closeQuietly(input);\n+            IOUtils.closeQuietly(fis);\n         }\n \n         if (srcFile.length() !\u003d destFile.length()) {\n             throw new IOException(\"Failed to copy full contents from \u0027\" +\n                     srcFile + \"\u0027 to \u0027\" + destFile + \"\u0027\");\n         }\n         if (preserveFileDate) {\n             destFile.setLastModified(srcFile.lastModified());\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ae8a261d47bec45e42904fd3e761860bab1e404c": {
      "type": "Ybodychange",
      "commitMessage": "IO-155 Use nio to copy files - based on a patch from Nicolas de Loof\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@619156 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1202333042000,
      "commitName": "ae8a261d47bec45e42904fd3e761860bab1e404c",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": 1202324477000,
      "commitNameOld": "a74a5a0c6ff41a4ca0a08caf740ebce1dc3c6d10",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n     private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\n         if (destFile.exists() \u0026\u0026 destFile.isDirectory()) {\n             throw new IOException(\"Destination \u0027\" + destFile + \"\u0027 exists but is a directory\");\n         }\n \n-        FileInputStream input \u003d new FileInputStream(srcFile);\n+        FileChannel input \u003d new FileInputStream(srcFile).getChannel();\n         try {\n-            FileOutputStream output \u003d new FileOutputStream(destFile);\n+            FileChannel output \u003d new FileOutputStream(destFile).getChannel();\n             try {\n-                IOUtils.copy(input, output);\n+                output.transferFrom(input, 0, input.size());\n             } finally {\n                 IOUtils.closeQuietly(output);\n             }\n         } finally {\n             IOUtils.closeQuietly(input);\n         }\n \n         if (srcFile.length() !\u003d destFile.length()) {\n             throw new IOException(\"Failed to copy full contents from \u0027\" +\n                     srcFile + \"\u0027 to \u0027\" + destFile + \"\u0027\");\n         }\n         if (preserveFileDate) {\n             destFile.setLastModified(srcFile.lastModified());\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "64320f1c02f6173874ffcd7d5261a0f193c206a0": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "Add copyDirectory, and refactor copyFile\nbug 32944, from Ian Springer\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@154553 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1108923234000,
      "commitName": "64320f1c02f6173874ffcd7d5261a0f193c206a0",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Add copyDirectory, and refactor copyFile\nbug 32944, from Ian Springer\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@154553 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1108923234000,
          "commitName": "64320f1c02f6173874ffcd7d5261a0f193c206a0",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1108914981000,
          "commitNameOld": "d7ab0e88337d961f47be82db20718dd7e1d1a06e",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.1,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,25 @@\n-    public static void copyFile(File source, File destination,\n-            boolean preserveFileDate)\n-            throws IOException {\n-        //check source exists\n-        if (!source.exists()) {\n-            String message \u003d \"File \" + source + \" does not exist\";\n-            throw new FileNotFoundException(message);\n+    private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\n+        if (destFile.exists() \u0026\u0026 destFile.isDirectory()) {\n+            throw new IOException(\"Destination \u0027\" + destFile + \"\u0027 exists but is a directory\");\n         }\n \n-        //does destinations directory exist ?\n-        if (destination.getParentFile() !\u003d null\n-            \u0026\u0026 !destination.getParentFile().exists()) {\n-            destination.getParentFile().mkdirs();\n-        }\n-\n-        //make sure we can write to destination\n-        if (destination.exists() \u0026\u0026 !destination.canWrite()) {\n-            String message \u003d\n-                \"Unable to open file \" + destination + \" for writing.\";\n-            throw new IOException(message);\n-        }\n-\n-        //makes sure it is not the same file\n-        if (source.getCanonicalPath().equals(destination.getCanonicalPath())) {\n-            String message \u003d\n-                \"Unable to write file \" + source + \" on itself.\";\n-            throw new IOException(message);\n-        }\n-\n-        FileInputStream input \u003d new FileInputStream(source);\n+        FileInputStream input \u003d new FileInputStream(srcFile);\n         try {\n-            FileOutputStream output \u003d new FileOutputStream(destination);\n+            FileOutputStream output \u003d new FileOutputStream(destFile);\n             try {\n                 IOUtils.copy(input, output);\n             } finally {\n                 IOUtils.closeQuietly(output);\n             }\n         } finally {\n             IOUtils.closeQuietly(input);\n         }\n \n-        if (source.length() !\u003d destination.length()) {\n-            String message \u003d\n-                \"Failed to copy full contents from \"\n-                    + source\n-                    + \" to \"\n-                    + destination;\n-            throw new IOException(message);\n+        if (srcFile.length() !\u003d destFile.length()) {\n+            throw new IOException(\"Failed to copy full contents from \u0027\" +\n+                    srcFile + \"\u0027 to \u0027\" + destFile + \"\u0027\");\n         }\n-\n         if (preserveFileDate) {\n-            //file copy should preserve file date\n-            destination.setLastModified(source.lastModified());\n+            destFile.setLastModified(srcFile.lastModified());\n         }\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldMethodName": "copyFile",
            "newMethodName": "doCopyFile"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Add copyDirectory, and refactor copyFile\nbug 32944, from Ian Springer\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@154553 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1108923234000,
          "commitName": "64320f1c02f6173874ffcd7d5261a0f193c206a0",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1108914981000,
          "commitNameOld": "d7ab0e88337d961f47be82db20718dd7e1d1a06e",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.1,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,25 @@\n-    public static void copyFile(File source, File destination,\n-            boolean preserveFileDate)\n-            throws IOException {\n-        //check source exists\n-        if (!source.exists()) {\n-            String message \u003d \"File \" + source + \" does not exist\";\n-            throw new FileNotFoundException(message);\n+    private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\n+        if (destFile.exists() \u0026\u0026 destFile.isDirectory()) {\n+            throw new IOException(\"Destination \u0027\" + destFile + \"\u0027 exists but is a directory\");\n         }\n \n-        //does destinations directory exist ?\n-        if (destination.getParentFile() !\u003d null\n-            \u0026\u0026 !destination.getParentFile().exists()) {\n-            destination.getParentFile().mkdirs();\n-        }\n-\n-        //make sure we can write to destination\n-        if (destination.exists() \u0026\u0026 !destination.canWrite()) {\n-            String message \u003d\n-                \"Unable to open file \" + destination + \" for writing.\";\n-            throw new IOException(message);\n-        }\n-\n-        //makes sure it is not the same file\n-        if (source.getCanonicalPath().equals(destination.getCanonicalPath())) {\n-            String message \u003d\n-                \"Unable to write file \" + source + \" on itself.\";\n-            throw new IOException(message);\n-        }\n-\n-        FileInputStream input \u003d new FileInputStream(source);\n+        FileInputStream input \u003d new FileInputStream(srcFile);\n         try {\n-            FileOutputStream output \u003d new FileOutputStream(destination);\n+            FileOutputStream output \u003d new FileOutputStream(destFile);\n             try {\n                 IOUtils.copy(input, output);\n             } finally {\n                 IOUtils.closeQuietly(output);\n             }\n         } finally {\n             IOUtils.closeQuietly(input);\n         }\n \n-        if (source.length() !\u003d destination.length()) {\n-            String message \u003d\n-                \"Failed to copy full contents from \"\n-                    + source\n-                    + \" to \"\n-                    + destination;\n-            throw new IOException(message);\n+        if (srcFile.length() !\u003d destFile.length()) {\n+            throw new IOException(\"Failed to copy full contents from \u0027\" +\n+                    srcFile + \"\u0027 to \u0027\" + destFile + \"\u0027\");\n         }\n-\n         if (preserveFileDate) {\n-            //file copy should preserve file date\n-            destination.setLastModified(source.lastModified());\n+            destFile.setLastModified(srcFile.lastModified());\n         }\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Add copyDirectory, and refactor copyFile\nbug 32944, from Ian Springer\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@154553 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1108923234000,
          "commitName": "64320f1c02f6173874ffcd7d5261a0f193c206a0",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1108914981000,
          "commitNameOld": "d7ab0e88337d961f47be82db20718dd7e1d1a06e",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.1,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,25 @@\n-    public static void copyFile(File source, File destination,\n-            boolean preserveFileDate)\n-            throws IOException {\n-        //check source exists\n-        if (!source.exists()) {\n-            String message \u003d \"File \" + source + \" does not exist\";\n-            throw new FileNotFoundException(message);\n+    private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\n+        if (destFile.exists() \u0026\u0026 destFile.isDirectory()) {\n+            throw new IOException(\"Destination \u0027\" + destFile + \"\u0027 exists but is a directory\");\n         }\n \n-        //does destinations directory exist ?\n-        if (destination.getParentFile() !\u003d null\n-            \u0026\u0026 !destination.getParentFile().exists()) {\n-            destination.getParentFile().mkdirs();\n-        }\n-\n-        //make sure we can write to destination\n-        if (destination.exists() \u0026\u0026 !destination.canWrite()) {\n-            String message \u003d\n-                \"Unable to open file \" + destination + \" for writing.\";\n-            throw new IOException(message);\n-        }\n-\n-        //makes sure it is not the same file\n-        if (source.getCanonicalPath().equals(destination.getCanonicalPath())) {\n-            String message \u003d\n-                \"Unable to write file \" + source + \" on itself.\";\n-            throw new IOException(message);\n-        }\n-\n-        FileInputStream input \u003d new FileInputStream(source);\n+        FileInputStream input \u003d new FileInputStream(srcFile);\n         try {\n-            FileOutputStream output \u003d new FileOutputStream(destination);\n+            FileOutputStream output \u003d new FileOutputStream(destFile);\n             try {\n                 IOUtils.copy(input, output);\n             } finally {\n                 IOUtils.closeQuietly(output);\n             }\n         } finally {\n             IOUtils.closeQuietly(input);\n         }\n \n-        if (source.length() !\u003d destination.length()) {\n-            String message \u003d\n-                \"Failed to copy full contents from \"\n-                    + source\n-                    + \" to \"\n-                    + destination;\n-            throw new IOException(message);\n+        if (srcFile.length() !\u003d destFile.length()) {\n+            throw new IOException(\"Failed to copy full contents from \u0027\" +\n+                    srcFile + \"\u0027 to \u0027\" + destFile + \"\u0027\");\n         }\n-\n         if (preserveFileDate) {\n-            //file copy should preserve file date\n-            destination.setLastModified(source.lastModified());\n+            destFile.setLastModified(srcFile.lastModified());\n         }\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Add copyDirectory, and refactor copyFile\nbug 32944, from Ian Springer\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@154553 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1108923234000,
          "commitName": "64320f1c02f6173874ffcd7d5261a0f193c206a0",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1108914981000,
          "commitNameOld": "d7ab0e88337d961f47be82db20718dd7e1d1a06e",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.1,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,25 @@\n-    public static void copyFile(File source, File destination,\n-            boolean preserveFileDate)\n-            throws IOException {\n-        //check source exists\n-        if (!source.exists()) {\n-            String message \u003d \"File \" + source + \" does not exist\";\n-            throw new FileNotFoundException(message);\n+    private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\n+        if (destFile.exists() \u0026\u0026 destFile.isDirectory()) {\n+            throw new IOException(\"Destination \u0027\" + destFile + \"\u0027 exists but is a directory\");\n         }\n \n-        //does destinations directory exist ?\n-        if (destination.getParentFile() !\u003d null\n-            \u0026\u0026 !destination.getParentFile().exists()) {\n-            destination.getParentFile().mkdirs();\n-        }\n-\n-        //make sure we can write to destination\n-        if (destination.exists() \u0026\u0026 !destination.canWrite()) {\n-            String message \u003d\n-                \"Unable to open file \" + destination + \" for writing.\";\n-            throw new IOException(message);\n-        }\n-\n-        //makes sure it is not the same file\n-        if (source.getCanonicalPath().equals(destination.getCanonicalPath())) {\n-            String message \u003d\n-                \"Unable to write file \" + source + \" on itself.\";\n-            throw new IOException(message);\n-        }\n-\n-        FileInputStream input \u003d new FileInputStream(source);\n+        FileInputStream input \u003d new FileInputStream(srcFile);\n         try {\n-            FileOutputStream output \u003d new FileOutputStream(destination);\n+            FileOutputStream output \u003d new FileOutputStream(destFile);\n             try {\n                 IOUtils.copy(input, output);\n             } finally {\n                 IOUtils.closeQuietly(output);\n             }\n         } finally {\n             IOUtils.closeQuietly(input);\n         }\n \n-        if (source.length() !\u003d destination.length()) {\n-            String message \u003d\n-                \"Failed to copy full contents from \"\n-                    + source\n-                    + \" to \"\n-                    + destination;\n-            throw new IOException(message);\n+        if (srcFile.length() !\u003d destFile.length()) {\n+            throw new IOException(\"Failed to copy full contents from \u0027\" +\n+                    srcFile + \"\u0027 to \u0027\" + destFile + \"\u0027\");\n         }\n-\n         if (preserveFileDate) {\n-            //file copy should preserve file date\n-            destination.setLastModified(source.lastModified());\n+            destFile.setLastModified(srcFile.lastModified());\n         }\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "f0c9d8d08404ba2bad6c581bc76ecb1eef6c9bff": {
      "type": "Ybodychange",
      "commitMessage": "Deprecate CopyUtils (reverting to v1.0)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140598 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1092441101000,
      "commitName": "f0c9d8d08404ba2bad6c581bc76ecb1eef6c9bff",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": 1090663121000,
      "commitNameOld": "891b02a1e7960248d36d1569a7bf2c7063ffce60",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 20.58,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n     public static void copyFile(File source, File destination, boolean preserveFileDate)\n                 throws IOException {\n         //check source exists\n         if (!source.exists()) {\n             String message \u003d \"File \" + source + \" does not exist\";\n             throw new FileNotFoundException(message);\n         }\n \n         //does destinations directory exist ?\n         if (destination.getParentFile() !\u003d null\n             \u0026\u0026 !destination.getParentFile().exists()) {\n             destination.getParentFile().mkdirs();\n         }\n \n         //make sure we can write to destination\n         if (destination.exists() \u0026\u0026 !destination.canWrite()) {\n             String message \u003d\n                 \"Unable to open file \" + destination + \" for writing.\";\n             throw new IOException(message);\n         }\n \n         //makes sure it is not the same file        \n         if (source.getCanonicalPath().equals(destination.getCanonicalPath())) {\n             String message \u003d\n                 \"Unable to write file \" + source + \" on itself.\";\n             throw new IOException(message);\n         }\n \n         FileInputStream input \u003d new FileInputStream(source);\n         try {\n             FileOutputStream output \u003d new FileOutputStream(destination);\n             try {\n-                CopyUtils.copy(input, output);\n+                IOUtils.copy(input, output);\n             } finally {\n                 IOUtils.closeQuietly(output);\n             }\n         } finally {\n             IOUtils.closeQuietly(input);\n         }\n \n         if (source.length() !\u003d destination.length()) {\n             String message \u003d\n                 \"Failed to copy full contents from \"\n                     + source\n                     + \" to \"\n                     + destination;\n             throw new IOException(message);\n         }\n         \n         if (preserveFileDate) {\n             //file copy should preserve file date\n             destination.setLastModified(source.lastModified());        \n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4127f8592e1e43b72626998fdee07f1e3c0ec928": {
      "type": "Ybodychange",
      "commitMessage": "Bugzilla 28496\nFix for: org.apache.commons.io.FileUtils.copyFile shouldn\u0027t allow to copy a file on itself\nSubmitted by: dany rizzi \u003cdrizzi.at.largesys.it\u003e\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140558 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1082760459000,
      "commitName": "4127f8592e1e43b72626998fdee07f1e3c0ec928",
      "commitAuthor": "Jeremias Maerki",
      "commitDateOld": 1079130145000,
      "commitNameOld": "1bdcc3d74cd87ca5a128f466d31dbca61429ce30",
      "commitAuthorOld": "Jeremias Maerki",
      "daysBetweenCommits": 42.02,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,54 @@\n     public static void copyFile(File source, File destination, boolean preserveFileDate)\n                 throws IOException {\n         //check source exists\n         if (!source.exists()) {\n             String message \u003d \"File \" + source + \" does not exist\";\n             throw new FileNotFoundException(message);\n         }\n \n         //does destinations directory exist ?\n         if (destination.getParentFile() !\u003d null\n             \u0026\u0026 !destination.getParentFile().exists()) {\n             destination.getParentFile().mkdirs();\n         }\n \n         //make sure we can write to destination\n         if (destination.exists() \u0026\u0026 !destination.canWrite()) {\n             String message \u003d\n                 \"Unable to open file \" + destination + \" for writing.\";\n             throw new IOException(message);\n         }\n \n+        //makes sure it is not the same file        \n+        if (source.getCanonicalPath().equals(destination.getCanonicalPath())) {\n+            String message \u003d\n+                \"Unable to write file \" + source + \" on itself.\";\n+            throw new IOException(message);\n+        }\n+\n         FileInputStream input \u003d new FileInputStream(source);\n         try {\n             FileOutputStream output \u003d new FileOutputStream(destination);\n             try {\n                 CopyUtils.copy(input, output);\n             } finally {\n                 IOUtils.closeQuietly(output);\n             }\n         } finally {\n             IOUtils.closeQuietly(input);\n         }\n \n         if (source.length() !\u003d destination.length()) {\n             String message \u003d\n                 \"Failed to copy full contents from \"\n                     + source\n                     + \" to \"\n                     + destination;\n             throw new IOException(message);\n         }\n         \n         if (preserveFileDate) {\n             //file copy should preserve file date\n             destination.setLastModified(source.lastModified());        \n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1bdcc3d74cd87ca5a128f466d31dbca61429ce30": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "File copy operations now preserve the file date by default. An additional copyFile variant enables to disable this feature.\nSuggested by: Craig Doremus \u003ccraig.at.maine.com\u003e in Bugzilla #27615\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140542 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1079130145000,
      "commitName": "1bdcc3d74cd87ca5a128f466d31dbca61429ce30",
      "commitAuthor": "Jeremias Maerki",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "File copy operations now preserve the file date by default. An additional copyFile variant enables to disable this feature.\nSuggested by: Craig Doremus \u003ccraig.at.maine.com\u003e in Bugzilla #27615\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140542 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1079130145000,
          "commitName": "1bdcc3d74cd87ca5a128f466d31dbca61429ce30",
          "commitAuthor": "Jeremias Maerki",
          "commitDateOld": 1079127887000,
          "commitNameOld": "b13ad1c26d5473dd0559bb78a3424a562cec92b1",
          "commitAuthorOld": "Jeremias Maerki",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,47 @@\n-    public static void copyFile(File source, File destination)\n-        throws IOException {\n+    public static void copyFile(File source, File destination, boolean preserveFileDate)\n+                throws IOException {\n         //check source exists\n         if (!source.exists()) {\n             String message \u003d \"File \" + source + \" does not exist\";\n             throw new FileNotFoundException(message);\n         }\n \n         //does destinations directory exist ?\n         if (destination.getParentFile() !\u003d null\n             \u0026\u0026 !destination.getParentFile().exists()) {\n             destination.getParentFile().mkdirs();\n         }\n \n         //make sure we can write to destination\n         if (destination.exists() \u0026\u0026 !destination.canWrite()) {\n             String message \u003d\n                 \"Unable to open file \" + destination + \" for writing.\";\n             throw new IOException(message);\n         }\n \n         FileInputStream input \u003d new FileInputStream(source);\n         try {\n             FileOutputStream output \u003d new FileOutputStream(destination);\n             try {\n                 CopyUtils.copy(input, output);\n             } finally {\n                 IOUtils.closeQuietly(output);\n             }\n         } finally {\n             IOUtils.closeQuietly(input);\n         }\n \n         if (source.length() !\u003d destination.length()) {\n             String message \u003d\n                 \"Failed to copy full contents from \"\n                     + source\n                     + \" to \"\n                     + destination;\n             throw new IOException(message);\n         }\n+        \n+        if (preserveFileDate) {\n+            //file copy should preserve file date\n+            destination.setLastModified(source.lastModified());        \n+        }\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ybodychange",
          "commitMessage": "File copy operations now preserve the file date by default. An additional copyFile variant enables to disable this feature.\nSuggested by: Craig Doremus \u003ccraig.at.maine.com\u003e in Bugzilla #27615\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140542 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1079130145000,
          "commitName": "1bdcc3d74cd87ca5a128f466d31dbca61429ce30",
          "commitAuthor": "Jeremias Maerki",
          "commitDateOld": 1079127887000,
          "commitNameOld": "b13ad1c26d5473dd0559bb78a3424a562cec92b1",
          "commitAuthorOld": "Jeremias Maerki",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,47 @@\n-    public static void copyFile(File source, File destination)\n-        throws IOException {\n+    public static void copyFile(File source, File destination, boolean preserveFileDate)\n+                throws IOException {\n         //check source exists\n         if (!source.exists()) {\n             String message \u003d \"File \" + source + \" does not exist\";\n             throw new FileNotFoundException(message);\n         }\n \n         //does destinations directory exist ?\n         if (destination.getParentFile() !\u003d null\n             \u0026\u0026 !destination.getParentFile().exists()) {\n             destination.getParentFile().mkdirs();\n         }\n \n         //make sure we can write to destination\n         if (destination.exists() \u0026\u0026 !destination.canWrite()) {\n             String message \u003d\n                 \"Unable to open file \" + destination + \" for writing.\";\n             throw new IOException(message);\n         }\n \n         FileInputStream input \u003d new FileInputStream(source);\n         try {\n             FileOutputStream output \u003d new FileOutputStream(destination);\n             try {\n                 CopyUtils.copy(input, output);\n             } finally {\n                 IOUtils.closeQuietly(output);\n             }\n         } finally {\n             IOUtils.closeQuietly(input);\n         }\n \n         if (source.length() !\u003d destination.length()) {\n             String message \u003d\n                 \"Failed to copy full contents from \"\n                     + source\n                     + \" to \"\n                     + destination;\n             throw new IOException(message);\n         }\n+        \n+        if (preserveFileDate) {\n+            //file copy should preserve file date\n+            destination.setLastModified(source.lastModified());        \n+        }\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "d5e24a4f1a2ff0e5c565f5b78fc0691e639b876e": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "removed lots of finals\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140456 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1072767169000,
      "commitName": "d5e24a4f1a2ff0e5c565f5b78fc0691e639b876e",
      "commitAuthor": "Henri Yandell",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "removed lots of finals\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140456 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1072767169000,
          "commitName": "d5e24a4f1a2ff0e5c565f5b78fc0691e639b876e",
          "commitAuthor": "Henri Yandell",
          "commitDateOld": 1072703692000,
          "commitNameOld": "a330996bf5514705e476d491069b1a4a65794023",
          "commitAuthorOld": "Henri Yandell",
          "daysBetweenCommits": 0.73,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,42 @@\n-    public static void copyFile(final File source, final File destination)\n+    public static void copyFile(File source, File destination)\n         throws IOException {\n         //check source exists\n         if (!source.exists()) {\n-            final String message \u003d \"File \" + source + \" does not exist\";\n+            String message \u003d \"File \" + source + \" does not exist\";\n             throw new FileNotFoundException(message);\n         }\n \n         //does destinations directory exist ?\n         if (destination.getParentFile() !\u003d null\n             \u0026\u0026 !destination.getParentFile().exists()) {\n             destination.getParentFile().mkdirs();\n         }\n \n         //make sure we can write to destination\n         if (destination.exists() \u0026\u0026 !destination.canWrite()) {\n-            final String message \u003d\n+            String message \u003d\n                 \"Unable to open file \" + destination + \" for writing.\";\n             throw new IOException(message);\n         }\n \n-        final FileInputStream input \u003d new FileInputStream(source);\n+        FileInputStream input \u003d new FileInputStream(source);\n         try {\n-            final FileOutputStream output \u003d new FileOutputStream(destination);\n+            FileOutputStream output \u003d new FileOutputStream(destination);\n             try {\n                 CopyUtils.copy(input, output);\n             } finally {\n                 IOUtils.closeQuietly(output);\n             }\n         } finally {\n             IOUtils.closeQuietly(input);\n         }\n \n         if (source.length() !\u003d destination.length()) {\n-            final String message \u003d\n+            String message \u003d\n                 \"Failed to copy full contents from \"\n                     + source\n                     + \" to \"\n                     + destination;\n             throw new IOException(message);\n         }\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "removed lots of finals\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140456 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1072767169000,
          "commitName": "d5e24a4f1a2ff0e5c565f5b78fc0691e639b876e",
          "commitAuthor": "Henri Yandell",
          "commitDateOld": 1072703692000,
          "commitNameOld": "a330996bf5514705e476d491069b1a4a65794023",
          "commitAuthorOld": "Henri Yandell",
          "daysBetweenCommits": 0.73,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,42 @@\n-    public static void copyFile(final File source, final File destination)\n+    public static void copyFile(File source, File destination)\n         throws IOException {\n         //check source exists\n         if (!source.exists()) {\n-            final String message \u003d \"File \" + source + \" does not exist\";\n+            String message \u003d \"File \" + source + \" does not exist\";\n             throw new FileNotFoundException(message);\n         }\n \n         //does destinations directory exist ?\n         if (destination.getParentFile() !\u003d null\n             \u0026\u0026 !destination.getParentFile().exists()) {\n             destination.getParentFile().mkdirs();\n         }\n \n         //make sure we can write to destination\n         if (destination.exists() \u0026\u0026 !destination.canWrite()) {\n-            final String message \u003d\n+            String message \u003d\n                 \"Unable to open file \" + destination + \" for writing.\";\n             throw new IOException(message);\n         }\n \n-        final FileInputStream input \u003d new FileInputStream(source);\n+        FileInputStream input \u003d new FileInputStream(source);\n         try {\n-            final FileOutputStream output \u003d new FileOutputStream(destination);\n+            FileOutputStream output \u003d new FileOutputStream(destination);\n             try {\n                 CopyUtils.copy(input, output);\n             } finally {\n                 IOUtils.closeQuietly(output);\n             }\n         } finally {\n             IOUtils.closeQuietly(input);\n         }\n \n         if (source.length() !\u003d destination.length()) {\n-            final String message \u003d\n+            String message \u003d\n                 \"Failed to copy full contents from \"\n                     + source\n                     + \" to \"\n                     + destination;\n             throw new IOException(message);\n         }\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "418d7a0ac343be700fd251d747bcc2d7ac0056d7": {
      "type": "Ybodychange",
      "commitMessage": "Renamed shutdownXxx methods to closeQuietly(Xxx).\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140449 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1072668533000,
      "commitName": "418d7a0ac343be700fd251d747bcc2d7ac0056d7",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": 1072350359000,
      "commitNameOld": "65b3c8a113786f6fb9ab9a387d9631012395fcf0",
      "commitAuthorOld": "Jeremias Maerki",
      "daysBetweenCommits": 3.68,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n     public static void copyFile(final File source, final File destination)\n         throws IOException {\n         //check source exists\n         if (!source.exists()) {\n             final String message \u003d \"File \" + source + \" does not exist\";\n             throw new FileNotFoundException(message);\n         }\n \n         //does destinations directory exist ?\n         if (destination.getParentFile() !\u003d null\n             \u0026\u0026 !destination.getParentFile().exists()) {\n             destination.getParentFile().mkdirs();\n         }\n \n         //make sure we can write to destination\n         if (destination.exists() \u0026\u0026 !destination.canWrite()) {\n             final String message \u003d\n                 \"Unable to open file \" + destination + \" for writing.\";\n             throw new IOException(message);\n         }\n \n         final FileInputStream input \u003d new FileInputStream(source);\n         try {\n             final FileOutputStream output \u003d new FileOutputStream(destination);\n             try {\n                 CopyUtils.copy(input, output);\n             } finally {\n-                IOUtils.shutdownStream(output);\n+                IOUtils.closeQuietly(output);\n             }\n         } finally {\n-            IOUtils.shutdownStream(input);\n+            IOUtils.closeQuietly(input);\n         }\n \n         if (source.length() !\u003d destination.length()) {\n             final String message \u003d\n                 \"Failed to copy full contents from \"\n                     + source\n                     + \" to \"\n                     + destination;\n             throw new IOException(message);\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3e4ec2a42b3118266deada58dbee39db2a48677b": {
      "type": "Ybodychange",
      "commitMessage": "I\u0027ve moved some methods around while cleaning up, so, sorry for the big diff. I moved up the methods I checked through. There\u0027s a marker in the lower half of the file indicating where I progressed. Everything below that marker still has to be sorted out. I consider the stuff above that marker cleaned up and reviewed to a certain degree.\n\nReal changes are:\n- new method: touch(File)\n- some method signatures rewritten to use java.io.File instead of String, because it\u0027s this class\u0027 policy. This might break dependant projects.\n- updated some javadocs\n- Removed getFilesFromExtension (this method wants to do too much). This might break dependant projects.\n- Replacement for getFilesFromExtension, new method(s): listFiles which is implemented using the filefilter package. The CVS filter functionality of getFilesFromExtension can be achieved by using FileFilterUtils.makeCVSAware.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140405 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1069533888000,
      "commitName": "3e4ec2a42b3118266deada58dbee39db2a48677b",
      "commitAuthor": "Jeremias Maerki",
      "commitDateOld": 1066421778000,
      "commitNameOld": "d9224439fc7c437a665ae4b5d9f91e3676b90496",
      "commitAuthorOld": "Matthew Hawthorne",
      "daysBetweenCommits": 36.02,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n     public static void copyFile(final File source, final File destination)\n         throws IOException {\n         //check source exists\n         if (!source.exists()) {\n             final String message \u003d \"File \" + source + \" does not exist\";\n-            throw new IOException(message);\n+            throw new FileNotFoundException(message);\n         }\n \n         //does destinations directory exist ?\n         if (destination.getParentFile() !\u003d null\n             \u0026\u0026 !destination.getParentFile().exists()) {\n             destination.getParentFile().mkdirs();\n         }\n \n         //make sure we can write to destination\n         if (destination.exists() \u0026\u0026 !destination.canWrite()) {\n             final String message \u003d\n                 \"Unable to open file \" + destination + \" for writing.\";\n             throw new IOException(message);\n         }\n \n         final FileInputStream input \u003d new FileInputStream(source);\n         try {\n             final FileOutputStream output \u003d new FileOutputStream(destination);\n             try {\n                 CopyUtils.copy(input, output);\n             } finally {\n                 IOUtils.shutdownStream(output);\n             }\n         } finally {\n             IOUtils.shutdownStream(input);\n         }\n \n         if (source.length() !\u003d destination.length()) {\n             final String message \u003d\n                 \"Failed to copy full contents from \"\n                     + source\n                     + \" to \"\n                     + destination;\n             throw new IOException(message);\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6a1bb4d53562a50bbaad48ee2c94971649e24cf5": {
      "type": "Ybodychange",
      "commitMessage": "Bugzilla 22075: Copy copy methods from IOUtils to CopyUtils, deprecate old copy methods.\nBugzilla 22332: Deprecated FileUtils string methods, Code style-up\nSubmitted by: Matthew Hawthorne \u003cmhawthorne at alumni.pitt.edu\u003e\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140382 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1061491248000,
      "commitName": "6a1bb4d53562a50bbaad48ee2c94971649e24cf5",
      "commitAuthor": "Jeremias Maerki",
      "commitDateOld": 1059484059000,
      "commitNameOld": "41669d5e6724f1e1d31d85f02adda2d923ca4393",
      "commitAuthorOld": "Jeremias Maerki",
      "daysBetweenCommits": 23.23,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,42 @@\n-    public static void copyFile( final File source, final File destination )\n-        throws IOException\n-    {\n+    public static void copyFile(final File source, final File destination)\n+        throws IOException {\n         //check source exists\n-        if( !source.exists() )\n-        {\n+        if (!source.exists()) {\n             final String message \u003d \"File \" + source + \" does not exist\";\n-            throw new IOException( message );\n+            throw new IOException(message);\n         }\n \n         //does destinations directory exist ?\n-        if( destination.getParentFile() !\u003d null \u0026\u0026\n-            !destination.getParentFile().exists() )\n-        {\n+        if (destination.getParentFile() !\u003d null\n+            \u0026\u0026 !destination.getParentFile().exists()) {\n             destination.getParentFile().mkdirs();\n         }\n \n         //make sure we can write to destination\n-        if( destination.exists() \u0026\u0026 !destination.canWrite() )\n-        {\n-            final String message \u003d \"Unable to open file \" +\n-                destination + \" for writing.\";\n-            throw new IOException( message );\n+        if (destination.exists() \u0026\u0026 !destination.canWrite()) {\n+            final String message \u003d\n+                \"Unable to open file \" + destination + \" for writing.\";\n+            throw new IOException(message);\n         }\n \n-        final FileInputStream input \u003d new FileInputStream( source );\n-        final FileOutputStream output \u003d new FileOutputStream( destination );\n-        IOUtils.copy( input, output );\n-        IOUtils.shutdownStream( input );\n-        IOUtils.shutdownStream( output );\n+        final FileInputStream input \u003d new FileInputStream(source);\n+        try {\n+            final FileOutputStream output \u003d new FileOutputStream(destination);\n+            try {\n+                CopyUtils.copy(input, output);\n+            } finally {\n+                IOUtils.shutdownStream(output);\n+            }\n+        } finally {\n+            IOUtils.shutdownStream(input);\n+        }\n \n-        if( source.length() !\u003d destination.length() )\n-        {\n-            final String message \u003d \"Failed to copy full contents from \" + source +\n-                \" to \" + destination;\n-            throw new IOException( message );\n+        if (source.length() !\u003d destination.length()) {\n+            final String message \u003d\n+                \"Failed to copy full contents from \"\n+                    + source\n+                    + \" to \"\n+                    + destination;\n+            throw new IOException(message);\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7748ed36401ea37104ae313be804f81f2526cd6d": {
      "type": "Ybodychange",
      "commitMessage": "IOUtil to IOUtils and EndianUtil to EndianUtils.\nFix references so dependant classes reference *Utils\nSubmitted by: Matthew Hawthorne \u003cmhawthorne@alumni.pitt.edu\u003e\n\nDeprecate IOUtil and EndianUtil.\nFix some of the license headers (more to do)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140365 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1059119486000,
      "commitName": "7748ed36401ea37104ae313be804f81f2526cd6d",
      "commitAuthor": "Jeremias Maerki",
      "commitDateOld": 1027889326000,
      "commitNameOld": "db7b3426781854f492c1ba2427abe660a4c2b58a",
      "commitAuthorOld": "Daniel Rall",
      "daysBetweenCommits": 361.46,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n     public static void copyFile( final File source, final File destination )\n         throws IOException\n     {\n         //check source exists\n         if( !source.exists() )\n         {\n             final String message \u003d \"File \" + source + \" does not exist\";\n             throw new IOException( message );\n         }\n \n         //does destinations directory exist ?\n         if( destination.getParentFile() !\u003d null \u0026\u0026\n             !destination.getParentFile().exists() )\n         {\n             destination.getParentFile().mkdirs();\n         }\n \n         //make sure we can write to destination\n         if( destination.exists() \u0026\u0026 !destination.canWrite() )\n         {\n             final String message \u003d \"Unable to open file \" +\n                 destination + \" for writing.\";\n             throw new IOException( message );\n         }\n \n         final FileInputStream input \u003d new FileInputStream( source );\n         final FileOutputStream output \u003d new FileOutputStream( destination );\n-        IOUtil.copy( input, output );\n-        IOUtil.shutdownStream( input );\n-        IOUtil.shutdownStream( output );\n+        IOUtils.copy( input, output );\n+        IOUtils.shutdownStream( input );\n+        IOUtils.shutdownStream( output );\n \n         if( source.length() !\u003d destination.length() )\n         {\n             final String message \u003d \"Failed to copy full contents from \" + source +\n                 \" to \" + destination;\n             throw new IOException( message );\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8eeb52fc81c4e65c00839cfeef9f1cde8b1cc613": {
      "type": "Ymovefromfile",
      "commitMessage": "FileUtil moved into FileUtils. Oddly enough no methods clash in name.\nHowever there is a lot of clash of functionality, so methods need to be\nconsidered and removed.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140314 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1027819689000,
      "commitName": "8eeb52fc81c4e65c00839cfeef9f1cde8b1cc613",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": 1026599866000,
      "commitNameOld": "fcb1f1dc86e216faca4bdb9626200d99a6d9915a",
      "commitAuthorOld": "Nicola Ken Barozzi",
      "daysBetweenCommits": 14.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/io/FileUtil.java",
        "newPath": "src/java/org/apache/commons/io/FileUtils.java",
        "oldMethodName": "copyFile",
        "newMethodName": "copyFile"
      }
    },
    "c360a10db25701f682849e5913d150f13a09f3bb": {
      "type": "Yintroduced",
      "commitMessage": "New io classes from Avalon excalibur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140301 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1026166486000,
      "commitName": "c360a10db25701f682849e5913d150f13a09f3bb",
      "commitAuthor": "Nicola Ken Barozzi"
    }
  }
}