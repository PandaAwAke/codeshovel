{
  "origin": "codeshovel",
  "repositoryName": "commons-io",
  "repositoryPath": "/repos/commons-io/.git",
  "startCommitName": "559de2c461e94ab636c959149c775bb27111fb48",
  "sourceFileName": "FileUtils.java",
  "functionName": "copyDirectory",
  "functionId": "copyDirectory___srcDir-File__destDir-File__preserveFileDate-boolean",
  "sourceFilePath": "src/main/java/org/apache/commons/io/FileUtils.java",
  "functionStartLine": 1254,
  "functionEndLine": 1257,
  "changeHistory": [
    "6aa00766b9103d75c763160280429af8e1f0549e",
    "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a",
    "7cbb2763115558b029da2d1b409d5d3ce7f13655",
    "2f8d0922c8c7d1be2c12fba6264f08acdbae47d1",
    "64320f1c02f6173874ffcd7d5261a0f193c206a0",
    "f0c9d8d08404ba2bad6c581bc76ecb1eef6c9bff",
    "4127f8592e1e43b72626998fdee07f1e3c0ec928",
    "1bdcc3d74cd87ca5a128f466d31dbca61429ce30",
    "d5e24a4f1a2ff0e5c565f5b78fc0691e639b876e",
    "418d7a0ac343be700fd251d747bcc2d7ac0056d7",
    "3e4ec2a42b3118266deada58dbee39db2a48677b",
    "6a1bb4d53562a50bbaad48ee2c94971649e24cf5",
    "7748ed36401ea37104ae313be804f81f2526cd6d",
    "8eeb52fc81c4e65c00839cfeef9f1cde8b1cc613",
    "c360a10db25701f682849e5913d150f13a09f3bb"
  ],
  "changeHistoryShort": {
    "6aa00766b9103d75c763160280429af8e1f0549e": "Yparametermetachange",
    "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a": "Yfilerename",
    "7cbb2763115558b029da2d1b409d5d3ce7f13655": "Ybodychange",
    "2f8d0922c8c7d1be2c12fba6264f08acdbae47d1": "Ybodychange",
    "64320f1c02f6173874ffcd7d5261a0f193c206a0": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "f0c9d8d08404ba2bad6c581bc76ecb1eef6c9bff": "Ybodychange",
    "4127f8592e1e43b72626998fdee07f1e3c0ec928": "Ybodychange",
    "1bdcc3d74cd87ca5a128f466d31dbca61429ce30": "Ymultichange(Yparameterchange,Ybodychange)",
    "d5e24a4f1a2ff0e5c565f5b78fc0691e639b876e": "Ymultichange(Ybodychange,Yparametermetachange)",
    "418d7a0ac343be700fd251d747bcc2d7ac0056d7": "Ybodychange",
    "3e4ec2a42b3118266deada58dbee39db2a48677b": "Ybodychange",
    "6a1bb4d53562a50bbaad48ee2c94971649e24cf5": "Ybodychange",
    "7748ed36401ea37104ae313be804f81f2526cd6d": "Ybodychange",
    "8eeb52fc81c4e65c00839cfeef9f1cde8b1cc613": "Ymovefromfile",
    "c360a10db25701f682849e5913d150f13a09f3bb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6aa00766b9103d75c763160280429af8e1f0549e": {
      "type": "Yparametermetachange",
      "commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1354308699000,
      "commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": 1351082444000,
      "commitNameOld": "965f66687351e0abd445925d0497f96e5656ff13",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 37.34,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,4 +1,4 @@\n-    public static void copyDirectory(File srcDir, File destDir,\n-            boolean preserveFileDate) throws IOException {\n+    public static void copyDirectory(final File srcDir, final File destDir,\n+            final boolean preserveFileDate) throws IOException {\n         copyDirectory(srcDir, destDir, null, preserveFileDate);\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a": {
      "type": "Yfilerename",
      "commitMessage": "Build changes - re-organize to standard m2 layout, remove useless JIRA report and fix some Ant issues\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1004358 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1286218476000,
      "commitName": "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": 1286214840000,
      "commitNameOld": "19f48eb1711427a43a5e10c84bbbf1218a08bdd2",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/io/FileUtils.java",
        "newPath": "src/main/java/org/apache/commons/io/FileUtils.java"
      }
    },
    "7cbb2763115558b029da2d1b409d5d3ce7f13655": {
      "type": "Ybodychange",
      "commitMessage": "IO-105 - Add a FileUtils copyDirectory method that makes use of FileFilter\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@609471 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1199662500000,
      "commitName": "7cbb2763115558b029da2d1b409d5d3ce7f13655",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": 1199651616000,
      "commitNameOld": "da8e3183bd70cdb2e1b9441e2e4b640e3fc27fad",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,4 @@\n     public static void copyDirectory(File srcDir, File destDir,\n             boolean preserveFileDate) throws IOException {\n-        if (srcDir \u003d\u003d null) {\n-            throw new NullPointerException(\"Source must not be null\");\n-        }\n-        if (destDir \u003d\u003d null) {\n-            throw new NullPointerException(\"Destination must not be null\");\n-        }\n-        if (srcDir.exists() \u003d\u003d false) {\n-            throw new FileNotFoundException(\"Source \u0027\" + srcDir + \"\u0027 does not exist\");\n-        }\n-        if (srcDir.isDirectory() \u003d\u003d false) {\n-            throw new IOException(\"Source \u0027\" + srcDir + \"\u0027 exists but is not a directory\");\n-        }\n-        if (srcDir.getCanonicalPath().equals(destDir.getCanonicalPath())) {\n-            throw new IOException(\"Source \u0027\" + srcDir + \"\u0027 and destination \u0027\" + destDir + \"\u0027 are the same\");\n-        }\n-\n-        // Cater for destination being directory within the source directory (see IO-141)\n-        List exclusionList \u003d null;\n-        if (destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath())) {\n-            File[] srcFiles \u003d srcDir.listFiles();\n-            if (srcFiles !\u003d null \u0026\u0026 srcFiles.length \u003e 0) {\n-                exclusionList \u003d new ArrayList(srcFiles.length);\n-                for (int i \u003d 0; i \u003c srcFiles.length; i++) {\n-                    File copiedFile \u003d new File(destDir, srcFiles[i].getName());\n-                    exclusionList.add(copiedFile.getCanonicalPath());\n-                }\n-            }\n-        }\n-        doCopyDirectory(srcDir, destDir, preserveFileDate, exclusionList);\n+        copyDirectory(srcDir, destDir, null, preserveFileDate);\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2f8d0922c8c7d1be2c12fba6264f08acdbae47d1": {
      "type": "Ybodychange",
      "commitMessage": "IO-141 - Infinite loop on FileUtils.copyDirectory when the destination directory is within the source directory - reported by Mark Bryan Yu\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@609147 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1199545555000,
      "commitName": "2f8d0922c8c7d1be2c12fba6264f08acdbae47d1",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": 1199335637000,
      "commitNameOld": "50f9c9370c1286039fb6750e08e0fcbc20c6adc0",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 2.43,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,32 @@\n     public static void copyDirectory(File srcDir, File destDir,\n             boolean preserveFileDate) throws IOException {\n         if (srcDir \u003d\u003d null) {\n             throw new NullPointerException(\"Source must not be null\");\n         }\n         if (destDir \u003d\u003d null) {\n             throw new NullPointerException(\"Destination must not be null\");\n         }\n         if (srcDir.exists() \u003d\u003d false) {\n             throw new FileNotFoundException(\"Source \u0027\" + srcDir + \"\u0027 does not exist\");\n         }\n         if (srcDir.isDirectory() \u003d\u003d false) {\n             throw new IOException(\"Source \u0027\" + srcDir + \"\u0027 exists but is not a directory\");\n         }\n         if (srcDir.getCanonicalPath().equals(destDir.getCanonicalPath())) {\n             throw new IOException(\"Source \u0027\" + srcDir + \"\u0027 and destination \u0027\" + destDir + \"\u0027 are the same\");\n         }\n-        doCopyDirectory(srcDir, destDir, preserveFileDate);\n+\n+        // Cater for destination being directory within the source directory (see IO-141)\n+        List exclusionList \u003d null;\n+        if (destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath())) {\n+            File[] srcFiles \u003d srcDir.listFiles();\n+            if (srcFiles !\u003d null \u0026\u0026 srcFiles.length \u003e 0) {\n+                exclusionList \u003d new ArrayList(srcFiles.length);\n+                for (int i \u003d 0; i \u003c srcFiles.length; i++) {\n+                    File copiedFile \u003d new File(destDir, srcFiles[i].getName());\n+                    exclusionList.add(copiedFile.getCanonicalPath());\n+                }\n+            }\n+        }\n+        doCopyDirectory(srcDir, destDir, preserveFileDate, exclusionList);\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "64320f1c02f6173874ffcd7d5261a0f193c206a0": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "Add copyDirectory, and refactor copyFile\nbug 32944, from Ian Springer\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@154553 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1108923234000,
      "commitName": "64320f1c02f6173874ffcd7d5261a0f193c206a0",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Add copyDirectory, and refactor copyFile\nbug 32944, from Ian Springer\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@154553 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1108923234000,
          "commitName": "64320f1c02f6173874ffcd7d5261a0f193c206a0",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1108914981000,
          "commitNameOld": "d7ab0e88337d961f47be82db20718dd7e1d1a06e",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.1,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,19 @@\n-    public static void copyFile(File source, File destination,\n-            boolean preserveFileDate)\n-            throws IOException {\n-        //check source exists\n-        if (!source.exists()) {\n-            String message \u003d \"File \" + source + \" does not exist\";\n-            throw new FileNotFoundException(message);\n+    public static void copyDirectory(File srcDir, File destDir,\n+            boolean preserveFileDate) throws IOException {\n+        if (srcDir \u003d\u003d null) {\n+            throw new NullPointerException(\"Source must not be null\");\n         }\n-\n-        //does destinations directory exist ?\n-        if (destination.getParentFile() !\u003d null\n-            \u0026\u0026 !destination.getParentFile().exists()) {\n-            destination.getParentFile().mkdirs();\n+        if (destDir \u003d\u003d null) {\n+            throw new NullPointerException(\"Destination must not be null\");\n         }\n-\n-        //make sure we can write to destination\n-        if (destination.exists() \u0026\u0026 !destination.canWrite()) {\n-            String message \u003d\n-                \"Unable to open file \" + destination + \" for writing.\";\n-            throw new IOException(message);\n+        if (srcDir.exists() \u003d\u003d false) {\n+            throw new FileNotFoundException(\"Source \u0027\" + srcDir + \"\u0027 does not exist\");\n         }\n-\n-        //makes sure it is not the same file\n-        if (source.getCanonicalPath().equals(destination.getCanonicalPath())) {\n-            String message \u003d\n-                \"Unable to write file \" + source + \" on itself.\";\n-            throw new IOException(message);\n+        if (srcDir.isDirectory() \u003d\u003d false) {\n+            throw new IOException(\"Source \u0027\" + srcDir + \"\u0027 exists but is not a directory\");\n         }\n-\n-        FileInputStream input \u003d new FileInputStream(source);\n-        try {\n-            FileOutputStream output \u003d new FileOutputStream(destination);\n-            try {\n-                IOUtils.copy(input, output);\n-            } finally {\n-                IOUtils.closeQuietly(output);\n-            }\n-        } finally {\n-            IOUtils.closeQuietly(input);\n+        if (srcDir.getCanonicalPath().equals(destDir.getCanonicalPath())) {\n+            throw new IOException(\"Source \u0027\" + srcDir + \"\u0027 and destination \u0027\" + destDir + \"\u0027 are the same\");\n         }\n-\n-        if (source.length() !\u003d destination.length()) {\n-            String message \u003d\n-                \"Failed to copy full contents from \"\n-                    + source\n-                    + \" to \"\n-                    + destination;\n-            throw new IOException(message);\n-        }\n-\n-        if (preserveFileDate) {\n-            //file copy should preserve file date\n-            destination.setLastModified(source.lastModified());\n-        }\n+        doCopyDirectory(srcDir, destDir, preserveFileDate);\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldMethodName": "copyFile",
            "newMethodName": "copyDirectory"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Add copyDirectory, and refactor copyFile\nbug 32944, from Ian Springer\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@154553 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1108923234000,
          "commitName": "64320f1c02f6173874ffcd7d5261a0f193c206a0",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1108914981000,
          "commitNameOld": "d7ab0e88337d961f47be82db20718dd7e1d1a06e",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.1,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,19 @@\n-    public static void copyFile(File source, File destination,\n-            boolean preserveFileDate)\n-            throws IOException {\n-        //check source exists\n-        if (!source.exists()) {\n-            String message \u003d \"File \" + source + \" does not exist\";\n-            throw new FileNotFoundException(message);\n+    public static void copyDirectory(File srcDir, File destDir,\n+            boolean preserveFileDate) throws IOException {\n+        if (srcDir \u003d\u003d null) {\n+            throw new NullPointerException(\"Source must not be null\");\n         }\n-\n-        //does destinations directory exist ?\n-        if (destination.getParentFile() !\u003d null\n-            \u0026\u0026 !destination.getParentFile().exists()) {\n-            destination.getParentFile().mkdirs();\n+        if (destDir \u003d\u003d null) {\n+            throw new NullPointerException(\"Destination must not be null\");\n         }\n-\n-        //make sure we can write to destination\n-        if (destination.exists() \u0026\u0026 !destination.canWrite()) {\n-            String message \u003d\n-                \"Unable to open file \" + destination + \" for writing.\";\n-            throw new IOException(message);\n+        if (srcDir.exists() \u003d\u003d false) {\n+            throw new FileNotFoundException(\"Source \u0027\" + srcDir + \"\u0027 does not exist\");\n         }\n-\n-        //makes sure it is not the same file\n-        if (source.getCanonicalPath().equals(destination.getCanonicalPath())) {\n-            String message \u003d\n-                \"Unable to write file \" + source + \" on itself.\";\n-            throw new IOException(message);\n+        if (srcDir.isDirectory() \u003d\u003d false) {\n+            throw new IOException(\"Source \u0027\" + srcDir + \"\u0027 exists but is not a directory\");\n         }\n-\n-        FileInputStream input \u003d new FileInputStream(source);\n-        try {\n-            FileOutputStream output \u003d new FileOutputStream(destination);\n-            try {\n-                IOUtils.copy(input, output);\n-            } finally {\n-                IOUtils.closeQuietly(output);\n-            }\n-        } finally {\n-            IOUtils.closeQuietly(input);\n+        if (srcDir.getCanonicalPath().equals(destDir.getCanonicalPath())) {\n+            throw new IOException(\"Source \u0027\" + srcDir + \"\u0027 and destination \u0027\" + destDir + \"\u0027 are the same\");\n         }\n-\n-        if (source.length() !\u003d destination.length()) {\n-            String message \u003d\n-                \"Failed to copy full contents from \"\n-                    + source\n-                    + \" to \"\n-                    + destination;\n-            throw new IOException(message);\n-        }\n-\n-        if (preserveFileDate) {\n-            //file copy should preserve file date\n-            destination.setLastModified(source.lastModified());\n-        }\n+        doCopyDirectory(srcDir, destDir, preserveFileDate);\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Add copyDirectory, and refactor copyFile\nbug 32944, from Ian Springer\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@154553 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1108923234000,
          "commitName": "64320f1c02f6173874ffcd7d5261a0f193c206a0",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1108914981000,
          "commitNameOld": "d7ab0e88337d961f47be82db20718dd7e1d1a06e",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.1,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,19 @@\n-    public static void copyFile(File source, File destination,\n-            boolean preserveFileDate)\n-            throws IOException {\n-        //check source exists\n-        if (!source.exists()) {\n-            String message \u003d \"File \" + source + \" does not exist\";\n-            throw new FileNotFoundException(message);\n+    public static void copyDirectory(File srcDir, File destDir,\n+            boolean preserveFileDate) throws IOException {\n+        if (srcDir \u003d\u003d null) {\n+            throw new NullPointerException(\"Source must not be null\");\n         }\n-\n-        //does destinations directory exist ?\n-        if (destination.getParentFile() !\u003d null\n-            \u0026\u0026 !destination.getParentFile().exists()) {\n-            destination.getParentFile().mkdirs();\n+        if (destDir \u003d\u003d null) {\n+            throw new NullPointerException(\"Destination must not be null\");\n         }\n-\n-        //make sure we can write to destination\n-        if (destination.exists() \u0026\u0026 !destination.canWrite()) {\n-            String message \u003d\n-                \"Unable to open file \" + destination + \" for writing.\";\n-            throw new IOException(message);\n+        if (srcDir.exists() \u003d\u003d false) {\n+            throw new FileNotFoundException(\"Source \u0027\" + srcDir + \"\u0027 does not exist\");\n         }\n-\n-        //makes sure it is not the same file\n-        if (source.getCanonicalPath().equals(destination.getCanonicalPath())) {\n-            String message \u003d\n-                \"Unable to write file \" + source + \" on itself.\";\n-            throw new IOException(message);\n+        if (srcDir.isDirectory() \u003d\u003d false) {\n+            throw new IOException(\"Source \u0027\" + srcDir + \"\u0027 exists but is not a directory\");\n         }\n-\n-        FileInputStream input \u003d new FileInputStream(source);\n-        try {\n-            FileOutputStream output \u003d new FileOutputStream(destination);\n-            try {\n-                IOUtils.copy(input, output);\n-            } finally {\n-                IOUtils.closeQuietly(output);\n-            }\n-        } finally {\n-            IOUtils.closeQuietly(input);\n+        if (srcDir.getCanonicalPath().equals(destDir.getCanonicalPath())) {\n+            throw new IOException(\"Source \u0027\" + srcDir + \"\u0027 and destination \u0027\" + destDir + \"\u0027 are the same\");\n         }\n-\n-        if (source.length() !\u003d destination.length()) {\n-            String message \u003d\n-                \"Failed to copy full contents from \"\n-                    + source\n-                    + \" to \"\n-                    + destination;\n-            throw new IOException(message);\n-        }\n-\n-        if (preserveFileDate) {\n-            //file copy should preserve file date\n-            destination.setLastModified(source.lastModified());\n-        }\n+        doCopyDirectory(srcDir, destDir, preserveFileDate);\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "f0c9d8d08404ba2bad6c581bc76ecb1eef6c9bff": {
      "type": "Ybodychange",
      "commitMessage": "Deprecate CopyUtils (reverting to v1.0)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140598 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1092441101000,
      "commitName": "f0c9d8d08404ba2bad6c581bc76ecb1eef6c9bff",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": 1090663121000,
      "commitNameOld": "891b02a1e7960248d36d1569a7bf2c7063ffce60",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 20.58,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n     public static void copyFile(File source, File destination, boolean preserveFileDate)\n                 throws IOException {\n         //check source exists\n         if (!source.exists()) {\n             String message \u003d \"File \" + source + \" does not exist\";\n             throw new FileNotFoundException(message);\n         }\n \n         //does destinations directory exist ?\n         if (destination.getParentFile() !\u003d null\n             \u0026\u0026 !destination.getParentFile().exists()) {\n             destination.getParentFile().mkdirs();\n         }\n \n         //make sure we can write to destination\n         if (destination.exists() \u0026\u0026 !destination.canWrite()) {\n             String message \u003d\n                 \"Unable to open file \" + destination + \" for writing.\";\n             throw new IOException(message);\n         }\n \n         //makes sure it is not the same file        \n         if (source.getCanonicalPath().equals(destination.getCanonicalPath())) {\n             String message \u003d\n                 \"Unable to write file \" + source + \" on itself.\";\n             throw new IOException(message);\n         }\n \n         FileInputStream input \u003d new FileInputStream(source);\n         try {\n             FileOutputStream output \u003d new FileOutputStream(destination);\n             try {\n-                CopyUtils.copy(input, output);\n+                IOUtils.copy(input, output);\n             } finally {\n                 IOUtils.closeQuietly(output);\n             }\n         } finally {\n             IOUtils.closeQuietly(input);\n         }\n \n         if (source.length() !\u003d destination.length()) {\n             String message \u003d\n                 \"Failed to copy full contents from \"\n                     + source\n                     + \" to \"\n                     + destination;\n             throw new IOException(message);\n         }\n         \n         if (preserveFileDate) {\n             //file copy should preserve file date\n             destination.setLastModified(source.lastModified());        \n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4127f8592e1e43b72626998fdee07f1e3c0ec928": {
      "type": "Ybodychange",
      "commitMessage": "Bugzilla 28496\nFix for: org.apache.commons.io.FileUtils.copyFile shouldn\u0027t allow to copy a file on itself\nSubmitted by: dany rizzi \u003cdrizzi.at.largesys.it\u003e\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140558 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1082760459000,
      "commitName": "4127f8592e1e43b72626998fdee07f1e3c0ec928",
      "commitAuthor": "Jeremias Maerki",
      "commitDateOld": 1079130145000,
      "commitNameOld": "1bdcc3d74cd87ca5a128f466d31dbca61429ce30",
      "commitAuthorOld": "Jeremias Maerki",
      "daysBetweenCommits": 42.02,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,54 @@\n     public static void copyFile(File source, File destination, boolean preserveFileDate)\n                 throws IOException {\n         //check source exists\n         if (!source.exists()) {\n             String message \u003d \"File \" + source + \" does not exist\";\n             throw new FileNotFoundException(message);\n         }\n \n         //does destinations directory exist ?\n         if (destination.getParentFile() !\u003d null\n             \u0026\u0026 !destination.getParentFile().exists()) {\n             destination.getParentFile().mkdirs();\n         }\n \n         //make sure we can write to destination\n         if (destination.exists() \u0026\u0026 !destination.canWrite()) {\n             String message \u003d\n                 \"Unable to open file \" + destination + \" for writing.\";\n             throw new IOException(message);\n         }\n \n+        //makes sure it is not the same file        \n+        if (source.getCanonicalPath().equals(destination.getCanonicalPath())) {\n+            String message \u003d\n+                \"Unable to write file \" + source + \" on itself.\";\n+            throw new IOException(message);\n+        }\n+\n         FileInputStream input \u003d new FileInputStream(source);\n         try {\n             FileOutputStream output \u003d new FileOutputStream(destination);\n             try {\n                 CopyUtils.copy(input, output);\n             } finally {\n                 IOUtils.closeQuietly(output);\n             }\n         } finally {\n             IOUtils.closeQuietly(input);\n         }\n \n         if (source.length() !\u003d destination.length()) {\n             String message \u003d\n                 \"Failed to copy full contents from \"\n                     + source\n                     + \" to \"\n                     + destination;\n             throw new IOException(message);\n         }\n         \n         if (preserveFileDate) {\n             //file copy should preserve file date\n             destination.setLastModified(source.lastModified());        \n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1bdcc3d74cd87ca5a128f466d31dbca61429ce30": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "File copy operations now preserve the file date by default. An additional copyFile variant enables to disable this feature.\nSuggested by: Craig Doremus \u003ccraig.at.maine.com\u003e in Bugzilla #27615\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140542 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1079130145000,
      "commitName": "1bdcc3d74cd87ca5a128f466d31dbca61429ce30",
      "commitAuthor": "Jeremias Maerki",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "File copy operations now preserve the file date by default. An additional copyFile variant enables to disable this feature.\nSuggested by: Craig Doremus \u003ccraig.at.maine.com\u003e in Bugzilla #27615\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140542 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1079130145000,
          "commitName": "1bdcc3d74cd87ca5a128f466d31dbca61429ce30",
          "commitAuthor": "Jeremias Maerki",
          "commitDateOld": 1079127887000,
          "commitNameOld": "b13ad1c26d5473dd0559bb78a3424a562cec92b1",
          "commitAuthorOld": "Jeremias Maerki",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,47 @@\n-    public static void copyFile(File source, File destination)\n-        throws IOException {\n+    public static void copyFile(File source, File destination, boolean preserveFileDate)\n+                throws IOException {\n         //check source exists\n         if (!source.exists()) {\n             String message \u003d \"File \" + source + \" does not exist\";\n             throw new FileNotFoundException(message);\n         }\n \n         //does destinations directory exist ?\n         if (destination.getParentFile() !\u003d null\n             \u0026\u0026 !destination.getParentFile().exists()) {\n             destination.getParentFile().mkdirs();\n         }\n \n         //make sure we can write to destination\n         if (destination.exists() \u0026\u0026 !destination.canWrite()) {\n             String message \u003d\n                 \"Unable to open file \" + destination + \" for writing.\";\n             throw new IOException(message);\n         }\n \n         FileInputStream input \u003d new FileInputStream(source);\n         try {\n             FileOutputStream output \u003d new FileOutputStream(destination);\n             try {\n                 CopyUtils.copy(input, output);\n             } finally {\n                 IOUtils.closeQuietly(output);\n             }\n         } finally {\n             IOUtils.closeQuietly(input);\n         }\n \n         if (source.length() !\u003d destination.length()) {\n             String message \u003d\n                 \"Failed to copy full contents from \"\n                     + source\n                     + \" to \"\n                     + destination;\n             throw new IOException(message);\n         }\n+        \n+        if (preserveFileDate) {\n+            //file copy should preserve file date\n+            destination.setLastModified(source.lastModified());        \n+        }\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ybodychange",
          "commitMessage": "File copy operations now preserve the file date by default. An additional copyFile variant enables to disable this feature.\nSuggested by: Craig Doremus \u003ccraig.at.maine.com\u003e in Bugzilla #27615\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140542 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1079130145000,
          "commitName": "1bdcc3d74cd87ca5a128f466d31dbca61429ce30",
          "commitAuthor": "Jeremias Maerki",
          "commitDateOld": 1079127887000,
          "commitNameOld": "b13ad1c26d5473dd0559bb78a3424a562cec92b1",
          "commitAuthorOld": "Jeremias Maerki",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,47 @@\n-    public static void copyFile(File source, File destination)\n-        throws IOException {\n+    public static void copyFile(File source, File destination, boolean preserveFileDate)\n+                throws IOException {\n         //check source exists\n         if (!source.exists()) {\n             String message \u003d \"File \" + source + \" does not exist\";\n             throw new FileNotFoundException(message);\n         }\n \n         //does destinations directory exist ?\n         if (destination.getParentFile() !\u003d null\n             \u0026\u0026 !destination.getParentFile().exists()) {\n             destination.getParentFile().mkdirs();\n         }\n \n         //make sure we can write to destination\n         if (destination.exists() \u0026\u0026 !destination.canWrite()) {\n             String message \u003d\n                 \"Unable to open file \" + destination + \" for writing.\";\n             throw new IOException(message);\n         }\n \n         FileInputStream input \u003d new FileInputStream(source);\n         try {\n             FileOutputStream output \u003d new FileOutputStream(destination);\n             try {\n                 CopyUtils.copy(input, output);\n             } finally {\n                 IOUtils.closeQuietly(output);\n             }\n         } finally {\n             IOUtils.closeQuietly(input);\n         }\n \n         if (source.length() !\u003d destination.length()) {\n             String message \u003d\n                 \"Failed to copy full contents from \"\n                     + source\n                     + \" to \"\n                     + destination;\n             throw new IOException(message);\n         }\n+        \n+        if (preserveFileDate) {\n+            //file copy should preserve file date\n+            destination.setLastModified(source.lastModified());        \n+        }\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "d5e24a4f1a2ff0e5c565f5b78fc0691e639b876e": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "removed lots of finals\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140456 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1072767169000,
      "commitName": "d5e24a4f1a2ff0e5c565f5b78fc0691e639b876e",
      "commitAuthor": "Henri Yandell",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "removed lots of finals\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140456 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1072767169000,
          "commitName": "d5e24a4f1a2ff0e5c565f5b78fc0691e639b876e",
          "commitAuthor": "Henri Yandell",
          "commitDateOld": 1072703692000,
          "commitNameOld": "a330996bf5514705e476d491069b1a4a65794023",
          "commitAuthorOld": "Henri Yandell",
          "daysBetweenCommits": 0.73,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,42 @@\n-    public static void copyFile(final File source, final File destination)\n+    public static void copyFile(File source, File destination)\n         throws IOException {\n         //check source exists\n         if (!source.exists()) {\n-            final String message \u003d \"File \" + source + \" does not exist\";\n+            String message \u003d \"File \" + source + \" does not exist\";\n             throw new FileNotFoundException(message);\n         }\n \n         //does destinations directory exist ?\n         if (destination.getParentFile() !\u003d null\n             \u0026\u0026 !destination.getParentFile().exists()) {\n             destination.getParentFile().mkdirs();\n         }\n \n         //make sure we can write to destination\n         if (destination.exists() \u0026\u0026 !destination.canWrite()) {\n-            final String message \u003d\n+            String message \u003d\n                 \"Unable to open file \" + destination + \" for writing.\";\n             throw new IOException(message);\n         }\n \n-        final FileInputStream input \u003d new FileInputStream(source);\n+        FileInputStream input \u003d new FileInputStream(source);\n         try {\n-            final FileOutputStream output \u003d new FileOutputStream(destination);\n+            FileOutputStream output \u003d new FileOutputStream(destination);\n             try {\n                 CopyUtils.copy(input, output);\n             } finally {\n                 IOUtils.closeQuietly(output);\n             }\n         } finally {\n             IOUtils.closeQuietly(input);\n         }\n \n         if (source.length() !\u003d destination.length()) {\n-            final String message \u003d\n+            String message \u003d\n                 \"Failed to copy full contents from \"\n                     + source\n                     + \" to \"\n                     + destination;\n             throw new IOException(message);\n         }\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "removed lots of finals\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140456 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1072767169000,
          "commitName": "d5e24a4f1a2ff0e5c565f5b78fc0691e639b876e",
          "commitAuthor": "Henri Yandell",
          "commitDateOld": 1072703692000,
          "commitNameOld": "a330996bf5514705e476d491069b1a4a65794023",
          "commitAuthorOld": "Henri Yandell",
          "daysBetweenCommits": 0.73,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,42 @@\n-    public static void copyFile(final File source, final File destination)\n+    public static void copyFile(File source, File destination)\n         throws IOException {\n         //check source exists\n         if (!source.exists()) {\n-            final String message \u003d \"File \" + source + \" does not exist\";\n+            String message \u003d \"File \" + source + \" does not exist\";\n             throw new FileNotFoundException(message);\n         }\n \n         //does destinations directory exist ?\n         if (destination.getParentFile() !\u003d null\n             \u0026\u0026 !destination.getParentFile().exists()) {\n             destination.getParentFile().mkdirs();\n         }\n \n         //make sure we can write to destination\n         if (destination.exists() \u0026\u0026 !destination.canWrite()) {\n-            final String message \u003d\n+            String message \u003d\n                 \"Unable to open file \" + destination + \" for writing.\";\n             throw new IOException(message);\n         }\n \n-        final FileInputStream input \u003d new FileInputStream(source);\n+        FileInputStream input \u003d new FileInputStream(source);\n         try {\n-            final FileOutputStream output \u003d new FileOutputStream(destination);\n+            FileOutputStream output \u003d new FileOutputStream(destination);\n             try {\n                 CopyUtils.copy(input, output);\n             } finally {\n                 IOUtils.closeQuietly(output);\n             }\n         } finally {\n             IOUtils.closeQuietly(input);\n         }\n \n         if (source.length() !\u003d destination.length()) {\n-            final String message \u003d\n+            String message \u003d\n                 \"Failed to copy full contents from \"\n                     + source\n                     + \" to \"\n                     + destination;\n             throw new IOException(message);\n         }\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "418d7a0ac343be700fd251d747bcc2d7ac0056d7": {
      "type": "Ybodychange",
      "commitMessage": "Renamed shutdownXxx methods to closeQuietly(Xxx).\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140449 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1072668533000,
      "commitName": "418d7a0ac343be700fd251d747bcc2d7ac0056d7",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": 1072350359000,
      "commitNameOld": "65b3c8a113786f6fb9ab9a387d9631012395fcf0",
      "commitAuthorOld": "Jeremias Maerki",
      "daysBetweenCommits": 3.68,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n     public static void copyFile(final File source, final File destination)\n         throws IOException {\n         //check source exists\n         if (!source.exists()) {\n             final String message \u003d \"File \" + source + \" does not exist\";\n             throw new FileNotFoundException(message);\n         }\n \n         //does destinations directory exist ?\n         if (destination.getParentFile() !\u003d null\n             \u0026\u0026 !destination.getParentFile().exists()) {\n             destination.getParentFile().mkdirs();\n         }\n \n         //make sure we can write to destination\n         if (destination.exists() \u0026\u0026 !destination.canWrite()) {\n             final String message \u003d\n                 \"Unable to open file \" + destination + \" for writing.\";\n             throw new IOException(message);\n         }\n \n         final FileInputStream input \u003d new FileInputStream(source);\n         try {\n             final FileOutputStream output \u003d new FileOutputStream(destination);\n             try {\n                 CopyUtils.copy(input, output);\n             } finally {\n-                IOUtils.shutdownStream(output);\n+                IOUtils.closeQuietly(output);\n             }\n         } finally {\n-            IOUtils.shutdownStream(input);\n+            IOUtils.closeQuietly(input);\n         }\n \n         if (source.length() !\u003d destination.length()) {\n             final String message \u003d\n                 \"Failed to copy full contents from \"\n                     + source\n                     + \" to \"\n                     + destination;\n             throw new IOException(message);\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3e4ec2a42b3118266deada58dbee39db2a48677b": {
      "type": "Ybodychange",
      "commitMessage": "I\u0027ve moved some methods around while cleaning up, so, sorry for the big diff. I moved up the methods I checked through. There\u0027s a marker in the lower half of the file indicating where I progressed. Everything below that marker still has to be sorted out. I consider the stuff above that marker cleaned up and reviewed to a certain degree.\n\nReal changes are:\n- new method: touch(File)\n- some method signatures rewritten to use java.io.File instead of String, because it\u0027s this class\u0027 policy. This might break dependant projects.\n- updated some javadocs\n- Removed getFilesFromExtension (this method wants to do too much). This might break dependant projects.\n- Replacement for getFilesFromExtension, new method(s): listFiles which is implemented using the filefilter package. The CVS filter functionality of getFilesFromExtension can be achieved by using FileFilterUtils.makeCVSAware.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140405 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1069533888000,
      "commitName": "3e4ec2a42b3118266deada58dbee39db2a48677b",
      "commitAuthor": "Jeremias Maerki",
      "commitDateOld": 1066421778000,
      "commitNameOld": "d9224439fc7c437a665ae4b5d9f91e3676b90496",
      "commitAuthorOld": "Matthew Hawthorne",
      "daysBetweenCommits": 36.02,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n     public static void copyFile(final File source, final File destination)\n         throws IOException {\n         //check source exists\n         if (!source.exists()) {\n             final String message \u003d \"File \" + source + \" does not exist\";\n-            throw new IOException(message);\n+            throw new FileNotFoundException(message);\n         }\n \n         //does destinations directory exist ?\n         if (destination.getParentFile() !\u003d null\n             \u0026\u0026 !destination.getParentFile().exists()) {\n             destination.getParentFile().mkdirs();\n         }\n \n         //make sure we can write to destination\n         if (destination.exists() \u0026\u0026 !destination.canWrite()) {\n             final String message \u003d\n                 \"Unable to open file \" + destination + \" for writing.\";\n             throw new IOException(message);\n         }\n \n         final FileInputStream input \u003d new FileInputStream(source);\n         try {\n             final FileOutputStream output \u003d new FileOutputStream(destination);\n             try {\n                 CopyUtils.copy(input, output);\n             } finally {\n                 IOUtils.shutdownStream(output);\n             }\n         } finally {\n             IOUtils.shutdownStream(input);\n         }\n \n         if (source.length() !\u003d destination.length()) {\n             final String message \u003d\n                 \"Failed to copy full contents from \"\n                     + source\n                     + \" to \"\n                     + destination;\n             throw new IOException(message);\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6a1bb4d53562a50bbaad48ee2c94971649e24cf5": {
      "type": "Ybodychange",
      "commitMessage": "Bugzilla 22075: Copy copy methods from IOUtils to CopyUtils, deprecate old copy methods.\nBugzilla 22332: Deprecated FileUtils string methods, Code style-up\nSubmitted by: Matthew Hawthorne \u003cmhawthorne at alumni.pitt.edu\u003e\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140382 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1061491248000,
      "commitName": "6a1bb4d53562a50bbaad48ee2c94971649e24cf5",
      "commitAuthor": "Jeremias Maerki",
      "commitDateOld": 1059484059000,
      "commitNameOld": "41669d5e6724f1e1d31d85f02adda2d923ca4393",
      "commitAuthorOld": "Jeremias Maerki",
      "daysBetweenCommits": 23.23,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,42 @@\n-    public static void copyFile( final File source, final File destination )\n-        throws IOException\n-    {\n+    public static void copyFile(final File source, final File destination)\n+        throws IOException {\n         //check source exists\n-        if( !source.exists() )\n-        {\n+        if (!source.exists()) {\n             final String message \u003d \"File \" + source + \" does not exist\";\n-            throw new IOException( message );\n+            throw new IOException(message);\n         }\n \n         //does destinations directory exist ?\n-        if( destination.getParentFile() !\u003d null \u0026\u0026\n-            !destination.getParentFile().exists() )\n-        {\n+        if (destination.getParentFile() !\u003d null\n+            \u0026\u0026 !destination.getParentFile().exists()) {\n             destination.getParentFile().mkdirs();\n         }\n \n         //make sure we can write to destination\n-        if( destination.exists() \u0026\u0026 !destination.canWrite() )\n-        {\n-            final String message \u003d \"Unable to open file \" +\n-                destination + \" for writing.\";\n-            throw new IOException( message );\n+        if (destination.exists() \u0026\u0026 !destination.canWrite()) {\n+            final String message \u003d\n+                \"Unable to open file \" + destination + \" for writing.\";\n+            throw new IOException(message);\n         }\n \n-        final FileInputStream input \u003d new FileInputStream( source );\n-        final FileOutputStream output \u003d new FileOutputStream( destination );\n-        IOUtils.copy( input, output );\n-        IOUtils.shutdownStream( input );\n-        IOUtils.shutdownStream( output );\n+        final FileInputStream input \u003d new FileInputStream(source);\n+        try {\n+            final FileOutputStream output \u003d new FileOutputStream(destination);\n+            try {\n+                CopyUtils.copy(input, output);\n+            } finally {\n+                IOUtils.shutdownStream(output);\n+            }\n+        } finally {\n+            IOUtils.shutdownStream(input);\n+        }\n \n-        if( source.length() !\u003d destination.length() )\n-        {\n-            final String message \u003d \"Failed to copy full contents from \" + source +\n-                \" to \" + destination;\n-            throw new IOException( message );\n+        if (source.length() !\u003d destination.length()) {\n+            final String message \u003d\n+                \"Failed to copy full contents from \"\n+                    + source\n+                    + \" to \"\n+                    + destination;\n+            throw new IOException(message);\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7748ed36401ea37104ae313be804f81f2526cd6d": {
      "type": "Ybodychange",
      "commitMessage": "IOUtil to IOUtils and EndianUtil to EndianUtils.\nFix references so dependant classes reference *Utils\nSubmitted by: Matthew Hawthorne \u003cmhawthorne@alumni.pitt.edu\u003e\n\nDeprecate IOUtil and EndianUtil.\nFix some of the license headers (more to do)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140365 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1059119486000,
      "commitName": "7748ed36401ea37104ae313be804f81f2526cd6d",
      "commitAuthor": "Jeremias Maerki",
      "commitDateOld": 1027889326000,
      "commitNameOld": "db7b3426781854f492c1ba2427abe660a4c2b58a",
      "commitAuthorOld": "Daniel Rall",
      "daysBetweenCommits": 361.46,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n     public static void copyFile( final File source, final File destination )\n         throws IOException\n     {\n         //check source exists\n         if( !source.exists() )\n         {\n             final String message \u003d \"File \" + source + \" does not exist\";\n             throw new IOException( message );\n         }\n \n         //does destinations directory exist ?\n         if( destination.getParentFile() !\u003d null \u0026\u0026\n             !destination.getParentFile().exists() )\n         {\n             destination.getParentFile().mkdirs();\n         }\n \n         //make sure we can write to destination\n         if( destination.exists() \u0026\u0026 !destination.canWrite() )\n         {\n             final String message \u003d \"Unable to open file \" +\n                 destination + \" for writing.\";\n             throw new IOException( message );\n         }\n \n         final FileInputStream input \u003d new FileInputStream( source );\n         final FileOutputStream output \u003d new FileOutputStream( destination );\n-        IOUtil.copy( input, output );\n-        IOUtil.shutdownStream( input );\n-        IOUtil.shutdownStream( output );\n+        IOUtils.copy( input, output );\n+        IOUtils.shutdownStream( input );\n+        IOUtils.shutdownStream( output );\n \n         if( source.length() !\u003d destination.length() )\n         {\n             final String message \u003d \"Failed to copy full contents from \" + source +\n                 \" to \" + destination;\n             throw new IOException( message );\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8eeb52fc81c4e65c00839cfeef9f1cde8b1cc613": {
      "type": "Ymovefromfile",
      "commitMessage": "FileUtil moved into FileUtils. Oddly enough no methods clash in name.\nHowever there is a lot of clash of functionality, so methods need to be\nconsidered and removed.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140314 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1027819689000,
      "commitName": "8eeb52fc81c4e65c00839cfeef9f1cde8b1cc613",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": 1026599866000,
      "commitNameOld": "fcb1f1dc86e216faca4bdb9626200d99a6d9915a",
      "commitAuthorOld": "Nicola Ken Barozzi",
      "daysBetweenCommits": 14.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/io/FileUtil.java",
        "newPath": "src/java/org/apache/commons/io/FileUtils.java",
        "oldMethodName": "copyFile",
        "newMethodName": "copyFile"
      }
    },
    "c360a10db25701f682849e5913d150f13a09f3bb": {
      "type": "Yintroduced",
      "commitMessage": "New io classes from Avalon excalibur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140301 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1026166486000,
      "commitName": "c360a10db25701f682849e5913d150f13a09f3bb",
      "commitAuthor": "Nicola Ken Barozzi"
    }
  }
}