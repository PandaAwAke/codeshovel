{
  "origin": "codeshovel",
  "repositoryName": "commons-io",
  "repositoryPath": "/repos/commons-io/.git",
  "startCommitName": "559de2c461e94ab636c959149c775bb27111fb48",
  "sourceFileName": "FilenameUtils.java",
  "functionName": "doNormalize",
  "functionId": "doNormalize___fileName-String__separator-char__keepSeparator-boolean",
  "sourceFilePath": "src/main/java/org/apache/commons/io/FilenameUtils.java",
  "functionStartLine": 354,
  "functionEndLine": 448,
  "changeHistory": [
    "e4e03ef4c091f5a35da0d97a6a35224197b8be02",
    "f03149e07dee90b23369d1cdb7f15c142df5e31d",
    "5d072ef89fbc2532f621a5a0b4d6791cb926a997",
    "afe78a030b57e3f74825e134d6615ef4878778cc",
    "6aa00766b9103d75c763160280429af8e1f0549e",
    "1170279dc85c2bbdea594b053c56b379a72a2104",
    "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a",
    "4a3fd09f1b0296514684fa2931c61bd8130f3cfd",
    "b39e430b27a666ec6195d9f77b09b3ae2c21f011",
    "3323d0a8d6167f47aac9b30c36979cd4daf610c8",
    "5964ce6decf3d7ab3efb7e1a9852b2f85a03ec6d",
    "e47d347ce4255b8964e384bf0df170281c78d070",
    "d5e24a4f1a2ff0e5c565f5b78fc0691e639b876e",
    "b901739a6779843da45a917a141cfd17114909de",
    "8eeb52fc81c4e65c00839cfeef9f1cde8b1cc613",
    "c360a10db25701f682849e5913d150f13a09f3bb"
  ],
  "changeHistoryShort": {
    "e4e03ef4c091f5a35da0d97a6a35224197b8be02": "Ymultichange(Yparameterchange,Ybodychange)",
    "f03149e07dee90b23369d1cdb7f15c142df5e31d": "Ybodychange",
    "5d072ef89fbc2532f621a5a0b4d6791cb926a997": "Ybodychange",
    "afe78a030b57e3f74825e134d6615ef4878778cc": "Ybodychange",
    "6aa00766b9103d75c763160280429af8e1f0549e": "Ymultichange(Ybodychange,Yparametermetachange)",
    "1170279dc85c2bbdea594b053c56b379a72a2104": "Ybodychange",
    "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a": "Yfilerename",
    "4a3fd09f1b0296514684fa2931c61bd8130f3cfd": "Ymultichange(Yparameterchange,Ybodychange)",
    "b39e430b27a666ec6195d9f77b09b3ae2c21f011": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
    "3323d0a8d6167f47aac9b30c36979cd4daf610c8": "Ybodychange",
    "5964ce6decf3d7ab3efb7e1a9852b2f85a03ec6d": "Ymultichange(Yparameterchange,Ybodychange)",
    "e47d347ce4255b8964e384bf0df170281c78d070": "Ybodychange",
    "d5e24a4f1a2ff0e5c565f5b78fc0691e639b876e": "Yparametermetachange",
    "b901739a6779843da45a917a141cfd17114909de": "Ymovefromfile",
    "8eeb52fc81c4e65c00839cfeef9f1cde8b1cc613": "Ymovefromfile",
    "c360a10db25701f682849e5913d150f13a09f3bb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e4e03ef4c091f5a35da0d97a6a35224197b8be02": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Fix param names \u0027filename\u0027 -\u003e \u0027fileName\u0027 in code and Javadocs.",
      "commitDate": 1520524225000,
      "commitName": "e4e03ef4c091f5a35da0d97a6a35224197b8be02",
      "commitAuthor": "Gary Gregory",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Fix param names \u0027filename\u0027 -\u003e \u0027fileName\u0027 in code and Javadocs.",
          "commitDate": 1520524225000,
          "commitName": "e4e03ef4c091f5a35da0d97a6a35224197b8be02",
          "commitAuthor": "Gary Gregory",
          "commitDateOld": 1520523160000,
          "commitNameOld": "90b2e46494eea8461523c55fd9cf3fe3d1bf00ce",
          "commitAuthorOld": "Gary Gregory",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,95 +1,95 @@\n-    private static String doNormalize(final String filename, final char separator, final boolean keepSeparator) {\n-        if (filename \u003d\u003d null) {\n+    private static String doNormalize(final String fileName, final char separator, final boolean keepSeparator) {\n+        if (fileName \u003d\u003d null) {\n             return null;\n         }\n \n-        failIfNullBytePresent(filename);\n+        failIfNullBytePresent(fileName);\n \n-        int size \u003d filename.length();\n+        int size \u003d fileName.length();\n         if (size \u003d\u003d 0) {\n-            return filename;\n+            return fileName;\n         }\n-        final int prefix \u003d getPrefixLength(filename);\n+        final int prefix \u003d getPrefixLength(fileName);\n         if (prefix \u003c 0) {\n             return null;\n         }\n \n         final char[] array \u003d new char[size + 2];  // +1 for possible extra slash, +2 for arraycopy\n-        filename.getChars(0, filename.length(), array, 0);\n+        fileName.getChars(0, fileName.length(), array, 0);\n \n         // fix separators throughout\n         final char otherSeparator \u003d separator \u003d\u003d SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR;\n         for (int i \u003d 0; i \u003c array.length; i++) {\n             if (array[i] \u003d\u003d otherSeparator) {\n                 array[i] \u003d separator;\n             }\n         }\n \n         // add extra separator on the end to simplify code below\n         boolean lastIsDirectory \u003d true;\n         if (array[size - 1] !\u003d separator) {\n             array[size++] \u003d separator;\n             lastIsDirectory \u003d false;\n         }\n \n         // adjoining slashes\n         for (int i \u003d prefix + 1; i \u003c size; i++) {\n             if (array[i] \u003d\u003d separator \u0026\u0026 array[i - 1] \u003d\u003d separator) {\n                 System.arraycopy(array, i, array, i - 1, size - i);\n                 size--;\n                 i--;\n             }\n         }\n \n         // dot slash\n         for (int i \u003d prefix + 1; i \u003c size; i++) {\n             if (array[i] \u003d\u003d separator \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026\n                     (i \u003d\u003d prefix + 1 || array[i - 2] \u003d\u003d separator)) {\n                 if (i \u003d\u003d size - 1) {\n                     lastIsDirectory \u003d true;\n                 }\n                 System.arraycopy(array, i + 1, array, i - 1, size - i);\n                 size -\u003d2;\n                 i--;\n             }\n         }\n \n         // double dot slash\n         outer:\n         for (int i \u003d prefix + 2; i \u003c size; i++) {\n             if (array[i] \u003d\u003d separator \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026 array[i - 2] \u003d\u003d \u0027.\u0027 \u0026\u0026\n                     (i \u003d\u003d prefix + 2 || array[i - 3] \u003d\u003d separator)) {\n                 if (i \u003d\u003d prefix + 2) {\n                     return null;\n                 }\n                 if (i \u003d\u003d size - 1) {\n                     lastIsDirectory \u003d true;\n                 }\n                 int j;\n                 for (j \u003d i - 4 ; j \u003e\u003d prefix; j--) {\n                     if (array[j] \u003d\u003d separator) {\n                         // remove b/../ from a/b/../c\n                         System.arraycopy(array, i + 1, array, j + 1, size - i);\n                         size -\u003d i - j;\n                         i \u003d j + 1;\n                         continue outer;\n                     }\n                 }\n                 // remove a/../ from a/../c\n                 System.arraycopy(array, i + 1, array, prefix, size - i);\n                 size -\u003d i + 1 - prefix;\n                 i \u003d prefix + 1;\n             }\n         }\n \n         if (size \u003c\u003d 0) {  // should never be less than 0\n             return EMPTY_STRING;\n         }\n         if (size \u003c\u003d prefix) {  // should never be less than prefix\n             return new String(array, 0, size);\n         }\n         if (lastIsDirectory \u0026\u0026 keepSeparator) {\n             return new String(array, 0, size);  // keep trailing separator\n         }\n         return new String(array, 0, size - 1);  // lose trailing separator\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Fix param names \u0027filename\u0027 -\u003e \u0027fileName\u0027 in code and Javadocs.",
          "commitDate": 1520524225000,
          "commitName": "e4e03ef4c091f5a35da0d97a6a35224197b8be02",
          "commitAuthor": "Gary Gregory",
          "commitDateOld": 1520523160000,
          "commitNameOld": "90b2e46494eea8461523c55fd9cf3fe3d1bf00ce",
          "commitAuthorOld": "Gary Gregory",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,95 +1,95 @@\n-    private static String doNormalize(final String filename, final char separator, final boolean keepSeparator) {\n-        if (filename \u003d\u003d null) {\n+    private static String doNormalize(final String fileName, final char separator, final boolean keepSeparator) {\n+        if (fileName \u003d\u003d null) {\n             return null;\n         }\n \n-        failIfNullBytePresent(filename);\n+        failIfNullBytePresent(fileName);\n \n-        int size \u003d filename.length();\n+        int size \u003d fileName.length();\n         if (size \u003d\u003d 0) {\n-            return filename;\n+            return fileName;\n         }\n-        final int prefix \u003d getPrefixLength(filename);\n+        final int prefix \u003d getPrefixLength(fileName);\n         if (prefix \u003c 0) {\n             return null;\n         }\n \n         final char[] array \u003d new char[size + 2];  // +1 for possible extra slash, +2 for arraycopy\n-        filename.getChars(0, filename.length(), array, 0);\n+        fileName.getChars(0, fileName.length(), array, 0);\n \n         // fix separators throughout\n         final char otherSeparator \u003d separator \u003d\u003d SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR;\n         for (int i \u003d 0; i \u003c array.length; i++) {\n             if (array[i] \u003d\u003d otherSeparator) {\n                 array[i] \u003d separator;\n             }\n         }\n \n         // add extra separator on the end to simplify code below\n         boolean lastIsDirectory \u003d true;\n         if (array[size - 1] !\u003d separator) {\n             array[size++] \u003d separator;\n             lastIsDirectory \u003d false;\n         }\n \n         // adjoining slashes\n         for (int i \u003d prefix + 1; i \u003c size; i++) {\n             if (array[i] \u003d\u003d separator \u0026\u0026 array[i - 1] \u003d\u003d separator) {\n                 System.arraycopy(array, i, array, i - 1, size - i);\n                 size--;\n                 i--;\n             }\n         }\n \n         // dot slash\n         for (int i \u003d prefix + 1; i \u003c size; i++) {\n             if (array[i] \u003d\u003d separator \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026\n                     (i \u003d\u003d prefix + 1 || array[i - 2] \u003d\u003d separator)) {\n                 if (i \u003d\u003d size - 1) {\n                     lastIsDirectory \u003d true;\n                 }\n                 System.arraycopy(array, i + 1, array, i - 1, size - i);\n                 size -\u003d2;\n                 i--;\n             }\n         }\n \n         // double dot slash\n         outer:\n         for (int i \u003d prefix + 2; i \u003c size; i++) {\n             if (array[i] \u003d\u003d separator \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026 array[i - 2] \u003d\u003d \u0027.\u0027 \u0026\u0026\n                     (i \u003d\u003d prefix + 2 || array[i - 3] \u003d\u003d separator)) {\n                 if (i \u003d\u003d prefix + 2) {\n                     return null;\n                 }\n                 if (i \u003d\u003d size - 1) {\n                     lastIsDirectory \u003d true;\n                 }\n                 int j;\n                 for (j \u003d i - 4 ; j \u003e\u003d prefix; j--) {\n                     if (array[j] \u003d\u003d separator) {\n                         // remove b/../ from a/b/../c\n                         System.arraycopy(array, i + 1, array, j + 1, size - i);\n                         size -\u003d i - j;\n                         i \u003d j + 1;\n                         continue outer;\n                     }\n                 }\n                 // remove a/../ from a/../c\n                 System.arraycopy(array, i + 1, array, prefix, size - i);\n                 size -\u003d i + 1 - prefix;\n                 i \u003d prefix + 1;\n             }\n         }\n \n         if (size \u003c\u003d 0) {  // should never be less than 0\n             return EMPTY_STRING;\n         }\n         if (size \u003c\u003d prefix) {  // should never be less than prefix\n             return new String(array, 0, size);\n         }\n         if (lastIsDirectory \u0026\u0026 keepSeparator) {\n             return new String(array, 0, size);  // keep trailing separator\n         }\n         return new String(array, 0, size - 1);  // lose trailing separator\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "f03149e07dee90b23369d1cdb7f15c142df5e31d": {
      "type": "Ybodychange",
      "commitMessage": "Refactor magic string into a constant.",
      "commitDate": 1520355081000,
      "commitName": "f03149e07dee90b23369d1cdb7f15c142df5e31d",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": 1520354763000,
      "commitNameOld": "8f957f527b9048f51aad91b544bed35c48bcf3a9",
      "commitAuthorOld": "Gary Gregory",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,95 +1,95 @@\n     private static String doNormalize(final String filename, final char separator, final boolean keepSeparator) {\n         if (filename \u003d\u003d null) {\n             return null;\n         }\n \n         failIfNullBytePresent(filename);\n \n         int size \u003d filename.length();\n         if (size \u003d\u003d 0) {\n             return filename;\n         }\n         final int prefix \u003d getPrefixLength(filename);\n         if (prefix \u003c 0) {\n             return null;\n         }\n \n         final char[] array \u003d new char[size + 2];  // +1 for possible extra slash, +2 for arraycopy\n         filename.getChars(0, filename.length(), array, 0);\n \n         // fix separators throughout\n         final char otherSeparator \u003d separator \u003d\u003d SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR;\n         for (int i \u003d 0; i \u003c array.length; i++) {\n             if (array[i] \u003d\u003d otherSeparator) {\n                 array[i] \u003d separator;\n             }\n         }\n \n         // add extra separator on the end to simplify code below\n         boolean lastIsDirectory \u003d true;\n         if (array[size - 1] !\u003d separator) {\n             array[size++] \u003d separator;\n             lastIsDirectory \u003d false;\n         }\n \n         // adjoining slashes\n         for (int i \u003d prefix + 1; i \u003c size; i++) {\n             if (array[i] \u003d\u003d separator \u0026\u0026 array[i - 1] \u003d\u003d separator) {\n                 System.arraycopy(array, i, array, i - 1, size - i);\n                 size--;\n                 i--;\n             }\n         }\n \n         // dot slash\n         for (int i \u003d prefix + 1; i \u003c size; i++) {\n             if (array[i] \u003d\u003d separator \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026\n                     (i \u003d\u003d prefix + 1 || array[i - 2] \u003d\u003d separator)) {\n                 if (i \u003d\u003d size - 1) {\n                     lastIsDirectory \u003d true;\n                 }\n                 System.arraycopy(array, i + 1, array, i - 1, size - i);\n                 size -\u003d2;\n                 i--;\n             }\n         }\n \n         // double dot slash\n         outer:\n         for (int i \u003d prefix + 2; i \u003c size; i++) {\n             if (array[i] \u003d\u003d separator \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026 array[i - 2] \u003d\u003d \u0027.\u0027 \u0026\u0026\n                     (i \u003d\u003d prefix + 2 || array[i - 3] \u003d\u003d separator)) {\n                 if (i \u003d\u003d prefix + 2) {\n                     return null;\n                 }\n                 if (i \u003d\u003d size - 1) {\n                     lastIsDirectory \u003d true;\n                 }\n                 int j;\n                 for (j \u003d i - 4 ; j \u003e\u003d prefix; j--) {\n                     if (array[j] \u003d\u003d separator) {\n                         // remove b/../ from a/b/../c\n                         System.arraycopy(array, i + 1, array, j + 1, size - i);\n                         size -\u003d i - j;\n                         i \u003d j + 1;\n                         continue outer;\n                     }\n                 }\n                 // remove a/../ from a/../c\n                 System.arraycopy(array, i + 1, array, prefix, size - i);\n                 size -\u003d i + 1 - prefix;\n                 i \u003d prefix + 1;\n             }\n         }\n \n         if (size \u003c\u003d 0) {  // should never be less than 0\n-            return \"\";\n+            return EMPTY_STRING;\n         }\n         if (size \u003c\u003d prefix) {  // should never be less than prefix\n             return new String(array, 0, size);\n         }\n         if (lastIsDirectory \u0026\u0026 keepSeparator) {\n             return new String(array, 0, size);  // keep trailing separator\n         }\n         return new String(array, 0, size - 1);  // lose trailing separator\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5d072ef89fbc2532f621a5a0b4d6791cb926a997": {
      "type": "Ybodychange",
      "commitMessage": "IO-484 Changed solution to always throw exception\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1702170 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1441866902000,
      "commitName": "5d072ef89fbc2532f621a5a0b4d6791cb926a997",
      "commitAuthor": "Kristian Rosenvold",
      "commitDateOld": 1438863762000,
      "commitNameOld": "76e45d6a50da6228c44b04a565dca96432c4b197",
      "commitAuthorOld": "Kristian Rosenvold",
      "daysBetweenCommits": 34.76,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,95 +1,95 @@\n     private static String doNormalize(final String filename, final char separator, final boolean keepSeparator) {\n         if (filename \u003d\u003d null) {\n             return null;\n         }\n \n-        String cleanFileName \u003d filterNullBytes(filename);\n+        failIfNullBytePresent(filename);\n \n-        int size \u003d cleanFileName.length();\n+        int size \u003d filename.length();\n         if (size \u003d\u003d 0) {\n-            return cleanFileName;\n+            return filename;\n         }\n-        final int prefix \u003d getPrefixLength(cleanFileName);\n+        final int prefix \u003d getPrefixLength(filename);\n         if (prefix \u003c 0) {\n             return null;\n         }\n \n         final char[] array \u003d new char[size + 2];  // +1 for possible extra slash, +2 for arraycopy\n-        cleanFileName.getChars(0, cleanFileName.length(), array, 0);\n+        filename.getChars(0, filename.length(), array, 0);\n \n         // fix separators throughout\n         final char otherSeparator \u003d separator \u003d\u003d SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR;\n         for (int i \u003d 0; i \u003c array.length; i++) {\n             if (array[i] \u003d\u003d otherSeparator) {\n                 array[i] \u003d separator;\n             }\n         }\n \n         // add extra separator on the end to simplify code below\n         boolean lastIsDirectory \u003d true;\n         if (array[size - 1] !\u003d separator) {\n             array[size++] \u003d separator;\n             lastIsDirectory \u003d false;\n         }\n \n         // adjoining slashes\n         for (int i \u003d prefix + 1; i \u003c size; i++) {\n             if (array[i] \u003d\u003d separator \u0026\u0026 array[i - 1] \u003d\u003d separator) {\n                 System.arraycopy(array, i, array, i - 1, size - i);\n                 size--;\n                 i--;\n             }\n         }\n \n         // dot slash\n         for (int i \u003d prefix + 1; i \u003c size; i++) {\n             if (array[i] \u003d\u003d separator \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026\n                     (i \u003d\u003d prefix + 1 || array[i - 2] \u003d\u003d separator)) {\n                 if (i \u003d\u003d size - 1) {\n                     lastIsDirectory \u003d true;\n                 }\n                 System.arraycopy(array, i + 1, array, i - 1, size - i);\n                 size -\u003d2;\n                 i--;\n             }\n         }\n \n         // double dot slash\n         outer:\n         for (int i \u003d prefix + 2; i \u003c size; i++) {\n             if (array[i] \u003d\u003d separator \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026 array[i - 2] \u003d\u003d \u0027.\u0027 \u0026\u0026\n                     (i \u003d\u003d prefix + 2 || array[i - 3] \u003d\u003d separator)) {\n                 if (i \u003d\u003d prefix + 2) {\n                     return null;\n                 }\n                 if (i \u003d\u003d size - 1) {\n                     lastIsDirectory \u003d true;\n                 }\n                 int j;\n                 for (j \u003d i - 4 ; j \u003e\u003d prefix; j--) {\n                     if (array[j] \u003d\u003d separator) {\n                         // remove b/../ from a/b/../c\n                         System.arraycopy(array, i + 1, array, j + 1, size - i);\n                         size -\u003d i - j;\n                         i \u003d j + 1;\n                         continue outer;\n                     }\n                 }\n                 // remove a/../ from a/../c\n                 System.arraycopy(array, i + 1, array, prefix, size - i);\n                 size -\u003d i + 1 - prefix;\n                 i \u003d prefix + 1;\n             }\n         }\n \n         if (size \u003c\u003d 0) {  // should never be less than 0\n             return \"\";\n         }\n         if (size \u003c\u003d prefix) {  // should never be less than prefix\n             return new String(array, 0, size);\n         }\n         if (lastIsDirectory \u0026\u0026 keepSeparator) {\n             return new String(array, 0, size);  // keep trailing separator\n         }\n         return new String(array, 0, size - 1);  // lose trailing separator\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "afe78a030b57e3f74825e134d6615ef4878778cc": {
      "type": "Ybodychange",
      "commitMessage": "IO-484 Fix with testcase\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1694464 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1438861678000,
      "commitName": "afe78a030b57e3f74825e134d6615ef4878778cc",
      "commitAuthor": "Kristian Rosenvold",
      "commitDateOld": 1434643076000,
      "commitNameOld": "9264ccd2857cc25cabf6a309f323dd95ed319495",
      "commitAuthorOld": "Kristian Rosenvold",
      "daysBetweenCommits": 48.83,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,92 +1,95 @@\n     private static String doNormalize(final String filename, final char separator, final boolean keepSeparator) {\n         if (filename \u003d\u003d null) {\n             return null;\n         }\n-        int size \u003d filename.length();\n+\n+        String cleanFileName \u003d filterNullBytes(filename);\n+\n+        int size \u003d cleanFileName.length();\n         if (size \u003d\u003d 0) {\n-            return filename;\n+            return cleanFileName;\n         }\n-        final int prefix \u003d getPrefixLength(filename);\n+        final int prefix \u003d getPrefixLength(cleanFileName);\n         if (prefix \u003c 0) {\n             return null;\n         }\n \n         final char[] array \u003d new char[size + 2];  // +1 for possible extra slash, +2 for arraycopy\n-        filename.getChars(0, filename.length(), array, 0);\n+        cleanFileName.getChars(0, cleanFileName.length(), array, 0);\n \n         // fix separators throughout\n         final char otherSeparator \u003d separator \u003d\u003d SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR;\n         for (int i \u003d 0; i \u003c array.length; i++) {\n             if (array[i] \u003d\u003d otherSeparator) {\n                 array[i] \u003d separator;\n             }\n         }\n \n         // add extra separator on the end to simplify code below\n         boolean lastIsDirectory \u003d true;\n         if (array[size - 1] !\u003d separator) {\n             array[size++] \u003d separator;\n             lastIsDirectory \u003d false;\n         }\n \n         // adjoining slashes\n         for (int i \u003d prefix + 1; i \u003c size; i++) {\n             if (array[i] \u003d\u003d separator \u0026\u0026 array[i - 1] \u003d\u003d separator) {\n                 System.arraycopy(array, i, array, i - 1, size - i);\n                 size--;\n                 i--;\n             }\n         }\n \n         // dot slash\n         for (int i \u003d prefix + 1; i \u003c size; i++) {\n             if (array[i] \u003d\u003d separator \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026\n                     (i \u003d\u003d prefix + 1 || array[i - 2] \u003d\u003d separator)) {\n                 if (i \u003d\u003d size - 1) {\n                     lastIsDirectory \u003d true;\n                 }\n                 System.arraycopy(array, i + 1, array, i - 1, size - i);\n                 size -\u003d2;\n                 i--;\n             }\n         }\n \n         // double dot slash\n         outer:\n         for (int i \u003d prefix + 2; i \u003c size; i++) {\n             if (array[i] \u003d\u003d separator \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026 array[i - 2] \u003d\u003d \u0027.\u0027 \u0026\u0026\n                     (i \u003d\u003d prefix + 2 || array[i - 3] \u003d\u003d separator)) {\n                 if (i \u003d\u003d prefix + 2) {\n                     return null;\n                 }\n                 if (i \u003d\u003d size - 1) {\n                     lastIsDirectory \u003d true;\n                 }\n                 int j;\n                 for (j \u003d i - 4 ; j \u003e\u003d prefix; j--) {\n                     if (array[j] \u003d\u003d separator) {\n                         // remove b/../ from a/b/../c\n                         System.arraycopy(array, i + 1, array, j + 1, size - i);\n                         size -\u003d i - j;\n                         i \u003d j + 1;\n                         continue outer;\n                     }\n                 }\n                 // remove a/../ from a/../c\n                 System.arraycopy(array, i + 1, array, prefix, size - i);\n                 size -\u003d i + 1 - prefix;\n                 i \u003d prefix + 1;\n             }\n         }\n \n         if (size \u003c\u003d 0) {  // should never be less than 0\n             return \"\";\n         }\n         if (size \u003c\u003d prefix) {  // should never be less than prefix\n             return new String(array, 0, size);\n         }\n         if (lastIsDirectory \u0026\u0026 keepSeparator) {\n             return new String(array, 0, size);  // keep trailing separator\n         }\n         return new String(array, 0, size - 1);  // lose trailing separator\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6aa00766b9103d75c763160280429af8e1f0549e": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1354308699000,
      "commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
      "commitAuthor": "Gary D. Gregory",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1354308699000,
          "commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": 1333120391000,
          "commitNameOld": "3ef56378e33ed5ccc296806e4ad6b8c463e5979f",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 245.24,
          "commitsBetweenForRepo": 143,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,92 +1,92 @@\n-    private static String doNormalize(String filename, char separator, boolean keepSeparator) {\n+    private static String doNormalize(final String filename, final char separator, final boolean keepSeparator) {\n         if (filename \u003d\u003d null) {\n             return null;\n         }\n         int size \u003d filename.length();\n         if (size \u003d\u003d 0) {\n             return filename;\n         }\n-        int prefix \u003d getPrefixLength(filename);\n+        final int prefix \u003d getPrefixLength(filename);\n         if (prefix \u003c 0) {\n             return null;\n         }\n         \n-        char[] array \u003d new char[size + 2];  // +1 for possible extra slash, +2 for arraycopy\n+        final char[] array \u003d new char[size + 2];  // +1 for possible extra slash, +2 for arraycopy\n         filename.getChars(0, filename.length(), array, 0);\n         \n         // fix separators throughout\n-        char otherSeparator \u003d separator \u003d\u003d SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR;\n+        final char otherSeparator \u003d separator \u003d\u003d SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR;\n         for (int i \u003d 0; i \u003c array.length; i++) {\n             if (array[i] \u003d\u003d otherSeparator) {\n                 array[i] \u003d separator;\n             }\n         }\n         \n         // add extra separator on the end to simplify code below\n         boolean lastIsDirectory \u003d true;\n         if (array[size - 1] !\u003d separator) {\n             array[size++] \u003d separator;\n             lastIsDirectory \u003d false;\n         }\n         \n         // adjoining slashes\n         for (int i \u003d prefix + 1; i \u003c size; i++) {\n             if (array[i] \u003d\u003d separator \u0026\u0026 array[i - 1] \u003d\u003d separator) {\n                 System.arraycopy(array, i, array, i - 1, size - i);\n                 size--;\n                 i--;\n             }\n         }\n         \n         // dot slash\n         for (int i \u003d prefix + 1; i \u003c size; i++) {\n             if (array[i] \u003d\u003d separator \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026\n                     (i \u003d\u003d prefix + 1 || array[i - 2] \u003d\u003d separator)) {\n                 if (i \u003d\u003d size - 1) {\n                     lastIsDirectory \u003d true;\n                 }\n                 System.arraycopy(array, i + 1, array, i - 1, size - i);\n                 size -\u003d2;\n                 i--;\n             }\n         }\n         \n         // double dot slash\n         outer:\n         for (int i \u003d prefix + 2; i \u003c size; i++) {\n             if (array[i] \u003d\u003d separator \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026 array[i - 2] \u003d\u003d \u0027.\u0027 \u0026\u0026\n                     (i \u003d\u003d prefix + 2 || array[i - 3] \u003d\u003d separator)) {\n                 if (i \u003d\u003d prefix + 2) {\n                     return null;\n                 }\n                 if (i \u003d\u003d size - 1) {\n                     lastIsDirectory \u003d true;\n                 }\n                 int j;\n                 for (j \u003d i - 4 ; j \u003e\u003d prefix; j--) {\n                     if (array[j] \u003d\u003d separator) {\n                         // remove b/../ from a/b/../c\n                         System.arraycopy(array, i + 1, array, j + 1, size - i);\n                         size -\u003d i - j;\n                         i \u003d j + 1;\n                         continue outer;\n                     }\n                 }\n                 // remove a/../ from a/../c\n                 System.arraycopy(array, i + 1, array, prefix, size - i);\n                 size -\u003d i + 1 - prefix;\n                 i \u003d prefix + 1;\n             }\n         }\n         \n         if (size \u003c\u003d 0) {  // should never be less than 0\n             return \"\";\n         }\n         if (size \u003c\u003d prefix) {  // should never be less than prefix\n             return new String(array, 0, size);\n         }\n         if (lastIsDirectory \u0026\u0026 keepSeparator) {\n             return new String(array, 0, size);  // keep trailing separator\n         }\n         return new String(array, 0, size - 1);  // lose trailing separator\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1354308699000,
          "commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": 1333120391000,
          "commitNameOld": "3ef56378e33ed5ccc296806e4ad6b8c463e5979f",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 245.24,
          "commitsBetweenForRepo": 143,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,92 +1,92 @@\n-    private static String doNormalize(String filename, char separator, boolean keepSeparator) {\n+    private static String doNormalize(final String filename, final char separator, final boolean keepSeparator) {\n         if (filename \u003d\u003d null) {\n             return null;\n         }\n         int size \u003d filename.length();\n         if (size \u003d\u003d 0) {\n             return filename;\n         }\n-        int prefix \u003d getPrefixLength(filename);\n+        final int prefix \u003d getPrefixLength(filename);\n         if (prefix \u003c 0) {\n             return null;\n         }\n         \n-        char[] array \u003d new char[size + 2];  // +1 for possible extra slash, +2 for arraycopy\n+        final char[] array \u003d new char[size + 2];  // +1 for possible extra slash, +2 for arraycopy\n         filename.getChars(0, filename.length(), array, 0);\n         \n         // fix separators throughout\n-        char otherSeparator \u003d separator \u003d\u003d SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR;\n+        final char otherSeparator \u003d separator \u003d\u003d SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR;\n         for (int i \u003d 0; i \u003c array.length; i++) {\n             if (array[i] \u003d\u003d otherSeparator) {\n                 array[i] \u003d separator;\n             }\n         }\n         \n         // add extra separator on the end to simplify code below\n         boolean lastIsDirectory \u003d true;\n         if (array[size - 1] !\u003d separator) {\n             array[size++] \u003d separator;\n             lastIsDirectory \u003d false;\n         }\n         \n         // adjoining slashes\n         for (int i \u003d prefix + 1; i \u003c size; i++) {\n             if (array[i] \u003d\u003d separator \u0026\u0026 array[i - 1] \u003d\u003d separator) {\n                 System.arraycopy(array, i, array, i - 1, size - i);\n                 size--;\n                 i--;\n             }\n         }\n         \n         // dot slash\n         for (int i \u003d prefix + 1; i \u003c size; i++) {\n             if (array[i] \u003d\u003d separator \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026\n                     (i \u003d\u003d prefix + 1 || array[i - 2] \u003d\u003d separator)) {\n                 if (i \u003d\u003d size - 1) {\n                     lastIsDirectory \u003d true;\n                 }\n                 System.arraycopy(array, i + 1, array, i - 1, size - i);\n                 size -\u003d2;\n                 i--;\n             }\n         }\n         \n         // double dot slash\n         outer:\n         for (int i \u003d prefix + 2; i \u003c size; i++) {\n             if (array[i] \u003d\u003d separator \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026 array[i - 2] \u003d\u003d \u0027.\u0027 \u0026\u0026\n                     (i \u003d\u003d prefix + 2 || array[i - 3] \u003d\u003d separator)) {\n                 if (i \u003d\u003d prefix + 2) {\n                     return null;\n                 }\n                 if (i \u003d\u003d size - 1) {\n                     lastIsDirectory \u003d true;\n                 }\n                 int j;\n                 for (j \u003d i - 4 ; j \u003e\u003d prefix; j--) {\n                     if (array[j] \u003d\u003d separator) {\n                         // remove b/../ from a/b/../c\n                         System.arraycopy(array, i + 1, array, j + 1, size - i);\n                         size -\u003d i - j;\n                         i \u003d j + 1;\n                         continue outer;\n                     }\n                 }\n                 // remove a/../ from a/../c\n                 System.arraycopy(array, i + 1, array, prefix, size - i);\n                 size -\u003d i + 1 - prefix;\n                 i \u003d prefix + 1;\n             }\n         }\n         \n         if (size \u003c\u003d 0) {  // should never be less than 0\n             return \"\";\n         }\n         if (size \u003c\u003d prefix) {  // should never be less than prefix\n             return new String(array, 0, size);\n         }\n         if (lastIsDirectory \u0026\u0026 keepSeparator) {\n             return new String(array, 0, size);  // keep trailing separator\n         }\n         return new String(array, 0, size - 1);  // lose trailing separator\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "1170279dc85c2bbdea594b053c56b379a72a2104": {
      "type": "Ybodychange",
      "commitMessage": "Remove noisy and unnecessary parens. Especially painful in return statements: \"return (foo + bar);\" vs. \"return foo + bar;\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1302748 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1332207332000,
      "commitName": "1170279dc85c2bbdea594b053c56b379a72a2104",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": 1330924596000,
      "commitNameOld": "b37ba99e8f838e0fb7df77bea2fc774d5c8e893f",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 14.85,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,92 +1,92 @@\n     private static String doNormalize(String filename, char separator, boolean keepSeparator) {\n         if (filename \u003d\u003d null) {\n             return null;\n         }\n         int size \u003d filename.length();\n         if (size \u003d\u003d 0) {\n             return filename;\n         }\n         int prefix \u003d getPrefixLength(filename);\n         if (prefix \u003c 0) {\n             return null;\n         }\n         \n         char[] array \u003d new char[size + 2];  // +1 for possible extra slash, +2 for arraycopy\n         filename.getChars(0, filename.length(), array, 0);\n         \n         // fix separators throughout\n-        char otherSeparator \u003d (separator \u003d\u003d SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR);\n+        char otherSeparator \u003d separator \u003d\u003d SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR;\n         for (int i \u003d 0; i \u003c array.length; i++) {\n             if (array[i] \u003d\u003d otherSeparator) {\n                 array[i] \u003d separator;\n             }\n         }\n         \n         // add extra separator on the end to simplify code below\n         boolean lastIsDirectory \u003d true;\n         if (array[size - 1] !\u003d separator) {\n             array[size++] \u003d separator;\n             lastIsDirectory \u003d false;\n         }\n         \n         // adjoining slashes\n         for (int i \u003d prefix + 1; i \u003c size; i++) {\n             if (array[i] \u003d\u003d separator \u0026\u0026 array[i - 1] \u003d\u003d separator) {\n                 System.arraycopy(array, i, array, i - 1, size - i);\n                 size--;\n                 i--;\n             }\n         }\n         \n         // dot slash\n         for (int i \u003d prefix + 1; i \u003c size; i++) {\n             if (array[i] \u003d\u003d separator \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026\n                     (i \u003d\u003d prefix + 1 || array[i - 2] \u003d\u003d separator)) {\n                 if (i \u003d\u003d size - 1) {\n                     lastIsDirectory \u003d true;\n                 }\n                 System.arraycopy(array, i + 1, array, i - 1, size - i);\n                 size -\u003d2;\n                 i--;\n             }\n         }\n         \n         // double dot slash\n         outer:\n         for (int i \u003d prefix + 2; i \u003c size; i++) {\n             if (array[i] \u003d\u003d separator \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026 array[i - 2] \u003d\u003d \u0027.\u0027 \u0026\u0026\n                     (i \u003d\u003d prefix + 2 || array[i - 3] \u003d\u003d separator)) {\n                 if (i \u003d\u003d prefix + 2) {\n                     return null;\n                 }\n                 if (i \u003d\u003d size - 1) {\n                     lastIsDirectory \u003d true;\n                 }\n                 int j;\n                 for (j \u003d i - 4 ; j \u003e\u003d prefix; j--) {\n                     if (array[j] \u003d\u003d separator) {\n                         // remove b/../ from a/b/../c\n                         System.arraycopy(array, i + 1, array, j + 1, size - i);\n-                        size -\u003d (i - j);\n+                        size -\u003d i - j;\n                         i \u003d j + 1;\n                         continue outer;\n                     }\n                 }\n                 // remove a/../ from a/../c\n                 System.arraycopy(array, i + 1, array, prefix, size - i);\n-                size -\u003d (i + 1 - prefix);\n+                size -\u003d i + 1 - prefix;\n                 i \u003d prefix + 1;\n             }\n         }\n         \n         if (size \u003c\u003d 0) {  // should never be less than 0\n             return \"\";\n         }\n         if (size \u003c\u003d prefix) {  // should never be less than prefix\n             return new String(array, 0, size);\n         }\n         if (lastIsDirectory \u0026\u0026 keepSeparator) {\n             return new String(array, 0, size);  // keep trailing separator\n         }\n         return new String(array, 0, size - 1);  // lose trailing separator\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a": {
      "type": "Yfilerename",
      "commitMessage": "Build changes - re-organize to standard m2 layout, remove useless JIRA report and fix some Ant issues\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1004358 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1286218476000,
      "commitName": "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": 1286214840000,
      "commitNameOld": "19f48eb1711427a43a5e10c84bbbf1218a08bdd2",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/io/FilenameUtils.java",
        "newPath": "src/main/java/org/apache/commons/io/FilenameUtils.java"
      }
    },
    "4a3fd09f1b0296514684fa2931c61bd8130f3cfd": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "IO-156 Add normalize() and normalizeNoEndSeparator() method flavours which allow the separator character to be specified\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@723186 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1228355384000,
      "commitName": "4a3fd09f1b0296514684fa2931c61bd8130f3cfd",
      "commitAuthor": "Niall Pemberton",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "IO-156 Add normalize() and normalizeNoEndSeparator() method flavours which allow the separator character to be specified\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@723186 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1228355384000,
          "commitName": "4a3fd09f1b0296514684fa2931c61bd8130f3cfd",
          "commitAuthor": "Niall Pemberton",
          "commitDateOld": 1227923411000,
          "commitNameOld": "d55dd62cc0b07e1124369d74dd0095cc2b491dfe",
          "commitAuthorOld": "Niall Pemberton",
          "daysBetweenCommits": 5.0,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,91 +1,92 @@\n-    private static String doNormalize(String filename, boolean keepSeparator) {\n+    private static String doNormalize(String filename, char separator, boolean keepSeparator) {\n         if (filename \u003d\u003d null) {\n             return null;\n         }\n         int size \u003d filename.length();\n         if (size \u003d\u003d 0) {\n             return filename;\n         }\n         int prefix \u003d getPrefixLength(filename);\n         if (prefix \u003c 0) {\n             return null;\n         }\n         \n         char[] array \u003d new char[size + 2];  // +1 for possible extra slash, +2 for arraycopy\n         filename.getChars(0, filename.length(), array, 0);\n         \n         // fix separators throughout\n+        char otherSeparator \u003d (separator \u003d\u003d SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR);\n         for (int i \u003d 0; i \u003c array.length; i++) {\n-            if (array[i] \u003d\u003d OTHER_SEPARATOR) {\n-                array[i] \u003d SYSTEM_SEPARATOR;\n+            if (array[i] \u003d\u003d otherSeparator) {\n+                array[i] \u003d separator;\n             }\n         }\n         \n         // add extra separator on the end to simplify code below\n         boolean lastIsDirectory \u003d true;\n-        if (array[size - 1] !\u003d SYSTEM_SEPARATOR) {\n-            array[size++] \u003d SYSTEM_SEPARATOR;\n+        if (array[size - 1] !\u003d separator) {\n+            array[size++] \u003d separator;\n             lastIsDirectory \u003d false;\n         }\n         \n         // adjoining slashes\n         for (int i \u003d prefix + 1; i \u003c size; i++) {\n-            if (array[i] \u003d\u003d SYSTEM_SEPARATOR \u0026\u0026 array[i - 1] \u003d\u003d SYSTEM_SEPARATOR) {\n+            if (array[i] \u003d\u003d separator \u0026\u0026 array[i - 1] \u003d\u003d separator) {\n                 System.arraycopy(array, i, array, i - 1, size - i);\n                 size--;\n                 i--;\n             }\n         }\n         \n         // dot slash\n         for (int i \u003d prefix + 1; i \u003c size; i++) {\n-            if (array[i] \u003d\u003d SYSTEM_SEPARATOR \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026\n-                    (i \u003d\u003d prefix + 1 || array[i - 2] \u003d\u003d SYSTEM_SEPARATOR)) {\n+            if (array[i] \u003d\u003d separator \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026\n+                    (i \u003d\u003d prefix + 1 || array[i - 2] \u003d\u003d separator)) {\n                 if (i \u003d\u003d size - 1) {\n                     lastIsDirectory \u003d true;\n                 }\n                 System.arraycopy(array, i + 1, array, i - 1, size - i);\n                 size -\u003d2;\n                 i--;\n             }\n         }\n         \n         // double dot slash\n         outer:\n         for (int i \u003d prefix + 2; i \u003c size; i++) {\n-            if (array[i] \u003d\u003d SYSTEM_SEPARATOR \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026 array[i - 2] \u003d\u003d \u0027.\u0027 \u0026\u0026\n-                    (i \u003d\u003d prefix + 2 || array[i - 3] \u003d\u003d SYSTEM_SEPARATOR)) {\n+            if (array[i] \u003d\u003d separator \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026 array[i - 2] \u003d\u003d \u0027.\u0027 \u0026\u0026\n+                    (i \u003d\u003d prefix + 2 || array[i - 3] \u003d\u003d separator)) {\n                 if (i \u003d\u003d prefix + 2) {\n                     return null;\n                 }\n                 if (i \u003d\u003d size - 1) {\n                     lastIsDirectory \u003d true;\n                 }\n                 int j;\n                 for (j \u003d i - 4 ; j \u003e\u003d prefix; j--) {\n-                    if (array[j] \u003d\u003d SYSTEM_SEPARATOR) {\n+                    if (array[j] \u003d\u003d separator) {\n                         // remove b/../ from a/b/../c\n                         System.arraycopy(array, i + 1, array, j + 1, size - i);\n                         size -\u003d (i - j);\n                         i \u003d j + 1;\n                         continue outer;\n                     }\n                 }\n                 // remove a/../ from a/../c\n                 System.arraycopy(array, i + 1, array, prefix, size - i);\n                 size -\u003d (i + 1 - prefix);\n                 i \u003d prefix + 1;\n             }\n         }\n         \n         if (size \u003c\u003d 0) {  // should never be less than 0\n             return \"\";\n         }\n         if (size \u003c\u003d prefix) {  // should never be less than prefix\n             return new String(array, 0, size);\n         }\n         if (lastIsDirectory \u0026\u0026 keepSeparator) {\n             return new String(array, 0, size);  // keep trailing separator\n         }\n         return new String(array, 0, size - 1);  // lose trailing separator\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ybodychange",
          "commitMessage": "IO-156 Add normalize() and normalizeNoEndSeparator() method flavours which allow the separator character to be specified\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@723186 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1228355384000,
          "commitName": "4a3fd09f1b0296514684fa2931c61bd8130f3cfd",
          "commitAuthor": "Niall Pemberton",
          "commitDateOld": 1227923411000,
          "commitNameOld": "d55dd62cc0b07e1124369d74dd0095cc2b491dfe",
          "commitAuthorOld": "Niall Pemberton",
          "daysBetweenCommits": 5.0,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,91 +1,92 @@\n-    private static String doNormalize(String filename, boolean keepSeparator) {\n+    private static String doNormalize(String filename, char separator, boolean keepSeparator) {\n         if (filename \u003d\u003d null) {\n             return null;\n         }\n         int size \u003d filename.length();\n         if (size \u003d\u003d 0) {\n             return filename;\n         }\n         int prefix \u003d getPrefixLength(filename);\n         if (prefix \u003c 0) {\n             return null;\n         }\n         \n         char[] array \u003d new char[size + 2];  // +1 for possible extra slash, +2 for arraycopy\n         filename.getChars(0, filename.length(), array, 0);\n         \n         // fix separators throughout\n+        char otherSeparator \u003d (separator \u003d\u003d SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR);\n         for (int i \u003d 0; i \u003c array.length; i++) {\n-            if (array[i] \u003d\u003d OTHER_SEPARATOR) {\n-                array[i] \u003d SYSTEM_SEPARATOR;\n+            if (array[i] \u003d\u003d otherSeparator) {\n+                array[i] \u003d separator;\n             }\n         }\n         \n         // add extra separator on the end to simplify code below\n         boolean lastIsDirectory \u003d true;\n-        if (array[size - 1] !\u003d SYSTEM_SEPARATOR) {\n-            array[size++] \u003d SYSTEM_SEPARATOR;\n+        if (array[size - 1] !\u003d separator) {\n+            array[size++] \u003d separator;\n             lastIsDirectory \u003d false;\n         }\n         \n         // adjoining slashes\n         for (int i \u003d prefix + 1; i \u003c size; i++) {\n-            if (array[i] \u003d\u003d SYSTEM_SEPARATOR \u0026\u0026 array[i - 1] \u003d\u003d SYSTEM_SEPARATOR) {\n+            if (array[i] \u003d\u003d separator \u0026\u0026 array[i - 1] \u003d\u003d separator) {\n                 System.arraycopy(array, i, array, i - 1, size - i);\n                 size--;\n                 i--;\n             }\n         }\n         \n         // dot slash\n         for (int i \u003d prefix + 1; i \u003c size; i++) {\n-            if (array[i] \u003d\u003d SYSTEM_SEPARATOR \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026\n-                    (i \u003d\u003d prefix + 1 || array[i - 2] \u003d\u003d SYSTEM_SEPARATOR)) {\n+            if (array[i] \u003d\u003d separator \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026\n+                    (i \u003d\u003d prefix + 1 || array[i - 2] \u003d\u003d separator)) {\n                 if (i \u003d\u003d size - 1) {\n                     lastIsDirectory \u003d true;\n                 }\n                 System.arraycopy(array, i + 1, array, i - 1, size - i);\n                 size -\u003d2;\n                 i--;\n             }\n         }\n         \n         // double dot slash\n         outer:\n         for (int i \u003d prefix + 2; i \u003c size; i++) {\n-            if (array[i] \u003d\u003d SYSTEM_SEPARATOR \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026 array[i - 2] \u003d\u003d \u0027.\u0027 \u0026\u0026\n-                    (i \u003d\u003d prefix + 2 || array[i - 3] \u003d\u003d SYSTEM_SEPARATOR)) {\n+            if (array[i] \u003d\u003d separator \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026 array[i - 2] \u003d\u003d \u0027.\u0027 \u0026\u0026\n+                    (i \u003d\u003d prefix + 2 || array[i - 3] \u003d\u003d separator)) {\n                 if (i \u003d\u003d prefix + 2) {\n                     return null;\n                 }\n                 if (i \u003d\u003d size - 1) {\n                     lastIsDirectory \u003d true;\n                 }\n                 int j;\n                 for (j \u003d i - 4 ; j \u003e\u003d prefix; j--) {\n-                    if (array[j] \u003d\u003d SYSTEM_SEPARATOR) {\n+                    if (array[j] \u003d\u003d separator) {\n                         // remove b/../ from a/b/../c\n                         System.arraycopy(array, i + 1, array, j + 1, size - i);\n                         size -\u003d (i - j);\n                         i \u003d j + 1;\n                         continue outer;\n                     }\n                 }\n                 // remove a/../ from a/../c\n                 System.arraycopy(array, i + 1, array, prefix, size - i);\n                 size -\u003d (i + 1 - prefix);\n                 i \u003d prefix + 1;\n             }\n         }\n         \n         if (size \u003c\u003d 0) {  // should never be less than 0\n             return \"\";\n         }\n         if (size \u003c\u003d prefix) {  // should never be less than prefix\n             return new String(array, 0, size);\n         }\n         if (lastIsDirectory \u0026\u0026 keepSeparator) {\n             return new String(array, 0, size);  // keep trailing separator\n         }\n         return new String(array, 0, size - 1);  // lose trailing separator\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "b39e430b27a666ec6195d9f77b09b3ae2c21f011": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "Treat separator at end of filename as sign of directory\nAdjust other methods to this new definition\nAdjust absolute prefix calculation to always end in separator\nAdd new methods that omit the end separator\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@279094 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1126039666000,
      "commitName": "b39e430b27a666ec6195d9f77b09b3ae2c21f011",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Treat separator at end of filename as sign of directory\nAdjust other methods to this new definition\nAdjust absolute prefix calculation to always end in separator\nAdd new methods that omit the end separator\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@279094 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1126039666000,
          "commitName": "b39e430b27a666ec6195d9f77b09b3ae2c21f011",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1125437023000,
          "commitNameOld": "1bff1d39fe1d9b6be5d7e6c6c821849eeb3391fe",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 6.98,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,74 +1,91 @@\n-    public static String normalize(String filename) {\n+    private static String doNormalize(String filename, boolean keepSeparator) {\n         if (filename \u003d\u003d null) {\n             return null;\n         }\n         int size \u003d filename.length();\n         if (size \u003d\u003d 0) {\n             return filename;\n         }\n         int prefix \u003d getPrefixLength(filename);\n         if (prefix \u003c 0) {\n             return null;\n         }\n         \n         char[] array \u003d new char[size + 2];  // +1 for possible extra slash, +2 for arraycopy\n         filename.getChars(0, filename.length(), array, 0);\n         \n         // fix separators throughout\n         for (int i \u003d 0; i \u003c array.length; i++) {\n             if (array[i] \u003d\u003d OTHER_SEPARATOR) {\n                 array[i] \u003d SYSTEM_SEPARATOR;\n             }\n         }\n-        if (isSeparator(array[size - 1]) \u003d\u003d false) {\n+        \n+        // add extra separator on the end to simplify code below\n+        boolean lastIsDirectory \u003d true;\n+        if (array[size - 1] !\u003d SYSTEM_SEPARATOR) {\n             array[size++] \u003d SYSTEM_SEPARATOR;\n+            lastIsDirectory \u003d false;\n         }\n         \n         // adjoining slashes\n         for (int i \u003d prefix + 1; i \u003c size; i++) {\n             if (array[i] \u003d\u003d SYSTEM_SEPARATOR \u0026\u0026 array[i - 1] \u003d\u003d SYSTEM_SEPARATOR) {\n                 System.arraycopy(array, i, array, i - 1, size - i);\n                 size--;\n                 i--;\n             }\n         }\n+        \n         // dot slash\n         for (int i \u003d prefix + 1; i \u003c size; i++) {\n             if (array[i] \u003d\u003d SYSTEM_SEPARATOR \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026\n                     (i \u003d\u003d prefix + 1 || array[i - 2] \u003d\u003d SYSTEM_SEPARATOR)) {\n+                if (i \u003d\u003d size - 1) {\n+                    lastIsDirectory \u003d true;\n+                }\n                 System.arraycopy(array, i + 1, array, i - 1, size - i);\n                 size -\u003d2;\n                 i--;\n             }\n         }\n+        \n         // double dot slash\n         outer:\n         for (int i \u003d prefix + 2; i \u003c size; i++) {\n             if (array[i] \u003d\u003d SYSTEM_SEPARATOR \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026 array[i - 2] \u003d\u003d \u0027.\u0027 \u0026\u0026\n                     (i \u003d\u003d prefix + 2 || array[i - 3] \u003d\u003d SYSTEM_SEPARATOR)) {\n                 if (i \u003d\u003d prefix + 2) {\n                     return null;\n                 }\n+                if (i \u003d\u003d size - 1) {\n+                    lastIsDirectory \u003d true;\n+                }\n                 int j;\n                 for (j \u003d i - 4 ; j \u003e\u003d prefix; j--) {\n                     if (array[j] \u003d\u003d SYSTEM_SEPARATOR) {\n+                        // remove b/../ from a/b/../c\n                         System.arraycopy(array, i + 1, array, j + 1, size - i);\n                         size -\u003d (i - j);\n                         i \u003d j + 1;\n                         continue outer;\n                     }\n                 }\n+                // remove a/../ from a/../c\n                 System.arraycopy(array, i + 1, array, prefix, size - i);\n                 size -\u003d (i + 1 - prefix);\n                 i \u003d prefix + 1;\n             }\n         }\n         \n         if (size \u003c\u003d 0) {  // should never be less than 0\n             return \"\";\n         }\n         if (size \u003c\u003d prefix) {  // should never be less than prefix\n             return new String(array, 0, size);\n         }\n-        return new String(array, 0, size - 1);\n+        if (lastIsDirectory \u0026\u0026 keepSeparator) {\n+            return new String(array, 0, size);  // keep trailing separator\n+        }\n+        return new String(array, 0, size - 1);  // lose trailing separator\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldMethodName": "normalize",
            "newMethodName": "doNormalize"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Treat separator at end of filename as sign of directory\nAdjust other methods to this new definition\nAdjust absolute prefix calculation to always end in separator\nAdd new methods that omit the end separator\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@279094 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1126039666000,
          "commitName": "b39e430b27a666ec6195d9f77b09b3ae2c21f011",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1125437023000,
          "commitNameOld": "1bff1d39fe1d9b6be5d7e6c6c821849eeb3391fe",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 6.98,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,74 +1,91 @@\n-    public static String normalize(String filename) {\n+    private static String doNormalize(String filename, boolean keepSeparator) {\n         if (filename \u003d\u003d null) {\n             return null;\n         }\n         int size \u003d filename.length();\n         if (size \u003d\u003d 0) {\n             return filename;\n         }\n         int prefix \u003d getPrefixLength(filename);\n         if (prefix \u003c 0) {\n             return null;\n         }\n         \n         char[] array \u003d new char[size + 2];  // +1 for possible extra slash, +2 for arraycopy\n         filename.getChars(0, filename.length(), array, 0);\n         \n         // fix separators throughout\n         for (int i \u003d 0; i \u003c array.length; i++) {\n             if (array[i] \u003d\u003d OTHER_SEPARATOR) {\n                 array[i] \u003d SYSTEM_SEPARATOR;\n             }\n         }\n-        if (isSeparator(array[size - 1]) \u003d\u003d false) {\n+        \n+        // add extra separator on the end to simplify code below\n+        boolean lastIsDirectory \u003d true;\n+        if (array[size - 1] !\u003d SYSTEM_SEPARATOR) {\n             array[size++] \u003d SYSTEM_SEPARATOR;\n+            lastIsDirectory \u003d false;\n         }\n         \n         // adjoining slashes\n         for (int i \u003d prefix + 1; i \u003c size; i++) {\n             if (array[i] \u003d\u003d SYSTEM_SEPARATOR \u0026\u0026 array[i - 1] \u003d\u003d SYSTEM_SEPARATOR) {\n                 System.arraycopy(array, i, array, i - 1, size - i);\n                 size--;\n                 i--;\n             }\n         }\n+        \n         // dot slash\n         for (int i \u003d prefix + 1; i \u003c size; i++) {\n             if (array[i] \u003d\u003d SYSTEM_SEPARATOR \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026\n                     (i \u003d\u003d prefix + 1 || array[i - 2] \u003d\u003d SYSTEM_SEPARATOR)) {\n+                if (i \u003d\u003d size - 1) {\n+                    lastIsDirectory \u003d true;\n+                }\n                 System.arraycopy(array, i + 1, array, i - 1, size - i);\n                 size -\u003d2;\n                 i--;\n             }\n         }\n+        \n         // double dot slash\n         outer:\n         for (int i \u003d prefix + 2; i \u003c size; i++) {\n             if (array[i] \u003d\u003d SYSTEM_SEPARATOR \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026 array[i - 2] \u003d\u003d \u0027.\u0027 \u0026\u0026\n                     (i \u003d\u003d prefix + 2 || array[i - 3] \u003d\u003d SYSTEM_SEPARATOR)) {\n                 if (i \u003d\u003d prefix + 2) {\n                     return null;\n                 }\n+                if (i \u003d\u003d size - 1) {\n+                    lastIsDirectory \u003d true;\n+                }\n                 int j;\n                 for (j \u003d i - 4 ; j \u003e\u003d prefix; j--) {\n                     if (array[j] \u003d\u003d SYSTEM_SEPARATOR) {\n+                        // remove b/../ from a/b/../c\n                         System.arraycopy(array, i + 1, array, j + 1, size - i);\n                         size -\u003d (i - j);\n                         i \u003d j + 1;\n                         continue outer;\n                     }\n                 }\n+                // remove a/../ from a/../c\n                 System.arraycopy(array, i + 1, array, prefix, size - i);\n                 size -\u003d (i + 1 - prefix);\n                 i \u003d prefix + 1;\n             }\n         }\n         \n         if (size \u003c\u003d 0) {  // should never be less than 0\n             return \"\";\n         }\n         if (size \u003c\u003d prefix) {  // should never be less than prefix\n             return new String(array, 0, size);\n         }\n-        return new String(array, 0, size - 1);\n+        if (lastIsDirectory \u0026\u0026 keepSeparator) {\n+            return new String(array, 0, size);  // keep trailing separator\n+        }\n+        return new String(array, 0, size - 1);  // lose trailing separator\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Treat separator at end of filename as sign of directory\nAdjust other methods to this new definition\nAdjust absolute prefix calculation to always end in separator\nAdd new methods that omit the end separator\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@279094 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1126039666000,
          "commitName": "b39e430b27a666ec6195d9f77b09b3ae2c21f011",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1125437023000,
          "commitNameOld": "1bff1d39fe1d9b6be5d7e6c6c821849eeb3391fe",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 6.98,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,74 +1,91 @@\n-    public static String normalize(String filename) {\n+    private static String doNormalize(String filename, boolean keepSeparator) {\n         if (filename \u003d\u003d null) {\n             return null;\n         }\n         int size \u003d filename.length();\n         if (size \u003d\u003d 0) {\n             return filename;\n         }\n         int prefix \u003d getPrefixLength(filename);\n         if (prefix \u003c 0) {\n             return null;\n         }\n         \n         char[] array \u003d new char[size + 2];  // +1 for possible extra slash, +2 for arraycopy\n         filename.getChars(0, filename.length(), array, 0);\n         \n         // fix separators throughout\n         for (int i \u003d 0; i \u003c array.length; i++) {\n             if (array[i] \u003d\u003d OTHER_SEPARATOR) {\n                 array[i] \u003d SYSTEM_SEPARATOR;\n             }\n         }\n-        if (isSeparator(array[size - 1]) \u003d\u003d false) {\n+        \n+        // add extra separator on the end to simplify code below\n+        boolean lastIsDirectory \u003d true;\n+        if (array[size - 1] !\u003d SYSTEM_SEPARATOR) {\n             array[size++] \u003d SYSTEM_SEPARATOR;\n+            lastIsDirectory \u003d false;\n         }\n         \n         // adjoining slashes\n         for (int i \u003d prefix + 1; i \u003c size; i++) {\n             if (array[i] \u003d\u003d SYSTEM_SEPARATOR \u0026\u0026 array[i - 1] \u003d\u003d SYSTEM_SEPARATOR) {\n                 System.arraycopy(array, i, array, i - 1, size - i);\n                 size--;\n                 i--;\n             }\n         }\n+        \n         // dot slash\n         for (int i \u003d prefix + 1; i \u003c size; i++) {\n             if (array[i] \u003d\u003d SYSTEM_SEPARATOR \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026\n                     (i \u003d\u003d prefix + 1 || array[i - 2] \u003d\u003d SYSTEM_SEPARATOR)) {\n+                if (i \u003d\u003d size - 1) {\n+                    lastIsDirectory \u003d true;\n+                }\n                 System.arraycopy(array, i + 1, array, i - 1, size - i);\n                 size -\u003d2;\n                 i--;\n             }\n         }\n+        \n         // double dot slash\n         outer:\n         for (int i \u003d prefix + 2; i \u003c size; i++) {\n             if (array[i] \u003d\u003d SYSTEM_SEPARATOR \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026 array[i - 2] \u003d\u003d \u0027.\u0027 \u0026\u0026\n                     (i \u003d\u003d prefix + 2 || array[i - 3] \u003d\u003d SYSTEM_SEPARATOR)) {\n                 if (i \u003d\u003d prefix + 2) {\n                     return null;\n                 }\n+                if (i \u003d\u003d size - 1) {\n+                    lastIsDirectory \u003d true;\n+                }\n                 int j;\n                 for (j \u003d i - 4 ; j \u003e\u003d prefix; j--) {\n                     if (array[j] \u003d\u003d SYSTEM_SEPARATOR) {\n+                        // remove b/../ from a/b/../c\n                         System.arraycopy(array, i + 1, array, j + 1, size - i);\n                         size -\u003d (i - j);\n                         i \u003d j + 1;\n                         continue outer;\n                     }\n                 }\n+                // remove a/../ from a/../c\n                 System.arraycopy(array, i + 1, array, prefix, size - i);\n                 size -\u003d (i + 1 - prefix);\n                 i \u003d prefix + 1;\n             }\n         }\n         \n         if (size \u003c\u003d 0) {  // should never be less than 0\n             return \"\";\n         }\n         if (size \u003c\u003d prefix) {  // should never be less than prefix\n             return new String(array, 0, size);\n         }\n-        return new String(array, 0, size - 1);\n+        if (lastIsDirectory \u0026\u0026 keepSeparator) {\n+            return new String(array, 0, size);  // keep trailing separator\n+        }\n+        return new String(array, 0, size - 1);  // lose trailing separator\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Treat separator at end of filename as sign of directory\nAdjust other methods to this new definition\nAdjust absolute prefix calculation to always end in separator\nAdd new methods that omit the end separator\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@279094 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1126039666000,
          "commitName": "b39e430b27a666ec6195d9f77b09b3ae2c21f011",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1125437023000,
          "commitNameOld": "1bff1d39fe1d9b6be5d7e6c6c821849eeb3391fe",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 6.98,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,74 +1,91 @@\n-    public static String normalize(String filename) {\n+    private static String doNormalize(String filename, boolean keepSeparator) {\n         if (filename \u003d\u003d null) {\n             return null;\n         }\n         int size \u003d filename.length();\n         if (size \u003d\u003d 0) {\n             return filename;\n         }\n         int prefix \u003d getPrefixLength(filename);\n         if (prefix \u003c 0) {\n             return null;\n         }\n         \n         char[] array \u003d new char[size + 2];  // +1 for possible extra slash, +2 for arraycopy\n         filename.getChars(0, filename.length(), array, 0);\n         \n         // fix separators throughout\n         for (int i \u003d 0; i \u003c array.length; i++) {\n             if (array[i] \u003d\u003d OTHER_SEPARATOR) {\n                 array[i] \u003d SYSTEM_SEPARATOR;\n             }\n         }\n-        if (isSeparator(array[size - 1]) \u003d\u003d false) {\n+        \n+        // add extra separator on the end to simplify code below\n+        boolean lastIsDirectory \u003d true;\n+        if (array[size - 1] !\u003d SYSTEM_SEPARATOR) {\n             array[size++] \u003d SYSTEM_SEPARATOR;\n+            lastIsDirectory \u003d false;\n         }\n         \n         // adjoining slashes\n         for (int i \u003d prefix + 1; i \u003c size; i++) {\n             if (array[i] \u003d\u003d SYSTEM_SEPARATOR \u0026\u0026 array[i - 1] \u003d\u003d SYSTEM_SEPARATOR) {\n                 System.arraycopy(array, i, array, i - 1, size - i);\n                 size--;\n                 i--;\n             }\n         }\n+        \n         // dot slash\n         for (int i \u003d prefix + 1; i \u003c size; i++) {\n             if (array[i] \u003d\u003d SYSTEM_SEPARATOR \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026\n                     (i \u003d\u003d prefix + 1 || array[i - 2] \u003d\u003d SYSTEM_SEPARATOR)) {\n+                if (i \u003d\u003d size - 1) {\n+                    lastIsDirectory \u003d true;\n+                }\n                 System.arraycopy(array, i + 1, array, i - 1, size - i);\n                 size -\u003d2;\n                 i--;\n             }\n         }\n+        \n         // double dot slash\n         outer:\n         for (int i \u003d prefix + 2; i \u003c size; i++) {\n             if (array[i] \u003d\u003d SYSTEM_SEPARATOR \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026 array[i - 2] \u003d\u003d \u0027.\u0027 \u0026\u0026\n                     (i \u003d\u003d prefix + 2 || array[i - 3] \u003d\u003d SYSTEM_SEPARATOR)) {\n                 if (i \u003d\u003d prefix + 2) {\n                     return null;\n                 }\n+                if (i \u003d\u003d size - 1) {\n+                    lastIsDirectory \u003d true;\n+                }\n                 int j;\n                 for (j \u003d i - 4 ; j \u003e\u003d prefix; j--) {\n                     if (array[j] \u003d\u003d SYSTEM_SEPARATOR) {\n+                        // remove b/../ from a/b/../c\n                         System.arraycopy(array, i + 1, array, j + 1, size - i);\n                         size -\u003d (i - j);\n                         i \u003d j + 1;\n                         continue outer;\n                     }\n                 }\n+                // remove a/../ from a/../c\n                 System.arraycopy(array, i + 1, array, prefix, size - i);\n                 size -\u003d (i + 1 - prefix);\n                 i \u003d prefix + 1;\n             }\n         }\n         \n         if (size \u003c\u003d 0) {  // should never be less than 0\n             return \"\";\n         }\n         if (size \u003c\u003d prefix) {  // should never be less than prefix\n             return new String(array, 0, size);\n         }\n-        return new String(array, 0, size - 1);\n+        if (lastIsDirectory \u0026\u0026 keepSeparator) {\n+            return new String(array, 0, size);  // keep trailing separator\n+        }\n+        return new String(array, 0, size - 1);  // lose trailing separator\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "3323d0a8d6167f47aac9b30c36979cd4daf610c8": {
      "type": "Ybodychange",
      "commitMessage": "Refactor normalize method, and simplify getPrefixLength\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140644 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1101518525000,
      "commitName": "3323d0a8d6167f47aac9b30c36979cd4daf610c8",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": 1101496708000,
      "commitNameOld": "2e16d85893141e996eef35892ddabc3c2bf19ccc",
      "commitAuthorOld": "Martin Cooper",
      "daysBetweenCommits": 0.25,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,74 @@\n     public static String normalize(String filename) {\n         if (filename \u003d\u003d null) {\n             return null;\n         }\n-        char[] array \u003d filename.toCharArray();\n+        int size \u003d filename.length();\n+        if (size \u003d\u003d 0) {\n+            return filename;\n+        }\n         int prefix \u003d getPrefixLength(filename);\n         if (prefix \u003c 0) {\n             return null;\n         }\n         \n-        // TODO: Use prefix\n+        char[] array \u003d new char[size + 2];  // +1 for possible extra slash, +2 for arraycopy\n+        filename.getChars(0, filename.length(), array, 0);\n         \n-        int size \u003d array.length;\n-        // fix separators\n+        // fix separators throughout\n         for (int i \u003d 0; i \u003c array.length; i++) {\n             if (array[i] \u003d\u003d OTHER_SEPARATOR) {\n                 array[i] \u003d SYSTEM_SEPARATOR;\n             }\n         }\n+        if (isSeparator(array[size - 1]) \u003d\u003d false) {\n+            array[size++] \u003d SYSTEM_SEPARATOR;\n+        }\n+        \n         // adjoining slashes\n-        for (int i \u003d 1; i \u003c size; i++) {\n+        for (int i \u003d prefix + 1; i \u003c size; i++) {\n             if (array[i] \u003d\u003d SYSTEM_SEPARATOR \u0026\u0026 array[i - 1] \u003d\u003d SYSTEM_SEPARATOR) {\n                 System.arraycopy(array, i, array, i - 1, size - i);\n                 size--;\n                 i--;\n             }\n         }\n         // dot slash\n-        for (int i \u003d 2; i \u003c size; i++) {\n+        for (int i \u003d prefix + 1; i \u003c size; i++) {\n             if (array[i] \u003d\u003d SYSTEM_SEPARATOR \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026\n-                    array[i - 2] \u003d\u003d SYSTEM_SEPARATOR) {\n-                System.arraycopy(array, i, array, i - 2, size - i);\n+                    (i \u003d\u003d prefix + 1 || array[i - 2] \u003d\u003d SYSTEM_SEPARATOR)) {\n+                System.arraycopy(array, i + 1, array, i - 1, size - i);\n                 size -\u003d2;\n                 i--;\n             }\n         }\n         // double dot slash\n         outer:\n-        for (int i \u003d 2; i \u003c size; i++) {\n-            if (array[i] \u003d\u003d SYSTEM_SEPARATOR \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026\n-                    array[i - 2] \u003d\u003d \u0027.\u0027 \u0026\u0026 (i \u003d\u003d 2 || array[i - 3] \u003d\u003d SYSTEM_SEPARATOR)) {\n-                if (i \u003d\u003d 2) {\n+        for (int i \u003d prefix + 2; i \u003c size; i++) {\n+            if (array[i] \u003d\u003d SYSTEM_SEPARATOR \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026 array[i - 2] \u003d\u003d \u0027.\u0027 \u0026\u0026\n+                    (i \u003d\u003d prefix + 2 || array[i - 3] \u003d\u003d SYSTEM_SEPARATOR)) {\n+                if (i \u003d\u003d prefix + 2) {\n                     return null;\n                 }\n                 int j;\n-                for (j \u003d i - 4 ; j \u003e\u003d 0; j--) {\n+                for (j \u003d i - 4 ; j \u003e\u003d prefix; j--) {\n                     if (array[j] \u003d\u003d SYSTEM_SEPARATOR) {\n-                        System.arraycopy(array, i, array, j, size - i);\n+                        System.arraycopy(array, i + 1, array, j + 1, size - i);\n                         size -\u003d (i - j);\n                         i \u003d j + 1;\n                         continue outer;\n                     }\n                 }\n-                System.arraycopy(array, i + 1, array, 0, size - i - 1);\n-                size -\u003d (i + 1);\n-                i \u003d 1;\n+                System.arraycopy(array, i + 1, array, prefix, size - i);\n+                size -\u003d (i + 1 - prefix);\n+                i \u003d prefix + 1;\n             }\n         }\n         \n-        return new String(array, 0, size);\n+        if (size \u003c\u003d 0) {  // should never be less than 0\n+            return \"\";\n+        }\n+        if (size \u003c\u003d prefix) {  // should never be less than prefix\n+            return new String(array, 0, size);\n+        }\n+        return new String(array, 0, size - 1);\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5964ce6decf3d7ab3efb7e1a9852b2f85a03ec6d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Add methods to handle filename prefixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140641 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1101168269000,
      "commitName": "5964ce6decf3d7ab3efb7e1a9852b2f85a03ec6d",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Add methods to handle filename prefixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140641 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1101168269000,
          "commitName": "5964ce6decf3d7ab3efb7e1a9852b2f85a03ec6d",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1101085915000,
          "commitNameOld": "f93f8bebb4fc714a6b60e1d2a4452d6ff6d3df5c",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.95,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,61 @@\n-    public static String normalize(String path) {\n-        String normalized \u003d path;\n-        // Resolve occurrences of \"//\" in the normalized path\n-        while (true) {\n-            int index \u003d normalized.indexOf(\"//\");\n-            if (index \u003c 0) {\n-                break;\n-            }\n-            normalized \u003d\n-                normalized.substring(0, index)\n-                    + normalized.substring(index + 1);\n+    public static String normalize(String filename) {\n+        if (filename \u003d\u003d null) {\n+            return null;\n         }\n-\n-        // Resolve occurrences of \"/./\" in the normalized path\n-        while (true) {\n-            int index \u003d normalized.indexOf(\"/./\");\n-            if (index \u003c 0) {\n-                break;\n-            }\n-            normalized \u003d\n-                normalized.substring(0, index)\n-                    + normalized.substring(index + 2);\n+        char[] array \u003d filename.toCharArray();\n+        int prefix \u003d getPrefixLength(filename);\n+        if (prefix \u003c 0) {\n+            return null;\n         }\n-\n-        // Resolve occurrences of \"/../\" in the normalized path\n-        while (true) {\n-            int index \u003d normalized.indexOf(\"/../\");\n-            if (index \u003c 0) {\n-                break;\n+        \n+        // TODO: Use prefix\n+        \n+        int size \u003d array.length;\n+        // fix separators\n+        for (int i \u003d 0; i \u003c array.length; i++) {\n+            if (array[i] \u003d\u003d OTHER_SEPARATOR) {\n+                array[i] \u003d SYSTEM_SEPARATOR;\n             }\n-            if (index \u003d\u003d 0) {\n-                return null; // Trying to go outside our context\n-            }\n-            int index2 \u003d normalized.lastIndexOf(\u0027/\u0027, index - 1);\n-            normalized \u003d\n-                normalized.substring(0, index2)\n-                    + normalized.substring(index + 3);\n         }\n-\n-        // Return the normalized path that we have completed\n-        return normalized;\n+        // adjoining slashes\n+        for (int i \u003d 1; i \u003c size; i++) {\n+            if (array[i] \u003d\u003d SYSTEM_SEPARATOR \u0026\u0026 array[i - 1] \u003d\u003d SYSTEM_SEPARATOR) {\n+                System.arraycopy(array, i, array, i - 1, size - i);\n+                size--;\n+                i--;\n+            }\n+        }\n+        // dot slash\n+        for (int i \u003d 2; i \u003c size; i++) {\n+            if (array[i] \u003d\u003d SYSTEM_SEPARATOR \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026\n+                    array[i - 2] \u003d\u003d SYSTEM_SEPARATOR) {\n+                System.arraycopy(array, i, array, i - 2, size - i);\n+                size -\u003d2;\n+                i--;\n+            }\n+        }\n+        // double dot slash\n+        outer:\n+        for (int i \u003d 2; i \u003c size; i++) {\n+            if (array[i] \u003d\u003d SYSTEM_SEPARATOR \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026\n+                    array[i - 2] \u003d\u003d \u0027.\u0027 \u0026\u0026 (i \u003d\u003d 2 || array[i - 3] \u003d\u003d SYSTEM_SEPARATOR)) {\n+                if (i \u003d\u003d 2) {\n+                    return null;\n+                }\n+                int j;\n+                for (j \u003d i - 4 ; j \u003e\u003d 0; j--) {\n+                    if (array[j] \u003d\u003d SYSTEM_SEPARATOR) {\n+                        System.arraycopy(array, i, array, j, size - i);\n+                        size -\u003d (i - j);\n+                        i \u003d j + 1;\n+                        continue outer;\n+                    }\n+                }\n+                System.arraycopy(array, i + 1, array, 0, size - i - 1);\n+                size -\u003d (i + 1);\n+                i \u003d 1;\n+            }\n+        }\n+        \n+        return new String(array, 0, size);\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Add methods to handle filename prefixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140641 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1101168269000,
          "commitName": "5964ce6decf3d7ab3efb7e1a9852b2f85a03ec6d",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1101085915000,
          "commitNameOld": "f93f8bebb4fc714a6b60e1d2a4452d6ff6d3df5c",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.95,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,61 @@\n-    public static String normalize(String path) {\n-        String normalized \u003d path;\n-        // Resolve occurrences of \"//\" in the normalized path\n-        while (true) {\n-            int index \u003d normalized.indexOf(\"//\");\n-            if (index \u003c 0) {\n-                break;\n-            }\n-            normalized \u003d\n-                normalized.substring(0, index)\n-                    + normalized.substring(index + 1);\n+    public static String normalize(String filename) {\n+        if (filename \u003d\u003d null) {\n+            return null;\n         }\n-\n-        // Resolve occurrences of \"/./\" in the normalized path\n-        while (true) {\n-            int index \u003d normalized.indexOf(\"/./\");\n-            if (index \u003c 0) {\n-                break;\n-            }\n-            normalized \u003d\n-                normalized.substring(0, index)\n-                    + normalized.substring(index + 2);\n+        char[] array \u003d filename.toCharArray();\n+        int prefix \u003d getPrefixLength(filename);\n+        if (prefix \u003c 0) {\n+            return null;\n         }\n-\n-        // Resolve occurrences of \"/../\" in the normalized path\n-        while (true) {\n-            int index \u003d normalized.indexOf(\"/../\");\n-            if (index \u003c 0) {\n-                break;\n+        \n+        // TODO: Use prefix\n+        \n+        int size \u003d array.length;\n+        // fix separators\n+        for (int i \u003d 0; i \u003c array.length; i++) {\n+            if (array[i] \u003d\u003d OTHER_SEPARATOR) {\n+                array[i] \u003d SYSTEM_SEPARATOR;\n             }\n-            if (index \u003d\u003d 0) {\n-                return null; // Trying to go outside our context\n-            }\n-            int index2 \u003d normalized.lastIndexOf(\u0027/\u0027, index - 1);\n-            normalized \u003d\n-                normalized.substring(0, index2)\n-                    + normalized.substring(index + 3);\n         }\n-\n-        // Return the normalized path that we have completed\n-        return normalized;\n+        // adjoining slashes\n+        for (int i \u003d 1; i \u003c size; i++) {\n+            if (array[i] \u003d\u003d SYSTEM_SEPARATOR \u0026\u0026 array[i - 1] \u003d\u003d SYSTEM_SEPARATOR) {\n+                System.arraycopy(array, i, array, i - 1, size - i);\n+                size--;\n+                i--;\n+            }\n+        }\n+        // dot slash\n+        for (int i \u003d 2; i \u003c size; i++) {\n+            if (array[i] \u003d\u003d SYSTEM_SEPARATOR \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026\n+                    array[i - 2] \u003d\u003d SYSTEM_SEPARATOR) {\n+                System.arraycopy(array, i, array, i - 2, size - i);\n+                size -\u003d2;\n+                i--;\n+            }\n+        }\n+        // double dot slash\n+        outer:\n+        for (int i \u003d 2; i \u003c size; i++) {\n+            if (array[i] \u003d\u003d SYSTEM_SEPARATOR \u0026\u0026 array[i - 1] \u003d\u003d \u0027.\u0027 \u0026\u0026\n+                    array[i - 2] \u003d\u003d \u0027.\u0027 \u0026\u0026 (i \u003d\u003d 2 || array[i - 3] \u003d\u003d SYSTEM_SEPARATOR)) {\n+                if (i \u003d\u003d 2) {\n+                    return null;\n+                }\n+                int j;\n+                for (j \u003d i - 4 ; j \u003e\u003d 0; j--) {\n+                    if (array[j] \u003d\u003d SYSTEM_SEPARATOR) {\n+                        System.arraycopy(array, i, array, j, size - i);\n+                        size -\u003d (i - j);\n+                        i \u003d j + 1;\n+                        continue outer;\n+                    }\n+                }\n+                System.arraycopy(array, i + 1, array, 0, size - i - 1);\n+                size -\u003d (i + 1);\n+                i \u003d 1;\n+            }\n+        }\n+        \n+        return new String(array, 0, size);\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "e47d347ce4255b8964e384bf0df170281c78d070": {
      "type": "Ybodychange",
      "commitMessage": "Made a start on getting us Checkstyle clean. Fixed a few hundred gripes,\nbut there are still many, many more.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140614 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1098591607000,
      "commitName": "e47d347ce4255b8964e384bf0df170281c78d070",
      "commitAuthor": "Martin Cooper",
      "commitDateOld": 1087103831000,
      "commitNameOld": "0c82c520078d45706f11cac7faa11576b0a8534d",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 132.96,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,42 @@\n-    public static String normalize( String path) {\n+    public static String normalize(String path) {\n         String normalized \u003d path;\n         // Resolve occurrences of \"//\" in the normalized path\n         while (true) {\n             int index \u003d normalized.indexOf(\"//\");\n-            if (index \u003c 0)\n+            if (index \u003c 0) {\n                 break;\n+            }\n             normalized \u003d\n                 normalized.substring(0, index)\n                     + normalized.substring(index + 1);\n         }\n \n         // Resolve occurrences of \"/./\" in the normalized path\n         while (true) {\n             int index \u003d normalized.indexOf(\"/./\");\n-            if (index \u003c 0)\n+            if (index \u003c 0) {\n                 break;\n+            }\n             normalized \u003d\n                 normalized.substring(0, index)\n                     + normalized.substring(index + 2);\n         }\n \n         // Resolve occurrences of \"/../\" in the normalized path\n         while (true) {\n             int index \u003d normalized.indexOf(\"/../\");\n-            if (index \u003c 0)\n+            if (index \u003c 0) {\n                 break;\n-            if (index \u003d\u003d 0)\n+            }\n+            if (index \u003d\u003d 0) {\n                 return null; // Trying to go outside our context\n+            }\n             int index2 \u003d normalized.lastIndexOf(\u0027/\u0027, index - 1);\n             normalized \u003d\n                 normalized.substring(0, index2)\n                     + normalized.substring(index + 3);\n         }\n \n         // Return the normalized path that we have completed\n         return normalized;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d5e24a4f1a2ff0e5c565f5b78fc0691e639b876e": {
      "type": "Yparametermetachange",
      "commitMessage": "removed lots of finals\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140456 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1072767169000,
      "commitName": "d5e24a4f1a2ff0e5c565f5b78fc0691e639b876e",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": 1072677558000,
      "commitNameOld": "8baab07e0d47ba43a197933f6519141871fde6c3",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 1.04,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n-    public static String normalize(final String path) {\n+    public static String normalize( String path) {\n         String normalized \u003d path;\n         // Resolve occurrences of \"//\" in the normalized path\n         while (true) {\n             int index \u003d normalized.indexOf(\"//\");\n             if (index \u003c 0)\n                 break;\n             normalized \u003d\n                 normalized.substring(0, index)\n                     + normalized.substring(index + 1);\n         }\n \n         // Resolve occurrences of \"/./\" in the normalized path\n         while (true) {\n             int index \u003d normalized.indexOf(\"/./\");\n             if (index \u003c 0)\n                 break;\n             normalized \u003d\n                 normalized.substring(0, index)\n                     + normalized.substring(index + 2);\n         }\n \n         // Resolve occurrences of \"/../\" in the normalized path\n         while (true) {\n             int index \u003d normalized.indexOf(\"/../\");\n             if (index \u003c 0)\n                 break;\n             if (index \u003d\u003d 0)\n                 return null; // Trying to go outside our context\n             int index2 \u003d normalized.lastIndexOf(\u0027/\u0027, index - 1);\n             normalized \u003d\n                 normalized.substring(0, index2)\n                     + normalized.substring(index + 3);\n         }\n \n         // Return the normalized path that we have completed\n         return normalized;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b901739a6779843da45a917a141cfd17114909de": {
      "type": "Ymovefromfile",
      "commitMessage": "moved all filename methods out of FileUtils and into the new FilenameUtils class. Updated the unit tests, though one test in FileUtilsTest does a bit of Filename testing. Javadoc will need a bit of checking. Updated tasks.xml to reflect this.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140425 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1069620210000,
      "commitName": "b901739a6779843da45a917a141cfd17114909de",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": 1069618450000,
      "commitNameOld": "f5e41b7cdb3aed5b19ad741cccb004dfeca745ac",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/io/FileUtils.java",
        "newPath": "src/java/org/apache/commons/io/FilenameUtils.java",
        "oldMethodName": "normalize",
        "newMethodName": "normalize"
      }
    },
    "8eeb52fc81c4e65c00839cfeef9f1cde8b1cc613": {
      "type": "Ymovefromfile",
      "commitMessage": "FileUtil moved into FileUtils. Oddly enough no methods clash in name.\nHowever there is a lot of clash of functionality, so methods need to be\nconsidered and removed.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140314 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1027819689000,
      "commitName": "8eeb52fc81c4e65c00839cfeef9f1cde8b1cc613",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": 1026599866000,
      "commitNameOld": "fcb1f1dc86e216faca4bdb9626200d99a6d9915a",
      "commitAuthorOld": "Nicola Ken Barozzi",
      "daysBetweenCommits": 14.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/io/FileUtil.java",
        "newPath": "src/java/org/apache/commons/io/FileUtils.java",
        "oldMethodName": "normalize",
        "newMethodName": "normalize"
      }
    },
    "c360a10db25701f682849e5913d150f13a09f3bb": {
      "type": "Yintroduced",
      "commitMessage": "New io classes from Avalon excalibur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140301 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1026166486000,
      "commitName": "c360a10db25701f682849e5913d150f13a09f3bb",
      "commitAuthor": "Nicola Ken Barozzi"
    }
  }
}