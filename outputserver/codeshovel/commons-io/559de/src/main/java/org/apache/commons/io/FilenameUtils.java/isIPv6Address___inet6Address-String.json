{
  "origin": "codeshovel",
  "repositoryName": "commons-io",
  "repositoryPath": "/repos/commons-io/.git",
  "startCommitName": "559de2c461e94ab636c959149c775bb27111fb48",
  "sourceFileName": "FilenameUtils.java",
  "functionName": "isIPv6Address",
  "functionId": "isIPv6Address___inet6Address-String",
  "sourceFilePath": "src/main/java/org/apache/commons/io/FilenameUtils.java",
  "functionStartLine": 1561,
  "functionEndLine": 1622,
  "changeHistory": [
    "44c5c5618d924a06fb9adae7856f31e75228d987",
    "9ba69d7b9af1ab71e0ca2d0044f464261ae6a199",
    "2736b6fe0b3fa22ec8e2b4184897ecadb021fc78"
  ],
  "changeHistoryShort": {
    "44c5c5618d924a06fb9adae7856f31e75228d987": "Ymultichange(Ybodychange,Yparametermetachange)",
    "9ba69d7b9af1ab71e0ca2d0044f464261ae6a199": "Ybodychange",
    "2736b6fe0b3fa22ec8e2b4184897ecadb021fc78": "Yintroduced"
  },
  "changeHistoryDetails": {
    "44c5c5618d924a06fb9adae7856f31e75228d987": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "Use final.",
      "commitDate": 1528840970000,
      "commitName": "44c5c5618d924a06fb9adae7856f31e75228d987",
      "commitAuthor": "Gary Gregory",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Use final.",
          "commitDate": 1528840970000,
          "commitName": "44c5c5618d924a06fb9adae7856f31e75228d987",
          "commitAuthor": "Gary Gregory",
          "commitDateOld": 1528477423000,
          "commitNameOld": "9ba69d7b9af1ab71e0ca2d0044f464261ae6a199",
          "commitAuthorOld": "Gary Gregory",
          "daysBetweenCommits": 4.21,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,62 +1,62 @@\n-    private static boolean isIPv6Address(String inet6Address) {\n-        boolean containsCompressedZeroes \u003d inet6Address.contains(\"::\");\n+    private static boolean isIPv6Address(final String inet6Address) {\n+        final boolean containsCompressedZeroes \u003d inet6Address.contains(\"::\");\n         if (containsCompressedZeroes \u0026\u0026 (inet6Address.indexOf(\"::\") !\u003d inet6Address.lastIndexOf(\"::\"))) {\n             return false;\n         }\n         if ((inet6Address.startsWith(\":\") \u0026\u0026 !inet6Address.startsWith(\"::\"))\n                 || (inet6Address.endsWith(\":\") \u0026\u0026 !inet6Address.endsWith(\"::\"))) {\n             return false;\n         }\n         String[] octets \u003d inet6Address.split(\":\");\n         if (containsCompressedZeroes) {\n-            List\u003cString\u003e octetList \u003d new ArrayList\u003c\u003e(Arrays.asList(octets));\n+            final List\u003cString\u003e octetList \u003d new ArrayList\u003c\u003e(Arrays.asList(octets));\n             if (inet6Address.endsWith(\"::\")) {\n                 // String.split() drops ending empty segments\n                 octetList.add(\"\");\n             } else if (inet6Address.startsWith(\"::\") \u0026\u0026 !octetList.isEmpty()) {\n                 octetList.remove(0);\n             }\n             octets \u003d octetList.toArray(new String[octetList.size()]);\n         }\n         if (octets.length \u003e IPV6_MAX_HEX_GROUPS) {\n             return false;\n         }\n         int validOctets \u003d 0;\n         int emptyOctets \u003d 0; // consecutive empty chunks\n         for (int index \u003d 0; index \u003c octets.length; index++) {\n-            String octet \u003d octets[index];\n+            final String octet \u003d octets[index];\n             if (octet.length() \u003d\u003d 0) {\n                 emptyOctets++;\n                 if (emptyOctets \u003e 1) {\n                     return false;\n                 }\n             } else {\n                 emptyOctets \u003d 0;\n                 // Is last chunk an IPv4 address?\n                 if (index \u003d\u003d octets.length - 1 \u0026\u0026 octet.contains(\".\")) {\n                     if (!isIPv4Address(octet)) {\n                         return false;\n                     }\n                     validOctets +\u003d 2;\n                     continue;\n                 }\n                 if (octet.length() \u003e IPV6_MAX_HEX_DIGITS_PER_GROUP) {\n                     return false;\n                 }\n                 int octetInt \u003d 0;\n                 try {\n                     octetInt \u003d Integer.parseInt(octet, BASE_16);\n-                } catch (NumberFormatException e) {\n+                } catch (final NumberFormatException e) {\n                     return false;\n                 }\n                 if (octetInt \u003c 0 || octetInt \u003e MAX_UNSIGNED_SHORT) {\n                     return false;\n                 }\n             }\n             validOctets++;\n         }\n         if (validOctets \u003e IPV6_MAX_HEX_GROUPS || (validOctets \u003c IPV6_MAX_HEX_GROUPS \u0026\u0026 !containsCompressedZeroes)) {\n             return false;\n         }\n         return true;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "Use final.",
          "commitDate": 1528840970000,
          "commitName": "44c5c5618d924a06fb9adae7856f31e75228d987",
          "commitAuthor": "Gary Gregory",
          "commitDateOld": 1528477423000,
          "commitNameOld": "9ba69d7b9af1ab71e0ca2d0044f464261ae6a199",
          "commitAuthorOld": "Gary Gregory",
          "daysBetweenCommits": 4.21,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,62 +1,62 @@\n-    private static boolean isIPv6Address(String inet6Address) {\n-        boolean containsCompressedZeroes \u003d inet6Address.contains(\"::\");\n+    private static boolean isIPv6Address(final String inet6Address) {\n+        final boolean containsCompressedZeroes \u003d inet6Address.contains(\"::\");\n         if (containsCompressedZeroes \u0026\u0026 (inet6Address.indexOf(\"::\") !\u003d inet6Address.lastIndexOf(\"::\"))) {\n             return false;\n         }\n         if ((inet6Address.startsWith(\":\") \u0026\u0026 !inet6Address.startsWith(\"::\"))\n                 || (inet6Address.endsWith(\":\") \u0026\u0026 !inet6Address.endsWith(\"::\"))) {\n             return false;\n         }\n         String[] octets \u003d inet6Address.split(\":\");\n         if (containsCompressedZeroes) {\n-            List\u003cString\u003e octetList \u003d new ArrayList\u003c\u003e(Arrays.asList(octets));\n+            final List\u003cString\u003e octetList \u003d new ArrayList\u003c\u003e(Arrays.asList(octets));\n             if (inet6Address.endsWith(\"::\")) {\n                 // String.split() drops ending empty segments\n                 octetList.add(\"\");\n             } else if (inet6Address.startsWith(\"::\") \u0026\u0026 !octetList.isEmpty()) {\n                 octetList.remove(0);\n             }\n             octets \u003d octetList.toArray(new String[octetList.size()]);\n         }\n         if (octets.length \u003e IPV6_MAX_HEX_GROUPS) {\n             return false;\n         }\n         int validOctets \u003d 0;\n         int emptyOctets \u003d 0; // consecutive empty chunks\n         for (int index \u003d 0; index \u003c octets.length; index++) {\n-            String octet \u003d octets[index];\n+            final String octet \u003d octets[index];\n             if (octet.length() \u003d\u003d 0) {\n                 emptyOctets++;\n                 if (emptyOctets \u003e 1) {\n                     return false;\n                 }\n             } else {\n                 emptyOctets \u003d 0;\n                 // Is last chunk an IPv4 address?\n                 if (index \u003d\u003d octets.length - 1 \u0026\u0026 octet.contains(\".\")) {\n                     if (!isIPv4Address(octet)) {\n                         return false;\n                     }\n                     validOctets +\u003d 2;\n                     continue;\n                 }\n                 if (octet.length() \u003e IPV6_MAX_HEX_DIGITS_PER_GROUP) {\n                     return false;\n                 }\n                 int octetInt \u003d 0;\n                 try {\n                     octetInt \u003d Integer.parseInt(octet, BASE_16);\n-                } catch (NumberFormatException e) {\n+                } catch (final NumberFormatException e) {\n                     return false;\n                 }\n                 if (octetInt \u003c 0 || octetInt \u003e MAX_UNSIGNED_SHORT) {\n                     return false;\n                 }\n             }\n             validOctets++;\n         }\n         if (validOctets \u003e IPV6_MAX_HEX_GROUPS || (validOctets \u003c IPV6_MAX_HEX_GROUPS \u0026\u0026 !containsCompressedZeroes)) {\n             return false;\n         }\n         return true;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "9ba69d7b9af1ab71e0ca2d0044f464261ae6a199": {
      "type": "Ybodychange",
      "commitMessage": "Remove redundant type arguments.",
      "commitDate": 1528477423000,
      "commitName": "9ba69d7b9af1ab71e0ca2d0044f464261ae6a199",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": 1528477358000,
      "commitNameOld": "0298305934801cf65136ce20c59dd133d8ee4d17",
      "commitAuthorOld": "Gary Gregory",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,62 @@\n     private static boolean isIPv6Address(String inet6Address) {\n         boolean containsCompressedZeroes \u003d inet6Address.contains(\"::\");\n         if (containsCompressedZeroes \u0026\u0026 (inet6Address.indexOf(\"::\") !\u003d inet6Address.lastIndexOf(\"::\"))) {\n             return false;\n         }\n         if ((inet6Address.startsWith(\":\") \u0026\u0026 !inet6Address.startsWith(\"::\"))\n                 || (inet6Address.endsWith(\":\") \u0026\u0026 !inet6Address.endsWith(\"::\"))) {\n             return false;\n         }\n         String[] octets \u003d inet6Address.split(\":\");\n         if (containsCompressedZeroes) {\n-            List\u003cString\u003e octetList \u003d new ArrayList\u003cString\u003e(Arrays.asList(octets));\n+            List\u003cString\u003e octetList \u003d new ArrayList\u003c\u003e(Arrays.asList(octets));\n             if (inet6Address.endsWith(\"::\")) {\n                 // String.split() drops ending empty segments\n                 octetList.add(\"\");\n             } else if (inet6Address.startsWith(\"::\") \u0026\u0026 !octetList.isEmpty()) {\n                 octetList.remove(0);\n             }\n             octets \u003d octetList.toArray(new String[octetList.size()]);\n         }\n         if (octets.length \u003e IPV6_MAX_HEX_GROUPS) {\n             return false;\n         }\n         int validOctets \u003d 0;\n         int emptyOctets \u003d 0; // consecutive empty chunks\n         for (int index \u003d 0; index \u003c octets.length; index++) {\n             String octet \u003d octets[index];\n             if (octet.length() \u003d\u003d 0) {\n                 emptyOctets++;\n                 if (emptyOctets \u003e 1) {\n                     return false;\n                 }\n             } else {\n                 emptyOctets \u003d 0;\n                 // Is last chunk an IPv4 address?\n                 if (index \u003d\u003d octets.length - 1 \u0026\u0026 octet.contains(\".\")) {\n                     if (!isIPv4Address(octet)) {\n                         return false;\n                     }\n                     validOctets +\u003d 2;\n                     continue;\n                 }\n                 if (octet.length() \u003e IPV6_MAX_HEX_DIGITS_PER_GROUP) {\n                     return false;\n                 }\n                 int octetInt \u003d 0;\n                 try {\n                     octetInt \u003d Integer.parseInt(octet, BASE_16);\n                 } catch (NumberFormatException e) {\n                     return false;\n                 }\n                 if (octetInt \u003c 0 || octetInt \u003e MAX_UNSIGNED_SHORT) {\n                     return false;\n                 }\n             }\n             validOctets++;\n         }\n         if (validOctets \u003e IPV6_MAX_HEX_GROUPS || (validOctets \u003c IPV6_MAX_HEX_GROUPS \u0026\u0026 !containsCompressedZeroes)) {\n             return false;\n         }\n         return true;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2736b6fe0b3fa22ec8e2b4184897ecadb021fc78": {
      "type": "Yintroduced",
      "commitMessage": "IO-559 verify hostname part of suspected UNC paths in FileNameUtils\n",
      "commitDate": 1527667567000,
      "commitName": "2736b6fe0b3fa22ec8e2b4184897ecadb021fc78",
      "commitAuthor": "Stefan Bodewig"
    }
  }
}