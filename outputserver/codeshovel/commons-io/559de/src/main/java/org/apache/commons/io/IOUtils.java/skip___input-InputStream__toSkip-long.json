{
  "origin": "codeshovel",
  "repositoryName": "commons-io",
  "repositoryPath": "/repos/commons-io/.git",
  "startCommitName": "559de2c461e94ab636c959149c775bb27111fb48",
  "sourceFileName": "IOUtils.java",
  "functionName": "skip",
  "functionId": "skip___input-InputStream__toSkip-long",
  "sourceFilePath": "src/main/java/org/apache/commons/io/IOUtils.java",
  "functionStartLine": 2832,
  "functionEndLine": 2854,
  "changeHistory": [
    "6aa00766b9103d75c763160280429af8e1f0549e",
    "2a07afd1124bc9f3274acaf6ea66548e5e60558b",
    "b04b4f533d82da73e2cd7947a7e6312fe330e1a3",
    "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a",
    "99a6100c9ba8128a99122612f0c711444e71b085"
  ],
  "changeHistoryShort": {
    "6aa00766b9103d75c763160280429af8e1f0549e": "Ymultichange(Ybodychange,Yparametermetachange)",
    "2a07afd1124bc9f3274acaf6ea66548e5e60558b": "Ybodychange",
    "b04b4f533d82da73e2cd7947a7e6312fe330e1a3": "Ybodychange",
    "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a": "Yfilerename",
    "99a6100c9ba8128a99122612f0c711444e71b085": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6aa00766b9103d75c763160280429af8e1f0549e": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1354308699000,
      "commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
      "commitAuthor": "Gary D. Gregory",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1354308699000,
          "commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": 1354302626000,
          "commitNameOld": "efca1657258b7555b80bbee207a3221489b9ffed",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n-    public static long skip(InputStream input, long toSkip) throws IOException {\n+    public static long skip(final InputStream input, final long toSkip) throws IOException {\n         if (toSkip \u003c 0) {\n             throw new IllegalArgumentException(\"Skip count must be non-negative, actual: \" + toSkip);\n         }\n         /*\n          * N.B. no need to synchronize this because: - we don\u0027t care if the buffer is created multiple times (the data\n          * is ignored) - we always use the same size buffer, so if it it is recreated it will still be OK (if the buffer\n          * size were variable, we would need to synch. to ensure some other thread did not create a smaller one)\n          */\n         if (SKIP_BYTE_BUFFER \u003d\u003d null) {\n             SKIP_BYTE_BUFFER \u003d new byte[SKIP_BUFFER_SIZE];\n         }\n         long remain \u003d toSkip;\n         while (remain \u003e 0) {\n             // See https://issues.apache.org/jira/browse/IO-203 for why we use read() rather than delegating to skip()\n-            long n \u003d input.read(SKIP_BYTE_BUFFER, 0, (int) Math.min(remain, SKIP_BUFFER_SIZE));\n+            final long n \u003d input.read(SKIP_BYTE_BUFFER, 0, (int) Math.min(remain, SKIP_BUFFER_SIZE));\n             if (n \u003c 0) { // EOF\n                 break;\n             }\n             remain -\u003d n;\n         }\n         return toSkip - remain;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1354308699000,
          "commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": 1354302626000,
          "commitNameOld": "efca1657258b7555b80bbee207a3221489b9ffed",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n-    public static long skip(InputStream input, long toSkip) throws IOException {\n+    public static long skip(final InputStream input, final long toSkip) throws IOException {\n         if (toSkip \u003c 0) {\n             throw new IllegalArgumentException(\"Skip count must be non-negative, actual: \" + toSkip);\n         }\n         /*\n          * N.B. no need to synchronize this because: - we don\u0027t care if the buffer is created multiple times (the data\n          * is ignored) - we always use the same size buffer, so if it it is recreated it will still be OK (if the buffer\n          * size were variable, we would need to synch. to ensure some other thread did not create a smaller one)\n          */\n         if (SKIP_BYTE_BUFFER \u003d\u003d null) {\n             SKIP_BYTE_BUFFER \u003d new byte[SKIP_BUFFER_SIZE];\n         }\n         long remain \u003d toSkip;\n         while (remain \u003e 0) {\n             // See https://issues.apache.org/jira/browse/IO-203 for why we use read() rather than delegating to skip()\n-            long n \u003d input.read(SKIP_BYTE_BUFFER, 0, (int) Math.min(remain, SKIP_BUFFER_SIZE));\n+            final long n \u003d input.read(SKIP_BYTE_BUFFER, 0, (int) Math.min(remain, SKIP_BUFFER_SIZE));\n             if (n \u003c 0) { // EOF\n                 break;\n             }\n             remain -\u003d n;\n         }\n         return toSkip - remain;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "2a07afd1124bc9f3274acaf6ea66548e5e60558b": {
      "type": "Ybodychange",
      "commitMessage": "IO-355 - document why we use read() rather than skip()\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1404331 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1351714647000,
      "commitName": "2a07afd1124bc9f3274acaf6ea66548e5e60558b",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": 1351192557000,
      "commitNameOld": "03027d8ff28929e3e5a618a31e9bcab0c90d0c0b",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 6.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,23 @@\n     public static long skip(InputStream input, long toSkip) throws IOException {\n         if (toSkip \u003c 0) {\n             throw new IllegalArgumentException(\"Skip count must be non-negative, actual: \" + toSkip);\n         }\n         /*\n          * N.B. no need to synchronize this because: - we don\u0027t care if the buffer is created multiple times (the data\n          * is ignored) - we always use the same size buffer, so if it it is recreated it will still be OK (if the buffer\n          * size were variable, we would need to synch. to ensure some other thread did not create a smaller one)\n          */\n         if (SKIP_BYTE_BUFFER \u003d\u003d null) {\n             SKIP_BYTE_BUFFER \u003d new byte[SKIP_BUFFER_SIZE];\n         }\n         long remain \u003d toSkip;\n         while (remain \u003e 0) {\n+            // See https://issues.apache.org/jira/browse/IO-203 for why we use read() rather than delegating to skip()\n             long n \u003d input.read(SKIP_BYTE_BUFFER, 0, (int) Math.min(remain, SKIP_BUFFER_SIZE));\n             if (n \u003c 0) { // EOF\n                 break;\n             }\n             remain -\u003d n;\n         }\n         return toSkip - remain;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b04b4f533d82da73e2cd7947a7e6312fe330e1a3": {
      "type": "Ybodychange",
      "commitMessage": "Fix some odd formatting.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1303957 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1332440774000,
      "commitName": "b04b4f533d82da73e2cd7947a7e6312fe330e1a3",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": 1332440164000,
      "commitNameOld": "e3646441205b9271fe2bad0e93088304a8db5a44",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,22 @@\n     public static long skip(InputStream input, long toSkip) throws IOException {\n         if (toSkip \u003c 0) {\n-            throw new IllegalArgumentException(\"Skip count must be non-negative, actual: \"+toSkip);\n+            throw new IllegalArgumentException(\"Skip count must be non-negative, actual: \" + toSkip);\n         }\n         /*\n-         * N.B. no need to synchronize this because:\n-         * - we don\u0027t care if the buffer is created multiple times (the data is ignored)\n-         * - we always use the same size buffer, so if it it is recreated it will still be OK\n-         * (if the buffer size were variable, we would need to synch. to ensure some other thread\n-         * did not create a smaller one)\n+         * N.B. no need to synchronize this because: - we don\u0027t care if the buffer is created multiple times (the data\n+         * is ignored) - we always use the same size buffer, so if it it is recreated it will still be OK (if the buffer\n+         * size were variable, we would need to synch. to ensure some other thread did not create a smaller one)\n          */\n-        if (SKIP_BYTE_BUFFER \u003d\u003d null){\n+        if (SKIP_BYTE_BUFFER \u003d\u003d null) {\n             SKIP_BYTE_BUFFER \u003d new byte[SKIP_BUFFER_SIZE];\n         }\n-        long remain\u003dtoSkip;\n-        while(remain \u003e 0) {\n+        long remain \u003d toSkip;\n+        while (remain \u003e 0) {\n             long n \u003d input.read(SKIP_BYTE_BUFFER, 0, (int) Math.min(remain, SKIP_BUFFER_SIZE));\n             if (n \u003c 0) { // EOF\n                 break;\n             }\n             remain -\u003d n;\n         }\n-        return toSkip - remain;   \n+        return toSkip - remain;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a": {
      "type": "Yfilerename",
      "commitMessage": "Build changes - re-organize to standard m2 layout, remove useless JIRA report and fix some Ant issues\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1004358 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1286218476000,
      "commitName": "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": 1286214840000,
      "commitNameOld": "19f48eb1711427a43a5e10c84bbbf1218a08bdd2",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/io/IOUtils.java",
        "newPath": "src/main/java/org/apache/commons/io/IOUtils.java"
      }
    },
    "99a6100c9ba8128a99122612f0c711444e71b085": {
      "type": "Yintroduced",
      "commitMessage": "IO-203 - Add skipFully() method for InputStreams\nImplement our own skip() methods; rewrite skipFully() to use them\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@920483 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1268078309000,
      "commitName": "99a6100c9ba8128a99122612f0c711444e71b085",
      "commitAuthor": "Sebastian Bazley"
    }
  }
}