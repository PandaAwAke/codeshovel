{
  "origin": "codeshovel",
  "repositoryName": "commons-io",
  "repositoryPath": "/repos/commons-io/.git",
  "startCommitName": "559de2c461e94ab636c959149c775bb27111fb48",
  "sourceFileName": "FileSystemUtils.java",
  "functionName": "freeSpaceUnix",
  "functionId": "freeSpaceUnix___path-String__kb-boolean__posix-boolean__timeout-long",
  "sourceFilePath": "src/main/java/org/apache/commons/io/FileSystemUtils.java",
  "functionStartLine": 398,
  "functionEndLine": 444,
  "changeHistory": [
    "39acf07bc85fb77c2eb287d05302948597ccc0d9",
    "6aa00766b9103d75c763160280429af8e1f0549e",
    "1170279dc85c2bbdea594b053c56b379a72a2104",
    "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a",
    "ab42367cc639fa3b18786d13afdc17a3394f229f",
    "d577693e0a85d59d7d0ac9458bf84eb1678efde1",
    "c3b706ab8852c57446064031067dcbb92380502d",
    "6512f64a02c7d7c6b7c247a0f538e135132c9aae",
    "75e05a81366582417d54a04ef5204e9d76894271",
    "a74a5a0c6ff41a4ca0a08caf740ebce1dc3c6d10",
    "0a03609ddc6380dd7c9053eb8cb04072baa476a1",
    "eaa8e0c698f694b7e5fdded5dbb9024c8cf15c4e",
    "0875f4bddeaae2c8d4b44280f54151d0ed5eeee1",
    "9004f534a046b5b8a6f87edf2426f24a291fd2ab",
    "4cd33ce31d4245281432320a7f4f4cf6b541c690",
    "dcb61e575021a61d9e1694ccdf300f5d028f5b1f"
  ],
  "changeHistoryShort": {
    "39acf07bc85fb77c2eb287d05302948597ccc0d9": "Ybodychange",
    "6aa00766b9103d75c763160280429af8e1f0549e": "Ymultichange(Ybodychange,Yparametermetachange)",
    "1170279dc85c2bbdea594b053c56b379a72a2104": "Ybodychange",
    "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a": "Yfilerename",
    "ab42367cc639fa3b18786d13afdc17a3394f229f": "Ymultichange(Yparameterchange,Ybodychange)",
    "d577693e0a85d59d7d0ac9458bf84eb1678efde1": "Ybodychange",
    "c3b706ab8852c57446064031067dcbb92380502d": "Ybodychange",
    "6512f64a02c7d7c6b7c247a0f538e135132c9aae": "Ybodychange",
    "75e05a81366582417d54a04ef5204e9d76894271": "Ybodychange",
    "a74a5a0c6ff41a4ca0a08caf740ebce1dc3c6d10": "Ybodychange",
    "0a03609ddc6380dd7c9053eb8cb04072baa476a1": "Ybodychange",
    "eaa8e0c698f694b7e5fdded5dbb9024c8cf15c4e": "Ymultichange(Yparameterchange,Ybodychange)",
    "0875f4bddeaae2c8d4b44280f54151d0ed5eeee1": "Ymultichange(Yparameterchange,Ybodychange)",
    "9004f534a046b5b8a6f87edf2426f24a291fd2ab": "Ymultichange(Yrename,Ymodifierchange)",
    "4cd33ce31d4245281432320a7f4f4cf6b541c690": "Ymultichange(Ymodifierchange,Ybodychange)",
    "dcb61e575021a61d9e1694ccdf300f5d028f5b1f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39acf07bc85fb77c2eb287d05302948597ccc0d9": {
      "type": "Ybodychange",
      "commitMessage": "Replace \"String.length()\" \u003d\u003d 0 with \"String.isEmpty()\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1586504 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1397172877000,
      "commitName": "39acf07bc85fb77c2eb287d05302948597ccc0d9",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": 1366845859000,
      "commitNameOld": "effe551657921069b871519156a934e4ef3ae916",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 351.01,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n     long freeSpaceUnix(final String path, final boolean kb, final boolean posix, final long timeout) throws IOException {\n-        if (path.length() \u003d\u003d 0) {\n+        if (path.isEmpty()) {\n             throw new IllegalArgumentException(\"Path must not be empty\");\n         }\n \n         // build and run the \u0027dir\u0027 command\n         String flags \u003d \"-\";\n         if (kb) {\n             flags +\u003d \"k\";\n         }\n         if (posix) {\n             flags +\u003d \"P\";\n         }\n         final String[] cmdAttribs \u003d\n             flags.length() \u003e 1 ? new String[] {DF, flags, path} : new String[] {DF, path};\n \n         // perform the command, asking for up to 3 lines (header, interesting, overflow)\n         final List\u003cString\u003e lines \u003d performCommand(cmdAttribs, 3, timeout);\n         if (lines.size() \u003c 2) {\n             // unknown problem, throw exception\n             throw new IOException(\n                     \"Command line \u0027\" + DF + \"\u0027 did not return info as expected \" +\n                     \"for path \u0027\" + path + \"\u0027- response was \" + lines);\n         }\n         final String line2 \u003d lines.get(1); // the line we\u0027re interested in\n \n         // Now, we tokenize the string. The fourth element is what we want.\n         StringTokenizer tok \u003d new StringTokenizer(line2, \" \");\n         if (tok.countTokens() \u003c 4) {\n             // could be long Filesystem, thus data on third line\n             if (tok.countTokens() \u003d\u003d 1 \u0026\u0026 lines.size() \u003e\u003d 3) {\n                 final String line3 \u003d lines.get(2); // the line may be interested in\n                 tok \u003d new StringTokenizer(line3, \" \");\n             } else {\n                 throw new IOException(\n                         \"Command line \u0027\" + DF + \"\u0027 did not return data as expected \" +\n                         \"for path \u0027\" + path + \"\u0027- check path is valid\");\n             }\n         } else {\n             tok.nextToken(); // Ignore Filesystem\n         }\n         tok.nextToken(); // Ignore 1K-blocks\n         tok.nextToken(); // Ignore Used\n         final String freeSpace \u003d tok.nextToken();\n         return parseBytes(freeSpace, path);\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6aa00766b9103d75c763160280429af8e1f0549e": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1354308699000,
      "commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
      "commitAuthor": "Gary D. Gregory",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1354308699000,
          "commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": 1332449729000,
          "commitNameOld": "cf5c462807a137b823a3155dfe9800b3cbf2303d",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 253.0,
          "commitsBetweenForRepo": 182,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,46 @@\n-    long freeSpaceUnix(String path, boolean kb, boolean posix, long timeout) throws IOException {\n+    long freeSpaceUnix(final String path, final boolean kb, final boolean posix, final long timeout) throws IOException {\n         if (path.length() \u003d\u003d 0) {\n             throw new IllegalArgumentException(\"Path must not be empty\");\n         }\n \n         // build and run the \u0027dir\u0027 command\n         String flags \u003d \"-\";\n         if (kb) {\n             flags +\u003d \"k\";\n         }\n         if (posix) {\n             flags +\u003d \"P\";\n         }\n-        String[] cmdAttribs \u003d \n+        final String[] cmdAttribs \u003d \n             flags.length() \u003e 1 ? new String[] {DF, flags, path} : new String[] {DF, path};\n         \n         // perform the command, asking for up to 3 lines (header, interesting, overflow)\n-        List\u003cString\u003e lines \u003d performCommand(cmdAttribs, 3, timeout);\n+        final List\u003cString\u003e lines \u003d performCommand(cmdAttribs, 3, timeout);\n         if (lines.size() \u003c 2) {\n             // unknown problem, throw exception\n             throw new IOException(\n                     \"Command line \u0027\" + DF + \"\u0027 did not return info as expected \" +\n                     \"for path \u0027\" + path + \"\u0027- response was \" + lines);\n         }\n-        String line2 \u003d lines.get(1); // the line we\u0027re interested in\n+        final String line2 \u003d lines.get(1); // the line we\u0027re interested in\n         \n         // Now, we tokenize the string. The fourth element is what we want.\n         StringTokenizer tok \u003d new StringTokenizer(line2, \" \");\n         if (tok.countTokens() \u003c 4) {\n             // could be long Filesystem, thus data on third line\n             if (tok.countTokens() \u003d\u003d 1 \u0026\u0026 lines.size() \u003e\u003d 3) {\n-                String line3 \u003d lines.get(2); // the line may be interested in\n+                final String line3 \u003d lines.get(2); // the line may be interested in\n                 tok \u003d new StringTokenizer(line3, \" \");\n             } else {\n                 throw new IOException(\n                         \"Command line \u0027\" + DF + \"\u0027 did not return data as expected \" +\n                         \"for path \u0027\" + path + \"\u0027- check path is valid\");\n             }\n         } else {\n             tok.nextToken(); // Ignore Filesystem\n         }\n         tok.nextToken(); // Ignore 1K-blocks\n         tok.nextToken(); // Ignore Used\n-        String freeSpace \u003d tok.nextToken();\n+        final String freeSpace \u003d tok.nextToken();\n         return parseBytes(freeSpace, path);\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1354308699000,
          "commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": 1332449729000,
          "commitNameOld": "cf5c462807a137b823a3155dfe9800b3cbf2303d",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 253.0,
          "commitsBetweenForRepo": 182,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,46 @@\n-    long freeSpaceUnix(String path, boolean kb, boolean posix, long timeout) throws IOException {\n+    long freeSpaceUnix(final String path, final boolean kb, final boolean posix, final long timeout) throws IOException {\n         if (path.length() \u003d\u003d 0) {\n             throw new IllegalArgumentException(\"Path must not be empty\");\n         }\n \n         // build and run the \u0027dir\u0027 command\n         String flags \u003d \"-\";\n         if (kb) {\n             flags +\u003d \"k\";\n         }\n         if (posix) {\n             flags +\u003d \"P\";\n         }\n-        String[] cmdAttribs \u003d \n+        final String[] cmdAttribs \u003d \n             flags.length() \u003e 1 ? new String[] {DF, flags, path} : new String[] {DF, path};\n         \n         // perform the command, asking for up to 3 lines (header, interesting, overflow)\n-        List\u003cString\u003e lines \u003d performCommand(cmdAttribs, 3, timeout);\n+        final List\u003cString\u003e lines \u003d performCommand(cmdAttribs, 3, timeout);\n         if (lines.size() \u003c 2) {\n             // unknown problem, throw exception\n             throw new IOException(\n                     \"Command line \u0027\" + DF + \"\u0027 did not return info as expected \" +\n                     \"for path \u0027\" + path + \"\u0027- response was \" + lines);\n         }\n-        String line2 \u003d lines.get(1); // the line we\u0027re interested in\n+        final String line2 \u003d lines.get(1); // the line we\u0027re interested in\n         \n         // Now, we tokenize the string. The fourth element is what we want.\n         StringTokenizer tok \u003d new StringTokenizer(line2, \" \");\n         if (tok.countTokens() \u003c 4) {\n             // could be long Filesystem, thus data on third line\n             if (tok.countTokens() \u003d\u003d 1 \u0026\u0026 lines.size() \u003e\u003d 3) {\n-                String line3 \u003d lines.get(2); // the line may be interested in\n+                final String line3 \u003d lines.get(2); // the line may be interested in\n                 tok \u003d new StringTokenizer(line3, \" \");\n             } else {\n                 throw new IOException(\n                         \"Command line \u0027\" + DF + \"\u0027 did not return data as expected \" +\n                         \"for path \u0027\" + path + \"\u0027- check path is valid\");\n             }\n         } else {\n             tok.nextToken(); // Ignore Filesystem\n         }\n         tok.nextToken(); // Ignore 1K-blocks\n         tok.nextToken(); // Ignore Used\n-        String freeSpace \u003d tok.nextToken();\n+        final String freeSpace \u003d tok.nextToken();\n         return parseBytes(freeSpace, path);\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "1170279dc85c2bbdea594b053c56b379a72a2104": {
      "type": "Ybodychange",
      "commitMessage": "Remove noisy and unnecessary parens. Especially painful in return statements: \"return (foo + bar);\" vs. \"return foo + bar;\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1302748 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1332207332000,
      "commitName": "1170279dc85c2bbdea594b053c56b379a72a2104",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": 1330924596000,
      "commitNameOld": "b37ba99e8f838e0fb7df77bea2fc774d5c8e893f",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 14.85,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n     long freeSpaceUnix(String path, boolean kb, boolean posix, long timeout) throws IOException {\n         if (path.length() \u003d\u003d 0) {\n             throw new IllegalArgumentException(\"Path must not be empty\");\n         }\n \n         // build and run the \u0027dir\u0027 command\n         String flags \u003d \"-\";\n         if (kb) {\n             flags +\u003d \"k\";\n         }\n         if (posix) {\n             flags +\u003d \"P\";\n         }\n         String[] cmdAttribs \u003d \n-            (flags.length() \u003e 1 ? new String[] {DF, flags, path} : new String[] {DF, path});\n+            flags.length() \u003e 1 ? new String[] {DF, flags, path} : new String[] {DF, path};\n         \n         // perform the command, asking for up to 3 lines (header, interesting, overflow)\n         List\u003cString\u003e lines \u003d performCommand(cmdAttribs, 3, timeout);\n         if (lines.size() \u003c 2) {\n             // unknown problem, throw exception\n             throw new IOException(\n                     \"Command line \u0027\" + DF + \"\u0027 did not return info as expected \" +\n                     \"for path \u0027\" + path + \"\u0027- response was \" + lines);\n         }\n         String line2 \u003d lines.get(1); // the line we\u0027re interested in\n         \n         // Now, we tokenize the string. The fourth element is what we want.\n         StringTokenizer tok \u003d new StringTokenizer(line2, \" \");\n         if (tok.countTokens() \u003c 4) {\n             // could be long Filesystem, thus data on third line\n             if (tok.countTokens() \u003d\u003d 1 \u0026\u0026 lines.size() \u003e\u003d 3) {\n                 String line3 \u003d lines.get(2); // the line may be interested in\n                 tok \u003d new StringTokenizer(line3, \" \");\n             } else {\n                 throw new IOException(\n                         \"Command line \u0027\" + DF + \"\u0027 did not return data as expected \" +\n                         \"for path \u0027\" + path + \"\u0027- check path is valid\");\n             }\n         } else {\n             tok.nextToken(); // Ignore Filesystem\n         }\n         tok.nextToken(); // Ignore 1K-blocks\n         tok.nextToken(); // Ignore Used\n         String freeSpace \u003d tok.nextToken();\n         return parseBytes(freeSpace, path);\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a": {
      "type": "Yfilerename",
      "commitMessage": "Build changes - re-organize to standard m2 layout, remove useless JIRA report and fix some Ant issues\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1004358 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1286218476000,
      "commitName": "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": 1286214840000,
      "commitNameOld": "19f48eb1711427a43a5e10c84bbbf1218a08bdd2",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/io/FileSystemUtils.java",
        "newPath": "src/main/java/org/apache/commons/io/FileSystemUtils.java"
      }
    },
    "ab42367cc639fa3b18786d13afdc17a3394f229f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "IO-185 FileSystemUtils add freeSpaceKb() methods that take a timeout parameter - fixes FileSystemUtils.freeSpaceWindows blocks - reported by Martin Thelian\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1002689 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1285775028000,
      "commitName": "ab42367cc639fa3b18786d13afdc17a3394f229f",
      "commitAuthor": "Niall Pemberton",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "IO-185 FileSystemUtils add freeSpaceKb() methods that take a timeout parameter - fixes FileSystemUtils.freeSpaceWindows blocks - reported by Martin Thelian\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1002689 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1285775028000,
          "commitName": "ab42367cc639fa3b18786d13afdc17a3394f229f",
          "commitAuthor": "Niall Pemberton",
          "commitDateOld": 1267841266000,
          "commitNameOld": "1282c294a11e637b3830d84ee87a4b3bcf823bc6",
          "commitAuthorOld": "Sebastian Bazley",
          "daysBetweenCommits": 207.57,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,46 @@\n-    long freeSpaceUnix(String path, boolean kb, boolean posix) throws IOException {\n+    long freeSpaceUnix(String path, boolean kb, boolean posix, long timeout) throws IOException {\n         if (path.length() \u003d\u003d 0) {\n             throw new IllegalArgumentException(\"Path must not be empty\");\n         }\n \n         // build and run the \u0027dir\u0027 command\n         String flags \u003d \"-\";\n         if (kb) {\n             flags +\u003d \"k\";\n         }\n         if (posix) {\n             flags +\u003d \"P\";\n         }\n         String[] cmdAttribs \u003d \n             (flags.length() \u003e 1 ? new String[] {DF, flags, path} : new String[] {DF, path});\n         \n         // perform the command, asking for up to 3 lines (header, interesting, overflow)\n-        List\u003cString\u003e lines \u003d performCommand(cmdAttribs, 3);\n+        List\u003cString\u003e lines \u003d performCommand(cmdAttribs, 3, timeout);\n         if (lines.size() \u003c 2) {\n             // unknown problem, throw exception\n             throw new IOException(\n                     \"Command line \u0027\" + DF + \"\u0027 did not return info as expected \" +\n                     \"for path \u0027\" + path + \"\u0027- response was \" + lines);\n         }\n         String line2 \u003d lines.get(1); // the line we\u0027re interested in\n         \n         // Now, we tokenize the string. The fourth element is what we want.\n         StringTokenizer tok \u003d new StringTokenizer(line2, \" \");\n         if (tok.countTokens() \u003c 4) {\n             // could be long Filesystem, thus data on third line\n             if (tok.countTokens() \u003d\u003d 1 \u0026\u0026 lines.size() \u003e\u003d 3) {\n                 String line3 \u003d lines.get(2); // the line may be interested in\n                 tok \u003d new StringTokenizer(line3, \" \");\n             } else {\n                 throw new IOException(\n                         \"Command line \u0027\" + DF + \"\u0027 did not return data as expected \" +\n                         \"for path \u0027\" + path + \"\u0027- check path is valid\");\n             }\n         } else {\n             tok.nextToken(); // Ignore Filesystem\n         }\n         tok.nextToken(); // Ignore 1K-blocks\n         tok.nextToken(); // Ignore Used\n         String freeSpace \u003d tok.nextToken();\n         return parseBytes(freeSpace, path);\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ybodychange",
          "commitMessage": "IO-185 FileSystemUtils add freeSpaceKb() methods that take a timeout parameter - fixes FileSystemUtils.freeSpaceWindows blocks - reported by Martin Thelian\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1002689 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1285775028000,
          "commitName": "ab42367cc639fa3b18786d13afdc17a3394f229f",
          "commitAuthor": "Niall Pemberton",
          "commitDateOld": 1267841266000,
          "commitNameOld": "1282c294a11e637b3830d84ee87a4b3bcf823bc6",
          "commitAuthorOld": "Sebastian Bazley",
          "daysBetweenCommits": 207.57,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,46 @@\n-    long freeSpaceUnix(String path, boolean kb, boolean posix) throws IOException {\n+    long freeSpaceUnix(String path, boolean kb, boolean posix, long timeout) throws IOException {\n         if (path.length() \u003d\u003d 0) {\n             throw new IllegalArgumentException(\"Path must not be empty\");\n         }\n \n         // build and run the \u0027dir\u0027 command\n         String flags \u003d \"-\";\n         if (kb) {\n             flags +\u003d \"k\";\n         }\n         if (posix) {\n             flags +\u003d \"P\";\n         }\n         String[] cmdAttribs \u003d \n             (flags.length() \u003e 1 ? new String[] {DF, flags, path} : new String[] {DF, path});\n         \n         // perform the command, asking for up to 3 lines (header, interesting, overflow)\n-        List\u003cString\u003e lines \u003d performCommand(cmdAttribs, 3);\n+        List\u003cString\u003e lines \u003d performCommand(cmdAttribs, 3, timeout);\n         if (lines.size() \u003c 2) {\n             // unknown problem, throw exception\n             throw new IOException(\n                     \"Command line \u0027\" + DF + \"\u0027 did not return info as expected \" +\n                     \"for path \u0027\" + path + \"\u0027- response was \" + lines);\n         }\n         String line2 \u003d lines.get(1); // the line we\u0027re interested in\n         \n         // Now, we tokenize the string. The fourth element is what we want.\n         StringTokenizer tok \u003d new StringTokenizer(line2, \" \");\n         if (tok.countTokens() \u003c 4) {\n             // could be long Filesystem, thus data on third line\n             if (tok.countTokens() \u003d\u003d 1 \u0026\u0026 lines.size() \u003e\u003d 3) {\n                 String line3 \u003d lines.get(2); // the line may be interested in\n                 tok \u003d new StringTokenizer(line3, \" \");\n             } else {\n                 throw new IOException(\n                         \"Command line \u0027\" + DF + \"\u0027 did not return data as expected \" +\n                         \"for path \u0027\" + path + \"\u0027- check path is valid\");\n             }\n         } else {\n             tok.nextToken(); // Ignore Filesystem\n         }\n         tok.nextToken(); // Ignore 1K-blocks\n         tok.nextToken(); // Ignore Used\n         String freeSpace \u003d tok.nextToken();\n         return parseBytes(freeSpace, path);\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "d577693e0a85d59d7d0ac9458bf84eb1678efde1": {
      "type": "Ybodychange",
      "commitMessage": "IO-187 FileSystemUtils.freeSpaceKb doesn\u0027t work with relative paths on Linux\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@919687 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1267840663000,
      "commitName": "d577693e0a85d59d7d0ac9458bf84eb1678efde1",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": 1212145567000,
      "commitNameOld": "ce90015bdc3614f88fbe55a697731a2f5b052ca3",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 644.62,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,46 @@\n     long freeSpaceUnix(String path, boolean kb, boolean posix) throws IOException {\n         if (path.length() \u003d\u003d 0) {\n             throw new IllegalArgumentException(\"Path must not be empty\");\n         }\n-        path \u003d FilenameUtils.normalize(path);\n \n         // build and run the \u0027dir\u0027 command\n         String flags \u003d \"-\";\n         if (kb) {\n             flags +\u003d \"k\";\n         }\n         if (posix) {\n             flags +\u003d \"P\";\n         }\n         String[] cmdAttribs \u003d \n             (flags.length() \u003e 1 ? new String[] {DF, flags, path} : new String[] {DF, path});\n         \n         // perform the command, asking for up to 3 lines (header, interesting, overflow)\n         List\u003cString\u003e lines \u003d performCommand(cmdAttribs, 3);\n         if (lines.size() \u003c 2) {\n             // unknown problem, throw exception\n             throw new IOException(\n                     \"Command line \u0027\" + DF + \"\u0027 did not return info as expected \" +\n                     \"for path \u0027\" + path + \"\u0027- response was \" + lines);\n         }\n         String line2 \u003d lines.get(1); // the line we\u0027re interested in\n         \n         // Now, we tokenize the string. The fourth element is what we want.\n         StringTokenizer tok \u003d new StringTokenizer(line2, \" \");\n         if (tok.countTokens() \u003c 4) {\n             // could be long Filesystem, thus data on third line\n             if (tok.countTokens() \u003d\u003d 1 \u0026\u0026 lines.size() \u003e\u003d 3) {\n                 String line3 \u003d lines.get(2); // the line may be interested in\n                 tok \u003d new StringTokenizer(line3, \" \");\n             } else {\n                 throw new IOException(\n                         \"Command line \u0027\" + DF + \"\u0027 did not return data as expected \" +\n                         \"for path \u0027\" + path + \"\u0027- check path is valid\");\n             }\n         } else {\n             tok.nextToken(); // Ignore Filesystem\n         }\n         tok.nextToken(); // Ignore 1K-blocks\n         tok.nextToken(); // Ignore Used\n         String freeSpace \u003d tok.nextToken();\n         return parseBytes(freeSpace, path);\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c3b706ab8852c57446064031067dcbb92380502d": {
      "type": "Ybodychange",
      "commitMessage": "IO-160 Make DF path final\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@645828 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1207650459000,
      "commitName": "c3b706ab8852c57446064031067dcbb92380502d",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": 1207642588000,
      "commitNameOld": "6512f64a02c7d7c6b7c247a0f538e135132c9aae",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n     long freeSpaceUnix(String path, boolean kb, boolean posix) throws IOException {\n         if (path.length() \u003d\u003d 0) {\n             throw new IllegalArgumentException(\"Path must not be empty\");\n         }\n         path \u003d FilenameUtils.normalize(path);\n \n         // build and run the \u0027dir\u0027 command\n         String flags \u003d \"-\";\n         if (kb) {\n             flags +\u003d \"k\";\n         }\n         if (posix) {\n             flags +\u003d \"P\";\n         }\n         String[] cmdAttribs \u003d \n-            (flags.length() \u003e 1 ? new String[] {dfPath, flags, path} : new String[] {dfPath, path});\n+            (flags.length() \u003e 1 ? new String[] {DF, flags, path} : new String[] {DF, path});\n         \n         // perform the command, asking for up to 3 lines (header, interesting, overflow)\n         List\u003cString\u003e lines \u003d performCommand(cmdAttribs, 3);\n         if (lines.size() \u003c 2) {\n             // unknown problem, throw exception\n             throw new IOException(\n-                    \"Command line \u0027\" + dfPath + \"\u0027 did not return info as expected \" +\n+                    \"Command line \u0027\" + DF + \"\u0027 did not return info as expected \" +\n                     \"for path \u0027\" + path + \"\u0027- response was \" + lines);\n         }\n         String line2 \u003d lines.get(1); // the line we\u0027re interested in\n         \n         // Now, we tokenize the string. The fourth element is what we want.\n         StringTokenizer tok \u003d new StringTokenizer(line2, \" \");\n         if (tok.countTokens() \u003c 4) {\n             // could be long Filesystem, thus data on third line\n             if (tok.countTokens() \u003d\u003d 1 \u0026\u0026 lines.size() \u003e\u003d 3) {\n                 String line3 \u003d lines.get(2); // the line may be interested in\n                 tok \u003d new StringTokenizer(line3, \" \");\n             } else {\n                 throw new IOException(\n-                        \"Command line \u0027\" + dfPath + \"\u0027 did not return data as expected \" +\n+                        \"Command line \u0027\" + DF + \"\u0027 did not return data as expected \" +\n                         \"for path \u0027\" + path + \"\u0027- check path is valid\");\n             }\n         } else {\n             tok.nextToken(); // Ignore Filesystem\n         }\n         tok.nextToken(); // Ignore 1K-blocks\n         tok.nextToken(); // Ignore Used\n         String freeSpace \u003d tok.nextToken();\n         return parseBytes(freeSpace, path);\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6512f64a02c7d7c6b7c247a0f538e135132c9aae": {
      "type": "Ybodychange",
      "commitMessage": "IO-160 FileSystemUtils.freeSpace fails on solaris - thanks to Mike Bristow for the patch\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@645787 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1207642588000,
      "commitName": "6512f64a02c7d7c6b7c247a0f538e135132c9aae",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": 1204851016000,
      "commitNameOld": "efe745c047c6f63eb85ee0b2b4d93c3544c31e97",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 32.31,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n     long freeSpaceUnix(String path, boolean kb, boolean posix) throws IOException {\n         if (path.length() \u003d\u003d 0) {\n             throw new IllegalArgumentException(\"Path must not be empty\");\n         }\n         path \u003d FilenameUtils.normalize(path);\n \n         // build and run the \u0027dir\u0027 command\n         String flags \u003d \"-\";\n         if (kb) {\n             flags +\u003d \"k\";\n         }\n         if (posix) {\n             flags +\u003d \"P\";\n         }\n         String[] cmdAttribs \u003d \n-            (flags.length() \u003e 1 ? new String[] {\"df\", flags, path} : new String[] {\"df\", path});\n+            (flags.length() \u003e 1 ? new String[] {dfPath, flags, path} : new String[] {dfPath, path});\n         \n         // perform the command, asking for up to 3 lines (header, interesting, overflow)\n         List\u003cString\u003e lines \u003d performCommand(cmdAttribs, 3);\n         if (lines.size() \u003c 2) {\n             // unknown problem, throw exception\n             throw new IOException(\n-                    \"Command line \u0027df\u0027 did not return info as expected \" +\n+                    \"Command line \u0027\" + dfPath + \"\u0027 did not return info as expected \" +\n                     \"for path \u0027\" + path + \"\u0027- response was \" + lines);\n         }\n         String line2 \u003d lines.get(1); // the line we\u0027re interested in\n         \n         // Now, we tokenize the string. The fourth element is what we want.\n         StringTokenizer tok \u003d new StringTokenizer(line2, \" \");\n         if (tok.countTokens() \u003c 4) {\n             // could be long Filesystem, thus data on third line\n             if (tok.countTokens() \u003d\u003d 1 \u0026\u0026 lines.size() \u003e\u003d 3) {\n                 String line3 \u003d lines.get(2); // the line may be interested in\n                 tok \u003d new StringTokenizer(line3, \" \");\n             } else {\n                 throw new IOException(\n-                        \"Command line \u0027df\u0027 did not return data as expected \" +\n+                        \"Command line \u0027\" + dfPath + \"\u0027 did not return data as expected \" +\n                         \"for path \u0027\" + path + \"\u0027- check path is valid\");\n             }\n         } else {\n             tok.nextToken(); // Ignore Filesystem\n         }\n         tok.nextToken(); // Ignore 1K-blocks\n         tok.nextToken(); // Ignore Used\n         String freeSpace \u003d tok.nextToken();\n         return parseBytes(freeSpace, path);\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "75e05a81366582417d54a04ef5204e9d76894271": {
      "type": "Ybodychange",
      "commitMessage": "Remove unnecessary cast from String to String.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@619999 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1202503655000,
      "commitName": "75e05a81366582417d54a04ef5204e9d76894271",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": 1202325947000,
      "commitNameOld": "6d6a73a689ce734d094f71723752cde23a1d9259",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 2.06,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n     long freeSpaceUnix(String path, boolean kb, boolean posix) throws IOException {\n         if (path.length() \u003d\u003d 0) {\n             throw new IllegalArgumentException(\"Path must not be empty\");\n         }\n         path \u003d FilenameUtils.normalize(path);\n \n         // build and run the \u0027dir\u0027 command\n         String flags \u003d \"-\";\n         if (kb) {\n             flags +\u003d \"k\";\n         }\n         if (posix) {\n             flags +\u003d \"P\";\n         }\n         String[] cmdAttribs \u003d \n             (flags.length() \u003e 1 ? new String[] {\"df\", flags, path} : new String[] {\"df\", path});\n         \n         // perform the command, asking for up to 3 lines (header, interesting, overflow)\n         List\u003cString\u003e lines \u003d performCommand(cmdAttribs, 3);\n         if (lines.size() \u003c 2) {\n             // unknown problem, throw exception\n             throw new IOException(\n                     \"Command line \u0027df\u0027 did not return info as expected \" +\n                     \"for path \u0027\" + path + \"\u0027- response was \" + lines);\n         }\n         String line2 \u003d lines.get(1); // the line we\u0027re interested in\n         \n         // Now, we tokenize the string. The fourth element is what we want.\n         StringTokenizer tok \u003d new StringTokenizer(line2, \" \");\n         if (tok.countTokens() \u003c 4) {\n             // could be long Filesystem, thus data on third line\n             if (tok.countTokens() \u003d\u003d 1 \u0026\u0026 lines.size() \u003e\u003d 3) {\n-                String line3 \u003d (String) lines.get(2); // the line may be interested in\n+                String line3 \u003d lines.get(2); // the line may be interested in\n                 tok \u003d new StringTokenizer(line3, \" \");\n             } else {\n                 throw new IOException(\n                         \"Command line \u0027df\u0027 did not return data as expected \" +\n                         \"for path \u0027\" + path + \"\u0027- check path is valid\");\n             }\n         } else {\n             tok.nextToken(); // Ignore Filesystem\n         }\n         tok.nextToken(); // Ignore 1K-blocks\n         tok.nextToken(); // Ignore Used\n         String freeSpace \u003d tok.nextToken();\n         return parseBytes(freeSpace, path);\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a74a5a0c6ff41a4ca0a08caf740ebce1dc3c6d10": {
      "type": "Ybodychange",
      "commitMessage": "IO-140 JDK 1.5 changes: Use generics\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@619103 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1202324477000,
      "commitName": "a74a5a0c6ff41a4ca0a08caf740ebce1dc3c6d10",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": 1160222185000,
      "commitNameOld": "b4b470096a39bfa51d33782f442505383ecc5e79",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 487.3,
      "commitsBetweenForRepo": 242,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n     long freeSpaceUnix(String path, boolean kb, boolean posix) throws IOException {\n         if (path.length() \u003d\u003d 0) {\n             throw new IllegalArgumentException(\"Path must not be empty\");\n         }\n         path \u003d FilenameUtils.normalize(path);\n \n         // build and run the \u0027dir\u0027 command\n         String flags \u003d \"-\";\n         if (kb) {\n             flags +\u003d \"k\";\n         }\n         if (posix) {\n             flags +\u003d \"P\";\n         }\n         String[] cmdAttribs \u003d \n             (flags.length() \u003e 1 ? new String[] {\"df\", flags, path} : new String[] {\"df\", path});\n         \n         // perform the command, asking for up to 3 lines (header, interesting, overflow)\n-        List lines \u003d performCommand(cmdAttribs, 3);\n+        List\u003cString\u003e lines \u003d performCommand(cmdAttribs, 3);\n         if (lines.size() \u003c 2) {\n             // unknown problem, throw exception\n             throw new IOException(\n                     \"Command line \u0027df\u0027 did not return info as expected \" +\n                     \"for path \u0027\" + path + \"\u0027- response was \" + lines);\n         }\n-        String line2 \u003d (String) lines.get(1); // the line we\u0027re interested in\n+        String line2 \u003d lines.get(1); // the line we\u0027re interested in\n         \n         // Now, we tokenize the string. The fourth element is what we want.\n         StringTokenizer tok \u003d new StringTokenizer(line2, \" \");\n         if (tok.countTokens() \u003c 4) {\n             // could be long Filesystem, thus data on third line\n             if (tok.countTokens() \u003d\u003d 1 \u0026\u0026 lines.size() \u003e\u003d 3) {\n                 String line3 \u003d (String) lines.get(2); // the line may be interested in\n                 tok \u003d new StringTokenizer(line3, \" \");\n             } else {\n                 throw new IOException(\n                         \"Command line \u0027df\u0027 did not return data as expected \" +\n                         \"for path \u0027\" + path + \"\u0027- check path is valid\");\n             }\n         } else {\n             tok.nextToken(); // Ignore Filesystem\n         }\n         tok.nextToken(); // Ignore 1K-blocks\n         tok.nextToken(); // Ignore Used\n         String freeSpace \u003d tok.nextToken();\n         return parseBytes(freeSpace, path);\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0a03609ddc6380dd7c9053eb8cb04072baa476a1": {
      "type": "Ybodychange",
      "commitMessage": "IO-90 - Fix freeSpace to avoid infinite loops and other errors\nincludes some code from Thomas Ledoux\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@437031 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1156550888000,
      "commitName": "0a03609ddc6380dd7c9053eb8cb04072baa476a1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": 1156541946000,
      "commitNameOld": "eaa8e0c698f694b7e5fdded5dbb9024c8cf15c4e",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,47 @@\n     long freeSpaceUnix(String path, boolean kb, boolean posix) throws IOException {\n         if (path.length() \u003d\u003d 0) {\n             throw new IllegalArgumentException(\"Path must not be empty\");\n         }\n         path \u003d FilenameUtils.normalize(path);\n \n         // build and run the \u0027dir\u0027 command\n         String flags \u003d \"-\";\n         if (kb) {\n             flags +\u003d \"k\";\n         }\n         if (posix) {\n             flags +\u003d \"P\";\n         }\n         String[] cmdAttribs \u003d \n             (flags.length() \u003e 1 ? new String[] {\"df\", flags, path} : new String[] {\"df\", path});\n         \n-        // read the output from the command until we come to the second line\n-        long bytes \u003d -1;\n-        BufferedReader in \u003d null;\n-        try {\n-            in \u003d openProcessStream(cmdAttribs);\n-            String line1 \u003d in.readLine(); // header line (ignore it)\n-            String line2 \u003d in.readLine(); // the line we\u0027re interested in\n-            String line3 \u003d in.readLine(); // possibly interesting line\n-            if (line2 \u003d\u003d null) {\n-                // unknown problem, throw exception\n-                throw new IOException(\n-                        \"Command line \u0027df\u0027 did not return info as expected \" +\n-                        \"for path \u0027\" + path +\n-                        \"\u0027- response on first line was \u0027\" + line1 + \"\u0027\");\n-            }\n-            line2 \u003d line2.trim();\n-\n-            // Now, we tokenize the string. The fourth element is what we want.\n-            StringTokenizer tok \u003d new StringTokenizer(line2, \" \");\n-            if (tok.countTokens() \u003c 4) {\n-                // could be long Filesystem, thus data on third line\n-                if (tok.countTokens() \u003d\u003d 1 \u0026\u0026 line3 !\u003d null) {\n-                    line3 \u003d line3.trim();\n-                    tok \u003d new StringTokenizer(line3, \" \");\n-                } else {\n-                    throw new IOException(\n-                            \"Command line \u0027df\u0027 did not return data as expected \" +\n-                            \"for path \u0027\" + path + \"\u0027- check path is valid\");\n-                }\n+        // perform the command, asking for up to 3 lines (header, interesting, overflow)\n+        List lines \u003d performCommand(cmdAttribs, 3);\n+        if (lines.size() \u003c 2) {\n+            // unknown problem, throw exception\n+            throw new IOException(\n+                    \"Command line \u0027df\u0027 did not return info as expected \" +\n+                    \"for path \u0027\" + path + \"\u0027- response was \" + lines);\n+        }\n+        String line2 \u003d (String) lines.get(1); // the line we\u0027re interested in\n+        \n+        // Now, we tokenize the string. The fourth element is what we want.\n+        StringTokenizer tok \u003d new StringTokenizer(line2, \" \");\n+        if (tok.countTokens() \u003c 4) {\n+            // could be long Filesystem, thus data on third line\n+            if (tok.countTokens() \u003d\u003d 1 \u0026\u0026 lines.size() \u003e\u003d 3) {\n+                String line3 \u003d (String) lines.get(2); // the line may be interested in\n+                tok \u003d new StringTokenizer(line3, \" \");\n             } else {\n-                tok.nextToken(); // Ignore Filesystem\n-            }\n-            tok.nextToken(); // Ignore 1K-blocks\n-            tok.nextToken(); // Ignore Used\n-            String freeSpace \u003d tok.nextToken();\n-            try {\n-                bytes \u003d Long.parseLong(freeSpace);\n-            } catch (NumberFormatException ex) {\n                 throw new IOException(\n-                        \"Command line \u0027df\u0027 did not return numeric data as expected \" +\n+                        \"Command line \u0027df\u0027 did not return data as expected \" +\n                         \"for path \u0027\" + path + \"\u0027- check path is valid\");\n             }\n-\n-        } finally {\n-            IOUtils.closeQuietly(in);\n+        } else {\n+            tok.nextToken(); // Ignore Filesystem\n         }\n-\n-        if (bytes \u003c 0) {\n-            throw new IOException(\n-                    \"Command line \u0027df\u0027 did not find free space in response \" +\n-                    \"for path \u0027\" + path + \"\u0027- check path is valid\");\n-        }\n-        return bytes;\n+        tok.nextToken(); // Ignore 1K-blocks\n+        tok.nextToken(); // Ignore Used\n+        String freeSpace \u003d tok.nextToken();\n+        return parseBytes(freeSpace, path);\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "eaa8e0c698f694b7e5fdded5dbb9024c8cf15c4e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "IO-83 - Fix freeSpace for AIX and HP-UX\ncode from Magnus Grimsell, also from James Urie\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@436964 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1156541946000,
      "commitName": "eaa8e0c698f694b7e5fdded5dbb9024c8cf15c4e",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "IO-83 - Fix freeSpace for AIX and HP-UX\ncode from Magnus Grimsell, also from James Urie\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@436964 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1156541946000,
          "commitName": "eaa8e0c698f694b7e5fdded5dbb9024c8cf15c4e",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1142288829000,
          "commitNameOld": "c6be22ae2e58300f05cb713a4dde18c67dafa0a3",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 164.97,
          "commitsBetweenForRepo": 37,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,64 +1,71 @@\n-    long freeSpaceUnix(String path, boolean kb) throws IOException {\n+    long freeSpaceUnix(String path, boolean kb, boolean posix) throws IOException {\n         if (path.length() \u003d\u003d 0) {\n             throw new IllegalArgumentException(\"Path must not be empty\");\n         }\n         path \u003d FilenameUtils.normalize(path);\n \n         // build and run the \u0027dir\u0027 command\n+        String flags \u003d \"-\";\n+        if (kb) {\n+            flags +\u003d \"k\";\n+        }\n+        if (posix) {\n+            flags +\u003d \"P\";\n+        }\n         String[] cmdAttribs \u003d \n-            (kb ? new String[] {\"df\", \"-k\", path} : new String[] {\"df\", path});\n-\n+            (flags.length() \u003e 1 ? new String[] {\"df\", flags, path} : new String[] {\"df\", path});\n+        \n         // read the output from the command until we come to the second line\n         long bytes \u003d -1;\n         BufferedReader in \u003d null;\n         try {\n             in \u003d openProcessStream(cmdAttribs);\n             String line1 \u003d in.readLine(); // header line (ignore it)\n             String line2 \u003d in.readLine(); // the line we\u0027re interested in\n             String line3 \u003d in.readLine(); // possibly interesting line\n             if (line2 \u003d\u003d null) {\n                 // unknown problem, throw exception\n                 throw new IOException(\n                         \"Command line \u0027df\u0027 did not return info as expected \" +\n                         \"for path \u0027\" + path +\n                         \"\u0027- response on first line was \u0027\" + line1 + \"\u0027\");\n             }\n             line2 \u003d line2.trim();\n \n             // Now, we tokenize the string. The fourth element is what we want.\n             StringTokenizer tok \u003d new StringTokenizer(line2, \" \");\n             if (tok.countTokens() \u003c 4) {\n                 // could be long Filesystem, thus data on third line\n                 if (tok.countTokens() \u003d\u003d 1 \u0026\u0026 line3 !\u003d null) {\n                     line3 \u003d line3.trim();\n                     tok \u003d new StringTokenizer(line3, \" \");\n                 } else {\n                     throw new IOException(\n                             \"Command line \u0027df\u0027 did not return data as expected \" +\n                             \"for path \u0027\" + path + \"\u0027- check path is valid\");\n                 }\n             } else {\n                 tok.nextToken(); // Ignore Filesystem\n             }\n             tok.nextToken(); // Ignore 1K-blocks\n             tok.nextToken(); // Ignore Used\n             String freeSpace \u003d tok.nextToken();\n             try {\n                 bytes \u003d Long.parseLong(freeSpace);\n             } catch (NumberFormatException ex) {\n                 throw new IOException(\n                         \"Command line \u0027df\u0027 did not return numeric data as expected \" +\n                         \"for path \u0027\" + path + \"\u0027- check path is valid\");\n             }\n \n         } finally {\n             IOUtils.closeQuietly(in);\n         }\n \n         if (bytes \u003c 0) {\n             throw new IOException(\n                     \"Command line \u0027df\u0027 did not find free space in response \" +\n                     \"for path \u0027\" + path + \"\u0027- check path is valid\");\n         }\n         return bytes;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ybodychange",
          "commitMessage": "IO-83 - Fix freeSpace for AIX and HP-UX\ncode from Magnus Grimsell, also from James Urie\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@436964 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1156541946000,
          "commitName": "eaa8e0c698f694b7e5fdded5dbb9024c8cf15c4e",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1142288829000,
          "commitNameOld": "c6be22ae2e58300f05cb713a4dde18c67dafa0a3",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 164.97,
          "commitsBetweenForRepo": 37,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,64 +1,71 @@\n-    long freeSpaceUnix(String path, boolean kb) throws IOException {\n+    long freeSpaceUnix(String path, boolean kb, boolean posix) throws IOException {\n         if (path.length() \u003d\u003d 0) {\n             throw new IllegalArgumentException(\"Path must not be empty\");\n         }\n         path \u003d FilenameUtils.normalize(path);\n \n         // build and run the \u0027dir\u0027 command\n+        String flags \u003d \"-\";\n+        if (kb) {\n+            flags +\u003d \"k\";\n+        }\n+        if (posix) {\n+            flags +\u003d \"P\";\n+        }\n         String[] cmdAttribs \u003d \n-            (kb ? new String[] {\"df\", \"-k\", path} : new String[] {\"df\", path});\n-\n+            (flags.length() \u003e 1 ? new String[] {\"df\", flags, path} : new String[] {\"df\", path});\n+        \n         // read the output from the command until we come to the second line\n         long bytes \u003d -1;\n         BufferedReader in \u003d null;\n         try {\n             in \u003d openProcessStream(cmdAttribs);\n             String line1 \u003d in.readLine(); // header line (ignore it)\n             String line2 \u003d in.readLine(); // the line we\u0027re interested in\n             String line3 \u003d in.readLine(); // possibly interesting line\n             if (line2 \u003d\u003d null) {\n                 // unknown problem, throw exception\n                 throw new IOException(\n                         \"Command line \u0027df\u0027 did not return info as expected \" +\n                         \"for path \u0027\" + path +\n                         \"\u0027- response on first line was \u0027\" + line1 + \"\u0027\");\n             }\n             line2 \u003d line2.trim();\n \n             // Now, we tokenize the string. The fourth element is what we want.\n             StringTokenizer tok \u003d new StringTokenizer(line2, \" \");\n             if (tok.countTokens() \u003c 4) {\n                 // could be long Filesystem, thus data on third line\n                 if (tok.countTokens() \u003d\u003d 1 \u0026\u0026 line3 !\u003d null) {\n                     line3 \u003d line3.trim();\n                     tok \u003d new StringTokenizer(line3, \" \");\n                 } else {\n                     throw new IOException(\n                             \"Command line \u0027df\u0027 did not return data as expected \" +\n                             \"for path \u0027\" + path + \"\u0027- check path is valid\");\n                 }\n             } else {\n                 tok.nextToken(); // Ignore Filesystem\n             }\n             tok.nextToken(); // Ignore 1K-blocks\n             tok.nextToken(); // Ignore Used\n             String freeSpace \u003d tok.nextToken();\n             try {\n                 bytes \u003d Long.parseLong(freeSpace);\n             } catch (NumberFormatException ex) {\n                 throw new IOException(\n                         \"Command line \u0027df\u0027 did not return numeric data as expected \" +\n                         \"for path \u0027\" + path + \"\u0027- check path is valid\");\n             }\n \n         } finally {\n             IOUtils.closeQuietly(in);\n         }\n \n         if (bytes \u003c 0) {\n             throw new IOException(\n                     \"Command line \u0027df\u0027 did not find free space in response \" +\n                     \"for path \u0027\" + path + \"\u0027- check path is valid\");\n         }\n         return bytes;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "0875f4bddeaae2c8d4b44280f54151d0ed5eeee1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "FileSystemUtils.freeSpaceKb to normalize free space to kb\nbug 38574\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@383179 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1141499644000,
      "commitName": "0875f4bddeaae2c8d4b44280f54151d0ed5eeee1",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "FileSystemUtils.freeSpaceKb to normalize free space to kb\nbug 38574\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@383179 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1141499644000,
          "commitName": "0875f4bddeaae2c8d4b44280f54151d0ed5eeee1",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1129389207000,
          "commitNameOld": "9a91b208cd1c02d4faf782655109bb6fba96465e",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 140.17,
          "commitsBetweenForRepo": 27,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,63 +1,64 @@\n-    long freeSpaceUnix(String path) throws IOException {\n+    long freeSpaceUnix(String path, boolean kb) throws IOException {\n         if (path.length() \u003d\u003d 0) {\n             throw new IllegalArgumentException(\"Path must not be empty\");\n         }\n         path \u003d FilenameUtils.normalize(path);\n \n         // build and run the \u0027dir\u0027 command\n-        String[] cmdAttribs \u003d new String[] {\"df\", path};\n+        String[] cmdAttribs \u003d \n+            (kb ? new String[] {\"df\", \"-k\", path} : new String[] {\"df\", path});\n \n         // read the output from the command until we come to the second line\n         long bytes \u003d -1;\n         BufferedReader in \u003d null;\n         try {\n             in \u003d openProcessStream(cmdAttribs);\n             String line1 \u003d in.readLine(); // header line (ignore it)\n             String line2 \u003d in.readLine(); // the line we\u0027re interested in\n             String line3 \u003d in.readLine(); // possibly interesting line\n             if (line2 \u003d\u003d null) {\n                 // unknown problem, throw exception\n                 throw new IOException(\n                         \"Command line \u0027df\u0027 did not return info as expected \" +\n                         \"for path \u0027\" + path +\n                         \"\u0027- response on first line was \u0027\" + line1 + \"\u0027\");\n             }\n             line2 \u003d line2.trim();\n \n             // Now, we tokenize the string. The fourth element is what we want.\n             StringTokenizer tok \u003d new StringTokenizer(line2, \" \");\n             if (tok.countTokens() \u003c 4) {\n                 // could be long Filesystem, thus data on third line\n                 if (tok.countTokens() \u003d\u003d 1 \u0026\u0026 line3 !\u003d null) {\n                     line3 \u003d line3.trim();\n                     tok \u003d new StringTokenizer(line3, \" \");\n                 } else {\n                     throw new IOException(\n                             \"Command line \u0027df\u0027 did not return data as expected \" +\n                             \"for path \u0027\" + path + \"\u0027- check path is valid\");\n                 }\n             } else {\n                 tok.nextToken(); // Ignore Filesystem\n             }\n             tok.nextToken(); // Ignore 1K-blocks\n             tok.nextToken(); // Ignore Used\n             String freeSpace \u003d tok.nextToken();\n             try {\n                 bytes \u003d Long.parseLong(freeSpace);\n             } catch (NumberFormatException ex) {\n                 throw new IOException(\n                         \"Command line \u0027df\u0027 did not return numeric data as expected \" +\n                         \"for path \u0027\" + path + \"\u0027- check path is valid\");\n             }\n \n         } finally {\n             IOUtils.closeQuietly(in);\n         }\n \n         if (bytes \u003c 0) {\n             throw new IOException(\n                     \"Command line \u0027df\u0027 did not find free space in response \" +\n                     \"for path \u0027\" + path + \"\u0027- check path is valid\");\n         }\n         return bytes;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ybodychange",
          "commitMessage": "FileSystemUtils.freeSpaceKb to normalize free space to kb\nbug 38574\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@383179 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1141499644000,
          "commitName": "0875f4bddeaae2c8d4b44280f54151d0ed5eeee1",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1129389207000,
          "commitNameOld": "9a91b208cd1c02d4faf782655109bb6fba96465e",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 140.17,
          "commitsBetweenForRepo": 27,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,63 +1,64 @@\n-    long freeSpaceUnix(String path) throws IOException {\n+    long freeSpaceUnix(String path, boolean kb) throws IOException {\n         if (path.length() \u003d\u003d 0) {\n             throw new IllegalArgumentException(\"Path must not be empty\");\n         }\n         path \u003d FilenameUtils.normalize(path);\n \n         // build and run the \u0027dir\u0027 command\n-        String[] cmdAttribs \u003d new String[] {\"df\", path};\n+        String[] cmdAttribs \u003d \n+            (kb ? new String[] {\"df\", \"-k\", path} : new String[] {\"df\", path});\n \n         // read the output from the command until we come to the second line\n         long bytes \u003d -1;\n         BufferedReader in \u003d null;\n         try {\n             in \u003d openProcessStream(cmdAttribs);\n             String line1 \u003d in.readLine(); // header line (ignore it)\n             String line2 \u003d in.readLine(); // the line we\u0027re interested in\n             String line3 \u003d in.readLine(); // possibly interesting line\n             if (line2 \u003d\u003d null) {\n                 // unknown problem, throw exception\n                 throw new IOException(\n                         \"Command line \u0027df\u0027 did not return info as expected \" +\n                         \"for path \u0027\" + path +\n                         \"\u0027- response on first line was \u0027\" + line1 + \"\u0027\");\n             }\n             line2 \u003d line2.trim();\n \n             // Now, we tokenize the string. The fourth element is what we want.\n             StringTokenizer tok \u003d new StringTokenizer(line2, \" \");\n             if (tok.countTokens() \u003c 4) {\n                 // could be long Filesystem, thus data on third line\n                 if (tok.countTokens() \u003d\u003d 1 \u0026\u0026 line3 !\u003d null) {\n                     line3 \u003d line3.trim();\n                     tok \u003d new StringTokenizer(line3, \" \");\n                 } else {\n                     throw new IOException(\n                             \"Command line \u0027df\u0027 did not return data as expected \" +\n                             \"for path \u0027\" + path + \"\u0027- check path is valid\");\n                 }\n             } else {\n                 tok.nextToken(); // Ignore Filesystem\n             }\n             tok.nextToken(); // Ignore 1K-blocks\n             tok.nextToken(); // Ignore Used\n             String freeSpace \u003d tok.nextToken();\n             try {\n                 bytes \u003d Long.parseLong(freeSpace);\n             } catch (NumberFormatException ex) {\n                 throw new IOException(\n                         \"Command line \u0027df\u0027 did not return numeric data as expected \" +\n                         \"for path \u0027\" + path + \"\u0027- check path is valid\");\n             }\n \n         } finally {\n             IOUtils.closeQuietly(in);\n         }\n \n         if (bytes \u003c 0) {\n             throw new IOException(\n                     \"Command line \u0027df\u0027 did not find free space in response \" +\n                     \"for path \u0027\" + path + \"\u0027- check path is valid\");\n         }\n         return bytes;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "9004f534a046b5b8a6f87edf2426f24a291fd2ab": {
      "type": "Ymultichange(Yrename,Ymodifierchange)",
      "commitMessage": "Rename the free space method to be commons-io like\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@291741 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1127767185000,
      "commitName": "9004f534a046b5b8a6f87edf2426f24a291fd2ab",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Rename the free space method to be commons-io like\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@291741 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1127767185000,
          "commitName": "9004f534a046b5b8a6f87edf2426f24a291fd2ab",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1127085165000,
          "commitNameOld": "990ea5d016b6ebc1961be059ba9aab0f5079683b",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 7.89,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,63 +1,63 @@\n-    protected long getFreeSpaceUnix(String path) throws IOException {\n+    long freeSpaceUnix(String path) throws IOException {\n         if (path.length() \u003d\u003d 0) {\n             throw new IllegalArgumentException(\"Path must not be empty\");\n         }\n         path \u003d FilenameUtils.normalize(path);\n \n         // build and run the \u0027dir\u0027 command\n         String[] cmdAttribs \u003d new String[] {\"df\", path};\n \n         // read the output from the command until we come to the second line\n         long bytes \u003d -1;\n         BufferedReader in \u003d null;\n         try {\n             in \u003d openProcessStream(cmdAttribs);\n             String line1 \u003d in.readLine(); // header line (ignore it)\n             String line2 \u003d in.readLine(); // the line we\u0027re interested in\n             String line3 \u003d in.readLine(); // possibly interesting line\n             if (line2 \u003d\u003d null) {\n                 // unknown problem, throw exception\n                 throw new IOException(\n                         \"Command line \u0027df\u0027 did not return info as expected \" +\n                         \"for path \u0027\" + path +\n                         \"\u0027- response on first line was \u0027\" + line1 + \"\u0027\");\n             }\n             line2 \u003d line2.trim();\n \n             // Now, we tokenize the string. The fourth element is what we want.\n             StringTokenizer tok \u003d new StringTokenizer(line2, \" \");\n             if (tok.countTokens() \u003c 4) {\n                 // could be long Filesystem, thus data on third line\n                 if (tok.countTokens() \u003d\u003d 1 \u0026\u0026 line3 !\u003d null) {\n                     line3 \u003d line3.trim();\n                     tok \u003d new StringTokenizer(line3, \" \");\n                 } else {\n                     throw new IOException(\n                             \"Command line \u0027df\u0027 did not return data as expected \" +\n                             \"for path \u0027\" + path + \"\u0027- check path is valid\");\n                 }\n             } else {\n                 tok.nextToken(); // Ignore Filesystem\n             }\n             tok.nextToken(); // Ignore 1K-blocks\n             tok.nextToken(); // Ignore Used\n             String freeSpace \u003d tok.nextToken();\n             try {\n                 bytes \u003d Long.parseLong(freeSpace);\n             } catch (NumberFormatException ex) {\n                 throw new IOException(\n                         \"Command line \u0027df\u0027 did not return numeric data as expected \" +\n                         \"for path \u0027\" + path + \"\u0027- check path is valid\");\n             }\n \n         } finally {\n             IOUtils.closeQuietly(in);\n         }\n \n         if (bytes \u003c 0) {\n             throw new IOException(\n                     \"Command line \u0027df\u0027 did not find free space in response \" +\n                     \"for path \u0027\" + path + \"\u0027- check path is valid\");\n         }\n         return bytes;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldMethodName": "getFreeSpaceUnix",
            "newMethodName": "freeSpaceUnix"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Rename the free space method to be commons-io like\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@291741 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1127767185000,
          "commitName": "9004f534a046b5b8a6f87edf2426f24a291fd2ab",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1127085165000,
          "commitNameOld": "990ea5d016b6ebc1961be059ba9aab0f5079683b",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 7.89,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,63 +1,63 @@\n-    protected long getFreeSpaceUnix(String path) throws IOException {\n+    long freeSpaceUnix(String path) throws IOException {\n         if (path.length() \u003d\u003d 0) {\n             throw new IllegalArgumentException(\"Path must not be empty\");\n         }\n         path \u003d FilenameUtils.normalize(path);\n \n         // build and run the \u0027dir\u0027 command\n         String[] cmdAttribs \u003d new String[] {\"df\", path};\n \n         // read the output from the command until we come to the second line\n         long bytes \u003d -1;\n         BufferedReader in \u003d null;\n         try {\n             in \u003d openProcessStream(cmdAttribs);\n             String line1 \u003d in.readLine(); // header line (ignore it)\n             String line2 \u003d in.readLine(); // the line we\u0027re interested in\n             String line3 \u003d in.readLine(); // possibly interesting line\n             if (line2 \u003d\u003d null) {\n                 // unknown problem, throw exception\n                 throw new IOException(\n                         \"Command line \u0027df\u0027 did not return info as expected \" +\n                         \"for path \u0027\" + path +\n                         \"\u0027- response on first line was \u0027\" + line1 + \"\u0027\");\n             }\n             line2 \u003d line2.trim();\n \n             // Now, we tokenize the string. The fourth element is what we want.\n             StringTokenizer tok \u003d new StringTokenizer(line2, \" \");\n             if (tok.countTokens() \u003c 4) {\n                 // could be long Filesystem, thus data on third line\n                 if (tok.countTokens() \u003d\u003d 1 \u0026\u0026 line3 !\u003d null) {\n                     line3 \u003d line3.trim();\n                     tok \u003d new StringTokenizer(line3, \" \");\n                 } else {\n                     throw new IOException(\n                             \"Command line \u0027df\u0027 did not return data as expected \" +\n                             \"for path \u0027\" + path + \"\u0027- check path is valid\");\n                 }\n             } else {\n                 tok.nextToken(); // Ignore Filesystem\n             }\n             tok.nextToken(); // Ignore 1K-blocks\n             tok.nextToken(); // Ignore Used\n             String freeSpace \u003d tok.nextToken();\n             try {\n                 bytes \u003d Long.parseLong(freeSpace);\n             } catch (NumberFormatException ex) {\n                 throw new IOException(\n                         \"Command line \u0027df\u0027 did not return numeric data as expected \" +\n                         \"for path \u0027\" + path + \"\u0027- check path is valid\");\n             }\n \n         } finally {\n             IOUtils.closeQuietly(in);\n         }\n \n         if (bytes \u003c 0) {\n             throw new IOException(\n                     \"Command line \u0027df\u0027 did not find free space in response \" +\n                     \"for path \u0027\" + path + \"\u0027- check path is valid\");\n         }\n         return bytes;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "4cd33ce31d4245281432320a7f4f4cf6b541c690": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "Fix FileSystemUtils and add tests\nfrom Frank W. Zammetti\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@240439 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1125161462000,
      "commitName": "4cd33ce31d4245281432320a7f4f4cf6b541c690",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "Fix FileSystemUtils and add tests\nfrom Frank W. Zammetti\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@240439 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1125161462000,
          "commitName": "4cd33ce31d4245281432320a7f4f4cf6b541c690",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1108930291000,
          "commitNameOld": "dcb61e575021a61d9e1694ccdf300f5d028f5b1f",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 187.86,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,63 @@\n-    private static long getFreeSpaceUnix(String path) throws IOException {\n+    protected long getFreeSpaceUnix(String path) throws IOException {\n+        if (path.length() \u003d\u003d 0) {\n+            throw new IllegalArgumentException(\"Path must not be empty\");\n+        }\n+        path \u003d FilenameUtils.normalize(path);\n+\n         // build and run the \u0027dir\u0027 command\n-        String[] cmdAttrbs \u003d new String[3];\n-        cmdAttrbs[0] \u003d \"cmd.exe\";\n-        cmdAttrbs[1] \u003d \"/C\";\n-        cmdAttrbs[2] \u003d \"df \" + path;\n-        Process proc \u003d Runtime.getRuntime().exec(cmdAttrbs);\n+        String[] cmdAttribs \u003d new String[] {\"df\", path};\n \n         // read the output from the command until we come to the second line\n         long bytes \u003d -1;\n         BufferedReader in \u003d null;\n         try {\n-            in \u003d new BufferedReader(new InputStreamReader(proc.getInputStream()));\n+            in \u003d openProcessStream(cmdAttribs);\n             String line1 \u003d in.readLine(); // header line (ignore it)\n             String line2 \u003d in.readLine(); // the line we\u0027re interested in\n+            String line3 \u003d in.readLine(); // possibly interesting line\n             if (line2 \u003d\u003d null) {\n                 // unknown problem, throw exception\n                 throw new IOException(\n-                        \"Command line \u0027df\u0027 did not return info as expected for path \u0027\" +\n-                        path + \"\u0027- response on first line was \u0027\" + line1 + \u0027\"\u0027);\n+                        \"Command line \u0027df\u0027 did not return info as expected \" +\n+                        \"for path \u0027\" + path +\n+                        \"\u0027- response on first line was \u0027\" + line1 + \"\u0027\");\n             }\n             line2 \u003d line2.trim();\n \n             // Now, we tokenize the string. The fourth element is what we want.\n             StringTokenizer tok \u003d new StringTokenizer(line2, \" \");\n             if (tok.countTokens() \u003c 4) {\n-                throw new IOException(\n-                        \"Command line \u0027df\u0027 did not return data as expected for path \u0027\" +\n-                        path + \"\u0027- check path is valid\");\n+                // could be long Filesystem, thus data on third line\n+                if (tok.countTokens() \u003d\u003d 1 \u0026\u0026 line3 !\u003d null) {\n+                    line3 \u003d line3.trim();\n+                    tok \u003d new StringTokenizer(line3, \" \");\n+                } else {\n+                    throw new IOException(\n+                            \"Command line \u0027df\u0027 did not return data as expected \" +\n+                            \"for path \u0027\" + path + \"\u0027- check path is valid\");\n+                }\n+            } else {\n+                tok.nextToken(); // Ignore Filesystem\n             }\n-            tok.nextToken(); // Ignore Filesystem\n             tok.nextToken(); // Ignore 1K-blocks\n             tok.nextToken(); // Ignore Used\n             String freeSpace \u003d tok.nextToken();\n-            bytes \u003d Long.parseLong(freeSpace);\n+            try {\n+                bytes \u003d Long.parseLong(freeSpace);\n+            } catch (NumberFormatException ex) {\n+                throw new IOException(\n+                        \"Command line \u0027df\u0027 did not return numeric data as expected \" +\n+                        \"for path \u0027\" + path + \"\u0027- check path is valid\");\n+            }\n \n         } finally {\n             IOUtils.closeQuietly(in);\n         }\n \n-        if (bytes \u003d\u003d -1) {\n+        if (bytes \u003c 0) {\n             throw new IOException(\n-                    \"Command line \u0027df\u0027 did not find free space in response for path \u0027\" +\n-                    path + \"\u0027- check path is valid\");\n+                    \"Command line \u0027df\u0027 did not find free space in response \" +\n+                    \"for path \u0027\" + path + \"\u0027- check path is valid\");\n         }\n         return bytes;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Fix FileSystemUtils and add tests\nfrom Frank W. Zammetti\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@240439 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1125161462000,
          "commitName": "4cd33ce31d4245281432320a7f4f4cf6b541c690",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1108930291000,
          "commitNameOld": "dcb61e575021a61d9e1694ccdf300f5d028f5b1f",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 187.86,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,63 @@\n-    private static long getFreeSpaceUnix(String path) throws IOException {\n+    protected long getFreeSpaceUnix(String path) throws IOException {\n+        if (path.length() \u003d\u003d 0) {\n+            throw new IllegalArgumentException(\"Path must not be empty\");\n+        }\n+        path \u003d FilenameUtils.normalize(path);\n+\n         // build and run the \u0027dir\u0027 command\n-        String[] cmdAttrbs \u003d new String[3];\n-        cmdAttrbs[0] \u003d \"cmd.exe\";\n-        cmdAttrbs[1] \u003d \"/C\";\n-        cmdAttrbs[2] \u003d \"df \" + path;\n-        Process proc \u003d Runtime.getRuntime().exec(cmdAttrbs);\n+        String[] cmdAttribs \u003d new String[] {\"df\", path};\n \n         // read the output from the command until we come to the second line\n         long bytes \u003d -1;\n         BufferedReader in \u003d null;\n         try {\n-            in \u003d new BufferedReader(new InputStreamReader(proc.getInputStream()));\n+            in \u003d openProcessStream(cmdAttribs);\n             String line1 \u003d in.readLine(); // header line (ignore it)\n             String line2 \u003d in.readLine(); // the line we\u0027re interested in\n+            String line3 \u003d in.readLine(); // possibly interesting line\n             if (line2 \u003d\u003d null) {\n                 // unknown problem, throw exception\n                 throw new IOException(\n-                        \"Command line \u0027df\u0027 did not return info as expected for path \u0027\" +\n-                        path + \"\u0027- response on first line was \u0027\" + line1 + \u0027\"\u0027);\n+                        \"Command line \u0027df\u0027 did not return info as expected \" +\n+                        \"for path \u0027\" + path +\n+                        \"\u0027- response on first line was \u0027\" + line1 + \"\u0027\");\n             }\n             line2 \u003d line2.trim();\n \n             // Now, we tokenize the string. The fourth element is what we want.\n             StringTokenizer tok \u003d new StringTokenizer(line2, \" \");\n             if (tok.countTokens() \u003c 4) {\n-                throw new IOException(\n-                        \"Command line \u0027df\u0027 did not return data as expected for path \u0027\" +\n-                        path + \"\u0027- check path is valid\");\n+                // could be long Filesystem, thus data on third line\n+                if (tok.countTokens() \u003d\u003d 1 \u0026\u0026 line3 !\u003d null) {\n+                    line3 \u003d line3.trim();\n+                    tok \u003d new StringTokenizer(line3, \" \");\n+                } else {\n+                    throw new IOException(\n+                            \"Command line \u0027df\u0027 did not return data as expected \" +\n+                            \"for path \u0027\" + path + \"\u0027- check path is valid\");\n+                }\n+            } else {\n+                tok.nextToken(); // Ignore Filesystem\n             }\n-            tok.nextToken(); // Ignore Filesystem\n             tok.nextToken(); // Ignore 1K-blocks\n             tok.nextToken(); // Ignore Used\n             String freeSpace \u003d tok.nextToken();\n-            bytes \u003d Long.parseLong(freeSpace);\n+            try {\n+                bytes \u003d Long.parseLong(freeSpace);\n+            } catch (NumberFormatException ex) {\n+                throw new IOException(\n+                        \"Command line \u0027df\u0027 did not return numeric data as expected \" +\n+                        \"for path \u0027\" + path + \"\u0027- check path is valid\");\n+            }\n \n         } finally {\n             IOUtils.closeQuietly(in);\n         }\n \n-        if (bytes \u003d\u003d -1) {\n+        if (bytes \u003c 0) {\n             throw new IOException(\n-                    \"Command line \u0027df\u0027 did not find free space in response for path \u0027\" +\n-                    path + \"\u0027- check path is valid\");\n+                    \"Command line \u0027df\u0027 did not find free space in response \" +\n+                    \"for path \u0027\" + path + \"\u0027- check path is valid\");\n         }\n         return bytes;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "dcb61e575021a61d9e1694ccdf300f5d028f5b1f": {
      "type": "Yintroduced",
      "commitMessage": "Add FileSystemUtils to allow access to information about the filing system\nbug 32982, from Frank W. Zammetti\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@154561 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1108930291000,
      "commitName": "dcb61e575021a61d9e1694ccdf300f5d028f5b1f",
      "commitAuthor": "Stephen Colebourne"
    }
  }
}