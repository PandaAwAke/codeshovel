{
  "origin": "codeshovel",
  "repositoryName": "commons-io",
  "repositoryPath": "/repos/commons-io/.git",
  "startCommitName": "559de2c461e94ab636c959149c775bb27111fb48",
  "sourceFileName": "FileSystemUtils.java",
  "functionName": "performCommand",
  "functionId": "performCommand___cmdAttribs-String[]__max-int__timeout-long",
  "sourceFilePath": "src/main/java/org/apache/commons/io/FileSystemUtils.java",
  "functionStartLine": 483,
  "functionEndLine": 563,
  "changeHistory": [
    "51f13c846dae950e1d27693c9e23c1063945210f",
    "d9406824aeba0e977c0692971a6dbb2e62823886",
    "5a62c007b8b791c025cf2d4d60bb6da1aad86589",
    "493a38aaeacec2a9365e055ffbd7e14bd14b24af",
    "30b68e2d9297d0bb98bdfe5f976fea1106d35363",
    "6aa00766b9103d75c763160280429af8e1f0549e",
    "33e9a899dcc38a2fdcf42432fb82024d323b0c6d",
    "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a",
    "0e7c3a88a727f307e2d38701f8117ae59e019e93",
    "ab42367cc639fa3b18786d13afdc17a3394f229f",
    "ce90015bdc3614f88fbe55a697731a2f5b052ca3",
    "a74a5a0c6ff41a4ca0a08caf740ebce1dc3c6d10",
    "b4b470096a39bfa51d33782f442505383ecc5e79",
    "0a03609ddc6380dd7c9053eb8cb04072baa476a1"
  ],
  "changeHistoryShort": {
    "51f13c846dae950e1d27693c9e23c1063945210f": "Ybodychange",
    "d9406824aeba0e977c0692971a6dbb2e62823886": "Ybodychange",
    "5a62c007b8b791c025cf2d4d60bb6da1aad86589": "Ybodychange",
    "493a38aaeacec2a9365e055ffbd7e14bd14b24af": "Ybodychange",
    "30b68e2d9297d0bb98bdfe5f976fea1106d35363": "Ybodychange",
    "6aa00766b9103d75c763160280429af8e1f0549e": "Ymultichange(Ybodychange,Yparametermetachange)",
    "33e9a899dcc38a2fdcf42432fb82024d323b0c6d": "Ybodychange",
    "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a": "Yfilerename",
    "0e7c3a88a727f307e2d38701f8117ae59e019e93": "Ybodychange",
    "ab42367cc639fa3b18786d13afdc17a3394f229f": "Ymultichange(Yparameterchange,Ybodychange)",
    "ce90015bdc3614f88fbe55a697731a2f5b052ca3": "Ybodychange",
    "a74a5a0c6ff41a4ca0a08caf740ebce1dc3c6d10": "Ymultichange(Yreturntypechange,Ybodychange)",
    "b4b470096a39bfa51d33782f442505383ecc5e79": "Ybodychange",
    "0a03609ddc6380dd7c9053eb8cb04072baa476a1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "51f13c846dae950e1d27693c9e23c1063945210f": {
      "type": "Ybodychange",
      "commitMessage": "Updated for Java7 features\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1746593 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1464881775000,
      "commitName": "51f13c846dae950e1d27693c9e23c1063945210f",
      "commitAuthor": "Kristian Rosenvold",
      "commitDateOld": 1462577014000,
      "commitNameOld": "3206b41cc6b60ef2854273ab0eee5e406f9f6efa",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 26.68,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,81 +1,81 @@\n     List\u003cString\u003e performCommand(final String[] cmdAttribs, final int max, final long timeout) throws IOException {\n         // this method does what it can to avoid the \u0027Too many open files\u0027 error\n         // based on trial and error and these links:\n         // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4784692\n         // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4801027\n         // http://forum.java.sun.com/thread.jspa?threadID\u003d533029\u0026messageID\u003d2572018\n         // however, its still not perfect as the JDK support is so poor\n         // (see commons-exec or Ant for a better multi-threaded multi-os solution)\n \n-        final List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e(20);\n+        final List\u003cString\u003e lines \u003d new ArrayList\u003c\u003e(20);\n         Process proc \u003d null;\n         InputStream in \u003d null;\n         OutputStream out \u003d null;\n         InputStream err \u003d null;\n         BufferedReader inr \u003d null;\n         try {\n \n             final Thread monitor \u003d ThreadMonitor.start(timeout);\n \n             proc \u003d openProcess(cmdAttribs);\n             in \u003d proc.getInputStream();\n             out \u003d proc.getOutputStream();\n             err \u003d proc.getErrorStream();\n             // default charset is most likely appropriate here\n             inr \u003d new BufferedReader(new InputStreamReader(in, Charset.defaultCharset()));\n             String line \u003d inr.readLine();\n             while (line !\u003d null \u0026\u0026 lines.size() \u003c max) {\n                 line \u003d line.toLowerCase(Locale.ENGLISH).trim();\n                 lines.add(line);\n                 line \u003d inr.readLine();\n             }\n \n             proc.waitFor();\n \n             ThreadMonitor.stop(monitor);\n \n             if (proc.exitValue() !\u003d 0) {\n                 // os command problem, throw exception\n                 throw new IOException(\n                         \"Command line returned OS error code \u0027\" + proc.exitValue() +\n                         \"\u0027 for command \" + Arrays.asList(cmdAttribs));\n             }\n             if (lines.isEmpty()) {\n                 // unknown problem, throw exception\n                 throw new IOException(\n                         \"Command line did not return any info \" +\n                         \"for command \" + Arrays.asList(cmdAttribs));\n             }\n \n             inr.close();\n             inr \u003d null;\n \n             in.close();\n             in \u003d null;\n \n             if (out !\u003d null) {\n                 out.close();\n                 out \u003d null;\n             }\n \n             if (err !\u003d null) {\n                 err.close();\n                 err \u003d null;\n             }\n \n             return lines;\n \n         } catch (final InterruptedException ex) {\n             throw new IOException(\n                     \"Command line threw an InterruptedException \" +\n                     \"for command \" + Arrays.asList(cmdAttribs) + \" timeout\u003d\" + timeout, ex);\n         } finally {\n             IOUtils.closeQuietly(in);\n             IOUtils.closeQuietly(out);\n             IOUtils.closeQuietly(err);\n             IOUtils.closeQuietly(inr);\n             if (proc !\u003d null) {\n                 proc.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d9406824aeba0e977c0692971a6dbb2e62823886": {
      "type": "Ybodychange",
      "commitMessage": "[IO-502] Exceptions are suppressed incorrectly when copying files. Fix NPEs due to the patch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1741122 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1461714915000,
      "commitName": "d9406824aeba0e977c0692971a6dbb2e62823886",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": 1434912289000,
      "commitNameOld": "7c58d8a9919c5c9dbc1485a21d56bb3f37444060",
      "commitAuthorOld": "Kristian Rosenvold",
      "daysBetweenCommits": 310.22,
      "commitsBetweenForRepo": 104,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,81 @@\n     List\u003cString\u003e performCommand(final String[] cmdAttribs, final int max, final long timeout) throws IOException {\n         // this method does what it can to avoid the \u0027Too many open files\u0027 error\n         // based on trial and error and these links:\n         // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4784692\n         // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4801027\n         // http://forum.java.sun.com/thread.jspa?threadID\u003d533029\u0026messageID\u003d2572018\n         // however, its still not perfect as the JDK support is so poor\n         // (see commons-exec or Ant for a better multi-threaded multi-os solution)\n \n         final List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e(20);\n         Process proc \u003d null;\n         InputStream in \u003d null;\n         OutputStream out \u003d null;\n         InputStream err \u003d null;\n         BufferedReader inr \u003d null;\n         try {\n \n             final Thread monitor \u003d ThreadMonitor.start(timeout);\n \n             proc \u003d openProcess(cmdAttribs);\n             in \u003d proc.getInputStream();\n             out \u003d proc.getOutputStream();\n             err \u003d proc.getErrorStream();\n             // default charset is most likely appropriate here\n             inr \u003d new BufferedReader(new InputStreamReader(in, Charset.defaultCharset()));\n             String line \u003d inr.readLine();\n             while (line !\u003d null \u0026\u0026 lines.size() \u003c max) {\n                 line \u003d line.toLowerCase(Locale.ENGLISH).trim();\n                 lines.add(line);\n                 line \u003d inr.readLine();\n             }\n \n             proc.waitFor();\n \n             ThreadMonitor.stop(monitor);\n \n             if (proc.exitValue() !\u003d 0) {\n                 // os command problem, throw exception\n                 throw new IOException(\n                         \"Command line returned OS error code \u0027\" + proc.exitValue() +\n                         \"\u0027 for command \" + Arrays.asList(cmdAttribs));\n             }\n             if (lines.isEmpty()) {\n                 // unknown problem, throw exception\n                 throw new IOException(\n                         \"Command line did not return any info \" +\n                         \"for command \" + Arrays.asList(cmdAttribs));\n             }\n+\n+            inr.close();\n+            inr \u003d null;\n+\n+            in.close();\n+            in \u003d null;\n+\n+            if (out !\u003d null) {\n+                out.close();\n+                out \u003d null;\n+            }\n+\n+            if (err !\u003d null) {\n+                err.close();\n+                err \u003d null;\n+            }\n+\n             return lines;\n \n         } catch (final InterruptedException ex) {\n             throw new IOException(\n                     \"Command line threw an InterruptedException \" +\n                     \"for command \" + Arrays.asList(cmdAttribs) + \" timeout\u003d\" + timeout, ex);\n         } finally {\n             IOUtils.closeQuietly(in);\n             IOUtils.closeQuietly(out);\n             IOUtils.closeQuietly(err);\n             IOUtils.closeQuietly(inr);\n             if (proc !\u003d null) {\n                 proc.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5a62c007b8b791c025cf2d4d60bb6da1aad86589": {
      "type": "Ybodychange",
      "commitMessage": "IO-462 IOExceptionWithCause no longer needed\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1642799 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1417488939000,
      "commitName": "5a62c007b8b791c025cf2d4d60bb6da1aad86589",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": 1401832064000,
      "commitNameOld": "9b24a71e9930d7e929f9413c769ecd412fe830e9",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 181.21,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,64 @@\n     List\u003cString\u003e performCommand(final String[] cmdAttribs, final int max, final long timeout) throws IOException {\n         // this method does what it can to avoid the \u0027Too many open files\u0027 error\n         // based on trial and error and these links:\n         // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4784692\n         // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4801027\n         // http://forum.java.sun.com/thread.jspa?threadID\u003d533029\u0026messageID\u003d2572018\n         // however, its still not perfect as the JDK support is so poor\n         // (see commons-exec or Ant for a better multi-threaded multi-os solution)\n \n         final List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e(20);\n         Process proc \u003d null;\n         InputStream in \u003d null;\n         OutputStream out \u003d null;\n         InputStream err \u003d null;\n         BufferedReader inr \u003d null;\n         try {\n \n             final Thread monitor \u003d ThreadMonitor.start(timeout);\n \n             proc \u003d openProcess(cmdAttribs);\n             in \u003d proc.getInputStream();\n             out \u003d proc.getOutputStream();\n             err \u003d proc.getErrorStream();\n             // default charset is most likely appropriate here\n             inr \u003d new BufferedReader(new InputStreamReader(in, Charset.defaultCharset()));\n             String line \u003d inr.readLine();\n             while (line !\u003d null \u0026\u0026 lines.size() \u003c max) {\n                 line \u003d line.toLowerCase(Locale.ENGLISH).trim();\n                 lines.add(line);\n                 line \u003d inr.readLine();\n             }\n \n             proc.waitFor();\n \n             ThreadMonitor.stop(monitor);\n \n             if (proc.exitValue() !\u003d 0) {\n                 // os command problem, throw exception\n                 throw new IOException(\n                         \"Command line returned OS error code \u0027\" + proc.exitValue() +\n                         \"\u0027 for command \" + Arrays.asList(cmdAttribs));\n             }\n             if (lines.isEmpty()) {\n                 // unknown problem, throw exception\n                 throw new IOException(\n                         \"Command line did not return any info \" +\n                         \"for command \" + Arrays.asList(cmdAttribs));\n             }\n             return lines;\n \n         } catch (final InterruptedException ex) {\n-            throw new IOExceptionWithCause(\n+            throw new IOException(\n                     \"Command line threw an InterruptedException \" +\n                     \"for command \" + Arrays.asList(cmdAttribs) + \" timeout\u003d\" + timeout, ex);\n         } finally {\n             IOUtils.closeQuietly(in);\n             IOUtils.closeQuietly(out);\n             IOUtils.closeQuietly(err);\n             IOUtils.closeQuietly(inr);\n             if (proc !\u003d null) {\n                 proc.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "493a38aaeacec2a9365e055ffbd7e14bd14b24af": {
      "type": "Ybodychange",
      "commitMessage": "Make explicit where the default platform encoding is being used\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1468883 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1366203760000,
      "commitName": "493a38aaeacec2a9365e055ffbd7e14bd14b24af",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": 1366162940000,
      "commitNameOld": "30b68e2d9297d0bb98bdfe5f976fea1106d35363",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 0.47,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,64 @@\n     List\u003cString\u003e performCommand(final String[] cmdAttribs, final int max, final long timeout) throws IOException {\n         // this method does what it can to avoid the \u0027Too many open files\u0027 error\n         // based on trial and error and these links:\n         // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4784692\n         // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4801027\n         // http://forum.java.sun.com/thread.jspa?threadID\u003d533029\u0026messageID\u003d2572018\n         // however, its still not perfect as the JDK support is so poor\n         // (see commons-exec or Ant for a better multi-threaded multi-os solution)\n         \n         final List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e(20);\n         Process proc \u003d null;\n         InputStream in \u003d null;\n         OutputStream out \u003d null;\n         InputStream err \u003d null;\n         BufferedReader inr \u003d null;\n         try {\n \n             final Thread monitor \u003d ThreadMonitor.start(timeout);\n \n             proc \u003d openProcess(cmdAttribs);\n             in \u003d proc.getInputStream();\n             out \u003d proc.getOutputStream();\n             err \u003d proc.getErrorStream();\n-            inr \u003d new BufferedReader(new InputStreamReader(in));\n+            // default charset is most likely appropriate here\n+            inr \u003d new BufferedReader(new InputStreamReader(in, Charset.defaultCharset()));\n             String line \u003d inr.readLine();\n             while (line !\u003d null \u0026\u0026 lines.size() \u003c max) {\n                 line \u003d line.toLowerCase(Locale.ENGLISH).trim();\n                 lines.add(line);\n                 line \u003d inr.readLine();\n             }\n             \n             proc.waitFor();\n \n             ThreadMonitor.stop(monitor);\n \n             if (proc.exitValue() !\u003d 0) {\n                 // os command problem, throw exception\n                 throw new IOException(\n                         \"Command line returned OS error code \u0027\" + proc.exitValue() +\n                         \"\u0027 for command \" + Arrays.asList(cmdAttribs));\n             }\n             if (lines.isEmpty()) {\n                 // unknown problem, throw exception\n                 throw new IOException(\n                         \"Command line did not return any info \" +\n                         \"for command \" + Arrays.asList(cmdAttribs));\n             }\n             return lines;\n             \n         } catch (final InterruptedException ex) {\n             throw new IOExceptionWithCause(\n                     \"Command line threw an InterruptedException \" +\n                     \"for command \" + Arrays.asList(cmdAttribs) + \" timeout\u003d\" + timeout, ex);\n         } finally {\n             IOUtils.closeQuietly(in);\n             IOUtils.closeQuietly(out);\n             IOUtils.closeQuietly(err);\n             IOUtils.closeQuietly(inr);\n             if (proc !\u003d null) {\n                 proc.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "30b68e2d9297d0bb98bdfe5f976fea1106d35363": {
      "type": "Ybodychange",
      "commitMessage": "Javadoc\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1468707 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1366162940000,
      "commitName": "30b68e2d9297d0bb98bdfe5f976fea1106d35363",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": 1354308699000,
      "commitNameOld": "6aa00766b9103d75c763160280429af8e1f0549e",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 137.2,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,63 @@\n     List\u003cString\u003e performCommand(final String[] cmdAttribs, final int max, final long timeout) throws IOException {\n         // this method does what it can to avoid the \u0027Too many open files\u0027 error\n         // based on trial and error and these links:\n         // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4784692\n         // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4801027\n         // http://forum.java.sun.com/thread.jspa?threadID\u003d533029\u0026messageID\u003d2572018\n         // however, its still not perfect as the JDK support is so poor\n-        // (see commond-exec or ant for a better multi-threaded multi-os solution)\n+        // (see commons-exec or Ant for a better multi-threaded multi-os solution)\n         \n         final List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e(20);\n         Process proc \u003d null;\n         InputStream in \u003d null;\n         OutputStream out \u003d null;\n         InputStream err \u003d null;\n         BufferedReader inr \u003d null;\n         try {\n \n             final Thread monitor \u003d ThreadMonitor.start(timeout);\n \n             proc \u003d openProcess(cmdAttribs);\n             in \u003d proc.getInputStream();\n             out \u003d proc.getOutputStream();\n             err \u003d proc.getErrorStream();\n             inr \u003d new BufferedReader(new InputStreamReader(in));\n             String line \u003d inr.readLine();\n             while (line !\u003d null \u0026\u0026 lines.size() \u003c max) {\n                 line \u003d line.toLowerCase(Locale.ENGLISH).trim();\n                 lines.add(line);\n                 line \u003d inr.readLine();\n             }\n             \n             proc.waitFor();\n \n             ThreadMonitor.stop(monitor);\n \n             if (proc.exitValue() !\u003d 0) {\n                 // os command problem, throw exception\n                 throw new IOException(\n                         \"Command line returned OS error code \u0027\" + proc.exitValue() +\n                         \"\u0027 for command \" + Arrays.asList(cmdAttribs));\n             }\n             if (lines.isEmpty()) {\n                 // unknown problem, throw exception\n                 throw new IOException(\n                         \"Command line did not return any info \" +\n                         \"for command \" + Arrays.asList(cmdAttribs));\n             }\n             return lines;\n             \n         } catch (final InterruptedException ex) {\n             throw new IOExceptionWithCause(\n                     \"Command line threw an InterruptedException \" +\n                     \"for command \" + Arrays.asList(cmdAttribs) + \" timeout\u003d\" + timeout, ex);\n         } finally {\n             IOUtils.closeQuietly(in);\n             IOUtils.closeQuietly(out);\n             IOUtils.closeQuietly(err);\n             IOUtils.closeQuietly(inr);\n             if (proc !\u003d null) {\n                 proc.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6aa00766b9103d75c763160280429af8e1f0549e": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1354308699000,
      "commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
      "commitAuthor": "Gary D. Gregory",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1354308699000,
          "commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": 1332449729000,
          "commitNameOld": "cf5c462807a137b823a3155dfe9800b3cbf2303d",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 253.0,
          "commitsBetweenForRepo": 182,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,63 +1,63 @@\n-    List\u003cString\u003e performCommand(String[] cmdAttribs, int max, long timeout) throws IOException {\n+    List\u003cString\u003e performCommand(final String[] cmdAttribs, final int max, final long timeout) throws IOException {\n         // this method does what it can to avoid the \u0027Too many open files\u0027 error\n         // based on trial and error and these links:\n         // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4784692\n         // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4801027\n         // http://forum.java.sun.com/thread.jspa?threadID\u003d533029\u0026messageID\u003d2572018\n         // however, its still not perfect as the JDK support is so poor\n         // (see commond-exec or ant for a better multi-threaded multi-os solution)\n         \n-        List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e(20);\n+        final List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e(20);\n         Process proc \u003d null;\n         InputStream in \u003d null;\n         OutputStream out \u003d null;\n         InputStream err \u003d null;\n         BufferedReader inr \u003d null;\n         try {\n \n-            Thread monitor \u003d ThreadMonitor.start(timeout);\n+            final Thread monitor \u003d ThreadMonitor.start(timeout);\n \n             proc \u003d openProcess(cmdAttribs);\n             in \u003d proc.getInputStream();\n             out \u003d proc.getOutputStream();\n             err \u003d proc.getErrorStream();\n             inr \u003d new BufferedReader(new InputStreamReader(in));\n             String line \u003d inr.readLine();\n             while (line !\u003d null \u0026\u0026 lines.size() \u003c max) {\n                 line \u003d line.toLowerCase(Locale.ENGLISH).trim();\n                 lines.add(line);\n                 line \u003d inr.readLine();\n             }\n             \n             proc.waitFor();\n \n             ThreadMonitor.stop(monitor);\n \n             if (proc.exitValue() !\u003d 0) {\n                 // os command problem, throw exception\n                 throw new IOException(\n                         \"Command line returned OS error code \u0027\" + proc.exitValue() +\n                         \"\u0027 for command \" + Arrays.asList(cmdAttribs));\n             }\n             if (lines.isEmpty()) {\n                 // unknown problem, throw exception\n                 throw new IOException(\n                         \"Command line did not return any info \" +\n                         \"for command \" + Arrays.asList(cmdAttribs));\n             }\n             return lines;\n             \n-        } catch (InterruptedException ex) {\n+        } catch (final InterruptedException ex) {\n             throw new IOExceptionWithCause(\n                     \"Command line threw an InterruptedException \" +\n                     \"for command \" + Arrays.asList(cmdAttribs) + \" timeout\u003d\" + timeout, ex);\n         } finally {\n             IOUtils.closeQuietly(in);\n             IOUtils.closeQuietly(out);\n             IOUtils.closeQuietly(err);\n             IOUtils.closeQuietly(inr);\n             if (proc !\u003d null) {\n                 proc.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1354308699000,
          "commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": 1332449729000,
          "commitNameOld": "cf5c462807a137b823a3155dfe9800b3cbf2303d",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 253.0,
          "commitsBetweenForRepo": 182,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,63 +1,63 @@\n-    List\u003cString\u003e performCommand(String[] cmdAttribs, int max, long timeout) throws IOException {\n+    List\u003cString\u003e performCommand(final String[] cmdAttribs, final int max, final long timeout) throws IOException {\n         // this method does what it can to avoid the \u0027Too many open files\u0027 error\n         // based on trial and error and these links:\n         // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4784692\n         // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4801027\n         // http://forum.java.sun.com/thread.jspa?threadID\u003d533029\u0026messageID\u003d2572018\n         // however, its still not perfect as the JDK support is so poor\n         // (see commond-exec or ant for a better multi-threaded multi-os solution)\n         \n-        List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e(20);\n+        final List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e(20);\n         Process proc \u003d null;\n         InputStream in \u003d null;\n         OutputStream out \u003d null;\n         InputStream err \u003d null;\n         BufferedReader inr \u003d null;\n         try {\n \n-            Thread monitor \u003d ThreadMonitor.start(timeout);\n+            final Thread monitor \u003d ThreadMonitor.start(timeout);\n \n             proc \u003d openProcess(cmdAttribs);\n             in \u003d proc.getInputStream();\n             out \u003d proc.getOutputStream();\n             err \u003d proc.getErrorStream();\n             inr \u003d new BufferedReader(new InputStreamReader(in));\n             String line \u003d inr.readLine();\n             while (line !\u003d null \u0026\u0026 lines.size() \u003c max) {\n                 line \u003d line.toLowerCase(Locale.ENGLISH).trim();\n                 lines.add(line);\n                 line \u003d inr.readLine();\n             }\n             \n             proc.waitFor();\n \n             ThreadMonitor.stop(monitor);\n \n             if (proc.exitValue() !\u003d 0) {\n                 // os command problem, throw exception\n                 throw new IOException(\n                         \"Command line returned OS error code \u0027\" + proc.exitValue() +\n                         \"\u0027 for command \" + Arrays.asList(cmdAttribs));\n             }\n             if (lines.isEmpty()) {\n                 // unknown problem, throw exception\n                 throw new IOException(\n                         \"Command line did not return any info \" +\n                         \"for command \" + Arrays.asList(cmdAttribs));\n             }\n             return lines;\n             \n-        } catch (InterruptedException ex) {\n+        } catch (final InterruptedException ex) {\n             throw new IOExceptionWithCause(\n                     \"Command line threw an InterruptedException \" +\n                     \"for command \" + Arrays.asList(cmdAttribs) + \" timeout\u003d\" + timeout, ex);\n         } finally {\n             IOUtils.closeQuietly(in);\n             IOUtils.closeQuietly(out);\n             IOUtils.closeQuietly(err);\n             IOUtils.closeQuietly(inr);\n             if (proc !\u003d null) {\n                 proc.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "33e9a899dcc38a2fdcf42432fb82024d323b0c6d": {
      "type": "Ybodychange",
      "commitMessage": "Use Collection.isEmpty() instead of size() \u003d\u003d 0\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1199986 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1320875024000,
      "commitName": "33e9a899dcc38a2fdcf42432fb82024d323b0c6d",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": 1315773822000,
      "commitNameOld": "d8fe96fbe09ae5f7d644c55c4d61aad6132870fa",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 59.04,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,63 @@\n     List\u003cString\u003e performCommand(String[] cmdAttribs, int max, long timeout) throws IOException {\n         // this method does what it can to avoid the \u0027Too many open files\u0027 error\n         // based on trial and error and these links:\n         // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4784692\n         // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4801027\n         // http://forum.java.sun.com/thread.jspa?threadID\u003d533029\u0026messageID\u003d2572018\n         // however, its still not perfect as the JDK support is so poor\n         // (see commond-exec or ant for a better multi-threaded multi-os solution)\n         \n         List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e(20);\n         Process proc \u003d null;\n         InputStream in \u003d null;\n         OutputStream out \u003d null;\n         InputStream err \u003d null;\n         BufferedReader inr \u003d null;\n         try {\n \n             Thread monitor \u003d ThreadMonitor.start(timeout);\n \n             proc \u003d openProcess(cmdAttribs);\n             in \u003d proc.getInputStream();\n             out \u003d proc.getOutputStream();\n             err \u003d proc.getErrorStream();\n             inr \u003d new BufferedReader(new InputStreamReader(in));\n             String line \u003d inr.readLine();\n             while (line !\u003d null \u0026\u0026 lines.size() \u003c max) {\n                 line \u003d line.toLowerCase(Locale.ENGLISH).trim();\n                 lines.add(line);\n                 line \u003d inr.readLine();\n             }\n             \n             proc.waitFor();\n \n             ThreadMonitor.stop(monitor);\n \n             if (proc.exitValue() !\u003d 0) {\n                 // os command problem, throw exception\n                 throw new IOException(\n                         \"Command line returned OS error code \u0027\" + proc.exitValue() +\n                         \"\u0027 for command \" + Arrays.asList(cmdAttribs));\n             }\n-            if (lines.size() \u003d\u003d 0) {\n+            if (lines.isEmpty()) {\n                 // unknown problem, throw exception\n                 throw new IOException(\n                         \"Command line did not return any info \" +\n                         \"for command \" + Arrays.asList(cmdAttribs));\n             }\n             return lines;\n             \n         } catch (InterruptedException ex) {\n             throw new IOExceptionWithCause(\n                     \"Command line threw an InterruptedException \" +\n                     \"for command \" + Arrays.asList(cmdAttribs) + \" timeout\u003d\" + timeout, ex);\n         } finally {\n             IOUtils.closeQuietly(in);\n             IOUtils.closeQuietly(out);\n             IOUtils.closeQuietly(err);\n             IOUtils.closeQuietly(inr);\n             if (proc !\u003d null) {\n                 proc.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a": {
      "type": "Yfilerename",
      "commitMessage": "Build changes - re-organize to standard m2 layout, remove useless JIRA report and fix some Ant issues\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1004358 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1286218476000,
      "commitName": "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": 1286214840000,
      "commitNameOld": "19f48eb1711427a43a5e10c84bbbf1218a08bdd2",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/io/FileSystemUtils.java",
        "newPath": "src/main/java/org/apache/commons/io/FileSystemUtils.java"
      }
    },
    "0e7c3a88a727f307e2d38701f8117ae59e019e93": {
      "type": "Ybodychange",
      "commitMessage": "Include \u0027cause\u0027 in re-thrown exceptions\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1002698 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1285775331000,
      "commitName": "0e7c3a88a727f307e2d38701f8117ae59e019e93",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": 1285775028000,
      "commitNameOld": "ab42367cc639fa3b18786d13afdc17a3394f229f",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,63 @@\n     List\u003cString\u003e performCommand(String[] cmdAttribs, int max, long timeout) throws IOException {\n         // this method does what it can to avoid the \u0027Too many open files\u0027 error\n         // based on trial and error and these links:\n         // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4784692\n         // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4801027\n         // http://forum.java.sun.com/thread.jspa?threadID\u003d533029\u0026messageID\u003d2572018\n         // however, its still not perfect as the JDK support is so poor\n         // (see commond-exec or ant for a better multi-threaded multi-os solution)\n         \n         List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e(20);\n         Process proc \u003d null;\n         InputStream in \u003d null;\n         OutputStream out \u003d null;\n         InputStream err \u003d null;\n         BufferedReader inr \u003d null;\n         try {\n \n             Thread monitor \u003d ThreadMonitor.start(timeout);\n \n             proc \u003d openProcess(cmdAttribs);\n             in \u003d proc.getInputStream();\n             out \u003d proc.getOutputStream();\n             err \u003d proc.getErrorStream();\n             inr \u003d new BufferedReader(new InputStreamReader(in));\n             String line \u003d inr.readLine();\n             while (line !\u003d null \u0026\u0026 lines.size() \u003c max) {\n                 line \u003d line.toLowerCase(Locale.ENGLISH).trim();\n                 lines.add(line);\n                 line \u003d inr.readLine();\n             }\n             \n             proc.waitFor();\n \n             ThreadMonitor.stop(monitor);\n \n             if (proc.exitValue() !\u003d 0) {\n                 // os command problem, throw exception\n                 throw new IOException(\n                         \"Command line returned OS error code \u0027\" + proc.exitValue() +\n                         \"\u0027 for command \" + Arrays.asList(cmdAttribs));\n             }\n             if (lines.size() \u003d\u003d 0) {\n                 // unknown problem, throw exception\n                 throw new IOException(\n                         \"Command line did not return any info \" +\n                         \"for command \" + Arrays.asList(cmdAttribs));\n             }\n             return lines;\n             \n         } catch (InterruptedException ex) {\n-            throw new IOException(\n-                    \"Command line threw an InterruptedException \u0027\" + ex.getMessage() +\n-                    \"\u0027 for command \" + Arrays.asList(cmdAttribs));\n+            throw new IOExceptionWithCause(\n+                    \"Command line threw an InterruptedException \" +\n+                    \"for command \" + Arrays.asList(cmdAttribs) + \" timeout\u003d\" + timeout, ex);\n         } finally {\n             IOUtils.closeQuietly(in);\n             IOUtils.closeQuietly(out);\n             IOUtils.closeQuietly(err);\n             IOUtils.closeQuietly(inr);\n             if (proc !\u003d null) {\n                 proc.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ab42367cc639fa3b18786d13afdc17a3394f229f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "IO-185 FileSystemUtils add freeSpaceKb() methods that take a timeout parameter - fixes FileSystemUtils.freeSpaceWindows blocks - reported by Martin Thelian\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1002689 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1285775028000,
      "commitName": "ab42367cc639fa3b18786d13afdc17a3394f229f",
      "commitAuthor": "Niall Pemberton",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "IO-185 FileSystemUtils add freeSpaceKb() methods that take a timeout parameter - fixes FileSystemUtils.freeSpaceWindows blocks - reported by Martin Thelian\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1002689 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1285775028000,
          "commitName": "ab42367cc639fa3b18786d13afdc17a3394f229f",
          "commitAuthor": "Niall Pemberton",
          "commitDateOld": 1267841266000,
          "commitNameOld": "1282c294a11e637b3830d84ee87a4b3bcf823bc6",
          "commitAuthorOld": "Sebastian Bazley",
          "daysBetweenCommits": 207.57,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,63 @@\n-    List\u003cString\u003e performCommand(String[] cmdAttribs, int max) throws IOException {\n+    List\u003cString\u003e performCommand(String[] cmdAttribs, int max, long timeout) throws IOException {\n         // this method does what it can to avoid the \u0027Too many open files\u0027 error\n         // based on trial and error and these links:\n         // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4784692\n         // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4801027\n         // http://forum.java.sun.com/thread.jspa?threadID\u003d533029\u0026messageID\u003d2572018\n         // however, its still not perfect as the JDK support is so poor\n         // (see commond-exec or ant for a better multi-threaded multi-os solution)\n         \n         List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e(20);\n         Process proc \u003d null;\n         InputStream in \u003d null;\n         OutputStream out \u003d null;\n         InputStream err \u003d null;\n         BufferedReader inr \u003d null;\n         try {\n+\n+            Thread monitor \u003d ThreadMonitor.start(timeout);\n+\n             proc \u003d openProcess(cmdAttribs);\n             in \u003d proc.getInputStream();\n             out \u003d proc.getOutputStream();\n             err \u003d proc.getErrorStream();\n             inr \u003d new BufferedReader(new InputStreamReader(in));\n             String line \u003d inr.readLine();\n             while (line !\u003d null \u0026\u0026 lines.size() \u003c max) {\n                 line \u003d line.toLowerCase(Locale.ENGLISH).trim();\n                 lines.add(line);\n                 line \u003d inr.readLine();\n             }\n             \n             proc.waitFor();\n+\n+            ThreadMonitor.stop(monitor);\n+\n             if (proc.exitValue() !\u003d 0) {\n                 // os command problem, throw exception\n                 throw new IOException(\n                         \"Command line returned OS error code \u0027\" + proc.exitValue() +\n                         \"\u0027 for command \" + Arrays.asList(cmdAttribs));\n             }\n             if (lines.size() \u003d\u003d 0) {\n                 // unknown problem, throw exception\n                 throw new IOException(\n                         \"Command line did not return any info \" +\n                         \"for command \" + Arrays.asList(cmdAttribs));\n             }\n             return lines;\n             \n         } catch (InterruptedException ex) {\n             throw new IOException(\n                     \"Command line threw an InterruptedException \u0027\" + ex.getMessage() +\n                     \"\u0027 for command \" + Arrays.asList(cmdAttribs));\n         } finally {\n             IOUtils.closeQuietly(in);\n             IOUtils.closeQuietly(out);\n             IOUtils.closeQuietly(err);\n             IOUtils.closeQuietly(inr);\n             if (proc !\u003d null) {\n                 proc.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ybodychange",
          "commitMessage": "IO-185 FileSystemUtils add freeSpaceKb() methods that take a timeout parameter - fixes FileSystemUtils.freeSpaceWindows blocks - reported by Martin Thelian\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1002689 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1285775028000,
          "commitName": "ab42367cc639fa3b18786d13afdc17a3394f229f",
          "commitAuthor": "Niall Pemberton",
          "commitDateOld": 1267841266000,
          "commitNameOld": "1282c294a11e637b3830d84ee87a4b3bcf823bc6",
          "commitAuthorOld": "Sebastian Bazley",
          "daysBetweenCommits": 207.57,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,63 @@\n-    List\u003cString\u003e performCommand(String[] cmdAttribs, int max) throws IOException {\n+    List\u003cString\u003e performCommand(String[] cmdAttribs, int max, long timeout) throws IOException {\n         // this method does what it can to avoid the \u0027Too many open files\u0027 error\n         // based on trial and error and these links:\n         // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4784692\n         // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4801027\n         // http://forum.java.sun.com/thread.jspa?threadID\u003d533029\u0026messageID\u003d2572018\n         // however, its still not perfect as the JDK support is so poor\n         // (see commond-exec or ant for a better multi-threaded multi-os solution)\n         \n         List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e(20);\n         Process proc \u003d null;\n         InputStream in \u003d null;\n         OutputStream out \u003d null;\n         InputStream err \u003d null;\n         BufferedReader inr \u003d null;\n         try {\n+\n+            Thread monitor \u003d ThreadMonitor.start(timeout);\n+\n             proc \u003d openProcess(cmdAttribs);\n             in \u003d proc.getInputStream();\n             out \u003d proc.getOutputStream();\n             err \u003d proc.getErrorStream();\n             inr \u003d new BufferedReader(new InputStreamReader(in));\n             String line \u003d inr.readLine();\n             while (line !\u003d null \u0026\u0026 lines.size() \u003c max) {\n                 line \u003d line.toLowerCase(Locale.ENGLISH).trim();\n                 lines.add(line);\n                 line \u003d inr.readLine();\n             }\n             \n             proc.waitFor();\n+\n+            ThreadMonitor.stop(monitor);\n+\n             if (proc.exitValue() !\u003d 0) {\n                 // os command problem, throw exception\n                 throw new IOException(\n                         \"Command line returned OS error code \u0027\" + proc.exitValue() +\n                         \"\u0027 for command \" + Arrays.asList(cmdAttribs));\n             }\n             if (lines.size() \u003d\u003d 0) {\n                 // unknown problem, throw exception\n                 throw new IOException(\n                         \"Command line did not return any info \" +\n                         \"for command \" + Arrays.asList(cmdAttribs));\n             }\n             return lines;\n             \n         } catch (InterruptedException ex) {\n             throw new IOException(\n                     \"Command line threw an InterruptedException \u0027\" + ex.getMessage() +\n                     \"\u0027 for command \" + Arrays.asList(cmdAttribs));\n         } finally {\n             IOUtils.closeQuietly(in);\n             IOUtils.closeQuietly(out);\n             IOUtils.closeQuietly(err);\n             IOUtils.closeQuietly(inr);\n             if (proc !\u003d null) {\n                 proc.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "ce90015bdc3614f88fbe55a697731a2f5b052ca3": {
      "type": "Ybodychange",
      "commitMessage": "IO-167 Fix case-insensitive string handling - thanks to Benjamin Bentmann for the patch\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@661646 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1212145567000,
      "commitName": "ce90015bdc3614f88fbe55a697731a2f5b052ca3",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": 1211635390000,
      "commitNameOld": "91509112bb42d52eb4cef40f2dee16a3633b446f",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 5.9,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n     List\u003cString\u003e performCommand(String[] cmdAttribs, int max) throws IOException {\n         // this method does what it can to avoid the \u0027Too many open files\u0027 error\n         // based on trial and error and these links:\n         // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4784692\n         // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4801027\n         // http://forum.java.sun.com/thread.jspa?threadID\u003d533029\u0026messageID\u003d2572018\n         // however, its still not perfect as the JDK support is so poor\n         // (see commond-exec or ant for a better multi-threaded multi-os solution)\n         \n         List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e(20);\n         Process proc \u003d null;\n         InputStream in \u003d null;\n         OutputStream out \u003d null;\n         InputStream err \u003d null;\n         BufferedReader inr \u003d null;\n         try {\n             proc \u003d openProcess(cmdAttribs);\n             in \u003d proc.getInputStream();\n             out \u003d proc.getOutputStream();\n             err \u003d proc.getErrorStream();\n             inr \u003d new BufferedReader(new InputStreamReader(in));\n             String line \u003d inr.readLine();\n             while (line !\u003d null \u0026\u0026 lines.size() \u003c max) {\n-                line \u003d line.toLowerCase().trim();\n+                line \u003d line.toLowerCase(Locale.ENGLISH).trim();\n                 lines.add(line);\n                 line \u003d inr.readLine();\n             }\n             \n             proc.waitFor();\n             if (proc.exitValue() !\u003d 0) {\n                 // os command problem, throw exception\n                 throw new IOException(\n                         \"Command line returned OS error code \u0027\" + proc.exitValue() +\n                         \"\u0027 for command \" + Arrays.asList(cmdAttribs));\n             }\n             if (lines.size() \u003d\u003d 0) {\n                 // unknown problem, throw exception\n                 throw new IOException(\n                         \"Command line did not return any info \" +\n                         \"for command \" + Arrays.asList(cmdAttribs));\n             }\n             return lines;\n             \n         } catch (InterruptedException ex) {\n             throw new IOException(\n                     \"Command line threw an InterruptedException \u0027\" + ex.getMessage() +\n                     \"\u0027 for command \" + Arrays.asList(cmdAttribs));\n         } finally {\n             IOUtils.closeQuietly(in);\n             IOUtils.closeQuietly(out);\n             IOUtils.closeQuietly(err);\n             IOUtils.closeQuietly(inr);\n             if (proc !\u003d null) {\n                 proc.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a74a5a0c6ff41a4ca0a08caf740ebce1dc3c6d10": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "IO-140 JDK 1.5 changes: Use generics\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@619103 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1202324477000,
      "commitName": "a74a5a0c6ff41a4ca0a08caf740ebce1dc3c6d10",
      "commitAuthor": "Niall Pemberton",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "IO-140 JDK 1.5 changes: Use generics\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@619103 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1202324477000,
          "commitName": "a74a5a0c6ff41a4ca0a08caf740ebce1dc3c6d10",
          "commitAuthor": "Niall Pemberton",
          "commitDateOld": 1160222185000,
          "commitNameOld": "b4b470096a39bfa51d33782f442505383ecc5e79",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 487.3,
          "commitsBetweenForRepo": 242,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,57 @@\n-    List performCommand(String[] cmdAttribs, int max) throws IOException {\n+    List\u003cString\u003e performCommand(String[] cmdAttribs, int max) throws IOException {\n         // this method does what it can to avoid the \u0027Too many open files\u0027 error\n         // based on trial and error and these links:\n         // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4784692\n         // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4801027\n         // http://forum.java.sun.com/thread.jspa?threadID\u003d533029\u0026messageID\u003d2572018\n         // however, its still not perfect as the JDK support is so poor\n         // (see commond-exec or ant for a better multi-threaded multi-os solution)\n         \n-        List lines \u003d new ArrayList(20);\n+        List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e(20);\n         Process proc \u003d null;\n         InputStream in \u003d null;\n         OutputStream out \u003d null;\n         InputStream err \u003d null;\n         BufferedReader inr \u003d null;\n         try {\n             proc \u003d openProcess(cmdAttribs);\n             in \u003d proc.getInputStream();\n             out \u003d proc.getOutputStream();\n             err \u003d proc.getErrorStream();\n             inr \u003d new BufferedReader(new InputStreamReader(in));\n             String line \u003d inr.readLine();\n             while (line !\u003d null \u0026\u0026 lines.size() \u003c max) {\n                 line \u003d line.toLowerCase().trim();\n                 lines.add(line);\n                 line \u003d inr.readLine();\n             }\n             \n             proc.waitFor();\n             if (proc.exitValue() !\u003d 0) {\n                 // os command problem, throw exception\n                 throw new IOException(\n                         \"Command line returned OS error code \u0027\" + proc.exitValue() +\n                         \"\u0027 for command \" + Arrays.asList(cmdAttribs));\n             }\n             if (lines.size() \u003d\u003d 0) {\n                 // unknown problem, throw exception\n                 throw new IOException(\n                         \"Command line did not return any info \" +\n                         \"for command \" + Arrays.asList(cmdAttribs));\n             }\n             return lines;\n             \n         } catch (InterruptedException ex) {\n             throw new IOException(\n                     \"Command line threw an InterruptedException \u0027\" + ex.getMessage() +\n                     \"\u0027 for command \" + Arrays.asList(cmdAttribs));\n         } finally {\n             IOUtils.closeQuietly(in);\n             IOUtils.closeQuietly(out);\n             IOUtils.closeQuietly(err);\n             IOUtils.closeQuietly(inr);\n             if (proc !\u003d null) {\n                 proc.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ybodychange",
          "commitMessage": "IO-140 JDK 1.5 changes: Use generics\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@619103 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1202324477000,
          "commitName": "a74a5a0c6ff41a4ca0a08caf740ebce1dc3c6d10",
          "commitAuthor": "Niall Pemberton",
          "commitDateOld": 1160222185000,
          "commitNameOld": "b4b470096a39bfa51d33782f442505383ecc5e79",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 487.3,
          "commitsBetweenForRepo": 242,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,57 @@\n-    List performCommand(String[] cmdAttribs, int max) throws IOException {\n+    List\u003cString\u003e performCommand(String[] cmdAttribs, int max) throws IOException {\n         // this method does what it can to avoid the \u0027Too many open files\u0027 error\n         // based on trial and error and these links:\n         // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4784692\n         // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4801027\n         // http://forum.java.sun.com/thread.jspa?threadID\u003d533029\u0026messageID\u003d2572018\n         // however, its still not perfect as the JDK support is so poor\n         // (see commond-exec or ant for a better multi-threaded multi-os solution)\n         \n-        List lines \u003d new ArrayList(20);\n+        List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e(20);\n         Process proc \u003d null;\n         InputStream in \u003d null;\n         OutputStream out \u003d null;\n         InputStream err \u003d null;\n         BufferedReader inr \u003d null;\n         try {\n             proc \u003d openProcess(cmdAttribs);\n             in \u003d proc.getInputStream();\n             out \u003d proc.getOutputStream();\n             err \u003d proc.getErrorStream();\n             inr \u003d new BufferedReader(new InputStreamReader(in));\n             String line \u003d inr.readLine();\n             while (line !\u003d null \u0026\u0026 lines.size() \u003c max) {\n                 line \u003d line.toLowerCase().trim();\n                 lines.add(line);\n                 line \u003d inr.readLine();\n             }\n             \n             proc.waitFor();\n             if (proc.exitValue() !\u003d 0) {\n                 // os command problem, throw exception\n                 throw new IOException(\n                         \"Command line returned OS error code \u0027\" + proc.exitValue() +\n                         \"\u0027 for command \" + Arrays.asList(cmdAttribs));\n             }\n             if (lines.size() \u003d\u003d 0) {\n                 // unknown problem, throw exception\n                 throw new IOException(\n                         \"Command line did not return any info \" +\n                         \"for command \" + Arrays.asList(cmdAttribs));\n             }\n             return lines;\n             \n         } catch (InterruptedException ex) {\n             throw new IOException(\n                     \"Command line threw an InterruptedException \u0027\" + ex.getMessage() +\n                     \"\u0027 for command \" + Arrays.asList(cmdAttribs));\n         } finally {\n             IOUtils.closeQuietly(in);\n             IOUtils.closeQuietly(out);\n             IOUtils.closeQuietly(err);\n             IOUtils.closeQuietly(inr);\n             if (proc !\u003d null) {\n                 proc.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "b4b470096a39bfa51d33782f442505383ecc5e79": {
      "type": "Ybodychange",
      "commitMessage": "IO-93 - FileSystemUtils - Fixed resource leak leading to \u0027Too many open files\u0027 error\n- Previously did not destroy Process instances (as JDK Javadoc is so poor)\n- http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4801027\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@453889 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1160222185000,
      "commitName": "b4b470096a39bfa51d33782f442505383ecc5e79",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": 1158898488000,
      "commitNameOld": "aa415ec21d7ea24e7c18f18f567ec0ed7d95187e",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 15.32,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,57 @@\n     List performCommand(String[] cmdAttribs, int max) throws IOException {\n-        List lines \u003d new ArrayList();\n-        BufferedReader in \u003d null;\n+        // this method does what it can to avoid the \u0027Too many open files\u0027 error\n+        // based on trial and error and these links:\n+        // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4784692\n+        // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4801027\n+        // http://forum.java.sun.com/thread.jspa?threadID\u003d533029\u0026messageID\u003d2572018\n+        // however, its still not perfect as the JDK support is so poor\n+        // (see commond-exec or ant for a better multi-threaded multi-os solution)\n+        \n+        List lines \u003d new ArrayList(20);\n+        Process proc \u003d null;\n+        InputStream in \u003d null;\n+        OutputStream out \u003d null;\n+        InputStream err \u003d null;\n+        BufferedReader inr \u003d null;\n         try {\n-            Process proc \u003d openProcess(cmdAttribs);\n-            in \u003d openProcessStream(proc);\n-            String line \u003d in.readLine();\n+            proc \u003d openProcess(cmdAttribs);\n+            in \u003d proc.getInputStream();\n+            out \u003d proc.getOutputStream();\n+            err \u003d proc.getErrorStream();\n+            inr \u003d new BufferedReader(new InputStreamReader(in));\n+            String line \u003d inr.readLine();\n             while (line !\u003d null \u0026\u0026 lines.size() \u003c max) {\n                 line \u003d line.toLowerCase().trim();\n                 lines.add(line);\n-                line \u003d in.readLine();\n+                line \u003d inr.readLine();\n             }\n             \n             proc.waitFor();\n             if (proc.exitValue() !\u003d 0) {\n                 // os command problem, throw exception\n                 throw new IOException(\n                         \"Command line returned OS error code \u0027\" + proc.exitValue() +\n                         \"\u0027 for command \" + Arrays.asList(cmdAttribs));\n             }\n             if (lines.size() \u003d\u003d 0) {\n                 // unknown problem, throw exception\n                 throw new IOException(\n                         \"Command line did not return any info \" +\n                         \"for command \" + Arrays.asList(cmdAttribs));\n             }\n             return lines;\n             \n         } catch (InterruptedException ex) {\n             throw new IOException(\n                     \"Command line threw an InterruptedException \u0027\" + ex.getMessage() +\n                     \"\u0027 for command \" + Arrays.asList(cmdAttribs));\n         } finally {\n             IOUtils.closeQuietly(in);\n+            IOUtils.closeQuietly(out);\n+            IOUtils.closeQuietly(err);\n+            IOUtils.closeQuietly(inr);\n+            if (proc !\u003d null) {\n+                proc.destroy();\n+            }\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0a03609ddc6380dd7c9053eb8cb04072baa476a1": {
      "type": "Yintroduced",
      "commitMessage": "IO-90 - Fix freeSpace to avoid infinite loops and other errors\nincludes some code from Thomas Ledoux\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@437031 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1156550888000,
      "commitName": "0a03609ddc6380dd7c9053eb8cb04072baa476a1",
      "commitAuthor": "Stephen Colebourne"
    }
  }
}