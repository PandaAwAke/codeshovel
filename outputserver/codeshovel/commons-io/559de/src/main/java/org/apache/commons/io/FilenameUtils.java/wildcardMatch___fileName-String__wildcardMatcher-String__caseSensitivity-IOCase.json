{
  "origin": "codeshovel",
  "repositoryName": "commons-io",
  "repositoryPath": "/repos/commons-io/.git",
  "startCommitName": "559de2c461e94ab636c959149c775bb27111fb48",
  "sourceFileName": "FilenameUtils.java",
  "functionName": "wildcardMatch",
  "functionId": "wildcardMatch___fileName-String__wildcardMatcher-String__caseSensitivity-IOCase",
  "sourceFilePath": "src/main/java/org/apache/commons/io/FilenameUtils.java",
  "functionStartLine": 1374,
  "functionEndLine": 1454,
  "changeHistory": [
    "e4e03ef4c091f5a35da0d97a6a35224197b8be02",
    "51f13c846dae950e1d27693c9e23c1063945210f",
    "63eba2740e08ede085c78b131bc1a9c3f1d5ddb1",
    "6aa00766b9103d75c763160280429af8e1f0549e",
    "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a",
    "d062bd01f7e9e9194ae0fd9dc01683e7c934c315",
    "5c13fa7579650c2cbcab61c6b18e509951f640aa",
    "a74a5a0c6ff41a4ca0a08caf740ebce1dc3c6d10",
    "eff391033a01a092d943db90513412b08bb01525",
    "07751ea95c575cb95a310a23a78dc8cbe85b27a9",
    "49ca3a4241c1847e08921ead7b582419fa53537c",
    "745375d22e427574f1ef1301c8378cd81e85a1fc",
    "1ead1cc51d537700eb72e3fa991e1d68162029d5",
    "84b251bf545c9df52c9c750835a86d5af4bf0387",
    "a09ebfc6c0f84a0aa9a05da04801461d99509ec5",
    "f93f8bebb4fc714a6b60e1d2a4452d6ff6d3df5c",
    "4694d5a982413a12bce4ce0e5570404b8cc7b1f7",
    "fe44f3401d6d2b6c66eca32058de5bcd1f6facb9",
    "400e99de58edf0d46a2b22818c37384a3ec9d122",
    "4fbac940f62e0e5196498c3b7cb4ab909ce1a337"
  ],
  "changeHistoryShort": {
    "e4e03ef4c091f5a35da0d97a6a35224197b8be02": "Ymultichange(Yparameterchange,Ybodychange)",
    "51f13c846dae950e1d27693c9e23c1063945210f": "Ybodychange",
    "63eba2740e08ede085c78b131bc1a9c3f1d5ddb1": "Ybodychange",
    "6aa00766b9103d75c763160280429af8e1f0549e": "Ymultichange(Ybodychange,Yparametermetachange)",
    "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a": "Yfilerename",
    "d062bd01f7e9e9194ae0fd9dc01683e7c934c315": "Ybodychange",
    "5c13fa7579650c2cbcab61c6b18e509951f640aa": "Ybodychange",
    "a74a5a0c6ff41a4ca0a08caf740ebce1dc3c6d10": "Ybodychange",
    "eff391033a01a092d943db90513412b08bb01525": "Ybodychange",
    "07751ea95c575cb95a310a23a78dc8cbe85b27a9": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "49ca3a4241c1847e08921ead7b582419fa53537c": "Ybodychange",
    "745375d22e427574f1ef1301c8378cd81e85a1fc": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "1ead1cc51d537700eb72e3fa991e1d68162029d5": "Ybodychange",
    "84b251bf545c9df52c9c750835a86d5af4bf0387": "Ybodychange",
    "a09ebfc6c0f84a0aa9a05da04801461d99509ec5": "Ymultichange(Yparameterchange,Ybodychange)",
    "f93f8bebb4fc714a6b60e1d2a4452d6ff6d3df5c": "Ymultichange(Yparameterchange,Ybodychange)",
    "4694d5a982413a12bce4ce0e5570404b8cc7b1f7": "Ymultichange(Ymovefromfile,Yrename)",
    "fe44f3401d6d2b6c66eca32058de5bcd1f6facb9": "Yfilerename",
    "400e99de58edf0d46a2b22818c37384a3ec9d122": "Ybodychange",
    "4fbac940f62e0e5196498c3b7cb4ab909ce1a337": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e4e03ef4c091f5a35da0d97a6a35224197b8be02": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Fix param names \u0027filename\u0027 -\u003e \u0027fileName\u0027 in code and Javadocs.",
      "commitDate": 1520524225000,
      "commitName": "e4e03ef4c091f5a35da0d97a6a35224197b8be02",
      "commitAuthor": "Gary Gregory",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Fix param names \u0027filename\u0027 -\u003e \u0027fileName\u0027 in code and Javadocs.",
          "commitDate": 1520524225000,
          "commitName": "e4e03ef4c091f5a35da0d97a6a35224197b8be02",
          "commitAuthor": "Gary Gregory",
          "commitDateOld": 1520523160000,
          "commitNameOld": "90b2e46494eea8461523c55fd9cf3fe3d1bf00ce",
          "commitAuthorOld": "Gary Gregory",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,81 +1,81 @@\n-    public static boolean wildcardMatch(final String filename, final String wildcardMatcher, IOCase caseSensitivity) {\n-        if (filename \u003d\u003d null \u0026\u0026 wildcardMatcher \u003d\u003d null) {\n+    public static boolean wildcardMatch(final String fileName, final String wildcardMatcher, IOCase caseSensitivity) {\n+        if (fileName \u003d\u003d null \u0026\u0026 wildcardMatcher \u003d\u003d null) {\n             return true;\n         }\n-        if (filename \u003d\u003d null || wildcardMatcher \u003d\u003d null) {\n+        if (fileName \u003d\u003d null || wildcardMatcher \u003d\u003d null) {\n             return false;\n         }\n         if (caseSensitivity \u003d\u003d null) {\n             caseSensitivity \u003d IOCase.SENSITIVE;\n         }\n         final String[] wcs \u003d splitOnTokens(wildcardMatcher);\n         boolean anyChars \u003d false;\n         int textIdx \u003d 0;\n         int wcsIdx \u003d 0;\n         final Stack\u003cint[]\u003e backtrack \u003d new Stack\u003c\u003e();\n \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() \u003e 0) {\n                 final int[] array \u003d backtrack.pop();\n                 wcsIdx \u003d array[0];\n                 textIdx \u003d array[1];\n                 anyChars \u003d true;\n             }\n \n             // loop whilst tokens and text left to process\n             while (wcsIdx \u003c wcs.length) {\n \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n-                    if (textIdx \u003e filename.length()) {\n+                    if (textIdx \u003e fileName.length()) {\n                         break;\n                     }\n                     anyChars \u003d false;\n \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars \u003d true;\n                     if (wcsIdx \u003d\u003d wcs.length - 1) {\n-                        textIdx \u003d filename.length();\n+                        textIdx \u003d fileName.length();\n                     }\n \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n-                        textIdx \u003d caseSensitivity.checkIndexOf(filename, textIdx, wcs[wcsIdx]);\n+                        textIdx \u003d caseSensitivity.checkIndexOf(fileName, textIdx, wcs[wcsIdx]);\n                         if (textIdx \u003d\u003d NOT_FOUND) {\n                             // token not found\n                             break;\n                         }\n-                        final int repeat \u003d caseSensitivity.checkIndexOf(filename, textIdx + 1, wcs[wcsIdx]);\n+                        final int repeat \u003d caseSensitivity.checkIndexOf(fileName, textIdx + 1, wcs[wcsIdx]);\n                         if (repeat \u003e\u003d 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n-                        if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n+                        if (!caseSensitivity.checkRegionMatches(fileName, textIdx, wcs[wcsIdx])) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n \n                     // matched text token, move text index to end of matched token\n                     textIdx +\u003d wcs[wcsIdx].length();\n                     anyChars \u003d false;\n                 }\n \n                 wcsIdx++;\n             }\n \n             // full match\n-            if (wcsIdx \u003d\u003d wcs.length \u0026\u0026 textIdx \u003d\u003d filename.length()) {\n+            if (wcsIdx \u003d\u003d wcs.length \u0026\u0026 textIdx \u003d\u003d fileName.length()) {\n                 return true;\n             }\n \n         } while (backtrack.size() \u003e 0);\n \n         return false;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Fix param names \u0027filename\u0027 -\u003e \u0027fileName\u0027 in code and Javadocs.",
          "commitDate": 1520524225000,
          "commitName": "e4e03ef4c091f5a35da0d97a6a35224197b8be02",
          "commitAuthor": "Gary Gregory",
          "commitDateOld": 1520523160000,
          "commitNameOld": "90b2e46494eea8461523c55fd9cf3fe3d1bf00ce",
          "commitAuthorOld": "Gary Gregory",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,81 +1,81 @@\n-    public static boolean wildcardMatch(final String filename, final String wildcardMatcher, IOCase caseSensitivity) {\n-        if (filename \u003d\u003d null \u0026\u0026 wildcardMatcher \u003d\u003d null) {\n+    public static boolean wildcardMatch(final String fileName, final String wildcardMatcher, IOCase caseSensitivity) {\n+        if (fileName \u003d\u003d null \u0026\u0026 wildcardMatcher \u003d\u003d null) {\n             return true;\n         }\n-        if (filename \u003d\u003d null || wildcardMatcher \u003d\u003d null) {\n+        if (fileName \u003d\u003d null || wildcardMatcher \u003d\u003d null) {\n             return false;\n         }\n         if (caseSensitivity \u003d\u003d null) {\n             caseSensitivity \u003d IOCase.SENSITIVE;\n         }\n         final String[] wcs \u003d splitOnTokens(wildcardMatcher);\n         boolean anyChars \u003d false;\n         int textIdx \u003d 0;\n         int wcsIdx \u003d 0;\n         final Stack\u003cint[]\u003e backtrack \u003d new Stack\u003c\u003e();\n \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() \u003e 0) {\n                 final int[] array \u003d backtrack.pop();\n                 wcsIdx \u003d array[0];\n                 textIdx \u003d array[1];\n                 anyChars \u003d true;\n             }\n \n             // loop whilst tokens and text left to process\n             while (wcsIdx \u003c wcs.length) {\n \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n-                    if (textIdx \u003e filename.length()) {\n+                    if (textIdx \u003e fileName.length()) {\n                         break;\n                     }\n                     anyChars \u003d false;\n \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars \u003d true;\n                     if (wcsIdx \u003d\u003d wcs.length - 1) {\n-                        textIdx \u003d filename.length();\n+                        textIdx \u003d fileName.length();\n                     }\n \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n-                        textIdx \u003d caseSensitivity.checkIndexOf(filename, textIdx, wcs[wcsIdx]);\n+                        textIdx \u003d caseSensitivity.checkIndexOf(fileName, textIdx, wcs[wcsIdx]);\n                         if (textIdx \u003d\u003d NOT_FOUND) {\n                             // token not found\n                             break;\n                         }\n-                        final int repeat \u003d caseSensitivity.checkIndexOf(filename, textIdx + 1, wcs[wcsIdx]);\n+                        final int repeat \u003d caseSensitivity.checkIndexOf(fileName, textIdx + 1, wcs[wcsIdx]);\n                         if (repeat \u003e\u003d 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n-                        if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n+                        if (!caseSensitivity.checkRegionMatches(fileName, textIdx, wcs[wcsIdx])) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n \n                     // matched text token, move text index to end of matched token\n                     textIdx +\u003d wcs[wcsIdx].length();\n                     anyChars \u003d false;\n                 }\n \n                 wcsIdx++;\n             }\n \n             // full match\n-            if (wcsIdx \u003d\u003d wcs.length \u0026\u0026 textIdx \u003d\u003d filename.length()) {\n+            if (wcsIdx \u003d\u003d wcs.length \u0026\u0026 textIdx \u003d\u003d fileName.length()) {\n                 return true;\n             }\n \n         } while (backtrack.size() \u003e 0);\n \n         return false;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "51f13c846dae950e1d27693c9e23c1063945210f": {
      "type": "Ybodychange",
      "commitMessage": "Updated for Java7 features\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1746593 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1464881775000,
      "commitName": "51f13c846dae950e1d27693c9e23c1063945210f",
      "commitAuthor": "Kristian Rosenvold",
      "commitDateOld": 1441866902000,
      "commitNameOld": "5d072ef89fbc2532f621a5a0b4d6791cb926a997",
      "commitAuthorOld": "Kristian Rosenvold",
      "daysBetweenCommits": 266.38,
      "commitsBetweenForRepo": 103,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,81 +1,81 @@\n     public static boolean wildcardMatch(final String filename, final String wildcardMatcher, IOCase caseSensitivity) {\n         if (filename \u003d\u003d null \u0026\u0026 wildcardMatcher \u003d\u003d null) {\n             return true;\n         }\n         if (filename \u003d\u003d null || wildcardMatcher \u003d\u003d null) {\n             return false;\n         }\n         if (caseSensitivity \u003d\u003d null) {\n             caseSensitivity \u003d IOCase.SENSITIVE;\n         }\n         final String[] wcs \u003d splitOnTokens(wildcardMatcher);\n         boolean anyChars \u003d false;\n         int textIdx \u003d 0;\n         int wcsIdx \u003d 0;\n-        final Stack\u003cint[]\u003e backtrack \u003d new Stack\u003cint[]\u003e();\n+        final Stack\u003cint[]\u003e backtrack \u003d new Stack\u003c\u003e();\n \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() \u003e 0) {\n                 final int[] array \u003d backtrack.pop();\n                 wcsIdx \u003d array[0];\n                 textIdx \u003d array[1];\n                 anyChars \u003d true;\n             }\n \n             // loop whilst tokens and text left to process\n             while (wcsIdx \u003c wcs.length) {\n \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n                     if (textIdx \u003e filename.length()) {\n                         break;\n                     }\n                     anyChars \u003d false;\n \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars \u003d true;\n                     if (wcsIdx \u003d\u003d wcs.length - 1) {\n                         textIdx \u003d filename.length();\n                     }\n \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n                         textIdx \u003d caseSensitivity.checkIndexOf(filename, textIdx, wcs[wcsIdx]);\n                         if (textIdx \u003d\u003d NOT_FOUND) {\n                             // token not found\n                             break;\n                         }\n                         final int repeat \u003d caseSensitivity.checkIndexOf(filename, textIdx + 1, wcs[wcsIdx]);\n                         if (repeat \u003e\u003d 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n                         if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n \n                     // matched text token, move text index to end of matched token\n                     textIdx +\u003d wcs[wcsIdx].length();\n                     anyChars \u003d false;\n                 }\n \n                 wcsIdx++;\n             }\n \n             // full match\n             if (wcsIdx \u003d\u003d wcs.length \u0026\u0026 textIdx \u003d\u003d filename.length()) {\n                 return true;\n             }\n \n         } while (backtrack.size() \u003e 0);\n \n         return false;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "63eba2740e08ede085c78b131bc1a9c3f1d5ddb1": {
      "type": "Ybodychange",
      "commitMessage": "Refactor magic number into constant.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1586309 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1397138899000,
      "commitName": "63eba2740e08ede085c78b131bc1a9c3f1d5ddb1",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": 1397138331000,
      "commitNameOld": "c4a7e644a5fc43210fa0a563e9087347e3eef67d",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,81 +1,81 @@\n     public static boolean wildcardMatch(final String filename, final String wildcardMatcher, IOCase caseSensitivity) {\n         if (filename \u003d\u003d null \u0026\u0026 wildcardMatcher \u003d\u003d null) {\n             return true;\n         }\n         if (filename \u003d\u003d null || wildcardMatcher \u003d\u003d null) {\n             return false;\n         }\n         if (caseSensitivity \u003d\u003d null) {\n             caseSensitivity \u003d IOCase.SENSITIVE;\n         }\n         final String[] wcs \u003d splitOnTokens(wildcardMatcher);\n         boolean anyChars \u003d false;\n         int textIdx \u003d 0;\n         int wcsIdx \u003d 0;\n         final Stack\u003cint[]\u003e backtrack \u003d new Stack\u003cint[]\u003e();\n \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() \u003e 0) {\n                 final int[] array \u003d backtrack.pop();\n                 wcsIdx \u003d array[0];\n                 textIdx \u003d array[1];\n                 anyChars \u003d true;\n             }\n \n             // loop whilst tokens and text left to process\n             while (wcsIdx \u003c wcs.length) {\n \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n                     if (textIdx \u003e filename.length()) {\n                         break;\n                     }\n                     anyChars \u003d false;\n \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars \u003d true;\n                     if (wcsIdx \u003d\u003d wcs.length - 1) {\n                         textIdx \u003d filename.length();\n                     }\n \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n                         textIdx \u003d caseSensitivity.checkIndexOf(filename, textIdx, wcs[wcsIdx]);\n-                        if (textIdx \u003d\u003d -1) {\n+                        if (textIdx \u003d\u003d NOT_FOUND) {\n                             // token not found\n                             break;\n                         }\n                         final int repeat \u003d caseSensitivity.checkIndexOf(filename, textIdx + 1, wcs[wcsIdx]);\n                         if (repeat \u003e\u003d 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n                         if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n \n                     // matched text token, move text index to end of matched token\n                     textIdx +\u003d wcs[wcsIdx].length();\n                     anyChars \u003d false;\n                 }\n \n                 wcsIdx++;\n             }\n \n             // full match\n             if (wcsIdx \u003d\u003d wcs.length \u0026\u0026 textIdx \u003d\u003d filename.length()) {\n                 return true;\n             }\n \n         } while (backtrack.size() \u003e 0);\n \n         return false;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6aa00766b9103d75c763160280429af8e1f0549e": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1354308699000,
      "commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
      "commitAuthor": "Gary D. Gregory",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1354308699000,
          "commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": 1333120391000,
          "commitNameOld": "3ef56378e33ed5ccc296806e4ad6b8c463e5979f",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 245.24,
          "commitsBetweenForRepo": 143,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,81 +1,81 @@\n-    public static boolean wildcardMatch(String filename, String wildcardMatcher, IOCase caseSensitivity) {\n+    public static boolean wildcardMatch(final String filename, final String wildcardMatcher, IOCase caseSensitivity) {\n         if (filename \u003d\u003d null \u0026\u0026 wildcardMatcher \u003d\u003d null) {\n             return true;\n         }\n         if (filename \u003d\u003d null || wildcardMatcher \u003d\u003d null) {\n             return false;\n         }\n         if (caseSensitivity \u003d\u003d null) {\n             caseSensitivity \u003d IOCase.SENSITIVE;\n         }\n-        String[] wcs \u003d splitOnTokens(wildcardMatcher);\n+        final String[] wcs \u003d splitOnTokens(wildcardMatcher);\n         boolean anyChars \u003d false;\n         int textIdx \u003d 0;\n         int wcsIdx \u003d 0;\n-        Stack\u003cint[]\u003e backtrack \u003d new Stack\u003cint[]\u003e();\n+        final Stack\u003cint[]\u003e backtrack \u003d new Stack\u003cint[]\u003e();\n         \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() \u003e 0) {\n-                int[] array \u003d backtrack.pop();\n+                final int[] array \u003d backtrack.pop();\n                 wcsIdx \u003d array[0];\n                 textIdx \u003d array[1];\n                 anyChars \u003d true;\n             }\n             \n             // loop whilst tokens and text left to process\n             while (wcsIdx \u003c wcs.length) {\n       \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n                     if (textIdx \u003e filename.length()) {\n                         break;\n                     }\n                     anyChars \u003d false;\n                     \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars \u003d true;\n                     if (wcsIdx \u003d\u003d wcs.length - 1) {\n                         textIdx \u003d filename.length();\n                     }\n                     \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n                         textIdx \u003d caseSensitivity.checkIndexOf(filename, textIdx, wcs[wcsIdx]);\n                         if (textIdx \u003d\u003d -1) {\n                             // token not found\n                             break;\n                         }\n-                        int repeat \u003d caseSensitivity.checkIndexOf(filename, textIdx + 1, wcs[wcsIdx]);\n+                        final int repeat \u003d caseSensitivity.checkIndexOf(filename, textIdx + 1, wcs[wcsIdx]);\n                         if (repeat \u003e\u003d 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n                         if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n       \n                     // matched text token, move text index to end of matched token\n                     textIdx +\u003d wcs[wcsIdx].length();\n                     anyChars \u003d false;\n                 }\n       \n                 wcsIdx++;\n             }\n             \n             // full match\n             if (wcsIdx \u003d\u003d wcs.length \u0026\u0026 textIdx \u003d\u003d filename.length()) {\n                 return true;\n             }\n             \n         } while (backtrack.size() \u003e 0);\n   \n         return false;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1354308699000,
          "commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": 1333120391000,
          "commitNameOld": "3ef56378e33ed5ccc296806e4ad6b8c463e5979f",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 245.24,
          "commitsBetweenForRepo": 143,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,81 +1,81 @@\n-    public static boolean wildcardMatch(String filename, String wildcardMatcher, IOCase caseSensitivity) {\n+    public static boolean wildcardMatch(final String filename, final String wildcardMatcher, IOCase caseSensitivity) {\n         if (filename \u003d\u003d null \u0026\u0026 wildcardMatcher \u003d\u003d null) {\n             return true;\n         }\n         if (filename \u003d\u003d null || wildcardMatcher \u003d\u003d null) {\n             return false;\n         }\n         if (caseSensitivity \u003d\u003d null) {\n             caseSensitivity \u003d IOCase.SENSITIVE;\n         }\n-        String[] wcs \u003d splitOnTokens(wildcardMatcher);\n+        final String[] wcs \u003d splitOnTokens(wildcardMatcher);\n         boolean anyChars \u003d false;\n         int textIdx \u003d 0;\n         int wcsIdx \u003d 0;\n-        Stack\u003cint[]\u003e backtrack \u003d new Stack\u003cint[]\u003e();\n+        final Stack\u003cint[]\u003e backtrack \u003d new Stack\u003cint[]\u003e();\n         \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() \u003e 0) {\n-                int[] array \u003d backtrack.pop();\n+                final int[] array \u003d backtrack.pop();\n                 wcsIdx \u003d array[0];\n                 textIdx \u003d array[1];\n                 anyChars \u003d true;\n             }\n             \n             // loop whilst tokens and text left to process\n             while (wcsIdx \u003c wcs.length) {\n       \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n                     if (textIdx \u003e filename.length()) {\n                         break;\n                     }\n                     anyChars \u003d false;\n                     \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars \u003d true;\n                     if (wcsIdx \u003d\u003d wcs.length - 1) {\n                         textIdx \u003d filename.length();\n                     }\n                     \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n                         textIdx \u003d caseSensitivity.checkIndexOf(filename, textIdx, wcs[wcsIdx]);\n                         if (textIdx \u003d\u003d -1) {\n                             // token not found\n                             break;\n                         }\n-                        int repeat \u003d caseSensitivity.checkIndexOf(filename, textIdx + 1, wcs[wcsIdx]);\n+                        final int repeat \u003d caseSensitivity.checkIndexOf(filename, textIdx + 1, wcs[wcsIdx]);\n                         if (repeat \u003e\u003d 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n                         if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n       \n                     // matched text token, move text index to end of matched token\n                     textIdx +\u003d wcs[wcsIdx].length();\n                     anyChars \u003d false;\n                 }\n       \n                 wcsIdx++;\n             }\n             \n             // full match\n             if (wcsIdx \u003d\u003d wcs.length \u0026\u0026 textIdx \u003d\u003d filename.length()) {\n                 return true;\n             }\n             \n         } while (backtrack.size() \u003e 0);\n   \n         return false;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a": {
      "type": "Yfilerename",
      "commitMessage": "Build changes - re-organize to standard m2 layout, remove useless JIRA report and fix some Ant issues\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1004358 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1286218476000,
      "commitName": "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": 1286214840000,
      "commitNameOld": "19f48eb1711427a43a5e10c84bbbf1218a08bdd2",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/io/FilenameUtils.java",
        "newPath": "src/main/java/org/apache/commons/io/FilenameUtils.java"
      }
    },
    "d062bd01f7e9e9194ae0fd9dc01683e7c934c315": {
      "type": "Ybodychange",
      "commitMessage": "IO-246 FilenameUtils - wildcardMatch gives incorrect results - thanks to wa\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1002582 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1285759691000,
      "commitName": "d062bd01f7e9e9194ae0fd9dc01683e7c934c315",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": 1232676142000,
      "commitNameOld": "d4c5044c7b7697d944a444470a296dcd15911595",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 614.39,
      "commitsBetweenForRepo": 120,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,78 +1,81 @@\n     public static boolean wildcardMatch(String filename, String wildcardMatcher, IOCase caseSensitivity) {\n         if (filename \u003d\u003d null \u0026\u0026 wildcardMatcher \u003d\u003d null) {\n             return true;\n         }\n         if (filename \u003d\u003d null || wildcardMatcher \u003d\u003d null) {\n             return false;\n         }\n         if (caseSensitivity \u003d\u003d null) {\n             caseSensitivity \u003d IOCase.SENSITIVE;\n         }\n         String[] wcs \u003d splitOnTokens(wildcardMatcher);\n         boolean anyChars \u003d false;\n         int textIdx \u003d 0;\n         int wcsIdx \u003d 0;\n         Stack\u003cint[]\u003e backtrack \u003d new Stack\u003cint[]\u003e();\n         \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() \u003e 0) {\n                 int[] array \u003d backtrack.pop();\n                 wcsIdx \u003d array[0];\n                 textIdx \u003d array[1];\n                 anyChars \u003d true;\n             }\n             \n             // loop whilst tokens and text left to process\n             while (wcsIdx \u003c wcs.length) {\n       \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n+                    if (textIdx \u003e filename.length()) {\n+                        break;\n+                    }\n                     anyChars \u003d false;\n                     \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars \u003d true;\n                     if (wcsIdx \u003d\u003d wcs.length - 1) {\n                         textIdx \u003d filename.length();\n                     }\n                     \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n                         textIdx \u003d caseSensitivity.checkIndexOf(filename, textIdx, wcs[wcsIdx]);\n                         if (textIdx \u003d\u003d -1) {\n                             // token not found\n                             break;\n                         }\n                         int repeat \u003d caseSensitivity.checkIndexOf(filename, textIdx + 1, wcs[wcsIdx]);\n                         if (repeat \u003e\u003d 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n                         if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n       \n                     // matched text token, move text index to end of matched token\n                     textIdx +\u003d wcs[wcsIdx].length();\n                     anyChars \u003d false;\n                 }\n       \n                 wcsIdx++;\n             }\n             \n             // full match\n             if (wcsIdx \u003d\u003d wcs.length \u0026\u0026 textIdx \u003d\u003d filename.length()) {\n                 return true;\n             }\n             \n         } while (backtrack.size() \u003e 0);\n   \n         return false;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5c13fa7579650c2cbcab61c6b18e509951f640aa": {
      "type": "Ybodychange",
      "commitMessage": "IO-167 Fix case-insensitive string handling - thanks to Benjamin Bentmann\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@661822 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1212174721000,
      "commitName": "5c13fa7579650c2cbcab61c6b18e509951f640aa",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": 1204848966000,
      "commitNameOld": "ce0e40253805516e781e4acac9001428fc01ecfd",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 84.79,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,78 @@\n     public static boolean wildcardMatch(String filename, String wildcardMatcher, IOCase caseSensitivity) {\n         if (filename \u003d\u003d null \u0026\u0026 wildcardMatcher \u003d\u003d null) {\n             return true;\n         }\n         if (filename \u003d\u003d null || wildcardMatcher \u003d\u003d null) {\n             return false;\n         }\n         if (caseSensitivity \u003d\u003d null) {\n             caseSensitivity \u003d IOCase.SENSITIVE;\n         }\n-        filename \u003d caseSensitivity.convertCase(filename);\n-        wildcardMatcher \u003d caseSensitivity.convertCase(wildcardMatcher);\n         String[] wcs \u003d splitOnTokens(wildcardMatcher);\n         boolean anyChars \u003d false;\n         int textIdx \u003d 0;\n         int wcsIdx \u003d 0;\n         Stack\u003cint[]\u003e backtrack \u003d new Stack\u003cint[]\u003e();\n         \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() \u003e 0) {\n                 int[] array \u003d backtrack.pop();\n                 wcsIdx \u003d array[0];\n                 textIdx \u003d array[1];\n                 anyChars \u003d true;\n             }\n             \n             // loop whilst tokens and text left to process\n             while (wcsIdx \u003c wcs.length) {\n       \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n                     anyChars \u003d false;\n                     \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars \u003d true;\n                     if (wcsIdx \u003d\u003d wcs.length - 1) {\n                         textIdx \u003d filename.length();\n                     }\n                     \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n-                        textIdx \u003d filename.indexOf(wcs[wcsIdx], textIdx);\n+                        textIdx \u003d caseSensitivity.checkIndexOf(filename, textIdx, wcs[wcsIdx]);\n                         if (textIdx \u003d\u003d -1) {\n                             // token not found\n                             break;\n                         }\n-                        int repeat \u003d filename.indexOf(wcs[wcsIdx], textIdx + 1);\n+                        int repeat \u003d caseSensitivity.checkIndexOf(filename, textIdx + 1, wcs[wcsIdx]);\n                         if (repeat \u003e\u003d 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n-                        if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n+                        if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n       \n                     // matched text token, move text index to end of matched token\n                     textIdx +\u003d wcs[wcsIdx].length();\n                     anyChars \u003d false;\n                 }\n       \n                 wcsIdx++;\n             }\n             \n             // full match\n             if (wcsIdx \u003d\u003d wcs.length \u0026\u0026 textIdx \u003d\u003d filename.length()) {\n                 return true;\n             }\n             \n         } while (backtrack.size() \u003e 0);\n   \n         return false;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a74a5a0c6ff41a4ca0a08caf740ebce1dc3c6d10": {
      "type": "Ybodychange",
      "commitMessage": "IO-140 JDK 1.5 changes: Use generics\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@619103 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1202324477000,
      "commitName": "a74a5a0c6ff41a4ca0a08caf740ebce1dc3c6d10",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": 1199767586000,
      "commitNameOld": "14978fec52d916b2e371044c714191013d3bb02c",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 29.59,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,80 @@\n     public static boolean wildcardMatch(String filename, String wildcardMatcher, IOCase caseSensitivity) {\n         if (filename \u003d\u003d null \u0026\u0026 wildcardMatcher \u003d\u003d null) {\n             return true;\n         }\n         if (filename \u003d\u003d null || wildcardMatcher \u003d\u003d null) {\n             return false;\n         }\n         if (caseSensitivity \u003d\u003d null) {\n             caseSensitivity \u003d IOCase.SENSITIVE;\n         }\n         filename \u003d caseSensitivity.convertCase(filename);\n         wildcardMatcher \u003d caseSensitivity.convertCase(wildcardMatcher);\n         String[] wcs \u003d splitOnTokens(wildcardMatcher);\n         boolean anyChars \u003d false;\n         int textIdx \u003d 0;\n         int wcsIdx \u003d 0;\n-        Stack backtrack \u003d new Stack();\n+        Stack\u003cint[]\u003e backtrack \u003d new Stack\u003cint[]\u003e();\n         \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() \u003e 0) {\n-                int[] array \u003d (int[]) backtrack.pop();\n+                int[] array \u003d backtrack.pop();\n                 wcsIdx \u003d array[0];\n                 textIdx \u003d array[1];\n                 anyChars \u003d true;\n             }\n             \n             // loop whilst tokens and text left to process\n             while (wcsIdx \u003c wcs.length) {\n       \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n                     anyChars \u003d false;\n                     \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars \u003d true;\n                     if (wcsIdx \u003d\u003d wcs.length - 1) {\n                         textIdx \u003d filename.length();\n                     }\n                     \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n                         textIdx \u003d filename.indexOf(wcs[wcsIdx], textIdx);\n                         if (textIdx \u003d\u003d -1) {\n                             // token not found\n                             break;\n                         }\n                         int repeat \u003d filename.indexOf(wcs[wcsIdx], textIdx + 1);\n                         if (repeat \u003e\u003d 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n                         if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n       \n                     // matched text token, move text index to end of matched token\n                     textIdx +\u003d wcs[wcsIdx].length();\n                     anyChars \u003d false;\n                 }\n       \n                 wcsIdx++;\n             }\n             \n             // full match\n             if (wcsIdx \u003d\u003d wcs.length \u0026\u0026 textIdx \u003d\u003d filename.length()) {\n                 return true;\n             }\n             \n         } while (backtrack.size() \u003e 0);\n   \n         return false;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "eff391033a01a092d943db90513412b08bb01525": {
      "type": "Ybodychange",
      "commitMessage": "Test and fix case sensitive wildcard filter\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@418641 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1151869339000,
      "commitName": "eff391033a01a092d943db90513412b08bb01525",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": 1151277543000,
      "commitNameOld": "07751ea95c575cb95a310a23a78dc8cbe85b27a9",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 6.85,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,78 +1,80 @@\n     public static boolean wildcardMatch(String filename, String wildcardMatcher, IOCase caseSensitivity) {\n         if (filename \u003d\u003d null \u0026\u0026 wildcardMatcher \u003d\u003d null) {\n             return true;\n         }\n         if (filename \u003d\u003d null || wildcardMatcher \u003d\u003d null) {\n             return false;\n         }\n         if (caseSensitivity \u003d\u003d null) {\n             caseSensitivity \u003d IOCase.SENSITIVE;\n         }\n+        filename \u003d caseSensitivity.convertCase(filename);\n+        wildcardMatcher \u003d caseSensitivity.convertCase(wildcardMatcher);\n         String[] wcs \u003d splitOnTokens(wildcardMatcher);\n         boolean anyChars \u003d false;\n         int textIdx \u003d 0;\n         int wcsIdx \u003d 0;\n         Stack backtrack \u003d new Stack();\n         \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() \u003e 0) {\n                 int[] array \u003d (int[]) backtrack.pop();\n                 wcsIdx \u003d array[0];\n                 textIdx \u003d array[1];\n                 anyChars \u003d true;\n             }\n             \n             // loop whilst tokens and text left to process\n             while (wcsIdx \u003c wcs.length) {\n       \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n                     anyChars \u003d false;\n                     \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars \u003d true;\n                     if (wcsIdx \u003d\u003d wcs.length - 1) {\n                         textIdx \u003d filename.length();\n                     }\n                     \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n                         textIdx \u003d filename.indexOf(wcs[wcsIdx], textIdx);\n                         if (textIdx \u003d\u003d -1) {\n                             // token not found\n                             break;\n                         }\n                         int repeat \u003d filename.indexOf(wcs[wcsIdx], textIdx + 1);\n                         if (repeat \u003e\u003d 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n-                        if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n+                        if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n       \n                     // matched text token, move text index to end of matched token\n                     textIdx +\u003d wcs[wcsIdx].length();\n                     anyChars \u003d false;\n                 }\n       \n                 wcsIdx++;\n             }\n             \n             // full match\n             if (wcsIdx \u003d\u003d wcs.length \u0026\u0026 textIdx \u003d\u003d filename.length()) {\n                 return true;\n             }\n             \n         } while (backtrack.size() \u003e 0);\n   \n         return false;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "07751ea95c575cb95a310a23a78dc8cbe85b27a9": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "Add methods to use IOCase case-sensitivity\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@417091 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1151277543000,
      "commitName": "07751ea95c575cb95a310a23a78dc8cbe85b27a9",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Add methods to use IOCase case-sensitivity\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@417091 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1151277543000,
          "commitName": "07751ea95c575cb95a310a23a78dc8cbe85b27a9",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1151275218000,
          "commitNameOld": "49ca3a4241c1847e08921ead7b582419fa53537c",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,79 +1,78 @@\n-    private static boolean wildcardMatch(String filename, String wildcardMatcher, boolean system) {\n+    public static boolean wildcardMatch(String filename, String wildcardMatcher, IOCase caseSensitivity) {\n         if (filename \u003d\u003d null \u0026\u0026 wildcardMatcher \u003d\u003d null) {\n             return true;\n         }\n         if (filename \u003d\u003d null || wildcardMatcher \u003d\u003d null) {\n             return false;\n         }\n-        if (system \u0026\u0026 isSystemWindows()) {\n-            filename \u003d filename.toLowerCase();\n-            wildcardMatcher \u003d wildcardMatcher.toLowerCase();\n+        if (caseSensitivity \u003d\u003d null) {\n+            caseSensitivity \u003d IOCase.SENSITIVE;\n         }\n         String[] wcs \u003d splitOnTokens(wildcardMatcher);\n         boolean anyChars \u003d false;\n         int textIdx \u003d 0;\n         int wcsIdx \u003d 0;\n         Stack backtrack \u003d new Stack();\n         \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() \u003e 0) {\n                 int[] array \u003d (int[]) backtrack.pop();\n                 wcsIdx \u003d array[0];\n                 textIdx \u003d array[1];\n                 anyChars \u003d true;\n             }\n             \n             // loop whilst tokens and text left to process\n             while (wcsIdx \u003c wcs.length) {\n       \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n                     anyChars \u003d false;\n                     \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars \u003d true;\n                     if (wcsIdx \u003d\u003d wcs.length - 1) {\n                         textIdx \u003d filename.length();\n                     }\n                     \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n                         textIdx \u003d filename.indexOf(wcs[wcsIdx], textIdx);\n                         if (textIdx \u003d\u003d -1) {\n                             // token not found\n                             break;\n                         }\n                         int repeat \u003d filename.indexOf(wcs[wcsIdx], textIdx + 1);\n                         if (repeat \u003e\u003d 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n-                        if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n+                        if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n       \n                     // matched text token, move text index to end of matched token\n                     textIdx +\u003d wcs[wcsIdx].length();\n                     anyChars \u003d false;\n                 }\n       \n                 wcsIdx++;\n             }\n             \n             // full match\n             if (wcsIdx \u003d\u003d wcs.length \u0026\u0026 textIdx \u003d\u003d filename.length()) {\n                 return true;\n             }\n             \n         } while (backtrack.size() \u003e 0);\n   \n         return false;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Add methods to use IOCase case-sensitivity\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@417091 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1151277543000,
          "commitName": "07751ea95c575cb95a310a23a78dc8cbe85b27a9",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1151275218000,
          "commitNameOld": "49ca3a4241c1847e08921ead7b582419fa53537c",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,79 +1,78 @@\n-    private static boolean wildcardMatch(String filename, String wildcardMatcher, boolean system) {\n+    public static boolean wildcardMatch(String filename, String wildcardMatcher, IOCase caseSensitivity) {\n         if (filename \u003d\u003d null \u0026\u0026 wildcardMatcher \u003d\u003d null) {\n             return true;\n         }\n         if (filename \u003d\u003d null || wildcardMatcher \u003d\u003d null) {\n             return false;\n         }\n-        if (system \u0026\u0026 isSystemWindows()) {\n-            filename \u003d filename.toLowerCase();\n-            wildcardMatcher \u003d wildcardMatcher.toLowerCase();\n+        if (caseSensitivity \u003d\u003d null) {\n+            caseSensitivity \u003d IOCase.SENSITIVE;\n         }\n         String[] wcs \u003d splitOnTokens(wildcardMatcher);\n         boolean anyChars \u003d false;\n         int textIdx \u003d 0;\n         int wcsIdx \u003d 0;\n         Stack backtrack \u003d new Stack();\n         \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() \u003e 0) {\n                 int[] array \u003d (int[]) backtrack.pop();\n                 wcsIdx \u003d array[0];\n                 textIdx \u003d array[1];\n                 anyChars \u003d true;\n             }\n             \n             // loop whilst tokens and text left to process\n             while (wcsIdx \u003c wcs.length) {\n       \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n                     anyChars \u003d false;\n                     \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars \u003d true;\n                     if (wcsIdx \u003d\u003d wcs.length - 1) {\n                         textIdx \u003d filename.length();\n                     }\n                     \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n                         textIdx \u003d filename.indexOf(wcs[wcsIdx], textIdx);\n                         if (textIdx \u003d\u003d -1) {\n                             // token not found\n                             break;\n                         }\n                         int repeat \u003d filename.indexOf(wcs[wcsIdx], textIdx + 1);\n                         if (repeat \u003e\u003d 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n-                        if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n+                        if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n       \n                     // matched text token, move text index to end of matched token\n                     textIdx +\u003d wcs[wcsIdx].length();\n                     anyChars \u003d false;\n                 }\n       \n                 wcsIdx++;\n             }\n             \n             // full match\n             if (wcsIdx \u003d\u003d wcs.length \u0026\u0026 textIdx \u003d\u003d filename.length()) {\n                 return true;\n             }\n             \n         } while (backtrack.size() \u003e 0);\n   \n         return false;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Add methods to use IOCase case-sensitivity\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@417091 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1151277543000,
          "commitName": "07751ea95c575cb95a310a23a78dc8cbe85b27a9",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1151275218000,
          "commitNameOld": "49ca3a4241c1847e08921ead7b582419fa53537c",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,79 +1,78 @@\n-    private static boolean wildcardMatch(String filename, String wildcardMatcher, boolean system) {\n+    public static boolean wildcardMatch(String filename, String wildcardMatcher, IOCase caseSensitivity) {\n         if (filename \u003d\u003d null \u0026\u0026 wildcardMatcher \u003d\u003d null) {\n             return true;\n         }\n         if (filename \u003d\u003d null || wildcardMatcher \u003d\u003d null) {\n             return false;\n         }\n-        if (system \u0026\u0026 isSystemWindows()) {\n-            filename \u003d filename.toLowerCase();\n-            wildcardMatcher \u003d wildcardMatcher.toLowerCase();\n+        if (caseSensitivity \u003d\u003d null) {\n+            caseSensitivity \u003d IOCase.SENSITIVE;\n         }\n         String[] wcs \u003d splitOnTokens(wildcardMatcher);\n         boolean anyChars \u003d false;\n         int textIdx \u003d 0;\n         int wcsIdx \u003d 0;\n         Stack backtrack \u003d new Stack();\n         \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() \u003e 0) {\n                 int[] array \u003d (int[]) backtrack.pop();\n                 wcsIdx \u003d array[0];\n                 textIdx \u003d array[1];\n                 anyChars \u003d true;\n             }\n             \n             // loop whilst tokens and text left to process\n             while (wcsIdx \u003c wcs.length) {\n       \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n                     anyChars \u003d false;\n                     \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars \u003d true;\n                     if (wcsIdx \u003d\u003d wcs.length - 1) {\n                         textIdx \u003d filename.length();\n                     }\n                     \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n                         textIdx \u003d filename.indexOf(wcs[wcsIdx], textIdx);\n                         if (textIdx \u003d\u003d -1) {\n                             // token not found\n                             break;\n                         }\n                         int repeat \u003d filename.indexOf(wcs[wcsIdx], textIdx + 1);\n                         if (repeat \u003e\u003d 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n-                        if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n+                        if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n       \n                     // matched text token, move text index to end of matched token\n                     textIdx +\u003d wcs[wcsIdx].length();\n                     anyChars \u003d false;\n                 }\n       \n                 wcsIdx++;\n             }\n             \n             // full match\n             if (wcsIdx \u003d\u003d wcs.length \u0026\u0026 textIdx \u003d\u003d filename.length()) {\n                 return true;\n             }\n             \n         } while (backtrack.size() \u003e 0);\n   \n         return false;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "49ca3a4241c1847e08921ead7b582419fa53537c": {
      "type": "Ybodychange",
      "commitMessage": "Refactor windows identification to a method\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@417086 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1151275218000,
      "commitName": "49ca3a4241c1847e08921ead7b582419fa53537c",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": 1127085165000,
      "commitNameOld": "990ea5d016b6ebc1961be059ba9aab0f5079683b",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 279.98,
      "commitsBetweenForRepo": 109,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,79 +1,79 @@\n     private static boolean wildcardMatch(String filename, String wildcardMatcher, boolean system) {\n         if (filename \u003d\u003d null \u0026\u0026 wildcardMatcher \u003d\u003d null) {\n             return true;\n         }\n         if (filename \u003d\u003d null || wildcardMatcher \u003d\u003d null) {\n             return false;\n         }\n-        if (system \u0026\u0026 (SYSTEM_SEPARATOR \u003d\u003d WINDOWS_SEPARATOR)) {\n+        if (system \u0026\u0026 isSystemWindows()) {\n             filename \u003d filename.toLowerCase();\n             wildcardMatcher \u003d wildcardMatcher.toLowerCase();\n         }\n         String[] wcs \u003d splitOnTokens(wildcardMatcher);\n         boolean anyChars \u003d false;\n         int textIdx \u003d 0;\n         int wcsIdx \u003d 0;\n         Stack backtrack \u003d new Stack();\n         \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() \u003e 0) {\n                 int[] array \u003d (int[]) backtrack.pop();\n                 wcsIdx \u003d array[0];\n                 textIdx \u003d array[1];\n                 anyChars \u003d true;\n             }\n             \n             // loop whilst tokens and text left to process\n             while (wcsIdx \u003c wcs.length) {\n       \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n                     anyChars \u003d false;\n                     \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars \u003d true;\n                     if (wcsIdx \u003d\u003d wcs.length - 1) {\n                         textIdx \u003d filename.length();\n                     }\n                     \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n                         textIdx \u003d filename.indexOf(wcs[wcsIdx], textIdx);\n                         if (textIdx \u003d\u003d -1) {\n                             // token not found\n                             break;\n                         }\n                         int repeat \u003d filename.indexOf(wcs[wcsIdx], textIdx + 1);\n                         if (repeat \u003e\u003d 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n                         if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n       \n                     // matched text token, move text index to end of matched token\n                     textIdx +\u003d wcs[wcsIdx].length();\n                     anyChars \u003d false;\n                 }\n       \n                 wcsIdx++;\n             }\n             \n             // full match\n             if (wcsIdx \u003d\u003d wcs.length \u0026\u0026 textIdx \u003d\u003d filename.length()) {\n                 return true;\n             }\n             \n         } while (backtrack.size() \u003e 0);\n   \n         return false;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "745375d22e427574f1ef1301c8378cd81e85a1fc": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "Make FilenameUtils equals methods case-sensitive, with some optional system case matching\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@160343 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1112830543000,
      "commitName": "745375d22e427574f1ef1301c8378cd81e85a1fc",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Make FilenameUtils equals methods case-sensitive, with some optional system case matching\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@160343 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1112830543000,
          "commitName": "745375d22e427574f1ef1301c8378cd81e85a1fc",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1109985765000,
          "commitNameOld": "1ead1cc51d537700eb72e3fa991e1d68162029d5",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 32.93,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,79 +1,79 @@\n-    public static boolean wildcardMatch(String filename, String wildcardMatcher) {\n+    private static boolean wildcardMatch(String filename, String wildcardMatcher, boolean system) {\n         if (filename \u003d\u003d null \u0026\u0026 wildcardMatcher \u003d\u003d null) {\n             return true;\n         }\n         if (filename \u003d\u003d null || wildcardMatcher \u003d\u003d null) {\n             return false;\n         }\n-        if (SYSTEM_SEPARATOR \u003d\u003d WINDOWS_SEPARATOR) {\n+        if (system \u0026\u0026 (SYSTEM_SEPARATOR \u003d\u003d WINDOWS_SEPARATOR)) {\n             filename \u003d filename.toLowerCase();\n             wildcardMatcher \u003d wildcardMatcher.toLowerCase();\n         }\n         String[] wcs \u003d splitOnTokens(wildcardMatcher);\n         boolean anyChars \u003d false;\n         int textIdx \u003d 0;\n         int wcsIdx \u003d 0;\n         Stack backtrack \u003d new Stack();\n         \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() \u003e 0) {\n                 int[] array \u003d (int[]) backtrack.pop();\n                 wcsIdx \u003d array[0];\n                 textIdx \u003d array[1];\n                 anyChars \u003d true;\n             }\n             \n             // loop whilst tokens and text left to process\n             while (wcsIdx \u003c wcs.length) {\n       \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n                     anyChars \u003d false;\n                     \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars \u003d true;\n                     if (wcsIdx \u003d\u003d wcs.length - 1) {\n                         textIdx \u003d filename.length();\n                     }\n                     \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n                         textIdx \u003d filename.indexOf(wcs[wcsIdx], textIdx);\n                         if (textIdx \u003d\u003d -1) {\n                             // token not found\n                             break;\n                         }\n                         int repeat \u003d filename.indexOf(wcs[wcsIdx], textIdx + 1);\n                         if (repeat \u003e\u003d 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n                         if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n       \n                     // matched text token, move text index to end of matched token\n                     textIdx +\u003d wcs[wcsIdx].length();\n                     anyChars \u003d false;\n                 }\n       \n                 wcsIdx++;\n             }\n             \n             // full match\n             if (wcsIdx \u003d\u003d wcs.length \u0026\u0026 textIdx \u003d\u003d filename.length()) {\n                 return true;\n             }\n             \n         } while (backtrack.size() \u003e 0);\n   \n         return false;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Make FilenameUtils equals methods case-sensitive, with some optional system case matching\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@160343 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1112830543000,
          "commitName": "745375d22e427574f1ef1301c8378cd81e85a1fc",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1109985765000,
          "commitNameOld": "1ead1cc51d537700eb72e3fa991e1d68162029d5",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 32.93,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,79 +1,79 @@\n-    public static boolean wildcardMatch(String filename, String wildcardMatcher) {\n+    private static boolean wildcardMatch(String filename, String wildcardMatcher, boolean system) {\n         if (filename \u003d\u003d null \u0026\u0026 wildcardMatcher \u003d\u003d null) {\n             return true;\n         }\n         if (filename \u003d\u003d null || wildcardMatcher \u003d\u003d null) {\n             return false;\n         }\n-        if (SYSTEM_SEPARATOR \u003d\u003d WINDOWS_SEPARATOR) {\n+        if (system \u0026\u0026 (SYSTEM_SEPARATOR \u003d\u003d WINDOWS_SEPARATOR)) {\n             filename \u003d filename.toLowerCase();\n             wildcardMatcher \u003d wildcardMatcher.toLowerCase();\n         }\n         String[] wcs \u003d splitOnTokens(wildcardMatcher);\n         boolean anyChars \u003d false;\n         int textIdx \u003d 0;\n         int wcsIdx \u003d 0;\n         Stack backtrack \u003d new Stack();\n         \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() \u003e 0) {\n                 int[] array \u003d (int[]) backtrack.pop();\n                 wcsIdx \u003d array[0];\n                 textIdx \u003d array[1];\n                 anyChars \u003d true;\n             }\n             \n             // loop whilst tokens and text left to process\n             while (wcsIdx \u003c wcs.length) {\n       \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n                     anyChars \u003d false;\n                     \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars \u003d true;\n                     if (wcsIdx \u003d\u003d wcs.length - 1) {\n                         textIdx \u003d filename.length();\n                     }\n                     \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n                         textIdx \u003d filename.indexOf(wcs[wcsIdx], textIdx);\n                         if (textIdx \u003d\u003d -1) {\n                             // token not found\n                             break;\n                         }\n                         int repeat \u003d filename.indexOf(wcs[wcsIdx], textIdx + 1);\n                         if (repeat \u003e\u003d 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n                         if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n       \n                     // matched text token, move text index to end of matched token\n                     textIdx +\u003d wcs[wcsIdx].length();\n                     anyChars \u003d false;\n                 }\n       \n                 wcsIdx++;\n             }\n             \n             // full match\n             if (wcsIdx \u003d\u003d wcs.length \u0026\u0026 textIdx \u003d\u003d filename.length()) {\n                 return true;\n             }\n             \n         } while (backtrack.size() \u003e 0);\n   \n         return false;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Make FilenameUtils equals methods case-sensitive, with some optional system case matching\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@160343 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1112830543000,
          "commitName": "745375d22e427574f1ef1301c8378cd81e85a1fc",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1109985765000,
          "commitNameOld": "1ead1cc51d537700eb72e3fa991e1d68162029d5",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 32.93,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,79 +1,79 @@\n-    public static boolean wildcardMatch(String filename, String wildcardMatcher) {\n+    private static boolean wildcardMatch(String filename, String wildcardMatcher, boolean system) {\n         if (filename \u003d\u003d null \u0026\u0026 wildcardMatcher \u003d\u003d null) {\n             return true;\n         }\n         if (filename \u003d\u003d null || wildcardMatcher \u003d\u003d null) {\n             return false;\n         }\n-        if (SYSTEM_SEPARATOR \u003d\u003d WINDOWS_SEPARATOR) {\n+        if (system \u0026\u0026 (SYSTEM_SEPARATOR \u003d\u003d WINDOWS_SEPARATOR)) {\n             filename \u003d filename.toLowerCase();\n             wildcardMatcher \u003d wildcardMatcher.toLowerCase();\n         }\n         String[] wcs \u003d splitOnTokens(wildcardMatcher);\n         boolean anyChars \u003d false;\n         int textIdx \u003d 0;\n         int wcsIdx \u003d 0;\n         Stack backtrack \u003d new Stack();\n         \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() \u003e 0) {\n                 int[] array \u003d (int[]) backtrack.pop();\n                 wcsIdx \u003d array[0];\n                 textIdx \u003d array[1];\n                 anyChars \u003d true;\n             }\n             \n             // loop whilst tokens and text left to process\n             while (wcsIdx \u003c wcs.length) {\n       \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n                     anyChars \u003d false;\n                     \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars \u003d true;\n                     if (wcsIdx \u003d\u003d wcs.length - 1) {\n                         textIdx \u003d filename.length();\n                     }\n                     \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n                         textIdx \u003d filename.indexOf(wcs[wcsIdx], textIdx);\n                         if (textIdx \u003d\u003d -1) {\n                             // token not found\n                             break;\n                         }\n                         int repeat \u003d filename.indexOf(wcs[wcsIdx], textIdx + 1);\n                         if (repeat \u003e\u003d 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n                         if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n       \n                     // matched text token, move text index to end of matched token\n                     textIdx +\u003d wcs[wcsIdx].length();\n                     anyChars \u003d false;\n                 }\n       \n                 wcsIdx++;\n             }\n             \n             // full match\n             if (wcsIdx \u003d\u003d wcs.length \u0026\u0026 textIdx \u003d\u003d filename.length()) {\n                 return true;\n             }\n             \n         } while (backtrack.size() \u003e 0);\n   \n         return false;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "1ead1cc51d537700eb72e3fa991e1d68162029d5": {
      "type": "Ybodychange",
      "commitMessage": "Fix bug in wildcard search for advanced repetitive matches\nbug 33303, from Danival Taffarel Calegari\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@156217 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1109985765000,
      "commitName": "1ead1cc51d537700eb72e3fa991e1d68162029d5",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": 1108296521000,
      "commitNameOld": "7a009ea80932204d693c2f80fb89bb43df3907f0",
      "commitAuthorOld": "Jeremias Maerki",
      "daysBetweenCommits": 19.55,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,79 @@\n     public static boolean wildcardMatch(String filename, String wildcardMatcher) {\n         if (filename \u003d\u003d null \u0026\u0026 wildcardMatcher \u003d\u003d null) {\n             return true;\n         }\n         if (filename \u003d\u003d null || wildcardMatcher \u003d\u003d null) {\n             return false;\n         }\n         if (SYSTEM_SEPARATOR \u003d\u003d WINDOWS_SEPARATOR) {\n             filename \u003d filename.toLowerCase();\n             wildcardMatcher \u003d wildcardMatcher.toLowerCase();\n         }\n         String[] wcs \u003d splitOnTokens(wildcardMatcher);\n         boolean anyChars \u003d false;\n         int textIdx \u003d 0;\n         int wcsIdx \u003d 0;\n-  \n-        // loop whilst tokens and text left to process\n-        while (wcsIdx \u003c wcs.length \u0026\u0026 textIdx \u003c filename.length()) {\n-  \n-            if (wcs[wcsIdx].equals(\"?\")) {\n-                // ? so move to next text char\n-                textIdx++;\n-                anyChars \u003d false;\n-                \n-            } else if (wcs[wcsIdx].equals(\"*\")) {\n-                // set any chars status\n+        Stack backtrack \u003d new Stack();\n+        \n+        // loop around a backtrack stack, to handle complex * matching\n+        do {\n+            if (backtrack.size() \u003e 0) {\n+                int[] array \u003d (int[]) backtrack.pop();\n+                wcsIdx \u003d array[0];\n+                textIdx \u003d array[1];\n                 anyChars \u003d true;\n-                \n-            } else {\n-                // matching text token\n-                if (anyChars) {\n-                    // any chars then try to locate text token\n-                    textIdx \u003d filename.indexOf(wcs[wcsIdx], textIdx);\n-                    if (textIdx \u003d\u003d -1) {\n-                        // token not found\n-                        return false;\n+            }\n+            \n+            // loop whilst tokens and text left to process\n+            while (wcsIdx \u003c wcs.length) {\n+      \n+                if (wcs[wcsIdx].equals(\"?\")) {\n+                    // ? so move to next text char\n+                    textIdx++;\n+                    anyChars \u003d false;\n+                    \n+                } else if (wcs[wcsIdx].equals(\"*\")) {\n+                    // set any chars status\n+                    anyChars \u003d true;\n+                    if (wcsIdx \u003d\u003d wcs.length - 1) {\n+                        textIdx \u003d filename.length();\n                     }\n+                    \n                 } else {\n-                    // matching from current position\n-                    if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n-                        // couldnt match token\n-                        return false;\n+                    // matching text token\n+                    if (anyChars) {\n+                        // any chars then try to locate text token\n+                        textIdx \u003d filename.indexOf(wcs[wcsIdx], textIdx);\n+                        if (textIdx \u003d\u003d -1) {\n+                            // token not found\n+                            break;\n+                        }\n+                        int repeat \u003d filename.indexOf(wcs[wcsIdx], textIdx + 1);\n+                        if (repeat \u003e\u003d 0) {\n+                            backtrack.push(new int[] {wcsIdx, repeat});\n+                        }\n+                    } else {\n+                        // matching from current position\n+                        if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n+                            // couldnt match token\n+                            break;\n+                        }\n                     }\n+      \n+                    // matched text token, move text index to end of matched token\n+                    textIdx +\u003d wcs[wcsIdx].length();\n+                    anyChars \u003d false;\n                 }\n-  \n-                // matched text token, move text index to end of matched token\n-                textIdx +\u003d wcs[wcsIdx].length();\n-                anyChars \u003d false;\n+      \n+                wcsIdx++;\n             }\n-  \n-            wcsIdx++;\n-        }\n-\n-        // didnt match all wildcards\n-        if (wcsIdx \u003c wcs.length) {\n-            // ok if one remaining and wildcard or empty\n-            if (wcsIdx + 1 !\u003d wcs.length || !(wcs[wcsIdx].equals(\"*\") || wcs[wcsIdx].equals(\"\")) ) {\n-                return false;\n+            \n+            // full match\n+            if (wcsIdx \u003d\u003d wcs.length \u0026\u0026 textIdx \u003d\u003d filename.length()) {\n+                return true;\n             }\n-        }\n+            \n+        } while (backtrack.size() \u003e 0);\n   \n-        // ran out of text chars\n-        if (textIdx \u003e filename.length()) {\n-           return false;\n-        }\n-  \n-        // didnt match all text chars, only ok if any chars set\n-        if (textIdx \u003c filename.length() \u0026\u0026 !anyChars) {\n-            return false;\n-        }\n-  \n-        return true;\n+        return false;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "84b251bf545c9df52c9c750835a86d5af4bf0387": {
      "type": "Ybodychange",
      "commitMessage": "Convert wildcard method to match based on OS case sensitivity\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140647 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1102718217000,
      "commitName": "84b251bf545c9df52c9c750835a86d5af4bf0387",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": 1102188520000,
      "commitNameOld": "a09ebfc6c0f84a0aa9a05da04801461d99509ec5",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 6.13,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,73 @@\n     public static boolean wildcardMatch(String filename, String wildcardMatcher) {\n+        if (filename \u003d\u003d null \u0026\u0026 wildcardMatcher \u003d\u003d null) {\n+            return true;\n+        }\n+        if (filename \u003d\u003d null || wildcardMatcher \u003d\u003d null) {\n+            return false;\n+        }\n+        if (SYSTEM_SEPARATOR \u003d\u003d WINDOWS_SEPARATOR) {\n+            filename \u003d filename.toLowerCase();\n+            wildcardMatcher \u003d wildcardMatcher.toLowerCase();\n+        }\n         String[] wcs \u003d splitOnTokens(wildcardMatcher);\n-  \n+        boolean anyChars \u003d false;\n         int textIdx \u003d 0;\n         int wcsIdx \u003d 0;\n-        boolean anyChars \u003d false;\n   \n         // loop whilst tokens and text left to process\n         while (wcsIdx \u003c wcs.length \u0026\u0026 textIdx \u003c filename.length()) {\n   \n-            // ? so move to next text char\n             if (wcs[wcsIdx].equals(\"?\")) {\n+                // ? so move to next text char\n                 textIdx++;\n-            } else if (!wcs[wcsIdx].equals(\"*\")) {\n+                anyChars \u003d false;\n+                \n+            } else if (wcs[wcsIdx].equals(\"*\")) {\n+                // set any chars status\n+                anyChars \u003d true;\n+                \n+            } else {\n                 // matching text token\n                 if (anyChars) {\n                     // any chars then try to locate text token\n                     textIdx \u003d filename.indexOf(wcs[wcsIdx], textIdx);\n-  \n                     if (textIdx \u003d\u003d -1) {\n                         // token not found\n                         return false;\n                     }\n                 } else {\n                     // matching from current position\n                     if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n                         // couldnt match token\n                         return false;\n                     }\n                 }\n   \n                 // matched text token, move text index to end of matched token\n                 textIdx +\u003d wcs[wcsIdx].length();\n+                anyChars \u003d false;\n             }\n   \n-            // set any chars status\n-            anyChars \u003d wcs[wcsIdx].equals(\"*\");\n-  \n             wcsIdx++;\n         }\n \n         // didnt match all wildcards\n         if (wcsIdx \u003c wcs.length) {\n             // ok if one remaining and wildcard or empty\n             if (wcsIdx + 1 !\u003d wcs.length || !(wcs[wcsIdx].equals(\"*\") || wcs[wcsIdx].equals(\"\")) ) {\n                 return false;\n             }\n         }\n   \n         // ran out of text chars\n         if (textIdx \u003e filename.length()) {\n            return false;\n         }\n   \n         // didnt match all text chars, only ok if any chars set\n         if (textIdx \u003c filename.length() \u0026\u0026 !anyChars) {\n             return false;\n         }\n   \n         return true;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a09ebfc6c0f84a0aa9a05da04801461d99509ec5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Add equals methods, document Unix/Windows behaviour\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140646 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1102188520000,
      "commitName": "a09ebfc6c0f84a0aa9a05da04801461d99509ec5",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Add equals methods, document Unix/Windows behaviour\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140646 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1102188520000,
          "commitName": "a09ebfc6c0f84a0aa9a05da04801461d99509ec5",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1101574851000,
          "commitNameOld": "289a56cf5d5c89ad3d85389b9651b0e227ded057",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 7.1,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,61 @@\n-    public static boolean wildcardMatch(String filename, String wildcard) {\n-        String[] wcs \u003d splitOnTokens(wildcard);\n+    public static boolean wildcardMatch(String filename, String wildcardMatcher) {\n+        String[] wcs \u003d splitOnTokens(wildcardMatcher);\n   \n         int textIdx \u003d 0;\n         int wcsIdx \u003d 0;\n         boolean anyChars \u003d false;\n   \n         // loop whilst tokens and text left to process\n         while (wcsIdx \u003c wcs.length \u0026\u0026 textIdx \u003c filename.length()) {\n   \n             // ? so move to next text char\n             if (wcs[wcsIdx].equals(\"?\")) {\n                 textIdx++;\n             } else if (!wcs[wcsIdx].equals(\"*\")) {\n                 // matching text token\n                 if (anyChars) {\n                     // any chars then try to locate text token\n                     textIdx \u003d filename.indexOf(wcs[wcsIdx], textIdx);\n   \n                     if (textIdx \u003d\u003d -1) {\n                         // token not found\n                         return false;\n                     }\n                 } else {\n                     // matching from current position\n                     if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n                         // couldnt match token\n                         return false;\n                     }\n                 }\n   \n                 // matched text token, move text index to end of matched token\n                 textIdx +\u003d wcs[wcsIdx].length();\n             }\n   \n             // set any chars status\n             anyChars \u003d wcs[wcsIdx].equals(\"*\");\n   \n             wcsIdx++;\n         }\n \n         // didnt match all wildcards\n         if (wcsIdx \u003c wcs.length) {\n             // ok if one remaining and wildcard or empty\n             if (wcsIdx + 1 !\u003d wcs.length || !(wcs[wcsIdx].equals(\"*\") || wcs[wcsIdx].equals(\"\")) ) {\n                 return false;\n             }\n         }\n   \n         // ran out of text chars\n         if (textIdx \u003e filename.length()) {\n            return false;\n         }\n   \n         // didnt match all text chars, only ok if any chars set\n         if (textIdx \u003c filename.length() \u0026\u0026 !anyChars) {\n             return false;\n         }\n   \n         return true;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Add equals methods, document Unix/Windows behaviour\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140646 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1102188520000,
          "commitName": "a09ebfc6c0f84a0aa9a05da04801461d99509ec5",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1101574851000,
          "commitNameOld": "289a56cf5d5c89ad3d85389b9651b0e227ded057",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 7.1,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,61 @@\n-    public static boolean wildcardMatch(String filename, String wildcard) {\n-        String[] wcs \u003d splitOnTokens(wildcard);\n+    public static boolean wildcardMatch(String filename, String wildcardMatcher) {\n+        String[] wcs \u003d splitOnTokens(wildcardMatcher);\n   \n         int textIdx \u003d 0;\n         int wcsIdx \u003d 0;\n         boolean anyChars \u003d false;\n   \n         // loop whilst tokens and text left to process\n         while (wcsIdx \u003c wcs.length \u0026\u0026 textIdx \u003c filename.length()) {\n   \n             // ? so move to next text char\n             if (wcs[wcsIdx].equals(\"?\")) {\n                 textIdx++;\n             } else if (!wcs[wcsIdx].equals(\"*\")) {\n                 // matching text token\n                 if (anyChars) {\n                     // any chars then try to locate text token\n                     textIdx \u003d filename.indexOf(wcs[wcsIdx], textIdx);\n   \n                     if (textIdx \u003d\u003d -1) {\n                         // token not found\n                         return false;\n                     }\n                 } else {\n                     // matching from current position\n                     if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n                         // couldnt match token\n                         return false;\n                     }\n                 }\n   \n                 // matched text token, move text index to end of matched token\n                 textIdx +\u003d wcs[wcsIdx].length();\n             }\n   \n             // set any chars status\n             anyChars \u003d wcs[wcsIdx].equals(\"*\");\n   \n             wcsIdx++;\n         }\n \n         // didnt match all wildcards\n         if (wcsIdx \u003c wcs.length) {\n             // ok if one remaining and wildcard or empty\n             if (wcsIdx + 1 !\u003d wcs.length || !(wcs[wcsIdx].equals(\"*\") || wcs[wcsIdx].equals(\"\")) ) {\n                 return false;\n             }\n         }\n   \n         // ran out of text chars\n         if (textIdx \u003e filename.length()) {\n            return false;\n         }\n   \n         // didnt match all text chars, only ok if any chars set\n         if (textIdx \u003c filename.length() \u0026\u0026 !anyChars) {\n             return false;\n         }\n   \n         return true;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "f93f8bebb4fc714a6b60e1d2a4452d6ff6d3df5c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Add commented out implementations of prefix handling, Javadoc\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140640 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1101085915000,
      "commitName": "f93f8bebb4fc714a6b60e1d2a4452d6ff6d3df5c",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Add commented out implementations of prefix handling, Javadoc\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140640 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1101085915000,
          "commitName": "f93f8bebb4fc714a6b60e1d2a4452d6ff6d3df5c",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1099196254000,
          "commitNameOld": "4694d5a982413a12bce4ce0e5570404b8cc7b1f7",
          "commitAuthorOld": "Henri Yandell",
          "daysBetweenCommits": 21.87,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,62 +1,61 @@\n-    public static boolean wildcardMatch(String text, String wildcard) {\n+    public static boolean wildcardMatch(String filename, String wildcard) {\n         String[] wcs \u003d splitOnTokens(wildcard);\n   \n         int textIdx \u003d 0;\n         int wcsIdx \u003d 0;\n         boolean anyChars \u003d false;\n   \n         // loop whilst tokens and text left to process\n-        while (wcsIdx \u003c wcs.length \u0026\u0026 textIdx \u003c text.length()) {\n+        while (wcsIdx \u003c wcs.length \u0026\u0026 textIdx \u003c filename.length()) {\n   \n             // ? so move to next text char\n             if (wcs[wcsIdx].equals(\"?\")) {\n                 textIdx++;\n-            } else\n-            if (!wcs[wcsIdx].equals(\"*\")) {\n+            } else if (!wcs[wcsIdx].equals(\"*\")) {\n                 // matching text token\n                 if (anyChars) {\n                     // any chars then try to locate text token\n-                    textIdx \u003d text.indexOf(wcs[wcsIdx], textIdx);\n+                    textIdx \u003d filename.indexOf(wcs[wcsIdx], textIdx);\n   \n                     if (textIdx \u003d\u003d -1) {\n                         // token not found\n                         return false;\n                     }\n                 } else {\n                     // matching from current position\n-                    if (!text.startsWith(wcs[wcsIdx], textIdx)) {\n+                    if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n                         // couldnt match token\n                         return false;\n                     }\n                 }\n   \n                 // matched text token, move text index to end of matched token\n                 textIdx +\u003d wcs[wcsIdx].length();\n             }\n   \n             // set any chars status\n             anyChars \u003d wcs[wcsIdx].equals(\"*\");\n   \n             wcsIdx++;\n         }\n \n         // didnt match all wildcards\n         if (wcsIdx \u003c wcs.length) {\n             // ok if one remaining and wildcard or empty\n             if (wcsIdx + 1 !\u003d wcs.length || !(wcs[wcsIdx].equals(\"*\") || wcs[wcsIdx].equals(\"\")) ) {\n                 return false;\n             }\n         }\n   \n         // ran out of text chars\n-        if (textIdx \u003e text.length()) {\n+        if (textIdx \u003e filename.length()) {\n            return false;\n         }\n   \n         // didnt match all text chars, only ok if any chars set\n-        if (textIdx \u003c text.length() \u0026\u0026 !anyChars) {\n+        if (textIdx \u003c filename.length() \u0026\u0026 !anyChars) {\n             return false;\n         }\n   \n         return true;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Add commented out implementations of prefix handling, Javadoc\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140640 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1101085915000,
          "commitName": "f93f8bebb4fc714a6b60e1d2a4452d6ff6d3df5c",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1099196254000,
          "commitNameOld": "4694d5a982413a12bce4ce0e5570404b8cc7b1f7",
          "commitAuthorOld": "Henri Yandell",
          "daysBetweenCommits": 21.87,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,62 +1,61 @@\n-    public static boolean wildcardMatch(String text, String wildcard) {\n+    public static boolean wildcardMatch(String filename, String wildcard) {\n         String[] wcs \u003d splitOnTokens(wildcard);\n   \n         int textIdx \u003d 0;\n         int wcsIdx \u003d 0;\n         boolean anyChars \u003d false;\n   \n         // loop whilst tokens and text left to process\n-        while (wcsIdx \u003c wcs.length \u0026\u0026 textIdx \u003c text.length()) {\n+        while (wcsIdx \u003c wcs.length \u0026\u0026 textIdx \u003c filename.length()) {\n   \n             // ? so move to next text char\n             if (wcs[wcsIdx].equals(\"?\")) {\n                 textIdx++;\n-            } else\n-            if (!wcs[wcsIdx].equals(\"*\")) {\n+            } else if (!wcs[wcsIdx].equals(\"*\")) {\n                 // matching text token\n                 if (anyChars) {\n                     // any chars then try to locate text token\n-                    textIdx \u003d text.indexOf(wcs[wcsIdx], textIdx);\n+                    textIdx \u003d filename.indexOf(wcs[wcsIdx], textIdx);\n   \n                     if (textIdx \u003d\u003d -1) {\n                         // token not found\n                         return false;\n                     }\n                 } else {\n                     // matching from current position\n-                    if (!text.startsWith(wcs[wcsIdx], textIdx)) {\n+                    if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n                         // couldnt match token\n                         return false;\n                     }\n                 }\n   \n                 // matched text token, move text index to end of matched token\n                 textIdx +\u003d wcs[wcsIdx].length();\n             }\n   \n             // set any chars status\n             anyChars \u003d wcs[wcsIdx].equals(\"*\");\n   \n             wcsIdx++;\n         }\n \n         // didnt match all wildcards\n         if (wcsIdx \u003c wcs.length) {\n             // ok if one remaining and wildcard or empty\n             if (wcsIdx + 1 !\u003d wcs.length || !(wcs[wcsIdx].equals(\"*\") || wcs[wcsIdx].equals(\"\")) ) {\n                 return false;\n             }\n         }\n   \n         // ran out of text chars\n-        if (textIdx \u003e text.length()) {\n+        if (textIdx \u003e filename.length()) {\n            return false;\n         }\n   \n         // didnt match all text chars, only ok if any chars set\n-        if (textIdx \u003c text.length() \u0026\u0026 !anyChars) {\n+        if (textIdx \u003c filename.length() \u0026\u0026 !anyChars) {\n             return false;\n         }\n   \n         return true;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "4694d5a982413a12bce4ce0e5570404b8cc7b1f7": {
      "type": "Ymultichange(Ymovefromfile,Yrename)",
      "commitMessage": "merged WildcardUtils into FilenameUtils; thought the test case is still a separate file\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140639 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1099196254000,
      "commitName": "4694d5a982413a12bce4ce0e5570404b8cc7b1f7",
      "commitAuthor": "Henri Yandell",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "merged WildcardUtils into FilenameUtils; thought the test case is still a separate file\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140639 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1099196254000,
          "commitName": "4694d5a982413a12bce4ce0e5570404b8cc7b1f7",
          "commitAuthor": "Henri Yandell",
          "commitDateOld": 1099180983000,
          "commitNameOld": "4a61d8cf150c561fe24477350eb6de2bb41ef750",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.18,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,62 +1,62 @@\n-    public static boolean match(String text, String wildcard) {\n+    public static boolean wildcardMatch(String text, String wildcard) {\n         String[] wcs \u003d splitOnTokens(wildcard);\n   \n         int textIdx \u003d 0;\n         int wcsIdx \u003d 0;\n         boolean anyChars \u003d false;\n   \n         // loop whilst tokens and text left to process\n         while (wcsIdx \u003c wcs.length \u0026\u0026 textIdx \u003c text.length()) {\n   \n             // ? so move to next text char\n             if (wcs[wcsIdx].equals(\"?\")) {\n                 textIdx++;\n             } else\n             if (!wcs[wcsIdx].equals(\"*\")) {\n                 // matching text token\n                 if (anyChars) {\n                     // any chars then try to locate text token\n                     textIdx \u003d text.indexOf(wcs[wcsIdx], textIdx);\n   \n                     if (textIdx \u003d\u003d -1) {\n                         // token not found\n                         return false;\n                     }\n                 } else {\n                     // matching from current position\n                     if (!text.startsWith(wcs[wcsIdx], textIdx)) {\n                         // couldnt match token\n                         return false;\n                     }\n                 }\n   \n                 // matched text token, move text index to end of matched token\n                 textIdx +\u003d wcs[wcsIdx].length();\n             }\n   \n             // set any chars status\n             anyChars \u003d wcs[wcsIdx].equals(\"*\");\n   \n             wcsIdx++;\n         }\n \n         // didnt match all wildcards\n         if (wcsIdx \u003c wcs.length) {\n             // ok if one remaining and wildcard or empty\n             if (wcsIdx + 1 !\u003d wcs.length || !(wcs[wcsIdx].equals(\"*\") || wcs[wcsIdx].equals(\"\")) ) {\n                 return false;\n             }\n         }\n   \n         // ran out of text chars\n         if (textIdx \u003e text.length()) {\n            return false;\n         }\n   \n         // didnt match all text chars, only ok if any chars set\n         if (textIdx \u003c text.length() \u0026\u0026 !anyChars) {\n             return false;\n         }\n   \n         return true;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/java/org/apache/commons/io/WildcardUtils.java",
            "newPath": "src/java/org/apache/commons/io/FilenameUtils.java",
            "oldMethodName": "match",
            "newMethodName": "wildcardMatch"
          }
        },
        {
          "type": "Yrename",
          "commitMessage": "merged WildcardUtils into FilenameUtils; thought the test case is still a separate file\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140639 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1099196254000,
          "commitName": "4694d5a982413a12bce4ce0e5570404b8cc7b1f7",
          "commitAuthor": "Henri Yandell",
          "commitDateOld": 1099180983000,
          "commitNameOld": "4a61d8cf150c561fe24477350eb6de2bb41ef750",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.18,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,62 +1,62 @@\n-    public static boolean match(String text, String wildcard) {\n+    public static boolean wildcardMatch(String text, String wildcard) {\n         String[] wcs \u003d splitOnTokens(wildcard);\n   \n         int textIdx \u003d 0;\n         int wcsIdx \u003d 0;\n         boolean anyChars \u003d false;\n   \n         // loop whilst tokens and text left to process\n         while (wcsIdx \u003c wcs.length \u0026\u0026 textIdx \u003c text.length()) {\n   \n             // ? so move to next text char\n             if (wcs[wcsIdx].equals(\"?\")) {\n                 textIdx++;\n             } else\n             if (!wcs[wcsIdx].equals(\"*\")) {\n                 // matching text token\n                 if (anyChars) {\n                     // any chars then try to locate text token\n                     textIdx \u003d text.indexOf(wcs[wcsIdx], textIdx);\n   \n                     if (textIdx \u003d\u003d -1) {\n                         // token not found\n                         return false;\n                     }\n                 } else {\n                     // matching from current position\n                     if (!text.startsWith(wcs[wcsIdx], textIdx)) {\n                         // couldnt match token\n                         return false;\n                     }\n                 }\n   \n                 // matched text token, move text index to end of matched token\n                 textIdx +\u003d wcs[wcsIdx].length();\n             }\n   \n             // set any chars status\n             anyChars \u003d wcs[wcsIdx].equals(\"*\");\n   \n             wcsIdx++;\n         }\n \n         // didnt match all wildcards\n         if (wcsIdx \u003c wcs.length) {\n             // ok if one remaining and wildcard or empty\n             if (wcsIdx + 1 !\u003d wcs.length || !(wcs[wcsIdx].equals(\"*\") || wcs[wcsIdx].equals(\"\")) ) {\n                 return false;\n             }\n         }\n   \n         // ran out of text chars\n         if (textIdx \u003e text.length()) {\n            return false;\n         }\n   \n         // didnt match all text chars, only ok if any chars set\n         if (textIdx \u003c text.length() \u0026\u0026 !anyChars) {\n             return false;\n         }\n   \n         return true;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldMethodName": "match",
            "newMethodName": "wildcardMatch"
          }
        }
      ]
    },
    "fe44f3401d6d2b6c66eca32058de5bcd1f6facb9": {
      "type": "Yfilerename",
      "commitMessage": "moved WildcardUtils up a directory as it is used in two sub-packages of IO\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140620 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1098744928000,
      "commitName": "fe44f3401d6d2b6c66eca32058de5bcd1f6facb9",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": 1098744806000,
      "commitNameOld": "dfb79b3263d2a1f2c77e4d307e7af4e4341e604a",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/io/find/WildcardUtils.java",
        "newPath": "src/java/org/apache/commons/io/WildcardUtils.java"
      }
    },
    "400e99de58edf0d46a2b22818c37384a3ec9d122": {
      "type": "Ybodychange",
      "commitMessage": "More tests for WildcardUtils.match and a new implementation of the match method.\nMostly the same as Bugzilla #31115, though the old tests were kept and they\nshowed a bug.\n\nSubmitted by:\tJason Anderson\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140606 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1095826338000,
      "commitName": "400e99de58edf0d46a2b22818c37384a3ec9d122",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": 1095380089000,
      "commitNameOld": "4fbac940f62e0e5196498c3b7cb4ab909ce1a337",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 5.16,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,62 @@\n     public static boolean match(String text, String wildcard) {\n-        // split wildcard on ? and *\n-        // for each element of the array, find a matching block in text\n-        // earliest matching block counts\n         String[] wcs \u003d splitOnTokens(wildcard);\n+  \n         int textIdx \u003d 0;\n-        for(int i\u003d0; i\u003cwcs.length; i++) {\n-            if(textIdx \u003d\u003d text.length()) {\n-                if(\"*\".equals(wcs[i])) {\n-                    return true;\n-                }\n-                return wcs[i].length() \u003d\u003d 0;\n-            }\n-\n-            if(\"?\".equals(wcs[i])) {\n+        int wcsIdx \u003d 0;\n+        boolean anyChars \u003d false;\n+  \n+        // loop whilst tokens and text left to process\n+        while (wcsIdx \u003c wcs.length \u0026\u0026 textIdx \u003c text.length()) {\n+  \n+            // ? so move to next text char\n+            if (wcs[wcsIdx].equals(\"?\")) {\n                 textIdx++;\n             } else\n-            if(\"*\".equals(wcs[i])) {\n-                int nextIdx \u003d i+1;\n-                if(nextIdx \u003d\u003d wcs.length) {\n-                    return true;\n-                }\n-                int restartIdx \u003d text.indexOf(wcs[nextIdx], textIdx);\n-                if(restartIdx \u003d\u003d -1) {\n-                    return false;\n+            if (!wcs[wcsIdx].equals(\"*\")) {\n+                // matching text token\n+                if (anyChars) {\n+                    // any chars then try to locate text token\n+                    textIdx \u003d text.indexOf(wcs[wcsIdx], textIdx);\n+  \n+                    if (textIdx \u003d\u003d -1) {\n+                        // token not found\n+                        return false;\n+                    }\n                 } else {\n-                    textIdx \u003d restartIdx;\n+                    // matching from current position\n+                    if (!text.startsWith(wcs[wcsIdx], textIdx)) {\n+                        // couldnt match token\n+                        return false;\n+                    }\n                 }\n-            } else {\n-                if(!text.startsWith(wcs[i], textIdx)) {\n-                    return false;\n-                } else {\n-                    textIdx +\u003d wcs[i].length();\n-                }\n+  \n+                // matched text token, move text index to end of matched token\n+                textIdx +\u003d wcs[wcsIdx].length();\n             }\n+  \n+            // set any chars status\n+            anyChars \u003d wcs[wcsIdx].equals(\"*\");\n+  \n+            wcsIdx++;\n         }\n \n+        // didnt match all wildcards\n+        if (wcsIdx \u003c wcs.length) {\n+            // ok if one remaining and wildcard or empty\n+            if (wcsIdx + 1 !\u003d wcs.length || !(wcs[wcsIdx].equals(\"*\") || wcs[wcsIdx].equals(\"\")) ) {\n+                return false;\n+            }\n+        }\n+  \n+        // ran out of text chars\n+        if (textIdx \u003e text.length()) {\n+           return false;\n+        }\n+  \n+        // didnt match all text chars, only ok if any chars set\n+        if (textIdx \u003c text.length() \u0026\u0026 !anyChars) {\n+            return false;\n+        }\n+  \n         return true;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4fbac940f62e0e5196498c3b7cb4ab909ce1a337": {
      "type": "Yintroduced",
      "commitMessage": "added finding subsystem to IO along with WildcardUtils\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140602 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1095380089000,
      "commitName": "4fbac940f62e0e5196498c3b7cb4ab909ce1a337",
      "commitAuthor": "Henri Yandell"
    }
  }
}