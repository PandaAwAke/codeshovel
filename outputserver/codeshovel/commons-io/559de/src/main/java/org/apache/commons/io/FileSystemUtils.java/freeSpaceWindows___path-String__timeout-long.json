{
  "origin": "codeshovel",
  "repositoryName": "commons-io",
  "repositoryPath": "/repos/commons-io/.git",
  "startCommitName": "559de2c461e94ab636c959149c775bb27111fb48",
  "sourceFileName": "FileSystemUtils.java",
  "functionName": "freeSpaceWindows",
  "functionId": "freeSpaceWindows___path-String__timeout-long",
  "sourceFilePath": "src/main/java/org/apache/commons/io/FileSystemUtils.java",
  "functionStartLine": 303,
  "functionEndLine": 332,
  "changeHistory": [
    "14b52eb4f630f32c66122977331bd894b9474978",
    "5899f1eb7239ea26291b9e38490f5922b86158d8",
    "6aa00766b9103d75c763160280429af8e1f0549e",
    "cea203aefcd63400f4ab8239a6def11d592922de",
    "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a",
    "a360f974003c5c60c16d019e873314c09d965107",
    "a8d59e345210ca6fd3fc426ab7fb7b3c2563cb04",
    "ab42367cc639fa3b18786d13afdc17a3394f229f",
    "efe745c047c6f63eb85ee0b2b4d93c3544c31e97",
    "0a03609ddc6380dd7c9053eb8cb04072baa476a1",
    "9a91b208cd1c02d4faf782655109bb6fba96465e",
    "9004f534a046b5b8a6f87edf2426f24a291fd2ab",
    "15aebb582ea14708144e27263de0a6fdcc402af9",
    "4cd33ce31d4245281432320a7f4f4cf6b541c690",
    "dcb61e575021a61d9e1694ccdf300f5d028f5b1f"
  ],
  "changeHistoryShort": {
    "14b52eb4f630f32c66122977331bd894b9474978": "Yparametermetachange",
    "5899f1eb7239ea26291b9e38490f5922b86158d8": "Ybodychange",
    "6aa00766b9103d75c763160280429af8e1f0549e": "Ymultichange(Ybodychange,Yparametermetachange)",
    "cea203aefcd63400f4ab8239a6def11d592922de": "Ybodychange",
    "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a": "Yfilerename",
    "a360f974003c5c60c16d019e873314c09d965107": "Ybodychange",
    "a8d59e345210ca6fd3fc426ab7fb7b3c2563cb04": "Ybodychange",
    "ab42367cc639fa3b18786d13afdc17a3394f229f": "Ymultichange(Yparameterchange,Ybodychange)",
    "efe745c047c6f63eb85ee0b2b4d93c3544c31e97": "Ybodychange",
    "0a03609ddc6380dd7c9053eb8cb04072baa476a1": "Ybodychange",
    "9a91b208cd1c02d4faf782655109bb6fba96465e": "Ybodychange",
    "9004f534a046b5b8a6f87edf2426f24a291fd2ab": "Ymultichange(Yrename,Ymodifierchange)",
    "15aebb582ea14708144e27263de0a6fdcc402af9": "Ybodychange",
    "4cd33ce31d4245281432320a7f4f4cf6b541c690": "Ymultichange(Ymodifierchange,Ybodychange)",
    "dcb61e575021a61d9e1694ccdf300f5d028f5b1f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "14b52eb4f630f32c66122977331bd894b9474978": {
      "type": "Yparametermetachange",
      "commitMessage": "Use final for parameters.",
      "commitDate": 1506540583000,
      "commitName": "14b52eb4f630f32c66122977331bd894b9474978",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": 1504812787000,
      "commitNameOld": "5899f1eb7239ea26291b9e38490f5922b86158d8",
      "commitAuthorOld": "Gary Gregory",
      "daysBetweenCommits": 20.0,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n-    long freeSpaceWindows(String path, final long timeout) throws IOException {\n+    long freeSpaceWindows(final String path, final long timeout) throws IOException {\n         String normPath \u003d FilenameUtils.normalize(path, false);\n         if (normPath \u003d\u003d null) {\n             throw new IllegalArgumentException(path);\n         }\n         if (normPath.length() \u003e 0 \u0026\u0026 normPath.charAt(0) !\u003d \u0027\"\u0027) {\n             normPath \u003d \"\\\"\" + normPath + \"\\\"\";\n         }\n \n         // build and run the \u0027dir\u0027 command\n         final String[] cmdAttribs \u003d new String[] {\"cmd.exe\", \"/C\", \"dir /a /-c \" + normPath};\n \n         // read in the output of the command to an ArrayList\n         final List\u003cString\u003e lines \u003d performCommand(cmdAttribs, Integer.MAX_VALUE, timeout);\n \n         // now iterate over the lines we just read and find the LAST\n         // non-empty line (the free space bytes should be in the last element\n         // of the ArrayList anyway, but this will ensure it works even if it\u0027s\n         // not, still assuming it is on the last non-blank line)\n         for (int i \u003d lines.size() - 1; i \u003e\u003d 0; i--) {\n             final String line \u003d lines.get(i);\n             if (line.length() \u003e 0) {\n                 return parseDir(line, normPath);\n             }\n         }\n         // all lines are blank\n         throw new IOException(\n                 \"Command line \u0027dir /-c\u0027 did not return any info \" +\n                 \"for path \u0027\" + normPath + \"\u0027\");\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5899f1eb7239ea26291b9e38490f5922b86158d8": {
      "type": "Ybodychange",
      "commitMessage": "[IO-547] Throw a IllegalArgumentException instead of\nNullPointerException in FileSystemUtils.freeSpaceWindows().",
      "commitDate": 1504812787000,
      "commitName": "5899f1eb7239ea26291b9e38490f5922b86158d8",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": 1478734709000,
      "commitNameOld": "7479b372cd4291d2a51e51dd10690952d9fd7019",
      "commitAuthorOld": "pascalschumacher",
      "daysBetweenCommits": 301.83,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,30 @@\n     long freeSpaceWindows(String path, final long timeout) throws IOException {\n-        path \u003d FilenameUtils.normalize(path, false);\n-        if (path.length() \u003e 0 \u0026\u0026 path.charAt(0) !\u003d \u0027\"\u0027) {\n-            path \u003d \"\\\"\" + path + \"\\\"\";\n+        String normPath \u003d FilenameUtils.normalize(path, false);\n+        if (normPath \u003d\u003d null) {\n+            throw new IllegalArgumentException(path);\n+        }\n+        if (normPath.length() \u003e 0 \u0026\u0026 normPath.charAt(0) !\u003d \u0027\"\u0027) {\n+            normPath \u003d \"\\\"\" + normPath + \"\\\"\";\n         }\n \n         // build and run the \u0027dir\u0027 command\n-        final String[] cmdAttribs \u003d new String[] {\"cmd.exe\", \"/C\", \"dir /a /-c \" + path};\n+        final String[] cmdAttribs \u003d new String[] {\"cmd.exe\", \"/C\", \"dir /a /-c \" + normPath};\n \n         // read in the output of the command to an ArrayList\n         final List\u003cString\u003e lines \u003d performCommand(cmdAttribs, Integer.MAX_VALUE, timeout);\n \n         // now iterate over the lines we just read and find the LAST\n         // non-empty line (the free space bytes should be in the last element\n         // of the ArrayList anyway, but this will ensure it works even if it\u0027s\n         // not, still assuming it is on the last non-blank line)\n         for (int i \u003d lines.size() - 1; i \u003e\u003d 0; i--) {\n             final String line \u003d lines.get(i);\n             if (line.length() \u003e 0) {\n-                return parseDir(line, path);\n+                return parseDir(line, normPath);\n             }\n         }\n         // all lines are blank\n         throw new IOException(\n                 \"Command line \u0027dir /-c\u0027 did not return any info \" +\n-                \"for path \u0027\" + path + \"\u0027\");\n+                \"for path \u0027\" + normPath + \"\u0027\");\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6aa00766b9103d75c763160280429af8e1f0549e": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1354308699000,
      "commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
      "commitAuthor": "Gary D. Gregory",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1354308699000,
          "commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": 1332449729000,
          "commitNameOld": "cf5c462807a137b823a3155dfe9800b3cbf2303d",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 253.0,
          "commitsBetweenForRepo": 182,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n-    long freeSpaceWindows(String path, long timeout) throws IOException {\n+    long freeSpaceWindows(String path, final long timeout) throws IOException {\n         path \u003d FilenameUtils.normalize(path, false);\n         if (path.length() \u003e 0 \u0026\u0026 path.charAt(0) !\u003d \u0027\"\u0027) {\n             path \u003d \"\\\"\" + path + \"\\\"\";\n         }\n         \n         // build and run the \u0027dir\u0027 command\n-        String[] cmdAttribs \u003d new String[] {\"cmd.exe\", \"/C\", \"dir /a /-c \" + path};\n+        final String[] cmdAttribs \u003d new String[] {\"cmd.exe\", \"/C\", \"dir /a /-c \" + path};\n         \n         // read in the output of the command to an ArrayList\n-        List\u003cString\u003e lines \u003d performCommand(cmdAttribs, Integer.MAX_VALUE, timeout);\n+        final List\u003cString\u003e lines \u003d performCommand(cmdAttribs, Integer.MAX_VALUE, timeout);\n         \n         // now iterate over the lines we just read and find the LAST\n         // non-empty line (the free space bytes should be in the last element\n         // of the ArrayList anyway, but this will ensure it works even if it\u0027s\n         // not, still assuming it is on the last non-blank line)\n         for (int i \u003d lines.size() - 1; i \u003e\u003d 0; i--) {\n-            String line \u003d lines.get(i);\n+            final String line \u003d lines.get(i);\n             if (line.length() \u003e 0) {\n                 return parseDir(line, path);\n             }\n         }\n         // all lines are blank\n         throw new IOException(\n                 \"Command line \u0027dir /-c\u0027 did not return any info \" +\n                 \"for path \u0027\" + path + \"\u0027\");\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1354308699000,
          "commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": 1332449729000,
          "commitNameOld": "cf5c462807a137b823a3155dfe9800b3cbf2303d",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 253.0,
          "commitsBetweenForRepo": 182,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n-    long freeSpaceWindows(String path, long timeout) throws IOException {\n+    long freeSpaceWindows(String path, final long timeout) throws IOException {\n         path \u003d FilenameUtils.normalize(path, false);\n         if (path.length() \u003e 0 \u0026\u0026 path.charAt(0) !\u003d \u0027\"\u0027) {\n             path \u003d \"\\\"\" + path + \"\\\"\";\n         }\n         \n         // build and run the \u0027dir\u0027 command\n-        String[] cmdAttribs \u003d new String[] {\"cmd.exe\", \"/C\", \"dir /a /-c \" + path};\n+        final String[] cmdAttribs \u003d new String[] {\"cmd.exe\", \"/C\", \"dir /a /-c \" + path};\n         \n         // read in the output of the command to an ArrayList\n-        List\u003cString\u003e lines \u003d performCommand(cmdAttribs, Integer.MAX_VALUE, timeout);\n+        final List\u003cString\u003e lines \u003d performCommand(cmdAttribs, Integer.MAX_VALUE, timeout);\n         \n         // now iterate over the lines we just read and find the LAST\n         // non-empty line (the free space bytes should be in the last element\n         // of the ArrayList anyway, but this will ensure it works even if it\u0027s\n         // not, still assuming it is on the last non-blank line)\n         for (int i \u003d lines.size() - 1; i \u003e\u003d 0; i--) {\n-            String line \u003d lines.get(i);\n+            final String line \u003d lines.get(i);\n             if (line.length() \u003e 0) {\n                 return parseDir(line, path);\n             }\n         }\n         // all lines are blank\n         throw new IOException(\n                 \"Command line \u0027dir /-c\u0027 did not return any info \" +\n                 \"for path \u0027\" + path + \"\u0027\");\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "cea203aefcd63400f4ab8239a6def11d592922de": {
      "type": "Ybodychange",
      "commitMessage": "IO-263 FileSystemUtils.freeSpaceKb throws exception for Windows volumes with no visible files.\nImprove coverage by also looking for hidden files.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1090779 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1302434815000,
      "commitName": "cea203aefcd63400f4ab8239a6def11d592922de",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": 1286218476000,
      "commitNameOld": "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 187.69,
      "commitsBetweenForRepo": 115,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n     long freeSpaceWindows(String path, long timeout) throws IOException {\n         path \u003d FilenameUtils.normalize(path, false);\n         if (path.length() \u003e 0 \u0026\u0026 path.charAt(0) !\u003d \u0027\"\u0027) {\n             path \u003d \"\\\"\" + path + \"\\\"\";\n         }\n         \n         // build and run the \u0027dir\u0027 command\n-        String[] cmdAttribs \u003d new String[] {\"cmd.exe\", \"/C\", \"dir /-c \" + path};\n+        String[] cmdAttribs \u003d new String[] {\"cmd.exe\", \"/C\", \"dir /a /-c \" + path};\n         \n         // read in the output of the command to an ArrayList\n         List\u003cString\u003e lines \u003d performCommand(cmdAttribs, Integer.MAX_VALUE, timeout);\n         \n         // now iterate over the lines we just read and find the LAST\n         // non-empty line (the free space bytes should be in the last element\n         // of the ArrayList anyway, but this will ensure it works even if it\u0027s\n         // not, still assuming it is on the last non-blank line)\n         for (int i \u003d lines.size() - 1; i \u003e\u003d 0; i--) {\n             String line \u003d lines.get(i);\n             if (line.length() \u003e 0) {\n                 return parseDir(line, path);\n             }\n         }\n         // all lines are blank\n         throw new IOException(\n                 \"Command line \u0027dir /-c\u0027 did not return any info \" +\n                 \"for path \u0027\" + path + \"\u0027\");\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a": {
      "type": "Yfilerename",
      "commitMessage": "Build changes - re-organize to standard m2 layout, remove useless JIRA report and fix some Ant issues\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1004358 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1286218476000,
      "commitName": "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": 1286214840000,
      "commitNameOld": "19f48eb1711427a43a5e10c84bbbf1218a08bdd2",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/io/FileSystemUtils.java",
        "newPath": "src/main/java/org/apache/commons/io/FileSystemUtils.java"
      }
    },
    "a360f974003c5c60c16d019e873314c09d965107": {
      "type": "Ybodychange",
      "commitMessage": "IO-209 Fix test failing on Unix - freeSpaceWindows() should always normalize files to Windows (even for the MockFileSystemUtils on Unix)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1002917 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1285808015000,
      "commitName": "a360f974003c5c60c16d019e873314c09d965107",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": 1285788610000,
      "commitNameOld": "a8d59e345210ca6fd3fc426ab7fb7b3c2563cb04",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 0.22,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n     long freeSpaceWindows(String path, long timeout) throws IOException {\n-        path \u003d FilenameUtils.normalize(path);\n+        path \u003d FilenameUtils.normalize(path, false);\n         if (path.length() \u003e 0 \u0026\u0026 path.charAt(0) !\u003d \u0027\"\u0027) {\n             path \u003d \"\\\"\" + path + \"\\\"\";\n         }\n         \n         // build and run the \u0027dir\u0027 command\n         String[] cmdAttribs \u003d new String[] {\"cmd.exe\", \"/C\", \"dir /-c \" + path};\n         \n         // read in the output of the command to an ArrayList\n         List\u003cString\u003e lines \u003d performCommand(cmdAttribs, Integer.MAX_VALUE, timeout);\n         \n         // now iterate over the lines we just read and find the LAST\n         // non-empty line (the free space bytes should be in the last element\n         // of the ArrayList anyway, but this will ensure it works even if it\u0027s\n         // not, still assuming it is on the last non-blank line)\n         for (int i \u003d lines.size() - 1; i \u003e\u003d 0; i--) {\n             String line \u003d lines.get(i);\n             if (line.length() \u003e 0) {\n                 return parseDir(line, path);\n             }\n         }\n         // all lines are blank\n         throw new IOException(\n                 \"Command line \u0027dir /-c\u0027 did not return any info \" +\n                 \"for path \u0027\" + path + \"\u0027\");\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a8d59e345210ca6fd3fc426ab7fb7b3c2563cb04": {
      "type": "Ybodychange",
      "commitMessage": "IO-209 FileSystemUtils freeSpaceKb fails to return correct size for a windows mount point - reported by Aditya Kishore\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1002819 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1285788610000,
      "commitName": "a8d59e345210ca6fd3fc426ab7fb7b3c2563cb04",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": 1285775331000,
      "commitNameOld": "0e7c3a88a727f307e2d38701f8117ae59e019e93",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n     long freeSpaceWindows(String path, long timeout) throws IOException {\n         path \u003d FilenameUtils.normalize(path);\n-        if (path.length() \u003e 2 \u0026\u0026 path.charAt(1) \u003d\u003d \u0027:\u0027) {\n-            path \u003d path.substring(0, 2);  // seems to make it work\n+        if (path.length() \u003e 0 \u0026\u0026 path.charAt(0) !\u003d \u0027\"\u0027) {\n+            path \u003d \"\\\"\" + path + \"\\\"\";\n         }\n         \n         // build and run the \u0027dir\u0027 command\n         String[] cmdAttribs \u003d new String[] {\"cmd.exe\", \"/C\", \"dir /-c \" + path};\n         \n         // read in the output of the command to an ArrayList\n         List\u003cString\u003e lines \u003d performCommand(cmdAttribs, Integer.MAX_VALUE, timeout);\n         \n         // now iterate over the lines we just read and find the LAST\n         // non-empty line (the free space bytes should be in the last element\n         // of the ArrayList anyway, but this will ensure it works even if it\u0027s\n         // not, still assuming it is on the last non-blank line)\n         for (int i \u003d lines.size() - 1; i \u003e\u003d 0; i--) {\n             String line \u003d lines.get(i);\n             if (line.length() \u003e 0) {\n                 return parseDir(line, path);\n             }\n         }\n         // all lines are blank\n         throw new IOException(\n                 \"Command line \u0027dir /-c\u0027 did not return any info \" +\n                 \"for path \u0027\" + path + \"\u0027\");\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ab42367cc639fa3b18786d13afdc17a3394f229f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "IO-185 FileSystemUtils add freeSpaceKb() methods that take a timeout parameter - fixes FileSystemUtils.freeSpaceWindows blocks - reported by Martin Thelian\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1002689 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1285775028000,
      "commitName": "ab42367cc639fa3b18786d13afdc17a3394f229f",
      "commitAuthor": "Niall Pemberton",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "IO-185 FileSystemUtils add freeSpaceKb() methods that take a timeout parameter - fixes FileSystemUtils.freeSpaceWindows blocks - reported by Martin Thelian\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1002689 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1285775028000,
          "commitName": "ab42367cc639fa3b18786d13afdc17a3394f229f",
          "commitAuthor": "Niall Pemberton",
          "commitDateOld": 1267841266000,
          "commitNameOld": "1282c294a11e637b3830d84ee87a4b3bcf823bc6",
          "commitAuthorOld": "Sebastian Bazley",
          "daysBetweenCommits": 207.57,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n-    long freeSpaceWindows(String path) throws IOException {\n+    long freeSpaceWindows(String path, long timeout) throws IOException {\n         path \u003d FilenameUtils.normalize(path);\n         if (path.length() \u003e 2 \u0026\u0026 path.charAt(1) \u003d\u003d \u0027:\u0027) {\n             path \u003d path.substring(0, 2);  // seems to make it work\n         }\n         \n         // build and run the \u0027dir\u0027 command\n         String[] cmdAttribs \u003d new String[] {\"cmd.exe\", \"/C\", \"dir /-c \" + path};\n         \n         // read in the output of the command to an ArrayList\n-        List\u003cString\u003e lines \u003d performCommand(cmdAttribs, Integer.MAX_VALUE);\n+        List\u003cString\u003e lines \u003d performCommand(cmdAttribs, Integer.MAX_VALUE, timeout);\n         \n         // now iterate over the lines we just read and find the LAST\n         // non-empty line (the free space bytes should be in the last element\n         // of the ArrayList anyway, but this will ensure it works even if it\u0027s\n         // not, still assuming it is on the last non-blank line)\n         for (int i \u003d lines.size() - 1; i \u003e\u003d 0; i--) {\n             String line \u003d lines.get(i);\n             if (line.length() \u003e 0) {\n                 return parseDir(line, path);\n             }\n         }\n         // all lines are blank\n         throw new IOException(\n                 \"Command line \u0027dir /-c\u0027 did not return any info \" +\n                 \"for path \u0027\" + path + \"\u0027\");\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ybodychange",
          "commitMessage": "IO-185 FileSystemUtils add freeSpaceKb() methods that take a timeout parameter - fixes FileSystemUtils.freeSpaceWindows blocks - reported by Martin Thelian\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1002689 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1285775028000,
          "commitName": "ab42367cc639fa3b18786d13afdc17a3394f229f",
          "commitAuthor": "Niall Pemberton",
          "commitDateOld": 1267841266000,
          "commitNameOld": "1282c294a11e637b3830d84ee87a4b3bcf823bc6",
          "commitAuthorOld": "Sebastian Bazley",
          "daysBetweenCommits": 207.57,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n-    long freeSpaceWindows(String path) throws IOException {\n+    long freeSpaceWindows(String path, long timeout) throws IOException {\n         path \u003d FilenameUtils.normalize(path);\n         if (path.length() \u003e 2 \u0026\u0026 path.charAt(1) \u003d\u003d \u0027:\u0027) {\n             path \u003d path.substring(0, 2);  // seems to make it work\n         }\n         \n         // build and run the \u0027dir\u0027 command\n         String[] cmdAttribs \u003d new String[] {\"cmd.exe\", \"/C\", \"dir /-c \" + path};\n         \n         // read in the output of the command to an ArrayList\n-        List\u003cString\u003e lines \u003d performCommand(cmdAttribs, Integer.MAX_VALUE);\n+        List\u003cString\u003e lines \u003d performCommand(cmdAttribs, Integer.MAX_VALUE, timeout);\n         \n         // now iterate over the lines we just read and find the LAST\n         // non-empty line (the free space bytes should be in the last element\n         // of the ArrayList anyway, but this will ensure it works even if it\u0027s\n         // not, still assuming it is on the last non-blank line)\n         for (int i \u003d lines.size() - 1; i \u003e\u003d 0; i--) {\n             String line \u003d lines.get(i);\n             if (line.length() \u003e 0) {\n                 return parseDir(line, path);\n             }\n         }\n         // all lines are blank\n         throw new IOException(\n                 \"Command line \u0027dir /-c\u0027 did not return any info \" +\n                 \"for path \u0027\" + path + \"\u0027\");\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "efe745c047c6f63eb85ee0b2b4d93c3544c31e97": {
      "type": "Ybodychange",
      "commitMessage": "Fix raw type\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@634483 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1204851016000,
      "commitName": "efe745c047c6f63eb85ee0b2b4d93c3544c31e97",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": 1202503655000,
      "commitNameOld": "75e05a81366582417d54a04ef5204e9d76894271",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 27.17,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n     long freeSpaceWindows(String path) throws IOException {\n         path \u003d FilenameUtils.normalize(path);\n         if (path.length() \u003e 2 \u0026\u0026 path.charAt(1) \u003d\u003d \u0027:\u0027) {\n             path \u003d path.substring(0, 2);  // seems to make it work\n         }\n         \n         // build and run the \u0027dir\u0027 command\n         String[] cmdAttribs \u003d new String[] {\"cmd.exe\", \"/C\", \"dir /-c \" + path};\n         \n         // read in the output of the command to an ArrayList\n-        List lines \u003d performCommand(cmdAttribs, Integer.MAX_VALUE);\n+        List\u003cString\u003e lines \u003d performCommand(cmdAttribs, Integer.MAX_VALUE);\n         \n         // now iterate over the lines we just read and find the LAST\n         // non-empty line (the free space bytes should be in the last element\n         // of the ArrayList anyway, but this will ensure it works even if it\u0027s\n         // not, still assuming it is on the last non-blank line)\n         for (int i \u003d lines.size() - 1; i \u003e\u003d 0; i--) {\n-            String line \u003d (String) lines.get(i);\n+            String line \u003d lines.get(i);\n             if (line.length() \u003e 0) {\n                 return parseDir(line, path);\n             }\n         }\n         // all lines are blank\n         throw new IOException(\n                 \"Command line \u0027dir /-c\u0027 did not return any info \" +\n                 \"for path \u0027\" + path + \"\u0027\");\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0a03609ddc6380dd7c9053eb8cb04072baa476a1": {
      "type": "Ybodychange",
      "commitMessage": "IO-90 - Fix freeSpace to avoid infinite loops and other errors\nincludes some code from Thomas Ledoux\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@437031 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1156550888000,
      "commitName": "0a03609ddc6380dd7c9053eb8cb04072baa476a1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": 1156541946000,
      "commitNameOld": "eaa8e0c698f694b7e5fdded5dbb9024c8cf15c4e",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,83 +1,27 @@\n     long freeSpaceWindows(String path) throws IOException {\n         path \u003d FilenameUtils.normalize(path);\n         if (path.length() \u003e 2 \u0026\u0026 path.charAt(1) \u003d\u003d \u0027:\u0027) {\n             path \u003d path.substring(0, 2);  // seems to make it work\n         }\n-\n+        \n         // build and run the \u0027dir\u0027 command\n-        String[] cmdAttrbs \u003d new String[] {\"cmd.exe\", \"/C\", \"dir /-c \" + path};\n-\n+        String[] cmdAttribs \u003d new String[] {\"cmd.exe\", \"/C\", \"dir /-c \" + path};\n+        \n         // read in the output of the command to an ArrayList\n-        BufferedReader in \u003d null;\n-        String line \u003d null;\n-        ArrayList lines \u003d new ArrayList();\n-        try {\n-            in \u003d openProcessStream(cmdAttrbs);\n-            line \u003d in.readLine();\n-            while (line !\u003d null) {\n-                line \u003d line.toLowerCase().trim();\n-                lines.add(line);\n-                line \u003d in.readLine();\n-            }\n-        } finally {\n-            IOUtils.closeQuietly(in);\n-        }\n-\n-        if (lines.size() \u003d\u003d 0) {\n-            // unknown problem, throw exception\n-            throw new IOException(\n-                    \"Command line \u0027dir /c\u0027 did not return any info \" +\n-                    \"for command \u0027\" + cmdAttrbs[2] + \"\u0027\");\n-        }\n-\n+        List lines \u003d performCommand(cmdAttribs, Integer.MAX_VALUE);\n+        \n         // now iterate over the lines we just read and find the LAST\n         // non-empty line (the free space bytes should be in the last element\n         // of the ArrayList anyway, but this will ensure it works even if it\u0027s\n         // not, still assuming it is on the last non-blank line)\n-        long bytes \u003d -1;\n-        int i \u003d lines.size() - 1;\n-        int bytesStart \u003d 0;\n-        int bytesEnd \u003d 0;\n-        outerLoop: while (i \u003e 0) {\n-            line \u003d (String) lines.get(i);\n+        for (int i \u003d lines.size() - 1; i \u003e\u003d 0; i--) {\n+            String line \u003d (String) lines.get(i);\n             if (line.length() \u003e 0) {\n-                // found it, so now read from the end of the line to find the\n-                // last numeric character on the line, then continue until we\n-                // find the first non-numeric character, and everything between\n-                // that and the last numeric character inclusive is our free\n-                // space bytes count\n-                int j \u003d line.length() - 1;\n-                innerLoop1: while (j \u003e\u003d 0) {\n-                    char c \u003d line.charAt(j);\n-                    if (Character.isDigit(c)) {\n-                      // found the last numeric character, this is the end of\n-                      // the free space bytes count\n-                      bytesEnd \u003d j + 1;\n-                      break innerLoop1;\n-                    }\n-                    j--;\n-                }\n-                innerLoop2: while (j \u003e\u003d 0) {\n-                    char c \u003d line.charAt(j);\n-                    if (!Character.isDigit(c) \u0026\u0026 c !\u003d \u0027,\u0027 \u0026\u0026 c !\u003d \u0027.\u0027) {\n-                      // found the next non-numeric character, this is the\n-                      // beginning of the free space bytes count\n-                      bytesStart \u003d j + 1;\n-                      break innerLoop2;\n-                    }\n-                    j--;\n-                }\n-                break outerLoop;\n+                return parseDir(line, path);\n             }\n         }\n-\n-        // remove commas and dots in the bytes count\n-        StringBuffer buf \u003d new StringBuffer(line.substring(bytesStart, bytesEnd));\n-        for (int k \u003d 0; k \u003c buf.length(); k++) {\n-            if (buf.charAt(k) \u003d\u003d \u0027,\u0027 || buf.charAt(k) \u003d\u003d \u0027.\u0027) {\n-                buf.deleteCharAt(k--);\n-            }\n-        }\n-        bytes \u003d Long.parseLong(buf.toString());\n-        return bytes;\n+        // all lines are blank\n+        throw new IOException(\n+                \"Command line \u0027dir /-c\u0027 did not return any info \" +\n+                \"for path \u0027\" + path + \"\u0027\");\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9a91b208cd1c02d4faf782655109bb6fba96465e": {
      "type": "Ybodychange",
      "commitMessage": "Switch to using dir /-c in FileSystemUtils.freeSpace for French locale\nbug 37027, from Thomas Ledoux\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@321346 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1129389207000,
      "commitName": "9a91b208cd1c02d4faf782655109bb6fba96465e",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": 1128207640000,
      "commitNameOld": "00d13c428343b50e46bf00b32427b3a172c7831d",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 13.68,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,83 +1,83 @@\n     long freeSpaceWindows(String path) throws IOException {\n         path \u003d FilenameUtils.normalize(path);\n         if (path.length() \u003e 2 \u0026\u0026 path.charAt(1) \u003d\u003d \u0027:\u0027) {\n             path \u003d path.substring(0, 2);  // seems to make it work\n         }\n \n         // build and run the \u0027dir\u0027 command\n-        String[] cmdAttrbs \u003d new String[] {\"cmd.exe\", \"/C\", \"dir /c \" + path};\n+        String[] cmdAttrbs \u003d new String[] {\"cmd.exe\", \"/C\", \"dir /-c \" + path};\n \n         // read in the output of the command to an ArrayList\n         BufferedReader in \u003d null;\n         String line \u003d null;\n         ArrayList lines \u003d new ArrayList();\n         try {\n             in \u003d openProcessStream(cmdAttrbs);\n             line \u003d in.readLine();\n             while (line !\u003d null) {\n                 line \u003d line.toLowerCase().trim();\n                 lines.add(line);\n                 line \u003d in.readLine();\n             }\n         } finally {\n             IOUtils.closeQuietly(in);\n         }\n \n         if (lines.size() \u003d\u003d 0) {\n             // unknown problem, throw exception\n             throw new IOException(\n                     \"Command line \u0027dir /c\u0027 did not return any info \" +\n                     \"for command \u0027\" + cmdAttrbs[2] + \"\u0027\");\n         }\n \n         // now iterate over the lines we just read and find the LAST\n         // non-empty line (the free space bytes should be in the last element\n         // of the ArrayList anyway, but this will ensure it works even if it\u0027s\n         // not, still assuming it is on the last non-blank line)\n         long bytes \u003d -1;\n         int i \u003d lines.size() - 1;\n         int bytesStart \u003d 0;\n         int bytesEnd \u003d 0;\n         outerLoop: while (i \u003e 0) {\n             line \u003d (String) lines.get(i);\n             if (line.length() \u003e 0) {\n                 // found it, so now read from the end of the line to find the\n                 // last numeric character on the line, then continue until we\n                 // find the first non-numeric character, and everything between\n                 // that and the last numeric character inclusive is our free\n                 // space bytes count\n                 int j \u003d line.length() - 1;\n                 innerLoop1: while (j \u003e\u003d 0) {\n                     char c \u003d line.charAt(j);\n                     if (Character.isDigit(c)) {\n                       // found the last numeric character, this is the end of\n                       // the free space bytes count\n                       bytesEnd \u003d j + 1;\n                       break innerLoop1;\n                     }\n                     j--;\n                 }\n                 innerLoop2: while (j \u003e\u003d 0) {\n                     char c \u003d line.charAt(j);\n                     if (!Character.isDigit(c) \u0026\u0026 c !\u003d \u0027,\u0027 \u0026\u0026 c !\u003d \u0027.\u0027) {\n                       // found the next non-numeric character, this is the\n                       // beginning of the free space bytes count\n                       bytesStart \u003d j + 1;\n                       break innerLoop2;\n                     }\n                     j--;\n                 }\n                 break outerLoop;\n             }\n         }\n \n         // remove commas and dots in the bytes count\n         StringBuffer buf \u003d new StringBuffer(line.substring(bytesStart, bytesEnd));\n         for (int k \u003d 0; k \u003c buf.length(); k++) {\n             if (buf.charAt(k) \u003d\u003d \u0027,\u0027 || buf.charAt(k) \u003d\u003d \u0027.\u0027) {\n                 buf.deleteCharAt(k--);\n             }\n         }\n         bytes \u003d Long.parseLong(buf.toString());\n         return bytes;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9004f534a046b5b8a6f87edf2426f24a291fd2ab": {
      "type": "Ymultichange(Yrename,Ymodifierchange)",
      "commitMessage": "Rename the free space method to be commons-io like\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@291741 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1127767185000,
      "commitName": "9004f534a046b5b8a6f87edf2426f24a291fd2ab",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Rename the free space method to be commons-io like\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@291741 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1127767185000,
          "commitName": "9004f534a046b5b8a6f87edf2426f24a291fd2ab",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1127085165000,
          "commitNameOld": "990ea5d016b6ebc1961be059ba9aab0f5079683b",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 7.89,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,83 +1,83 @@\n-    protected long getFreeSpaceWindows(String path) throws IOException {\n+    long freeSpaceWindows(String path) throws IOException {\n         path \u003d FilenameUtils.normalize(path);\n         if (path.length() \u003e 2 \u0026\u0026 path.charAt(1) \u003d\u003d \u0027:\u0027) {\n             path \u003d path.substring(0, 2);  // seems to make it work\n         }\n \n         // build and run the \u0027dir\u0027 command\n         String[] cmdAttrbs \u003d new String[] {\"cmd.exe\", \"/C\", \"dir /c \" + path};\n \n         // read in the output of the command to an ArrayList\n         BufferedReader in \u003d null;\n         String line \u003d null;\n         ArrayList lines \u003d new ArrayList();\n         try {\n             in \u003d openProcessStream(cmdAttrbs);\n             line \u003d in.readLine();\n             while (line !\u003d null) {\n                 line \u003d line.toLowerCase().trim();\n                 lines.add(line);\n                 line \u003d in.readLine();\n             }\n         } finally {\n             IOUtils.closeQuietly(in);\n         }\n \n         if (lines.size() \u003d\u003d 0) {\n             // unknown problem, throw exception\n             throw new IOException(\n                     \"Command line \u0027dir /c\u0027 did not return any info \" +\n                     \"for command \u0027\" + cmdAttrbs[2] + \"\u0027\");\n         }\n \n         // now iterate over the lines we just read and find the LAST\n         // non-empty line (the free space bytes should be in the last element\n         // of the ArrayList anyway, but this will ensure it works even if it\u0027s\n         // not, still assuming it is on the last non-blank line)\n         long bytes \u003d -1;\n         int i \u003d lines.size() - 1;\n         int bytesStart \u003d 0;\n         int bytesEnd \u003d 0;\n         outerLoop: while (i \u003e 0) {\n             line \u003d (String) lines.get(i);\n             if (line.length() \u003e 0) {\n                 // found it, so now read from the end of the line to find the\n                 // last numeric character on the line, then continue until we\n                 // find the first non-numeric character, and everything between\n                 // that and the last numeric character inclusive is our free\n                 // space bytes count\n                 int j \u003d line.length() - 1;\n                 innerLoop1: while (j \u003e\u003d 0) {\n                     char c \u003d line.charAt(j);\n                     if (Character.isDigit(c)) {\n                       // found the last numeric character, this is the end of\n                       // the free space bytes count\n                       bytesEnd \u003d j + 1;\n                       break innerLoop1;\n                     }\n                     j--;\n                 }\n                 innerLoop2: while (j \u003e\u003d 0) {\n                     char c \u003d line.charAt(j);\n                     if (!Character.isDigit(c) \u0026\u0026 c !\u003d \u0027,\u0027 \u0026\u0026 c !\u003d \u0027.\u0027) {\n                       // found the next non-numeric character, this is the\n                       // beginning of the free space bytes count\n                       bytesStart \u003d j + 1;\n                       break innerLoop2;\n                     }\n                     j--;\n                 }\n                 break outerLoop;\n             }\n         }\n \n         // remove commas and dots in the bytes count\n         StringBuffer buf \u003d new StringBuffer(line.substring(bytesStart, bytesEnd));\n         for (int k \u003d 0; k \u003c buf.length(); k++) {\n             if (buf.charAt(k) \u003d\u003d \u0027,\u0027 || buf.charAt(k) \u003d\u003d \u0027.\u0027) {\n                 buf.deleteCharAt(k--);\n             }\n         }\n         bytes \u003d Long.parseLong(buf.toString());\n         return bytes;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldMethodName": "getFreeSpaceWindows",
            "newMethodName": "freeSpaceWindows"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Rename the free space method to be commons-io like\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@291741 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1127767185000,
          "commitName": "9004f534a046b5b8a6f87edf2426f24a291fd2ab",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1127085165000,
          "commitNameOld": "990ea5d016b6ebc1961be059ba9aab0f5079683b",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 7.89,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,83 +1,83 @@\n-    protected long getFreeSpaceWindows(String path) throws IOException {\n+    long freeSpaceWindows(String path) throws IOException {\n         path \u003d FilenameUtils.normalize(path);\n         if (path.length() \u003e 2 \u0026\u0026 path.charAt(1) \u003d\u003d \u0027:\u0027) {\n             path \u003d path.substring(0, 2);  // seems to make it work\n         }\n \n         // build and run the \u0027dir\u0027 command\n         String[] cmdAttrbs \u003d new String[] {\"cmd.exe\", \"/C\", \"dir /c \" + path};\n \n         // read in the output of the command to an ArrayList\n         BufferedReader in \u003d null;\n         String line \u003d null;\n         ArrayList lines \u003d new ArrayList();\n         try {\n             in \u003d openProcessStream(cmdAttrbs);\n             line \u003d in.readLine();\n             while (line !\u003d null) {\n                 line \u003d line.toLowerCase().trim();\n                 lines.add(line);\n                 line \u003d in.readLine();\n             }\n         } finally {\n             IOUtils.closeQuietly(in);\n         }\n \n         if (lines.size() \u003d\u003d 0) {\n             // unknown problem, throw exception\n             throw new IOException(\n                     \"Command line \u0027dir /c\u0027 did not return any info \" +\n                     \"for command \u0027\" + cmdAttrbs[2] + \"\u0027\");\n         }\n \n         // now iterate over the lines we just read and find the LAST\n         // non-empty line (the free space bytes should be in the last element\n         // of the ArrayList anyway, but this will ensure it works even if it\u0027s\n         // not, still assuming it is on the last non-blank line)\n         long bytes \u003d -1;\n         int i \u003d lines.size() - 1;\n         int bytesStart \u003d 0;\n         int bytesEnd \u003d 0;\n         outerLoop: while (i \u003e 0) {\n             line \u003d (String) lines.get(i);\n             if (line.length() \u003e 0) {\n                 // found it, so now read from the end of the line to find the\n                 // last numeric character on the line, then continue until we\n                 // find the first non-numeric character, and everything between\n                 // that and the last numeric character inclusive is our free\n                 // space bytes count\n                 int j \u003d line.length() - 1;\n                 innerLoop1: while (j \u003e\u003d 0) {\n                     char c \u003d line.charAt(j);\n                     if (Character.isDigit(c)) {\n                       // found the last numeric character, this is the end of\n                       // the free space bytes count\n                       bytesEnd \u003d j + 1;\n                       break innerLoop1;\n                     }\n                     j--;\n                 }\n                 innerLoop2: while (j \u003e\u003d 0) {\n                     char c \u003d line.charAt(j);\n                     if (!Character.isDigit(c) \u0026\u0026 c !\u003d \u0027,\u0027 \u0026\u0026 c !\u003d \u0027.\u0027) {\n                       // found the next non-numeric character, this is the\n                       // beginning of the free space bytes count\n                       bytesStart \u003d j + 1;\n                       break innerLoop2;\n                     }\n                     j--;\n                 }\n                 break outerLoop;\n             }\n         }\n \n         // remove commas and dots in the bytes count\n         StringBuffer buf \u003d new StringBuffer(line.substring(bytesStart, bytesEnd));\n         for (int k \u003d 0; k \u003c buf.length(); k++) {\n             if (buf.charAt(k) \u003d\u003d \u0027,\u0027 || buf.charAt(k) \u003d\u003d \u0027.\u0027) {\n                 buf.deleteCharAt(k--);\n             }\n         }\n         bytes \u003d Long.parseLong(buf.toString());\n         return bytes;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "15aebb582ea14708144e27263de0a6fdcc402af9": {
      "type": "Ybodychange",
      "commitMessage": "Add comment\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@264867 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1125436930000,
      "commitName": "15aebb582ea14708144e27263de0a6fdcc402af9",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": 1125182142000,
      "commitNameOld": "81a86e4d7c8a3d8718a8d560ec8b5902dafdb390",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 2.95,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,83 +1,83 @@\n     protected long getFreeSpaceWindows(String path) throws IOException {\n         path \u003d FilenameUtils.normalize(path);\n         if (path.length() \u003e 2 \u0026\u0026 path.charAt(1) \u003d\u003d \u0027:\u0027) {\n-            path \u003d path.substring(0, 2);\n+            path \u003d path.substring(0, 2);  // seems to make it work\n         }\n \n         // build and run the \u0027dir\u0027 command\n         String[] cmdAttrbs \u003d new String[] {\"cmd.exe\", \"/C\", \"dir /c \" + path};\n \n         // read in the output of the command to an ArrayList\n         BufferedReader in \u003d null;\n         String line \u003d null;\n         ArrayList lines \u003d new ArrayList();\n         try {\n             in \u003d openProcessStream(cmdAttrbs);\n             line \u003d in.readLine();\n             while (line !\u003d null) {\n                 line \u003d line.toLowerCase().trim();\n                 lines.add(line);\n                 line \u003d in.readLine();\n             }\n         } finally {\n             IOUtils.closeQuietly(in);\n         }\n \n         if (lines.size() \u003d\u003d 0) {\n             // unknown problem, throw exception\n             throw new IOException(\n                     \"Command line \u0027dir /c\u0027 did not return any info \" +\n                     \"for command \u0027\" + cmdAttrbs[2] + \"\u0027\");\n         }\n \n         // now iterate over the lines we just read and find the LAST\n         // non-empty line (the free space bytes should be in the last element\n         // of the ArrayList anyway, but this will ensure it works even if it\u0027s\n         // not, still assuming it is on the last non-blank line)\n         long bytes \u003d -1;\n         int i \u003d lines.size() - 1;\n         int bytesStart \u003d 0;\n         int bytesEnd \u003d 0;\n         outerLoop: while (i \u003e 0) {\n             line \u003d (String) lines.get(i);\n             if (line.length() \u003e 0) {\n                 // found it, so now read from the end of the line to find the\n                 // last numeric character on the line, then continue until we\n                 // find the first non-numeric character, and everything between\n                 // that and the last numeric character inclusive is our free\n                 // space bytes count\n                 int j \u003d line.length() - 1;\n                 innerLoop1: while (j \u003e\u003d 0) {\n                     char c \u003d line.charAt(j);\n                     if (Character.isDigit(c)) {\n                       // found the last numeric character, this is the end of\n                       // the free space bytes count\n                       bytesEnd \u003d j + 1;\n                       break innerLoop1;\n                     }\n                     j--;\n                 }\n                 innerLoop2: while (j \u003e\u003d 0) {\n                     char c \u003d line.charAt(j);\n                     if (!Character.isDigit(c) \u0026\u0026 c !\u003d \u0027,\u0027 \u0026\u0026 c !\u003d \u0027.\u0027) {\n                       // found the next non-numeric character, this is the\n                       // beginning of the free space bytes count\n                       bytesStart \u003d j + 1;\n                       break innerLoop2;\n                     }\n                     j--;\n                 }\n                 break outerLoop;\n             }\n         }\n \n         // remove commas and dots in the bytes count\n         StringBuffer buf \u003d new StringBuffer(line.substring(bytesStart, bytesEnd));\n         for (int k \u003d 0; k \u003c buf.length(); k++) {\n             if (buf.charAt(k) \u003d\u003d \u0027,\u0027 || buf.charAt(k) \u003d\u003d \u0027.\u0027) {\n                 buf.deleteCharAt(k--);\n             }\n         }\n         bytes \u003d Long.parseLong(buf.toString());\n         return bytes;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4cd33ce31d4245281432320a7f4f4cf6b541c690": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "Fix FileSystemUtils and add tests\nfrom Frank W. Zammetti\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@240439 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1125161462000,
      "commitName": "4cd33ce31d4245281432320a7f4f4cf6b541c690",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "Fix FileSystemUtils and add tests\nfrom Frank W. Zammetti\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@240439 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1125161462000,
          "commitName": "4cd33ce31d4245281432320a7f4f4cf6b541c690",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1108930291000,
          "commitNameOld": "dcb61e575021a61d9e1694ccdf300f5d028f5b1f",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 187.86,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,83 @@\n-    private static long getFreeSpaceWindows(String path) throws IOException {\n-        // build and run the \u0027dir\u0027 command\n-        String line \u003d null;\n-        String[] cmdAttrbs \u003d new String[3];\n-        cmdAttrbs[0] \u003d \"cmd.exe\";\n-        cmdAttrbs[1] \u003d \"/C\";\n-        cmdAttrbs[2] \u003d \"dir /-c \" + path;\n-        Process proc \u003d Runtime.getRuntime().exec(cmdAttrbs);\n+    protected long getFreeSpaceWindows(String path) throws IOException {\n+        path \u003d FilenameUtils.normalize(path);\n+        if (path.length() \u003e 2 \u0026\u0026 path.charAt(1) \u003d\u003d \u0027:\u0027) {\n+            path \u003d path.substring(0, 2);\n+        }\n \n-        // read the output until we find the line with \u0027bytes free\u0027\n-        long bytes \u003d -1;\n+        // build and run the \u0027dir\u0027 command\n+        String[] cmdAttrbs \u003d new String[] {\"cmd.exe\", \"/C\", \"dir /c \" + path};\n+\n+        // read in the output of the command to an ArrayList\n         BufferedReader in \u003d null;\n+        String line \u003d null;\n+        ArrayList lines \u003d new ArrayList();\n         try {\n-            in \u003d new BufferedReader(new InputStreamReader(proc.getInputStream()));\n+            in \u003d openProcessStream(cmdAttrbs);\n             line \u003d in.readLine();\n             while (line !\u003d null) {\n-                line \u003d line.toLowerCase();\n-                int bfl \u003d line.indexOf(\"bytes free\");\n-                if (bfl !\u003d -1) {\n-                    // found \"bytes free\"\n-                    // chop off everything AFTER the actual byte count\n-                    line \u003d line.substring(0, bfl);\n-                    line \u003d line.trim();\n-                    // find the LAST space in the string, should be right before the\n-                    // byte count\n-                    int lsl \u003d line.lastIndexOf(\u0027 \u0027);\n-                    // now get rid of everything BEFORE that space, and line will\n-                    // then contain just the byte count\n-                    line \u003d line.substring(lsl + 1);\n-                    bytes \u003d Long.parseLong(line);\n-                }\n+                line \u003d line.toLowerCase().trim();\n+                lines.add(line);\n                 line \u003d in.readLine();\n             }\n         } finally {\n             IOUtils.closeQuietly(in);\n         }\n \n-        if (bytes \u003d\u003d -1) {\n+        if (lines.size() \u003d\u003d 0) {\n+            // unknown problem, throw exception\n             throw new IOException(\n-                    \"Command line \u0027dir\u0027 did not find text \u0027bytes free\u0027 in response for path \u0027\" +\n-                    path + \"\u0027- check path is of the form \u0027C:\u0027\");\n+                    \"Command line \u0027dir /c\u0027 did not return any info \" +\n+                    \"for command \u0027\" + cmdAttrbs[2] + \"\u0027\");\n         }\n+\n+        // now iterate over the lines we just read and find the LAST\n+        // non-empty line (the free space bytes should be in the last element\n+        // of the ArrayList anyway, but this will ensure it works even if it\u0027s\n+        // not, still assuming it is on the last non-blank line)\n+        long bytes \u003d -1;\n+        int i \u003d lines.size() - 1;\n+        int bytesStart \u003d 0;\n+        int bytesEnd \u003d 0;\n+        outerLoop: while (i \u003e 0) {\n+            line \u003d (String) lines.get(i);\n+            if (line.length() \u003e 0) {\n+                // found it, so now read from the end of the line to find the\n+                // last numeric character on the line, then continue until we\n+                // find the first non-numeric character, and everything between\n+                // that and the last numeric character inclusive is our free\n+                // space bytes count\n+                int j \u003d line.length() - 1;\n+                innerLoop1: while (j \u003e\u003d 0) {\n+                    char c \u003d line.charAt(j);\n+                    if (Character.isDigit(c)) {\n+                      // found the last numeric character, this is the end of\n+                      // the free space bytes count\n+                      bytesEnd \u003d j + 1;\n+                      break innerLoop1;\n+                    }\n+                    j--;\n+                }\n+                innerLoop2: while (j \u003e\u003d 0) {\n+                    char c \u003d line.charAt(j);\n+                    if (!Character.isDigit(c) \u0026\u0026 c !\u003d \u0027,\u0027 \u0026\u0026 c !\u003d \u0027.\u0027) {\n+                      // found the next non-numeric character, this is the\n+                      // beginning of the free space bytes count\n+                      bytesStart \u003d j + 1;\n+                      break innerLoop2;\n+                    }\n+                    j--;\n+                }\n+                break outerLoop;\n+            }\n+        }\n+\n+        // remove commas and dots in the bytes count\n+        StringBuffer buf \u003d new StringBuffer(line.substring(bytesStart, bytesEnd));\n+        for (int k \u003d 0; k \u003c buf.length(); k++) {\n+            if (buf.charAt(k) \u003d\u003d \u0027,\u0027 || buf.charAt(k) \u003d\u003d \u0027.\u0027) {\n+                buf.deleteCharAt(k--);\n+            }\n+        }\n+        bytes \u003d Long.parseLong(buf.toString());\n         return bytes;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Fix FileSystemUtils and add tests\nfrom Frank W. Zammetti\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@240439 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1125161462000,
          "commitName": "4cd33ce31d4245281432320a7f4f4cf6b541c690",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": 1108930291000,
          "commitNameOld": "dcb61e575021a61d9e1694ccdf300f5d028f5b1f",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 187.86,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,83 @@\n-    private static long getFreeSpaceWindows(String path) throws IOException {\n-        // build and run the \u0027dir\u0027 command\n-        String line \u003d null;\n-        String[] cmdAttrbs \u003d new String[3];\n-        cmdAttrbs[0] \u003d \"cmd.exe\";\n-        cmdAttrbs[1] \u003d \"/C\";\n-        cmdAttrbs[2] \u003d \"dir /-c \" + path;\n-        Process proc \u003d Runtime.getRuntime().exec(cmdAttrbs);\n+    protected long getFreeSpaceWindows(String path) throws IOException {\n+        path \u003d FilenameUtils.normalize(path);\n+        if (path.length() \u003e 2 \u0026\u0026 path.charAt(1) \u003d\u003d \u0027:\u0027) {\n+            path \u003d path.substring(0, 2);\n+        }\n \n-        // read the output until we find the line with \u0027bytes free\u0027\n-        long bytes \u003d -1;\n+        // build and run the \u0027dir\u0027 command\n+        String[] cmdAttrbs \u003d new String[] {\"cmd.exe\", \"/C\", \"dir /c \" + path};\n+\n+        // read in the output of the command to an ArrayList\n         BufferedReader in \u003d null;\n+        String line \u003d null;\n+        ArrayList lines \u003d new ArrayList();\n         try {\n-            in \u003d new BufferedReader(new InputStreamReader(proc.getInputStream()));\n+            in \u003d openProcessStream(cmdAttrbs);\n             line \u003d in.readLine();\n             while (line !\u003d null) {\n-                line \u003d line.toLowerCase();\n-                int bfl \u003d line.indexOf(\"bytes free\");\n-                if (bfl !\u003d -1) {\n-                    // found \"bytes free\"\n-                    // chop off everything AFTER the actual byte count\n-                    line \u003d line.substring(0, bfl);\n-                    line \u003d line.trim();\n-                    // find the LAST space in the string, should be right before the\n-                    // byte count\n-                    int lsl \u003d line.lastIndexOf(\u0027 \u0027);\n-                    // now get rid of everything BEFORE that space, and line will\n-                    // then contain just the byte count\n-                    line \u003d line.substring(lsl + 1);\n-                    bytes \u003d Long.parseLong(line);\n-                }\n+                line \u003d line.toLowerCase().trim();\n+                lines.add(line);\n                 line \u003d in.readLine();\n             }\n         } finally {\n             IOUtils.closeQuietly(in);\n         }\n \n-        if (bytes \u003d\u003d -1) {\n+        if (lines.size() \u003d\u003d 0) {\n+            // unknown problem, throw exception\n             throw new IOException(\n-                    \"Command line \u0027dir\u0027 did not find text \u0027bytes free\u0027 in response for path \u0027\" +\n-                    path + \"\u0027- check path is of the form \u0027C:\u0027\");\n+                    \"Command line \u0027dir /c\u0027 did not return any info \" +\n+                    \"for command \u0027\" + cmdAttrbs[2] + \"\u0027\");\n         }\n+\n+        // now iterate over the lines we just read and find the LAST\n+        // non-empty line (the free space bytes should be in the last element\n+        // of the ArrayList anyway, but this will ensure it works even if it\u0027s\n+        // not, still assuming it is on the last non-blank line)\n+        long bytes \u003d -1;\n+        int i \u003d lines.size() - 1;\n+        int bytesStart \u003d 0;\n+        int bytesEnd \u003d 0;\n+        outerLoop: while (i \u003e 0) {\n+            line \u003d (String) lines.get(i);\n+            if (line.length() \u003e 0) {\n+                // found it, so now read from the end of the line to find the\n+                // last numeric character on the line, then continue until we\n+                // find the first non-numeric character, and everything between\n+                // that and the last numeric character inclusive is our free\n+                // space bytes count\n+                int j \u003d line.length() - 1;\n+                innerLoop1: while (j \u003e\u003d 0) {\n+                    char c \u003d line.charAt(j);\n+                    if (Character.isDigit(c)) {\n+                      // found the last numeric character, this is the end of\n+                      // the free space bytes count\n+                      bytesEnd \u003d j + 1;\n+                      break innerLoop1;\n+                    }\n+                    j--;\n+                }\n+                innerLoop2: while (j \u003e\u003d 0) {\n+                    char c \u003d line.charAt(j);\n+                    if (!Character.isDigit(c) \u0026\u0026 c !\u003d \u0027,\u0027 \u0026\u0026 c !\u003d \u0027.\u0027) {\n+                      // found the next non-numeric character, this is the\n+                      // beginning of the free space bytes count\n+                      bytesStart \u003d j + 1;\n+                      break innerLoop2;\n+                    }\n+                    j--;\n+                }\n+                break outerLoop;\n+            }\n+        }\n+\n+        // remove commas and dots in the bytes count\n+        StringBuffer buf \u003d new StringBuffer(line.substring(bytesStart, bytesEnd));\n+        for (int k \u003d 0; k \u003c buf.length(); k++) {\n+            if (buf.charAt(k) \u003d\u003d \u0027,\u0027 || buf.charAt(k) \u003d\u003d \u0027.\u0027) {\n+                buf.deleteCharAt(k--);\n+            }\n+        }\n+        bytes \u003d Long.parseLong(buf.toString());\n         return bytes;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "dcb61e575021a61d9e1694ccdf300f5d028f5b1f": {
      "type": "Yintroduced",
      "commitMessage": "Add FileSystemUtils to allow access to information about the filing system\nbug 32982, from Frank W. Zammetti\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@154561 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1108930291000,
      "commitName": "dcb61e575021a61d9e1694ccdf300f5d028f5b1f",
      "commitAuthor": "Stephen Colebourne"
    }
  }
}