{
  "origin": "codeshovel",
  "repositoryName": "commons-io",
  "repositoryPath": "/repos/commons-io/.git",
  "startCommitName": "559de2c461e94ab636c959149c775bb27111fb48",
  "sourceFileName": "XmlStreamReader.java",
  "functionName": "getXmlProlog",
  "functionId": "getXmlProlog___is-InputStream__guessedEnc-String",
  "sourceFilePath": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
  "functionStartLine": 701,
  "functionEndLine": 746,
  "changeHistory": [
    "8993c0060e4eb2d5bca20e3529a829a9dd90efdf",
    "d19259a7774e23ebdaac4af5ee4def8602fe2969",
    "9afc2969a3b491476525e100a8a542027576952e",
    "6aa00766b9103d75c763160280429af8e1f0549e",
    "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a",
    "2fbbf47aaf12f3efc333caf06bb61d63472d610e",
    "5b75cf83b2db408f8228b26910a8d3d3633cd54f"
  ],
  "changeHistoryShort": {
    "8993c0060e4eb2d5bca20e3529a829a9dd90efdf": "Ybodychange",
    "d19259a7774e23ebdaac4af5ee4def8602fe2969": "Ybodychange",
    "9afc2969a3b491476525e100a8a542027576952e": "Ybodychange",
    "6aa00766b9103d75c763160280429af8e1f0549e": "Ymultichange(Ybodychange,Yparametermetachange)",
    "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a": "Yfilerename",
    "2fbbf47aaf12f3efc333caf06bb61d63472d610e": "Yparameterchange",
    "5b75cf83b2db408f8228b26910a8d3d3633cd54f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8993c0060e4eb2d5bca20e3529a829a9dd90efdf": {
      "type": "Ybodychange",
      "commitMessage": "Don\u0027t need to nest else clause. Refactor magic numbers into constants.",
      "commitDate": 1520355642000,
      "commitName": "8993c0060e4eb2d5bca20e3529a829a9dd90efdf",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": 1515926378000,
      "commitNameOld": "d19259a7774e23ebdaac4af5ee4def8602fe2969",
      "commitAuthorOld": "luccioman",
      "daysBetweenCommits": 51.26,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,46 @@\n     private static String getXmlProlog(final InputStream is, final String guessedEnc)\n             throws IOException {\n         String encoding \u003d null;\n         if (guessedEnc !\u003d null) {\n             final byte[] bytes \u003d new byte[BUFFER_SIZE];\n             is.mark(BUFFER_SIZE);\n             int offset \u003d 0;\n             int max \u003d BUFFER_SIZE;\n             int c \u003d is.read(bytes, offset, max);\n             int firstGT \u003d -1;\n             String xmlProlog \u003d \"\"; // avoid possible NPE warning (cannot happen; this just silences the warning)\n             while (c !\u003d -1 \u0026\u0026 firstGT \u003d\u003d -1 \u0026\u0026 offset \u003c BUFFER_SIZE) {\n                 offset +\u003d c;\n                 max -\u003d c;\n                 c \u003d is.read(bytes, offset, max);\n                 xmlProlog \u003d new String(bytes, 0, offset, guessedEnc);\n                 firstGT \u003d xmlProlog.indexOf(\u0027\u003e\u0027);\n             }\n             if (firstGT \u003d\u003d -1) {\n                 if (c \u003d\u003d -1) {\n                     throw new IOException(\"Unexpected end of XML stream\");\n-                } else {\n-                    throw new IOException(\n-                            \"XML prolog or ROOT element not found on first \"\n-                                    + offset + \" bytes\");\n                 }\n+                throw new IOException(\n+                        \"XML prolog or ROOT element not found on first \"\n+                                + offset + \" bytes\");\n             }\n             final int bytesRead \u003d offset;\n             if (bytesRead \u003e 0) {\n                 is.reset();\n                 final BufferedReader bReader \u003d new BufferedReader(new StringReader(\n                         xmlProlog.substring(0, firstGT + 1)));\n                 final StringBuffer prolog \u003d new StringBuffer();\n                 String line \u003d bReader.readLine();\n                 while (line !\u003d null) {\n                     prolog.append(line);\n                     line \u003d bReader.readLine();\n                 }\n                 final Matcher m \u003d ENCODING_PATTERN.matcher(prolog);\n                 if (m.find()) {\n                     encoding \u003d m.group(1).toUpperCase(Locale.ROOT);\n                     encoding \u003d encoding.substring(1, encoding.length() - 1);\n                 }\n             }\n         }\n         return encoding;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d19259a7774e23ebdaac4af5ee4def8602fe2969": {
      "type": "Ybodychange",
      "commitMessage": "IO-557: UnsupportedEncodingException when opening an ISO-8859-1 XML stream with Turkish as the default locale (closes #51)\n\nPerform locale independent upper case conversions.\n\nTo handle properly lower cased character encoding name in XML prolog\nwith any default system locale, notably Turkish.\n",
      "commitDate": 1515926378000,
      "commitName": "d19259a7774e23ebdaac4af5ee4def8602fe2969",
      "commitAuthor": "luccioman",
      "commitDateOld": 1487183873000,
      "commitNameOld": "8b9fe1b01ce21003f6a6ff8391ad2a64f4d21030",
      "commitAuthorOld": "Sebastian KÃ¼rten",
      "daysBetweenCommits": 332.67,
      "commitsBetweenForRepo": 110,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n     private static String getXmlProlog(final InputStream is, final String guessedEnc)\n             throws IOException {\n         String encoding \u003d null;\n         if (guessedEnc !\u003d null) {\n             final byte[] bytes \u003d new byte[BUFFER_SIZE];\n             is.mark(BUFFER_SIZE);\n             int offset \u003d 0;\n             int max \u003d BUFFER_SIZE;\n             int c \u003d is.read(bytes, offset, max);\n             int firstGT \u003d -1;\n             String xmlProlog \u003d \"\"; // avoid possible NPE warning (cannot happen; this just silences the warning)\n             while (c !\u003d -1 \u0026\u0026 firstGT \u003d\u003d -1 \u0026\u0026 offset \u003c BUFFER_SIZE) {\n                 offset +\u003d c;\n                 max -\u003d c;\n                 c \u003d is.read(bytes, offset, max);\n                 xmlProlog \u003d new String(bytes, 0, offset, guessedEnc);\n                 firstGT \u003d xmlProlog.indexOf(\u0027\u003e\u0027);\n             }\n             if (firstGT \u003d\u003d -1) {\n                 if (c \u003d\u003d -1) {\n                     throw new IOException(\"Unexpected end of XML stream\");\n                 } else {\n                     throw new IOException(\n                             \"XML prolog or ROOT element not found on first \"\n                                     + offset + \" bytes\");\n                 }\n             }\n             final int bytesRead \u003d offset;\n             if (bytesRead \u003e 0) {\n                 is.reset();\n                 final BufferedReader bReader \u003d new BufferedReader(new StringReader(\n                         xmlProlog.substring(0, firstGT + 1)));\n                 final StringBuffer prolog \u003d new StringBuffer();\n                 String line \u003d bReader.readLine();\n                 while (line !\u003d null) {\n                     prolog.append(line);\n                     line \u003d bReader.readLine();\n                 }\n                 final Matcher m \u003d ENCODING_PATTERN.matcher(prolog);\n                 if (m.find()) {\n-                    encoding \u003d m.group(1).toUpperCase();\n+                    encoding \u003d m.group(1).toUpperCase(Locale.ROOT);\n                     encoding \u003d encoding.substring(1, encoding.length() - 1);\n                 }\n             }\n         }\n         return encoding;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9afc2969a3b491476525e100a8a542027576952e": {
      "type": "Ybodychange",
      "commitMessage": "Silence impossible \"possible NPE\" warning\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1471788 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1366847936000,
      "commitName": "9afc2969a3b491476525e100a8a542027576952e",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": 1366845859000,
      "commitNameOld": "effe551657921069b871519156a934e4ef3ae916",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n     private static String getXmlProlog(final InputStream is, final String guessedEnc)\n             throws IOException {\n         String encoding \u003d null;\n         if (guessedEnc !\u003d null) {\n             final byte[] bytes \u003d new byte[BUFFER_SIZE];\n             is.mark(BUFFER_SIZE);\n             int offset \u003d 0;\n             int max \u003d BUFFER_SIZE;\n             int c \u003d is.read(bytes, offset, max);\n             int firstGT \u003d -1;\n-            String xmlProlog \u003d null;\n+            String xmlProlog \u003d \"\"; // avoid possible NPE warning (cannot happen; this just silences the warning)\n             while (c !\u003d -1 \u0026\u0026 firstGT \u003d\u003d -1 \u0026\u0026 offset \u003c BUFFER_SIZE) {\n                 offset +\u003d c;\n                 max -\u003d c;\n                 c \u003d is.read(bytes, offset, max);\n                 xmlProlog \u003d new String(bytes, 0, offset, guessedEnc);\n                 firstGT \u003d xmlProlog.indexOf(\u0027\u003e\u0027);\n             }\n             if (firstGT \u003d\u003d -1) {\n                 if (c \u003d\u003d -1) {\n                     throw new IOException(\"Unexpected end of XML stream\");\n                 } else {\n                     throw new IOException(\n                             \"XML prolog or ROOT element not found on first \"\n                                     + offset + \" bytes\");\n                 }\n             }\n             final int bytesRead \u003d offset;\n             if (bytesRead \u003e 0) {\n                 is.reset();\n                 final BufferedReader bReader \u003d new BufferedReader(new StringReader(\n                         xmlProlog.substring(0, firstGT + 1)));\n                 final StringBuffer prolog \u003d new StringBuffer();\n                 String line \u003d bReader.readLine();\n                 while (line !\u003d null) {\n                     prolog.append(line);\n                     line \u003d bReader.readLine();\n                 }\n                 final Matcher m \u003d ENCODING_PATTERN.matcher(prolog);\n                 if (m.find()) {\n                     encoding \u003d m.group(1).toUpperCase();\n                     encoding \u003d encoding.substring(1, encoding.length() - 1);\n                 }\n             }\n         }\n         return encoding;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6aa00766b9103d75c763160280429af8e1f0549e": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1354308699000,
      "commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
      "commitAuthor": "Gary D. Gregory",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1354308699000,
          "commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": 1338907681000,
          "commitNameOld": "e4c65e5424fe7a7c9795348fc855d42a247f0c00",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 178.25,
          "commitsBetweenForRepo": 86,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,47 @@\n-    private static String getXmlProlog(InputStream is, String guessedEnc)\n+    private static String getXmlProlog(final InputStream is, final String guessedEnc)\n             throws IOException {\n         String encoding \u003d null;\n         if (guessedEnc !\u003d null) {\n-            byte[] bytes \u003d new byte[BUFFER_SIZE];\n+            final byte[] bytes \u003d new byte[BUFFER_SIZE];\n             is.mark(BUFFER_SIZE);\n             int offset \u003d 0;\n             int max \u003d BUFFER_SIZE;\n             int c \u003d is.read(bytes, offset, max);\n             int firstGT \u003d -1;\n             String xmlProlog \u003d null;\n             while (c !\u003d -1 \u0026\u0026 firstGT \u003d\u003d -1 \u0026\u0026 offset \u003c BUFFER_SIZE) {\n                 offset +\u003d c;\n                 max -\u003d c;\n                 c \u003d is.read(bytes, offset, max);\n                 xmlProlog \u003d new String(bytes, 0, offset, guessedEnc);\n                 firstGT \u003d xmlProlog.indexOf(\u0027\u003e\u0027);\n             }\n             if (firstGT \u003d\u003d -1) {\n                 if (c \u003d\u003d -1) {\n                     throw new IOException(\"Unexpected end of XML stream\");\n                 } else {\n                     throw new IOException(\n                             \"XML prolog or ROOT element not found on first \"\n                                     + offset + \" bytes\");\n                 }\n             }\n-            int bytesRead \u003d offset;\n+            final int bytesRead \u003d offset;\n             if (bytesRead \u003e 0) {\n                 is.reset();\n-                BufferedReader bReader \u003d new BufferedReader(new StringReader(\n+                final BufferedReader bReader \u003d new BufferedReader(new StringReader(\n                         xmlProlog.substring(0, firstGT + 1)));\n-                StringBuffer prolog \u003d new StringBuffer();\n+                final StringBuffer prolog \u003d new StringBuffer();\n                 String line \u003d bReader.readLine();\n                 while (line !\u003d null) {\n                     prolog.append(line);\n                     line \u003d bReader.readLine();\n                 }\n-                Matcher m \u003d ENCODING_PATTERN.matcher(prolog);\n+                final Matcher m \u003d ENCODING_PATTERN.matcher(prolog);\n                 if (m.find()) {\n                     encoding \u003d m.group(1).toUpperCase();\n                     encoding \u003d encoding.substring(1, encoding.length() - 1);\n                 }\n             }\n         }\n         return encoding;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": 1354308699000,
          "commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": 1338907681000,
          "commitNameOld": "e4c65e5424fe7a7c9795348fc855d42a247f0c00",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 178.25,
          "commitsBetweenForRepo": 86,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,47 @@\n-    private static String getXmlProlog(InputStream is, String guessedEnc)\n+    private static String getXmlProlog(final InputStream is, final String guessedEnc)\n             throws IOException {\n         String encoding \u003d null;\n         if (guessedEnc !\u003d null) {\n-            byte[] bytes \u003d new byte[BUFFER_SIZE];\n+            final byte[] bytes \u003d new byte[BUFFER_SIZE];\n             is.mark(BUFFER_SIZE);\n             int offset \u003d 0;\n             int max \u003d BUFFER_SIZE;\n             int c \u003d is.read(bytes, offset, max);\n             int firstGT \u003d -1;\n             String xmlProlog \u003d null;\n             while (c !\u003d -1 \u0026\u0026 firstGT \u003d\u003d -1 \u0026\u0026 offset \u003c BUFFER_SIZE) {\n                 offset +\u003d c;\n                 max -\u003d c;\n                 c \u003d is.read(bytes, offset, max);\n                 xmlProlog \u003d new String(bytes, 0, offset, guessedEnc);\n                 firstGT \u003d xmlProlog.indexOf(\u0027\u003e\u0027);\n             }\n             if (firstGT \u003d\u003d -1) {\n                 if (c \u003d\u003d -1) {\n                     throw new IOException(\"Unexpected end of XML stream\");\n                 } else {\n                     throw new IOException(\n                             \"XML prolog or ROOT element not found on first \"\n                                     + offset + \" bytes\");\n                 }\n             }\n-            int bytesRead \u003d offset;\n+            final int bytesRead \u003d offset;\n             if (bytesRead \u003e 0) {\n                 is.reset();\n-                BufferedReader bReader \u003d new BufferedReader(new StringReader(\n+                final BufferedReader bReader \u003d new BufferedReader(new StringReader(\n                         xmlProlog.substring(0, firstGT + 1)));\n-                StringBuffer prolog \u003d new StringBuffer();\n+                final StringBuffer prolog \u003d new StringBuffer();\n                 String line \u003d bReader.readLine();\n                 while (line !\u003d null) {\n                     prolog.append(line);\n                     line \u003d bReader.readLine();\n                 }\n-                Matcher m \u003d ENCODING_PATTERN.matcher(prolog);\n+                final Matcher m \u003d ENCODING_PATTERN.matcher(prolog);\n                 if (m.find()) {\n                     encoding \u003d m.group(1).toUpperCase();\n                     encoding \u003d encoding.substring(1, encoding.length() - 1);\n                 }\n             }\n         }\n         return encoding;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a": {
      "type": "Yfilerename",
      "commitMessage": "Build changes - re-organize to standard m2 layout, remove useless JIRA report and fix some Ant issues\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1004358 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1286218476000,
      "commitName": "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": 1286214840000,
      "commitNameOld": "19f48eb1711427a43a5e10c84bbbf1218a08bdd2",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/io/input/XmlStreamReader.java",
        "newPath": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java"
      }
    },
    "2fbbf47aaf12f3efc333caf06bb61d63472d610e": {
      "type": "Yparameterchange",
      "commitMessage": "Replace BOM detection and XML guess logic with BOMInputStream\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1004092 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1286161487000,
      "commitName": "2fbbf47aaf12f3efc333caf06bb61d63472d610e",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": 1286161189000,
      "commitNameOld": "5b75cf83b2db408f8228b26910a8d3d3633cd54f",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n-    private static String getXmlProlog(BufferedInputStream is, String guessedEnc)\n+    private static String getXmlProlog(InputStream is, String guessedEnc)\n             throws IOException {\n         String encoding \u003d null;\n         if (guessedEnc !\u003d null) {\n             byte[] bytes \u003d new byte[BUFFER_SIZE];\n             is.mark(BUFFER_SIZE);\n             int offset \u003d 0;\n             int max \u003d BUFFER_SIZE;\n             int c \u003d is.read(bytes, offset, max);\n             int firstGT \u003d -1;\n             String xmlProlog \u003d null;\n             while (c !\u003d -1 \u0026\u0026 firstGT \u003d\u003d -1 \u0026\u0026 offset \u003c BUFFER_SIZE) {\n                 offset +\u003d c;\n                 max -\u003d c;\n                 c \u003d is.read(bytes, offset, max);\n                 xmlProlog \u003d new String(bytes, 0, offset, guessedEnc);\n                 firstGT \u003d xmlProlog.indexOf(\u0027\u003e\u0027);\n             }\n             if (firstGT \u003d\u003d -1) {\n                 if (c \u003d\u003d -1) {\n                     throw new IOException(\"Unexpected end of XML stream\");\n                 } else {\n                     throw new IOException(\n                             \"XML prolog or ROOT element not found on first \"\n                                     + offset + \" bytes\");\n                 }\n             }\n             int bytesRead \u003d offset;\n             if (bytesRead \u003e 0) {\n                 is.reset();\n                 BufferedReader bReader \u003d new BufferedReader(new StringReader(\n                         xmlProlog.substring(0, firstGT + 1)));\n                 StringBuffer prolog \u003d new StringBuffer();\n                 String line \u003d bReader.readLine();\n                 while (line !\u003d null) {\n                     prolog.append(line);\n                     line \u003d bReader.readLine();\n                 }\n                 Matcher m \u003d ENCODING_PATTERN.matcher(prolog);\n                 if (m.find()) {\n                     encoding \u003d m.group(1).toUpperCase();\n                     encoding \u003d encoding.substring(1, encoding.length() - 1);\n                 }\n             }\n         }\n         return encoding;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5b75cf83b2db408f8228b26910a8d3d3633cd54f": {
      "type": "Yintroduced",
      "commitMessage": "IO-162 add Xml(Stream)Reader/Writer from ROME - thanks to HervÃ© Boutemy for the patch\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1004090 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": 1286161189000,
      "commitName": "5b75cf83b2db408f8228b26910a8d3d3633cd54f",
      "commitAuthor": "Niall Pemberton"
    }
  }
}