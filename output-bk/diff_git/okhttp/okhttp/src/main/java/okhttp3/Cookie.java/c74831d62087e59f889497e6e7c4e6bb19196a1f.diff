diff --git a/okhttp/src/main/java/okhttp3/Cookie.java b/okhttp/src/main/java/okhttp3/Cookie.java
index 066c6e14..5b760b51 100644
--- a/okhttp/src/main/java/okhttp3/Cookie.java
+++ b/okhttp/src/main/java/okhttp3/Cookie.java
@@ -1,82 +1,83 @@
 /*
  * Copyright (C) 2015 Square, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 package okhttp3;
 
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Collections;
 import java.util.Date;
 import java.util.GregorianCalendar;
 import java.util.List;
 import java.util.Locale;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import okhttp3.internal.Util;
 import okhttp3.internal.http.HttpDate;
 
 import static okhttp3.internal.Util.UTC;
 import static okhttp3.internal.Util.delimiterOffset;
 import static okhttp3.internal.Util.domainToAscii;
+import static okhttp3.internal.Util.indexOfControlOrNonAscii;
 import static okhttp3.internal.Util.trimSubstring;
 import static okhttp3.internal.Util.verifyAsIpAddress;
 
 /**
  * An <a href="http://tools.ietf.org/html/rfc6265">RFC 6265</a> Cookie.
  *
  * <p>This class doesn't support additional attributes on cookies, like <a
  * href="https://code.google.com/p/chromium/issues/detail?id=232693">Chromium's Priority=HIGH
  * extension</a>.
  */
 public final class Cookie {
   private static final Pattern YEAR_PATTERN
       = Pattern.compile("(\\d{2,4})[^\\d]*");
   private static final Pattern MONTH_PATTERN
       = Pattern.compile("(?i)(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec).*");
   private static final Pattern DAY_OF_MONTH_PATTERN
       = Pattern.compile("(\\d{1,2})[^\\d]*");
   private static final Pattern TIME_PATTERN
       = Pattern.compile("(\\d{1,2}):(\\d{1,2}):(\\d{1,2})[^\\d]*");
 
   private final String name;
   private final String value;
   private final long expiresAt;
   private final String domain;
   private final String path;
   private final boolean secure;
   private final boolean httpOnly;
 
   private final boolean persistent; // True if 'expires' or 'max-age' is present.
   private final boolean hostOnly; // True unless 'domain' is present.
 
   private Cookie(String name, String value, long expiresAt, String domain, String path,
       boolean secure, boolean httpOnly, boolean hostOnly, boolean persistent) {
     this.name = name;
     this.value = value;
     this.expiresAt = expiresAt;
     this.domain = domain;
     this.path = path;
     this.secure = secure;
     this.httpOnly = httpOnly;
     this.hostOnly = hostOnly;
     this.persistent = persistent;
   }
 
   Cookie(Builder builder) {
     if (builder.name == null) throw new NullPointerException("builder.name == null");
     if (builder.value == null) throw new NullPointerException("builder.value == null");
     if (builder.domain == null) throw new NullPointerException("builder.domain == null");
 
     this.name = builder.name;
@@ -180,103 +181,104 @@ public final class Cookie {
   }
 
   private static boolean domainMatch(HttpUrl url, String domain) {
     String urlHost = url.host();
 
     if (urlHost.equals(domain)) {
       return true; // As in 'example.com' matching 'example.com'.
     }
 
     if (urlHost.endsWith(domain)
         && urlHost.charAt(urlHost.length() - domain.length() - 1) == '.'
         && !verifyAsIpAddress(urlHost)) {
       return true; // As in 'example.com' matching 'www.example.com'.
     }
 
     return false;
   }
 
   private static boolean pathMatch(HttpUrl url, String path) {
     String urlPath = url.encodedPath();
 
     if (urlPath.equals(path)) {
       return true; // As in '/foo' matching '/foo'.
     }
 
     if (urlPath.startsWith(path)) {
       if (path.endsWith("/")) return true; // As in '/' matching '/foo'.
       if (urlPath.charAt(path.length()) == '/') return true; // As in '/foo' matching '/foo/bar'.
     }
 
     return false;
   }
 
   /**
    * Attempt to parse a {@code Set-Cookie} HTTP header value {@code setCookie} as a cookie. Returns
    * null if {@code setCookie} is not a well-formed cookie.
    */
   public static Cookie parse(HttpUrl url, String setCookie) {
     return parse(System.currentTimeMillis(), url, setCookie);
   }
 
   static Cookie parse(long currentTimeMillis, HttpUrl url, String setCookie) {
     int pos = 0;
     int limit = setCookie.length();
     int cookiePairEnd = delimiterOffset(setCookie, pos, limit, ';');
 
     int pairEqualsSign = delimiterOffset(setCookie, pos, cookiePairEnd, '=');
     if (pairEqualsSign == cookiePairEnd) return null;
 
     String cookieName = trimSubstring(setCookie, pos, pairEqualsSign);
-    if (cookieName.isEmpty()) return null;
+    if (cookieName.isEmpty() || indexOfControlOrNonAscii(cookieName) != -1) return null;
 
     String cookieValue = trimSubstring(setCookie, pairEqualsSign + 1, cookiePairEnd);
+    if (indexOfControlOrNonAscii(cookieValue) != -1) return null;
 
     long expiresAt = HttpDate.MAX_DATE;
     long deltaSeconds = -1L;
     String domain = null;
     String path = null;
     boolean secureOnly = false;
     boolean httpOnly = false;
     boolean hostOnly = true;
     boolean persistent = false;
 
     pos = cookiePairEnd + 1;
     while (pos < limit) {
       int attributePairEnd = delimiterOffset(setCookie, pos, limit, ';');
 
       int attributeEqualsSign = delimiterOffset(setCookie, pos, attributePairEnd, '=');
       String attributeName = trimSubstring(setCookie, pos, attributeEqualsSign);
       String attributeValue = attributeEqualsSign < attributePairEnd
           ? trimSubstring(setCookie, attributeEqualsSign + 1, attributePairEnd)
           : "";
 
       if (attributeName.equalsIgnoreCase("expires")) {
         try {
           expiresAt = parseExpires(attributeValue, 0, attributeValue.length());
           persistent = true;
         } catch (IllegalArgumentException e) {
           // Ignore this attribute, it isn't recognizable as a date.
         }
       } else if (attributeName.equalsIgnoreCase("max-age")) {
         try {
           deltaSeconds = parseMaxAge(attributeValue);
           persistent = true;
         } catch (NumberFormatException e) {
           // Ignore this attribute, it isn't recognizable as a max age.
         }
       } else if (attributeName.equalsIgnoreCase("domain")) {
         try {
           domain = parseDomain(attributeValue);
           hostOnly = false;
         } catch (IllegalArgumentException e) {
           // Ignore this attribute, it isn't recognizable as a domain.
         }
       } else if (attributeName.equalsIgnoreCase("path")) {
         path = attributeValue;
       } else if (attributeName.equalsIgnoreCase("secure")) {
         secureOnly = true;
       } else if (attributeName.equalsIgnoreCase("httponly")) {
         httpOnly = true;
       }
 
       pos = attributePairEnd + 1;
