diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheck.java
index ee3df3968..99319cdb6 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheck.java
@@ -59,105 +59,105 @@ public class CovariantEqualsCheck
         /** Set of AST nodes for defined equals methods.
          * Empty if the class defines method equals(java.lang.Object)
          */
         private Set mEqualsNodes = new HashSet();
 
         /** true if class defines method equals(java.lang.Object) */
         private boolean mHasEqualsObject = false;
 
         /**
          * Adds a AST node for the definition of an equals method.
          * @param aAST the node of an equals method definition.
          */
         public void addEqualsNode(DetailAST aAST)
         {
             if (!mHasEqualsObject) {
                 mEqualsNodes.add(aAST);
             }
         }
 
         /**
          * Returns the set of AST nodes for equals method definitions.
          * The set is empty if the class defines method
          * equals(java.lang.Object).
          * @return the set of AST nodes for equals method definitions.
          */
         public Set getEqualsNodes()
         {
             return mEqualsNodes;
         }
 
         /**
          * Records the definition of method equals(java.lang.Object).
          */
         public void setHasEqualsObject()
         {
             mHasEqualsObject = true;
             mEqualsNodes.clear();
         }
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.CLASS_DEF,
             TokenTypes.METHOD_DEF,
         };
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
-    public int[] getAcceptableTokens()
+    public int[] getRequiredTokens()
     {
-        return new int[] {};
+        return getDefaultTokens();
     }
-
+    
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void beginTree(DetailAST aRootAST)
     {
         mClassStack.clear();
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void visitToken(DetailAST aAST)
     {
         if (aAST.getType() == TokenTypes.CLASS_DEF) {
             //push
             mClassStack.add(new ClassAttributes());
         }
         else {
             // METHOD_DEF
             if (!ScopeUtils.inInterfaceBlock(aAST) && isEqualsMethod(aAST)) {
                 final ClassAttributes attrs =
                     (ClassAttributes) mClassStack.getLast();
                 if (hasObjectParameter(aAST)) {
                     attrs.setHasEqualsObject();
                 }
                 else {
                     attrs.addEqualsNode(aAST);
                 }
             }
         }
     }
 
     /**
      * Tests whether a method definition AST defines an equals covariant.
      * @param aAST the method definition AST to test.
      * Precondition: aAST is a TokenTypes.METHOD_DEF node.
      * @return true if aAST defines an equals covariant.
      */
     private boolean isEqualsMethod(DetailAST aAST)
     {
         // non-static, non-abstract?
         final DetailAST modifiers = aAST.findFirstToken(TokenTypes.MODIFIERS);
         if (modifiers.branchContains(TokenTypes.LITERAL_STATIC)
             || modifiers.branchContains(TokenTypes.ABSTRACT))
         {
             return false;
         }
 
         // named "equals"?
         final DetailAST nameNode = aAST.findFirstToken(TokenTypes.IDENT);
         final String name = nameNode.getText();
         if (!name.equals("equals")) {
             return false;
         }
