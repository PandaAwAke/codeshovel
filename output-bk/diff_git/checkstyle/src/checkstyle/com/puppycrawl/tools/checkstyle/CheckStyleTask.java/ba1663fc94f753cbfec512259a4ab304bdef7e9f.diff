diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
index 3d6704dbf..504bdf3be 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
@@ -1,81 +1,82 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2002  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle;
 
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Properties;
 import java.util.Hashtable;
+import java.util.ResourceBundle;
 import java.net.URL;
 
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import org.apache.tools.ant.AntClassLoader;
 import org.apache.tools.ant.BuildException;
 import org.apache.tools.ant.DirectoryScanner;
 import org.apache.tools.ant.Project;
 import org.apache.tools.ant.Task;
 import org.apache.tools.ant.taskdefs.LogOutputStream;
 import org.apache.tools.ant.types.EnumeratedAttribute;
 import org.apache.tools.ant.types.FileSet;
 import org.apache.tools.ant.types.Path;
 
 /**
  * An implementation of a ANT task for calling checkstyle. See the documentation
  * of the task for usage.
  * @author <a href="mailto:oliver@puppycrawl.com">Oliver Burn</a>
  */
 public class CheckStyleTask
     extends Task
 {
     /** poor man's enum for an xml formatter */
     private static final String E_XML = "xml";
     /** poor man's enum for an plain formatter */
     private static final String E_PLAIN = "plain";
 
     /** class path to locate class files */
     private Path mClasspath;
 
     /** name of file to check */
     private String mFileName;
 
     /** config file containing configuration */
     private String mConfigLocation;
 
     /** contains package names */
     private File mPackageNamesFile = null;
 
     /** whether to fail build on violations */
     private boolean mFailOnViolation = true;
 
     /** property to set on violations */
     private String mFailureProperty = null;
 
     /** contains the filesets to process */
     private final List mFileSets = new ArrayList();
 
     /** contains the formatters to log to */
     private final List mFormatters = new ArrayList();
 
@@ -168,100 +169,110 @@ public class CheckStyleTask
     {
         setConfigLocation(aURL.toExternalForm());
     }
 
     /**
      * Sets the location of the configuration.
      * @param aLocation the location, which is either a
      */
     private void setConfigLocation(String aLocation)
     {
         if (mConfigLocation != null) {
             throw new BuildException(
                 "Attributes 'config' and 'configURL' "
                 + "must not be set at the same time");
         }
         mConfigLocation = aLocation;
     }
 
     /** @param aFile the package names file to use */
     public void setPackageNamesFile(File aFile)
     {
         mPackageNamesFile = aFile;
     }
 
     ////////////////////////////////////////////////////////////////////////////
     // Setters for Checker configuration attributes
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Sets a properties file for use instead
      * of individually setting them.
      * @param aProps the properties File to use
      */
     public void setProperties(File aProps)
     {
         mPropertiesFile = aProps;
     }
 
     ////////////////////////////////////////////////////////////////////////////
     // The doers
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Actually checks the files specified. All errors are reported to
      * System.out. Will fail if any errors occurred.
      * @throws BuildException an error occurred
      */
     public void execute()
         throws BuildException
     {
+        // output version info in debug mode
+        final ResourceBundle compilationProperties =
+            ResourceBundle.getBundle("checkstylecompilation");
+        final String version =
+            compilationProperties.getString("checkstyle.compile.version");
+        final String compileTimestamp =
+            compilationProperties.getString("checkstyle.compile.timestamp");
+        log("checkstyle version " + version, Project.MSG_VERBOSE);
+        log("compiled on " + compileTimestamp, Project.MSG_VERBOSE);
+
         // Check for no arguments
         if ((mFileName == null) && (mFileSets.size() == 0)) {
             throw new BuildException(
                 "Must specify atleast one of 'file' or nested 'fileset'.",
                 getLocation());
         }
 
         if (mConfigLocation == null) {
             throw new BuildException("Must specify 'config'.", getLocation());
         }
 
         // Create the checker
         Checker c = null;
         try {
             try {
                 final Properties props = createOverridingProperties();
                 final Configuration config =
                     ConfigurationLoader.loadConfiguration(
                         mConfigLocation, new PropertiesExpander(props));
 
                 final DefaultContext context = new DefaultContext();
                 final ClassLoader loader =
                     new AntClassLoader(getProject(), mClasspath);
                 context.add("classloader", loader);
 
                 c = new Checker();
 
                 //load the set of package names
                 if (mPackageNamesFile != null) {
                     final ModuleFactory moduleFactory =
                         PackageNamesLoader.loadModuleFactory(
                             mPackageNamesFile.getAbsolutePath());
                     c.setModuleFactory(moduleFactory);
                 }
                 c.contextualize(context);
                 c.configure(config);
 
                 // setup the listeners
                 final AuditListener[] listeners = getListeners();
                 for (int i = 0; i < listeners.length; i++) {
                     c.addListener(listeners[i]);
                 }
             }
             catch (Exception e) {
                 throw new BuildException(
                     "Unable to create a Checker: " + e.getMessage(), e);
             }
 
             // Process the files
             final File[] files = scanFileSets();
