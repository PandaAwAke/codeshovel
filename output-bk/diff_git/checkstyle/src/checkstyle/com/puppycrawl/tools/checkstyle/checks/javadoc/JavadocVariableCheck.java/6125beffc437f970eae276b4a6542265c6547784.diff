diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java
index 6c918160f..787321c67 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java
@@ -32,91 +32,102 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  * Checks that a variable has Javadoc comment.
  * The scope to verify is specified using the {@link Scope} class and
  * defaults to {@link Scope#PRIVATE}. To verify another scope,
  * set property scope to one of the {@link Scope} constants.
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="JavadocVariable"/&gt;
  * </pre>
  * <p> An example of how to configure the check for the
  * {@link Scope#PUBLIC} scope is:
  *</p>
  * <pre>
  * &lt;module name="JavadocVariable"&gt;
  *    &lt;property name="scope" value="public"/&gt;
  * &lt;/module&gt;
  * </pre>
  * @author Oliver Burn
  * @version 1.0
  */
 public class JavadocVariableCheck
     extends Check
 {
     /** the scope to check */
     private Scope mScope = Scope.PRIVATE;
 
     /** the visibility scope where Javadoc comments shouldn't be checked **/
     private Scope mExcludeScope;
 
     /**
      * Sets the scope to check.
      * @param aFrom string to get the scope from
      */
     public void setScope(String aFrom)
     {
         mScope = Scope.getInstance(aFrom);
     }
 
     /**
      * Set the excludeScope.
      * @param aScope a <code>String</code> value
      */
     public void setExcludeScope(String aScope)
     {
         mExcludeScope = Scope.getInstance(aScope);
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public int[] getDefaultTokens()
     {
-        return new int[] {TokenTypes.VARIABLE_DEF};
+        return new int[] {
+            TokenTypes.VARIABLE_DEF,
+            TokenTypes.ENUM_CONSTANT_DEF,
+        };
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void visitToken(DetailAST aAST)
     {
         if (shouldCheck(aAST)) {
             final FileContents contents = getFileContents();
             final TextBlock cmt =
                 contents.getJavadocBefore(aAST.getLineNo());
 
             if (cmt == null) {
                 log(aAST, "javadoc.missing");
             }
         }
     }
 
     /**
      * Whether we should check this node.
      * @param aAST a given node.
      * @return whether we should check a given node.
      */
     private boolean shouldCheck(final DetailAST aAST)
     {
         if (ScopeUtils.inCodeBlock(aAST)) {
             return false;
         }
 
-        final DetailAST mods = aAST.findFirstToken(TokenTypes.MODIFIERS);
-        final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);
-        final Scope scope =
-            ScopeUtils.inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;
+        final Scope scope;
+        if (aAST.getType() == TokenTypes.ENUM_CONSTANT_DEF) {
+            scope = Scope.PUBLIC;
+        }
+        else {
+            final DetailAST mods = aAST.findFirstToken(TokenTypes.MODIFIERS);
+            final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);
+            scope =
+                ScopeUtils.inInterfaceOrAnnotationBlock(aAST)
+                    ? Scope.PUBLIC : declaredScope;
+        }
+
         final Scope surroundingScope = ScopeUtils.getSurroundingScope(aAST);
 
         return scope.isIn(mScope) && surroundingScope.isIn(mScope)
             && ((mExcludeScope == null)
                 || !scope.isIn(mExcludeScope)
                 || !surroundingScope.isIn(mExcludeScope));
     }
 
 }
