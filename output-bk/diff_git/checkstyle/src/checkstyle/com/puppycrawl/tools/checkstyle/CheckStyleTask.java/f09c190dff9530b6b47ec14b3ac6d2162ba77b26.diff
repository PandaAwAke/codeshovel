diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
index aa68ff5c6..3d6704dbf 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
@@ -19,101 +19,101 @@
 package com.puppycrawl.tools.checkstyle;
 
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Properties;
 import java.util.Hashtable;
 import java.net.URL;
 
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import org.apache.tools.ant.AntClassLoader;
 import org.apache.tools.ant.BuildException;
 import org.apache.tools.ant.DirectoryScanner;
 import org.apache.tools.ant.Project;
 import org.apache.tools.ant.Task;
 import org.apache.tools.ant.taskdefs.LogOutputStream;
 import org.apache.tools.ant.types.EnumeratedAttribute;
 import org.apache.tools.ant.types.FileSet;
 import org.apache.tools.ant.types.Path;
 
 /**
  * An implementation of a ANT task for calling checkstyle. See the documentation
  * of the task for usage.
  * @author <a href="mailto:oliver@puppycrawl.com">Oliver Burn</a>
  */
 public class CheckStyleTask
     extends Task
 {
     /** poor man's enum for an xml formatter */
     private static final String E_XML = "xml";
     /** poor man's enum for an plain formatter */
     private static final String E_PLAIN = "plain";
 
     /** class path to locate class files */
     private Path mClasspath;
 
     /** name of file to check */
     private String mFileName;
 
     /** config file containing configuration */
     private String mConfigLocation;
 
     /** contains package names */
     private File mPackageNamesFile = null;
-    
+
     /** whether to fail build on violations */
     private boolean mFailOnViolation = true;
 
     /** property to set on violations */
     private String mFailureProperty = null;
 
     /** contains the filesets to process */
     private final List mFileSets = new ArrayList();
 
     /** contains the formatters to log to */
     private final List mFormatters = new ArrayList();
 
     /** contains the Properties to override */
     private final List mOverrideProps = new ArrayList();
 
     /** the name of the properties file */
     private File mPropertiesFile;
 
     ////////////////////////////////////////////////////////////////////////////
     // Setters for ANT specific attributes
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Tells this task to set the named property to "true" when there
      * is a violation.
      * @param aPropertyName the name of the property to set
      *                      in the event of an failure.
      */
     public void setFailureProperty(String aPropertyName)
     {
         mFailureProperty = aPropertyName;
     }
 
     /** @param aFail whether to fail if a violation is found */
     public void setFailOnViolation(boolean aFail)
     {
         mFailOnViolation = aFail;
     }
 
     /**
      * Adds a set of files (nested fileset attribute).
      * @param aFS the file set to add
      */
     public void addFileset(FileSet aFS)
     {
         mFileSets.add(aFS);
     }
 
     /**
      * Add a formatter
@@ -188,119 +188,119 @@ public class CheckStyleTask
     {
         mPackageNamesFile = aFile;
     }
 
     ////////////////////////////////////////////////////////////////////////////
     // Setters for Checker configuration attributes
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Sets a properties file for use instead
      * of individually setting them.
      * @param aProps the properties File to use
      */
     public void setProperties(File aProps)
     {
         mPropertiesFile = aProps;
     }
 
     ////////////////////////////////////////////////////////////////////////////
     // The doers
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Actually checks the files specified. All errors are reported to
      * System.out. Will fail if any errors occurred.
      * @throws BuildException an error occurred
      */
     public void execute()
         throws BuildException
     {
         // Check for no arguments
         if ((mFileName == null) && (mFileSets.size() == 0)) {
             throw new BuildException(
                 "Must specify atleast one of 'file' or nested 'fileset'.",
                 getLocation());
         }
 
         if (mConfigLocation == null) {
             throw new BuildException("Must specify 'config'.", getLocation());
         }
 
         // Create the checker
         Checker c = null;
         try {
             try {
                 final Properties props = createOverridingProperties();
                 final Configuration config =
                     ConfigurationLoader.loadConfiguration(
                         mConfigLocation, new PropertiesExpander(props));
 
-                DefaultContext context = new DefaultContext();
-                ClassLoader loader =
+                final DefaultContext context = new DefaultContext();
+                final ClassLoader loader =
                     new AntClassLoader(getProject(), mClasspath);
                 context.add("classloader", loader);
 
                 c = new Checker();
-                
+
                 //load the set of package names
                 if (mPackageNamesFile != null) {
-                    ModuleFactory moduleFactory =
+                    final ModuleFactory moduleFactory =
                         PackageNamesLoader.loadModuleFactory(
-                        mPackageNamesFile.getAbsolutePath());
+                            mPackageNamesFile.getAbsolutePath());
                     c.setModuleFactory(moduleFactory);
                 }
                 c.contextualize(context);
                 c.configure(config);
 
                 // setup the listeners
-                AuditListener[] listeners = getListeners();
+                final AuditListener[] listeners = getListeners();
                 for (int i = 0; i < listeners.length; i++) {
                     c.addListener(listeners[i]);
                 }
             }
             catch (Exception e) {
                 throw new BuildException(
                     "Unable to create a Checker: " + e.getMessage(), e);
             }
 
             // Process the files
             final File[] files = scanFileSets();
             final int numErrs = c.process(files);
 
             // Handle the return status
             if ((numErrs > 0) && mFailureProperty != null) {
                 getProject().setProperty(mFailureProperty, "true");
             }
 
             if ((numErrs > 0) && mFailOnViolation) {
                 throw new BuildException("Got " + numErrs + " errors.",
                                          getLocation());
             }
         }
         finally {
             if (c != null) {
                 c.destroy();
             }
         }
     }
 
     /**
      * Create the Properties object based on the arguments specified
      * to the ANT task.
      * @return the properties for property expansion expansion
      * @throws BuildException if an error occurs
      */
     private Properties createOverridingProperties()
     {
         final Properties retVal = new Properties();
 
         // Load the properties file if specified
         if (mPropertiesFile != null) {
             FileInputStream inStream = null;
             try {
                 inStream = new FileInputStream(mPropertiesFile);
                 retVal.load(inStream);
             }
             catch (FileNotFoundException e) {
                 throw new BuildException(
                     "Could not find Properties file '" + mPropertiesFile + "'",
