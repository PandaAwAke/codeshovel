diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java
index 8283fb74b..4f02408ef 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java
@@ -184,85 +184,85 @@ public final class IllegalTypeCheck extends AbstractFormatCheck
         return mIllegalClassNames.contains(aClassName)
             || (!mLegalAbstractClassNames.contains(aClassName)
                 && getRegexp().matcher(aClassName).find());
     }
 
     /**
      * @param aAST method def to check.
      * @return true if we should check this method.
      */
     private boolean isCheckedMethod(DetailAST aAST)
     {
         final String methodName =
             aAST.findFirstToken(TokenTypes.IDENT).getText();
         return !mIgnoredMethodNames.contains(methodName);
     }
 
     /**
      * Set the list of illegal variable types.
      * @param aClassNames array of illegal variable types
      */
     public void setIllegalClassNames(String[] aClassNames)
     {
         mIllegalClassNames.clear();
         for (String name : aClassNames) {
             mIllegalClassNames.add(name);
             final int lastDot = name.lastIndexOf(".");
             if ((lastDot > 0) && (lastDot < (name.length() - 1))) {
                 final String shortName =
                     name.substring(name.lastIndexOf(".") + 1);
                 mIllegalClassNames.add(shortName);
             }
         }
     }
 
     /**
      * Get the list of illegal variable types.
      * @return array of illegal variable types
      */
     public String[] getIllegalClassNames()
     {
         return mIllegalClassNames.toArray(new String[0]);
     }
 
     /**
      * Set the list of ignore method names.
      * @param aMethodNames array of ignored method names
      */
     public void setIgnoredMethodNames(String[] aMethodNames)
     {
         mIgnoredMethodNames.clear();
-        for (int i = 0; i < aMethodNames.length; i++) {
-            mIgnoredMethodNames.add(aMethodNames[i]);
+        for (String element : aMethodNames) {
+            mIgnoredMethodNames.add(element);
         }
     }
 
     /**
      * Get the list of ignored method names.
      * @return array of ignored method names
      */
     public String[] getIgnoredMethodNames()
     {
         return mIgnoredMethodNames.toArray(new String[0]);
     }
 
     /**
      * Set the list of legal abstract class names.
      * @param aClassNames array of legal abstract class names
      */
     public void setLegalAbstractClassNames(String[] aClassNames)
     {
         mLegalAbstractClassNames.clear();
-        for (int i = 0; i < aClassNames.length; i++) {
-            mLegalAbstractClassNames.add(aClassNames[i]);
+        for (String element : aClassNames) {
+            mLegalAbstractClassNames.add(element);
         }
     }
 
     /**
      * Get the list of legal abstract class names.
      * @return array of legal abstract class names
      */
     public String[] getLegalAbstractClassNames()
     {
         return mLegalAbstractClassNames.toArray(new String[0]);
     }
 }
