diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
index 8d1604412..207d33544 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
@@ -1,77 +1,77 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2007  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FullIdent;
 import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
-import java.util.HashSet;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
 import java.util.Vector;
 
 /**
  * Abstract class that endeavours to maintain type information for the Java
  * file being checked. It provides helper methods for performing type
  * information functions.
  *
  * @author Oliver Burn
  * @version 1.0
  */
 public abstract class AbstractTypeAwareCheck extends Check
 {
     /** imports details **/
     private final Set<String> mImports = new HashSet<String>();
 
     /** full identifier for package of the method **/
     private FullIdent mPackageFullIdent;
 
     /** Name of current class. */
     private String mCurrentClass;
 
     /** <code>ClassResolver</code> instance for current tree. */
     private ClassResolver mClassResolver;
 
     /** Stack of maps for type params. */
     private final Vector<Map<String, ClassInfo>> mTypeParams =
         new Vector<Map<String, ClassInfo>>();
 
     /**
      * Whether to log class loading errors to the checkstyle report
      * instead of throwing a RTE.
      *
      * Logging errors will avoid stopping checkstyle completely
      * because of a typo in javadoc. However, with modern IDEs that
      * support automated refactoring and generate javadoc this will
      * occur rarely, so by default we assume a configuration problem
      * in the checkstyle classpath and throw an execption.
      *
      * This configuration option was triggered by bug 1422462.
      */
     private boolean mLogLoadErrors;
 
     /**
      * Controls whether to log class loading errors to the checkstyle report
      * instead of throwing a RTE.
      *
      * @param aLogLoadErrors true if errors should be logged
      */
@@ -236,101 +236,101 @@ public abstract class AbstractTypeAwareCheck extends Check
     }
 
     /**
      * Attempts to resolve the Class for a specified name.
      * @param aClassName name of the class to resolve
      * @param aCurrentClass name of surrounding class.
      * @return the resolved class or <code>null</code>
      *          if unable to resolve the class.
      */
     protected final Class<?> resolveClass(String aClassName,
             String aCurrentClass)
     {
         try {
             return getClassResolver().resolve(aClassName, aCurrentClass);
         }
         catch (final ClassNotFoundException e) {
             return null;
         }
     }
 
     /**
      * Tries to load class. Logs error if unable.
      * @param aIdent name of class which we try to load.
      * @param aCurrentClass name of surrounding class.
      * @return <code>Class</code> for a ident.
      */
     protected final Class<?> tryLoadClass(Token aIdent, String aCurrentClass)
     {
         final Class<?> clazz = resolveClass(aIdent.getText(), aCurrentClass);
         if (clazz == null) {
             logLoadError(aIdent);
         }
         return clazz;
     }
 
     /**
      * Logs error if unable to load class information.
      * Abstract, should be overrided in subclasses.
      * @param aIdent class name for which we can no load class.
      */
     protected abstract void logLoadError(Token aIdent);
 
     /**
      * Common implementation for logLoadError() method.
      * @param aLineNo line number of the problem.
      * @param aColumnNo column number of the problem.
      * @param aMsgKey message key to use.
      * @param aValues values to fill the message out.
      */
     protected final void logLoadErrorImpl(int aLineNo, int aColumnNo,
-                                          String aMsgKey, Object[] aValues)
+                                          String aMsgKey, Object... aValues)
     {
         if (!mLogLoadErrors) {
             final LocalizedMessage msg = new LocalizedMessage(aLineNo,
                                                     aColumnNo,
                                                     getMessageBundle(),
                                                     aMsgKey,
                                                     aValues,
                                                     getSeverityLevel(),
                                                     getId(),
                                                     this.getClass());
             throw new RuntimeException(msg.getMessage());
         }
 
         if (!mSuppressLoadErrors) {
             log(aLineNo, aColumnNo, aMsgKey, aValues);
         }
     }
 
     /**
      * Collects the details of a package.
      * @param aAST node containing the package details
      */
     private void processPackage(DetailAST aAST)
     {
         final DetailAST nameAST = aAST.getLastChild().getPreviousSibling();
         mPackageFullIdent = FullIdent.createFullIdent(nameAST);
     }
 
     /**
      * Collects the details of imports.
      * @param aAST node containing the import details
      */
     private void processImport(DetailAST aAST)
     {
         final FullIdent name = FullIdent.createFullIdentBelow(aAST);
         if (name != null) {
             mImports.add(name.getText());
         }
     }
 
     /**
      * Process type params (if any) for given class, enum or method.
      * @param aAST class, enum or method to process.
      */
     private void processTypeParams(DetailAST aAST)
     {
         final DetailAST typeParams =
             aAST.findFirstToken(TokenTypes.TYPE_PARAMETERS);
 
         final Map<String, ClassInfo> paramsMap =
