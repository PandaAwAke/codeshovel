diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/XMLLogger.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/XMLLogger.java
index db045e8db..d4f403c70 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/XMLLogger.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/XMLLogger.java
@@ -67,101 +67,101 @@ public class XMLLogger
     public XMLLogger(OutputStream aOS, boolean aCloseStream)
     {
         setOutputStream(aOS);
         mCloseStream = aCloseStream;
     }
 
     /**
      * sets the OutputStream
      * @param aOS the OutputStream to use
      **/
     private void setOutputStream(OutputStream aOS)
     {
         try {
             final OutputStreamWriter osw = new OutputStreamWriter(aOS, "UTF-8");
             mWriter = new PrintWriter(osw);
         }
         catch (final UnsupportedEncodingException e) {
             // unlikely to happen...
             throw new ExceptionInInitializerError(e);
         }
     }
 
     /** {@inheritDoc} */
     public void auditStarted(AuditEvent aEvt)
     {
         mWriter.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
 
         final ResourceBundle compilationProperties =
             ResourceBundle.getBundle("checkstylecompilation");
         final String version =
             compilationProperties.getString("checkstyle.compile.version");
 
         mWriter.println("<checkstyle version=\"" + version + "\">");
     }
 
     /** {@inheritDoc} */
     public void auditFinished(AuditEvent aEvt)
     {
         mWriter.println("</checkstyle>");
         if (mCloseStream) {
             mWriter.close();
         }
         else {
             mWriter.flush();
         }
     }
 
     /** {@inheritDoc} */
     public void fileStarted(AuditEvent aEvt)
     {
-        mWriter.println("<file name=\"" + aEvt.getFileName() + "\">");
+        mWriter.println("<file name=\"" + encode(aEvt.getFileName()) + "\">");
     }
 
     /** {@inheritDoc} */
     public void fileFinished(AuditEvent aEvt)
     {
         mWriter.println("</file>");
     }
 
     /** {@inheritDoc} */
     public void addError(AuditEvent aEvt)
     {
         if (!SeverityLevel.IGNORE.equals(aEvt.getSeverityLevel())) {
             mWriter.print("<error" + " line=\"" + aEvt.getLine() + "\"");
             if (aEvt.getColumn() > 0) {
                 mWriter.print(" column=\"" + aEvt.getColumn() + "\"");
             }
             mWriter.print(" severity=\""
                 + aEvt.getSeverityLevel().getName()
                 + "\"");
             mWriter.print(" message=\""
                 + encode(aEvt.getMessage())
                 + "\"");
             mWriter.println(" source=\""
                 + encode(aEvt.getSourceName())
                 + "\"/>");
         }
     }
 
     /** {@inheritDoc} */
     public void addException(AuditEvent aEvt, Throwable aThrowable)
     {
         final StringWriter sw = new StringWriter();
         final PrintWriter pw = new PrintWriter(sw);
         pw.println("<exception>");
         pw.println("<![CDATA[");
         aThrowable.printStackTrace(pw);
         pw.println("]]>");
         pw.println("</exception>");
         pw.flush();
         mWriter.println(encode(sw.toString()));
     }
 
     /**
      * Escape &lt;, &gt; &amp; &apos; and &quot; as their entities.
      * @param aValue the value to escape.
      * @return the escaped value if necessary.
      */
     public String encode(String aValue)
     {
         final StringBuffer sb = new StringBuffer();
