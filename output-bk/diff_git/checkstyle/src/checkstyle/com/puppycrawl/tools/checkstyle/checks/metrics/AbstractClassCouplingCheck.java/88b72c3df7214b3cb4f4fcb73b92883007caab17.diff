diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java
index 55599cd4d..d62dce2b2 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java
@@ -215,92 +215,91 @@ public abstract class AbstractClassCouplingCheck extends Check
          * @param aColumnNo column of class definition.
          */
         public Context(String aClassName, int aLineNo, int aColumnNo)
         {
             mClassName = aClassName;
             mLineNo = aLineNo;
             mColumnNo = aColumnNo;
         }
 
         /**
          * Visits throws clause and collects all exceptions we throw.
          * @param aThrows throws to process.
          */
         public void visitLiteralThrows(DetailAST aThrows)
         {
             for (DetailAST childAST = (DetailAST) aThrows.getFirstChild();
                  childAST != null;
                  childAST = (DetailAST) childAST.getNextSibling())
             {
                 if (childAST.getType() != TokenTypes.COMMA) {
                     addReferencedClassName(childAST);
                 }
             }
         }
 
         /**
          * Visits type.
          * @param aAST type to process.
          */
         public void visitType(DetailAST aAST)
         {
             final String className = CheckUtils.createFullType(aAST).getText();
             mContext.addReferencedClassName(className);
         }
 
         /**
          * Visits NEW.
          * @param aAST NEW to process.
          */
         public void visitLiteralNew(DetailAST aAST)
         {
             mContext.addReferencedClassName((DetailAST) aAST.getFirstChild());
         }
 
         /**
          * Adds new referenced class.
          * @param aAST a node which represents referenced class.
          */
         private void addReferencedClassName(DetailAST aAST)
         {
-            final String className =
-                FullIdent.createFullIdent((DetailAST) aAST).getText();
+            final String className = FullIdent.createFullIdent(aAST).getText();
             addReferencedClassName(className);
         }
 
         /**
          * Adds new referenced class.
          * @param aClassName class name of the referenced class.
          */
         private void addReferencedClassName(String aClassName)
         {
             if (isSignificant(aClassName)) {
                 mReferencedClassNames.add(aClassName);
             }
         }
 
         /** Checks if coupling less than allowed or not. */
         public void checkCoupling()
         {
             mReferencedClassNames.remove(mClassName);
             mReferencedClassNames.remove(mPackageName + "." + mClassName);
 
             if (mReferencedClassNames.size() > mMax) {
                 log(mLineNo, mColumnNo, getLogMessageId(),
                     new Integer(mReferencedClassNames.size()),
                     new Integer(getMax()));
             }
         }
 
         /**
          * Checks if given class shouldn't be ignored and not from java.lang.
          * @param aClassName class to check.
          * @return true if we should count this class.
          */
         private boolean isSignificant(String aClassName)
         {
             return aClassName.length() > 0
                     && !mIgnoredClassNames.contains(aClassName)
                     && !aClassName.startsWith("java.lang.");
         }
     }
 }
