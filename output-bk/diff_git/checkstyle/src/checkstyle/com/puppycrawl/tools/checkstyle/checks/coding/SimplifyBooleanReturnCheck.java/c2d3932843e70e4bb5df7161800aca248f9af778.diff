diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java
index bf012e7c0..96ea8cf7e 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java
@@ -74,76 +74,76 @@ public class SimplifyBooleanReturnCheck
             && returnsOnlyBooleanLiteral(elseStatement))
         {
             log(aAST.getLineNo(), aAST.getColumnNo(), "simplify.boolreturn");
         }
     }
 
     /**
      * Returns if an AST is a return statment with a boolean literal
      * or a compound statement that contains only such a return statement.
      *
      * Returns <code>true</code> iff aAST represents
      * <br>
      * <pre>
      * return true/false;
      * <pre>
      * or
      * <br>
      * <pre>
      * {
      *   return true/false;
      * }
      * <pre>
      *
      * @param aAST the sytax tree to check
      * @return if aAST is a return statment with a boolean literal.
      */
     private static boolean returnsOnlyBooleanLiteral(AST aAST)
     {
         if (isBooleanLiteralReturnStatement(aAST)) {
             return true;
         }
 
         final AST firstStmnt = aAST.getFirstChild();
         return isBooleanLiteralReturnStatement(firstStmnt);
     }
 
     /**
      * Returns if an AST is a return statment with a boolean literal.
      *
      * Returns <code>true</code> iff aAST represents
      * <br>
      * <pre>
      * return true/false;
      * <pre>
      *
      * @param aAST the sytax tree to check
      * @return if aAST is a return statment with a boolean literal.
      */
     private static boolean isBooleanLiteralReturnStatement(AST aAST)
     {
-        if (aAST == null || aAST.getType() != TokenTypes.LITERAL_RETURN) {
+        if ((aAST == null) || (aAST.getType() != TokenTypes.LITERAL_RETURN)) {
             return false;
         }
 
         final AST expr = aAST.getFirstChild();
 
         if ((expr == null) || (expr.getType() == TokenTypes.SEMI)) {
             return false;
         }
 
         final AST value = expr.getFirstChild();
         return isBooleanLiteralType(value.getType());
     }
 
     /**
      * Checks if a token type is a literal true or false.
      * @param aTokenType the TokenType
      * @return true iff aTokenType is LITERAL_TRUE or LITERAL_FALSE
      */
     private static boolean isBooleanLiteralType(final int aTokenType)
     {
         final boolean isTrue = (aTokenType == TokenTypes.LITERAL_TRUE);
         final boolean isFalse = (aTokenType == TokenTypes.LITERAL_FALSE);
         return isTrue || isFalse;
     }
 }
