diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/DefaultLogger.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/DefaultLogger.java
index 4b9d6bb91..6187159e1 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/DefaultLogger.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/DefaultLogger.java
@@ -67,82 +67,80 @@ public class DefaultLogger
                          boolean aCloseInfoAfterUse,
                          OutputStream aErrorStream,
                          boolean aCloseErrorAfterUse)
     {
         mCloseInfo = aCloseInfoAfterUse;
         mCloseError = aCloseErrorAfterUse;
         mInfoWriter = new PrintWriter(aInfoStream);
         mErrorWriter = (aInfoStream == aErrorStream)
             ? mInfoWriter
             : new PrintWriter(aErrorStream);
     }
 
     /**
      * Print an Emacs compliant line on the error stream.
      * If the column number is non zero, then also display it.
      * @see AuditListener
      **/
     public void addError(AuditEvent aEvt)
     {
         if (aEvt.getColumn() > 0) {
             mErrorWriter.println(aEvt.getFileName()
                                  + ":" + aEvt.getLine()
                                  + ":" + aEvt.getColumn()
                                  + ": " + aEvt.getMessage());
         }
         else {
             mErrorWriter.println(aEvt.getFileName()
                                  + ":" + aEvt.getLine()
                                  + ": " + aEvt.getMessage());
         }
     }
 
     /** @see AuditListener **/
     public void addException(AuditEvent aEvt, Throwable aThrowable)
     {
         synchronized (mErrorWriter) {
             mErrorWriter.println("Error auditing " + aEvt.getFileName());
             aThrowable.printStackTrace(mErrorWriter);
         }
     }
 
     /** @see AuditListener **/
     public void auditStarted(AuditEvent aEvt)
     {
         mInfoWriter.println("Starting audit...");
     }
 
     /** @see AuditListener **/
     public void fileFinished(AuditEvent aEvt)
     {
-        mInfoWriter.println("finished checking " + aEvt.getFileName());
     }
 
     /** @see AuditListener **/
     public void fileStarted(AuditEvent aEvt)
     {
-        mInfoWriter.println("Started checking " + aEvt.getFileName());
     }
 
     /** @see AuditListener **/
     public void auditFinished(AuditEvent aEvt)
     {
         mInfoWriter.println("Audit done.");
         closeStreams();
     }
 
     /**
      * Flushes the output streams and closes them if needed.
      */
     protected void closeStreams()
     {
         mInfoWriter.flush();
         if (mCloseInfo) {
             mInfoWriter.close();
         }
 
         mErrorWriter.flush();
         if (mCloseError) {
             mErrorWriter.close();
         }
     }
 }
