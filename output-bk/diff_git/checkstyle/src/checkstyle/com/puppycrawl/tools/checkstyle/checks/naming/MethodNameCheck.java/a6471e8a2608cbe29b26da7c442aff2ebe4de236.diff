diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheck.java
index 5618669f8..8f9e4ea81 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheck.java
@@ -51,66 +51,74 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  * &lt;module name="MethodName"&gt;
  *    &lt;property name="format" value="^[a-z](_?[a-zA-Z0-9]+)*$"/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * <p>
  * An example of how to configure the check to allow method names
  * to be equal to the residing class name is:
  * </p>
  * <pre>
  * &lt;module name="MethodName"&gt;
  *    &lt;property name="allowClassName" value="true"/&gt;
  * &lt;/module&gt;
  * </pre>
  * @author Oliver Burn
  * @author Travis Schneeberger
  * @version 1.1
  */
 public class MethodNameCheck extends AbstractNameCheck
 {
     /**
      * for allowing method name to be the same as the class name.
      */
     private boolean mAllowClassName;
 
     /** Creates a new <code>MethodNameCheck</code> instance. */
     public MethodNameCheck()
     {
         super("^[a-z][a-zA-Z0-9]*$");
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.METHOD_DEF, };
     }
 
     @Override
     public void visitToken(DetailAST aAst)
     {
         super.visitToken(aAst); // Will check the name against the format.
 
         if (!mAllowClassName) {
             final DetailAST method =
                 aAst.findFirstToken(TokenTypes.IDENT);
             //in all cases this will be the classDef type except anon inner
             //with anon inner classes this will be the Literal_New keyword
             final DetailAST classDefOrNew = aAst.getParent().getParent();
             final DetailAST classIdent =
                 classDefOrNew.findFirstToken(TokenTypes.IDENT);
-            if (method.getText().equals(classIdent.getText())) {
+            // Following logic is to handle when a classIdent can not be
+            // found. This is when you have a Literal_New keyword followed
+            // a DOT, which is when you have:
+            // new Outclass.InnerInterface(x) { ... }
+            // Such a rare case, will not have the logic to handle parsing
+            // down the tree looking for the first ident.
+            if ((null != classIdent)
+                && method.getText().equals(classIdent.getText()))
+            {
                 log(method.getLineNo(), method.getColumnNo(),
                     "method.name.equals.class.name", method.getText());
             }
         }
     }
 
     /**
      * Sets the property for allowing a method to be the same name as a class.
      * @param aAllowClassName true to allow false to disallow
      */
     public void setAllowClassName(boolean aAllowClassName)
     {
         mAllowClassName = aAllowClassName;
     }
 }
