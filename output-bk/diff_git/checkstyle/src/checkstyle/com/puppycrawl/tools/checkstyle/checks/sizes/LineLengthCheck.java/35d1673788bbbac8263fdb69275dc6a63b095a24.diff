diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java
index 5124c39ed..508d90f93 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java
@@ -92,56 +92,56 @@ public class LineLengthCheck extends Check
      */
     public LineLengthCheck()
     {
         setIgnorePattern("^$");
     }
 
     /** {@inheritDoc} */
     public int[] getDefaultTokens()
     {
         return new int[0];
     }
 
     /** {@inheritDoc} */
     public void beginTree(DetailAST aRootAST)
     {
         final String[] lines = getLines();
         for (int i = 0; i < lines.length; i++) {
 
             final String line = lines[i];
             final int realLength = Utils.lengthExpandedTabs(
                 line, line.length(), getTabWidth());
 
 
             if ((realLength > mMax)
                 && !mIgnorePattern.matcher(line).find())
             {
                 log(i + 1, "maxLineLen", new Integer(mMax));
             }
         }
     }
 
     /**
      * @param aLength the maximum length of a line
      */
     public void setMax(int aLength)
     {
         mMax = aLength;
     }
 
     /**
      * Set the ignore pattern.
      * @param aFormat a <code>String</code> value
      * @throws ConversionException unable to parse aFormat
      */
     public void setIgnorePattern(String aFormat)
         throws ConversionException
     {
         try {
             mIgnorePattern = Utils.getPattern(aFormat);
         }
-        catch (PatternSyntaxException e) {
+        catch (final PatternSyntaxException e) {
             throw new ConversionException("unable to parse " + aFormat, e);
         }
     }
 
 }
