diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
index 1760603e5..d3fb87ae5 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
@@ -468,166 +468,177 @@ public class CheckStyleTask
             log("Adding standalone file for audit", Project.MSG_VERBOSE);
             list.add(new File(mFileName));
         }
         for (int i = 0; i < mFileSets.size(); i++) {
             final FileSet fs = (FileSet) mFileSets.get(i);
             final DirectoryScanner ds = fs.getDirectoryScanner(getProject());
             ds.scan();
 
             final String[] names = ds.getIncludedFiles();
             log(i + ") Adding " + names.length + " files from directory "
                 + ds.getBasedir(),
                 Project.MSG_VERBOSE);
 
             for (int j = 0; j < names.length; j++) {
                 final String pathname =
                     ds.getBasedir() + File.separator + names[j];
                 list.add(new File(pathname));
             }
         }
 
         return (File[]) list.toArray(new File[0]);
     }
 
     /**
      * Poor mans enumeration for the formatter types.
      * @author Oliver Burn
      */
     public static class FormatterType
         extends EnumeratedAttribute
     {
         /** my possible values */
         private static final String[] VALUES = {E_XML, E_PLAIN};
 
         /** @see EnumeratedAttribute */
         public String[] getValues()
         {
             return VALUES;
         }
     }
 
     /**
      * Details about a formatter to be used.
      * @author Oliver Burn
      */
     public static class Formatter
     {
         /** the formatter type */
         private FormatterType mFormatterType;
         /** the file to output to */
         private File mToFile;
+        /** Whether or not the write to the named file. */
+        private boolean mUseFile = true;
 
         /**
          * Set the type of the formatter.
          * @param aType the type
          */
         public void setType(FormatterType aType)
         {
             final String val = aType.getValue();
             if (!E_XML.equals(val) && !E_PLAIN.equals(val)) {
                 throw new BuildException("Invalid formatter type: " + val);
             }
 
             mFormatterType = aType;
         }
 
         /**
          * Set the file to output to.
          * @param aTo the file to output to
          */
         public void setTofile(File aTo)
         {
             mToFile = aTo;
         }
 
+        /**
+         * Sets whether or not we write to a file if it is provided.
+         * @param aUse whether not not to use provided file.
+         */
+        public void setUseFile(boolean aUse)
+        {
+            mUseFile = aUse;
+        }
+
         /**
          * Creates a listener for the formatter.
          * @param aTask the task running
          * @return a listener
          * @throws IOException if an error occurs
          */
         public AuditListener createListener(Task aTask)
             throws IOException
         {
             if ((mFormatterType != null)
                 && E_XML.equals(mFormatterType.getValue()))
             {
                 return createXMLLogger(aTask);
             }
             return createDefaultLogger(aTask);
         }
 
         /**
          * @return a DefaultLogger instance
          * @param aTask the task to possibly log to
          * @throws IOException if an error occurs
          */
         private AuditListener createDefaultLogger(Task aTask)
             throws IOException
         {
-            if (mToFile == null) {
+            if (mToFile == null || !mUseFile) {
                 return new DefaultLogger(
                     new LogOutputStream(aTask, Project.MSG_DEBUG), true,
                     new LogOutputStream(aTask, Project.MSG_ERR), true);
             }
             return new DefaultLogger(new FileOutputStream(mToFile), true);
         }
 
         /**
          * @return an XMLLogger instance
          * @param aTask the task to possibly log to
          * @throws IOException if an error occurs
          */
         private AuditListener createXMLLogger(Task aTask)
             throws IOException
         {
-            if (mToFile == null) {
+            if (mToFile == null || !mUseFile) {
                 return new XMLLogger(
                     new LogOutputStream(aTask, Project.MSG_INFO), true);
             }
             return new XMLLogger(new FileOutputStream(mToFile), true);
         }
     }
 
     /**
      * Represents a property that consists of a key and value.
      */
     public static class Property
     {
         /** the property key */
         private String mKey;
         /** the property value */
         private String mValue;
 
         /** @return the property key */
         public String getKey()
         {
             return mKey;
         }
 
         /** @param aKey sets the property key */
         public void setKey(String aKey)
         {
             mKey = aKey;
         }
 
         /** @return the property value */
         public String getValue()
         {
             return mValue;
         }
 
         /** @param aValue set the property value */
         public void setValue(String aValue)
         {
             mValue = aValue;
         }
 
         /** @param aValue set the property value from a File */
         public void setFile(File aValue)
         {
             setValue(aValue.getAbsolutePath());
         }
     }
 
     /** Represents a custom listener. */
     public static class Listener
