diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/SimplifyBooleanReturnCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/SimplifyBooleanReturnCheck.java
index 9eabedff4..b8770e40b 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/SimplifyBooleanReturnCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/SimplifyBooleanReturnCheck.java
@@ -20,104 +20,101 @@
 package com.puppycrawl.tools.checkstyle.checks;
 
 import antlr.collections.AST;
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 
 
 /**
  * Checks for overly complicated boolean return statements.
  *
  * Idea shamelessly stolen from the equivalent PMD rule (pmd.sourceforge.net).
  *
  * @author Lars Kï¿½hne
  */
 public class SimplifyBooleanReturnCheck
     extends Check
 {
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.LITERAL_IF};
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void visitToken(DetailAST aAST)
     {
         // LITERAL_IF has the following four or five children:
         // '('
         // condition
         // ')'
         // thenstatement
         // [ LITERAL_ELSE (with the elseStatement as a child) ]
 
         // don't bother if this is not if then else
         final AST elseLiteral =
             aAST.findFirstToken(TokenTypes.LITERAL_ELSE);
         if (elseLiteral == null) {
             return;
         }
         final AST elseStatement = elseLiteral.getFirstChild();
 
         // skip '(' and ')'
         // TODO: Introduce helpers in DetailAST
         AST condition = aAST.getFirstChild().getNextSibling();
         AST thenStatement = condition.getNextSibling().getNextSibling();
 
         if (returnsOnlyBooleanLiteral(thenStatement)
             && returnsOnlyBooleanLiteral(elseStatement))
         {
-            // TODO: i18n
-            log(aAST.getLineNo(),
-                aAST.getColumnNo(),
-                "Remove conditional logic.");
+            log(aAST.getLineNo(), aAST.getColumnNo(), "simplify.boolreturn");
         }
     }
 
     /**
      * Returns if an AST is a return statment with a boolean literal
      * or a compound statement that contains only such a return statement.
      *
      * Returns <code>true</code> iff aAST represents
      * <br>
      * <pre>
      * return true/false;
      * <pre>
      * or
      * <br>
      * <pre>
      * {
      *   return true/false;
      * }
      * <pre>
      *
      * @param aAST the sytax tree to check
      * @return if aAST is a return statment with a boolean literal.
      */
     private static boolean returnsOnlyBooleanLiteral(AST aAST)
     {
         if (isBooleanLiteralReturnStatement(aAST)) {
             return true;
         }
 
         AST firstStmnt = aAST.getFirstChild();
         return isBooleanLiteralReturnStatement(firstStmnt);
     }
 
     /**
      * Returns if an AST is a return statment with a boolean literal.
      *
      * Returns <code>true</code> iff aAST represents
      * <br>
      * <pre>
      * return true/false;
      * <pre>
      *
      * @param aAST the sytax tree to check
      * @return if aAST is a return statment with a boolean literal.
      */
     private static boolean isBooleanLiteralReturnStatement(AST aAST)
     {
         if (aAST == null || aAST.getType() != TokenTypes.LITERAL_RETURN) {
             return false;
         }
