diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
index 8cd607a6a..cd1444f0f 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
@@ -109,102 +109,102 @@ public class ParseTreeInfoPanel extends JPanel
         }
 
         public void actionPerformed(ActionEvent e)
         {
             final Component parent =
                 SwingUtilities.getRoot(ParseTreeInfoPanel.this);
             openFile(mCurrentFile, parent);
         }
     }
 
 
     private class FileDropListener implements FileDrop.Listener
     {
         private final JScrollPane mSp;
 
         public void filesDropped(File[] files)
         {
             if ((files != null) && (files.length > 0))
             {
                 final File file = files[0];
                 openFile(file, mSp);
             }
         }
 
         public FileDropListener(JScrollPane aSp)
         {
             mSp = aSp;
         }
     }
 
 
     public void openFile(File aFile, final Component aParent)
     {
         if (aFile != null) {
             try {
                 Main.frame.setTitle("Checkstyle : " + aFile.getName());
                 final DetailAST parseTree = parseFile(aFile.getAbsolutePath());
                 mParseTreeModel.setParseTree(parseTree);
                 mCurrentFile = aFile;
                 mLastDirectory = aFile.getParentFile();
                 reloadAction.setEnabled(true);
 
                 final String[] sourceLines = Utils.getLines(aFile.getAbsolutePath());
                 //clean the text area before inserting the lines of the new file
                 if (mJTextArea.getText().length() != 0) {
                     mJTextArea.replaceRange("", 0, mJTextArea.getText()
                             .length());
                 }
 
                 // insert the contents of the file to the text area
-                for (int i = 0; i < sourceLines.length; i++) {
-                    mJTextArea.append(sourceLines[i] + "\n");
+                for (String element : sourceLines) {
+                    mJTextArea.append(element + "\n");
                 }
 
                 // move back to the top of the file
                 mJTextArea.moveCaretPosition(0);
             }
             catch (final IOException ex) {
                 showErrorDialog(
                         aParent,
                         "Could not open " + aFile + ": " + ex.getMessage());
             }
             catch (final ANTLRException ex) {
                 showErrorDialog(
                         aParent,
                         "Could not parse " + aFile + ": " + ex.getMessage());
             }
         }
     }
 
     /**
      * Parses a file and returns the parse tree.
      * @param aFileName the file to parse
      * @return the root node of the parse tree
      * @throws IOException if the file cannot be opened
      * @throws ANTLRException if the file is not a Java source
      */
     public static DetailAST parseFile(String aFileName)
         throws IOException, ANTLRException
     {
         final String[] lines = Utils.getLines(aFileName);
         final FileContents contents = new FileContents(aFileName, lines);
         return TreeWalker.parse(contents);
     }
 
     /**
      * Create a new ParseTreeInfoPanel instance.
      */
     public ParseTreeInfoPanel()
     {
         setLayout(new BorderLayout());
 
         final DetailAST treeRoot = null;
         mParseTreeModel = new ParseTreeModel(treeRoot);
         mTreeTable = new JTreeTable(mParseTreeModel);
         final JScrollPane sp = new JScrollPane(mTreeTable);
         this.add(sp, BorderLayout.NORTH);
 
         final JButton fileSelectionButton =
             new JButton(new FileSelectionAction());
 
         reloadAction = new ReloadAction();
