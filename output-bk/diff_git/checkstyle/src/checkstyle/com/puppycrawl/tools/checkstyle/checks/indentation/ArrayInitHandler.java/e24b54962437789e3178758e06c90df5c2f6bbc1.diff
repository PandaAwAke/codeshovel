diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java
index a42c4dea0..f4b5cde98 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java
@@ -73,51 +73,96 @@ public class ArrayInitHandler extends BlockParentHandler
 
     /**
      * Get the left curly brace portion of the expression we are handling.
      *
      * @return the left curly brace expression
      */
     protected DetailAST getLCurly()
     {
         return getMainAst();
     }
 
     /**
      * Get the right curly brace portion of the expression we are handling.
      *
      * @return the right curly brace expression
      */
     protected DetailAST getRCurly()
     {
         return getMainAst().findFirstToken(TokenTypes.RCURLY);
     }
 
     /**
      * Determines if the right curly brace must be at the start of the line.
      *
      * @return false
      */
     protected boolean rcurlyMustStart()
     {
         return false;
     }
 
     /**
      * Determines if child elements within the expression may be nested.
      *
      * @return true
      */
     protected boolean childrenMayNest()
     {
         return true;
     }
 
     /**
      * Get the child element representing the list of statements.
      *
      * @return the statement list child
      */
     protected DetailAST getListChild()
     {
         return getMainAst();
     }
+
+    /** @see BlockParentHandler */
+    protected int getChildrenExpectedLevel()
+    {
+        // now we accept "new int[] {1,
+        //                           2};"
+        // TODO: should be accepted 
+        // new int[] {1, 2,
+        //     3};
+        // see InputValidArrayIndent.java (array6)
+
+        final int firstLine = getFirstLine(Integer.MAX_VALUE, getListChild());
+        if (hasCurlys() && firstLine == getLCurly().getLineNo()) {
+            final int lcurlyPos = expandedTabsColumnNo(getLCurly());
+            int firstChildPos =
+                getNextFirstNonblankOnLineAfter(firstLine, lcurlyPos);
+            if (firstChildPos >= 0) {
+                return firstChildPos;
+            }
+        }
+
+        return super.getChildrenExpectedLevel();
+    }
+
+    /**
+     * @param aLineNo   number of line on which we search
+     * @param aColumnNo number of column after which we search
+     *
+     * @return column number of first non-blank char after
+     *         specified column on specified line or -1 if
+     *         such char doesn't exist.
+     */
+    private int getNextFirstNonblankOnLineAfter(int aLineNo, int aColumnNo)
+    {
+        int columnNo = aColumnNo + 1;
+        final String line = getIndentCheck().getLines()[aLineNo - 1];
+        final int lineLength = line.length();
+        while (columnNo < lineLength
+               && Character.isWhitespace(line.charAt(columnNo)))
+        {
+            columnNo++;
+        }
+
+        return (columnNo == lineLength) ? -1 : columnNo;
+    }
 }
