diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/LocalFinalVariableNameCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/LocalFinalVariableNameCheck.java
index 1e9d899ad..b6949d04d 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/LocalFinalVariableNameCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/LocalFinalVariableNameCheck.java
@@ -24,54 +24,53 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * <p>
  * Checks that local final variable names conform to a format specified
  * by the format property. The format is a
  * <a href="http://jakarta.apache.org/regexp/apidocs/org/apache/regexp/RE.html">
  * regular expression</a> and defaults to
  * <strong>^[a-z][a-zA-Z0-9]*$</strong>.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="LocalFinalVariableName"/&gt;
  * </pre>
  * <p>
  * An example of how to configure the check for names that are only upper case
  * letters and digits is:
  * </p>
  * <pre>
  * &lt;module name="LocalFinalVariableName"&gt;
  *    &lt;property name="format" value="^[A-Z][A-Z0-9]*$"/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * @author Rick Giles
  * @version 1.0
  */
 public class LocalFinalVariableNameCheck
     extends AbstractNameCheck
 {
     /** Creates a new <code>LocalFinalVariableNameCheck</code> instance. */
     public LocalFinalVariableNameCheck()
     {
         super("^[a-z][a-zA-Z0-9]*$");
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.VARIABLE_DEF};
     }
 
     /** @see com.puppycrawl.tools.checkstyle.checks.AbstractNameCheck */
     protected final boolean mustCheckName(DetailAST aAST)
     {
         final DetailAST modifiersAST =
             aAST.findFirstToken(TokenTypes.MODIFIERS);
         final boolean isFinal = (modifiersAST != null)
             && modifiersAST.branchContains(TokenTypes.FINAL);
-
-        return (isFinal && ScopeUtils.inCodeBlock(aAST));
+        return (isFinal && ScopeUtils.isLocalVariableDef(aAST));
     }
 }
