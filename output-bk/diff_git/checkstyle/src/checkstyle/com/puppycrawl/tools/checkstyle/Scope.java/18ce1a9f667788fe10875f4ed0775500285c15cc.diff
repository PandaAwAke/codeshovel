diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java
index 867b820d8..cf0625e9a 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java
@@ -112,72 +112,72 @@ public final class Scope implements Comparable, Serializable
     /**
      * @return the name of this scope.
      */
     String getName()
     {
         return mName;
     }
 
     /**
      * @see Comparable
      */
     public int compareTo(Object aObject)
     {
         Scope scope = (Scope) aObject;
         return this.mCode - scope.mCode;
     }
 
     /**
      * Checks if this scope is a subscope of another scope.
      * Example: PUBLIC is a subscope of PRIVATE.
      *
      * @param aScope a <code>Scope</code> value
      * @return if <code>this</code> is a subscope of <code>aScope</code>.
      */
     boolean isIn(Scope aScope)
     {
         return (compareTo(aScope) <= 0);
     }
 
     /**
      * Creates a new <code>Scope</code> instance.
      *
      * @param aCode one of the SCOPECODE_XYZ values.
      * @param aName one of the SCOPENAME_XYZ values.
      */
     private Scope(int aCode, String aName)
     {
         mCode = aCode;
         mName = aName;
     }
 
     /**
      * Scope factory method.
      *
      * @param aScopeName scope name, such as "nothing", "public", etc.
      * @return the <code>Scope</code> associated with <code>aScopeName</code>
      */
     static Scope getInstance(String aScopeName)
     {
         // canonicalize argument
-        String scopeName = aScopeName.toLowerCase();
+        final String scopeName = aScopeName.trim().toLowerCase();
 
         final Scope retVal = (Scope) NAME_TO_SCOPE.get(scopeName);
         if (retVal == null) {
             throw new IllegalArgumentException(scopeName);
         }
         return retVal;
     }
 
     /**
      * Ensures that we don't get multiple instances of one Scope
      * during deserialization. See Section 3.6 of the Java Object
      * Serialization Specification for details.
      *
      * @return the serialization replacement object
      * @throws ObjectStreamException if a deserialization error occurs
      */
     private Object readResolve() throws ObjectStreamException
     {
         return getInstance(mName);
     }
 }
