diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
index 820df7866..8401b64c5 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
@@ -78,106 +78,125 @@ public final class TreeWalker
         {
             super(aLexer);
         }
 
         /**
          * Parser error-reporting function, does nothing.
          * @param aRex the exception to be reported
          */
         public void reportError(RecognitionException aRex)
         {
         }
 
         /**
          * Parser error-reporting function, does nothing.
          * @param aMsg the error message
          */
         public void reportError(String aMsg)
         {
         }
 
         /**
          * Parser warning-reporting function, does nothing.
          * @param aMsg the error message
          */
         public void reportWarning(String aMsg)
         {
         }
     }
 
     /** default distance between tab stops */
     private static final int DEFAULT_TAB_WIDTH = 8;
 
     /** maps from token name to checks */
     private final Map mTokenToChecks = new HashMap();
     /** all the registered checks */
     private final Set mAllChecks = new HashSet();
     /** the distance between tab stops */
     private int mTabWidth = DEFAULT_TAB_WIDTH;
     /** cache file **/
     private PropertyCacheFile mCache = new PropertyCacheFile(null, null);
 
     /** class loader to resolve classes with. **/
     private ClassLoader mClassLoader;
 
     /** context of child components */
     private Context mChildContext;
 
     /** a factory for creating submodules (i.e. the Checks) */
     private ModuleFactory mModuleFactory;
 
+    /** contrals whether we should use recursive or iterative
+     * algorithm for tree processing.
+     */
+    private final boolean mRecursive;
+
     /**
      * Creates a new <code>TreeWalker</code> instance.
      */
     public TreeWalker()
     {
         setFileExtensions(new String[]{"java"});
+        // Tree walker can use two possible algorithms for
+        // tree processing (iterative and recursive.
+        // Recursive is default for now.
+        String recursive =
+            System.getProperty("checkstyle.use.recursive.algorithm", "true");
+        mRecursive = "true".equals(recursive);
+        if (mRecursive) {
+            Utils.getExceptionLogger()
+                .debug("TreeWalker uses recursive algorithm");
+        }
+        else {
+            Utils.getExceptionLogger()
+                .debug("TreeWalker uses iterative algorithm");
+        }
     }
 
     /** @param aTabWidth the distance between tab stops */
     public void setTabWidth(int aTabWidth)
     {
         mTabWidth = aTabWidth;
     }
 
     /** @param aFileName the cache file */
     public void setCacheFile(String aFileName)
     {
         final Configuration configuration = getConfiguration();
         mCache = new PropertyCacheFile(configuration, aFileName);
     }
 
     /** @param aClassLoader class loader to resolve classes with. */
     public void setClassLoader(ClassLoader aClassLoader)
     {
         mClassLoader = aClassLoader;
     }
 
     /**
      * Sets the module factory for creating child modules (Checks).
      * @param aModuleFactory the factory
      */
     public void setModuleFactory(ModuleFactory aModuleFactory)
     {
         mModuleFactory = aModuleFactory;
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Configurable */
     public void finishLocalSetup()
     {
         DefaultContext checkContext = new DefaultContext();
         checkContext.add("classLoader", mClassLoader);
         checkContext.add("messages", getMessageCollector());
         checkContext.add("severity", getSeverity());
         // TODO: hmmm.. this looks less than elegant
         // we have just parsed the string,
         // now we're recreating it only to parse it again a few moments later
         checkContext.add("tabWidth", String.valueOf(mTabWidth));
 
         mChildContext = checkContext;
     }
 
     /**
      * Instantiates, configures and registers a Check that is specified
      * in the provided configuration.
      * @see com.puppycrawl.tools.checkstyle.api.AutomaticBean
      */
@@ -342,159 +361,164 @@ public final class TreeWalker
                 }
             }
         }
         else {
             tokens = aCheck.getDefaultTokens();
         }
         for (int i = 0; i < tokens.length; i++) {
             registerCheck(tokens[i], aCheck);
         }
         mAllChecks.add(aCheck);
     }
 
     /**
      * Register a check for a specified token id.
      * @param aTokenID the id of the token
      * @param aCheck the check to register
      */
     private void registerCheck(int aTokenID, Check aCheck)
     {
         registerCheck(TokenTypes.getTokenName(aTokenID), aCheck);
     }
 
     /**
      * Register a check for a specified token name
      * @param aToken the name of the token
      * @param aCheck the check to register
      */
     private void registerCheck(String aToken, Check aCheck)
     {
         ArrayList visitors = (ArrayList) mTokenToChecks.get(aToken);
         if (visitors == null) {
             visitors = new ArrayList();
             mTokenToChecks.put(aToken, visitors);
         }
 
         visitors.add(aCheck);
     }
 
     /**
      * Initiates the walk of an AST.
      * @param aAST the root AST
      * @param aContents the contents of the file the AST was generated from
      */
     private void walk(DetailAST aAST, FileContents aContents)
     {
         getMessageCollector().reset();
         notifyBegin(aAST, aContents);
 
          // empty files are not flagged by javac, will yield aAST == null
         if (aAST != null) {
-            process(aAST);
+            if (useRecursiveAlgorithm()) {
+                processRec(aAST);
+            }
+            else {
+                processIter(aAST);
+            }
         }
 
         notifyEnd(aAST);
     }
 
 
     /**
      * Notify interested checks that about to begin walking a tree.
      * @param aRootAST the root of the tree
      * @param aContents the contents of the file the AST was generated from
      */
     private void notifyBegin(DetailAST aRootAST, FileContents aContents)
     {
         final Iterator it = mAllChecks.iterator();
         while (it.hasNext()) {
             final Check check = (Check) it.next();
             check.setFileContents(aContents);
             check.beginTree(aRootAST);
         }
     }
 
     /**
      * Notify checks that finished walking a tree.
      * @param aRootAST the root of the tree
      */
     private void notifyEnd(DetailAST aRootAST)
     {
         final Iterator it = mAllChecks.iterator();
         while (it.hasNext()) {
             final Check check = (Check) it.next();
             check.finishTree(aRootAST);
         }
     }
 
     /**
      * Recursively processes a node calling interested checks at each node.
+     * Uses recursive algorithm.
      * @param aAST the node to start from
      */
-    private void process(DetailAST aAST)
+    private void processRec(DetailAST aAST)
     {
         if (aAST == null) {
             return;
         }
 
         notifyVisit(aAST);
 
         final DetailAST child = (DetailAST) aAST.getFirstChild();
         if (child != null) {
-            process(child);
+            processRec(child);
         }
 
         notifyLeave(aAST);
 
         final DetailAST sibling = (DetailAST) aAST.getNextSibling();
         if (sibling != null) {
-            process(sibling);
+            processRec(sibling);
         }
-
     }
 
     /**
      * Notify interested checks that visiting a node.
      * @param aAST the node to notify for
      */
     private void notifyVisit(DetailAST aAST)
     {
         final ArrayList visitors =
             (ArrayList) mTokenToChecks.get(
                 TokenTypes.getTokenName(aAST.getType()));
         if (visitors != null) {
             for (int i = 0; i < visitors.size(); i++) {
                 final Check check = (Check) visitors.get(i);
                 check.visitToken(aAST);
             }
         }
     }
 
     /**
      * Notify interested checks that leaving a node.
      * @param aAST the node to notify for
      */
     private void notifyLeave(DetailAST aAST)
     {
         final ArrayList visitors =
             (ArrayList) mTokenToChecks.get(
                 TokenTypes.getTokenName(aAST.getType()));
         if (visitors != null) {
             for (int i = 0; i < visitors.size(); i++) {
                 final Check check = (Check) visitors.get(i);
                 check.leaveToken(aAST);
             }
         }
     }
 
     /**
      * Static helper method to parses a Java source file.
      * @param aContents contains the contents of the file
      * @throws TokenStreamException if lexing failed
      * @throws RecognitionException if parsing failed
      * @return the root of the AST
      */
     public static DetailAST parse(
         FileContents aContents)
         throws RecognitionException, TokenStreamException
     {
         DetailAST rootAST = null;
 
         try {
@@ -523,51 +547,81 @@ public final class TreeWalker
      * @return the root of the AST
      */
     private static DetailAST parse(
         FileContents aContents,
         boolean aSilentlyConsumeErrors,
         boolean aTreatAssertAsKeyword,
         boolean aTreatEnumAsKeyword)
         throws RecognitionException, TokenStreamException
     {
         final Reader sar = new StringArrayReader(aContents.getLines());
         final GeneratedJavaLexer lexer = new GeneratedJavaLexer(sar);
         lexer.setFilename(aContents.getFilename());
         lexer.setCommentListener(aContents);
         lexer.setTreatAssertAsKeyword(aTreatAssertAsKeyword);
         lexer.setTreatEnumAsKeyword(aTreatEnumAsKeyword);
 
         final GeneratedJavaRecognizer parser =
             aSilentlyConsumeErrors
                 ? new SilentJavaRecognizer(lexer)
                 : new GeneratedJavaRecognizer(lexer);
         parser.setFilename(aContents.getFilename());
         parser.setASTNodeClass(DetailAST.class.getName());
         parser.compilationUnit();
 
         return (DetailAST) parser.getAST();
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.FileSetCheck */
     public void process(File[] aFiles)
     {
         final File[] javaFiles = filter(aFiles);
 
         for (int i = 0; i < javaFiles.length; i++) {
             process(javaFiles[i]);
         }
     }
 
     /**
      * @see com.puppycrawl.tools.checkstyle.api.FileSetCheck
      */
     public void destroy()
     {
         for (Iterator it = mAllChecks.iterator(); it.hasNext();) {
             final Check c = (Check) it.next();
             c.destroy();
         }
         mCache.destroy();
         super.destroy();
     }
 
+    /**
+     * @return true if we should use recursive algorithm
+     *         for tree processing, false for iterative one.
+     */
+    private boolean useRecursiveAlgorithm()
+    {
+        return mRecursive;
+    }
+
+    /**
+     * Processes a node calling interested checks at each node.
+     * Uses iterative algorithm.
+     * @param aRoot the root of tree for process
+     */
+    private void processIter(DetailAST aRoot)
+    {
+        DetailAST curNode = aRoot;
+        while (curNode != null) {
+            notifyVisit(curNode);
+            DetailAST toVisit = (DetailAST) curNode.getFirstChild();
+            while (curNode != null && toVisit == null) {
+                notifyLeave(curNode);
+                toVisit = (DetailAST) curNode.getNextSibling();
+                if (toVisit == null) {
+                    curNode = curNode.getParent();
+                }
+            }
+            curNode = toVisit;
+        }
+    }
 }
