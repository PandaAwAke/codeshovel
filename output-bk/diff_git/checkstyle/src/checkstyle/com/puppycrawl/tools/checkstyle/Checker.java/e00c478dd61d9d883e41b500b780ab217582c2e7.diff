diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java
index eaa79f209..f99541e62 100755
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java
@@ -199,364 +199,362 @@ public class Checker extends AutomaticBean implements MessageDispatcher
     {
         mFilters.addFilter(aFilter);
     }
 
     /**
      * Removes filter.
      * @param aFilter filter to remove.
      */
     public void removeFilter(Filter aFilter)
     {
         mFilters.removeFilter(aFilter);
     }
 
     /** Cleans up the object. **/
     public void destroy()
     {
         mListeners.clear();
         mFilters.clear();
     }
 
     /**
      * Add the listener that will be used to receive events from the audit.
      * @param aListener the nosy thing
      */
     public final void addListener(AuditListener aListener)
     {
         mListeners.add(aListener);
     }
 
     /**
      * Removes a given listener.
      * @param aListener a listener to remove
      */
     public void removeListener(AuditListener aListener)
     {
         mListeners.remove(aListener);
     }
 
     /**
      * Processes a set of files with all FileSetChecks.
      * Once this is done, it is highly recommended to call for
      * the destroy method to close and remove the listeners.
      * @param aFiles the list of files to be audited.
      * @return the total number of errors found
      * @see #destroy()
      */
     public int process(List<File> aFiles)
     {
         // Prepare to start
         fireAuditStarted();
-        for (FileSetCheck fsc : mFileSetChecks) {
+        for (final FileSetCheck fsc : mFileSetChecks) {
             fsc.beginProcessing(mCharset);
         }
 
         // Process each file
-        for (File f : aFiles) {
+        for (final File f : aFiles) {
             final String fileName = f.getAbsolutePath();
             fireFileStarted(fileName);
             final TreeSet<LocalizedMessage> fileMessages = Sets.newTreeSet();
             try {
                 final FileText theText = new FileText(f.getAbsoluteFile(),
                         mCharset);
-                for (FileSetCheck fsc : mFileSetChecks) {
+                for (final FileSetCheck fsc : mFileSetChecks) {
                     fileMessages.addAll(fsc.process(f, theText));
                 }
             }
             catch (final FileNotFoundException fnfe) {
                 Utils.getExceptionLogger().debug(
                         "FileNotFoundException occured.", fnfe);
                 fileMessages.add(new LocalizedMessage(0,
                         Defn.CHECKSTYLE_BUNDLE, "general.fileNotFound", null,
                         null, this.getClass(), null));
             }
             catch (final IOException ioe) {
                 Utils.getExceptionLogger().debug("IOException occured.", ioe);
                 fileMessages.add(new LocalizedMessage(0,
                         Defn.CHECKSTYLE_BUNDLE, "general.exception",
                         new String[] {ioe.getMessage()}, null, this.getClass(),
                         null));
             }
             fireErrors(fileName, fileMessages);
             fireFileFinished(fileName);
         }
 
         // Finish up
-        for (FileSetCheck fsc : mFileSetChecks) {
+        for (final FileSetCheck fsc : mFileSetChecks) {
             // They may also log!!!
             fsc.finishProcessing();
             fsc.destroy();
         }
 
         final int errorCount = mCounter.getCount();
         fireAuditFinished();
         return errorCount;
     }
 
     /**
      * Create a stripped down version of a filename.
      * @param aFileName the original filename
      * @return the filename where an initial prefix of basedir is stripped
      */
     private String getStrippedFileName(final String aFileName)
     {
         return Utils.getStrippedFileName(mBasedir, aFileName);
     }
 
     /** @param aBasedir the base directory to strip off in filenames */
     public void setBasedir(String aBasedir)
     {
         // we use getAbsolutePath() instead of getCanonicalPath()
         // because normalize() removes all . and .. so path
         // will be canonical by default.
         mBasedir = normalize(aBasedir);
     }
 
     /**
      * &quot;normalize&quot; the given absolute path.
      *
      * <p>This includes:
      * <ul>
      *   <li>Uppercase the drive letter if there is one.</li>
      *   <li>Remove redundant slashes after the drive spec.</li>
      *   <li>resolve all ./, .\, ../ and ..\ sequences.</li>
      *   <li>DOS style paths that start with a drive letter will have
      *     \ as the separator.</li>
      * </ul>
      *
      * @param aPath a path for &quot;normalizing&quot;
      * @return &quot;normalized&quot; file name
      * @throws java.lang.NullPointerException if the file path is
      * equal to null.
      */
     public String normalize(String aPath)
     {
         final String osName = System.getProperty("os.name").toLowerCase(
                 Locale.US);
         final boolean onNetWare = (osName.indexOf("netware") > -1);
 
-        final String orig = aPath;
-
-        aPath = aPath.replace('/', File.separatorChar).replace('\\',
-                File.separatorChar);
+        String path = aPath.replace('/', File.separatorChar).replace('\\',
+            File.separatorChar);
 
         // make sure we are dealing with an absolute path
-        final int colon = aPath.indexOf(":");
+        final int colon = path.indexOf(":");
 
         if (!onNetWare) {
-            if (!aPath.startsWith(File.separator)
-                && !((aPath.length() >= 2)
-                     && Character.isLetter(aPath.charAt(0)) && (colon == 1)))
+            if (!path.startsWith(File.separator)
+                && !((path.length() >= 2)
+                     && Character.isLetter(path.charAt(0)) && (colon == 1)))
             {
-                final String msg = aPath + " is not an absolute path";
+                final String msg = path + " is not an absolute path";
                 throw new IllegalArgumentException(msg);
             }
         }
         else {
-            if (!aPath.startsWith(File.separator) && (colon == -1)) {
-                final String msg = aPath + " is not an absolute path";
+            if (!path.startsWith(File.separator) && (colon == -1)) {
+                final String msg = path + " is not an absolute path";
                 throw new IllegalArgumentException(msg);
             }
         }
 
         boolean dosWithDrive = false;
         String root = null;
         // Eliminate consecutive slashes after the drive spec
-        if ((!onNetWare && (aPath.length() >= 2)
-             && Character.isLetter(aPath.charAt(0)) && (aPath.charAt(1) == ':'))
+        if ((!onNetWare && (path.length() >= 2)
+             && Character.isLetter(path.charAt(0)) && (path.charAt(1) == ':'))
             || (onNetWare && (colon > -1)))
         {
 
             dosWithDrive = true;
 
-            final char[] ca = aPath.replace('/', '\\').toCharArray();
+            final char[] ca = path.replace('/', '\\').toCharArray();
             final StringBuffer sbRoot = new StringBuffer();
             for (int i = 0; i < colon; i++) {
                 sbRoot.append(Character.toUpperCase(ca[i]));
             }
             sbRoot.append(':');
-            if (colon + 1 < aPath.length()) {
+            if (colon + 1 < path.length()) {
                 sbRoot.append(File.separatorChar);
             }
             root = sbRoot.toString();
 
             // Eliminate consecutive slashes after the drive spec
             final StringBuffer sbPath = new StringBuffer();
             for (int i = colon + 1; i < ca.length; i++) {
                 if ((ca[i] != '\\') || ((ca[i] == '\\') && (ca[i - 1] != '\\')))
                 {
                     sbPath.append(ca[i]);
                 }
             }
-            aPath = sbPath.toString().replace('\\', File.separatorChar);
+            path = sbPath.toString().replace('\\', File.separatorChar);
 
         }
         else {
-            if (aPath.length() == 1) {
+            if (path.length() == 1) {
                 root = File.separator;
-                aPath = "";
+                path = "";
             }
-            else if (aPath.charAt(1) == File.separatorChar) {
+            else if (path.charAt(1) == File.separatorChar) {
                 // UNC drive
                 root = File.separator + File.separator;
-                aPath = aPath.substring(2);
+                path = path.substring(2);
             }
             else {
                 root = File.separator;
-                aPath = aPath.substring(1);
+                path = path.substring(1);
             }
         }
 
         final FastStack<String> s = FastStack.newInstance();
         s.push(root);
-        final StringTokenizer tok = new StringTokenizer(aPath, File.separator);
+        final StringTokenizer tok = new StringTokenizer(path, File.separator);
         while (tok.hasMoreTokens()) {
             final String thisToken = tok.nextToken();
             if (".".equals(thisToken)) {
                 continue;
             }
             else if ("..".equals(thisToken)) {
                 if (s.size() < 2) {
                     throw new IllegalArgumentException("Cannot resolve path "
-                            + orig);
+                            + aPath);
                 }
                 s.pop();
             }
             else { // plain component
                 s.push(thisToken);
             }
         }
 
         final StringBuffer sb = new StringBuffer();
         for (int i = 0; i < s.size(); i++) {
             if (i > 1) {
                 // not before the filesystem root and not after it, since root
                 // already contains one
                 sb.append(File.separatorChar);
             }
             sb.append(s.peek(i));
         }
 
-        aPath = sb.toString();
+        path = sb.toString();
         if (dosWithDrive) {
-            aPath = aPath.replace('/', '\\');
+            path = path.replace('/', '\\');
         }
-        return aPath;
+        return path;
     }
 
     /** @return the base directory property used in unit-test. */
     public final String getBasedir()
     {
         return mBasedir;
     }
 
     /** notify all listeners about the audit start */
     protected void fireAuditStarted()
     {
         final AuditEvent evt = new AuditEvent(this);
-        for (AuditListener listener : mListeners) {
+        for (final AuditListener listener : mListeners) {
             listener.auditStarted(evt);
         }
     }
 
     /** notify all listeners about the audit end */
     protected void fireAuditFinished()
     {
         final AuditEvent evt = new AuditEvent(this);
-        for (AuditListener listener : mListeners) {
+        for (final AuditListener listener : mListeners) {
             listener.auditFinished(evt);
         }
     }
 
     /**
      * Notify all listeners about the beginning of a file audit.
      *
      * @param aFileName
      *            the file to be audited
      */
     public void fireFileStarted(String aFileName)
     {
         final String stripped = getStrippedFileName(aFileName);
         final AuditEvent evt = new AuditEvent(this, stripped);
-        for (AuditListener listener : mListeners) {
+        for (final AuditListener listener : mListeners) {
             listener.fileStarted(evt);
         }
     }
 
     /**
      * Notify all listeners about the end of a file audit.
      *
      * @param aFileName
      *            the audited file
      */
     public void fireFileFinished(String aFileName)
     {
         final String stripped = getStrippedFileName(aFileName);
         final AuditEvent evt = new AuditEvent(this, stripped);
-        for (AuditListener listener : mListeners) {
+        for (final AuditListener listener : mListeners) {
             listener.fileFinished(evt);
         }
     }
 
     /**
      * notify all listeners about the errors in a file.
      *
      * @param aFileName the audited file
      * @param aErrors the audit errors from the file
      */
     public void fireErrors(String aFileName, TreeSet<LocalizedMessage> aErrors)
     {
         final String stripped = getStrippedFileName(aFileName);
-        for (LocalizedMessage element : aErrors) {
+        for (final LocalizedMessage element : aErrors) {
             final AuditEvent evt = new AuditEvent(this, stripped, element);
             if (mFilters.accept(evt)) {
-                for (AuditListener listener : mListeners) {
+                for (final AuditListener listener : mListeners) {
                     listener.addError(evt);
                 }
             }
         }
     }
 
     /**
      * Sets the factory for creating submodules.
      *
      * @param aModuleFactory the factory for creating FileSetChecks
      */
     public void setModuleFactory(ModuleFactory aModuleFactory)
     {
         mModuleFactory = aModuleFactory;
     }
 
     /** @param aLocaleCountry the country to report messages  **/
     public void setLocaleCountry(String aLocaleCountry)
     {
         mLocaleCountry = aLocaleCountry;
     }
 
     /** @param aLocaleLanguage the language to report messages  **/
     public void setLocaleLanguage(String aLocaleLanguage)
     {
         mLocaleLanguage = aLocaleLanguage;
     }
 
     /**
      * Sets the severity level.  The string should be one of the names
      * defined in the <code>SeverityLevel</code> class.
      *
      * @param aSeverity  The new severity level
      * @see SeverityLevel
      */
     public final void setSeverity(String aSeverity)
     {
         mSeverityLevel = SeverityLevel.getInstance(aSeverity);
     }
 
     /**
      * Sets the classloader that is used to contextualize filesetchecks.
      * Some Check implementations will use that classloader to improve the
      * quality of their reports, e.g. to load a class and then analyze it via
      * reflection.
      * @param aLoader the new classloader
      */
     public final void setClassloader(ClassLoader aLoader)
     {
         mLoader = aLoader;
