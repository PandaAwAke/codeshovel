diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java
index 1e4920b4d..26b362bcf 100755
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java
@@ -66,80 +66,79 @@ import org.apache.commons.beanutils.ConversionException;
  * &quot; * &quot;, followed by just one word, such as within a Javadoc comment,
  * is:
  * </p>
  * <pre>
  * &lt;module name="LineLength"&gt;
  *    &lt;property name="ignorePattern" value="^ *\* *[^ ]+$"/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * @author Lars Kï¿½hne
  */
 public class LineLengthCheck extends Check
 {
     /** default maximum number of columns in a line */
     private static final int DEFAULT_MAX_COLUMNS = 80;
 
     /** the maximum number of columns in a line */
     private int mMax = DEFAULT_MAX_COLUMNS;
 
     /** the regexp when long lines are ignored */
     private Pattern mIgnorePattern;
 
     /**
      * Creates a new <code>LineLengthCheck</code> instance.
      */
     public LineLengthCheck()
     {
         setIgnorePattern("^$");
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[0];
     }
 
     @Override
     public void beginTree(DetailAST aRootAST)
     {
         final String[] lines = getLines();
         for (int i = 0; i < lines.length; i++) {
 
             final String line = lines[i];
             final int realLength = Utils.lengthExpandedTabs(
                 line, line.length(), getTabWidth());
 
 
             if ((realLength > mMax)
                 && !mIgnorePattern.matcher(line).find())
             {
-                log(i + 1, "maxLineLen", mMax);
+                log(i + 1, "maxLineLen", mMax, realLength);
             }
         }
     }
 
     /**
      * @param aLength the maximum length of a line
      */
     public void setMax(int aLength)
     {
         mMax = aLength;
     }
 
     /**
      * Set the ignore pattern.
      * @param aFormat a <code>String</code> value
      * @throws ConversionException unable to parse aFormat
      */
     public void setIgnorePattern(String aFormat)
         throws ConversionException
     {
         try {
             mIgnorePattern = Utils.getPattern(aFormat);
         }
         catch (final PatternSyntaxException e) {
             throw new ConversionException("unable to parse " + aFormat, e);
         }
     }
-
 }
