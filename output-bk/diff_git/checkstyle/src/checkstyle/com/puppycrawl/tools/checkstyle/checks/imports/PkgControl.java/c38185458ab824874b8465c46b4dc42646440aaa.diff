diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/PkgControl.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/PkgControl.java
index 82aa6f175..d5de3efcd 100755
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/PkgControl.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/PkgControl.java
@@ -105,58 +105,58 @@ class PkgControl
             if (match != null) {
                 return match;
             }
         }
 
         // No match so I am the best there is.
         return this;
     }
 
     /**
      * Returns whether a package is allowed to be used. The algorithm checks
      * with the current node for a result, and if none is found then calls
      * its parent looking for a match. This will recurse looking for match.
      * If there is no clear result then {@link AccessResult#UNKNOWN} is
      * returned.
      * @param aForImport the package to check on.
      * @param aInPkg the package doing the import.
      * @return an {@link AccessResult}.
      */
     AccessResult checkAccess(final String aForImport, final String aInPkg)
     {
         AccessResult retVal = localCheckAccess(aForImport, aInPkg);
         if (retVal != AccessResult.UNKNOWN) {
             return retVal;
         }
         else if (mParent == null) {
             // we are the top, so default to not allowed.
             return AccessResult.DISALLOWED;
         }
 
         return mParent.checkAccess(aForImport, aInPkg);
     }
 
     /**
      * Checks whether any of the guards for this node control access to
      * a specified package.
      * @param aForImport the package to check.
      * @param aInPkg the package doing the import.
      * @return an {@link AccessResult}.
      */
     private AccessResult localCheckAccess(final String aForImport,
         final String aInPkg)
     {
         final Iterator it = mGuards.iterator();
         while (it.hasNext()) {
             final Guard g = (Guard) it.next();
             // Check if a Guard is only meant to be applied locally.
             if (g.isLocalOnly() && !mFullPackage.equals(aInPkg)) {
                 continue;
             }
-            final AccessResult result = g.verifyImport(aForImport, aInPkg);
+            final AccessResult result = g.verifyImport(aForImport);
             if (result != AccessResult.UNKNOWN) {
                 return result;
             }
         }
         return AccessResult.UNKNOWN;
     }
 }
