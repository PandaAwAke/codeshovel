diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
index f54a8ee30..5cecd0b05 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
@@ -1,132 +1,132 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2008  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle;
 
+import com.google.common.collect.Lists;
 import com.puppycrawl.tools.checkstyle.api.AuditListener;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
 import com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.net.URL;
-import java.util.ArrayList;
 import java.util.Hashtable;
 import java.util.List;
 import java.util.Properties;
 import java.util.ResourceBundle;
 import org.apache.tools.ant.AntClassLoader;
 import org.apache.tools.ant.BuildException;
 import org.apache.tools.ant.DirectoryScanner;
 import org.apache.tools.ant.Project;
 import org.apache.tools.ant.Task;
 import org.apache.tools.ant.taskdefs.LogOutputStream;
 import org.apache.tools.ant.types.EnumeratedAttribute;
 import org.apache.tools.ant.types.FileSet;
 import org.apache.tools.ant.types.Path;
 import org.apache.tools.ant.types.Reference;
 
 /**
  * An implementation of a ANT task for calling checkstyle. See the documentation
  * of the task for usage.
  * @author Oliver Burn
  */
 public class CheckStyleTask extends Task
 {
     /** poor man's enum for an xml formatter */
     private static final String E_XML = "xml";
     /** poor man's enum for an plain formatter */
     private static final String E_PLAIN = "plain";
 
     /** class path to locate class files */
     private Path mClasspath;
 
     /** name of file to check */
     private String mFileName;
 
     /** config file containing configuration */
     private String mConfigLocation;
 
     /** whether to fail build on violations */
     private boolean mFailOnViolation = true;
 
     /** property to set on violations */
     private String mFailureProperty;
 
     /** contains the filesets to process */
-    private final List<FileSet> mFileSets = new ArrayList<FileSet>();
+    private final List<FileSet> mFileSets = Lists.newArrayList();
 
     /** contains the formatters to log to */
-    private final List<Formatter> mFormatters = new ArrayList<Formatter>();
+    private final List<Formatter> mFormatters = Lists.newArrayList();
 
     /** contains the Properties to override */
-    private final List<Property> mOverrideProps = new ArrayList<Property>();
+    private final List<Property> mOverrideProps = Lists.newArrayList();
 
     /** the name of the properties file */
     private File mPropertiesFile;
 
     /** the maximum number of errors that are tolerated. */
     private int mMaxErrors;
 
     /** the maximum number of warnings that are tolerated. */
     private int mMaxWarnings = Integer.MAX_VALUE;
 
     /**
      * whether to omit ignored modules - some modules may log above
      * their severity depending on their configuration (e.g. WriteTag) so
      * need to be included
      */
     private boolean mOmitIgnoredModules = true;
 
     ////////////////////////////////////////////////////////////////////////////
     // Setters for ANT specific attributes
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Tells this task to set the named property to "true" when there
      * is a violation.
      * @param aPropertyName the name of the property to set
      *                      in the event of an failure.
      */
     public void setFailureProperty(String aPropertyName)
     {
         mFailureProperty = aPropertyName;
     }
 
     /** @param aFail whether to fail if a violation is found */
     public void setFailOnViolation(boolean aFail)
     {
         mFailOnViolation = aFail;
     }
 
     /**
      * Sets the maximum number of errors allowed. Default is 0.
      * @param aMaxErrors the maximum number of errors allowed.
      */
     public void setMaxErrors(int aMaxErrors)
     {
         mMaxErrors = aMaxErrors;
     }
 
     /**
      * Sets the maximum number of warings allowed. Default is
      * {@link Integer#MAX_VALUE}.
@@ -429,101 +429,101 @@ public class CheckStyleTask extends Task
             final String key = (String) name;
             final String value = String.valueOf(antProps.get(key));
             retVal.put(key, value);
         }
 
         // override with properties specified in subelements
         for (Property p : mOverrideProps) {
             retVal.put(p.getKey(), p.getValue());
         }
 
         return retVal;
     }
 
     /**
      * Return the list of listeners set in this task.
      * @return the list of listeners.
      * @throws ClassNotFoundException if an error occurs
      * @throws InstantiationException if an error occurs
      * @throws IllegalAccessException if an error occurs
      * @throws IOException if an error occurs
      */
     protected AuditListener[] getListeners() throws ClassNotFoundException,
             InstantiationException, IllegalAccessException, IOException
     {
         final int formatterCount = Math.max(1, mFormatters.size());
 
         final AuditListener[] listeners = new AuditListener[formatterCount];
 
         // formatters
         if (mFormatters.size() == 0) {
             final OutputStream debug = new LogOutputStream(this,
                     Project.MSG_DEBUG);
             final OutputStream err = new LogOutputStream(this, Project.MSG_ERR);
             listeners[0] = new DefaultLogger(debug, true, err, true);
         }
         else {
             for (int i = 0; i < formatterCount; i++) {
                 final Formatter f = mFormatters.get(i);
                 listeners[i] = f.createListener(this);
             }
         }
         return listeners;
     }
 
     /**
      * returns the list of files (full path name) to process.
      * @return the list of files included via the filesets.
      */
     protected List<File> scanFileSets()
     {
-        final List<File> list = new ArrayList<File>();
+        final List<File> list = Lists.newArrayList();
         if (mFileName != null) {
             // oops we've got an additional one to process, don't
             // forget it. No sweat, it's fully resolved via the setter.
             log("Adding standalone file for audit", Project.MSG_VERBOSE);
             list.add(new File(mFileName));
         }
         for (int i = 0; i < mFileSets.size(); i++) {
             final FileSet fs = mFileSets.get(i);
             final DirectoryScanner ds = fs.getDirectoryScanner(getProject());
             ds.scan();
 
             final String[] names = ds.getIncludedFiles();
             log(i + ") Adding " + names.length + " files from directory "
                     + ds.getBasedir(), Project.MSG_VERBOSE);
 
             for (String element : names) {
                 final String pathname = ds.getBasedir() + File.separator
                         + element;
                 list.add(new File(pathname));
             }
         }
 
         return list;
     }
 
     /**
      * Poor mans enumeration for the formatter types.
      * @author Oliver Burn
      */
     public static class FormatterType extends EnumeratedAttribute
     {
         /** my possible values */
         private static final String[] VALUES = {E_XML, E_PLAIN};
 
         @Override
         public String[] getValues()
         {
             return VALUES;
         }
     }
 
     /**
      * Details about a formatter to be used.
      * @author Oliver Burn
      */
     public static class Formatter
     {
         /** the formatter type */
         private FormatterType mFormatterType;
         /** the file to output to */
