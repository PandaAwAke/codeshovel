diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java
index 424974974..5fe44d7b4 100755
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java
@@ -67,135 +67,134 @@ public class GenericWhitespaceCheck extends Check
     private void processEnd(DetailAST aAST)
     {
         final String line = getLines()[aAST.getLineNo() - 1];
         final int before = aAST.getColumnNo() - 1;
         final int after = aAST.getColumnNo() + 1;
 
         if ((0 <= before) && Character.isWhitespace(line.charAt(before))
                 && !Utils.whitespaceBefore(before, line))
         {
             log(aAST.getLineNo(), before, "ws.preceded", ">");
         }
 
         if (after < line.length()) {
 
             // Check if the last Generic, in which case must be a whitespace
             // or a '(),[.'.
             if (1 == mDepth) {
                 final char charAfter = line.charAt(after);
 
                 // Need to handle a number of cases. First is:
                 //    Collections.<Object>emptySet();
                 //                        ^
                 //                        +--- whitespace not allowed
                 if ((aAST.getParent().getType() == TokenTypes.TYPE_ARGUMENTS)
                     && (aAST.getParent().getParent().getType()
                         == TokenTypes.DOT)
                     && (aAST.getParent().getParent().getParent().getType()
                         == TokenTypes.METHOD_CALL))
                 {
                     if (Character.isWhitespace(charAfter)) {
                         log(aAST.getLineNo(), after, "ws.followed", ">");
                     }
                 }
                 else if (!Character.isWhitespace(charAfter)
                     && ('(' != charAfter) && (')' != charAfter)
                     && (',' != charAfter) && ('[' != charAfter)
                     && ('.' != charAfter))
                 {
                     log(aAST.getLineNo(), after, "ws.illegalFollow", ">");
                 }
             }
             else {
                 // In a nested Generic type, so can only be a '>' or ',' or '&'
 
                 // In case of several extends definitions:
                 //
                 //   class IntEnumValueType<E extends Enum<E> & IntEnum>
                 //                                          ^
                 //   should be whitespace if followed by & -+
                 //
-                int indexOfAmp = line.indexOf('&', after);
-                if ((indexOfAmp != -1) && whitespaceBetween(after, indexOfAmp, line))
+                final int indexOfAmp = line.indexOf('&', after);
+                if ((indexOfAmp != -1)
+                    && whitespaceBetween(after, indexOfAmp, line))
                 {
-                    if (indexOfAmp - after == 0)
-                    {
+                    if (indexOfAmp - after == 0) {
                         log(aAST.getLineNo(), after, "ws.notPreceded", "&");
                     }
-                    else if (indexOfAmp - after != 1)
-                    {
+                    else if (indexOfAmp - after != 1) {
                         log(aAST.getLineNo(), after, "ws.followed", ">");
                     }
                 }
-                else if ((line.charAt(after) != '>') && (line.charAt(after) != ','))
+                else if ((line.charAt(after) != '>')
+                         && (line.charAt(after) != ','))
                 {
                     log(aAST.getLineNo(), after, "ws.followed", ">");
                 }
             }
         }
     }
 
     /**
      * Checks the token for the start of Generics.
      * @param aAST the token to check
      */
     private void processStart(DetailAST aAST)
     {
         final String line = getLines()[aAST.getLineNo() - 1];
         final int before = aAST.getColumnNo() - 1;
         final int after = aAST.getColumnNo() + 1;
 
         // Need to handle two cases as in:
         //
         //   public static <T> Callable<T> callable(Runnable task, T result)
         //                 ^           ^
         //      ws reqd ---+           +--- whitespace NOT required
         //
         if (0 <= before) {
             // Detect if the first case
             final DetailAST parent = aAST.getParent();
             final DetailAST grandparent = parent.getParent();
             if ((TokenTypes.TYPE_PARAMETERS == parent.getType())
                 && ((TokenTypes.CTOR_DEF == grandparent.getType())
                     || (TokenTypes.METHOD_DEF == grandparent.getType())))
             {
                 // Require whitespace
                 if (!Character.isWhitespace(line.charAt(before))) {
                     log(aAST.getLineNo(), before, "ws.notPreceded", "<");
                 }
             }
             // Whitespace not required
             else if (Character.isWhitespace(line.charAt(before))
                 && !Utils.whitespaceBefore(before, line))
             {
                 log(aAST.getLineNo(), before, "ws.preceded", "<");
             }
         }
 
         if ((after < line.length())
                 && Character.isWhitespace(line.charAt(after)))
         {
             log(aAST.getLineNo(), after, "ws.followed", "<");
         }
     }
 
     /**
      * Returns whether the specified string contains only whitespace between
      * specified indices.
      *
-     * @param fromIndex the index to start the search from. Inclusive
-     * @param toIndex the index to finish the search. Exclusive
+     * @param aFromIndex the index to start the search from. Inclusive
+     * @param aToIndex the index to finish the search. Exclusive
      * @param aLine the line to check
      * @return whether there are only whitespaces (or nothing)
      */
-    private static boolean whitespaceBetween(int fromIndex, int toIndex, String aLine)
+    private static boolean whitespaceBetween(
+        int aFromIndex, int aToIndex, String aLine)
     {
-        for (int i = fromIndex; i < toIndex; i++)
-        {
-            if (!Character.isWhitespace(aLine.charAt(i)))
-            {
+        for (int i = aFromIndex; i < aToIndex; i++) {
+            if (!Character.isWhitespace(aLine.charAt(i))) {
                 return false;
             }
         }
         return true;
     }
 }
