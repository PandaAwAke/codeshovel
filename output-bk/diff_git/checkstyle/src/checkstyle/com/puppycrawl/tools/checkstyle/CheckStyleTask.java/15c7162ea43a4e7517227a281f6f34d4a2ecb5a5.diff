diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
index 22f8faf2b..c37fe3488 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
@@ -241,101 +241,101 @@ public class CheckStyleTask
     {
         mConfig.setIgnoreImports(aIgnore);
     }
 
     /** @param aIgnore whether to ignore whitespace **/
     public void setIgnoreWhitespace(boolean aIgnore)
     {
         mConfig.setIgnoreWhitespace(aIgnore);
     }
 
     /** @param aIgnore whether to ignore whitespace after casts **/
     public void setIgnoreCastWhitespace(boolean aIgnore)
     {
         mConfig.setIgnoreCastWhitespace(aIgnore);
     }
 
     /** @param aIgnore whether to ignore braces **/
     public void setIgnoreBraces(boolean aIgnore)
     {
         mConfig.setIgnoreBraces(aIgnore);
     }
 
     /** @param aCacheFile the file to cache which files have been checked **/
     public void setCacheFile(File aCacheFile)
     {
         mConfig.setCacheFile(aCacheFile.getAbsolutePath());
     }
 
     ////////////////////////////////////////////////////////////////////////////
     // The doers
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Actually checks the files specified. All errors are reported to
      * System.out. Will fail if any errors occurred.
      * @throws BuildException an error occurred
      **/
     public void execute()
         throws BuildException
     {
         // Check for no arguments
         if ((mFileName == null) && (mFileSets.size() == 0)) {
             throw new BuildException("Must specify atleast one of 'file' " +
                                      "or nested 'fileset'.", location);
         }
 
         // Create the checker
         final int numErrs;
         Checker c = null;
         try {
-            c = new Checker(mConfig, System.out);
+            c = new Checker(mConfig);
             AuditListener[] listeners = getListeners();
             for (int i = 0; i < listeners.length; i++) {
                 c.addListener(listeners[i]);
             }
             final String[] files = scanFileSets();
             numErrs = c.process(files);
         }
         catch (Exception e) {
             throw new BuildException("Unable to create a Checker", e);
         }
         finally {
             if (c != null) {
                 c.destroy();
             }
         }
 
         if ((numErrs > 0) && mFailOnViolation) {
             throw new BuildException("Got " + numErrs + " errors.", location);
         }
     }
 
     /**
      * Return the list of listeners set in this task.
      * @return the list of listeners.
      * @throws ClassNotFoundException if an error occurs
      * @throws InstantiationException if an error occurs
      * @throws IllegalAccessException if an error occurs
      * @throws IOException if an error occurs
      */
     protected AuditListener[] getListeners()
         throws ClassNotFoundException, InstantiationException,
         IllegalAccessException, IOException
     {
         // @todo should we add a default plain stdout
         // formatter ?
         if (mFormatters.size() == 0) {
             final Formatter f = new Formatter();
             final FormatterType type = new FormatterType();
             type.setValue(E_PLAIN);
             f.setType(type);
             mFormatters.add(f);
         }
 
         final AuditListener[] listeners = new AuditListener[mFormatters.size()];
         for (int i = 0; i < listeners.length; i++) {
             final Formatter f = (Formatter) mFormatters.get(i);
             listeners[i] = f.createListener(this);
         }
         return listeners;
     }
