diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java
index c25b5029f..85a5eff43 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java
@@ -157,121 +157,120 @@ public class HiddenFieldCheck
                         final String name =
                             child.findFirstToken(TokenTypes.IDENT).getText();
                         final DetailAST mods =
                             child.findFirstToken(TokenTypes.MODIFIERS);
                         if (mods.branchContains(TokenTypes.LITERAL_STATIC)) {
                             frame.addStaticField(name);
                         }
                         else {
                             frame.addInstanceField(name);
                         }
                     }
                     child = (DetailAST) child.getNextSibling();
                 }
             }
             // push container
             mCurrentFrame = frame;
         }
         else {
             //must be VARIABLE_DEF or PARAMETER_DEF
             processVariable(aAST);
         }
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void leaveToken(DetailAST aAST)
     {
         if ((aAST.getType() == TokenTypes.CLASS_DEF)
             || (aAST.getType() == TokenTypes.ENUM_DEF)
             || (aAST.getType() == TokenTypes.ENUM_CONSTANT_DEF))
         {
             //pop
             mCurrentFrame = mCurrentFrame.getParent();
         }
     }
 
     /**
      * Process a variable token.
      * Check whether a local variable or parameter shadows a field.
      * Store a field for later comparison with local variables and parameters.
      * @param aAST the variable token.
      */
     private void processVariable(DetailAST aAST)
     {
         if (!ScopeUtils.inInterfaceOrAnnotationBlock(aAST)) {
             if (ScopeUtils.isLocalVariableDef(aAST)
                 || (aAST.getType() == TokenTypes.PARAMETER_DEF))
             {
                 //local variable or parameter. Does it shadow a field?
                 final DetailAST nameAST = aAST.findFirstToken(TokenTypes.IDENT);
                 final String name = nameAST.getText();
-                boolean inStatic = inStatic(aAST);
                 if ((mCurrentFrame.containsStaticField(name)
                      || (!inStatic(aAST)
                          && mCurrentFrame.containsInstanceField(name)))
                     && ((mRegexp == null) || (!getRegexp().match(name)))
                     && !isIgnoredSetterParam(aAST, name)
                     && !isIgnoredConstructorParam(aAST))
                 {
                     log(nameAST, "hidden.field", name);
                 }
             }
         }
     }
 
     /**
      * Determines whether an AST node is in a static method or static
      * initializer.
      * @param aAST the node to check.
      * @return true if aAST is in a static method or a static block;
      */
-    private boolean inStatic(DetailAST aAST)
+    private static boolean inStatic(DetailAST aAST)
     {
         DetailAST parent = aAST.getParent();
         while (parent != null) {
             switch (parent.getType()) {
             case TokenTypes.STATIC_INIT:
                 return true;
             case TokenTypes.METHOD_DEF:
                 final DetailAST mods =
                     parent.findFirstToken(TokenTypes.MODIFIERS);
                 return mods.branchContains(TokenTypes.LITERAL_STATIC);
             default:
                 parent = parent.getParent();
             }
         }
         return false;
     }
 
     /**
      * Decides whether to ignore an AST node that is the parameter of a
      * setter method, where the property setter method for field 'xyz' has
      * name 'setXyz', one parameter named 'xyz', and return type void.
      * @param aAST the AST to check.
      * @param aName the name of aAST.
      * @return true if aAST should be ignored because check property
      * ignoreSetter is true and aAST is the parameter of a setter method.
      */
     private boolean isIgnoredSetterParam(DetailAST aAST, String aName)
     {
         if (!(aAST.getType() == TokenTypes.PARAMETER_DEF)
             || !mIgnoreSetter)
         {
             return false;
         }
         //single parameter?
         final DetailAST parametersAST = aAST.getParent();
         if (parametersAST.getChildCount() != 1) {
             return false;
         }
         //method parameter, not constructor parameter?
         final DetailAST methodAST = parametersAST.getParent();
         if (methodAST.getType() != TokenTypes.METHOD_DEF) {
             return false;
         }
         //property setter name?
         final String expectedName =
             "set" + aName.substring(0, 1).toUpperCase() + aName.substring(1);
         final DetailAST methodNameAST =
             methodAST.findFirstToken(TokenTypes.IDENT);
         final String methodName = methodNameAST.getText();
         if (!methodName.equals(expectedName)) {
