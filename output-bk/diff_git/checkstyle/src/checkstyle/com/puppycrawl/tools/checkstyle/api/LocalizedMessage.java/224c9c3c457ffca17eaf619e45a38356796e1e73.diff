diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
index a508808c6..9f834d0d7 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
@@ -61,103 +61,103 @@ public final class LocalizedMessage
 
     /** arguments for MessageFormat **/
     private final Object[] mArgs;
 
     /** name of the resource bundle to get messages from **/
     private final String mBundle;
 
 
     /**
      * Creates a new <code>LocalizedMessage</code> instance.
      *
      * @param aLineNo line number associated with the message
      * @param aColNo column number associated with the message
      * @param aBundle resource bundle name
      * @param aKey the key to locate the translation
      * @param aArgs arguments for the translation
      */
     public LocalizedMessage(int aLineNo,
                             int aColNo,
                             String aBundle,
                             String aKey,
                             Object[] aArgs)
     {
         mLineNo = aLineNo;
         mColNo = aColNo;
         mKey = aKey;
         mArgs = aArgs;
         mBundle = aBundle;
     }
 
     /**
      * Creates a new <code>LocalizedMessage</code> instance. The column number
      * defaults to 0.
      *
      * @param aLineNo line number associated with the message
      * @param aBundle name of a resource bundle that contains error messages
      * @param aKey the key to locate the translation
      * @param aArgs arguments for the translation
      */
     public LocalizedMessage(
             int aLineNo, String aBundle, String aKey, Object[] aArgs)
     {
         this(aLineNo, 0, aBundle, aKey, aArgs);
     }
 
     /** @return the translated message **/
     public String getMessage()
     {
         try {
             // Important to use the default class loader, and not the one in
-            // the Configuration object. This is because the class loader in
-            // the Configuration is specified by the user for resolving custom
-            // classes.
+            // the GlobalProperties object. This is because the class loader in
+            // the GlobalProperties is specified by the user for resolving
+            // custom classes.
             final ResourceBundle bundle = getBundle(mBundle);
             final String pattern = bundle.getString(mKey);
             return MessageFormat.format(pattern, mArgs);
         }
         catch (MissingResourceException ex) {
             // If the Check author didn't provide i18n resource bundles
             // and logs error messages directly, this will return
             // the author's original message
             return MessageFormat.format(mKey, mArgs);
         }
     }
 
     /**
      * Find a ResourceBundle for a given bundle name.
      * @param aBundleName the bundle name
      * @return a ResourceBundle
      */
     private static ResourceBundle getBundle(String aBundleName)
     {
         ResourceBundle bundle = (ResourceBundle) sBundleCache.get(aBundleName);
         if (bundle == null) {
             bundle = ResourceBundle.getBundle(aBundleName, sLocale);
             sBundleCache.put(aBundleName, bundle);
         }
         return bundle;
     }
 
     /** @return the line number **/
     public int getLineNo()
     {
         return mLineNo;
     }
 
     /** @return the column number **/
     public int getColumnNo()
     {
         return mColNo;
     }
 
     /**
      * Returns the message key to locate the translation, can also be used
      * in IDE plugins to map error messages to corrective actions.
      *
      * @return the message key
      */
     public String getKey()
     {
         return mKey;
     }
 
