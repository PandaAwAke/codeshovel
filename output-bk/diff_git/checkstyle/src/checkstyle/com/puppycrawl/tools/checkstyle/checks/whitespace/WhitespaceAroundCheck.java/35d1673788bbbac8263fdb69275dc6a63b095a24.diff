diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java
index ebe3ad43d..c4daffb7c 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java
@@ -277,60 +277,60 @@ public class WhitespaceAroundCheck extends Check
         }
     }
 
     /**
      * Test if the given <code>DetailAST</code> is part of an allowed empty
      * method block.
      * @param aAST the <code>DetailAST</code> to test.
      * @param aParentType the token type of <code>aAST</code>'s parent.
      * @return <code>true</code> if <code>aAST</code> makes up part of an
      *         allowed empty method block.
      */
     private boolean emptyMethodBlockCheck(DetailAST aAST, int aParentType)
     {
         return mAllowEmptyMethods
             && emptyBlockCheck(aAST, aParentType, TokenTypes.METHOD_DEF);
     }
 
     /**
      * Test if the given <code>DetailAST</code> is part of an allowed empty
      * constructor (ctor) block.
      * @param aAST the <code>DetailAST</code> to test.
      * @param aParentType the token type of <code>aAST</code>'s parent.
      * @return <code>true</code> if <code>aAST</code> makes up part of an
      *         allowed empty constructor block.
      */
     private boolean emptyCtorBlockCheck(DetailAST aAST, int aParentType)
     {
         return mAllowEmptyCtors
             && emptyBlockCheck(aAST, aParentType, TokenTypes.CTOR_DEF);
     }
 
     /**
      * Test if the given <code>DetailAST</code> is part of an empty block.
      * An example empty block might look like the following
      * <p>
      * <pre>   public void myMethod(int val) {}</pre>
      * <p>
      * In the above, the method body is an empty block ("{}").
      *
      * @param aAST the <code>DetailAST</code> to test.
      * @param aParentType the token type of <code>aAST</code>'s parent.
      * @param aMatch the parent token type we're looking to match.
      * @return <code>true</code> if <code>aAST</code> makes up part of an
      *         empty block contained under a <code>aMatch</code> token type
      *         node.
      */
     private boolean emptyBlockCheck(DetailAST aAST, int aParentType, int aMatch)
     {
         final int type = aAST.getType();
         if (type == TokenTypes.RCURLY) {
-            DetailAST grandParent = aAST.getParent().getParent();
+            final DetailAST grandParent = aAST.getParent().getParent();
             return (aParentType == TokenTypes.SLIST)
                 && (grandParent.getType() == aMatch);
         }
 
         return (type == TokenTypes.SLIST)
             && (aParentType == aMatch)
             && (aAST.getFirstChild().getType() == TokenTypes.RCURLY);
     }
 }
