diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/DetailAST.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/DetailAST.java
index 1da77ef2b..d3748e372 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/DetailAST.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/DetailAST.java
@@ -125,101 +125,101 @@ public class DetailAST
         return mParent;
     }
 
     /** @return the line number **/
     public int getLineNo()
     {
         if (mLineNo == NOT_INITIALIZED) {
             // an inner AST that has been initialized
             // with initialize(String text)
             DetailAST child = (DetailAST) getFirstChild();
             DetailAST sibling = (DetailAST) getNextSibling();
             if (child != null) {
                 return child.getLineNo();
             }
             else if (sibling != null) {
                 return sibling.getLineNo();
             }
         }
         return mLineNo;
     }
 
     /** @return the column number **/
     public int getColumnNo()
     {
         if (mColumnNo == NOT_INITIALIZED) {
             // an inner AST that has been initialized
             // with initialize(String text)
             DetailAST child = (DetailAST) getFirstChild();
             DetailAST sibling = (DetailAST) getNextSibling();
             if (child != null) {
                 return child.getColumnNo();
             }
             else if (sibling != null) {
                 return sibling.getColumnNo();
             }
         }
         return mColumnNo;
     }
 
     /** @return a string representation of the object **/
     public String toString()
     {
         return super.toString() + " {line = " + getLineNo() + ", col = "
             + getColumnNo() + "}";
     }
 
     /** @return the last child node */
     public DetailAST getLastChild()
     {
         AST ast = getFirstChild();
-        while (ast.getNextSibling() != null) {
+        while (ast != null && ast.getNextSibling() != null) {
             ast = ast.getNextSibling();
         }
         return (DetailAST) ast;
     }
 
     /**
      * @return the token types that occur in the branch as a sorted set.
      */
     private int[] getBranchTokenTypes()
     {
         // lazy init
         if (mBranchTokenTypes == null) {
 
             // TODO improve algorithm to avoid most array creation
             int[] bag = new int[] { getType() };
 
             // add union of all childs
             DetailAST child = (DetailAST) getFirstChild();
             while (child != null) {
                 int[] childTypes = child.getBranchTokenTypes();
                 int[] savedBag = bag;
                 bag = new int[savedBag.length + childTypes.length];
                 System.arraycopy(savedBag, 0, bag, 0, savedBag.length);
                 System.arraycopy(childTypes, 0, bag, savedBag.length,
                         childTypes.length);
                 child = (DetailAST) child.getNextSibling();
             }
             // TODO: remove duplicates to speed up searching
             mBranchTokenTypes = bag;
             Arrays.sort(mBranchTokenTypes);
         }
         return mBranchTokenTypes;
     }
 
     /**
      * Checks if this branch of the parse tree contains a token
      * of the provided type.
      * @param aType a TokenType
      * @return true if and only if this branch (including this node)
      * contains a token of type <code>aType</code>.
      */
     public boolean branchContains(int aType)
     {
         return Arrays.binarySearch(getBranchTokenTypes(), aType) >= 0;
     }
 
     /**
      * Returns the number of direct child tokens that have the specified type.
      * @param aType the token type to match
      * @return the number of matching token
