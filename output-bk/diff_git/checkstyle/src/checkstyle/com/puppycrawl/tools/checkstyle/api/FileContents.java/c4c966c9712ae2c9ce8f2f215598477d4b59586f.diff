diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java
index 5f07faa12..017d27190 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java
@@ -1,127 +1,144 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2003  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.api;
 
 import org.apache.regexp.RE;
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 import java.util.HashMap;
 
+import com.puppycrawl.tools.checkstyle.grammars.CommentListener;
+
 /**
  * Represents the contents of a file.
  *
  * @author Oliver Burn
  * @version 1.0
  */
-public final class FileContents
+public final class FileContents implements CommentListener
 {
     /**
      * the pattern to match a single line comment containing only the comment
      * itself -- no code.
      */
     private static final String MATCH_SINGLELINE_COMMENT_PAT =
         "^\\s*//.*$";
     /** compiled regexp to match a single-line comment line */
     private static final RE MATCH_SINGLELINE_COMMENT =
         Utils.createRE(MATCH_SINGLELINE_COMMENT_PAT);
 
     /** the file name */
     private final String mFilename;
 
     /** the lines */
     private final String[] mLines;
 
     /** map of the Javadoc comments indexed on the last line of the comment.
      * The hack is it assumes that there is only one Javadoc comment per line.
      */
     private final Map mJavadocComments = new HashMap();
 
     /** map of the C++ comments indexed on the first line of the comment. */
     private final Map mCPlusPlusComments = new HashMap();
     /**
      * map of the C comments indexed on the first line of the comment to a
      * list of comments on that line
      */
     private final Map mCComments = new HashMap();
 
     /**
      * Creates a new <code>FileContents</code> instance.
      *
      * @param aFilename name of the file
      * @param aLines the contents of the file
      */
     public FileContents(String aFilename, String[] aLines)
     {
         mFilename = aFilename;
         mLines = aLines;
     }
 
+    /** {@inheritDoc} */
+    public void reportSingleLineComment(String aType,
+                                        int aStartLineNo, int aStartColNo)
+    {
+        reportCppComment(aStartLineNo, aStartColNo);
+    }
+
+    /** {@inheritDoc} */
+    public void reportBlockComment(String aType,
+                                   int aStartLineNo, int aStartColNo,
+                                   int aEndLineNo, int aEndColNo)
+    {
+        reportCComment(aStartLineNo, aStartColNo, aEndLineNo, aEndColNo);
+    }
+
     /**
      * Report the location of a C++ style comment.
      * @param aStartLineNo the starting line number
      * @param aStartColNo the starting column number
      **/
     public void reportCppComment(int aStartLineNo, int aStartColNo)
     {
         final String cmt = mLines[aStartLineNo - 1].substring(aStartColNo);
         mCPlusPlusComments.put(new Integer(aStartLineNo), cmt);
     }
 
     /**
      * Returns a map of all the C++ style comments. The key is a line number,
      * the value is the comment at the line.
      * @return the Map of comments
      */
     public Map getCppComments()
     {
         return Collections.unmodifiableMap(mCPlusPlusComments);
     }
 
     /**
      * Report the location of a C-style comment.
      * @param aStartLineNo the starting line number
      * @param aStartColNo the starting column number
      * @param aEndLineNo the ending line number
      * @param aEndColNo the ending column number
      **/
     public void reportCComment(int aStartLineNo, int aStartColNo,
                                int aEndLineNo, int aEndColNo)
     {
         final String[] cc = extractCComment(aStartLineNo, aStartColNo,
                                             aEndLineNo, aEndColNo);
 
         // save the comment
         final Integer key = new Integer(aStartLineNo);
         if (mCComments.containsKey(key)) {
             final List entries = (List) mCComments.get(key);
             entries.add(cc);
         }
         else {
             final List entries = new ArrayList();
             entries.add(cc);
             mCComments.put(key, entries);
         }
 
         // Remember if possible Javadoc comment
         if (mLines[aStartLineNo - 1].indexOf("/**", aStartColNo) != -1) {
             mJavadocComments.put(new Integer(aEndLineNo - 1), cc);
         }
