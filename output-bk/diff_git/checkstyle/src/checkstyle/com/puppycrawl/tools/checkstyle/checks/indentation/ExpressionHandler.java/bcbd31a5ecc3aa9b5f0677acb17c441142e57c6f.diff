diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java
index 1eb2aac3c..401e93686 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java
@@ -559,51 +559,96 @@ public abstract class ExpressionHandler
     public abstract void checkIndentation();
 
     /**
      * Accessor for the IndentCheck attribute.
      *
      * @return the IndentCheck attribute
      */
     protected final IndentationCheck getIndentCheck()
     {
         return mIndentCheck;
     }
 
     /**
      * Accessor for the MainAst attribute.
      *
      * @return the MainAst attribute
      */
     protected final DetailAST getMainAst()
     {
         return mMainAst;
     }
 
     /**
      * Accessor for the Parent attribute.
      *
      * @return the Parent attribute
      */
     protected final ExpressionHandler getParent()
     {
         return mParent;
     }
 
     /**
      * A shortcut for <code>IndentationCheck</code> property.
      * @return value of basicOffset property of <code>IndentationCheck</code>
      */
     protected final int getBasicOffset()
     {
         return getIndentCheck().getBasicOffset();
     }
 
     /**
      * A shortcut for <code>IndentationCheck</code> property.
      * @return value of braceAdjustment property
      *         of <code>IndentationCheck</code>
      */
     protected final int getBraceAdjustement()
     {
         return getIndentCheck().getBraceAdjustement();
     }
+
+    /**
+     * Check the indentation of the right parenthesis.
+     * @param aRparen parenthesis to check
+     * @param aLparen left parenthesis associated with aRparen
+     */
+    protected final void checkRParen(DetailAST aLparen, DetailAST aRparen)
+    {
+        // no paren - no check :)
+        if (aRparen == null) {
+            return;
+        }
+
+        // the rcurly can either be at the correct indentation,
+        // or not first on the line ...
+        final int rparenLevel = expandedTabsColumnNo(aRparen);
+        if (getLevel().accept(rparenLevel) || !startsLine(aRparen)) {
+            return;
+        }
+
+        // or has <lparen level> + 1 indentation
+        final int lparenLevel = expandedTabsColumnNo(aLparen);
+        if (rparenLevel == (lparenLevel + 1)) {
+            return;
+        }
+
+        logError(aRparen, "rparen", rparenLevel);
+    }
+
+    /**
+     * Check the indentation of the left parenthesis.
+     * @param aLparen parenthesis to check
+     */
+    protected final void checkLParen(final DetailAST aLparen)
+    {
+        // the rcurly can either be at the correct indentation, or on the
+        // same line as the lcurly
+        if (aLparen == null
+            || getLevel().accept(expandedTabsColumnNo(aLparen))
+            || !startsLine(aLparen))
+        {
+            return;
+        }
+        logError(aLparen, "lparen", expandedTabsColumnNo(aLparen));
+    }
 }
