diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/RedundantModifierCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/RedundantModifierCheck.java
index a644a7fbd..254af3802 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/RedundantModifierCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/RedundantModifierCheck.java
@@ -55,88 +55,96 @@ public class RedundantModifierCheck
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.MODIFIERS,
                           TokenTypes.INTERFACE_DEF,
                           TokenTypes.CLASS_DEF};
     }
     
     /**
      * Prevents user from specifying tokens in a configuration file.
      * @see com.puppycrawl.tools.checkstyle.api.Check
      */
     public int[] getAcceptableTokens()
     {
         return new int[] {};
     }
     
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public int[] getRequiredTokens()
     {
         return new int[] {TokenTypes.MODIFIERS,
                           TokenTypes.INTERFACE_DEF,
                           TokenTypes.CLASS_DEF};
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void visitToken(DetailAST aAST)
     {
         switch (aAST.getType()) {
         case TokenTypes.INTERFACE_DEF:
             mInInterface.push(Boolean.TRUE);
             break;
         case TokenTypes.CLASS_DEF:
             mInInterface.push(Boolean.FALSE);
             break;
         case TokenTypes.MODIFIERS:
 
             // modifiers of the interface itself (public interface X)
             // will be below the INTERFACE_DEF node. Example:
 
             // public interface X {void y();}
 
             // INTERFACE_DEF
             // + MODIFIERS
             //   + public
             // + OBJ_BLOCK
             //   + ...
 
             if (inInterfaceBlock(aAST)) {
                 DetailAST ast = (DetailAST) aAST.getFirstChild();
                 while (ast != null) {
-                    String modifier = ast.getText();
-                    if ("public".equals(modifier)
-                        || "abstract".equals(modifier))
+
+                    // javac does not allow final in interface methods
+                    // hence no need to check that this is not a method
+
+                    final int type = ast.getType();
+                    if (type == TokenTypes.LITERAL_PUBLIC
+                            || type == TokenTypes.ABSTRACT
+                            || type == TokenTypes.FINAL)
                     {
-                        log(ast.getLineNo(),
-                            ast.getColumnNo(),
-                            "redundantModifier",
-                            new String[] {modifier});
+                            String modifier = ast.getText();
+                            log(ast.getLineNo(),
+                                    ast.getColumnNo(),
+                                    "redundantModifier",
+                                    new String[] {modifier});
+                            break;
                     }
+
                     ast = (DetailAST) ast.getNextSibling();
                 }
             }
             break;
         default:
             return;
         }
     }
 
     /**
      * @param aAST the AST to analyze
      * @return whether aAST is in an interface block,
      *          i.e. in an OBJ_BLOCK of an INTERFACE_DEF
      */
     private boolean inInterfaceBlock(DetailAST aAST)
     {
         if (mInInterface.empty()) {
             return false;
         }
         if (aAST.getParent().getType() == TokenTypes.INTERFACE_DEF) {
             int size = mInInterface.size();
             return size > 1 && Boolean.TRUE.equals(mInInterface.get(size - 2));
         }
         else {
             return Boolean.TRUE.equals(mInInterface.peek());
         }
     }
 
 }
