diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
index df574d8f6..f4bc95bd8 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
@@ -135,140 +135,161 @@ public class AutomaticBean implements Configurable, Contextualizable
      * after that the method {@link #setupChild setupChild}
      * is called for each {@link Configuration#getChildren child Configuration}
      * of <code>aConfiguration</code>.
      *
      * @see Configurable
      */
     public final void configure(Configuration aConfiguration)
         throws CheckstyleException
     {
         mConfiguration = aConfiguration;
 
         // TODO: debug log messages
         final String[] attributes = aConfiguration.getAttributeNames();
 
         for (int i = 0; i < attributes.length; i++) {
             final String key = attributes[i];
             final String value = aConfiguration.getAttribute(key);
 
             try {
                 // BeanUtils.copyProperties silently ignores missing setters
                 // for key, so we have to go through great lengths here to
                 // figure out if the bean property really exists.
                 PropertyDescriptor pd =
                         PropertyUtils.getPropertyDescriptor(this, key);
                 if (pd == null || pd.getWriteMethod() == null) {
                     throw new CheckstyleException(
                         "Property '" + key + "' in module "
                         + aConfiguration.getName()
                         + " does not exist, please check the documentation");
                 }
 
                 // finally we can set the bean property
                 BeanUtils.copyProperty(this, key, value);
             }
             catch (InvocationTargetException e) {
                 throw new CheckstyleException(
                     "Cannot set property '" + key + "' in module"
                     + aConfiguration.getName() + " to '" + value
                     + "': " + e.getTargetException().getMessage());
             }
             catch (IllegalAccessException e) {
                 throw new CheckstyleException(
                     "cannot access " + key + " in "
                     + this.getClass().getName());
             }
             catch (NoSuchMethodException e) {
                 throw new CheckstyleException(
                     "cannot access " + key + " in "
                     + this.getClass().getName());
             }
+            catch (IllegalArgumentException e) {
+                throw new CheckstyleException(
+                    "illegal value '" + value + "' for property '" + key
+                    + "' of module " + aConfiguration.getName());
+            }
+            catch (ConversionException e) {
+                throw new CheckstyleException(
+                    "illegal value '" + value + "' for property '" + key
+                    + "' of module " + aConfiguration.getName());
+            }
+
         }
 
         finishLocalSetup();
 
         Configuration[] childConfigs = aConfiguration.getChildren();
         for (int i = 0; i < childConfigs.length; i++) {
             final Configuration childConfig = childConfigs[i];
             setupChild(childConfig);
         }
     }
 
     /**
      * Implements the Contextualizable interface using bean introspection.
      * @see Contextualizable
      */
     public final void contextualize(Context aContext)
             throws CheckstyleException
     {
         // TODO: debug log messages
         final String[] attributes = aContext.getAttributeNames();
 
         for (int i = 0; i < attributes.length; i++) {
             final String key = attributes[i];
             final Object value = aContext.get(key);
 
             try {
                 BeanUtils.copyProperty(this, key, value);
             }
             catch (InvocationTargetException e) {
                 // TODO: log.debug("The bean " + this.getClass()
                 // + " is not interested in " + value)
                 throw new CheckstyleException("cannot set property "
                     + key + " to value " + value + " in bean "
                     + this.getClass().getName());
             }
             catch (IllegalAccessException e) {
                 throw new CheckstyleException(
                     "cannot access " + key + " in "
                     + this.getClass().getName());
             }
+            catch (IllegalArgumentException e) {
+                throw new CheckstyleException(
+                    "illegal value '" + value + "' for property '" + key
+                    + "' of bean " + this.getClass().getName());
+            }
+            catch (ConversionException e) {
+                throw new CheckstyleException(
+                    "illegal value '" + value + "' for property '" + key
+                    + "' of bean " + this.getClass().getName());
+            }
         }
     }
 
     /**
      * Returns the configuration that was used to configure this component.
      * @return the configuration that was used to configure this component.
      */
     protected final Configuration getConfiguration()
     {
         return mConfiguration;
     }
 
     /**
      * Provides a hook to finish the part of this compoent's setup that
      * was not handled by the bean introspection.
      * <p>
      * The default implementation does nothing.
      * </p>
      * @throws CheckstyleException if there is a configuration error.
      */
     protected void finishLocalSetup() throws CheckstyleException
     {
     }
 
     /**
      * Called by configure() for every child of this component's Configuration.
      * <p>
      * The default implementation does nothing.
      * </p>
      * @param aChildConf a child of this component's Configuration
      * @throws CheckstyleException if there is a configuration error.
      * @see Configuration#getChildren
      */
     protected void setupChild(Configuration aChildConf)
         throws CheckstyleException
     {
     }
 }
 
 /**
  * <p>Standard Converter implementation that converts an incoming
  * String into an array of String.  On a conversion failure, returns
  * a specified default value or throws a ConversionException depending
  * on how this instance is constructed.</p>
  *
  * Hacked from
  * http://cvs.apache.org/viewcvs/jakarta-commons/beanutils/src/java/org/apache/commons/beanutils/converters/StringArrayConverter.java
  * because that implementation fails to convert array of tokens with elements
  * containing an underscore, "_" :(
  * 
