diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/XMLLogger.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/XMLLogger.java
index e99459552..5e1fab812 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/XMLLogger.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/XMLLogger.java
@@ -33,101 +33,101 @@ import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
 /**
  * Simple XML logger.
  * It outputs everything in UTF-8 (default XML encoding is UTF-8) in case
  * we want to localize error messages or simply that filenames are
  * localized and takes care about escaping as well.
 
  * @author <a href="mailto:stephane.bailliez@wanadoo.fr">Stephane Bailliez</a>
  */
 public class XMLLogger
     extends AutomaticBean
     implements AuditListener
 {
     /** decimal radix */
     private static final int BASE_10 = 10;
 
     /** hex radix */
     private static final int BASE_16 = 16;
 
     /** close output stream in auditFinished */
     private boolean mCloseStream;
 
     /** helper writer that allows easy encoding and printing */
     private PrintWriter mWriter;
 
     /** some known entities to detect */
     private static final String[] ENTITIES = {"gt", "amp", "lt", "apos",
                                               "quot", };
 
     /**
      * Creates a new <code>XMLLogger</code> instance.
      * Sets the output to a defined stream.
      * @param aOS the stream to write logs to.
      * @param aCloseStream close aOS in auditFinished
      */
     public XMLLogger(OutputStream aOS, boolean aCloseStream)
     {
         setOutputStream(aOS);
         mCloseStream = aCloseStream;
     }
 
     /**
      * sets the OutputStream
      * @param aOS the OutputStream to use
      **/
     private void setOutputStream(OutputStream aOS)
     {
         try {
             final OutputStreamWriter osw = new OutputStreamWriter(aOS, "UTF-8");
             mWriter = new PrintWriter(osw);
         }
-        catch (UnsupportedEncodingException e) {
+        catch (final UnsupportedEncodingException e) {
             // unlikely to happen...
             throw new ExceptionInInitializerError(e);
         }
     }
 
     /** {@inheritDoc} */
     public void auditStarted(AuditEvent aEvt)
     {
         mWriter.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
 
         final ResourceBundle compilationProperties =
             ResourceBundle.getBundle("checkstylecompilation");
         final String version =
             compilationProperties.getString("checkstyle.compile.version");
 
         mWriter.println("<checkstyle version=\"" + version + "\">");
     }
 
     /** {@inheritDoc} */
     public void auditFinished(AuditEvent aEvt)
     {
         mWriter.println("</checkstyle>");
         if (mCloseStream) {
             mWriter.close();
         }
         else {
             mWriter.flush();
         }
     }
 
     /** {@inheritDoc} */
     public void fileStarted(AuditEvent aEvt)
     {
         mWriter.println("<file name=\"" + aEvt.getFileName() + "\">");
     }
 
     /** {@inheritDoc} */
     public void fileFinished(AuditEvent aEvt)
     {
         mWriter.println("</file>");
     }
 
     /** {@inheritDoc} */
     public void addError(AuditEvent aEvt)
     {
         if (!SeverityLevel.IGNORE.equals(aEvt.getSeverityLevel())) {
             mWriter.print("<error" + " line=\"" + aEvt.getLine() + "\"");
             if (aEvt.getColumn() > 0) {
                 mWriter.print(" column=\"" + aEvt.getColumn() + "\"");
             }
@@ -174,64 +174,64 @@ public class XMLLogger
             case '>':
                 sb.append("&gt;");
                 break;
             case '\'':
                 sb.append("&apos;");
                 break;
             case '\"':
                 sb.append("&quot;");
                 break;
             case '&':
                 final int nextSemi = aValue.indexOf(";", i);
                 if ((nextSemi < 0)
                     || !isReference(aValue.substring(i, nextSemi + 1)))
                 {
                     sb.append("&amp;");
                 }
                 else {
                     sb.append('&');
                 }
                 break;
             default:
                 sb.append(c);
                 break;
             }
         }
         return sb.toString();
     }
 
     /**
      * @return whether the given argument a character or entity reference
      * @param aEnt the possible entity to look for.
      */
     public boolean isReference(String aEnt)
     {
         if (!(aEnt.charAt(0) == '&') || !aEnt.endsWith(";")) {
             return false;
         }
 
         if (aEnt.charAt(1) == '#') {
             int prefixLength = 2; // "&#"
             int radix = BASE_10;
             if (aEnt.charAt(2) == 'x') {
                 prefixLength++;
                 radix = BASE_16;
             }
             try {
                 Integer.parseInt(
                     aEnt.substring(prefixLength, aEnt.length() - 1), radix);
                 return true;
             }
-            catch (NumberFormatException nfe) {
+            catch (final NumberFormatException nfe) {
                 return false;
             }
         }
 
         final String name = aEnt.substring(1, aEnt.length() - 1);
         for (int i = 0; i < ENTITIES.length; i++) {
             if (name.equals(ENTITIES[i])) {
                 return true;
             }
         }
         return false;
     }
 }
