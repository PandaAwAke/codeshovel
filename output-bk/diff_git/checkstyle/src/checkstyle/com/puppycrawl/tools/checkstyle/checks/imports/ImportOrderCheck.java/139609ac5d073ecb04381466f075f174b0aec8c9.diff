diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
index 0296a56ba..d121fce0c 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
@@ -78,166 +78,163 @@ import com.puppycrawl.tools.checkstyle.checks.AbstractOptionCheck;
  * @author o_sukhodolsky
  * @author David DIDIER
  * @author Steve McKay
  */
 public class ImportOrderCheck
     extends AbstractOptionCheck<ImportOrderOption>
 {
 
     /** the special wildcard that catches all remaining groups. */
     private static final String WILDCARD_GROUP_NAME = "*";
 
     /** List of import groups specified by the user. */
     private String[] mGroups = new String[0];
     /** The position of the "everything else" group. */
     private int mWildcardGroupIndex;
     /** Require imports in group be separated. */
     private boolean mSeparated;
     /** Require imports in group. */
     private boolean mOrdered = true;
     /** Should comparison be case sensitive. */
     private boolean mCaseSensitive = true;
 
     /** Last imported group. */
     private int mLastGroup;
     /** Line number of last import. */
     private int mLastImportLine;
     /** Name of last import. */
     private String mLastImport;
     /** If last import was static. */
     private boolean mLastImportStatic;
     /** Whether there was any imports. */
     private boolean mBeforeFirstImport;
 
     /**
      * Groups static imports under each group.
      */
     public ImportOrderCheck()
     {
         super(ImportOrderOption.UNDER, ImportOrderOption.class);
     }
 
     /**
      * Sets the list of package groups and the order they should occur in the
      * file.
      *
      * @param aGroups
      *            a comma-separated list of package names/prefixes.
      */
     public void setGroups(String[] aGroups)
     {
+        // set the default wildcard group to be after the last named group.
+        mWildcardGroupIndex = aGroups.length;
+
         mGroups = new String[aGroups.length];
 
         for (int i = 0; i < aGroups.length; i++) {
             String pkg = aGroups[i];
 
             // if the pkg name is the wildcard, record the
             // position for later reference
             if (WILDCARD_GROUP_NAME.equals(pkg)) {
                 mWildcardGroupIndex = i;
             }
             else if (!pkg.endsWith(".")) {
                 pkg = pkg + ".";
             }
 
             mGroups[i] = pkg;
         }
     }
 
     /**
      * Sets whether or not imports should be ordered within any one group of
      * imports.
      *
      * @param aOrdered
      *            whether lexicographic ordering of imports within a group
      *            required or not.
      */
     public void setOrdered(boolean aOrdered)
     {
         mOrdered = aOrdered;
     }
 
     /**
      * Sets whether or not groups of imports must be separated from one another
      * by at least one blank line.
      *
      * @param aSeparated
      *            whether groups should be separated by oen blank line.
      */
     public void setSeparated(boolean aSeparated)
     {
         mSeparated = aSeparated;
     }
 
     /**
      * Sets whether string comparison should be case sensitive or not.
      *
      * @param aCaseSensitive
      *            whether string comparison should be case sensitive.
      */
     public void setCaseSensitive(boolean aCaseSensitive)
     {
         mCaseSensitive = aCaseSensitive;
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};
     }
 
-    @Override
-    public int[] getRequiredTokens()
-    {
-        return getDefaultTokens();
-    }
-
     @Override
     public void beginTree(DetailAST aRootAST)
     {
         mLastGroup = Integer.MIN_VALUE;
         mLastImportLine = Integer.MIN_VALUE;
         mLastImport = "";
         mLastImportStatic = false;
         mBeforeFirstImport = true;
     }
 
     @Override
     public void visitToken(DetailAST aAST)
     {
         final FullIdent ident;
         final boolean isStatic;
 
         if (aAST.getType() == TokenTypes.IMPORT) {
             ident = FullIdent.createFullIdentBelow(aAST);
             isStatic = false;
         }
         else {
             ident = FullIdent.createFullIdent(aAST.getFirstChild()
                     .getNextSibling());
             isStatic = true;
         }
 
         switch (getAbstractOption()) {
         case TOP:
             if (!isStatic && mLastImportStatic) {
                 mLastGroup = Integer.MIN_VALUE;
                 mLastImport = "";
             }
             // no break;
 
         case ABOVE:
             // previous non-static but current is static
             doVisitToken(ident, isStatic, (!mLastImportStatic && isStatic));
             break;
 
         case INFLOW:
             // previous argument is useless here
             doVisitToken(ident, isStatic, true);
             break;
 
         case BOTTOM:
             if (isStatic && !mLastImportStatic) {
                 mLastGroup = Integer.MIN_VALUE;
                 mLastImport = "";
             }
             // no break;
@@ -266,112 +263,112 @@ public class ImportOrderCheck
      */
     private void doVisitToken(FullIdent aIdent, boolean aIsStatic,
             boolean aPrevious)
     {
         if (aIdent != null) {
             final String name = aIdent.getText();
             final int groupIdx = getGroupNumber(name);
             final int line = aIdent.getLineNo();
 
             if (groupIdx > mLastGroup) {
                 if (!mBeforeFirstImport && mSeparated) {
                     // This check should be made more robust to handle
                     // comments and imports that span more than one line.
                     if ((line - mLastImportLine) < 2) {
                         log(line, "import.separation", name);
                     }
                 }
             }
             else if (groupIdx == mLastGroup) {
                 doVisitTokenInSameGroup(aIdent, aIsStatic, aPrevious, name,
                         line);
             }
             else {
                 log(line, "import.ordering", name);
             }
 
             mLastGroup = groupIdx;
             mLastImport = name;
         }
     }
 
     /**
      * Shares processing...
      *
      * @param aIdent the import to process.
      * @param aIsStatic whether the token is static or not.
      * @param aPrevious previous non-static but current is static (above), or
      *    previous static but current is non-static (under).
      * @param aName the name of the current import.
      * @param aLine the line of the current import.
      */
     private void doVisitTokenInSameGroup(FullIdent aIdent, boolean aIsStatic,
             boolean aPrevious, String aName, int aLine)
     {
         if (!mOrdered) {
             return;
         }
 
         if (getAbstractOption().equals(ImportOrderOption.INFLOW)) {
             // out of lexicographic order
-            if (compare(mLastImport, aName, mCaseSensitive) >= 0) {
+            if (compare(mLastImport, aName, mCaseSensitive) > 0) {
                 log(aLine, "import.ordering", aName);
             }
         }
         else {
             final boolean shouldFireError =
                 // current and previous static or current and
                 // previous non-static
                 (!(mLastImportStatic ^ aIsStatic)
                 &&
                 // and out of lexicographic order
-                (compare(mLastImport, aName, mCaseSensitive) >= 0))
+                (compare(mLastImport, aName, mCaseSensitive) > 0))
                 ||
                 // previous non-static but current is static (above)
                 // or
                 // previous static but current is non-static (under)
                 aPrevious;
 
             if (shouldFireError) {
                 log(aLine, "import.ordering", aName);
             }
         }
     }
 
     /**
      * Finds out what group the specified import belongs to.
      *
      * @param aName the import name to find.
      * @return group number for given import name.
      */
     private int getGroupNumber(String aName)
     {
         // find out what group this belongs in
         // loop over mGroups and get index
         for (int i = 0; i < mGroups.length; i++) {
             if (aName.startsWith(mGroups[i])) {
                 return i;
             }
         }
 
         // no match, so we return the wildcard group
         return mWildcardGroupIndex;
     }
 
     /**
      * Compares two strings.
      *
      * @param aString1
      *            the first string.
      * @param aString2
      *            the second string.
      * @param aCaseSensitive
      *            whether the comparison is case sensitive.
      * @return the value <code>0</code> if string1 is equal to string2; a value
      *         less than <code>0</code> if string1 is lexicographically less
      *         than the string2; and a value greater than <code>0</code> if
      *         string1 is lexicographically greater than string2.
      */
     private int compare(String aString1, String aString2,
             boolean aCaseSensitive)
     {
         if (aCaseSensitive) {
