diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
index ab6faf7c7..4c5c89a98 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
@@ -54,104 +54,102 @@ class ConfigurationLoader
     /** the resource for the configuration dtd */
     private static final String CONFIG_DTD_RESOURCE =
         "com/puppycrawl/tools/checkstyle/configuration_1_0.dtd";
 
     /** overriding properties **/
     private Properties mOverrideProps = new Properties();
     /** parser to read XML files **/
     private final XMLReader mParser;
     /** the loaded configurations **/
     private Stack mConfigStack = new Stack();
     /** the Configuration that is beeing built */
     private Configuration mConfiguration = null;
 
     /**
      * Creates a new <code>ConfigurationLoader</code> instance.
      * @throws ParserConfigurationException if an error occurs
      * @throws SAXException if an error occurs
      */
     private ConfigurationLoader()
         throws ParserConfigurationException, SAXException
     {
         final SAXParserFactory factory = SAXParserFactory.newInstance();
         factory.setValidating(true);
         mParser = factory.newSAXParser().getXMLReader();
         mParser.setContentHandler(this);
         mParser.setEntityResolver(this);
     }
 
     /**
      * Parses the specified file loading the configuration information.
      * @param aFilename the file to parse
      * @throws FileNotFoundException if an error occurs
      * @throws IOException if an error occurs
      * @throws SAXException if an error occurs
      */
     void parseFile(String aFilename)
         throws FileNotFoundException, IOException, SAXException
     {
         mParser.parse(new InputSource(new FileReader(aFilename)));
     }
 
     ///////////////////////////////////////////////////////////////////////////
     // Document handler methods
     ///////////////////////////////////////////////////////////////////////////
 
     /** @see org.xml.sax.EntityResolver */
     public InputSource resolveEntity(String aPublicId, String aSystemId)
         throws SAXException
     {
         if (CONFIG_DTD_PUBLIC_ID.equals(aPublicId)) {
-            final InputStream dtdIS =
-//            Thread.currentThread().getContextClassLoader()
-            getClass().getClassLoader()
-                    .getResourceAsStream(CONFIG_DTD_RESOURCE);
+            final InputStream dtdIS = getClass().getClassLoader()
+                .getResourceAsStream(CONFIG_DTD_RESOURCE);
             if (dtdIS == null) {
                 throw new SAXException(
                     "Unable to load internal dtd " + CONFIG_DTD_RESOURCE);
             }
             return new InputSource(dtdIS);
         }
 
         return super.resolveEntity(aPublicId, aSystemId);
     }
 
 
     /** @see org.xml.sax.helpers.DefaultHandler **/
     public void startElement(String aNamespaceURI,
                              String aLocalName,
                              String aQName,
                              Attributes aAtts)
             throws SAXException
     {
         // TODO: debug logging for support puposes
         if (aQName.equals("config")) {
             //create configuration
             final String name = aAtts.getValue("name");
             if (name == null) {
                 throw new SAXException("missing config name");
             }
             final DefaultConfiguration conf = new DefaultConfiguration(name);
             if (mConfiguration == null) {
                 mConfiguration = conf;
             }
 
             //add configuration to it's parent
             if (!mConfigStack.isEmpty()) {
                 DefaultConfiguration top =
                         (DefaultConfiguration) mConfigStack.peek();
                 top.addChild(conf);
             }
 
             mConfigStack.push(conf);
         }
         else if (aQName.equals("property")) {
 
             //extract name and value
             final String name = aAtts.getValue("name");
             if (name == null) {
                 throw new SAXException("missing property name");
             }
             String value = aAtts.getValue("value");
             if (value == null) {
                 throw new SAXException("missing value for property " + name);
             }
