diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
index 0bc9fc3b0..33af81576 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
@@ -226,101 +226,101 @@ public final class TreeWalker
             getMessageCollector().add(
                 new LocalizedMessage(
                     0,
                     Defn.CHECKSTYLE_BUNDLE,
                     "general.fileNotFound",
                     null,
                     this.getClass()));
         }
         catch (IOException ioe) {
             Utils.getExceptionLogger().debug("IOException occured.", ioe);
             getMessageCollector().add(
                 new LocalizedMessage(
                     0,
                     Defn.CHECKSTYLE_BUNDLE,
                     "general.exception",
                     new String[] {ioe.getMessage()},
                     this.getClass()));
         }
         catch (RecognitionException re) {
             Utils.getExceptionLogger()
                 .debug("RecognitionException occured.", re);
             getMessageCollector().add(
                 new LocalizedMessage(
                     re.getLine(),
                     re.getColumn(),
                     Defn.CHECKSTYLE_BUNDLE,
                     "general.exception",
                     new String[] {re.getMessage()},
                     this.getClass()));
         }
         catch (TokenStreamRecognitionException tre) {
             Utils.getExceptionLogger()
                 .debug("TokenStreamRecognitionException occured.", tre);
             final RecognitionException re = tre.recog;
             if (re != null) {
                 getMessageCollector().add(
                     new LocalizedMessage(
                         re.getLine(),
                         re.getColumn(),
                         Defn.CHECKSTYLE_BUNDLE,
                         "general.exception",
                         new String[] {re.getMessage()},
                         this.getClass()));
             }
             else {
                 getMessageCollector().add(
                     new LocalizedMessage(
                         0,
                         Defn.CHECKSTYLE_BUNDLE,
                         "general.exception",
-                        new String[] {re.getMessage()},
+                        new String[] {""},
                         this.getClass()));
             }
         }
         catch (TokenStreamException te) {
             Utils.getExceptionLogger()
                 .debug("TokenStreamException occured.", te);
             getMessageCollector().add(
                 new LocalizedMessage(
                     0,
                     Defn.CHECKSTYLE_BUNDLE,
                     "general.exception",
                     new String[] {te.getMessage()},
                     this.getClass()));
         }
         catch (Throwable err) {
             Utils.getExceptionLogger().debug("Throwable occured.", err);
             getMessageCollector().add(
                 new LocalizedMessage(
                     0,
                     Defn.CHECKSTYLE_BUNDLE,
                     "general.exception",
                     new String[] {"" + err},
                     this.getClass()));
         }
 
         if (getMessageCollector().size() == 0) {
             mCache.checkedOk(fileName, timestamp);
         }
         else {
             fireErrors(fileName);
         }
 
         getMessageDispatcher().fireFileFinished(fileName);
     }
 
     /**
      * Register a check for a given configuration.
      * @param aCheck the check to register
      * @throws CheckstyleException if an error occurs
      */
     private void registerCheck(Check aCheck)
         throws CheckstyleException
     {
         int[] tokens = new int[] {}; //safety initialization
         final Set checkTokens = aCheck.getTokenNames();
         if (!checkTokens.isEmpty()) {
             tokens = aCheck.getRequiredTokens();
 
             //register configured tokens
             final int acceptableTokens[] = aCheck.getAcceptableTokens();
