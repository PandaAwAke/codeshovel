diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java
index ca565ff8f..e775c73b3 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java
@@ -113,101 +113,101 @@ public abstract class AbstractSuperCheck
         mMethodStack.clear();
     }
 
     @Override
     public void visitToken(DetailAST aAST)
     {
         if (isOverridingMethod(aAST)) {
             mMethodStack.add(new MethodNode(aAST));
         }
         else if (isSuperCall(aAST)) {
             final MethodNode methodNode = mMethodStack.getLast();
             methodNode.setCallsSuper();
         }
     }
 
     /**
      *  Determines whether a 'super' literal is a call to the super method
      * for this check.
      * @param aAST the AST node of a 'super' literal.
      * @return true if aAST is a call to the super method
      * for this check.
      */
     private boolean isSuperCall(DetailAST aAST)
     {
         if (aAST.getType() != TokenTypes.LITERAL_SUPER) {
             return false;
         }
         // dot operator?
         DetailAST parent = aAST.getParent();
         if ((parent == null) || (parent.getType() != TokenTypes.DOT)) {
             return false;
         }
 
         // same name of method
         AST sibling = aAST.getNextSibling();
         // ignore type parameters
         if ((sibling != null)
             && (sibling.getType() == TokenTypes.TYPE_ARGUMENTS))
         {
             sibling = sibling.getNextSibling();
         }
         if ((sibling == null) || (sibling.getType() != TokenTypes.IDENT)) {
             return false;
         }
         final String name = sibling.getText();
         if (!getMethodName().equals(name)) {
             return false;
         }
 
         // 0 parameters?
-        final DetailAST args = (DetailAST) parent.getNextSibling();
+        final DetailAST args = parent.getNextSibling();
         if ((args == null) || (args.getType() != TokenTypes.ELIST)) {
             return false;
         }
         if (args.getChildCount() != 0) {
             return false;
         }
 
         // in an overriding method for this check?
         while (parent != null) {
             if (parent.getType() == TokenTypes.METHOD_DEF) {
                 return isOverridingMethod(parent);
             }
             else if ((parent.getType() == TokenTypes.CTOR_DEF)
                 || (parent.getType() == TokenTypes.INSTANCE_INIT))
             {
                 return false;
             }
             parent = parent.getParent();
         }
         return false;
     }
 
     @Override
     public void leaveToken(DetailAST aAST)
     {
         if (isOverridingMethod(aAST)) {
             final MethodNode methodNode =
                 mMethodStack.removeLast();
             if (!methodNode.getCallsSuper()) {
                 final DetailAST methodAST = methodNode.getMethod();
                 final DetailAST nameAST =
                     methodAST.findFirstToken(TokenTypes.IDENT);
                 log(nameAST.getLineNo(), nameAST.getColumnNo(),
                     "missing.super.call", nameAST.getText());
             }
         }
     }
 
     /**
      * Determines whether an AST is a method definition for this check,
      * with 0 parameters.
      * @param aAST the method definition AST.
      * @return true if the method of aAST is a method for this check.
      */
     private boolean isOverridingMethod(DetailAST aAST)
     {
         if ((aAST.getType() != TokenTypes.METHOD_DEF)
             || ScopeUtils.inInterfaceOrAnnotationBlock(aAST))
         {
             return false;
