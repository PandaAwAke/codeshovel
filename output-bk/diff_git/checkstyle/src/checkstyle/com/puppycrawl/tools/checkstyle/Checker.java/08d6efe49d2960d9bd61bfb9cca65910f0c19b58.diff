diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java
index ea7f80742..265467e25 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java
@@ -1,213 +1,222 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2002  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle;
 
 import java.io.File;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.Locale;
 
 import com.puppycrawl.tools.checkstyle.api.AutomaticBean;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.api.FileSetCheck;
 import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
 import com.puppycrawl.tools.checkstyle.api.MessageDispatcher;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.PackageNamesBean;
+import com.puppycrawl.tools.checkstyle.api.Context;
 
 /**
  * This class provides the functionality to check a set of files.
  * @author <a href="mailto:oliver@puppycrawl.com">Oliver Burn</a>
  * @author <a href="mailto:stephane.bailliez@wanadoo.fr">Stephane Bailliez</a>
  * @author lkuehne
  */
 public class Checker extends AutomaticBean
     implements Defn, MessageDispatcher, PackageNamesBean
 {
     /**
      * An AuditListener that maintains the number of errors.
      */
     private class ErrorCounter implements AuditListener
     {
         /** keeps track of the number of errors */
         private int mCount = 0;
 
         /** @see AuditListener */
         public void addError(AuditEvent aEvt)
         {
             mCount++;
         }
 
         /** @see AuditListener */
         public void addException(AuditEvent aEvt, Throwable aThrowable)
         {
             mCount++;
         }
 
         /** @see AuditListener */
         public void auditStarted(AuditEvent aEvt)
         {
             mCount = 0;
         }
 
         /** @see AuditListener */
         public void fileStarted(AuditEvent aEvt)
         {
         }
 
         /** @see AuditListener */
         public void auditFinished(AuditEvent aEvt)
         {
         }
 
         /** @see AuditListener */
         public void fileFinished(AuditEvent aEvt)
         {
         }
 
         /**
          * @return the number of errors since audit started.
          */
         private int getCount()
         {
             return mCount;
         }
     }
 
     /** maintains error count */
     private final ErrorCounter mCounter = new ErrorCounter();
 
     /** vector of listeners */
     private final ArrayList mListeners = new ArrayList();
 
     /** vector of fileset checks */
     private final ArrayList mFileSetChecks = new ArrayList();
 
     /** class loader to resolve classes with. **/
     private ClassLoader mLoader =
             Thread.currentThread().getContextClassLoader();
 
     /** the basedir to strip off in filenames */
     private String mBasedir;
 
     /** locale country to report messages  **/
     private String mLocaleCountry = Locale.getDefault().getCountry();
     /** locale language to report messages  **/
     private String mLocaleLanguage = Locale.getDefault().getLanguage();
 
     /**
      * List of package names for instatiating objects. Do not access directly,
      * but instead use the getter
      */
     private String[] mPackageNames;
 
+    /** the context of all child components */
+    private Context mChildContext;
+
     /**
      * Creates a new <code>Checker</code> instance.
      * The instance needs to be contextualized and configured.
      *
      * @throws CheckstyleException if an error occurs
      */
     public Checker()
         throws CheckstyleException
     {
         addListener(mCounter);
     }
 
     /** @see AutomaticBean */
-    public void configure(Configuration aConfig)
+    public void finishLocalSetup()
             throws CheckstyleException
     {
-        super.configure(aConfig);
-
         final Locale locale = new Locale(mLocaleLanguage, mLocaleCountry);
         LocalizedMessage.setLocale(locale);
 
         final DefaultContext context = new DefaultContext();
         context.add("classLoader", mLoader);
-        final Configuration[] fileSetChecks = aConfig.getChildren();
-        for (int i = 0; i < fileSetChecks.length; i++) {
-            final Configuration fscConf = fileSetChecks[i];
-            final String name = fscConf.getName();
-            try {
-                final FileSetCheck fsc =
+        mChildContext = context;
+    }
+
+    /**
+     * Instantiates, configures and registers a FileSetCheck
+     * that is specified in the provided configuration.
+     * @see com.puppycrawl.tools.checkstyle.api.AutomaticBean
+     */
+    protected void setupChild(Configuration aChildConf)
+            throws CheckstyleException
+    {
+        final String name = aChildConf.getName();
+        try {
+            final FileSetCheck fsc =
                     (FileSetCheck) PackageObjectFactory.makeObject(
-                        getPackageNames(),
-                        getClass().getClassLoader(),
-                        name);
-                fsc.setPackageNames(getPackageNames());
-                fsc.contextualize(context);
-                fsc.configure(fscConf);
-                addFileSetCheck(fsc);
-            }
-            catch (Exception ex) {
-                // TODO i18n
-                throw new CheckstyleException(
-                        "cannot initialize filesetcheck with name "
-                        + name + " - " + ex.getMessage());
-            }
+                            getPackageNames(),
+                            getClass().getClassLoader(),
+                            name);
+            fsc.setPackageNames(getPackageNames());
+            fsc.contextualize(mChildContext);
+            fsc.configure(aChildConf);
+            addFileSetCheck(fsc);
+        }
+        catch (Exception ex) {
+            // TODO i18n
+            throw new CheckstyleException(
+                    "cannot initialize filesetcheck with name "
+                    + name + " - " + ex.getMessage());
         }
     }
 
     /**
      * Adds a FileSetCheck to the list of FileSetChecks
      * that is executed in process().
      * @param aFileSetCheck the additional FileSetCheck
      */
     public void addFileSetCheck(FileSetCheck aFileSetCheck)
     {
         aFileSetCheck.setMessageDispatcher(this);
         mFileSetChecks.add(aFileSetCheck);
     }
 
     /** Cleans up the object **/
     public void destroy()
     {
         mListeners.clear();
     }
 
     /**
      * Add the listener that will be used to receive events from the audit
      * @param aListener the nosy thing
      */
     public void addListener(AuditListener aListener)
     {
         mListeners.add(aListener);
     }
 
     /**
      * Processes a set of files with all FileSetChecks.
      * Once this is done, it is highly recommended to call for
      * the destroy method to close and remove the listeners.
      * @param aFiles the list of files to be audited.
      * @return the total number of errors found
      * @see #destroy()
      */
     public int process(File[] aFiles)
     {
         fireAuditStarted();
         for (int i = 0; i < mFileSetChecks.size(); i++) {
             FileSetCheck fileSetCheck = (FileSetCheck) mFileSetChecks.get(i);
             fileSetCheck.process(aFiles);
             fileSetCheck.destroy();
         }
         int errorCount = mCounter.getCount();
         fireAuditFinished();
         return errorCount;
     }
 
