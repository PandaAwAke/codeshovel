diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/FullIdent.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/FullIdent.java
index 06c6e5844..1f884e75b 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/FullIdent.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/FullIdent.java
@@ -69,83 +69,83 @@ public final class FullIdent
      * Append the specified text.
      * @param aText the text to append
      */
     private void append(String aText)
     {
         mBuffer.append(aText);
     }
 
     /**
      * Append the specified token and also recalibrate the first line and
      * column.
      * @param aAST the token to append
      */
     private void append(DetailAST aAST)
     {
         mBuffer.append(aAST.getText());
         if (mLineNo == 0) {
             mLineNo = aAST.getLineNo();
         }
         else if (aAST.getLineNo() > 0) {
             mLineNo = Math.min(mLineNo, aAST.getLineNo());
         }
         // TODO: make a function
         if (mColNo == 0) {
             mColNo = aAST.getColumnNo();
         }
         else if (aAST.getColumnNo() > 0) {
             mColNo = Math.min(mColNo, aAST.getColumnNo());
         }
     }
 
     /**
      * Creates a new FullIdent starting from the specified node.
      * @param aAST the node to start from
      * @return a <code>FullIdent</code> value
      */
     public static FullIdent createFullIdent(DetailAST aAST)
     {
         final FullIdent fi = new FullIdent();
         extractFullIdent(fi, aAST);
         return fi;
     }
 
     /**
      * Creates a new FullIdent starting from the child of the specified node.
      * @param aAST the parent node from where to start from
      * @return a <code>FullIdent</code> value
      */
     public static FullIdent createFullIdentBelow(DetailAST aAST)
     {
-        return createFullIdent((DetailAST) aAST.getFirstChild());
+        return createFullIdent(aAST.getFirstChild());
     }
 
     /**
      * Recursively extract a FullIdent.
      *
      * @param aFull the FullIdent to add to
      * @param aAST the node to recurse from
      */
     private static void extractFullIdent(FullIdent aFull, DetailAST aAST)
     {
         if (aAST == null) {
             return;
         }
 
         if (aAST.getType() == TokenTypes.DOT) {
-            extractFullIdent(aFull, (DetailAST) aAST.getFirstChild());
+            extractFullIdent(aFull, aAST.getFirstChild());
             aFull.append(".");
             extractFullIdent(
-                aFull, (DetailAST) aAST.getFirstChild().getNextSibling());
+                aFull, aAST.getFirstChild().getNextSibling());
         }
         else {
             aFull.append(aAST);
         }
     }
 
     @Override
     public String toString()
     {
         return getText() + "[" + getLineNo() + "x" + getColumnNo() + "]";
     }
 
 }
