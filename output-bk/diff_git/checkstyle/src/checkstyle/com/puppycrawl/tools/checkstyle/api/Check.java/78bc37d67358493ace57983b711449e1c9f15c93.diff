diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/Check.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/Check.java
index 0c70585e4..ab217abc1 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/Check.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/Check.java
@@ -235,85 +235,82 @@ public abstract class Check
      * Helper method to log a LocalizedMessage. Column defaults to 0.
      *
      * @param aLineNo line number to associate with the message
      * @param aKey key to locale message format
      * @param aArg0 first argument
      */
     public void log(int aLineNo, String aKey, Object aArg0)
     {
         log(aLineNo, aKey, new Object[] {aArg0});
     }
 
     /**
      * Helper method to log a LocalizedMessage. Column defaults to 0.
      *
      * @param aLineNo line number to associate with the message
      * @param aKey key to locale message format
      * @param aArg0 first argument
      * @param aArg1 second argument
      */
     public void log(int aLineNo, String aKey, Object aArg0, Object aArg1)
     {
         log(aLineNo, aKey, new Object[] {aArg0, aArg1});
     }
 
     /**
      * Helper method to log a LocalizedMessage. Column defaults to 0.
      *
      * @param aLineNo line number to associate with the message
      * @param aKey key to locale message format
      * @param aArg0 first argument
      * @param aArg1 second argument
      * @param aArg2 third argument
      */
     public void log(int aLineNo, String aKey,
              Object aArg0, Object aArg1, Object aArg2)
     {
         log(aLineNo, aKey, new Object[] {aArg0, aArg1, aArg2});
     }
 
 
     /**
      * Helper method to log a LocalizedMessage.
      *
      * @param aLineNo line number to associate with the message
      * @param aColNo column number to associate with the message
      * @param aKey key to locale message format
      * @param aArgs arguments for message
      */
     public void log(int aLineNo, int aColNo, String aKey, Object[] aArgs)
     {
-        final String fname = getFilename();
-        System.out.println(fname + ":" + aLineNo + ": " + aKey);
-
         final int col = aColNo + 1;
 //        final int col = 1 + Utils.lengthExpandedTabs(
 //            mLines[aLineNo - 1], aColNo, mTabWidth);
         mMessages.add(new LocalizedMessage(
                 aLineNo, col, getResourceBundle(), aKey, aArgs));
     }
 
 
     /**
      * TODO: Should this method be protected or should we keep the api simple?
      * Returns the name of a a resource bundle that contains the messages
      * used by this check.
      *
      * The default implementation expects the resource files to be named
      * messages.properties, messages_de.properties, etc. The file should
      * be placed in the same package as the Check implementation.
      *
      * Example: If you write com/foo/MyCoolCheck, create resource files
      * com/foo/messages.properties, com/foo/messages_de.properties, etc.
      *
      * @return name of a resource bundle that contains the messages
      * used by this check
      */
     private String getResourceBundle()
     {
         // PERF: check perf impact, maybe cache result
         final String className = this.getClass().getName();
         final String packageName =
-                className.substring(className.lastIndexOf('.') + 1);
+                className.substring(0, className.lastIndexOf('.'));
         return packageName + "." + "messages";
     }
 }
