diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
index 19ae8feac..c25d6b26a 100755
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
@@ -1,176 +1,179 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2010  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.api;
 
 import java.io.Serializable;
 import java.text.MessageFormat;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Locale;
 import java.util.Map;
 import java.util.MissingResourceException;
 import java.util.ResourceBundle;
 
 
 /**
  * Represents a message that can be localised. The translations come from
  * message.properties files. The underlying implementation uses
  * java.text.MessageFormat.
  *
  * @author Oliver Burn
  * @author lkuehne
  * @version 1.0
  */
 public final class LocalizedMessage
     implements Comparable<LocalizedMessage>, Serializable
 {
+    /** Required for serialization. */
+    private static final long serialVersionUID = 5675176836184862150L;
+
     /** hash function multiplicand */
     private static final int HASH_MULT = 29;
 
     /** the locale to localise messages to **/
     private static Locale sLocale = Locale.getDefault();
 
     /**
      * A cache that maps bundle names to RessourceBundles.
      * Avoids repetitive calls to ResourceBundle.getBundle().
      * TODO: The cache should be cleared at some point.
      */
     private static final Map<String, ResourceBundle> BUNDLE_CACHE =
         Collections.synchronizedMap(new HashMap<String, ResourceBundle>());
 
     /** the line number **/
     private final int mLineNo;
     /** the column number **/
     private final int mColNo;
 
     /** the severity level **/
     private final SeverityLevel mSeverityLevel;
 
     /** the id of the module generating the message. */
     private final String mModuleId;
 
     /** the default severity level if one is not specified */
     private static final SeverityLevel DEFAULT_SEVERITY = SeverityLevel.ERROR;
 
     /** key for the message format **/
     private final String mKey;
 
     /** arguments for MessageFormat **/
     private final Object[] mArgs;
 
     /** name of the resource bundle to get messages from **/
     private final String mBundle;
 
     /** class of the source for this LocalizedMessage */
     private final Class<?> mSourceClass;
 
     /** a custom message overriding the default message from the bundle. */
     private final String mCustomMessage;
 
     @Override
     public boolean equals(Object aObject)
     {
         if (this == aObject) {
             return true;
         }
         if (!(aObject instanceof LocalizedMessage)) {
             return false;
         }
 
         final LocalizedMessage localizedMessage = (LocalizedMessage) aObject;
 
         if (mColNo != localizedMessage.mColNo) {
             return false;
         }
         if (mLineNo != localizedMessage.mLineNo) {
             return false;
         }
         if (!mKey.equals(localizedMessage.mKey)) {
             return false;
         }
 
         if (!Arrays.equals(mArgs, localizedMessage.mArgs)) {
             return false;
         }
         // ignoring mBundle for perf reasons.
 
         // we currently never load the same error from different bundles.
 
         return true;
     }
 
     @Override
     public int hashCode()
     {
         int result;
         result = mLineNo;
         result = HASH_MULT * result + mColNo;
         result = HASH_MULT * result + mKey.hashCode();
-        for (Object element : mArgs) {
+        for (final Object element : mArgs) {
             result = HASH_MULT * result + element.hashCode();
         }
         return result;
     }
 
     /**
      * Creates a new <code>LocalizedMessage</code> instance.
      *
      * @param aLineNo line number associated with the message
      * @param aColNo column number associated with the message
      * @param aBundle resource bundle name
      * @param aKey the key to locate the translation
      * @param aArgs arguments for the translation
      * @param aSeverityLevel severity level for the message
      * @param aModuleId the id of the module the message is associated with
      * @param aSourceClass the Class that is the source of the message
      * @param aCustomMessage optional custom message overriding the default
      */
     public LocalizedMessage(int aLineNo,
                             int aColNo,
                             String aBundle,
                             String aKey,
                             Object[] aArgs,
                             SeverityLevel aSeverityLevel,
                             String aModuleId,
                             Class<?> aSourceClass,
                             String aCustomMessage)
     {
         mLineNo = aLineNo;
         mColNo = aColNo;
         mKey = aKey;
         mArgs = (null == aArgs) ? null : aArgs.clone();
         mBundle = aBundle;
         mSeverityLevel = aSeverityLevel;
         mModuleId = aModuleId;
         mSourceClass = aSourceClass;
         mCustomMessage = aCustomMessage;
     }
 
     /**
      * Creates a new <code>LocalizedMessage</code> instance.
      *
      * @param aLineNo line number associated with the message
      * @param aColNo column number associated with the message
      * @param aBundle resource bundle name
      * @param aKey the key to locate the translation
      * @param aArgs arguments for the translation
      * @param aModuleId the id of the module the message is associated with
      * @param aSourceClass the Class that is the source of the message
      * @param aCustomMessage optional custom message overriding the default
