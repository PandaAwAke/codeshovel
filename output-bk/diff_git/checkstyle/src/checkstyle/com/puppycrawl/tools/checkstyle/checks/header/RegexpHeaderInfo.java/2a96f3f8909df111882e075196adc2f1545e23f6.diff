diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderInfo.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderInfo.java
index 47140014c..5d52c62a9 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderInfo.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderInfo.java
@@ -50,58 +50,58 @@ final class RegexpHeaderInfo extends HeaderInfo
      */
     void setMultiLines(int[] aList)
     {
         if ((aList == null) || (aList.length == 0)) {
             mMultiLines = EMPTY_INT_ARRAY;
             return;
         }
 
         mMultiLines = new int[aList.length];
         System.arraycopy(aList, 0, mMultiLines, 0, aList.length);
         Arrays.sort(mMultiLines);
     }
 
     /**
      * Returns the lines numbers to repeat in the header check.
      * @return line numbers to repeat in header.
      */
     int[] getMultLines()
     {
         return mMultiLines;
     }
 
 
     /**
      * Returns the compiled regexps from {@link #getHeaderLines()}.
      *
      * @return an array of non-null patterns,
      * same legth as the result of {@link #getHeaderLines()}.
      */
     Pattern[] geHeaderRegexps()
     {
         return mHeaderRegexps;
     }
 
     /**
      * Initializes {@link #mHeaderRegexps} from
      * {@link HeaderInfo#getHeaderLines()}.
      */
     protected void postprocessHeaderLines()
     {
         final String[] headerLines = getHeaderLines();
         if (headerLines != null) {
             mHeaderRegexps = new Pattern[headerLines.length];
             for (int i = 0; i < headerLines.length; i++) {
                 try {
                     // TODO: Not sure if cache in Utils is still necessary
                     mHeaderRegexps[i] = Utils.getPattern(headerLines[i]);
                 }
                 catch (final PatternSyntaxException ex) {
                     throw new ConversionException(
-                            "line " + i + " in header specification"
+                            "line " + (i + 1) + " in header specification"
                             + " is not a regular expression");
                 }
             }
         }
     }
 
 }
