diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java
index bf1d55e3b..f2160341d 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java
@@ -97,171 +97,181 @@ public class Checker
 
     /** Cleans up the object **/
     public void destroy()
     {
         mCache.destroy();
         mListeners.clear();
     }
 
     /**
      * Add the listener that will be used to receive events from the audit
      * @param aListener the nosy thing
      */
     public void addListener(AuditListener aListener)
     {
         mListeners.add(aListener);
     }
 
     /**
      * Processes a set of files.
      * Once this is done, it is highly recommended to call for
      * the destroy method to close and remove the listeners.
      * @param aFiles the list of files to be audited.
      * @return the total number of errors found
      * @see #destroy()
      */
     public int process(File[] aFiles)
     {
         int total = 0;
         fireAuditStarted();
         for (int i = 0; i < aFiles.length; i++) {
             total += process(aFiles[i]);
         }
         fireAuditFinished();
         return total;
     }
 
     /**
      * Processes a specified file and prints out all errors found.
      * @return the number of errors found
      * @param aFile the file to process
      **/
     private int process(File aFile)
     {
         // check if already checked and passed the file
         final String fileName = aFile.getPath();
         final long timestamp = aFile.lastModified();
         if (mCache.alreadyChecked(fileName, timestamp)) {
             return 0;
         }
 
-        // Create a stripped down version
-        final String stripped;
-        final String basedir = mConfig.getBasedir();
-        if ((basedir == null) || !fileName.startsWith(basedir)) {
-            stripped = fileName;
-        }
-        else {
-            // making the assumption that there is text after basedir
-            final int skipSep = basedir.endsWith(File.separator) ? 0 : 1;
-            stripped = fileName.substring(basedir.length() + skipSep);
-        }
-
         mMessages.reset();
         try {
-            fireFileStarted(stripped);
+            fireFileStarted(fileName);
             final String[] lines = Utils.getLines(fileName);
             final FileContents contents = new FileContents(fileName, lines);
             final DetailAST rootAST = TreeWalker.parse(contents);
             mWalker.walk(rootAST, contents, mConfig.getClassLoader());
         }
         catch (FileNotFoundException fnfe) {
             mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE,
                                                "general.fileNotFound", null));
         }
         catch (IOException ioe) {
             mMessages.add(new LocalizedMessage(
                               0, Defn.CHECKSTYLE_BUNDLE,
                               "general.exception",
                               new String[] {ioe.getMessage()}));
         }
         catch (RecognitionException re) {
             mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE,
                                                "general.exception",
                                                new String[] {re.getMessage()}));
         }
         catch (TokenStreamException te) {
             mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE,
                                                "general.exception",
                                                new String[] {te.getMessage()}));
         }
 
         if (mMessages.size() == 0) {
             mCache.checkedOk(fileName, timestamp);
         }
         else {
-            fireErrors(stripped, mMessages.getMessages());
+            fireErrors(fileName, mMessages.getMessages());
         }
 
-        fireFileFinished(stripped);
+        fireFileFinished(fileName);
         return mMessages.size();
     }
 
+    /**
+     * Create a stripped down version of a filename.
+     * @param aFileName the original filename
+     * @return the filename where an initial prefix of basedir is stripped
+     */
+    private String getStrippedFileName(final String aFileName)
+    {
+        final String stripped;
+        final String basedir = mConfig.getBasedir();
+        if ((basedir == null) || !aFileName.startsWith(basedir)) {
+            stripped = aFileName;
+        }
+        else {
+            // making the assumption that there is text after basedir
+            final int skipSep = basedir.endsWith(File.separator) ? 0 : 1;
+            stripped = aFileName.substring(basedir.length() + skipSep);
+        }
+        return stripped;
+    }
+
 
     /** notify all listeners about the audit start */
     protected void fireAuditStarted()
     {
         final AuditEvent evt = new AuditEvent(this);
         final Iterator it = mListeners.iterator();
         while (it.hasNext()) {
             final AuditListener listener = (AuditListener) it.next();
             listener.auditStarted(evt);
         }
     }
 
     /** notify all listeners about the audit end */
     protected void fireAuditFinished()
     {
         final AuditEvent evt = new AuditEvent(this);
         final Iterator it = mListeners.iterator();
         while (it.hasNext()) {
             final AuditListener listener = (AuditListener) it.next();
             listener.auditFinished(evt);
         }
     }
 
     /**
      * notify all listeners about the beginning of a file audit
      * @param aFileName the file to be audited
      */
     protected void fireFileStarted(String aFileName)
     {
-        final AuditEvent evt = new AuditEvent(this, aFileName);
+        final String stripped = getStrippedFileName(aFileName);
+        final AuditEvent evt = new AuditEvent(this, stripped);
         final Iterator it = mListeners.iterator();
         while (it.hasNext()) {
             final AuditListener listener = (AuditListener) it.next();
             listener.fileStarted(evt);
         }
     }
 
     /**
      * notify all listeners about the end of a file audit
      * @param aFileName the audited file
      */
     protected void fireFileFinished(String aFileName)
     {
-        final AuditEvent evt = new AuditEvent(this, aFileName);
+        final String stripped = getStrippedFileName(aFileName);
+        final AuditEvent evt = new AuditEvent(this, stripped);
         final Iterator it = mListeners.iterator();
         while (it.hasNext()) {
             final AuditListener listener = (AuditListener) it.next();
             listener.fileFinished(evt);
         }
     }
 
     /**
      * notify all listeners about the errors in a file.
      * @param aFileName the audited file
      * @param aErrors the audit errors from the file
      */
     protected void fireErrors(String aFileName, LocalizedMessage[] aErrors)
     {
+        final String stripped = getStrippedFileName(aFileName);
         for (int i = 0; i < aErrors.length; i++) {
-            final AuditEvent evt =
-                new AuditEvent(this, aFileName, aErrors[i]);
+            final AuditEvent evt = new AuditEvent(this, stripped, aErrors[i]);
             final Iterator it = mListeners.iterator();
             while (it.hasNext()) {
                 final AuditListener listener = (AuditListener) it.next();
                 listener.addError(evt);
             }
         }
     }
 }
