diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java
index 907ec7307..18ea4ef13 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java
@@ -93,150 +93,149 @@ public final class FileContents implements CommentListener
     }
 
     /**
      * Report the location of a C++ style comment.
      * @param aStartLineNo the starting line number
      * @param aStartColNo the starting column number
      **/
     public void reportCppComment(int aStartLineNo, int aStartColNo)
     {
         final String cmt = mLines[aStartLineNo - 1].substring(aStartColNo);
         mCPlusPlusComments.put(new Integer(aStartLineNo), cmt);
     }
 
     /**
      * Returns a map of all the C++ style comments. The key is a line number,
      * the value is the comment at the line.
      * @return the Map of comments
      */
     public Map getCppComments()
     {
         return Collections.unmodifiableMap(mCPlusPlusComments);
     }
 
     /**
      * Report the location of a C-style comment.
      * @param aStartLineNo the starting line number
      * @param aStartColNo the starting column number
      * @param aEndLineNo the ending line number
      * @param aEndColNo the ending column number
      **/
     public void reportCComment(int aStartLineNo, int aStartColNo,
                                int aEndLineNo, int aEndColNo)
     {
         final String[] cc = extractCComment(aStartLineNo, aStartColNo,
                                             aEndLineNo, aEndColNo);
 
         // save the comment
         final Integer key = new Integer(aStartLineNo);
         if (mCComments.containsKey(key)) {
             final List entries = (List) mCComments.get(key);
             entries.add(cc);
         }
         else {
             final List entries = new ArrayList();
             entries.add(cc);
             mCComments.put(key, entries);
         }
 
         // Remember if possible Javadoc comment
         if (mLines[aStartLineNo - 1].indexOf("/**", aStartColNo) != -1) {
-            mJavadocComments.put(new Integer(aEndLineNo - 1), cc);
+            Comment comment = new Comment(cc, aStartColNo, aEndLineNo);
+
+            mJavadocComments.put(new Integer(aEndLineNo - 1), comment);
         }
     }
 
     /**
      * Returns a map of all C style comments. The key is the line number, the
      * value is a list of C style comments at the line.
      * @return the map of comments
      */
     public Map getCComments()
     {
         return Collections.unmodifiableMap(mCComments);
     }
 
     /**
      * Returns the specified C comment as a String array.
      * @return C comment as a array
      * @param aStartLineNo the starting line number
      * @param aStartColNo the starting column number
      * @param aEndLineNo the ending line number
      * @param aEndColNo the ending column number
      **/
     private String[] extractCComment(int aStartLineNo, int aStartColNo,
                                      int aEndLineNo, int aEndColNo)
     {
         String[] retVal;
         if (aStartLineNo == aEndLineNo) {
             retVal = new String[1];
             retVal[0] = mLines[aStartLineNo - 1].substring(aStartColNo,
                                                            aEndColNo + 1);
         }
         else {
             retVal = new String[aEndLineNo - aStartLineNo + 1];
             retVal[0] = mLines[aStartLineNo - 1].substring(aStartColNo);
             for (int i = aStartLineNo; i < aEndLineNo; i++) {
                 retVal[i - aStartLineNo + 1] = mLines[i];
             }
             retVal[retVal.length - 1] =
                 mLines[aEndLineNo - 1].substring(0, aEndColNo + 1);
         }
         return retVal;
     }
 
     /**
      * Returns the Javadoc comment before the specified line.
      * A return value of <code>null</code> means there is no such comment.
      * @return the Javadoc comment, or <code>null</code> if none
      * @param aLineNo the line number to check before
      **/
     public TextBlock getJavadocBefore(int aLineNo)
     {
         // Lines start at 1 to the callers perspective, so need to take off 2
         int lineNo = aLineNo - 2;
 
         // skip blank lines
         while ((lineNo > 0) && (lineIsBlank(lineNo) || lineIsComment(lineNo))) {
             lineNo--;
         }
 
-        final String[] text =
-            (String[]) mJavadocComments.get(new Integer(lineNo));
-
-        return (text == null ? null : new Comment(text, lineNo + 1));
+        return (TextBlock) mJavadocComments.get(new Integer(lineNo));
     }
 
     /** @return the lines in the file */
     public String[] getLines()
     {
         return mLines;
     }
 
     /** @return the name of the file */
     public String getFilename()
     {
         return mFilename;
     }
 
     /**
      * Checks if the specified line is blank.
      * @param aLineNo the line number to check
      * @return if the specified line consists only of tabs and spaces.
      **/
     public boolean lineIsBlank(int aLineNo)
     {
         // possible improvement: avoid garbage creation in trim()
         return "".equals(mLines[aLineNo].trim());
     }
 
     /**
      * Checks if the specified line is a single-line comment without code.
      * @param aLineNo  the line number to check
      * @return if the specified line consists of only a single line comment
      *         without code.
      **/
     public boolean lineIsComment(int aLineNo)
     {
       return MATCH_SINGLELINE_COMMENT.match(mLines[aLineNo]);
     }
 
 }
