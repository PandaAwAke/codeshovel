diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/MemberNameCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/MemberNameCheck.java
index 96f62e542..b79f233f1 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/MemberNameCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/MemberNameCheck.java
@@ -29,101 +29,102 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  * {@link java.util.regex.Pattern regular expression}
  * and defaults to
  * <strong>^[a-z][a-zA-Z0-9]*$</strong>.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="MemberName"/&gt;
  * </pre>
  * <p>
  * An example of how to configure the check for names that begin with
  * &quot;m&quot;, followed by an upper case letter, and then letters and
  * digits is:
  * </p>
  * <pre>
  * &lt;module name="MemberName"&gt;
  *    &lt;property name="format" value="^m[A-Z][a-zA-Z0-9]*$"/&gt;
  * &lt;/module&gt;
  * </pre>
  * @author Rick Giles
  * @version 1.0
  */
 public class MemberNameCheck
     extends AbstractNameCheck
 {
     /** Should we apply check to public.*/
     private boolean mApplyToPublic = true;
     /** Should we apply check to protected.*/
     private boolean mApplyToProtected = true;
     /** Should we apply check to package.*/
     private boolean mApplyToPackage = true;
     /** Should we apply check to private.*/
     private boolean mApplyToPrivate = true;
 
     /** Creates a new <code>MemberNameCheck</code> instance. */
     public MemberNameCheck()
     {
         super("^[a-z][a-zA-Z0-9]*$");
     }
 
     /** {@inheritDoc} */
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.VARIABLE_DEF};
     }
 
     /** {@inheritDoc} */
     protected final boolean mustCheckName(DetailAST aAST)
     {
-        DetailAST modifiersAST = aAST.findFirstToken(TokenTypes.MODIFIERS);
+        final DetailAST modifiersAST =
+            aAST.findFirstToken(TokenTypes.MODIFIERS);
         final boolean isStatic = (modifiersAST != null)
             && modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);
 
         return (!isStatic && !ScopeUtils.inInterfaceOrAnnotationBlock(aAST)
             && !ScopeUtils.isLocalVariableDef(aAST))
             && (modifiersAST != null)
             && shouldCheckInScope(modifiersAST);
     }
 
     /**
      * Should we check member with given modifiers.
      * @param aModifiers modifiers of member to check.
      * @return true if we should check such member.
      */
     private boolean shouldCheckInScope(DetailAST aModifiers)
     {
         if (aModifiers == null) {
             // if there are no modifaiers it is a package-private
             return mApplyToPackage;
         }
 
         final boolean isPublic =
             aModifiers.branchContains(TokenTypes.LITERAL_PUBLIC);
         final boolean isProtected =
             aModifiers.branchContains(TokenTypes.LITERAL_PROTECTED);
         final boolean isPrivate =
             aModifiers.branchContains(TokenTypes.LITERAL_PRIVATE);
         final boolean isPackage = !(isPublic || isProtected || isPrivate);
 
         return (mApplyToPublic && isPublic)
             || (mApplyToProtected && isProtected)
             || (mApplyToPackage && isPackage) || (mApplyToPrivate && isPrivate);
     }
 
     /**
      * Sets whether we should apply the check to public members.
      * @param aApplyTo new value of the property.
      */
     public void setApplyToPublic(boolean aApplyTo)
     {
         mApplyToPublic = aApplyTo;
     }
 
     /** @return true if the check should be applied to public members.*/
     public boolean getApplyToPublic()
     {
         return mApplyToPublic;
     }
 
     /**
