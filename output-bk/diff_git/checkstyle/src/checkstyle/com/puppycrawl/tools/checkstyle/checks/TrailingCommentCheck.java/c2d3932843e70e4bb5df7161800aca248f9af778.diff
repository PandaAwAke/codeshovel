diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java
index 83946566d..0dd7826f2 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java
@@ -131,84 +131,85 @@ public class TrailingCommentCheck extends AbstractFormatCheck
     {
         super(DEFAULT_FORMAT);
     }
 
     /** {@inheritDoc} */
     public int[] getDefaultTokens()
     {
         return new int[0];
     }
 
     /** {@inheritDoc} */
     public void visitToken(DetailAST aAST)
     {
         throw new IllegalStateException("visitToken() shouldn't be called.");
     }
 
     /** {@inheritDoc} */
     public void beginTree(DetailAST aRootAST)
     {
         final Pattern blankLinePattern = getRegexp();
         final Map cppComments = getFileContents().getCppComments();
         final Map cComments = getFileContents().getCComments();
         final Set lines = new HashSet();
         lines.addAll(cppComments.keySet());
         lines.addAll(cComments.keySet());
 
         final Iterator linesIter = lines.iterator();
         while (linesIter.hasNext()) {
             final Integer lineNo = (Integer) linesIter.next();
 
             final String line = getLines()[lineNo.intValue() - 1];
             String lineBefore = "";
             TextBlock comment = null;
             if (cppComments.containsKey(lineNo)) {
                 comment = (TextBlock) cppComments.get(lineNo);
                 lineBefore = line.substring(0, comment.getStartColNo());
             }
             else if (cComments.containsKey(lineNo)) {
                 final List commentList = (List) cComments.get(lineNo);
                 comment = (TextBlock) commentList.get(commentList.size() - 1);
                 lineBefore = line.substring(0, comment.getStartColNo());
                 if (comment.getText().length == 1) {
                     final String lineAfter =
                         line.substring(comment.getEndColNo() + 1).trim();
                     if (!"".equals(lineAfter)) {
                         // do not check comment which doesn't end line
                         continue;
                     }
                 }
             }
-            if (comment != null && !blankLinePattern.matcher(lineBefore).find()
+            if ((comment != null)
+                && !blankLinePattern.matcher(lineBefore).find()
                 && !isLegalComment(comment))
             {
                 log(lineNo.intValue(), "trailing.comments");
             }
         }
     }
 
     /**
      * Checks if given comment is legal (single-line and matches to the
      * pattern).
      * @param aComment comment to check.
      * @return true if the comment if legal.
      */
     private boolean isLegalComment(final TextBlock aComment)
     {
         if (mLegalComment == null) {
             return false;
         }
         // multi-line comment can not be legal
         if (aComment.getStartLineNo() != aComment.getEndLineNo()) {
             return false;
         }
         String commentText = aComment.getText()[0];
         // remove chars which start comment
         commentText = commentText.substring(2);
         // if this is a C-style comment we need to remove its end
         if (commentText.endsWith("*/")) {
             commentText = commentText.substring(0, commentText.length() - 2);
         }
         commentText = commentText.trim();
         return mLegalComment.matcher(commentText).find();
     }
 }
