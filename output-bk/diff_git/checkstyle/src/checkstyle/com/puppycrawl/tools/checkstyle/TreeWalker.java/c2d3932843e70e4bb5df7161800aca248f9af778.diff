diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
index 0fb0d3e97..4f762ee36 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
@@ -577,61 +577,61 @@ public final class TreeWalker
         parser.setFilename(aContents.getFilename());
         parser.setASTNodeClass(DetailAST.class.getName());
         parser.compilationUnit();
 
         return (DetailAST) parser.getAST();
     }
 
     /** {@inheritDoc} */
     public void process(File[] aFiles)
     {
         final File[] javaFiles = filter(aFiles);
 
         for (int i = 0; i < javaFiles.length; i++) {
             process(javaFiles[i]);
         }
     }
 
     /**
      * @see com.puppycrawl.tools.checkstyle.api.FileSetCheck
      */
     public void destroy()
     {
         for (Iterator it = mAllChecks.iterator(); it.hasNext();) {
             final Check c = (Check) it.next();
             c.destroy();
         }
         mCache.destroy();
         super.destroy();
     }
 
     /**
      * @return true if we should use recursive algorithm
      *         for tree processing, false for iterative one.
      */
     private boolean useRecursiveAlgorithm()
     {
         return mRecursive;
     }
 
     /**
      * Processes a node calling interested checks at each node.
      * Uses iterative algorithm.
      * @param aRoot the root of tree for process
      */
     private void processIter(DetailAST aRoot)
     {
         DetailAST curNode = aRoot;
         while (curNode != null) {
             notifyVisit(curNode);
             DetailAST toVisit = (DetailAST) curNode.getFirstChild();
-            while (curNode != null && toVisit == null) {
+            while ((curNode != null) && (toVisit == null)) {
                 notifyLeave(curNode);
                 toVisit = (DetailAST) curNode.getNextSibling();
                 if (toVisit == null) {
                     curNode = curNode.getParent();
                 }
             }
             curNode = toVisit;
         }
     }
 }
