diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java
index ab667c992..883caa9b4 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java
@@ -1,104 +1,107 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2002  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle;
 
 import java.io.File;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.Locale;
 
 import com.puppycrawl.tools.checkstyle.api.AutomaticBean;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.api.Context;
 import com.puppycrawl.tools.checkstyle.api.FileSetCheck;
 import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
 import com.puppycrawl.tools.checkstyle.api.MessageDispatcher;
+import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
 
 /**
  * This class provides the functionality to check a set of files.
  * @author <a href="mailto:oliver@puppycrawl.com">Oliver Burn</a>
  * @author <a href="mailto:stephane.bailliez@wanadoo.fr">Stephane Bailliez</a>
  * @author lkuehne
  */
 public class Checker extends AutomaticBean
     implements MessageDispatcher
 {
     /**
      * An AuditListener that maintains the number of errors.
      */
     private class ErrorCounter implements AuditListener
     {
         /** keeps track of the number of errors */
         private int mCount = 0;
 
         /** @see AuditListener */
         public void addError(AuditEvent aEvt)
         {
-            mCount++;
+            if (SeverityLevel.ERROR.equals(aEvt.getSeverityLevel())) {
+                mCount++;
+            }
         }
 
         /** @see AuditListener */
         public void addException(AuditEvent aEvt, Throwable aThrowable)
         {
             mCount++;
         }
 
         /** @see AuditListener */
         public void auditStarted(AuditEvent aEvt)
         {
             mCount = 0;
         }
 
         /** @see AuditListener */
         public void fileStarted(AuditEvent aEvt)
         {
         }
 
         /** @see AuditListener */
         public void auditFinished(AuditEvent aEvt)
         {
         }
 
         /** @see AuditListener */
         public void fileFinished(AuditEvent aEvt)
         {
         }
 
         /**
          * @return the number of errors since audit started.
          */
         private int getCount()
         {
             return mCount;
         }
     }
 
     /** maintains error count */
     private final ErrorCounter mCounter = new ErrorCounter();
 
     /** vector of listeners */
     private final ArrayList mListeners = new ArrayList();
 
     /** vector of fileset checks */
     private final ArrayList mFileSetChecks = new ArrayList();
 
     /** class loader to resolve classes with. **/
     private ClassLoader mLoader =
             Thread.currentThread().getContextClassLoader();
