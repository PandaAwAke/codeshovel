diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java
index 60e56172e..772402ce5 100755
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java
@@ -111,113 +111,113 @@ public class DeclarationOrderCheck extends Check
         ScopeState state;
 
         switch(aAST.getType()) {
         case TokenTypes.OBJBLOCK:
             mScopeStates.push(new ScopeState());
             break;
 
         case TokenTypes.CTOR_DEF:
             if (parentType != TokenTypes.OBJBLOCK) {
                 return;
             }
 
             state = mScopeStates.peek();
             if (state.mScopeState > STATE_CTOR_DEF) {
                 if (!mIgnoreConstructors) {
                     log(aAST, "declaration.order.constructor");
                 }
             }
             else {
                 state.mScopeState = STATE_CTOR_DEF;
             }
             break;
 
         case TokenTypes.METHOD_DEF:
             state = mScopeStates.peek();
             if (parentType != TokenTypes.OBJBLOCK) {
                 return;
             }
 
             if (state.mScopeState > STATE_METHOD_DEF) {
                 if (!mIgnoreMethods) {
                     log(aAST, "declaration.order.method");
                 }
             }
             else {
                 state.mScopeState = STATE_METHOD_DEF;
             }
             break;
 
         case TokenTypes.MODIFIERS:
             if ((parentType != TokenTypes.VARIABLE_DEF)
                 || (aAST.getParent().getParent().getType()
                     != TokenTypes.OBJBLOCK))
             {
                 return;
             }
 
             state = mScopeStates.peek();
             if (aAST.findFirstToken(TokenTypes.LITERAL_STATIC) != null) {
                 if (state.mScopeState > STATE_STATIC_VARIABLE_DEF) {
-                    if (!mIgnoreModifiers) {
+                    if (!mIgnoreModifiers
+                        || state.mScopeState > STATE_INSTANCE_VARIABLE_DEF)
+                    {
                         log(aAST, "declaration.order.static");
                     }
                 }
                 else {
                     state.mScopeState = STATE_STATIC_VARIABLE_DEF;
                 }
             }
             else {
                 if (state.mScopeState > STATE_INSTANCE_VARIABLE_DEF) {
-                    if (!mIgnoreModifiers) {
-                        log(aAST, "declaration.order.instance");
-                    }
+                    log(aAST, "declaration.order.instance");
                 }
                 else if (state.mScopeState == STATE_STATIC_VARIABLE_DEF) {
                     state.mDeclarationAccess = Scope.PUBLIC;
                     state.mScopeState = STATE_INSTANCE_VARIABLE_DEF;
                 }
             }
 
             final Scope access = ScopeUtils.getScopeFromMods(aAST);
             if (state.mDeclarationAccess.compareTo(access) > 0) {
                 if (!mIgnoreModifiers) {
                     log(aAST, "declaration.order.access");
                 }
             }
             else {
                 state.mDeclarationAccess = access;
             }
             break;
 
         default:
         }
     }
 
     @Override
     public void leaveToken(DetailAST aAST)
     {
         switch(aAST.getType()) {
         case TokenTypes.OBJBLOCK:
             mScopeStates.pop();
             break;
 
         default:
         }
     }
 
     /**
      * Sets whether to ignore constructors.
      * @param aIgnoreConstructors whether to ignore constructors.
      */
     public void setIgnoreConstructors(boolean aIgnoreConstructors)
     {
         mIgnoreConstructors = aIgnoreConstructors;
     }
 
     /**
      * Sets whether to ignore methods.
      * @param aIgnoreMethods whether to ignore methods.
      */
     public void setIgnoreMethods(boolean aIgnoreMethods)
     {
         mIgnoreMethods = aIgnoreMethods;
