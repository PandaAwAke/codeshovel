diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java
index 5d7f78a1b..4e2c50791 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java
@@ -16,112 +16,112 @@
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.coding;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.ScopeUtils;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 import com.puppycrawl.tools.checkstyle.checks.CheckUtils;
 
 import java.util.Arrays;
 
 /**
  * <p>
  * Checks for magic numbers.
  * </p>
  * <p>
  * An example of how to configure the check to ignore
  * numbers 0, 1, 1.5, 2:
  * </p>
  * <pre>
  * &lt;module name="MagicNumber"&gt;
  *    &lt;property name="ignoreNumbers" value="0, 1, 1.5, 2"/&gt;
  * &lt;/module&gt;
  * </pre>
  * @author Rick Giles
  */
 public class MagicNumberCheck extends Check
 {
     /** the numbers to ignore in the check, sorted */
     private double[] mIgnoreNumbers = {-1, 0, 1, 2};
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.NUM_DOUBLE,
             TokenTypes.NUM_FLOAT,
             TokenTypes.NUM_INT,
             TokenTypes.NUM_LONG,
         };
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void visitToken(DetailAST aAST)
     {
         if (!inIgnoreList(aAST) && !isConstantDefinition(aAST)) {
             String text = aAST.getText();
-            int columnNo = aAST.getColumnNo();
             final DetailAST parent = aAST.getParent();
+            DetailAST reportAST = aAST;
             if (parent.getType() == TokenTypes.UNARY_MINUS) {
-                columnNo--;
+                reportAST = parent;
                 text = "-" + text;
             }
             else if (parent.getType() == TokenTypes.UNARY_PLUS) {
-                columnNo--;
+                reportAST = parent;
                 text = "+" + text;
             }
-            log(aAST.getLineNo(),
-                columnNo,
+            log(reportAST.getLineNo(),
+                reportAST.getColumnNo(),
                 "magic.number",
                 text);
         }
     }
 
     /**
      * Decides whether the number of an AST is in the ignore list of this
      * check.
      * @param aAST the AST to check
      * @return true if the number of aAST is in the ignore list of this
      * check.
      */
     private boolean inIgnoreList(DetailAST aAST)
     {
         double value = CheckUtils.parseDouble(aAST.getText(), aAST.getType());
         final DetailAST parent = aAST.getParent();
         if (parent.getType() == TokenTypes.UNARY_MINUS) {
             value = -1 * value;
         }
         return (Arrays.binarySearch(mIgnoreNumbers, value) >= 0);
     }
 
     /**
      * Decides whether the number of an AST is the RHS of a constant
      * definition.
      * @param aAST the AST to check.
      * @return true if the number of aAST is the RHS of a constant definition.
      */
     private boolean isConstantDefinition(DetailAST aAST)
     {
         if (ScopeUtils.inInterfaceBlock(aAST)) {
             return true;
         }
         DetailAST parent = aAST.getParent();
 
         if (parent == null) {
             return false;
         }
 
         //skip TYPECAST, UNARY_MINUS, UNARY_PLUS
         while ((parent.getType() == TokenTypes.UNARY_MINUS)
             || (parent.getType() == TokenTypes.UNARY_PLUS)
             || (parent.getType() == TokenTypes.TYPECAST))
         {
             parent = parent.getParent();
         }
 
         //expression?
         if ((parent == null) || (parent.getType() != TokenTypes.EXPR)) {
             return false;
