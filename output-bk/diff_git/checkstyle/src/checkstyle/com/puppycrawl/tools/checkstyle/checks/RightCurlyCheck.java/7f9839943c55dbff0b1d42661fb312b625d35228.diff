diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/RightCurlyCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/RightCurlyCheck.java
index cae385fc7..0980329ba 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/RightCurlyCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/RightCurlyCheck.java
@@ -45,67 +45,76 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  * <pre>
  * &lt;module name="RightCurly"&gt;
  *     &lt;property name="tokens" value="LITERAL_ELSE"/&gt;
  *     &lt;property name="option" value="alone"/&gt;
  * &lt;/module&gt;
  * </pre> 
  * @author <a href="mailto:checkstyle@puppycrawl.com">Oliver Burn</a>
  * @author lkuehne
  * @version 1.0
  */
 public class RightCurlyCheck
     extends AbstractOptionCheck
 {
     /**
      * Sets the right curly option to same.
      */  
     public RightCurlyCheck()
     {
         super(RightCurlyOption.SAME);
     }
     
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.LITERAL_TRY,
                           TokenTypes.LITERAL_CATCH,
                           TokenTypes.LITERAL_ELSE};
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void visitToken(DetailAST aAST)
     {
         // Attempt to locate the tokens to do the check
         DetailAST rcurly = null;
         DetailAST nextToken = null;
         if (aAST.getType() == TokenTypes.LITERAL_ELSE) {
             nextToken = aAST;
             final DetailAST thenAST = aAST.getPreviousSibling();
             rcurly = thenAST.getLastChild();
         }
         else if (aAST.getType() == TokenTypes.LITERAL_CATCH) {
             nextToken = (DetailAST) aAST.getNextSibling();
             rcurly = aAST.getLastChild().getLastChild();
         }
         else if (aAST.getType() == TokenTypes.LITERAL_TRY) {
             DetailAST firstChild = (DetailAST) aAST.getFirstChild();
             nextToken = (DetailAST) firstChild.getNextSibling();
             rcurly = firstChild.getLastChild();
         }
 
+        // handle if-then-else without curlies:
+        // if (cond)
+        //     return 1;
+        // else
+        //     return 2;
+        if (rcurly == null || rcurly.getType() != TokenTypes.RCURLY) {
+            return;
+        }
+
         // If have both tokens, perform the check
-        if ((rcurly != null) && (nextToken != null)) {
+        if (nextToken != null) {
             if ((getAbstractOption() == RightCurlyOption.SAME)
                 && (rcurly.getLineNo() != nextToken.getLineNo()))
             {
                 log(rcurly.getLineNo(), rcurly.getColumnNo(),
                     "line.same", "}");
             }
             else if ((getAbstractOption() == RightCurlyOption.ALONE)
                        && (rcurly.getLineNo() == nextToken.getLineNo()))
             {
                 log(rcurly.getLineNo(), rcurly.getColumnNo(),
                     "line.alone", "}");
             }
         }
     }
 }
