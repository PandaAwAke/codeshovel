diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/HeaderCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/HeaderCheck.java
index 462bab06c..4ea1f6446 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/HeaderCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/HeaderCheck.java
@@ -45,107 +45,107 @@ public class HeaderCheck extends Check
 
     /** the lines of the header file */
     private String[] mHeaderLines = null;
 
     /** the header lines to ignore in the check, sorted */
     private int[] mIgnoreLines = EMPTY_INT_ARRAY;
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public int[] getDefaultTokens()
     {
         return new int[0];
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void beginTree()
     {
         if (mHeaderLines != null) {
 
             final String[] lines = getLines();
 
             if (mHeaderLines.length > lines.length) {
                 log(1, "header.missing");
             }
             else {
                 for (int i = 0; i < mHeaderLines.length; i++) {
                     // skip lines we are meant to ignore
                     if (isIgnoreLine(i + 1)) {
                         continue;
                     }
 
                     if (!isMatch(i)) {
                         log(i + 1, "header.mismatch", mHeaderLines[i]);
                         break; // stop checking
                     }
                 }
             }
         }
     }
 
     /**
      * @param aLineNo a line number
      * @return if <code>aLineNo</code> is one of the ignored header lines.
      */
     private boolean isIgnoreLine(int aLineNo)
     {
         return (Arrays.binarySearch(mIgnoreLines, aLineNo) >= 0);
     }
 
     /**
      * Checks if a code line matches the required header line.
-     * @param lineNumber the linenumber to check against the header
+     * @param aLineNumber the linenumber to check against the header
      * @return true if and only if the line matches the required header line
      */
-    protected boolean isMatch(int lineNumber)
+    protected boolean isMatch(int aLineNumber)
     {
         final String[] lines = getLines();
-        return mHeaderLines[lineNumber].equals(lines[lineNumber]);
+        return mHeaderLines[aLineNumber].equals(lines[aLineNumber]);
     }
 
     /**
      * Set the header file to check against.
      * @param aFileName the file that contains the header to check against.
      * @throws org.apache.commons.beanutils.ConversionException if
      * the file cannot be loaded
      */
     public void setHeaderFile(String aFileName)
     {
         // Handle empty param
         if ((aFileName == null) || (aFileName.trim().length() == 0)) {
             return;
         }
 
         // load the file
         try {
             final LineNumberReader lnr =
                     new LineNumberReader(new FileReader(aFileName));
             final ArrayList lines = new ArrayList();
             while (true) {
                 final String l = lnr.readLine();
                 if (l == null) {
                     break;
                 }
                 lines.add(l);
             }
             mHeaderLines = (String[]) lines.toArray(new String[0]);
         }
         catch (IOException ex) {
             throw new ConversionException(
                     "unable to load header file " + aFileName, ex);
         }
 
     }
 
     /**
      * Set the lines numbers to ignore in the header check.
      * @param aList comma separated list of line numbers to ignore in header.
      */
     public void setIgnoreLines(int[] aList)
     {
         if (aList == null || aList.length == 0) {
             mIgnoreLines = EMPTY_INT_ARRAY;
             return;
         }
 
         mIgnoreLines = new int[aList.length];
         System.arraycopy(aList, 0, mIgnoreLines, 0, aList.length);
         Arrays.sort(mIgnoreLines);
