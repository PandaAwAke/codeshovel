diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java
index 6da04f181..2a0c4ae31 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java
@@ -39,87 +39,86 @@ public final class Main
     {
         if (aArgs.length == 0) {
             usage();
         }
 
         // be brain dead about arguments parsing
         String format = "plain";
         String output = null;
         String[] files = null;
         for (int i = 0; i < aArgs.length; i++) {
             if ("-f".equals(aArgs[i])) {
                 format = aArgs[++i];
             }
             else if ("-o".equals(aArgs[i])) {
                 output = aArgs[++i];
             }
             else {
                 files = new String[aArgs.length - i];
                 System.arraycopy(aArgs, i, files, 0, files.length);
                 break;
             }
         }
 
         // create the appropriate listener
         OutputStream out = System.out;
         if (output != null) {
             try {
                 out = new FileOutputStream(output);
             }
             catch (FileNotFoundException e) {
                 System.out.println("Could not find file: '" + output + "'");
                 System.exit(1);
             }
         }
         AuditListener listener = null;
         if ("xml".equals(format)) {
             listener = new XMLLogger(out);
         }
         else if ("plain".equals(format)) {
             listener = new DefaultLogger(out);
         }
         else {
             System.out.println("Invalid format: (" + format +
                                "). Must be 'plain' or 'xml'.");
             usage();
         }
 
         Checker c = null;
         try {
             c = new Checker(new Configuration(System.getProperties(),
-                                              System.out),
-                            System.out);
+                                              System.out));
             c.addListener(listener);
         }
         catch (RESyntaxException rese) {
             System.out.println("Unable to create an regexp object: " +
                                rese.getMessage());
             rese.printStackTrace(System.out);
             System.exit(1);
         }
         catch (IOException ex) {
             System.out.println("I/O error occurred: " + ex.getMessage());
             ex.printStackTrace(System.out);
             System.exit(1);
         }
 
         final int numErrs = c.process(files);
 
         c.destroy();
         System.exit(numErrs);
     }
 
     /** Prints the usage information. **/
     private static void usage()
     {
         System.out.println(
             "Usage: java " +
             Main.class.getName() + " <options> <file1> <file2>......");
         System.out.println("Options");
         System.out.println(
             "\t-f <format>\tsets output format. (plain|xml). " +
             "Default to plain.");
         System.out.println("\t-o <file>\tsets output file name. " +
                            "Defaults to stdout");
         System.exit(1);
     }
 }
