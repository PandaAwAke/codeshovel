diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
index 68bab7319..c241432d5 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
@@ -1,122 +1,118 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2008  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.api;
 
 
 import java.io.File;
 import java.io.UnsupportedEncodingException;
+import java.nio.charset.Charset;
 import java.util.List;
 
 /**
  * Provides common functionality for many FileSetChecks.
  *
  * @author lkuehne
  */
 public abstract class AbstractFileSetCheck
     extends AbstractViolationReporter
     implements FileSetCheck
 {
     /** The dispatcher errors are fired to. */
     private MessageDispatcher mDispatcher;
 
     /** the file extensions that are accepted by this filter */
     private String[] mFileExtensions = {};
 
     /** collects the error messages */
     private final LocalizedMessages mMessages = new LocalizedMessages();
 
     /** Name of a charset */
     private String mCharset = System.getProperty("file.encoding", "UTF-8");
 
     /** @see com.puppycrawl.tools.checkstyle.api.FileSetCheck */
     public void destroy()
     {
     }
 
     /** @return the name of the charset */
     public String getCharset()
     {
         return mCharset;
     }
 
     /**
      * Sets a named charset.
      * @param aCharset the name of a charset
      * @throws UnsupportedEncodingException if aCharset is unsupported.
      */
     public void setCharset(String aCharset)
         throws UnsupportedEncodingException
     {
-        // TODO: This is a hack to check that aCharset is supported.
-        // TODO: Find a better way in Java 1.3
-        try {
-            new String(new byte[] {}, aCharset);
-        }
-        catch (final UnsupportedEncodingException es) {
-            final String message = "unsupported charset: " + es.getMessage();
+        if (!Charset.isSupported(aCharset)) {
+            final String message = "unsupported charset: '" + aCharset + "'";
             throw new UnsupportedEncodingException(message);
         }
         mCharset = aCharset;
     }
 
     /** {@inheritDoc} */
     public final void setMessageDispatcher(MessageDispatcher aDispatcher)
     {
         mDispatcher = aDispatcher;
     }
 
     /**
      * A message dispatcher is used to fire violation messages to
      * interested audit listeners.
      *
      * @return the current MessageDispatcher.
      */
     protected final MessageDispatcher getMessageDispatcher()
     {
         return mDispatcher;
     }
 
     /**
      * Determines the set of files this FileSetCheck is interested in.
      * Returns the files that have one of the currently active file extensions.
      * If no file extensions are active the argument array is returned.
      *
      * <p>
      * This method can be used in the implementation of <code>process()</code>
      * to filter it's argument list for interesting files.
      * </p>
      *
      * @param aFiles the candidates for processing
      * @return the subset of aFiles that this FileSetCheck should process
      * @see FileSetCheck#process
      */
     protected final List<File> filter(List<File> aFiles)
     {
         return Utils.filterFilesByExtension(aFiles, mFileExtensions);
     }
 
     /**
      * Sets the file extensions that identify the files that pass the
      * filter of this FileSetCheck.
      * @param aExtensions the set of file extensions. A missing
      * initial '.' character of an extension is automatically added.
      */
     public final void setFileExtensions(String[] aExtensions)
     {
         if (aExtensions == null) {
