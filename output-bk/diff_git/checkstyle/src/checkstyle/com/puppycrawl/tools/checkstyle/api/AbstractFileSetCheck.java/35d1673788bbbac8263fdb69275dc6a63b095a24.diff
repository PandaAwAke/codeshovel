diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
index b4ead74d8..e97b393f7 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
@@ -21,101 +21,101 @@ package com.puppycrawl.tools.checkstyle.api;
 
 import java.io.File;
 import java.io.UnsupportedEncodingException;
 import java.util.ArrayList;
 
 /**
  * Provides common functionality for many FileSetChecks.
  *
  * @author lkuehne
  */
 public abstract class AbstractFileSetCheck
     extends AbstractViolationReporter
     implements FileSetCheck
 {
     /** The dispatcher errors are fired to. */
     private MessageDispatcher mDispatcher;
 
     /** the file extensions that are accepted by this filter */
     private String[] mFileExtensions = {};
 
     /** collects the error messages */
     private final LocalizedMessages mMessages = new LocalizedMessages();
 
     /** Name of a charset */
     private String mCharset = System.getProperty("file.encoding", "UTF-8");
 
     /** @see com.puppycrawl.tools.checkstyle.api.FileSetCheck */
     public void destroy()
     {
     }
 
     /** @return the name of the charset */
     public String getCharset()
     {
         return mCharset;
     }
 
     /**
      * Sets a named charset.
      * @param aCharset the name of a charset
      * @throws UnsupportedEncodingException if aCharset is unsupported.
      */
     public void setCharset(String aCharset)
         throws UnsupportedEncodingException
     {
         // TODO: This is a hack to check that aCharset is supported.
         // TODO: Find a better way in Java 1.3
         try {
             new String(new byte[] {}, aCharset);
         }
-        catch (UnsupportedEncodingException es) {
+        catch (final UnsupportedEncodingException es) {
             final String message = "unsupported charset: " + es.getMessage();
             throw new UnsupportedEncodingException(message);
         }
         mCharset = aCharset;
     }
 
     /** {@inheritDoc} */
     public final void setMessageDispatcher(MessageDispatcher aDispatcher)
     {
         mDispatcher = aDispatcher;
     }
 
     /**
      * A message dispatcher is used to fire violation messages to
      * interested audit listeners.
      *
      * @return the current MessageDispatcher.
      */
     protected final MessageDispatcher getMessageDispatcher()
     {
         return mDispatcher;
     }
 
     /**
      * Determines the set of files this FileSetCheck is interested in.
      * Returns the files that have one of the currently active file extensions.
      * If no file extensions are active the argument array is returned.
      *
      * <p>
      * This method can be used in the implementation of <code>process()</code>
      * to filter it's argument list for interesting files.
      * </p>
      *
      * @param aFiles the candidates for processing
      * @return the subset of aFiles that this FileSetCheck should process
      * @see FileSetCheck#process
      */
     protected final File[] filter(File[] aFiles)
     {
         if ((mFileExtensions == null) || (mFileExtensions.length == 0)) {
             return aFiles;
         }
 
         final ArrayList files = new ArrayList(aFiles.length);
         for (int i = 0; i < aFiles.length; i++) {
             final File f = aFiles[i];
             final String fileName = f.getName();
             for (int j = 0; j < mFileExtensions.length; j++) {
                 final String fileExtension = mFileExtensions[j];
                 if (fileName.endsWith(fileExtension)) {
