diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java
index 166fac74f..f4402b919 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java
@@ -286,101 +286,101 @@ public class HiddenFieldCheck
      * @param aAST the AST to check.
      * @return true if aAST should be ignored because check property
      * ignoreConstructorParameter is true and aAST is a constructor parameter.
      */
     private boolean isIgnoredConstructorParam(DetailAST aAST)
     {
         if ((aAST.getType() != TokenTypes.PARAMETER_DEF)
             || !mIgnoreConstructorParameter)
         {
             return false;
         }
         final DetailAST parametersAST = aAST.getParent();
         final DetailAST constructorAST = parametersAST.getParent();
         return (constructorAST.getType() == TokenTypes.CTOR_DEF);
     }
 
     /**
      * Decides whether to ignore an AST node that is the parameter of an
      * abstract method.
      * @param aAST the AST to check.
      * @return true if aAST should be ignored because check property
      * ignoreAbstactMethods is true and aAST is a parameter of abstract
      * methods.
      */
     private boolean isIgnoredParamOfAbstractMethod(DetailAST aAST)
     {
         if ((aAST.getType() != TokenTypes.PARAMETER_DEF)
             || !mIgnoreAbstractMethods)
         {
             return false;
         }
         final DetailAST method = aAST.getParent().getParent();
         if (method.getType() != TokenTypes.METHOD_DEF) {
             return false;
         }
         final DetailAST mods = method.findFirstToken(TokenTypes.MODIFIERS);
         return ((mods != null) && mods.branchContains(TokenTypes.ABSTRACT));
     }
 
     /**
      * Set the ignore format to the specified regular expression.
      * @param aFormat a <code>String</code> value
      * @throws ConversionException unable to parse aFormat
      */
     public void setIgnoreFormat(String aFormat)
         throws ConversionException
     {
         try {
             mRegexp = Utils.getPattern(aFormat);
         }
-        catch (PatternSyntaxException e) {
+        catch (final PatternSyntaxException e) {
             throw new ConversionException("unable to parse " + aFormat, e);
         }
     }
 
     /**
      * Set whether to ignore the parameter of a property setter method.
      * @param aIgnoreSetter decide whether to ignore the parameter of
      * a property setter method.
      */
     public void setIgnoreSetter(boolean aIgnoreSetter)
     {
         mIgnoreSetter = aIgnoreSetter;
     }
 
     /**
      * Set whether to ignore constructor parameters.
      * @param aIgnoreConstructorParameter decide whether to ignore
      * constructor parameters.
      */
     public void setIgnoreConstructorParameter(
         boolean aIgnoreConstructorParameter)
     {
         mIgnoreConstructorParameter = aIgnoreConstructorParameter;
     }
 
     /**
      * Set whether to ignore parameters of abstract methods.
      * @param aIgnoreAbstractMethods decide whether to ignore
      * parameters of abstract methods.
      */
     public void setIgnoreAbstractMethods(
         boolean aIgnoreAbstractMethods)
     {
         mIgnoreAbstractMethods = aIgnoreAbstractMethods;
     }
 
     /** @return the regexp to match against */
     public Pattern getRegexp()
     {
         return mRegexp;
     }
 
     /**
      * Holds the names of static and instance fields of a type.
      * @author Rick Giles
      * Describe class FieldFrame
      * @author Rick Giles
      * @version Oct 26, 2003
      */
     private static class FieldFrame
