diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java
index b8872c097..a633b9eba 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java
@@ -66,58 +66,58 @@ public class IllegalImportCheck
 
     /**
      * Creates a new <code>IllegalImportCheck</code> instance.
      */
     public IllegalImportCheck()
     {
         setIllegalPkgs(new String[] {"sun"});
     }
 
     /**
      * Set the list of illegal packages.
      * @param aFrom array of illegal packages
      */
     public void setIllegalPkgs(String[] aFrom)
     {
         mIllegalPkgs = aFrom;
     }
 
     /** {@inheritDoc} */
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};
     }
 
     /** {@inheritDoc} */
     public void visitToken(DetailAST aAST)
     {
         final FullIdent imp;
         if (aAST.getType() == TokenTypes.IMPORT) {
             imp = FullIdent.createFullIdentBelow(aAST);
         }
         else {
             imp = FullIdent.createFullIdent(
                 (DetailAST) aAST.getFirstChild().getNextSibling());
         }
         if (isIllegalImport(imp.getText())) {
             log(aAST.getLineNo(),
                 aAST.getColumnNo(),
                 "import.illegal",
                 imp.getText());
         }
     }
 
     /**
      * Checks if an import is from a package that must not be used.
      * @param aImportText the argument of the import keyword
      * @return if <code>aImportText</code> contains an illegal package prefix
      */
     private boolean isIllegalImport(String aImportText)
     {
-        for (int i = 0; i < mIllegalPkgs.length; i++) {
-            if (aImportText.startsWith(mIllegalPkgs[i] + ".")) {
+        for (String element : mIllegalPkgs) {
+            if (aImportText.startsWith(element + ".")) {
                 return true;
             }
         }
         return false;
     }
 }
