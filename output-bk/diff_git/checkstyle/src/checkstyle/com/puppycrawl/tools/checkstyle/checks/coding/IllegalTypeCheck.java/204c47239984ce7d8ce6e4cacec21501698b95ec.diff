diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java
index 8673e04bc..40e6696db 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java
@@ -174,63 +174,63 @@ public final class IllegalTypeCheck extends AbstractFormatCheck
     {
         return mIllegalClassNames.contains(aClassName)
             || getRegexp().match(aClassName);
     }
 
     /**
      * @param aAST method def to check.
      * @return true if we should check this method.
      */
     private boolean isCheckedMethod(DetailAST aAST)
     {
         String methodName = aAST.findFirstToken(TokenTypes.IDENT).getText();
         return !mIgnoredMethodNames.contains(methodName);
     }
 
     /**
      * Set the list of illegal variable types.
      * @param aClassNames array of illegal variable types
      */
     public void setIllegalClassNames(String[] aClassNames)
     {
         mIllegalClassNames.clear();
         for (int i = 0; i < aClassNames.length; i++) {
             String name = aClassNames[i];
             mIllegalClassNames.add(name);
             int lastDot = name.lastIndexOf(".");
             if (lastDot > 0 && lastDot < (name.length() - 1)) {
                 String shortName = name.substring(name.lastIndexOf(".") + 1);
                 mIllegalClassNames.add(shortName);
             }
         }
     }
 
     /**
      * Set the list of illegal variable types.
      * @return array of illegal variable types
      */
     public String[] getIllegalClassNames()
     {
         return (String[]) mIllegalClassNames.toArray(new String[0]);
     }
 
     /**
      * Set the list of ignore method names.
      * @param aMethodNames array of ignored method names
      */
     public void setIgnoredMethodNames(String[] aMethodNames)
     {
         mIgnoredMethodNames.clear();
         for (int i = 0; i < aMethodNames.length; i++) {
-            mIllegalClassNames.add(aMethodNames[i]);
+            mIgnoredMethodNames.add(aMethodNames[i]);
         }
     }
 
     /**
      * Set the list of ignored method names.
      * @return array of ignored method names
      */
     public String[] getIgnoredMethodNames()
     {
         return (String[]) mIgnoredMethodNames.toArray(new String[0]);
     }
 }
