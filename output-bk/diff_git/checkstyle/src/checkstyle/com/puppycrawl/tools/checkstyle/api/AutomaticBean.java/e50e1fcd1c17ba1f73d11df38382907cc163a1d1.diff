diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
index 1fd1bc9ca..ee71f74a3 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
@@ -104,174 +104,171 @@ public class AutomaticBean
         cub.register(new FloatArrayConverter(), floatArray.getClass());
         cub.register(new IntegerConverter(), Integer.TYPE);
         cub.register(new IntegerConverter(), Integer.class);
         cub.register(new IntegerArrayConverter(), intArray.getClass());
         cub.register(new LongConverter(), Long.TYPE);
         cub.register(new LongConverter(), Long.class);
         cub.register(new LongArrayConverter(), longArray.getClass());
         cub.register(new ShortConverter(), Short.TYPE);
         cub.register(new ShortConverter(), Short.class);
         cub.register(new ShortArrayConverter(), shortArray.getClass());
         // TODO: investigate:
         // StringArrayConverter doesn't properly convert an array of tokens with
         // elements containing an underscore, "_".
         // Hacked a replacement class :(
         //        cub.register(new StringArrayConverter(),
         //                        String[].class);
         cub.register(new StrArrayConverter(), String[].class);
         cub.register(new IntegerArrayConverter(), Integer[].class);
 
         // BigDecimal, BigInteger, Class, Date, String, Time, TimeStamp
         // do not use defaults in the default configuration of ConvertUtilsBean
 
         return new BeanUtilsBean(cub, new PropertyUtilsBean());
     }
 
     /**
      * Implements the Configurable interface using bean introspection.
      *
      * Subclasses are allowed to add behaviour. After the bean
      * based setup has completed first the method
      * {@link #finishLocalSetup finishLocalSetup}
      * is called to allow completion of the bean's local setup,
      * after that the method {@link #setupChild setupChild}
      * is called for each {@link Configuration#getChildren child Configuration}
      * of <code>aConfiguration</code>.
      *
      * @param aConfiguration {@inheritDoc}
      * @throws CheckstyleException {@inheritDoc}
      * @see Configurable
      */
     public final void configure(Configuration aConfiguration)
         throws CheckstyleException
     {
         mConfiguration = aConfiguration;
 
         final BeanUtilsBean beanUtils = createBeanUtilsBean();
 
         // TODO: debug log messages
         final String[] attributes = aConfiguration.getAttributeNames();
 
-        for (int i = 0; i < attributes.length; i++) {
-            final String key = attributes[i];
+        for (final String key : attributes) {
             final String value = aConfiguration.getAttribute(key);
 
             try {
                 // BeanUtilsBean.copyProperties silently ignores missing setters
                 // for key, so we have to go through great lengths here to
                 // figure out if the bean property really exists.
                 final PropertyDescriptor pd =
                     PropertyUtils.getPropertyDescriptor(this, key);
                 if ((pd == null) || (pd.getWriteMethod() == null)) {
                     throw new CheckstyleException(
                         "Property '" + key + "' in module "
                         + aConfiguration.getName()
                         + " does not exist, please check the documentation");
                 }
 
                 // finally we can set the bean property
                 beanUtils.copyProperty(this, key, value);
             }
             catch (final InvocationTargetException e) {
                 throw new CheckstyleException(
                     "Cannot set property '" + key + "' in module "
                     + aConfiguration.getName() + " to '" + value
                     + "': " + e.getTargetException().getMessage(), e);
             }
             catch (final IllegalAccessException e) {
                 throw new CheckstyleException(
                     "cannot access " + key + " in "
                     + this.getClass().getName(), e);
             }
             catch (final NoSuchMethodException e) {
                 throw new CheckstyleException(
                     "cannot access " + key + " in "
                     + this.getClass().getName(), e);
             }
             catch (final IllegalArgumentException e) {
                 throw new CheckstyleException(
                     "illegal value '" + value + "' for property '" + key
                     + "' of module " + aConfiguration.getName(), e);
             }
             catch (final ConversionException e) {
                 throw new CheckstyleException(
                     "illegal value '" + value + "' for property '" + key
                     + "' of module " + aConfiguration.getName(), e);
             }
 
         }
 
         finishLocalSetup();
 
         final Configuration[] childConfigs = aConfiguration.getChildren();
-        for (int i = 0; i < childConfigs.length; i++) {
-            final Configuration childConfig = childConfigs[i];
+        for (final Configuration childConfig : childConfigs) {
             setupChild(childConfig);
         }
     }
 
     /**
      * Implements the Contextualizable interface using bean introspection.
      * @param aContext {@inheritDoc}
      * @throws CheckstyleException {@inheritDoc}
      * @see Contextualizable
      */
     public final void contextualize(Context aContext)
         throws CheckstyleException
     {
         final BeanUtilsBean beanUtils = createBeanUtilsBean();
 
         // TODO: debug log messages
         final String[] attributes = aContext.getAttributeNames();
 
-        for (int i = 0; i < attributes.length; i++) {
-            final String key = attributes[i];
+        for (final String key : attributes) {
             final Object value = aContext.get(key);
 
             try {
                 beanUtils.copyProperty(this, key, value);
             }
             catch (final InvocationTargetException e) {
                 // TODO: log.debug("The bean " + this.getClass()
                 // + " is not interested in " + value)
                 throw new CheckstyleException("cannot set property "
                     + key + " to value " + value + " in bean "
                     + this.getClass().getName(), e);
             }
             catch (final IllegalAccessException e) {
                 throw new CheckstyleException(
                     "cannot access " + key + " in "
                     + this.getClass().getName(), e);
             }
             catch (final IllegalArgumentException e) {
                 throw new CheckstyleException(
                     "illegal value '" + value + "' for property '" + key
                     + "' of bean " + this.getClass().getName(), e);
             }
             catch (final ConversionException e) {
                 throw new CheckstyleException(
                     "illegal value '" + value + "' for property '" + key
                     + "' of bean " + this.getClass().getName(), e);
             }
         }
     }
 
     /**
      * Returns the configuration that was used to configure this component.
      * @return the configuration that was used to configure this component.
      */
     protected final Configuration getConfiguration()
     {
         return mConfiguration;
     }
 
     /**
      * Provides a hook to finish the part of this compoent's setup that
      * was not handled by the bean introspection.
      * <p>
      * The default implementation does nothing.
      * </p>
      * @throws CheckstyleException if there is a configuration error.
      */
     protected void finishLocalSetup() throws CheckstyleException
     {
     }
