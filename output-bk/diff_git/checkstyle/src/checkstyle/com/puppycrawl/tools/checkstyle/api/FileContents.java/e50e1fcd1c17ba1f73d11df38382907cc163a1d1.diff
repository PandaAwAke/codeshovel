diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java
index 1a2c05907..58ca922d3 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java
@@ -1,82 +1,79 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2007  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.api;
 
+import com.puppycrawl.tools.checkstyle.grammars.CommentListener;
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.HashMap;
-import java.util.Collection;
-import java.util.Iterator;
-
 import java.util.regex.Pattern;
 
-import com.puppycrawl.tools.checkstyle.grammars.CommentListener;
-
 /**
  * Represents the contents of a file.
  *
  * @author Oliver Burn
  * @version 1.0
  */
 public final class FileContents implements CommentListener
 {
     /**
      * the pattern to match a single line comment containing only the comment
      * itself -- no code.
      */
     private static final String MATCH_SINGLELINE_COMMENT_PAT = "^\\s*//.*$";
     /** compiled regexp to match a single-line comment line */
     private static final Pattern MATCH_SINGLELINE_COMMENT = Pattern
             .compile(MATCH_SINGLELINE_COMMENT_PAT);
 
     /** the file name */
     private final String mFilename;
 
     /** the lines */
     private final String[] mLines;
 
     /** map of the Javadoc comments indexed on the last line of the comment.
      * The hack is it assumes that there is only one Javadoc comment per line.
      */
     private final Map<Integer, TextBlock> mJavadocComments =
         new HashMap<Integer, TextBlock>();
     /** map of the C++ comments indexed on the first line of the comment. */
     private final Map<Integer, TextBlock> mCPlusPlusComments =
         new HashMap<Integer, TextBlock>();
 
     /**
      * map of the C comments indexed on the first line of the comment to a
      * list of comments on that line
      */
     private final Map<Integer, List<TextBlock>> mCComments =
         new HashMap<Integer, List<TextBlock>>();
 
     /**
      * Creates a new <code>FileContents</code> instance.
      *
      * @param aFilename name of the file
      * @param aLines the contents of the file
      */
     public FileContents(String aFilename, String[] aLines)
     {
         mFilename = aFilename;
         mLines = aLines;
     }
@@ -211,82 +208,77 @@ public final class FileContents implements CommentListener
         return mJavadocComments.get(new Integer(lineNo));
     }
 
     /** @return the lines in the file */
     public String[] getLines()
     {
         return mLines;
     }
 
     /** @return the name of the file */
     public String getFilename()
     {
         return mFilename;
     }
 
     /**
      * Checks if the specified line is blank.
      * @param aLineNo the line number to check
      * @return if the specified line consists only of tabs and spaces.
      **/
     public boolean lineIsBlank(int aLineNo)
     {
         // possible improvement: avoid garbage creation in trim()
         return "".equals(mLines[aLineNo].trim());
     }
 
     /**
      * Checks if the specified line is a single-line comment without code.
      * @param aLineNo  the line number to check
      * @return if the specified line consists of only a single line comment
      *         without code.
      **/
     public boolean lineIsComment(int aLineNo)
     {
         return MATCH_SINGLELINE_COMMENT.matcher(mLines[aLineNo]).matches();
     }
 
     /**
      * Checks if the specified position intersects with a comment.
      * @param aStartLineNo the starting line number
      * @param aStartColNo the starting column number
      * @param aEndLineNo the ending line number
      * @param aEndColNo the ending column number
      * @return true if the positions intersects with a comment.
      **/
     public boolean hasIntersectionWithComment(int aStartLineNo,
             int aStartColNo, int aEndLineNo, int aEndColNo)
     {
         // Check C comments (all comments should be checked)
         final Collection<List<TextBlock>> values = mCComments.values();
-
-        final Iterator<List<TextBlock>> it = values.iterator();
-        while (it.hasNext()) {
-            final List<TextBlock> row = it.next();
-            final Iterator<TextBlock> rowIterator = row.iterator();
-            while (rowIterator.hasNext()) {
-                final TextBlock comment = rowIterator.next();
+        for (List<TextBlock> row : values) {
+            for (TextBlock comment : row) {
                 if (comment.intersects(aStartLineNo, aStartColNo, aEndLineNo,
                         aEndColNo))
                 {
                     return true;
                 }
             }
         }
 
         // Check CPP comments (line searching is possible)
         for (int lineNumber = aStartLineNo; lineNumber <= aEndLineNo;
              lineNumber++)
         {
             final TextBlock comment = mCPlusPlusComments
                     .get(new Integer(lineNumber));
             if ((comment != null)
                     && comment.intersects(aStartLineNo, aStartColNo,
                             aEndLineNo, aEndColNo))
             {
                 return true;
             }
         }
         return false;
     }
 
 }
