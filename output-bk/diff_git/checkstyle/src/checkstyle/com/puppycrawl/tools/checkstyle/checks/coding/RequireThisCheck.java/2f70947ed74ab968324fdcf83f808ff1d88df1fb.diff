diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java
index d6aeb7109..b9bbcca44 100755
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java
@@ -144,101 +144,101 @@ public class RequireThisCheck extends Check
         case TokenTypes.VARIABLE_DEF :
         case TokenTypes.IDENT :
             // do nothing
             break;
         default :
             log(aAST, "require.this.unexpected.leaving",
                 new Integer(aAST.getType()));
         }
     }
 
     /** {@inheritDoc} */
     public void visitToken(DetailAST aAST)
     {
         switch (aAST.getType()) {
         case TokenTypes.PARAMETER_DEF :
         case TokenTypes.VARIABLE_DEF : {
             final DetailAST nameAST = aAST.findFirstToken(TokenTypes.IDENT);
             this.mFrames.current().addName(nameAST.getText());
             break;
         }
         case TokenTypes.CLASS_DEF : {
             final DetailAST nameAST = aAST.findFirstToken(TokenTypes.IDENT);
             this.mFrames.current().addName(nameAST.getText());
             this.mFrames.enter(new ClassFrame());
             break;
         }
         case TokenTypes.SLIST :
             this.mFrames.enter(new BlockFrame());
             break;
         case TokenTypes.METHOD_DEF :
         case TokenTypes.CTOR_DEF :
             this.mFrames.enter(new MethodFrame());
             break;
         case TokenTypes.IDENT :
             processIDENT(aAST);
             break;
         default:
             log(aAST, "require.this.unexpected.visit",
                 new Integer(aAST.getType()));
         } // end switch
     } // end visitToken
 
     /**
      * Checks if a given IDENT is method call or field name which
      * require explicit <code>this</code> qualifier.
      *
      * @param aAST IDENT to check.
      */
     private void processIDENT(DetailAST aAST)
     {
-        int parentType = aAST.getParent().getType();
+        final int parentType = aAST.getParent().getType();
 
         // let's check method calls
         if (parentType == TokenTypes.METHOD_CALL) {
             if (mCheckMethods) {
                 log(aAST, "require.this.method", aAST.getText());
             }
             return;
         }
 
         // let's check fields
         if (!mCheckFields) {
             // we shouldn't check fields
             return;
         }
 
         if (ScopeUtils.getSurroundingScope(aAST) == null) {
             // it is not a class or inteface it's
             // either import or package
             // we shouldn't checks this
             return;
         }
 
         if (parentType == TokenTypes.DOT
             && aAST.getPreviousSibling() != null)
         {
             // it's the method name in a method call; no problem
             return;
         }
         if (parentType == TokenTypes.TYPE
             || parentType == TokenTypes.LITERAL_NEW)
         {
             // it's a type name; no problem
             return;
         }
         if (parentType == TokenTypes.VARIABLE_DEF
             || parentType == TokenTypes.CTOR_DEF
             || parentType == TokenTypes.METHOD_DEF
             || parentType == TokenTypes.CLASS_DEF
             || parentType == TokenTypes.PARAMETER_DEF)
         {
             // it's being declared; no problem
             return;
         }
 
         final String name = aAST.getText();
         final LexicalFrame declared = this.mFrames.findFrame(name);
         if (declared == null) {
             log(aAST, "require.this.unfound.variable", name);
         }
         else if (declared instanceof ClassFrame) {
