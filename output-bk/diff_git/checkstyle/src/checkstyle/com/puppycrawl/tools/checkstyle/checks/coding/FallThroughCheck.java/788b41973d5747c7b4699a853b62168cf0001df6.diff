diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
index 7ffcd49b2..40e72f6dc 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
@@ -262,101 +262,100 @@ public class FallThroughCheck extends Check
         }
 
         boolean isTerminated = isTerminated((DetailAST) aAST.getFirstChild(),
                                             aUseBreak, aUseContinue);
 
         DetailAST catchStmt = aAST.findFirstToken(TokenTypes.LITERAL_CATCH);
         while (catchStmt != null && isTerminated) {
             final DetailAST catchBody =
                 catchStmt.findFirstToken(TokenTypes.SLIST);
             isTerminated &= isTerminated(catchBody, aUseBreak, aUseContinue);
             catchStmt = (DetailAST) catchStmt.getNextSibling();
         }
         return isTerminated;
     }
 
     /**
      * Checks if a given switch terminated by return, throw or,
      * if allowed break, continue.
      * @param aAST loop to check
      * @param aUseContinue should we consider continue as terminator.
      * @return true if switch is terminated.
      */
     private boolean checkSwitch(final DetailAST aAST, boolean aUseContinue)
     {
         DetailAST caseGroup = aAST.findFirstToken(TokenTypes.CASE_GROUP);
         boolean isTerminated = (caseGroup != null);
         while (isTerminated && caseGroup != null
                && caseGroup.getType() != TokenTypes.RCURLY)
         {
             final DetailAST caseBody =
                 caseGroup.findFirstToken(TokenTypes.SLIST);
             isTerminated &= isTerminated(caseBody, false, aUseContinue);
             caseGroup = (DetailAST) caseGroup.getNextSibling();
         }
         return isTerminated;
     }
 
     /**
      * Determines if the fall through case between <code>aCurrentCase</code> and
      * <code>aNextCase</code> is reliefed by a appropriate comment.
      *
      * @param aCurrentCase AST of the case that falls through to the next case.
      * @param aNextCase AST of the next case.
      * @return True if a relief comment was found
      */
     private boolean hasFallTruComment(DetailAST aCurrentCase,
             DetailAST aNextCase)
     {
 
         final int startLineNo = aCurrentCase.getLineNo();
-        final int startColNo = aCurrentCase.getColumnNo();
         final int endLineNo = aNextCase.getLineNo();
         final int endColNo = aNextCase.getColumnNo();
 
         /*
          * Remember: The lines number returned from the AST is 1-based, but
          * the lines number in this array are 0-based. So you will often
          * see a "lineNo-1" etc.
          */
         final String[] lines = getLines();
 
         /*
          * Handle:
          *    case 1:
          *    /+ FALLTHRU +/ case 2:
          *    ....
          * and
          *    switch(i) {
          *    default:
          *    /+ FALLTHRU +/}
          */
         String linepart = lines[endLineNo - 1].substring(0, endColNo);
         if (commentMatch(mRegExp, linepart, endLineNo, 0)) {
             return true;
         }
 
         /*
          * Handle:
          *    case 1:
          *    .....
          *    // FALLTHRU
          *    case 2:
          *    ....
          * and
          *    switch(i) {
          *    default:
          *    // FALLTHRU
          *    }
          */
         for (int i = endLineNo - 2; i > startLineNo - 1; i--) {
             if (lines[i].trim().length() != 0) {
                 return commentMatch(mRegExp, lines[i], i + 1, 0);
             }
         }
 
         // Well -- no relief comment found.
         return false;
     }
 
     /**
      * Does a regular expression match on the given line and checks that a
