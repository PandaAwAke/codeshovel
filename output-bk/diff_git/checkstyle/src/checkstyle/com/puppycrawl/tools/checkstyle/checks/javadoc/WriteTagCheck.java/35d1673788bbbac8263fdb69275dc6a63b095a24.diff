diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java
index d6a75950b..e6283666b 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java
@@ -44,118 +44,118 @@ import org.apache.commons.beanutils.ConversionException;
  * <p> An example of how to configure the check for printing author name is:
  *</p>
  * <pre>
  * &lt;module name="WriteTag"&gt;
  *    &lt;property name="tag" value="@author"/&gt;
  *    &lt;property name="tagFormat" value="\S"/&gt;
  * &lt;/module&gt;
  * </pre>
  * <p> An example of how to configure the check to print warnings if an
  * "@incomplete" tag is found, and not print anything if it is not found:
  *</p>
  * <pre>
  * &lt;module name="WriteTag"&gt;
  *    &lt;property name="tag" value="@incomplete"/&gt;
  *    &lt;property name="tagFormat" value="\S"/&gt;
  *    &lt;property name="severity" value="ignore"/&gt;
  *    &lt;property name="tagSeverity" value="warning"/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * @author Daniel Grenner
  * @version 1.0
  */
 public class WriteTagCheck
     extends Check
 {
     /** compiled regexp to match tag **/
     private Pattern mTagRE;
     /** compiled regexp to match tag content **/
     private Pattern mTagFormatRE;
 
     /** regexp to match tag */
     private String mTag;
     /** regexp to match tag content */
     private String mTagFormat;
     /** the severity level of found tag reports */
     private SeverityLevel mTagSeverityLevel = SeverityLevel.INFO;
 
     /**
      * Sets the tag to check.
      * @param aTag tag to check
      * @throws ConversionException If the tag is not a valid regular exception.
      */
     public void setTag(String aTag)
         throws ConversionException
     {
         try {
             mTag = aTag;
             mTagRE = Utils.getPattern(aTag + "\\s+(.*$)");
         }
-        catch (PatternSyntaxException e) {
+        catch (final PatternSyntaxException e) {
             throw new ConversionException("unable to parse " + aTag, e);
         }
     }
 
     /**
      * Set the tag format.
      * @param aFormat a <code>String</code> value
      * @throws ConversionException unable to parse aFormat
      */
     public void setTagFormat(String aFormat)
         throws ConversionException
     {
         try {
             mTagFormat = aFormat;
             mTagFormatRE = Utils.getPattern(aFormat);
         }
-        catch (PatternSyntaxException e) {
+        catch (final PatternSyntaxException e) {
             throw new ConversionException("unable to parse " + aFormat, e);
         }
     }
 
     /**
      * Sets the tag severity level.  The string should be one of the names
      * defined in the <code>SeverityLevel</code> class.
      *
      * @param aSeverity  The new severity level
      * @see SeverityLevel
      */
     public final void setTagSeverity(String aSeverity)
     {
         mTagSeverityLevel = SeverityLevel.getInstance(aSeverity);
     }
 
     /** {@inheritDoc} */
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.INTERFACE_DEF, TokenTypes.CLASS_DEF, };
     }
 
     /** {@inheritDoc} */
     public int[] getAcceptableTokens()
     {
         return new int[] {TokenTypes.INTERFACE_DEF,
                           TokenTypes.CLASS_DEF,
                           TokenTypes.METHOD_DEF,
         };
     }
 
     /** {@inheritDoc} */
     public void visitToken(DetailAST aAST)
     {
         final FileContents contents = getFileContents();
         final int lineNo = aAST.getLineNo();
         final TextBlock cmt =
             contents.getJavadocBefore(lineNo);
         if (cmt == null) {
             log(lineNo, "type.missingTag", mTag);
         }
         else {
             checkTag(lineNo, cmt.getText(), mTag, mTagRE, mTagFormatRE,
                 mTagFormat);
         }
     }
 
     /**
      * Verifies that a type definition has a required tag.
      * @param aLineNo the line number for the type definition.
@@ -166,58 +166,58 @@ public class WriteTagCheck
      * @param aFormat pattern for the tag value.
      */
     private void checkTag(
             int aLineNo,
             String[] aCmt,
             String aTag,
             Pattern aTagRE,
             Pattern aFormatRE,
             String aFormat)
     {
         if (aTagRE == null) {
             return;
         }
 
         int tagCount = 0;
         for (int i = 0; i < aCmt.length; i++) {
             final String s = aCmt[i];
             final Matcher matcher = aTagRE.matcher(s);
             if (matcher.find()) {
                 tagCount += 1;
                 final int contentStart = matcher.start(1);
                 final String content = s.substring(contentStart);
                 if ((aFormatRE != null) && !aFormatRE.matcher(content).find()) {
                     log(aLineNo + i - aCmt.length, "type.tagFormat", aTag,
                         aFormat);
                 }
                 else {
                     logTag(aLineNo + i - aCmt.length, aTag, content);
                 }
 
             }
         }
         if (tagCount == 0) {
             log(aLineNo, "type.missingTag", aTag);
         }
 
     }
 
 
     /**
      * Log a message.
      *
      * @param aLine the line number where the error was found
      * @param aTag the javdoc tag to be logged
      * @param aTagValue the contents of the tag
      *
      * @see java.text.MessageFormat
      */
     protected final void logTag(int aLine, String aTag, String aTagValue)
     {
-        String originalSeverity = getSeverity();
+        final String originalSeverity = getSeverity();
         setSeverity(mTagSeverityLevel.getName());
 
         log(aLine, "javadoc.writeTag", aTag, aTagValue);
 
         setSeverity(originalSeverity);
     }
 }
