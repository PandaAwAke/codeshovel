diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
index 1fe4e9f9b..d3a488148 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
@@ -1,151 +1,152 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2005  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.javadoc;
 
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.ListIterator;
 import java.util.Set;
 
-import org.apache.regexp.RE;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 import antlr.collections.AST;
 
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FileContents;
 import com.puppycrawl.tools.checkstyle.api.FullIdent;
 import com.puppycrawl.tools.checkstyle.api.Scope;
 import com.puppycrawl.tools.checkstyle.api.ScopeUtils;
 import com.puppycrawl.tools.checkstyle.api.TextBlock;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.api.Utils;
 import com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck;
 
 /**
  * Checks the Javadoc of a method or constructor.
  *
  * @author Oliver Burn
  * @author Rick Giles
  * @author o_sukhodoslky
  * @version 1.1
  */
 public class JavadocMethodCheck extends AbstractTypeAwareCheck
 {
     /** the pattern to match Javadoc tags that take an argument * */
     private static final String MATCH_JAVADOC_ARG_PAT =
         "@(throws|exception|param)\\s+(\\S+)\\s+\\S";
     /** compiled regexp to match Javadoc tags that take an argument * */
-    private static final RE MATCH_JAVADOC_ARG = Utils
-        .createRE(MATCH_JAVADOC_ARG_PAT);
+    private static final Pattern MATCH_JAVADOC_ARG = Utils
+        .createPattern(MATCH_JAVADOC_ARG_PAT);
 
     /**
      * the pattern to match the first line of a multi-line Javadoc tag that
      * takes an argument.
      */
     private static final String MATCH_JAVADOC_ARG_MULTILINE_START_PAT =
         "@(throws|exception|param)\\s+(\\S+)\\s*$";
     /** compiled regexp to match first part of multilineJavadoc tags * */
-    private static final RE MATCH_JAVADOC_ARG_MULTILINE_START = Utils
-        .createRE(MATCH_JAVADOC_ARG_MULTILINE_START_PAT);
+    private static final Pattern MATCH_JAVADOC_ARG_MULTILINE_START = Utils
+        .createPattern(MATCH_JAVADOC_ARG_MULTILINE_START_PAT);
 
     /** the pattern that looks for a continuation of the comment * */
     private static final String MATCH_JAVADOC_MULTILINE_CONT_PAT =
         "(\\*/|@|[^\\s\\*])";
     /** compiled regexp to look for a continuation of the comment * */
-    private static final RE MATCH_JAVADOC_MULTILINE_CONT = Utils
-        .createRE(MATCH_JAVADOC_MULTILINE_CONT_PAT);
+    private static final Pattern MATCH_JAVADOC_MULTILINE_CONT = Utils
+        .createPattern(MATCH_JAVADOC_MULTILINE_CONT_PAT);
     /** Multiline finished at end of comment * */
     private static final String END_JAVADOC = "*/";
     /** Multiline finished at next Javadoc * */
     private static final String NEXT_TAG = "@";
 
     /** the pattern to match Javadoc tags with no argument * */
     private static final String MATCH_JAVADOC_NOARG_PAT =
         "@(return|see)\\s+\\S";
     /** compiled regexp to match Javadoc tags with no argument * */
-    private static final RE MATCH_JAVADOC_NOARG = Utils
-        .createRE(MATCH_JAVADOC_NOARG_PAT);
+    private static final Pattern MATCH_JAVADOC_NOARG = Utils
+        .createPattern(MATCH_JAVADOC_NOARG_PAT);
     /**
      * the pattern to match the first line of a multi-line Javadoc tag that
      * takes no argument.
      */
     private static final String MATCH_JAVADOC_NOARG_MULTILINE_START_PAT =
         "@(return|see)\\s*$";
     /** compiled regexp to match first part of multilineJavadoc tags * */
-    private static final RE MATCH_JAVADOC_NOARG_MULTILINE_START = Utils
-        .createRE(MATCH_JAVADOC_NOARG_MULTILINE_START_PAT);
+    private static final Pattern MATCH_JAVADOC_NOARG_MULTILINE_START = Utils
+        .createPattern(MATCH_JAVADOC_NOARG_MULTILINE_START_PAT);
 
     /** the pattern to match Javadoc tags with no argument and {} * */
     private static final String MATCH_JAVADOC_NOARG_CURLY_PAT =
         "\\{\\s*@(inheritDoc)\\s*\\}";
     /** compiled regexp to match Javadoc tags with no argument and {} * */
-    private static final RE MATCH_JAVADOC_NOARG_CURLY = Utils
-        .createRE(MATCH_JAVADOC_NOARG_CURLY_PAT);
+    private static final Pattern MATCH_JAVADOC_NOARG_CURLY = Utils
+        .createPattern(MATCH_JAVADOC_NOARG_CURLY_PAT);
 
     /** the visibility scope where Javadoc comments are checked * */
     private Scope mScope = Scope.PRIVATE;
 
     /** the visibility scope where Javadoc comments shouldn't be checked * */
     private Scope mExcludeScope;
 
     /**
      * controls whether to allow documented exceptions that are not declared if
      * they are a subclass of java.lang.RuntimeException.
      */
     private boolean mAllowUndeclaredRTE;
 
     /**
      * controls whether to allow documented exceptions that are subclass of one
      * of declared exception. Defaults to false (backward compatibility).
      */
     private boolean mAllowThrowsTagsForSubclasses;
 
     /**
      * controls whether to ignore errors when a method has parameters but does
      * not have matching param tags in the javadoc. Defaults to false.
      */
     private boolean mAllowMissingParamTags;
 
     /**
      * controls whether to ignore errors when a method declares that it throws
      * exceptions but does not have matching throws tags in the javadoc.
      * Defaults to false.
      */
     private boolean mAllowMissingThrowsTags;
 
     /**
      * controls whether to ignore errors when a method returns non-void type but
      * does not have a return tag in the javadoc. Defaults to false.
      */
     private boolean mAllowMissingReturnTag;
 
     /**
      * Controls whether to ignoreerrors when there is no javadoc. Defaults to
      * false.
      */
     private boolean mAllowMissingJavadoc;
 
     /**
      * Controls whether to allow missing Javadoc on accessor methods for
      * properties (setters and getters).
      */
     private boolean mAllowMissingPropertyJavadoc;
 
@@ -339,147 +340,159 @@ public class JavadocMethodCheck extends AbstractTypeAwareCheck
     {
         final List tags = getMethodTags(aComment);
 
         // Check for only one @see or inheritDoc tag
         if ((tags.size() == 1)
             && ((JavadocTag) tags.get(0)).isSeeOrInheritDocTag())
         {
             return;
         }
 
         Iterator it = tags.iterator();
         if (aAST.getType() != TokenTypes.ANNOTATION_FIELD_DEF) {
             // Check for inheritDoc
             boolean hasInheritDocTag = false;
             while (it.hasNext() && !hasInheritDocTag) {
                 hasInheritDocTag |= ((JavadocTag) it.next()).isInheritDocTag();
             }
 
             checkParamTags(tags, getParameters(aAST), !hasInheritDocTag);
             checkThrowsTags(tags, getThrows(aAST), !hasInheritDocTag);
             if (isFunction(aAST)) {
                 checkReturnTag(tags, aAST.getLineNo(), !hasInheritDocTag);
             }
         }
 
         // Dump out all unused tags
         it = tags.iterator();
         while (it.hasNext()) {
             final JavadocTag jt = (JavadocTag) it.next();
             if (!jt.isSeeOrInheritDocTag()) {
                 log(jt.getLineNo(), "javadoc.unusedTagGeneral");
             }
         }
     }
 
     /**
      * Returns the tags in a javadoc comment. Only finds throws, exception,
      * param, return and see tags.
      *
      * @return the tags found
      * @param aComment the Javadoc comment
      */
     private List getMethodTags(TextBlock aComment)
     {
         final String[] lines = aComment.getText();
         final List tags = new ArrayList();
         int currentLine = aComment.getStartLineNo() - 1;
 
         for (int i = 0; i < lines.length; i++) {
             currentLine++;
-            if (MATCH_JAVADOC_ARG.match(lines[i])) {
+            Matcher javadocArgMatcher = MATCH_JAVADOC_ARG.matcher(lines[i]);
+            Matcher javadocNoargMatcher =
+                MATCH_JAVADOC_NOARG.matcher(lines[i]);
+            Matcher noargCurlyMatcher =
+                MATCH_JAVADOC_NOARG_CURLY.matcher(lines[i]);
+            Matcher argMultilineStart =
+                MATCH_JAVADOC_ARG_MULTILINE_START.matcher(lines[i]);
+            Matcher noargMultilineStart =
+                MATCH_JAVADOC_NOARG_MULTILINE_START.matcher(lines[i]);
+            if (javadocArgMatcher.find()) {
                 tags.add(new JavadocTag(currentLine,
-                                        MATCH_JAVADOC_ARG.getParen(1),
-                                        MATCH_JAVADOC_ARG.getParen(2)));
+                                        javadocArgMatcher.group(1),
+                                        javadocArgMatcher.group(2)));
             }
-            else if (MATCH_JAVADOC_NOARG.match(lines[i])) {
+            else if (javadocNoargMatcher.find()) {
                 tags.add(new JavadocTag(currentLine,
-                                        MATCH_JAVADOC_NOARG.getParen(1)));
+                                        javadocNoargMatcher.group(1)));
             }
-            else if (MATCH_JAVADOC_NOARG_CURLY.match(lines[i])) {
+            else if (noargCurlyMatcher.find()) {
                 tags.add(new JavadocTag(currentLine,
-                                        MATCH_JAVADOC_NOARG_CURLY.getParen(1)));
+                                        noargCurlyMatcher.group(1)));
             }
-            else if (MATCH_JAVADOC_ARG_MULTILINE_START.match(lines[i])) {
-                final String p1 = MATCH_JAVADOC_ARG_MULTILINE_START.getParen(1);
-                final String p2 = MATCH_JAVADOC_ARG_MULTILINE_START.getParen(2);
+            else if (argMultilineStart.find()) {
+                final String p1 = argMultilineStart.group(1);
+                final String p2 = argMultilineStart.group(2);
 
                 // Look for the rest of the comment if all we saw was
                 // the tag and the name. Stop when we see '*/' (end of
                 // Javadoc, '@' (start of next tag), or anything that's
                 // not whitespace or '*' characters.
                 int remIndex = i + 1;
                 while (remIndex < lines.length) {
-                    if (MATCH_JAVADOC_MULTILINE_CONT.match(lines[remIndex])) {
+                    Matcher multilineCont =
+                        MATCH_JAVADOC_MULTILINE_CONT.matcher(lines[remIndex]);
+                    if (multilineCont.find()) {
                         remIndex = lines.length;
-                        String lFin = MATCH_JAVADOC_MULTILINE_CONT.getParen(1);
+                        String lFin = multilineCont.group(1);
                         if (!lFin.equals(NEXT_TAG) && !lFin.equals(END_JAVADOC))
                         {
                             tags.add(new JavadocTag(currentLine, p1, p2));
                         }
                     }
                     remIndex++;
                 }
             }
-            else if (MATCH_JAVADOC_NOARG_MULTILINE_START.match(lines[i])) {
-                final String p1 = MATCH_JAVADOC_NOARG_MULTILINE_START
-                    .getParen(1);
+            else if (noargMultilineStart.find()) {
+                final String p1 = noargMultilineStart.group(1);
 
                 // Look for the rest of the comment if all we saw was
                 // the tag and the name. Stop when we see '*/' (end of
                 // Javadoc, '@' (start of next tag), or anything that's
                 // not whitespace or '*' characters.
                 int remIndex = i + 1;
                 while (remIndex < lines.length) {
-                    if (MATCH_JAVADOC_MULTILINE_CONT.match(lines[remIndex])) {
+                    Matcher multilineCont =
+                        MATCH_JAVADOC_MULTILINE_CONT.matcher(lines[remIndex]);
+                    if (multilineCont.find()) {
                         remIndex = lines.length;
-                        String lFin = MATCH_JAVADOC_MULTILINE_CONT.getParen(1);
+                        String lFin = multilineCont.group(1);
                         if (!lFin.equals(NEXT_TAG) && !lFin.equals(END_JAVADOC))
                         {
                             tags.add(new JavadocTag(currentLine, p1));
                         }
                     }
                     remIndex++;
                 }
             }
         }
         return tags;
     }
 
     /**
      * Computes the parameter nodes for a method.
      *
      * @param aAST the method node.
      * @return the list of parameter nodes for aAST.
      */
     private List getParameters(DetailAST aAST)
     {
         final DetailAST params = aAST.findFirstToken(TokenTypes.PARAMETERS);
         final List retVal = new ArrayList();
 
         DetailAST child = (DetailAST) params.getFirstChild();
         while (child != null) {
             if (child.getType() == TokenTypes.PARAMETER_DEF) {
                 final DetailAST ident = child.findFirstToken(TokenTypes.IDENT);
                 retVal.add(ident);
             }
             child = (DetailAST) child.getNextSibling();
         }
         return retVal;
     }
 
     /**
      * Computes the exception nodes for a method.
      *
      * @param aAST the method node.
      * @return the list of exception nodes for aAST.
      */
     private List getThrows(DetailAST aAST)
     {
         final List retVal = new ArrayList();
         final DetailAST throwsAST = aAST
             .findFirstToken(TokenTypes.LITERAL_THROWS);
         if (throwsAST != null) {
             DetailAST child = (DetailAST) throwsAST.getFirstChild();
             while (child != null) {
                 if ((child.getType() == TokenTypes.IDENT)
                     || (child.getType() == TokenTypes.DOT))
