diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
index d3fb87ae5..c23d8c54c 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
@@ -284,101 +284,101 @@ public class CheckStyleTask
         Checker c = null;
         try {
             c = createChecker();
 
             final SeverityLevelCounter warningCounter =
                     new SeverityLevelCounter(SeverityLevel.WARNING);
             c.addListener(warningCounter);
 
             // Process the files
             final File[] files = scanFileSets();
 
             log("Running Checkstyle " + version
                     + " on " + files.length + " files", Project.MSG_INFO);
             log("Using configuration " + mConfigLocation, Project.MSG_VERBOSE);
 
             final int numErrs = c.process(files);
             final int numWarnings = warningCounter.getCount();
             final boolean ok = numErrs <= mMaxErrors
                     && numWarnings <= mMaxWarnings;
 
             // Handle the return status
             if (!ok && mFailureProperty != null) {
                 getProject().setProperty(mFailureProperty, "true");
             }
 
             if (!ok && mFailOnViolation) {
                 throw new BuildException(
                         "Got " + numErrs + " errors and "
                         + numWarnings + " warnings.",
                                          getLocation());
             }
         }
         finally {
             if (c != null) {
                 c.destroy();
             }
         }
     }
 
     /**
      * Creates new instance of <code>Checker</code>.
      * @return new instance of <code>Checker</code>
      */
     private Checker createChecker()
     {
         Checker c = null;
         try {
             final Properties props = createOverridingProperties();
             final Configuration config =
                 ConfigurationLoader.loadConfiguration(
-                    mConfigLocation, new PropertiesExpander(props));
+                    mConfigLocation, new PropertiesExpander(props), true);
 
             final DefaultContext context = new DefaultContext();
             final ClassLoader loader =
                 new AntClassLoader(getProject(), mClasspath);
             context.add("classloader", loader);
 
             c = new Checker();
 
             //load the set of package names
             if (mPackageNamesFile != null) {
                 final ModuleFactory moduleFactory =
                     PackageNamesLoader.loadModuleFactory(
                         mPackageNamesFile.getAbsolutePath());
                 c.setModuleFactory(moduleFactory);
             }
             c.contextualize(context);
             c.configure(config);
 
             // setup the listeners
             final AuditListener[] listeners = getListeners();
             for (int i = 0; i < listeners.length; i++) {
                 c.addListener(listeners[i]);
             }
         }
         catch (Exception e) {
             throw new BuildException(
                 "Unable to create a Checker: " + e.getMessage(), e);
         }
 
         return c;
     }
     /**
      * Create the Properties object based on the arguments specified
      * to the ANT task.
      * @return the properties for property expansion expansion
      * @throws BuildException if an error occurs
      */
     private Properties createOverridingProperties()
     {
         final Properties retVal = new Properties();
 
         // Load the properties file if specified
         if (mPropertiesFile != null) {
             FileInputStream inStream = null;
             try {
                 inStream = new FileInputStream(mPropertiesFile);
                 retVal.load(inStream);
             }
             catch (FileNotFoundException e) {
                 throw new BuildException(
