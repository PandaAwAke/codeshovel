diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/OtherLeftCurlyCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/OtherLeftCurlyCheck.java
index 3fff5c25b..560f4a9e1 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/OtherLeftCurlyCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/OtherLeftCurlyCheck.java
@@ -28,61 +28,62 @@ public class OtherLeftCurlyCheck
     extends LeftCurlyCheck
 {
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public int[] getDefaultTokens()
     {
         return new int[] {JavaTokenTypes.LITERAL_while,
                           JavaTokenTypes.LITERAL_try,
                           JavaTokenTypes.LITERAL_catch,
                           JavaTokenTypes.LITERAL_finally,
                           JavaTokenTypes.LITERAL_synchronized,
                           JavaTokenTypes.LITERAL_switch,
                           JavaTokenTypes.LITERAL_do,
                           JavaTokenTypes.LITERAL_if,
                           JavaTokenTypes.LITERAL_else,
                           JavaTokenTypes.LITERAL_for,
                           // TODO: need to handle....
                           //JavaTokenTypes.STATIC_INIT,
         };
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void visitToken(DetailAST aAST)
     {
         final DetailAST startToken = aAST;
         final DetailAST brace;
 
         switch (aAST.getType()) {
             case JavaTokenTypes.LITERAL_while:
             case JavaTokenTypes.LITERAL_catch:
             case JavaTokenTypes.LITERAL_synchronized:
             case JavaTokenTypes.LITERAL_for:
                 brace = Utils.getLastSibling(aAST.getFirstChild());
                 break;
             case JavaTokenTypes.LITERAL_try:
             case JavaTokenTypes.LITERAL_finally:
             case JavaTokenTypes.LITERAL_do:
                 brace = (DetailAST) aAST.getFirstChild();
                 break;
             case JavaTokenTypes.LITERAL_else:
                 final DetailAST candidate = (DetailAST) aAST.getFirstChild();
                 if (candidate.getType() == JavaTokenTypes.SLIST) {
                     brace = candidate;
                 }
                 else {
                     // silently ignore
                     brace = null;
                 }
                 break;
             case JavaTokenTypes.LITERAL_switch:
             case JavaTokenTypes.LITERAL_if:
-                brace = (DetailAST) aAST.getFirstChild().getNextSibling();
+                brace = (DetailAST) aAST.getFirstChild().getNextSibling()
+                    .getNextSibling().getNextSibling();
                 break;
             default:
                 brace = null;
         }
 
         if (brace != null) {
             verifyBrace(brace, startToken);
         }
     }
 }
