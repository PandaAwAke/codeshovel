diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java
index 9b541c497..bd19431a5 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java
@@ -18,80 +18,81 @@
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.Java14TokenTypes;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 
 public class WhitespaceAroundCheck extends Check implements Java14TokenTypes
 {
     public int[] getDefaultTokens()
     {
         return new int[] {
             QUESTION,          // '?'
             // COLON,             // ':' TODO: dont flag after "case"
             ASSIGN,            // '='
             EQUAL,             // "=="
             NOT_EQUAL,         // "!="
             DIV,               // '/'
             DIV_ASSIGN,        // "/="
             // PLUS,              //' +' TODO: unaray plus
             PLUS_ASSIGN,       // "+="
             // MINUS,             // '-' TODO: unary minus
             MINUS_ASSIGN,      //"-="
             STAR,              // '*'
             STAR_ASSIGN,       // "*="
             MOD,               // '%'
             MOD_ASSIGN,        // "%="
             SR,                // ">>"
             SR_ASSIGN,         // ">>="
             BSR,               // ">>>"
             BSR_ASSIGN,        // ">>>="
             GE,                // ">="
             GT,                // ">"
             SL,                // "<<"
             SL_ASSIGN,         // "<<="
             LE,                // "<="
             LT,                // '<'
             BXOR,              // '^'
             BXOR_ASSIGN,       // "^="
             BOR,               // '|'
             BOR_ASSIGN,        // "|="
             LOR,               // "||"
             BAND,              // '&'
             BAND_ASSIGN,       // "&="
             LAND,              // "&&"
             LITERAL_if,
             LITERAL_else,
             LITERAL_for,
             LITERAL_do,
-            // LITERAL_return,    // TODO: "return;" is OK, return(2) is not
+            LITERAL_return,
             LITERAL_try,
             LITERAL_catch,
             LITERAL_finally,
             LITERAL_synchronized,
             ASSERT                // TODO: why is it not LITERAL_assert?
                                   // maybe it's a bug in the grammar?
         };
     }
 
     public void visitToken(DetailAST aAST)
     {
         final String[] lines = getLines();
         final String line = lines[aAST.getLineNo() - 1];
         final int before = aAST.getColumnNo() - 1;
         final int after = aAST.getColumnNo() + aAST.getText().length();
 
         if ((before >= 0) && !Character.isWhitespace(line.charAt(before))) {
             log(aAST.getLineNo(), aAST.getColumnNo(),
                     "ws.notPreceeded", new Object[]{aAST.getText()});
         }
 
         if ((after < line.length())
-            && !Character.isWhitespace(line.charAt(after)))
+            && !Character.isWhitespace(line.charAt(after))
+            && !(aAST.getType() == LITERAL_return && aAST.getFirstChild() == null))
         {
             log(aAST.getLineNo(), aAST.getColumnNo() + aAST.getText().length(),
                     "ws.notFollowed", new Object[]{aAST.getText()});
         }
     }
 }
