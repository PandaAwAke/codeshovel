diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java
index 908771be7..d6a75950b 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java
@@ -138,86 +138,86 @@ public class WriteTagCheck
                           TokenTypes.CLASS_DEF,
                           TokenTypes.METHOD_DEF,
         };
     }
 
     /** {@inheritDoc} */
     public void visitToken(DetailAST aAST)
     {
         final FileContents contents = getFileContents();
         final int lineNo = aAST.getLineNo();
         final TextBlock cmt =
             contents.getJavadocBefore(lineNo);
         if (cmt == null) {
             log(lineNo, "type.missingTag", mTag);
         }
         else {
             checkTag(lineNo, cmt.getText(), mTag, mTagRE, mTagFormatRE,
                 mTagFormat);
         }
     }
 
     /**
      * Verifies that a type definition has a required tag.
      * @param aLineNo the line number for the type definition.
      * @param aCmt the Javadoc comment for the type definition.
      * @param aTag the required tag name.
      * @param aTagRE regexp for the full tag.
      * @param aFormatRE regexp for the tag value.
      * @param aFormat pattern for the tag value.
      */
     private void checkTag(
             int aLineNo,
             String[] aCmt,
             String aTag,
             Pattern aTagRE,
             Pattern aFormatRE,
             String aFormat)
     {
         if (aTagRE == null) {
             return;
         }
 
         int tagCount = 0;
         for (int i = 0; i < aCmt.length; i++) {
             final String s = aCmt[i];
             final Matcher matcher = aTagRE.matcher(s);
             if (matcher.find()) {
                 tagCount += 1;
                 final int contentStart = matcher.start(1);
                 final String content = s.substring(contentStart);
-                if (aFormatRE != null && !aFormatRE.matcher(content).find()) {
+                if ((aFormatRE != null) && !aFormatRE.matcher(content).find()) {
                     log(aLineNo + i - aCmt.length, "type.tagFormat", aTag,
                         aFormat);
                 }
                 else {
                     logTag(aLineNo + i - aCmt.length, aTag, content);
                 }
 
             }
         }
         if (tagCount == 0) {
             log(aLineNo, "type.missingTag", aTag);
         }
 
     }
 
 
     /**
      * Log a message.
      *
      * @param aLine the line number where the error was found
      * @param aTag the javdoc tag to be logged
      * @param aTagValue the contents of the tag
      *
      * @see java.text.MessageFormat
      */
     protected final void logTag(int aLine, String aTag, String aTagValue)
     {
         String originalSeverity = getSeverity();
         setSeverity(mTagSeverityLevel.getName());
 
         log(aLine, "javadoc.writeTag", aTag, aTagValue);
 
         setSeverity(originalSeverity);
     }
 }
