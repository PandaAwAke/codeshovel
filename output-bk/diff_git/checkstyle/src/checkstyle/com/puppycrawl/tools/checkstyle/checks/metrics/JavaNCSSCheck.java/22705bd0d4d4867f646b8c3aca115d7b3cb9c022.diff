diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java
index f6302382f..a4be1575e 100755
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java
@@ -145,128 +145,128 @@ public class JavaNCSSCheck extends Check
         //add a counter for the file
         mCounters.push(new Counter());
     }
 
     /**
      * {@inheritDoc}
      */
     @Override
     public void visitToken(DetailAST aAST)
     {
         final int tokenType = aAST.getType();
 
         if ((TokenTypes.CLASS_DEF == tokenType)
             || (TokenTypes.METHOD_DEF == tokenType)
             || (TokenTypes.CTOR_DEF == tokenType)
             || (TokenTypes.STATIC_INIT == tokenType)
             || (TokenTypes.INSTANCE_INIT == tokenType))
         {
             //add a counter for this class/method
             mCounters.push(new Counter());
         }
 
         //check if token is countable
         if (isCountable(aAST)) {
             //increment the stacked counters
             final int size = mCounters.size();
             for (int i = 0; i < size; i++) {
                 (mCounters.get(i)).increment();
             }
         }
     }
 
     /**
      * {@inheritDoc}
      */
     @Override
     public void leaveToken(DetailAST aAST)
     {
         final int tokenType = aAST.getType();
         if ((TokenTypes.METHOD_DEF == tokenType)
             || (TokenTypes.CTOR_DEF == tokenType)
             || (TokenTypes.STATIC_INIT == tokenType)
             || (TokenTypes.INSTANCE_INIT == tokenType))
         {
             //pop counter from the stack
             final Counter counter = mCounters.pop();
 
             final int count = counter.getCount();
             if (count > mMethodMax) {
                 log(aAST.getLineNo(), aAST.getColumnNo(), "ncss.method",
-                        new Integer(count), new Integer(mMethodMax));
+                        count, mMethodMax);
             }
         }
         else if (TokenTypes.CLASS_DEF == tokenType) {
             //pop counter from the stack
             final Counter counter = mCounters.pop();
 
             final int count = counter.getCount();
             if (count > mClassMax) {
                 log(aAST.getLineNo(), aAST.getColumnNo(), "ncss.class",
-                        new Integer(count), new Integer(mClassMax));
+                        count, mClassMax);
             }
         }
     }
 
     /**
      * {@inheritDoc}
      */
     @Override
     public void finishTree(DetailAST aRootAST)
     {
         //pop counter from the stack
         final Counter counter = mCounters.pop();
 
         final int count = counter.getCount();
         if (count > mFileMax) {
             log(aRootAST.getLineNo(), aRootAST.getColumnNo(), "ncss.file",
-                    new Integer(count), new Integer(mMethodMax));
+                    count, mMethodMax);
         }
     }
 
     /**
      * Sets the maximum ncss for a file.
      *
      * @param aFileMax
      *            the maximum ncss
      */
     public void setFileMaximum(int aFileMax)
     {
         mFileMax = aFileMax;
     }
 
     /**
      * Sets the maximum ncss for a class.
      *
      * @param aClassMax
      *            the maximum ncss
      */
     public void setClassMaximum(int aClassMax)
     {
         mClassMax = aClassMax;
     }
 
     /**
      * Sets the maximum ncss for a method.
      *
      * @param aMethodMax
      *            the maximum ncss
      */
     public void setMethodMaximum(int aMethodMax)
     {
         mMethodMax = aMethodMax;
     }
 
     /**
      * Checks if a token is countable for the ncss metric
      *
      * @param aAST
      *            the AST
      * @return true if the token is countable
      */
     private boolean isCountable(DetailAST aAST)
     {
         boolean countable = true;
 
         final int tokenType = aAST.getType();
 
         //check if an expression is countable
