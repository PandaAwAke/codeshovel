diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/Comment.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/Comment.java
index d357933ce..66f658c24 100755
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/Comment.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/Comment.java
@@ -14,99 +14,100 @@
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.api;
 
 /**
  * Representation of the comment block.
  *
  * @author o_sukhodolsky
  */
 class Comment implements TextBlock
 {
     /** text of the comment. */
     private final String[] mText;
 
     /** number of first line of the comment. */
     private final int mFirstLine;
 
     /** number of last line of the comment. */
     private final int mLastLine;
 
     /** number of first column of the comment. */
     private final int mFirstCol;
 
     /** number of last column of the comment. */
     private final int mLastCol;
 
     /**
      * Creates new instance.
      * @param aText the lines that make up the comment.
      * @param aFirstCol number of the first column of the comment.
      * @param aLastLine number of the last line of the comment.
      * @param aLastCol number of the last column of the comment.
      */
     public Comment(final String[] aText, final int aFirstCol,
             final int aLastLine, final int aLastCol)
     {
         mText = new String[aText.length];
         System.arraycopy(aText, 0, mText, 0, mText.length);
         mFirstLine = aLastLine - mText.length + 1;
         mLastLine = aLastLine;
         mFirstCol = aFirstCol;
         mLastCol = aLastCol;
     }
 
     /** {@inheritDoc} */
     public final String[] getText()
     {
-        return (String[]) mText.clone();
+        return mText.clone();
     }
 
     /** {@inheritDoc} */
     public final int getStartLineNo()
     {
         return mFirstLine;
     }
 
     /** {@inheritDoc} */
     public final int getEndLineNo()
     {
         return mLastLine;
     }
 
     /** {@inheritDoc} */
     public int getStartColNo()
     {
         return mFirstCol;
     }
 
     /** {@inheritDoc} */
     public int getEndColNo()
     {
         return mLastCol;
     }
 
     /** {@inheritDoc} */
     public boolean intersects(int aStartLineNo, int aStartColNo,
                               int aEndLineNo, int aEndColNo)
     {
         // compute a single number for start and end
         // to simpify conditional logic
         final long multiplier = Integer.MAX_VALUE;
         final long thisStart = mFirstLine * multiplier + mFirstCol;
         final long thisEnd = mLastLine * multiplier + mLastCol;
         final long inStart = aStartLineNo * multiplier + aStartColNo;
         final long inEnd = aEndLineNo * multiplier + aEndColNo;
 
         return !((thisEnd < inStart) || (inEnd < thisStart));
     }
 
     /** {@inheritDoc} */
+    @Override
     public String toString()
     {
         return "Comment[" + mFirstLine + ":" + mFirstCol + "-"
             + mLastLine + ":" + mLastCol + "]";
     }
 }
