diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
index fbbaf1de7..709e09173 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
@@ -32,100 +32,116 @@ import java.util.Vector;
 /**
  * Abstract class that endeavours to maintain type information for the Java
  * file being checked. It provides helper methods for performing type
  * information functions.
  *
  * @author Oliver Burn
  * @version 1.0
  */
 public abstract class AbstractTypeAwareCheck extends Check
 {
     /** imports details **/
     private Set mImports = new HashSet();
 
     /** full identifier for package of the method **/
     private FullIdent mPackageFullIdent;
 
     /** Name of current class. */
     private String mCurrentClass;
 
     /** <code>ClassResolver</code> instance for current tree. */
     private ClassResolver mClassResolver;
 
     /** Stack of maps for type params. */
     private Vector mTypeParams = new Vector();
 
     /**
      * Whether to log class loading errors to the checkstyle report
      * instead of throwing a RTE.
      *
      * Logging errors will avoid stopping checkstyle completely
      * because of a typo in javadoc. However, with modern IDEs that
      * support automated refactoring and generate javadoc this will
      * occur rarely, so by default we assume a configuration problem
      * in the checkstyle classpath and throw an execption.
      *
      * This configuration option was triggered by bug 1422462.
      */
     private boolean mLogLoadErrors;
 
     /**
      * Controls whether to log class loading errors to the checkstyle report
      * instead of throwing a RTE.
      *
      * @param aLogLoadErrors true if errors should be logged
      */
     public final void setLogLoadErrors(boolean aLogLoadErrors)
     {
         mLogLoadErrors = aLogLoadErrors;
     }
 
+    /**
+     * Whether to show class loading errors in the checkstyle report.
+     * Request ID 1491630
+     */
+    private boolean mSuppressLoadErrors;
+
+    /**
+     * Controls whether to show class loading errors in the checkstyle report.
+     *
+     * @param aSuppressLoadErrors true if errors shouldn't be shown
+     */
+    public final void setSuppressLoadErrors(boolean aSuppressLoadErrors)
+    {
+        mSuppressLoadErrors = aSuppressLoadErrors;
+    }
+
     /**
      * Called to process an AST when visiting it.
      * @param aAST the AST to process. Guaranteed to not be PACKAGE_DEF or
      *             IMPORT tokens.
      */
     protected abstract void processAST(DetailAST aAST);
 
     /** {@inheritDoc} */
     public final int[] getRequiredTokens()
     {
         return new int[] {
             TokenTypes.PACKAGE_DEF,
             TokenTypes.IMPORT,
             TokenTypes.CLASS_DEF,
             TokenTypes.ENUM_DEF,
         };
     }
 
     /** {@inheritDoc} */
     public void beginTree(DetailAST aRootAST)
     {
         mPackageFullIdent = FullIdent.createFullIdent(null);
         mImports.clear();
         // add java.lang.* since it's always imported
         mImports.add("java.lang.*");
         mClassResolver = null;
         mCurrentClass = "";
         mTypeParams.clear();
     }
 
     /** {@inheritDoc} */
     public final void visitToken(DetailAST aAST)
     {
         if (aAST.getType() == TokenTypes.PACKAGE_DEF) {
             processPackage(aAST);
         }
         else if (aAST.getType() == TokenTypes.IMPORT) {
             processImport(aAST);
         }
         else if (aAST.getType() == TokenTypes.CLASS_DEF
                  || aAST.getType() == TokenTypes.ENUM_DEF)
         {
             processClass(aAST);
         }
         else {
             if (aAST.getType() == TokenTypes.METHOD_DEF) {
                 processTypeParams(aAST);
             }
             processAST(aAST);
         }
@@ -216,113 +232,115 @@ public abstract class AbstractTypeAwareCheck extends Check
 
     /**
      * Attempts to resolve the Class for a specified name.
      * @param aClassName name of the class to resolve
      * @param aCurrentClass name of surrounding class.
      * @return the resolved class or <code>null</code>
      *          if unable to resolve the class.
      */
     protected final Class resolveClass(String aClassName, String aCurrentClass)
     {
         try {
             return getClassResolver().resolve(aClassName, aCurrentClass);
         }
         catch (ClassNotFoundException e) {
             return null;
         }
     }
 
     /**
      * Tries to load class. Logs error if unable.
      * @param aIdent name of class which we try to load.
      * @param aCurrentClass name of surrounding class.
      * @return <code>Class</code> for a ident.
      */
     protected final Class tryLoadClass(Token aIdent, String aCurrentClass)
     {
         final Class clazz = resolveClass(aIdent.getText(), aCurrentClass);
         if (clazz == null) {
             logLoadError(aIdent);
         }
         return clazz;
     }
 
     /**
      * Logs error if unable to load class information.
      * Abstract, should be overrided in subclasses.
      * @param aIdent class name for which we can no load class.
      */
     protected abstract void logLoadError(Token aIdent);
 
     /**
      * Common implementation for logLoadError() method.
      * @param aLineNo line number of the problem.
      * @param aColumnNo column number of the problem.
      * @param aMsgKey message key to use.
      * @param aValues values to fill the message out.
      */
     protected final void logLoadErrorImpl(int aLineNo, int aColumnNo,
                                           String aMsgKey, Object[] aValues)
     {
-        System.out.println(mLogLoadErrors);
         if (!mLogLoadErrors) {
             LocalizedMessage msg = new LocalizedMessage(aLineNo,
                                                     aColumnNo,
                                                     getMessageBundle(),
                                                     aMsgKey,
                                                     aValues,
                                                     getSeverityLevel(),
                                                     getId(),
                                                     this.getClass());
             throw new RuntimeException(msg.getMessage());
         }
-        log(aLineNo, aColumnNo, aMsgKey, aValues);
+
+        if (!mSuppressLoadErrors) {
+            log(aLineNo, aColumnNo, aMsgKey, aValues);
+        }
     }
 
     /**
      * Collects the details of a package.
      * @param aAST node containing the package details
      */
     private void processPackage(DetailAST aAST)
     {
         final DetailAST nameAST = aAST.getLastChild().getPreviousSibling();
         mPackageFullIdent = FullIdent.createFullIdent(nameAST);
     }
 
     /**
      * Collects the details of imports.
      * @param aAST node containing the import details
      */
     private void processImport(DetailAST aAST)
     {
         final FullIdent name = FullIdent.createFullIdentBelow(aAST);
         if (name != null) {
             mImports.add(name.getText());
         }
     }
 
     /**
      * Process type params (if any) for given class, enum or method.
      * @param aAST class, enum or method to process.
      */
     private void processTypeParams(DetailAST aAST)
     {
         final DetailAST typeParams =
             aAST.findFirstToken(TokenTypes.TYPE_PARAMETERS);
 
         Map paramsMap = new HashMap();
         mTypeParams.add(paramsMap);
 
         if (typeParams == null) {
             return;
         }
 
         for (DetailAST child = (DetailAST) typeParams.getFirstChild();
              child != null;
              child = (DetailAST) child.getNextSibling())
         {
             if (child.getType() == TokenTypes.TYPE_PARAMETER) {
                 DetailAST param = child;
                 String alias = param.findFirstToken(TokenTypes.IDENT).getText();
                 DetailAST bounds =
                     param.findFirstToken(TokenTypes.TYPE_UPPER_BOUNDS);
                 if (bounds != null) {
