diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java
index 3ba786c17..c0276a5e7 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java
@@ -45,101 +45,101 @@ import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 public final class Main
 {
     /** the options to the command line */
     private static final Options OPTS = new Options();
     static {
         OPTS.addOption("c", true, "The check configuration file to use.");
         OPTS.addOption("r", true, "Traverse the directory for source files");
         OPTS.addOption("o", true, "Sets the output file. Defaults to stdout");
         OPTS.addOption("p", true, "Loads the properties file");
         OPTS.addOption("n", true, "Loads the package names file");
         OPTS.addOption(
             "f",
             true,
             "Sets the output format. (plain|xml). Defaults to plain");
     }
 
     /**
      * Loops over the files specified checking them for errors. The exit code
      * is the number of errors found in all the files.
      * @param aArgs the command line arguments
      **/
     public static void main(String[] aArgs)
     {
         // parse the parameters
         final CommandLineParser clp = new PosixParser();
         CommandLine line = null;
         try {
             line = clp.parse(OPTS, aArgs);
         }
         catch (ParseException e) {
             e.printStackTrace();
             usage();
         }
 
         // setup the properties
         final Properties props =
             line.hasOption("p")
                 ? loadProperties(new File(line.getOptionValue("p")))
                 : System.getProperties();
 
         // ensure a config file is specified
         if (!line.hasOption("c")) {
             System.out.println("Must specify a config XML file.");
             usage();
         }
 
         // Load the config file
         Configuration config = null;
         try {
             config = ConfigurationLoader.loadConfiguration(
-                    line.getOptionValue("c"), props);
+                    line.getOptionValue("c"), new PropertiesExpander(props));
         }
         catch (CheckstyleException e) {
             System.out.println("Error loading configuration file");
             e.printStackTrace(System.out);
             System.exit(1);
         }
 
         //Load the set of package names
         ModuleFactory moduleFactory = null;
         if (line.hasOption("n")) {
             try {
                 moduleFactory = PackageNamesLoader.loadModuleFactory(
                     line.getOptionValue("n"));
             }
             catch (CheckstyleException e) {
                 System.out.println("Error loading package names file");
                 e.printStackTrace(System.out);
                 System.exit(1);
             }
         }
 
         // setup the output stream
         OutputStream out = null;
         boolean closeOut = false;
         if (line.hasOption("o")) {
             final String fname = line.getOptionValue("o");
             try {
                 out = new FileOutputStream(fname);
                 closeOut = true;
             }
             catch (FileNotFoundException e) {
                 System.out.println("Could not find file: '" + fname + "'");
                 System.exit(1);
             }
         }
         else {
             out = System.out;
             closeOut = false;
         }
 
         // create the appropriate listener
         final String format =
             line.hasOption("f") ? line.getOptionValue("f") : "plain";
 
         AuditListener listener = null;
         if ("xml".equals(format)) {
             listener = new XMLLogger(out, closeOut);
         }
         else if ("plain".equals(format)) {
             listener = new DefaultLogger(out, closeOut);
