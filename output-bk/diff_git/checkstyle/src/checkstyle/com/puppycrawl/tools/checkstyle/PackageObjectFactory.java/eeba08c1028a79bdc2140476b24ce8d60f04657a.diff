diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
index 1e45a750b..272545e24 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
@@ -69,90 +69,90 @@ class PackageObjectFactory implements ModuleFactory
     /**
      * Creates a new instance of a class from a given name. If the name is
      * a classname, creates an instance of the named class. Otherwise, creates
      * an instance of a classname obtained by concatenating the given
      * to a package name from a given list of package names.
      * @param aName the name of a class.
      * @return the <code>Object</code>
      * @throws CheckstyleException if an error occurs.
      */
     private Object doMakeObject(String aName)
         throws CheckstyleException
     {
         //try aName first
         try {
             return createObject(aName);
         }
         catch (CheckstyleException ex) {
             ; // keep looking
         }
 
         //now try packages
         for (int i = 0; i < mPackages.size(); i++) {
             final String packageName = (String) mPackages.get(i);
             final String className = packageName + aName;
             try {
                 return createObject(className);
             }
             catch (CheckstyleException ex) {
                 ; // keep looking
             }
         }
 
         throw new CheckstyleException("Unable to instantiate " + aName);
     }
 
     /**
      * Creates a new instance of a named class.
      * @param aClassName the name of the class to instantiate.
      * @return the <code>Object</code> created by mLoader.
      * @throws CheckstyleException if an error occurs.
      */
     private Object createObject(String aClassName)
         throws CheckstyleException
     {
         try {
             final Class clazz = Class.forName(aClassName, true, mLoader);
             return clazz.newInstance();
         }
         catch (ClassNotFoundException e) {
             throw new CheckstyleException(
-                "Unable to find class for " + aClassName);
+                "Unable to find class for " + aClassName, e);
         }
         catch (InstantiationException e) {
             throw new CheckstyleException(
-                "Unable to instantiate " + aClassName);
+                "Unable to instantiate " + aClassName, e);
         }
         catch (IllegalAccessException e) {
             throw new CheckstyleException(
-                "Unable to instantiate " + aClassName);
+                "Unable to instantiate " + aClassName, e);
         }
     }
 
     /**
      * Creates a new instance of a class from a given name, or that name
      * concatenated with &quot;Check&quot;. If the name is
      * a classname, creates an instance of the named class. Otherwise, creates
      * an instance of a classname obtained by concatenating the given name
      * to a package name from a given list of package names.
      * @param aName the name of a class.
      * @return the <code>Object</code> created by aLoader.
      * @throws CheckstyleException if an error occurs.
      */
     public Object createModule(String aName)
         throws CheckstyleException
     {
         try {
             return doMakeObject(aName);
         }
         catch (CheckstyleException ex) {
             //try again with suffix "Check"
             try {
                 return doMakeObject(aName + "Check");
             }
             catch (CheckstyleException ex2) {
                 throw new CheckstyleException(
-                    "Unable to instantiate " + aName);
+                    "Unable to instantiate " + aName, ex2);
             }
         }
     }
 }
