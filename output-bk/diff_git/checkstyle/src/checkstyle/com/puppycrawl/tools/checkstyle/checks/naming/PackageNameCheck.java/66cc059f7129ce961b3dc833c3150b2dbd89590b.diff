diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/PackageNameCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/PackageNameCheck.java
index 9223794d3..da59a7526 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/PackageNameCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/PackageNameCheck.java
@@ -37,62 +37,61 @@ import com.puppycrawl.tools.checkstyle.checks.AbstractFormatCheck;
  * <a
  * href="http://java.sun.com/docs/books/jls/second_edition/html/packages.doc.html#40169">
  * Java Language specification</a> and the Sun coding conventions.
  * However both underscores and uppercase letters are rather uncommon,
  * so most projects should probably use
  * <strong>^[a-z]+(\.[a-z][a-z0-9]*)*$</strong>.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="PackageName"/&gt;
  * </pre>
  * <p>
  * An example of how to configure the check for package names that begin with
  * <code>com.puppycrawl.tools.checkstyle</code> is:
  * </p>
  * <pre>
  * &lt;module name="PackageName"&gt;
  *    &lt;property name="format"
  *              value="^com\.puppycrawl\.tools\.checkstyle(\\.[a-zA-Z_][a-zA-Z_0-9]*)*$"/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * @author Oliver Burn
  * @version 1.0
  */
 public class PackageNameCheck
     extends AbstractFormatCheck
 {
     /**
      * Creates a new <code>PackageNameCheck</code> instance.
      */
     public PackageNameCheck()
     {
         // Uppercase letters seem rather uncommon, but they're allowed in
         // http://java.sun.com/docs/books/jls/
         //   second_edition/html/packages.doc.html#40169
         super("^[a-z]+(\\.[a-zA-Z_][a-zA-Z0-9_]*)*$");
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.PACKAGE_DEF};
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void visitToken(DetailAST aAST)
     {
-        final DetailAST nameAST =
-            (DetailAST) aAST.getLastChild().getPreviousSibling();
+        final DetailAST nameAST = aAST.getLastChild().getPreviousSibling();
         final FullIdent full = FullIdent.createFullIdent(nameAST);
         if (!getRegexp().match(full.getText())) {
             log(full.getLineNo(),
                 full.getColumnNo(),
                 "name.invalidPattern",
                 full.getText(),
                 getFormat());
         }
     }
 }
