diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java
index 60821a80f..3a52e4252 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java
@@ -181,53 +181,59 @@ public class HandlerFactory
             LOG.debug("couldn't instantiate constructor for " + aAst, e);
             throw new RuntimeException("couldn't instantiate constructor for "
                                        + aAst);
         }
         catch (IllegalAccessException e) {
             LOG.debug("couldn't access constructor for " + aAst, e);
             throw new RuntimeException("couldn't access constructor for "
                                        + aAst);
         }
         catch (InvocationTargetException e) {
             LOG.debug("couldn't instantiate constructor for " + aAst, e);
             throw new RuntimeException("couldn't instantiate constructor for "
                                        + aAst);
         }
         if (expHandler == null) {
             throw new RuntimeException("no handler for type " + type);
         }
         ///CLOVER:ON
         return expHandler;
     }
 
     /**
      * Create new instance of handler for METHOD_CALL.
      *
      * @param aIndentCheck   the indentation check
      * @param aAst           ast to handle
      * @param aParent        the handler parent of this AST
      *
      * @return new instance.
      */
     ExpressionHandler createMethodCallHandler(IndentationCheck aIndentCheck,
         DetailAST aAst, ExpressionHandler aParent)
     {
         ExpressionHandler handler =
             (ExpressionHandler) mCreatedHandlers.get(aAst);
         if (handler != null) {
             return handler;
         }
 
         DetailAST ast = (DetailAST) aAst.getFirstChild();
         while (ast != null && ast.getType() == TokenTypes.DOT) {
             ast = (DetailAST) ast.getFirstChild();
         }
         if (ast != null && ast.getType() == TokenTypes.METHOD_CALL) {
             aParent = createMethodCallHandler(aIndentCheck, ast, aParent);
             mCreatedHandlers.put(ast, aParent);
         }
         return new MethodCallHandler(aIndentCheck, aAst, aParent);
     }
 
+    /** Clears cache of created handlers. */
+    void clearCreatedHandlers()
+    {
+        mCreatedHandlers.clear();
+    }
+
     /** cache for created method call handlers */
     private Map mCreatedHandlers = new HashMap();
 }
