diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java
index 024f2ea97..cd509f2c1 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java
@@ -183,162 +183,162 @@ public class BlockParentHandler extends ExpressionHandler
      *
      * @return false
      */
     protected boolean childrenMayNest()
     {
         return false;
     }
 
     /**
      * Check the indentation of the right curly brace.
      */
     protected void checkRCurly()
     {
         // the rcurly can either be at the correct indentation, or
         // on the same line as the lcurly
         DetailAST lcurly = getLCurly();
         DetailAST rcurly = getRCurly();
         if (rcurly == null
             || expandedTabsColumnNo(rcurly) == curlyLevel()
             || (!rcurlyMustStart() && !startsLine(rcurly))
             || areOnSameLine(rcurly, lcurly))
         {
             return;
         }
         logError(rcurly, "rcurly", expandedTabsColumnNo(rcurly));
     }
 
     /**
      * Get the child element that is not a list of statements.
      *
      * @return the non-list child element
      */
     protected DetailAST getNonlistChild()
     {
         return (DetailAST) getMainAst().findFirstToken(
             TokenTypes.RPAREN).getNextSibling();
     }
 
     /**
      * Check the indentation level of a child that is not a list of statements.
      */
     private void checkNonlistChild()
     {
         // TODO: look for SEMI and check for it here?
         DetailAST nonlist = getNonlistChild();
         if (nonlist == null) {
             return;
         }
 
         checkExpressionSubtree(nonlist, getLevel()
-                + getIndentCheck().getIndentationAmount());
+                + getIndentCheck().getBasicOffset());
     }
 
     /**
      * Get the child element representing the list of statements.
      *
      * @return the statement list child
      */
     protected DetailAST getListChild()
     {
         return getMainAst().findFirstToken(TokenTypes.SLIST);
     }
 
     /**
      * Get the right parenthesis portion of the expression we are handling.
      *
      * @return the right parenthis expression
      */
     protected DetailAST getRParen()
     {
         return getMainAst().findFirstToken(TokenTypes.RPAREN);
     }
 
     /**
      * Get the left parenthesis portion of the expression we are handling.
      *
      * @return the left parenthis expression
      */
     protected DetailAST getLParen()
     {
         return getMainAst().findFirstToken(TokenTypes.LPAREN);
     }
 
     /**
      * Check the indentation of the right parenthesis.
      */
     protected void checkRParen()
     {
         final DetailAST rparen = getRParen();
 
         // no paren - no check :)
         if (rparen == null) {
             return;
         }
 
         // the rcurly can either be at the correct indentation,
         // or not first on the line ...
         final int rparenLevel = expandedTabsColumnNo(rparen);
         if (rparenLevel == getLevel()
             || !startsLine(rparen))
         {
             return;
         }
 
         // or has <lparen level> + 1 indentation
         final DetailAST lparen = getLParen();
         final int lparenLevel = expandedTabsColumnNo(lparen);
         if (rparenLevel == (lparenLevel + 1)) {
             return;
         }
 
         logError(rparen, "rparen", expandedTabsColumnNo(rparen));
     }
 
     /**
      * Check the indentation of the left parenthesis.
      */
     protected void checkLParen()
     {
         // the rcurly can either be at the correct indentation, or on the
         // same line as the lcurly
         DetailAST lparen = getLParen();
         if (lparen == null
             || expandedTabsColumnNo(lparen) == getLevel()
             || !startsLine(lparen))
         {
             return;
         }
         logError(lparen, "lparen", expandedTabsColumnNo(lparen));
     }
 
     /**
      * Check the indentation of the expression we are handling.
      */
     public void checkIndentation()
     {
         checkToplevelToken();
         // seperate to allow for eventual configuration
         checkLParen();
         checkRParen();
         if (hasCurlys()) {
             checkLCurly();
             checkRCurly();
         }
         DetailAST listChild = getListChild();
         if (listChild != null) {
-            final int expectedLevel = 
-                getLevel() + getIndentCheck().getIndentationAmount();
+            final int expectedLevel =
+                getLevel() + getIndentCheck().getBasicOffset();
             // NOTE: switch statements usually don't have curlys
             if (!hasCurlys() || !areOnSameLine(getLCurly(), getRCurly())) {
                 checkChildren(listChild,
                               CHECKED_CHILDREN,
                               expectedLevel,
                               true,
                               childrenMayNest());
             }
         }
         else {
             checkNonlistChild();
         }
     }
 }
