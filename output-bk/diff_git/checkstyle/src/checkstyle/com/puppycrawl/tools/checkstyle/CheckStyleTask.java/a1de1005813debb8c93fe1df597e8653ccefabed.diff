diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
index e0bb216a0..3b6aa324f 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
@@ -334,127 +334,133 @@ public class CheckStyleTask
 
     /** @param aCacheFile the file to cache which files have been checked **/
     public void setCacheFile(File aCacheFile)
     {
         mConfig.setCacheFile(aCacheFile.getAbsolutePath());
     }
 
     /** @param aTo the left curly placement option for methods **/
     public void setLCurlyMethod(String aTo)
     {
         mConfig.setLCurlyMethod(extractLeftCurlyOption(aTo));
     }
 
     /** @param aTo the left curly placement option for types **/
     public void setLCurlyType(String aTo)
     {
         mConfig.setLCurlyType(extractLeftCurlyOption(aTo));
     }
 
     /** @param aTo the left curly placement option for others **/
     public void setLCurlyOther(String aTo)
     {
         mConfig.setLCurlyOther(extractLeftCurlyOption(aTo));
     }
 
     /** @param aTo the right curly placement option **/
     public void setRCurly(String aTo)
     {
         mConfig.setRCurly(extractRightCurlyOption(aTo));
     }
 
     ////////////////////////////////////////////////////////////////////////////
     // The doers
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Actually checks the files specified. All errors are reported to
      * System.out. Will fail if any errors occurred.
      * @throws BuildException an error occurred
      **/
     public void execute()
         throws BuildException
     {
         // Check for no arguments
         if ((mFileName == null) && (mFileSets.size() == 0)) {
             throw new BuildException("Must specify atleast one of 'file' " +
                                      "or nested 'fileset'.", location);
         }
 
         // Create the checker
-        final int numErrs;
         Checker c = null;
         try {
-            c = new Checker(mConfig);
-            AuditListener[] listeners = getListeners();
-            for (int i = 0; i < listeners.length; i++) {
-                c.addListener(listeners[i]);
+            try {
+                c = new Checker(mConfig);
+                // setup the listeners
+                AuditListener[] listeners = getListeners();
+                for (int i = 0; i < listeners.length; i++) {
+                    c.addListener(listeners[i]);
+                }
             }
+            catch (Exception e) {
+                throw new BuildException("Unable to create a Checker", e);
+            }
+
+            // Process the files
             final String[] files = scanFileSets();
-            numErrs = c.process(files);
-        }
-        catch (Exception e) {
-            throw new BuildException("Unable to create a Checker", e);
+            final int numErrs = c.process(files);
+
+            // Handle the return status
+            if ((numErrs > 0) && mFailureProperty != null) {
+                getProject().setProperty(mFailureProperty, "true");
+            }
+
+            if ((numErrs > 0) && mFailOnViolation) {
+                throw new BuildException("Got " + numErrs + " errors.",
+                                         location);
+            }
         }
         finally {
             if (c != null) {
                 c.destroy();
             }
         }
-
-        if ((numErrs > 0) && mFailureProperty != null) {
-            getProject().setProperty(mFailureProperty, "true");
-        }
-
-        if ((numErrs > 0) && mFailOnViolation) {
-            throw new BuildException("Got " + numErrs + " errors.", location);
-        }
     }
 
     /**
      * Return the list of listeners set in this task.
      * @return the list of listeners.
      * @throws ClassNotFoundException if an error occurs
      * @throws InstantiationException if an error occurs
      * @throws IllegalAccessException if an error occurs
      * @throws IOException if an error occurs
      */
     protected AuditListener[] getListeners()
         throws ClassNotFoundException, InstantiationException,
         IllegalAccessException, IOException
     {
         // @todo should we add a default plain stdout
         // formatter ?
         if (mFormatters.size() == 0) {
             final Formatter f = new Formatter();
             final FormatterType type = new FormatterType();
             type.setValue(E_PLAIN);
             f.setType(type);
             mFormatters.add(f);
         }
 
         final AuditListener[] listeners = new AuditListener[mFormatters.size()];
         for (int i = 0; i < listeners.length; i++) {
             final Formatter f = (Formatter) mFormatters.get(i);
             listeners[i] = f.createListener(this);
         }
         return listeners;
     }
 
     /**
      * returns the list of files (full path name) to process.
      * @return the list of files included via the filesets.
      */
     protected String[] scanFileSets()
     {
         final ArrayList list = new ArrayList();
         if (mFileName != null) {
             // oops we've got an additional one to process, don't
             // forget it. No sweat, it's fully resolved via the setter.
             log("Adding standalone file for audit", Project.MSG_VERBOSE);
             list.add(mFileName);
         }
         for (int i = 0; i < mFileSets.size(); i++) {
             final FileSet fs = (FileSet) mFileSets.get(i);
             final DirectoryScanner ds = fs.getDirectoryScanner(getProject());
             ds.scan();
 
