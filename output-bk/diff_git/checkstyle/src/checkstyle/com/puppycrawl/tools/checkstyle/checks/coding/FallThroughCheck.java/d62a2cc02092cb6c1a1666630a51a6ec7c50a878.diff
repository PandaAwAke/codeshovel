diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
index 322fbe4bb..6913c71e8 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
@@ -75,276 +75,276 @@ public class FallThroughCheck extends Check
     private Pattern mRegExp;
 
     /** Creates new instance of the check. */
     public FallThroughCheck()
     {
         // do nothing
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[]{TokenTypes.CASE_GROUP};
     }
 
     @Override
     public int[] getRequiredTokens()
     {
         return getDefaultTokens();
     }
 
     /**
      * Set the relief pattern.
      *
      * @param aPattern
      *            The regular expression pattern.
      */
     public void setReliefPattern(String aPattern)
     {
         mReliefPattern = aPattern;
     }
 
     /**
      * Configures whether we need to check last case group or not.
      * @param aValue new value of the property.
      */
     public void setCheckLastCaseGroup(boolean aValue)
     {
         mCheckLastGroup = aValue;
     }
 
     @Override
     public void init()
     {
         super.init();
         mRegExp = Utils.getPattern(mReliefPattern);
     }
 
     @Override
     public void visitToken(DetailAST aAST)
     {
-        final DetailAST nextGroup = (DetailAST) aAST.getNextSibling();
+        final DetailAST nextGroup = aAST.getNextSibling();
         final boolean isLastGroup =
             ((nextGroup == null)
              || (nextGroup.getType() != TokenTypes.CASE_GROUP));
         if (isLastGroup && !mCheckLastGroup) {
             // we do not need to check last group
             return;
         }
 
         final DetailAST slist = aAST.findFirstToken(TokenTypes.SLIST);
 
         if (!isTerminated(slist, true, true)) {
             if (!hasFallTruComment(aAST, nextGroup)) {
                 if (!isLastGroup) {
                     log(nextGroup, "fall.through");
                 }
                 else {
                     log(aAST, "fall.through.last");
                 }
             }
         }
     }
 
     /**
      * Checks if a given subtree terminated by return, throw or,
      * if allowed break, continue.
      * @param aAST root of given subtree
      * @param aUseBreak should we consider break as terminator.
      * @param aUseContinue should we consider continue as terminator.
      * @return true if the subtree is terminated.
      */
     private boolean isTerminated(final DetailAST aAST, boolean aUseBreak,
                                  boolean aUseContinue)
     {
         switch (aAST.getType()) {
         case TokenTypes.LITERAL_RETURN:
         case TokenTypes.LITERAL_THROW:
             return true;
         case TokenTypes.LITERAL_BREAK:
             return aUseBreak;
         case TokenTypes.LITERAL_CONTINUE:
             return aUseContinue;
         case TokenTypes.SLIST:
             return checkSlist(aAST, aUseBreak, aUseContinue);
         case TokenTypes.LITERAL_IF:
             return checkIf(aAST, aUseBreak, aUseContinue);
         case TokenTypes.LITERAL_FOR:
         case TokenTypes.LITERAL_WHILE:
         case TokenTypes.LITERAL_DO:
             return checkLoop(aAST);
         case TokenTypes.LITERAL_TRY:
             return checkTry(aAST, aUseBreak, aUseContinue);
         case TokenTypes.LITERAL_SWITCH:
             return checkSwitch(aAST, aUseContinue);
         default:
             return false;
         }
     }
 
     /**
      * Checks if a given SLIST terminated by return, throw or,
      * if allowed break, continue.
      * @param aAST SLIST to check
      * @param aUseBreak should we consider break as terminator.
      * @param aUseContinue should we consider continue as terminator.
      * @return true if SLIST is terminated.
      */
     private boolean checkSlist(final DetailAST aAST, boolean aUseBreak,
                                boolean aUseContinue)
     {
         DetailAST lastStmt = aAST.getLastChild();
         if (lastStmt == null) {
             // if last case in switch is empty then slist is empty
             // since this is a last case it is not a fall-through
             return true;
         }
 
         if (lastStmt.getType() == TokenTypes.RCURLY) {
             lastStmt = lastStmt.getPreviousSibling();
         }
 
         return (lastStmt != null)
             && isTerminated(lastStmt, aUseBreak, aUseContinue);
     }
 
     /**
      * Checks if a given IF terminated by return, throw or,
      * if allowed break, continue.
      * @param aAST IF to check
      * @param aUseBreak should we consider break as terminator.
      * @param aUseContinue should we consider continue as terminator.
      * @return true if IF is terminated.
      */
     private boolean checkIf(final DetailAST aAST, boolean aUseBreak,
                             boolean aUseContinue)
     {
-        final DetailAST thenStmt = (DetailAST)
-            aAST.findFirstToken(TokenTypes.RPAREN).getNextSibling();
-        final DetailAST elseStmt = (DetailAST) thenStmt.getNextSibling();
+        final DetailAST thenStmt = aAST.findFirstToken(TokenTypes.RPAREN)
+                .getNextSibling();
+        final DetailAST elseStmt = thenStmt.getNextSibling();
         boolean isTerminated = isTerminated(thenStmt, aUseBreak, aUseContinue);
 
         if (isTerminated && (elseStmt != null)) {
-            isTerminated = isTerminated((DetailAST) elseStmt.getFirstChild(),
+            isTerminated = isTerminated(elseStmt.getFirstChild(),
                                         aUseBreak, aUseContinue);
         }
         return isTerminated;
     }
 
     /**
      * Checks if a given loop terminated by return, throw or,
      * if allowed break, continue.
      * @param aAST loop to check
      * @return true if loop is terminated.
      */
     private boolean checkLoop(final DetailAST aAST)
     {
         DetailAST loopBody = null;
         if (aAST.getType() == TokenTypes.LITERAL_DO) {
             final DetailAST lparen = aAST.findFirstToken(TokenTypes.DO_WHILE);
             loopBody = lparen.getPreviousSibling();
         }
         else {
             final DetailAST rparen = aAST.findFirstToken(TokenTypes.RPAREN);
-            loopBody = (DetailAST) rparen.getNextSibling();
+            loopBody = rparen.getNextSibling();
         }
         return isTerminated(loopBody, false, false);
     }
 
     /**
      * Checks if a given try/catch/finally block terminated by return, throw or,
      * if allowed break, continue.
      * @param aAST loop to check
      * @param aUseBreak should we consider break as terminator.
      * @param aUseContinue should we consider continue as terminator.
      * @return true if try/cath/finally block is terminated.
      */
     private boolean checkTry(final DetailAST aAST, boolean aUseBreak,
                              boolean aUseContinue)
     {
         final DetailAST finalStmt = aAST.getLastChild();
         if (finalStmt.getType() == TokenTypes.LITERAL_FINALLY) {
             return isTerminated(finalStmt.findFirstToken(TokenTypes.SLIST),
                                 aUseBreak, aUseContinue);
         }
 
-        boolean isTerminated = isTerminated((DetailAST) aAST.getFirstChild(),
+        boolean isTerminated = isTerminated(aAST.getFirstChild(),
                                             aUseBreak, aUseContinue);
 
         DetailAST catchStmt = aAST.findFirstToken(TokenTypes.LITERAL_CATCH);
         while ((catchStmt != null) && isTerminated) {
             final DetailAST catchBody =
                 catchStmt.findFirstToken(TokenTypes.SLIST);
             isTerminated &= isTerminated(catchBody, aUseBreak, aUseContinue);
-            catchStmt = (DetailAST) catchStmt.getNextSibling();
+            catchStmt = catchStmt.getNextSibling();
         }
         return isTerminated;
     }
 
     /**
      * Checks if a given switch terminated by return, throw or,
      * if allowed break, continue.
      * @param aAST loop to check
      * @param aUseContinue should we consider continue as terminator.
      * @return true if switch is terminated.
      */
     private boolean checkSwitch(final DetailAST aAST, boolean aUseContinue)
     {
         DetailAST caseGroup = aAST.findFirstToken(TokenTypes.CASE_GROUP);
         boolean isTerminated = (caseGroup != null);
         while (isTerminated && (caseGroup != null)
                && (caseGroup.getType() != TokenTypes.RCURLY))
         {
             final DetailAST caseBody =
                 caseGroup.findFirstToken(TokenTypes.SLIST);
             isTerminated &= isTerminated(caseBody, false, aUseContinue);
-            caseGroup = (DetailAST) caseGroup.getNextSibling();
+            caseGroup = caseGroup.getNextSibling();
         }
         return isTerminated;
     }
 
     /**
      * Determines if the fall through case between <code>aCurrentCase</code> and
      * <code>aNextCase</code> is reliefed by a appropriate comment.
      *
      * @param aCurrentCase AST of the case that falls through to the next case.
      * @param aNextCase AST of the next case.
      * @return True if a relief comment was found
      */
     private boolean hasFallTruComment(DetailAST aCurrentCase,
             DetailAST aNextCase)
     {
 
         final int startLineNo = aCurrentCase.getLineNo();
         final int endLineNo = aNextCase.getLineNo();
         final int endColNo = aNextCase.getColumnNo();
 
         /*
          * Remember: The lines number returned from the AST is 1-based, but
          * the lines number in this array are 0-based. So you will often
          * see a "lineNo-1" etc.
          */
         final String[] lines = getLines();
 
         /*
          * Handle:
          *    case 1:
          *    /+ FALLTHRU +/ case 2:
          *    ....
          * and
          *    switch(i) {
          *    default:
          *    /+ FALLTHRU +/}
          */
         final String linepart = lines[endLineNo - 1].substring(0, endColNo);
         if (commentMatch(mRegExp, linepart, endLineNo)) {
             return true;
         }
 
         /*
          * Handle:
          *    case 1:
          *    .....
          *    // FALLTHRU
          *    case 2:
          *    ....
          * and
