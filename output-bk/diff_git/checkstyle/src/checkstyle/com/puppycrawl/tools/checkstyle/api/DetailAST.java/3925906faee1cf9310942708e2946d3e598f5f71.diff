diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/DetailAST.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/DetailAST.java
index cd29871cf..9113b264b 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/DetailAST.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/DetailAST.java
@@ -38,135 +38,164 @@ import antlr.collections.AST;
 public final class DetailAST
     extends CommonAST
 {
     /** constant to indicate if not calculated the child count */
     private static final int NOT_INITIALIZED = Integer.MIN_VALUE;
 
     /** the line number **/
     private int mLineNo = NOT_INITIALIZED;
     /** the column number **/
     private int mColumnNo = NOT_INITIALIZED;
 
     /** number of children */
     private int mChildCount = NOT_INITIALIZED;
     /** the parent token */
     private DetailAST mParent;
 
     /**
      * All token types in this branch, sorted.
      *
      * Note: This is not a Set to avoid creating zillions of
      * Integer objects in branchContains().
      */
     private int[] mBranchTokenTypes = null;
 
     /** @see antlr.CommonAST **/
     public void initialize(Token aTok)
     {
         super.initialize(aTok);
         mLineNo = aTok.getLine();
         mColumnNo = aTok.getColumn() - 1; // expect columns to start @ 0
     }
 
     /** @see antlr.CommonAST **/
     public void initialize(AST aAST)
     {
         final DetailAST da = (DetailAST) aAST;
         setText(da.getText());
         setType(da.getType());
         mLineNo = da.getLineNo();
         mColumnNo = da.getColumnNo();
     }
 
     /**
      * Sets this AST's first Child
      * @param aAST the new first child
      */
     public void setFirstChild(AST aAST)
     {
         mChildCount = NOT_INITIALIZED;
         super.setFirstChild(aAST);
+        if (aAST != null) {
+            ((DetailAST) aAST).setParent(this);
+        }
     }
 
+    /**
+     * Sets AST's next sibling
+     * @param aAST the new next sibling
+     */
+    public void setNextSibling(AST aAST)
+    {
+        super.setNextSibling(aAST);
+        if (aAST != null && mParent != null) {
+            ((DetailAST) aAST).setParent(mParent);
+        }
+    }
 
+    /**
+     * Adds new child to AST
+     * @param aAST the new child
+     */
+    public void addChild(AST aAST)
+    {
+        super.addChild(aAST);
+        if (aAST != null) {
+            ((DetailAST) aAST).setParent(this);
+        }
+    }
 
     /**
      * Returns the number of child nodes one level below this node. That is is
      * does not recurse down the tree.
      * @return the number of child nodes
      */
     public int getChildCount()
     {
         // lazy init
         if (mChildCount == NOT_INITIALIZED) {
             mChildCount = 0;
             AST child = getFirstChild();
 
             while (child != null) {
                 mChildCount += 1;
                 child = child.getNextSibling();
             }
         }
         return mChildCount;
     }
 
     /**
      * Set the parent token.
      * @param aParent the parent token
      */
     // TODO: should be private but that breaks the DetailASTTest
     // until we manage parent in DetailAST instead of externally
     void setParent(DetailAST aParent)
     {
         // TODO: Check visibility, could be private
         // if set in setFirstChild() and friends
         mParent = aParent;
+        DetailAST nextSibling = (DetailAST) getNextSibling();
+        if (nextSibling != null) {
+            nextSibling.setParent(aParent);
+        }
     }
 
     /**
      * Returns the parent token
      * @return the parent token
      */
     public DetailAST getParent()
     {
         return mParent;
     }
 
     /** @return the line number **/
     public int getLineNo()
     {
         if (mLineNo == NOT_INITIALIZED) {
             // an inner AST that has been initialized
             // with initialize(String text)
             final DetailAST child = (DetailAST) getFirstChild();
             final DetailAST sibling = (DetailAST) getNextSibling();
             if (child != null) {
                 return child.getLineNo();
             }
             else if (sibling != null) {
                 return sibling.getLineNo();
             }
         }
         return mLineNo;
     }
 
     /** @return the column number **/
     public int getColumnNo()
     {
         if (mColumnNo == NOT_INITIALIZED) {
             // an inner AST that has been initialized
             // with initialize(String text)
             final DetailAST child = (DetailAST) getFirstChild();
             final DetailAST sibling = (DetailAST) getNextSibling();
             if (child != null) {
                 return child.getColumnNo();
             }
             else if (sibling != null) {
                 return sibling.getColumnNo();
             }
         }
         return mColumnNo;
     }
 
     /** @return the last child node */
     public DetailAST getLastChild()
     {
