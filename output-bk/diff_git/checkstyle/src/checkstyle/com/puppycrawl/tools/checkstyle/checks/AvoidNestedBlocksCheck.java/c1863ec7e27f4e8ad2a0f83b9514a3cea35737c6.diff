diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AvoidNestedBlocksCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AvoidNestedBlocksCheck.java
index a05f2940c..7a71030be 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AvoidNestedBlocksCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AvoidNestedBlocksCheck.java
@@ -16,56 +16,55 @@
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 
 /**
  * Finds nested blocks.
  * For example this Check finds the obsolete braces in
  * <pre>
  * switch (a)
  * {
  *     case 0:
  *         {
  *             x = 1;
  *         }
  *         break;
  *     default:
  *         break;
  * }
  * </pre>
  * and flags confusing code like
  * <pre>
  * public void guessTheOutput()
  * {
  *     int whichIsWich = 0;
  *     {
  *         int whichIsWhich = 2;
  *     }
  *     System.out.println("value = " + whichIsWhich);
  * }
  * </pre>
  *
  * @author lkuehne
  */
 public class AvoidNestedBlocksCheck extends Check
 {
     /** @see Check */
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.SLIST};
     }
 
     /** @see Check */
     public void visitToken(DetailAST aAST)
     {
         if (aAST.getParent().getType() == TokenTypes.SLIST) {
-            // TODO: i18n
-            log(aAST.getLineNo(), aAST.getColumnNo(), "Avoid nested blocks");
+            log(aAST.getLineNo(), aAST.getColumnNo(), "block.nested");
         }
     }
 
 }
