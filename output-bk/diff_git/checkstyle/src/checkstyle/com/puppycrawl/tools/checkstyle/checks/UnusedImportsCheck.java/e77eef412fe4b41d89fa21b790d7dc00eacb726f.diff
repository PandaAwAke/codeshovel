diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/UnusedImportsCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/UnusedImportsCheck.java
index 996d41ac5..5a780fece 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/UnusedImportsCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/UnusedImportsCheck.java
@@ -23,103 +23,100 @@ import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FullIdent;
 
 import java.util.HashSet;
 import java.util.Set;
 import java.util.Iterator;
 
 /**
  * <p>
  * Checks for unused import statements.
  * </p>
  *  <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="UnusedImports"/&gt;
  * </pre>
  * @author <a href="mailto:checkstyle@puppycrawl.com">Oliver Burn</a>
  * @version 1.0
  */
 public class UnusedImportsCheck
     extends AbstractImportCheck
 {
     /** flag to indicate when time to start collecting references */
     private boolean mCollect;
     /** set of the imports */
     private final Set mImports = new HashSet();
     /** set of references - possibly to imports or other things */
     private final Set mReferenced = new HashSet();
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void beginTree()
     {
         mCollect = false;
         mImports.clear();
         mReferenced.clear();
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void finishTree()
     {
         // loop over all the imports to see if referenced.
         final Iterator it = mImports.iterator();
         while (it.hasNext()) {
             final FullIdent imp = (FullIdent) it.next();
 
             if (!mReferenced.contains(basename(imp.getText()))) {
                 log(imp.getLineNo(),
                     imp.getColumnNo(),
                     "import.unused", imp.getText());
             }
-//          else if (isIllegalImport(imp.getText())) {
-//              mMessages.add(imp.getLineNo(), "import.illegal", imp.getText());
-//          }
         }
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.IMPORT,
                           TokenTypes.CLASS_DEF,
                           TokenTypes.INTERFACE_DEF,
                           TokenTypes.IDENT};
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void visitToken(DetailAST aAST)
     {
         if (aAST.getType() == TokenTypes.IDENT) {
             if (mCollect) {
                 processIdent(aAST);
             }
         }
         else if (aAST.getType() == TokenTypes.IMPORT) {
             processImport(aAST);
         }
         else if ((aAST.getType() == TokenTypes.CLASS_DEF)
             || (aAST.getType() == TokenTypes.INTERFACE_DEF))
         {
             mCollect = true;
         }
     }
 
     /**
      * Collects references made by IDENT.
      * @param aAST the IDENT node to process
      */
     private void processIdent(DetailAST aAST)
     {
         // TODO: should be a lot smarter in selection. Currently use
         // same algorithm as real checkstyle
         final DetailAST parent = aAST.getParent();
         if (parent.getType() == TokenTypes.DOT) {
             if (aAST.getNextSibling() != null) {
                 mReferenced.add(aAST.getText());
             }
         }
         else {
             mReferenced.add(aAST.getText());
         }
     }
 
     /**
