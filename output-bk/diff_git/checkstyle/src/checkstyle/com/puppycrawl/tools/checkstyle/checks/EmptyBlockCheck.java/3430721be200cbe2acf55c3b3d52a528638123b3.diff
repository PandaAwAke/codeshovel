diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/EmptyBlockCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/EmptyBlockCheck.java
index 5141d5537..4aacc042c 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/EmptyBlockCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/EmptyBlockCheck.java
@@ -33,95 +33,95 @@ public class EmptyBlockCheck extends AbstractOptionCheck
      */
     public EmptyBlockCheck()
     {
         super(BlockOption.STMT);
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.LITERAL_WHILE,
             TokenTypes.LITERAL_TRY,
             TokenTypes.LITERAL_CATCH,
             TokenTypes.LITERAL_FINALLY,
             TokenTypes.LITERAL_DO,
             TokenTypes.LITERAL_IF,
             TokenTypes.LITERAL_ELSE,
             TokenTypes.LITERAL_FOR,
             TokenTypes.STATIC_INIT,
             // TODO: need to handle....
             //TokenTypes.LITERAL_SWITCH,
             //TODO: does this handle TokenTypes.LITERAL_SYNCHRONIZED?
         };
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void visitToken(DetailAST aAST)
     {
         final DetailAST slistAST = aAST.findFirstToken(TokenTypes.SLIST);
         if (slistAST != null) {
             if (getAbstractOption() == BlockOption.STMT) {
                 if (slistAST.getChildCount() <= 1) {
                     log(slistAST.getLineNo(),
                         slistAST.getColumnNo(),
                         "block.noStmt",
                         aAST.getText());
                 }
             }
             else if (getAbstractOption() == BlockOption.TEXT) {
                 if (!hasText(slistAST)) {
                     log(slistAST.getLineNo(),
                         slistAST.getColumnNo(),
                         "block.empty",
                         aAST.getText());
                 }
             }
         }
     }
 
     /**
-     * @param slistAST a <code>DetailAST</code> value
+     * @param aSlistAST a <code>DetailAST</code> value
      * @return whether the SLIST token contains any text.
      */
-    private boolean hasText(final DetailAST slistAST)
+    private boolean hasText(final DetailAST aSlistAST)
     {
         boolean retVal = false;
 
-        final DetailAST rcurlyAST = slistAST.findFirstToken(TokenTypes.RCURLY);
+        final DetailAST rcurlyAST = aSlistAST.findFirstToken(TokenTypes.RCURLY);
         if (rcurlyAST != null) {
-            final int slistLineNo = slistAST.getLineNo();
-            final int slistColNo = slistAST.getColumnNo();
+            final int slistLineNo = aSlistAST.getLineNo();
+            final int slistColNo = aSlistAST.getColumnNo();
             final int rcurlyLineNo = rcurlyAST.getLineNo();
             final int rcurlyColNo = rcurlyAST.getColumnNo();
             final String[] lines = getLines();
             if (slistLineNo == rcurlyLineNo) {
                 // Handle braces on the same line
                 final String txt = lines[slistLineNo - 1]
                     .substring(slistColNo + 1, rcurlyColNo);
                 if (txt.trim().length() != 0) {
                      retVal = true;
                 }
             }
             else {
                 // check only whitespace of first & last lines
                 if ((lines[slistLineNo - 1]
                      .substring(slistColNo + 1).trim().length() != 0)
                     || (lines[rcurlyLineNo - 1]
                         .substring(0, rcurlyColNo).trim().length() != 0))
                 {
                     retVal = true;
                 }
                 else {
                     // check if all lines are also only whitespace
                     for (int i = slistLineNo; i < (rcurlyLineNo - 1); i++) {
                         if (lines[i].trim().length() > 0) {
                             retVal = true;
                             break;
                         }
                     }
                 }
             }
         }
         return retVal;
     }
 }
