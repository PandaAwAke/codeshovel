diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
index 07af9819c..f6fbb9e17 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
@@ -260,117 +260,128 @@ public class JavadocMethodCheck
     public int[] getRequiredTokens()
     {
         return new int[] {
             TokenTypes.PACKAGE_DEF,
             TokenTypes.IMPORT,
         };
     }
 
     /**
      * Checks Javadoc comments for a method or constructor.
      * @param aAST the tree node for the method or constructor.
      */
     protected final void processAST(DetailAST aAST)
     {
         final DetailAST mods = aAST.findFirstToken(TokenTypes.MODIFIERS);
         final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);
         final Scope targetScope =
             ScopeUtils.inInterfaceBlock(aAST)
                 ? Scope.PUBLIC
                 : declaredScope;
 
         if (targetScope.isIn(mScope)) {
             final Scope surroundingScope =
                 ScopeUtils.getSurroundingScope(aAST);
 
             if (surroundingScope.isIn(mScope)) {
                 final FileContents contents = getFileContents();
                 final TextBlock cmt =
                     contents.getJavadocBefore(aAST.getLineNo());
 
                 if (cmt == null) {
                     log(aAST.getLineNo(),
                         aAST.getColumnNo(),
                         "javadoc.missing");
                 }
                 else {
                     checkComment(aAST, cmt);
                 }
             }
         }
     }
 
     /**
      * Checks the Javadoc for a method.
      * @param aAST the token for the method
      * @param aComment the Javadoc comment
      */
     private void checkComment(DetailAST aAST, TextBlock aComment)
     {
         final List tags = getMethodTags(aComment);
-        // Check for only one @see tag
-        if ((tags.size() != 1)
-            || !((JavadocTag) tags.get(0)).isSeeOrInheritDocTag())
+
+        // Check for only one @see or inheritDoc tag
+        if ((tags.size() == 1)
+            && ((JavadocTag) tags.get(0)).isSeeOrInheritDocTag())
         {
-            checkParamTags(tags, getParameters(aAST));
-            checkThrowsTags(tags, getThrows(aAST));
-            if (isFunction(aAST)) {
-                checkReturnTag(tags, aAST.getLineNo());
-            }
+            return;
+        }
 
-            // Dump out all unused tags
-            final Iterator it = tags.iterator();
-            while (it.hasNext()) {
-                final JavadocTag jt = (JavadocTag) it.next();
-                if (!jt.isSeeOrInheritDocTag()) {
-                    log(jt.getLineNo(), "javadoc.unusedTagGeneral");
-                }
+        // Check for inheritDoc
+        boolean hasInheritDocTag = false;
+        Iterator it = tags.iterator();
+        while (it.hasNext() && !hasInheritDocTag) {
+            hasInheritDocTag |=
+                ((JavadocTag) it.next()).isInheritDocTag();
+        }
+
+        checkParamTags(tags, getParameters(aAST), !hasInheritDocTag);
+        checkThrowsTags(tags, getThrows(aAST), !hasInheritDocTag);
+        if (isFunction(aAST)) {
+            checkReturnTag(tags, aAST.getLineNo(), !hasInheritDocTag);
+        }
+
+        // Dump out all unused tags
+        it = tags.iterator();
+        while (it.hasNext()) {
+            final JavadocTag jt = (JavadocTag) it.next();
+            if (!jt.isSeeOrInheritDocTag()) {
+                log(jt.getLineNo(), "javadoc.unusedTagGeneral");
             }
         }
     }
 
     /**
      * Returns the tags in a javadoc comment. Only finds throws, exception,
      * param, return and see tags.
      * @return the tags found
      * @param aComment the Javadoc comment
      */
     private List getMethodTags(TextBlock aComment)
     {
         final String[] lines = aComment.getText();
         final List tags = new ArrayList();
         int currentLine = aComment.getStartLineNo() - 1;
 
         for (int i = 0; i < lines.length; i++) {
             currentLine++;
             if (MATCH_JAVADOC_ARG.match(lines[i])) {
                 tags.add(new JavadocTag(currentLine,
                                         MATCH_JAVADOC_ARG.getParen(1),
                                         MATCH_JAVADOC_ARG.getParen(2)));
             }
             else if (MATCH_JAVADOC_NOARG.match(lines[i])) {
                 tags.add(new JavadocTag(currentLine,
                                         MATCH_JAVADOC_NOARG.getParen(1)));
             }
             else if (MATCH_JAVADOC_NOARG_CURLY.match(lines[i])) {
                 tags.add(new JavadocTag(currentLine,
                                         MATCH_JAVADOC_NOARG_CURLY.getParen(1)));
             }
             else if (MATCH_JAVADOC_ARG_MULTILINE_START.match(lines[i])) {
                 final String p1 = MATCH_JAVADOC_ARG_MULTILINE_START.getParen(1);
                 final String p2 = MATCH_JAVADOC_ARG_MULTILINE_START.getParen(2);
 
                 // Look for the rest of the comment if all we saw was
                 // the tag and the name. Stop when we see '*/' (end of
                 // Javadoc, '@' (start of next tag), or anything that's
                 // not whitespace or '*' characters.
                 int remIndex = i + 1;
                 while (remIndex < lines.length) {
                     if (MATCH_JAVADOC_MULTILINE_CONT.match(lines[remIndex])) {
                         remIndex = lines.length;
                         String lFin = MATCH_JAVADOC_MULTILINE_CONT.getParen(1);
                         if (!lFin.equals(NEXT_TAG)
                             && !lFin.equals(END_JAVADOC))
                         {
                             tags.add(new JavadocTag(currentLine, p1, p2));
                         }
                     }
@@ -408,260 +419,269 @@ public class JavadocMethodCheck
      * @param aAST the method node.
      * @return the list of parameter nodes for aAST.
      **/
     private List getParameters(DetailAST aAST)
     {
         final DetailAST params = aAST.findFirstToken(TokenTypes.PARAMETERS);
         final List retVal = new ArrayList();
 
         DetailAST child = (DetailAST) params.getFirstChild();
         while (child != null) {
             if (child.getType() == TokenTypes.PARAMETER_DEF) {
                 final DetailAST ident = child.findFirstToken(TokenTypes.IDENT);
                 retVal.add(ident);
             }
             child = (DetailAST) child.getNextSibling();
         }
         return retVal;
     }
 
      /**
      * Computes the exception nodes for a method.
      * @param aAST the method node.
      * @return the list of exception nodes for aAST.
      **/
     private List getThrows(DetailAST aAST)
     {
         final List retVal = new ArrayList();
         final DetailAST throwsAST =
             aAST.findFirstToken(TokenTypes.LITERAL_THROWS);
         if (throwsAST != null) {
             DetailAST child = (DetailAST) throwsAST.getFirstChild();
             while (child != null) {
                 if ((child.getType() == TokenTypes.IDENT)
                     || (child.getType() == TokenTypes.DOT))
                 {
                     final ExceptionInfo ei =
                         new ExceptionInfo(FullIdent.createFullIdent(child));
                     retVal.add(ei);
                 }
                 child = (DetailAST) child.getNextSibling();
             }
         }
         return retVal;
     }
 
 
     /**
      * Checks a set of tags for matching parameters.
      * @param aTags the tags to check
      * @param aParams the list of parameters to check
+     * @param aReportExpectedTags whether we should report if do
+     *        not find expected tag
      **/
-    private void checkParamTags(List aTags, List aParams)
+    private void checkParamTags(List aTags, List aParams,
+                                boolean aReportExpectedTags)
     {
         // Loop over the tags, checking to see they exist in the params.
         final ListIterator tagIt = aTags.listIterator();
         while (tagIt.hasNext()) {
             final JavadocTag tag = (JavadocTag) tagIt.next();
 
             if (!tag.isParamTag()) {
                 continue;
             }
 
             tagIt.remove();
 
             // Loop looking for matching param
             boolean found = false;
             final Iterator paramIt = aParams.iterator();
             while (paramIt.hasNext()) {
                 final DetailAST param = (DetailAST) paramIt.next();
                 if (param.getText().equals(tag.getArg1())) {
                     found = true;
                     paramIt.remove();
                     break;
                 }
             }
 
             // Handle extra JavadocTag
             if (!found) {
                 log(tag.getLineNo(), "javadoc.unusedTag",
                               "@param", tag.getArg1());
             }
         }
 
         // Now dump out all parameters without tags :- unless
         // the user has chosen to suppress these problems
-        if (!mAllowMissingParamTags) {
+        if (!mAllowMissingParamTags && aReportExpectedTags) {
             final Iterator paramIt = aParams.iterator();
             while (paramIt.hasNext()) {
                 final DetailAST param = (DetailAST) paramIt.next();
                 log(param.getLineNo(), param.getColumnNo(),
                     "javadoc.expectedTag", "@param", param.getText());
             }
         }
     }
 
     /**
      * Checks whether a method is a function.
      * @param aAST the method node.
      * @return whether the method is a function.
      **/
     private boolean isFunction(DetailAST aAST)
     {
         boolean retVal = false;
         if (aAST.getType() == TokenTypes.METHOD_DEF) {
             final DetailAST typeAST = aAST.findFirstToken(TokenTypes.TYPE);
             if ((typeAST != null)
                 && (typeAST.findFirstToken(TokenTypes.LITERAL_VOID) == null))
             {
                 retVal = true;
             }
         }
         return retVal;
     }
 
     /**
      * Checks for only one return tag. All return tags will be removed from the
      * supplied list.
      * @param aTags the tags to check
      * @param aLineNo the line number of the expected tag
+     * @param aReportExpectedTags whether we should report if do
+     *        not find expected tag
      **/
-    private void checkReturnTag(List aTags, int aLineNo)
+    private void checkReturnTag(List aTags, int aLineNo,
+                                boolean aReportExpectedTags)
     {
         // Loop over tags finding return tags. After the first one, report an
         // error.
         boolean found = false;
         final ListIterator it = aTags.listIterator();
         while (it.hasNext()) {
             final JavadocTag jt = (JavadocTag) it.next();
             if (jt.isReturnTag()) {
                 if (found) {
                     log(jt.getLineNo(), "javadoc.return.duplicate");
                 }
                 found = true;
                 it.remove();
             }
         }
 
         // Handle there being no @return tags :- unless
         // the user has chosen to suppress these problems
-        if (!found && !mAllowMissingReturnTag) {
+        if (!found && !mAllowMissingReturnTag && aReportExpectedTags) {
             log(aLineNo, "javadoc.return.expected");
         }
     }
 
 
     /**
      * Checks a set of tags for matching throws.
      * @param aTags the tags to check
      * @param aThrows the throws to check
+     * @param aReportExpectedTags whether we should report if do
+     *        not find expected tag
      **/
-    private void checkThrowsTags(List aTags, List aThrows)
+    private void checkThrowsTags(List aTags, List aThrows,
+                                 boolean aReportExpectedTags)
     {
         // Loop over the tags, checking to see they exist in the throws.
         final Set foundThrows = new HashSet(); //used for performance only
         final ListIterator tagIt = aTags.listIterator();
         while (tagIt.hasNext()) {
             final JavadocTag tag = (JavadocTag) tagIt.next();
 
             if (!tag.isThrowsTag()) {
                 continue;
             }
 
             tagIt.remove();
 
             // Loop looking for matching throw
             final String documentedEx = tag.getArg1();
             boolean found = foundThrows.contains(documentedEx);
             Class documentedClass = null;
             boolean classLoaded = false;
 
             final ListIterator throwIt = aThrows.listIterator();
             while (!found && throwIt.hasNext()) {
                 final ExceptionInfo ei = (ExceptionInfo) throwIt.next();
                 final FullIdent fi = ei.getName();
                 final String declaredEx = fi.getText();
                 if (isSameType(declaredEx, documentedEx)) {
                     found = true;
                     ei.setFound();
                     foundThrows.add(documentedEx);
                 }
                 else if (mAllowThrowsTagsForSubclasses) {
                     if (!classLoaded) {
                         documentedClass = loadClassForTag(tag);
                         classLoaded = true;
                     }
                     found = isSubclass(documentedClass, ei.getClazz());
                 }
             }
 
             // Handle extra JavadocTag.
             if (!found) {
                 boolean reqd = true;
                 if (mAllowUndeclaredRTE) {
                     if (!classLoaded) {
                         documentedClass = loadClassForTag(tag);
                         classLoaded = true;
                     }
                     reqd = !isUnchecked(documentedClass);
                 }
 
                 if (reqd) {
                     log(tag.getLineNo(), "javadoc.unusedTag",
                                   "@throws", tag.getArg1());
                 }
             }
         }
 
         // Now dump out all throws without tags :- unless
         // the user has chosen to suppress these problems
-        if (!mAllowMissingThrowsTags) {
+        if (!mAllowMissingThrowsTags && aReportExpectedTags) {
             final ListIterator throwIt = aThrows.listIterator();
             while (throwIt.hasNext()) {
                 final ExceptionInfo ei = (ExceptionInfo) throwIt.next();
                 if (!ei.isFound()) {
                     final FullIdent fi = ei.getName();
                     log(fi.getLineNo(), fi.getColumnNo(),
                         "javadoc.expectedTag", "@throws", fi.getText());
                 }
             }
         }
     }
 
     /**
      * Tries to load class for throws tag. Logs error if unable.
      * @param aTag name of class which we try to load.
      * @return <code>Class</code> for the tag.
      */
     private Class loadClassForTag(JavadocTag aTag)
     {
         Class clazz = resolveClass(aTag.getArg1());
         if (clazz == null) {
             log(aTag.getLineNo(), "javadoc.classInfo",
                 "@throws", aTag.getArg1());
         }
         return clazz;
     }
 
     /**
      * Logs error if unable to load class information.
      * @param aIdent class name for which we can no load class.
      */
     protected final void logLoadError(FullIdent aIdent)
     {
         log(aIdent.getLineNo(), "javadoc.classInfo", "@throws",
             aIdent.getText());
     }
 
     /** Stores useful information about declared exception. */
     class ExceptionInfo extends ClassInfo
     {
         /** does the exception have throws tag associated with. */
         private boolean mFound;
 
         /**
          * Creates new instance for <code>FullIdent</code>.
          * @param aIdent <code>FullIdent</code> of the exception
          */
         ExceptionInfo(FullIdent aIdent)
         {
             super(aIdent);
