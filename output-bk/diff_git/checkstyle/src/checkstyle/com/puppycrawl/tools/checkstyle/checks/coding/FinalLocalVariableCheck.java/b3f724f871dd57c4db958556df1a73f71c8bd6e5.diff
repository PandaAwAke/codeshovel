diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java
index caa46cc4a..c6bb4013e 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java
@@ -138,82 +138,82 @@ public class FinalLocalVariableCheck extends Check
                 // in left part of assignment?
                 if (aAST.getParent().getFirstChild() == aAST) {
                     removeVariable(aAST);
                 }
             }
             break;
 
         default:
         }
     }
 
     /**
      * Determines whether an AST is a descentant of an abstract method.
      * @param aAST the AST to check.
      * @return true if aAST is a descentant of an abstract method.
      */
     private boolean inAbstractMethod(DetailAST aAST)
     {
         DetailAST parent = aAST.getParent();
         while (parent != null) {
             if (parent.getType() == TokenTypes.METHOD_DEF) {
                 final DetailAST modifiers =
                     parent.findFirstToken(TokenTypes.MODIFIERS);
                 return modifiers.branchContains(TokenTypes.ABSTRACT);
             }
             parent = parent.getParent();
         }
         return false;
     }
 
     /**
      * Inserts a variable at the topmost scope stack
      * @param aAST the variable to insert
      */
     private void insertVariable(DetailAST aAST)
     {
         if (!aAST.branchContains(TokenTypes.FINAL)) {
             final Map<String, DetailAST> state = mScopeStack.peek();
             final DetailAST ast = aAST.findFirstToken(TokenTypes.IDENT);
             state.put(ast.getText(), ast);
         }
     }
 
     /**
      * Removes the variable from the Stacks
      * @param aAST Variable to remove
      */
     private void removeVariable(DetailAST aAST)
     {
         for (int i = mScopeStack.size() - 1; i >= 0; i--) {
-            final Map<String, DetailAST> state = mScopeStack.get(i);
+            final Map<String, DetailAST> state = mScopeStack.peek(i);
             final Object obj = state.remove(aAST.getText());
             if (obj != null) {
                 break;
             }
         }
     }
 
     @Override
     public void leaveToken(DetailAST aAST)
     {
         super.leaveToken(aAST);
 
         switch(aAST.getType()) {
         case TokenTypes.OBJBLOCK:
         case TokenTypes.SLIST:
         case TokenTypes.LITERAL_FOR:
         case TokenTypes.CTOR_DEF:
         case TokenTypes.STATIC_INIT:
         case TokenTypes.INSTANCE_INIT:
         case TokenTypes.METHOD_DEF:
             final Map<String, DetailAST> state = mScopeStack.pop();
             for (DetailAST var : state.values()) {
                 log(var.getLineNo(), var.getColumnNo(), "final.variable", var
                         .getText());
             }
             break;
 
         default:
         }
     }
 }
