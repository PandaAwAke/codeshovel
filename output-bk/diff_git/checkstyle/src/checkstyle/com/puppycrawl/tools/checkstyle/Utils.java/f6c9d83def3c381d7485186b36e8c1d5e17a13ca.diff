diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Utils.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Utils.java
index a880d2f8c..b9af4814c 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Utils.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Utils.java
@@ -20,51 +20,74 @@ package com.puppycrawl.tools.checkstyle;
 
 /**
  * Contains utility methods.
  *
  * @author <a href="mailto:oliver@puppycrawl.com">Oliver Burn</a>
  * @version 1.0
  */
 final class Utils
 {
     /** stop instances being created **/
     private Utils()
     {
     }
 
     /**
      * Returns whether the specified string contains only whitespace up to the
      * specified index.
      *
      * @param aIndex index to check up to
      * @param aLine the line to check
      * @return whether there is only whitespace
      */
     static boolean whitespaceBefore(int aIndex, String aLine)
     {
         for (int i = 0; i < aIndex; i++) {
             if (!Character.isWhitespace(aLine.charAt(i))) {
                 return false;
             }
         }
         return true;
     }
 
     /**
      * Returns the length of a string ignoring all trailing whitespace. It is a
      * pity that there is not a trim() like method that only removed the
      * trailing whitespace.
      * @param aLine the string to process
      * @return the length of the string ignoring all trailing whitespace
      **/
     static int lengthMinusTrailingWhitespace(String aLine)
     {
         int len = aLine.length();
         for (int i = len - 1; i >= 0; i--) {
             if (!Character.isWhitespace(aLine.charAt(i))) {
                 break;
             }
             len--;
         }
         return len;
     }
+
+    /**
+     * Returns the length of a String prefix with tabs expanded.
+     * Each tab is counted as the number of characters is takes to
+     * jump to the next tab stop.
+     * @param aString the input String
+     * @param aToIdx index in aString (exclusive) where the calculation stops
+     * @param aTabWidth the distance betweeen tab stop position.
+     * @return the length of aString.substring(0, aToIdx) with tabs expanded.
+     */
+    static int lengthExpandedTabs(String aString, int aToIdx, int aTabWidth)
+    {
+        int len = 0;
+        for (int idx = 0; idx < aToIdx; idx++) {
+            if (aString.charAt(idx) == '\t') {
+                len = (len / aTabWidth + 1) * aTabWidth;
+            }
+            else {
+                len++;
+            }
+        }
+        return len;
+    }
 }
