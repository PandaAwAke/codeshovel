diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
index da14c9027..9a13cb31d 100755
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
@@ -1,76 +1,78 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2003  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.javadoc;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FileContents;
 import com.puppycrawl.tools.checkstyle.api.Scope;
 import com.puppycrawl.tools.checkstyle.api.ScopeUtils;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
+
+import java.util.NoSuchElementException;
 import java.util.Stack;
 import org.apache.regexp.RE;
 import org.apache.regexp.RESyntaxException;
 
 /**
  * <p>Custom Checkstyle Check to validate Javadoc.
  * The following checks are performed:
  * <ul>
  * <li>Ensures the first sentence ends with proper punctuation (That is
  * a period, question mark, or exclaimation mark).  Javadoc  automatically
  * places the first sentence in the method summary table and index.  With out
  * proper punctuation the Javadoc may be malformed.
  * <li>Check text for incomplete html tags.  Verifies that HTML tags have
  * corresponding end tags and issues an UNCLOSED_HTML error if not.
  * An EXTRA_HTML error is issued if an end tag is found without a previous
  * open tag.
  * </ul>
  * <p>These checks were patterned after the checks made by the doclet
  * <code>com.sun.tools.doclets.doccheck.DocCheck</code>
  *
  * @author Chris Stillwell
  * @version 1.1
  */
 public class JavadocStyleCheck
     extends Check
 {
     /** Message property key for the Unclosed HTML message. */
     private static final String UNCLOSED_HTML = "javadoc.unclosedhtml";
 
     /** Message property key for the Extra HTML message. */
     private static final String EXTRA_HTML = "javadoc.extrahtml";
 
     /** HTML tags that do not require a close tag. */
     private static final String[] SINGLE_TAG =
     {"p", "br", "li", "dt", "dd", "td", "hr", "img", "tr", "th", "td"};
 
     /** The scope to check. */
     private Scope mScope = Scope.PRIVATE;
 
     /** Regular expression for matching the end of a sentence. */
     private RE mEndOfSentenceRE;
 
     /**
      * Indicates if the first sentence should be checked for proper end of
      * sentence punctuation.
      */
     private boolean mCheckFirstSentence = true;
 
     /**
      * Indicates if the HTML within the comment should be checked.
@@ -224,101 +226,113 @@ public class JavadocStyleCheck
                 else if (aLine.regionMatches(i, "*/", 0, 2)) {
                     i++;
                 }
                 else if (aLine.charAt(i) != '*') {
                     textStart = i;
                     break;
                 }
             }
         }
         return textStart;
     }
 
     /**
      * Trims any trailing whitespace or the end of Javadoc comment string.
      * @param aBuffer the StringBuffer to trim.
      */
     private void trimTail(StringBuffer aBuffer)
     {
         for (int i = aBuffer.length() - 1; i >= 0; i--) {
             if (Character.isWhitespace(aBuffer.charAt(i))) {
                 aBuffer.deleteCharAt(i);
             }
             else if ((i > 0)
                      && (aBuffer.charAt(i - 1) == '*')
                      && (aBuffer.charAt(i) == '/'))
             {
                 aBuffer.deleteCharAt(i);
                 aBuffer.deleteCharAt(i - 1);
                 i--;
             }
             else {
                 break;
             }
         }
     }
 
     /**
      * Checks the comment for HTML tags that do not have a corresponding close
      * tag or a close tage that has no previous open tag.  This code was
      * primarily copied from the DocCheck checkHtml method.
      *
      * @param aAST (Abstract Syntax Tree) the token to process.
      * @param aComment the source lines that make up the Javadoc comment.
      */
     private void checkHtml(DetailAST aAST, String[] aComment)
     {
         final int lineno = aAST.getLineNo() - aComment.length;
         final Stack htmlStack = new Stack();
 
         for (int i = 0; i < aComment.length; i++) {
-            final TagParser parser = new TagParser(aComment[i], lineno + i);
+            TagParser parser = null;
+            try {
+                // Can throw NoSuchElementException when tokenizing encounters
+                // "<" at end of aComment[i].
+                parser = new TagParser(aComment[i], lineno + i);
+            }
+            catch (NoSuchElementException e) {
+                log(
+                    lineno + i,
+                    "javadoc.incompleteTag",
+                    new Object[] {aComment[i]});
+                return;
+            }
             while (parser.hasNextTag()) {
                 final HtmlTag tag = parser.nextTag();
 
                 if (!tag.isCloseTag()) {
                     htmlStack.push(tag);
                 }
                 else {
                     // We have found a close tag.
                     if (isExtraHtml(tag.getId(), htmlStack)) {
                         // No corresponding open tag was found on the stack.
                         log(tag.getLineno(),
                             tag.getPosition(),
                             EXTRA_HTML,
                             tag);
                     }
                     else {
                         // See if there are any unclosed tags that were opened
                         // after this one.
                         checkUnclosedTags(htmlStack, tag.getId());
                     }
                 }
             }
         }
 
         // Identify any tags left on the stack.
         String lastFound = ""; // Skip multiples, like <b>...<b>
         for (int i = 0; i < htmlStack.size(); i++) {
             final HtmlTag htag = (HtmlTag) htmlStack.elementAt(i);
             if (!isSingleTag(htag) && !htag.getId().equals(lastFound)) {
                 log(htag.getLineno(), htag.getPosition(), UNCLOSED_HTML, htag);
                 lastFound = htag.getId();
             }
         }
     }
 
     /**
      * Checks to see if there are any unclosed tags on the stack.  The token
      * represents a html tag that has been closed and has a corresponding open
      * tag on the stack.  Any tags, except single tags, that were opened
      * (pushed on the stack) after the token are missing a close.
      *
      * @param aHtmlStack the stack of opened HTML tags.
      * @param aToken the current HTML tag name that has been closed.
      */
     private void checkUnclosedTags(Stack aHtmlStack, String aToken)
     {
         final Stack unclosedTags = new Stack();
         HtmlTag lastOpenTag = (HtmlTag) aHtmlStack.pop();
         while (!aToken.equalsIgnoreCase(lastOpenTag.getId())) {
             // Find unclosed elements. Put them on a stack so the
