diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
index 010f34519..384533d58 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
@@ -31,128 +31,132 @@ public abstract class AbstractFileSetCheck
     extends AbstractViolationReporter
     implements FileSetCheck
 {
     /** The dispatcher errors are fired to. */
     private MessageDispatcher mDispatcher = null;
 
     /** the file extensions that are accepted by this filter */
     private String[] mFileExtensions = {};
 
     /** collects the error messages */
     private final LocalizedMessages mMessages = new LocalizedMessages();
 
     /** @{inheritDoc} */
     public void destroy()
     {
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.FileSetCheck */
     public final void setMessageDispatcher(MessageDispatcher aDispatcher)
     {
         mDispatcher = aDispatcher;
     }
 
     /**
      * A message dispatcher is used to fire violation messages to
      * interested audit listeners.
      *
      * @return the current MessageDispatcher.
      */
     protected final MessageDispatcher getMessageDispatcher()
     {
         return mDispatcher;
     }
 
     /**
      * Determines the set of files this FileSetCheck is interested in.
      * Returns the files that have one of the currently active file extensions.
      * If no file extensions are active the argument array is returned.
      *
      * <p>
      * This method can be used in the implementation of <code>process()</code>
      * to filter it's argument list for interesting files.
      * </p>
      *
      * @param aFiles the candidates for processing
      * @return the subset of aFiles that this FileSetCheck should process
      * @see FileSetCheck#process
      */
     protected final File[] filter(File[] aFiles)
     {
-        if (mFileExtensions == null || mFileExtensions.length == 0) {
+        if ((mFileExtensions == null) || (mFileExtensions.length == 0)) {
             return aFiles;
         }
-        ArrayList files = new ArrayList(aFiles.length);
+        
+        final ArrayList files = new ArrayList(aFiles.length);
         for (int i = 0; i < aFiles.length; i++) {
-            File file = aFiles[i];
-            final String fileName = file.getName();
+            final File f = aFiles[i];
+            final String fileName = f.getName();
             for (int j = 0; j < mFileExtensions.length; j++) {
-                String fileExtension = mFileExtensions[j];
+                final String fileExtension = mFileExtensions[j];
                 if (fileName.endsWith(fileExtension)) {
-                    files.add(file);
+                    files.add(f);
                 }
             }
         }
         return (File[]) files.toArray(new File[files.size()]);
     }
 
     /**
      * Sets the file extensions that identify the files that pass the
      * filter of this FileSetCheck.
      * @param aExtensions the set of file extensions. A missing
      * initial '.' character of an extension is automatically added.
      */
     public final void setFileExtensions(String[] aExtensions)
     {
         if (aExtensions == null) {
             mFileExtensions = null;
             return;
         }
+        
         mFileExtensions = new String[aExtensions.length];
         for (int i = 0; i < aExtensions.length; i++) {
-            String extension = aExtensions[i];
+            final String extension = aExtensions[i];
             if (extension.startsWith(".")) {
                 mFileExtensions[i] = extension;
             }
             else {
                 mFileExtensions[i] = "." + extension;
             }
         }
     }
 
     /**
      * Returns the collector for violation messages.
      * Subclasses can use the collector to find out the violation
      * messages to fire via the message dispatcher.
      *
      * @return the collector for localized messages.
      */
     protected final LocalizedMessages getMessageCollector()
     {
         return mMessages;
     }
 
     /**
      * Adds a violation message to the
      * {@link #getMessageCollector message collector}.
      * @see AbstractViolationReporter#log(int, String, Object[])
      */
     protected final void log(int aLine, String aKey, Object aArgs[])
     {
         log(aLine, 0, aKey, aArgs);
     }
 
     /**
      * Adds a violation message to the
      * {@link #getMessageCollector message collector}.
      * @see AbstractViolationReporter#log(int, int, String, Object[])
      */
     protected final void log(int aLineNo, int aColNo,
         String aKey, Object[] aArgs)
     {
-        getMessageCollector().add(new LocalizedMessage(
-            aLineNo, aColNo, getMessageBundle(),
-            aKey, aArgs, getSeverityLevel()));
+        getMessageCollector().add(
+            new LocalizedMessage(aLineNo,
+                                 aColNo,
+                                 getMessageBundle(),
+                                 aKey,
+                                 aArgs,
+                                 getSeverityLevel()));
     }
-
-
 }
