diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java
index d9cce9a14..3961b3908 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java
@@ -86,130 +86,135 @@ import org.apache.commons.beanutils.ConversionException;
  * more than it helps.&quot;
  * </li>
  * </ul>
  * His comments on being hard to maintain when the size of
  * the line changes are even more important in the age of
  * automated refactorings.
  * </p>
  * <p>
  * To configure the check so it enforces only comment on a line:
  * <pre>
  * &lt;module name=&quot;TrailingComment&quot;&gt;
  *    &lt;property name=&quot;format&quot; value=&quot;^\\s*$&quot;/&gt;
  * &lt;/module&gt;
  * </pre>
  * </p>
  * @author o_sukhodolsky
  */
 public class TrailingCommentCheck extends AbstractFormatCheck
 {
     /** default format for allowed blank line. */
     private static final String DEFAULT_FORMAT = "^[\\s\\}\\);]*$";
 
     /** pattern for legal trailing comment. */
     private Pattern mLegalComment;
 
     /**
      * Sets patter for legal trailing comments.
      * @param aFormat format to set.
      * @throws ConversionException unable to parse a given format.
      */
     public void setLegalComment(final String aFormat)
         throws ConversionException
     {
         try {
             mLegalComment = Utils.getPattern(aFormat);
         }
         catch (final PatternSyntaxException e) {
             throw new ConversionException("unable to parse " + aFormat, e);
         }
     }
     /**
      * Creates new instance of the check.
      * @throws ConversionException unable to parse DEFAULT_FORMAT.
      */
     public TrailingCommentCheck() throws ConversionException
     {
         super(DEFAULT_FORMAT);
     }
 
     /** {@inheritDoc} */
+    @Override
     public int[] getDefaultTokens()
     {
         return new int[0];
     }
 
     /** {@inheritDoc} */
+    @Override
     public void visitToken(DetailAST aAST)
     {
         throw new IllegalStateException("visitToken() shouldn't be called.");
     }
 
     /** {@inheritDoc} */
+    @Override
     public void beginTree(DetailAST aRootAST)
     {
         final Pattern blankLinePattern = getRegexp();
-        final Map cppComments = getFileContents().getCppComments();
-        final Map cComments = getFileContents().getCComments();
-        final Set lines = new HashSet();
+        final Map<Integer, TextBlock> cppComments = getFileContents()
+                .getCppComments();
+        final Map<Integer, List<TextBlock>> cComments = getFileContents()
+                .getCComments();
+        final Set<Integer> lines = new HashSet<Integer>();
         lines.addAll(cppComments.keySet());
         lines.addAll(cComments.keySet());
 
-        final Iterator linesIter = lines.iterator();
+        final Iterator<Integer> linesIter = lines.iterator();
         while (linesIter.hasNext()) {
-            final Integer lineNo = (Integer) linesIter.next();
+            final Integer lineNo = linesIter.next();
 
             final String line = getLines()[lineNo.intValue() - 1];
             String lineBefore = "";
             TextBlock comment = null;
             if (cppComments.containsKey(lineNo)) {
-                comment = (TextBlock) cppComments.get(lineNo);
+                comment = cppComments.get(lineNo);
                 lineBefore = line.substring(0, comment.getStartColNo());
             }
             else if (cComments.containsKey(lineNo)) {
-                final List commentList = (List) cComments.get(lineNo);
-                comment = (TextBlock) commentList.get(commentList.size() - 1);
+                final List<TextBlock> commentList = cComments.get(lineNo);
+                comment = commentList.get(commentList.size() - 1);
                 lineBefore = line.substring(0, comment.getStartColNo());
                 if (comment.getText().length == 1) {
                     final String lineAfter =
                         line.substring(comment.getEndColNo() + 1).trim();
                     if (!"".equals(lineAfter)) {
                         // do not check comment which doesn't end line
                         continue;
                     }
                 }
             }
             if ((comment != null)
                 && !blankLinePattern.matcher(lineBefore).find()
                 && !isLegalComment(comment))
             {
                 log(lineNo.intValue(), "trailing.comments");
             }
         }
     }
 
     /**
      * Checks if given comment is legal (single-line and matches to the
      * pattern).
      * @param aComment comment to check.
      * @return true if the comment if legal.
      */
     private boolean isLegalComment(final TextBlock aComment)
     {
         if (mLegalComment == null) {
             return false;
         }
         // multi-line comment can not be legal
         if (aComment.getStartLineNo() != aComment.getEndLineNo()) {
             return false;
         }
         String commentText = aComment.getText()[0];
         // remove chars which start comment
         commentText = commentText.substring(2);
         // if this is a C-style comment we need to remove its end
         if (commentText.endsWith("*/")) {
             commentText = commentText.substring(0, commentText.length() - 2);
         }
         commentText = commentText.trim();
         return mLegalComment.matcher(commentText).find();
     }
 }
