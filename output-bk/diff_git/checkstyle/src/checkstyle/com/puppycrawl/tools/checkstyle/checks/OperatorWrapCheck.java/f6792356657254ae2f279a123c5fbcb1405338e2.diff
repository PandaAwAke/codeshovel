diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/OperatorWrapCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/OperatorWrapCheck.java
index 166336739..6fa77e718 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/OperatorWrapCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/OperatorWrapCheck.java
@@ -22,77 +22,118 @@ package com.puppycrawl.tools.checkstyle.checks;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.api.Utils;
 
 /**
  * Checks wrapping for operators.
  *
  * @author Rick Giles
  * @version 1.0
  */
 public class OperatorWrapCheck
     extends AbstractOptionCheck
 {
     /**
      * Sets the operator wrap otion to new line.
      */  
     public OperatorWrapCheck()
     {
         super(OperatorWrapOption.NL);
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.QUESTION,          // '?'
             TokenTypes.COLON,             // ':' (not reported for a case)
             TokenTypes.EQUAL,             // "=="
             TokenTypes.NOT_EQUAL,         // "!="
             TokenTypes.DIV,               // '/'
             TokenTypes.PLUS,              //' +' (unary plus is UNARY_PLUS)
             TokenTypes.MINUS,             // '-' (unary minus is UNARY_MINUS)
             TokenTypes.STAR,              // '*'
             TokenTypes.MOD,               // '%'
             TokenTypes.SR,                // ">>"
             TokenTypes.BSR,               // ">>>"
             TokenTypes.GE,                // ">="
             TokenTypes.GT,                // ">"
             TokenTypes.SL,                // "<<"
             TokenTypes.LE,                // "<="
             TokenTypes.LT,                // '<'
             TokenTypes.BXOR,              // '^'
             TokenTypes.BOR,               // '|'
             TokenTypes.LOR,               // "||"
             TokenTypes.BAND,              // '&'
             TokenTypes.LAND,              // "&&"
             TokenTypes.LITERAL_INSTANCEOF,
         };
     }
 
+    /** @see com.puppycrawl.tools.checkstyle.api.Check */
+    public int[] getAcceptableTokens()
+    {
+        return new int[] {
+            TokenTypes.QUESTION,          // '?'
+            TokenTypes.COLON,             // ':' (not reported for a case)
+            TokenTypes.EQUAL,             // "=="
+            TokenTypes.NOT_EQUAL,         // "!="
+            TokenTypes.DIV,               // '/'
+            TokenTypes.PLUS,              //' +' (unary plus is UNARY_PLUS)
+            TokenTypes.MINUS,             // '-' (unary minus is UNARY_MINUS)
+            TokenTypes.STAR,              // '*'
+            TokenTypes.MOD,               // '%'
+            TokenTypes.SR,                // ">>"
+            TokenTypes.BSR,               // ">>>"
+            TokenTypes.GE,                // ">="
+            TokenTypes.GT,                // ">"
+            TokenTypes.SL,                // "<<"
+            TokenTypes.LE,                // "<="
+            TokenTypes.LT,                // '<'
+            TokenTypes.BXOR,              // '^'
+            TokenTypes.BOR,               // '|'
+            TokenTypes.LOR,               // "||"
+            TokenTypes.BAND,              // '&'
+            TokenTypes.LAND,              // "&&"
+            TokenTypes.LITERAL_INSTANCEOF,
+            TokenTypes.ASSIGN,            // '='
+            TokenTypes.DIV_ASSIGN,        // "/="
+            TokenTypes.PLUS_ASSIGN,       // "+="
+            TokenTypes.MINUS_ASSIGN,      //"-="
+            TokenTypes.STAR_ASSIGN,       // "*="
+            TokenTypes.MOD_ASSIGN,        // "%="
+            TokenTypes.SR_ASSIGN,         // ">>="
+            TokenTypes.BSR_ASSIGN,        // ">>>="
+            TokenTypes.SL_ASSIGN,         // "<<="
+            TokenTypes.BXOR_ASSIGN,       // "^="
+            TokenTypes.BOR_ASSIGN,        // "|="
+            TokenTypes.BAND_ASSIGN,       // "&="
+
+        };
+    }
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void visitToken(DetailAST aAST)
     {
         final AbstractOption wOp = getAbstractOption();
 
         final String text = aAST.getText();
         final int colNo = aAST.getColumnNo();
         final int lineNo = aAST.getLineNo();
         final String currentLine = getLines()[lineNo - 1];
         // TODO: Handle comments before and after operator
         // Check if rest of line is whitespace, and not just the operator
         // by itself. This last bit is to handle the operator on a line by
         // itself.
         if (wOp == OperatorWrapOption.NL
             && !text.equals(currentLine.trim())
             && (currentLine.substring(colNo + text.length())
                 .trim().length() == 0))
         {
             log(lineNo, colNo, "line.new", text);
         }
         else if (wOp == OperatorWrapOption.EOL
                   && Utils.whitespaceBefore(colNo - 1, currentLine))
         {
             log(lineNo, colNo, "line.previous", text);
         }
     }
 }
