diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java
index df8c98d21..11a5c1465 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java
@@ -1,91 +1,91 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2002  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle;
 
 import java.io.File;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.Locale;
 
 import com.puppycrawl.tools.checkstyle.api.AutomaticBean;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.api.FileSetCheck;
 import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
 import com.puppycrawl.tools.checkstyle.api.MessageDispatcher;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
-import com.puppycrawl.tools.checkstyle.api.PackageNamesClient;
+import com.puppycrawl.tools.checkstyle.api.PackageNamesBean;
 
 /**
  * This class provides the functionality to check a set of files.
  * @author <a href="mailto:oliver@puppycrawl.com">Oliver Burn</a>
  * @author <a href="mailto:stephane.bailliez@wanadoo.fr">Stephane Bailliez</a>
  * @author lkuehne
  */
 public class Checker extends AutomaticBean
-    implements Defn, MessageDispatcher, PackageNamesClient
+    implements Defn, MessageDispatcher, PackageNamesBean
 {
     /**
      * An AuditListener that maintains the number of errors.
      */
     private class ErrorCounter implements AuditListener
     {
         /** keeps track of the number of errors */
         private int mCount = 0;
 
         /** @see AuditListener */
         public void addError(AuditEvent aEvt)
         {
             mCount++;
         }
 
         /** @see AuditListener */
         public void addException(AuditEvent aEvt, Throwable aThrowable)
         {
             mCount++;
         }
 
         /** @see AuditListener */
         public void auditStarted(AuditEvent aEvt)
         {
             mCount = 0;
         }
 
         /** @see AuditListener */
         public void fileStarted(AuditEvent aEvt)
         {
         }
 
         /** @see AuditListener */
         public void auditFinished(AuditEvent aEvt)
         {
         }
 
         /** @see AuditListener */
         public void fileFinished(AuditEvent aEvt)
         {
         }
 
         /**
          * @return the number of errors since audit started.
          */
         private int getCount()
         {
             return mCount;
         }
     }
@@ -260,85 +260,80 @@ public class Checker extends AutomaticBean
     }
 
     /**
      * notify all listeners about the beginning of a file audit
      * @param aFileName the file to be audited
      */
     public void fireFileStarted(String aFileName)
     {
         final String stripped = getStrippedFileName(aFileName);
         final AuditEvent evt = new AuditEvent(this, stripped);
         final Iterator it = mListeners.iterator();
         while (it.hasNext()) {
             final AuditListener listener = (AuditListener) it.next();
             listener.fileStarted(evt);
         }
     }
 
     /**
      * notify all listeners about the end of a file audit
      * @param aFileName the audited file
      */
     public void fireFileFinished(String aFileName)
     {
         final String stripped = getStrippedFileName(aFileName);
         final AuditEvent evt = new AuditEvent(this, stripped);
         final Iterator it = mListeners.iterator();
         while (it.hasNext()) {
             final AuditListener listener = (AuditListener) it.next();
             listener.fileFinished(evt);
         }
     }
 
     /**
      * notify all listeners about the errors in a file.
      * @param aFileName the audited file
      * @param aErrors the audit errors from the file
      */
     public void fireErrors(String aFileName, LocalizedMessage[] aErrors)
     {
         final String stripped = getStrippedFileName(aFileName);
         for (int i = 0; i < aErrors.length; i++) {
             final AuditEvent evt = new AuditEvent(this, stripped, aErrors[i]);
             final Iterator it = mListeners.iterator();
             while (it.hasNext()) {
                 final AuditListener listener = (AuditListener) it.next();
                 listener.addError(evt);
             }
         }
     }
 
-    /** @see PackageNamesClient */
+    /** @see PackageNamesBean */
     public void setPackageNames(String[] aPackageNames)
-        throws CheckstyleException
     {
         mPackageNames = aPackageNames;
     }
 
-    /**
-     * Gets the package names to use for instantiating object.
-     * @return the package names.
-     * @throws CheckstyleException if there is an error.
-     */
-    private String[] getPackageNames()
+    /** @see com.puppycrawl.tools.checkstyle.api.PackageNamesBean */
+    public String[] getPackageNames()
         throws CheckstyleException
     {
         if (mPackageNames == null) {
             mPackageNames =
                 PackageNamesLoader.loadPackageNames(
                     getClass().getClassLoader());
         }
         return mPackageNames;
     }
 
     /** @param aLocaleCountry the country to report messages  **/
     public void setLocaleCountry(String aLocaleCountry)
     {
         mLocaleCountry = aLocaleCountry;
     }
 
     /** @param aLocaleLanguage the language to report messages  **/
     public void setLocaleLanguage(String aLocaleLanguage)
     {
         mLocaleLanguage = aLocaleLanguage;
     }
 }
