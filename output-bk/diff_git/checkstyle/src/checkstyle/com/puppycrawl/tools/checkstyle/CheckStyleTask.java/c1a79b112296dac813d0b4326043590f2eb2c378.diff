diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
index b196fe3d3..55c68652d 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
@@ -1,161 +1,188 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2004  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle;
 
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Properties;
 import java.util.Hashtable;
 import java.util.ResourceBundle;
 import java.net.URL;
 
 import com.puppycrawl.tools.checkstyle.api.AuditListener;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
+import com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter;
+import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
 import org.apache.tools.ant.AntClassLoader;
 import org.apache.tools.ant.BuildException;
 import org.apache.tools.ant.DirectoryScanner;
 import org.apache.tools.ant.Project;
 import org.apache.tools.ant.Task;
 import org.apache.tools.ant.taskdefs.LogOutputStream;
 import org.apache.tools.ant.types.EnumeratedAttribute;
 import org.apache.tools.ant.types.FileSet;
 import org.apache.tools.ant.types.Path;
 import org.apache.tools.ant.types.Reference;
 
 /**
  * An implementation of a ANT task for calling checkstyle. See the documentation
  * of the task for usage.
  * @author Oliver Burn
  */
 public class CheckStyleTask
     extends Task
 {
     /** poor man's enum for an xml formatter */
     private static final String E_XML = "xml";
     /** poor man's enum for an plain formatter */
     private static final String E_PLAIN = "plain";
 
     /** class path to locate class files */
     private Path mClasspath;
 
     /** name of file to check */
     private String mFileName;
 
     /** config file containing configuration */
     private String mConfigLocation;
 
     /** contains package names */
     private File mPackageNamesFile;
 
     /** whether to fail build on violations */
     private boolean mFailOnViolation = true;
 
     /** property to set on violations */
     private String mFailureProperty;
 
     /** contains the filesets to process */
     private final List mFileSets = new ArrayList();
 
     /** contains the formatters to log to */
     private final List mFormatters = new ArrayList();
 
     /** contains the Properties to override */
     private final List mOverrideProps = new ArrayList();
 
     /** the name of the properties file */
     private File mPropertiesFile;
 
+    /** the maximum number of errors that are tolerated. */
+    private int mMaxErrors;
+
+    /** the maximum number of warnings that are tolerated. */
+    private int mMaxWarnings = Integer.MAX_VALUE;
+
     ////////////////////////////////////////////////////////////////////////////
     // Setters for ANT specific attributes
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Tells this task to set the named property to "true" when there
      * is a violation.
      * @param aPropertyName the name of the property to set
      *                      in the event of an failure.
      */
     public void setFailureProperty(String aPropertyName)
     {
         mFailureProperty = aPropertyName;
     }
 
     /** @param aFail whether to fail if a violation is found */
     public void setFailOnViolation(boolean aFail)
     {
         mFailOnViolation = aFail;
     }
 
+    /**
+     * Sets the maximum number of errors allowed. Default is 0.
+     * @param aMaxErrors the maximum number of errors allowed.
+     */
+    public void setMaxErrors(int aMaxErrors)
+    {
+        mMaxErrors = aMaxErrors;
+    }
+
+    /**
+     * Sets the maximum number of warings allowed. Default is
+     * {@link Integer#MAX_VALUE}.
+     * @param aMaxWarnings the maximum number of warnings allowed.
+     */
+    public void setMaxWarnings(int aMaxWarnings)
+    {
+        mMaxWarnings = aMaxWarnings;
+    }
+
     /**
      * Adds a set of files (nested fileset attribute).
      * @param aFS the file set to add
      */
     public void addFileset(FileSet aFS)
     {
         mFileSets.add(aFS);
     }
 
     /**
      * Add a formatter.
      * @param aFormatter the formatter to add for logging.
      */
     public void addFormatter(Formatter aFormatter)
     {
         mFormatters.add(aFormatter);
     }
 
     /**
      * Add an override property.
      * @param aProperty the property to add
      */
     public void addProperty(Property aProperty)
     {
         mOverrideProps.add(aProperty);
     }
 
     /**
      * Set the class path.
      * @param aClasspath the path to locate classes
      */
     public void setClasspath(Path aClasspath)
     {
         if (mClasspath == null) {
             mClasspath = aClasspath;
         }
         else {
             mClasspath.append(aClasspath);
         }
     }
 
     /**
      * Set the class path from a reference defined elsewhere.
      * @param aClasspathRef the reference to an instance defining the classpath
      */
     public void setClasspathRef(Reference aClasspathRef)
     {
         createClasspath().setRefid(aClasspathRef);
     }
 
@@ -211,111 +238,120 @@ public class CheckStyleTask
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Sets a properties file for use instead
      * of individually setting them.
      * @param aProps the properties File to use
      */
     public void setProperties(File aProps)
     {
         mPropertiesFile = aProps;
     }
 
     ////////////////////////////////////////////////////////////////////////////
     // The doers
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Actually checks the files specified. All errors are reported to
      * System.out. Will fail if any errors occurred.
      * @throws BuildException an error occurred
      */
     public void execute()
         throws BuildException
     {
         // output version info in debug mode
         final ResourceBundle compilationProperties =
             ResourceBundle.getBundle("checkstylecompilation");
         final String version =
             compilationProperties.getString("checkstyle.compile.version");
         final String compileTimestamp =
             compilationProperties.getString("checkstyle.compile.timestamp");
         log("checkstyle version " + version, Project.MSG_VERBOSE);
         log("compiled on " + compileTimestamp, Project.MSG_VERBOSE);
 
         // Check for no arguments
         if ((mFileName == null) && (mFileSets.size() == 0)) {
             throw new BuildException(
                 "Must specify atleast one of 'file' or nested 'fileset'.",
                 getLocation());
         }
 
         if (mConfigLocation == null) {
             throw new BuildException("Must specify 'config'.", getLocation());
         }
 
         // Create the checker
         Checker c = null;
         try {
             c = createChecker();
 
+            SeverityLevelCounter warningCounter =
+                    new SeverityLevelCounter(SeverityLevel.WARNING);
+            c.addListener(warningCounter);
+
             // Process the files
             final File[] files = scanFileSets();
             final int numErrs = c.process(files);
+            final int numWarnings = warningCounter.getCount();
+            final boolean ok = numErrs <= mMaxErrors
+                    && numWarnings <= mMaxWarnings;
 
             // Handle the return status
-            if ((numErrs > 0) && mFailureProperty != null) {
+            if (!ok && mFailureProperty != null) {
                 getProject().setProperty(mFailureProperty, "true");
             }
 
-            if ((numErrs > 0) && mFailOnViolation) {
-                throw new BuildException("Got " + numErrs + " errors.",
+            if (!ok && mFailOnViolation) {
+                throw new BuildException(
+                        "Got " + numErrs + " errors and "
+                        + numWarnings + " warnings.",
                                          getLocation());
             }
         }
         finally {
             if (c != null) {
                 c.destroy();
             }
         }
     }
 
     /**
      * Creates new instance of <code>Checker</code>.
      * @return new instance of <code>Checker</code>
      */
     private Checker createChecker()
     {
         Checker c = null;
         try {
             final Properties props = createOverridingProperties();
             final Configuration config =
                 ConfigurationLoader.loadConfiguration(
                     mConfigLocation, new PropertiesExpander(props));
 
             final DefaultContext context = new DefaultContext();
             final ClassLoader loader =
                 new AntClassLoader(getProject(), mClasspath);
             context.add("classloader", loader);
 
             c = new Checker();
 
             //load the set of package names
             if (mPackageNamesFile != null) {
                 final ModuleFactory moduleFactory =
                     PackageNamesLoader.loadModuleFactory(
                         mPackageNamesFile.getAbsolutePath());
                 c.setModuleFactory(moduleFactory);
             }
             c.contextualize(context);
             c.configure(config);
 
             // setup the listeners
             final AuditListener[] listeners = getListeners();
             for (int i = 0; i < listeners.length; i++) {
                 c.addListener(listeners[i]);
             }
         }
         catch (Exception e) {
             throw new BuildException(
                 "Unable to create a Checker: " + e.getMessage(), e);
         }
