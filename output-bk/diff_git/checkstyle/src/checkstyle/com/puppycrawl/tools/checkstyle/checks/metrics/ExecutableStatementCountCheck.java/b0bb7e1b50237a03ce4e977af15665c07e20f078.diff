diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/ExecutableStatementCountCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/ExecutableStatementCountCheck.java
index 26a9102fb..40831fdd6 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/ExecutableStatementCountCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/ExecutableStatementCountCheck.java
@@ -54,152 +54,185 @@ public final class ExecutableStatementCountCheck
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.CTOR_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.INSTANCE_INIT,
             TokenTypes.STATIC_INIT,
             TokenTypes.SLIST,
         };
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check#getRequiredTokens() */
     public int[] getRequiredTokens()
     {
         return new int[] {TokenTypes.SLIST};
     }
 
     /**
      * Gets the maximum threshold.
      * @return the maximum threshold.
      */
     public int getMax()
     {
         return mMax;
     }
 
     /**
      * Sets the maximum threshold.
      * @param aMax the maximum threshold.
      */
     public void setMax(int aMax)
     {
         mMax = aMax;
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void beginTree(DetailAST aRootAST)
     {
         mContext = null;
         mContextStack.clear();
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void visitToken(DetailAST aAST)
     {
         switch (aAST.getType()) {
         case TokenTypes.CTOR_DEF:
         case TokenTypes.METHOD_DEF:
         case TokenTypes.INSTANCE_INIT:
         case TokenTypes.STATIC_INIT:
-            visitMethodDef();
+            visitMemberDef(aAST);
             break;
         case TokenTypes.SLIST:
             visitSlist(aAST);
             break;
         default:
             throw new IllegalStateException(aAST.toString());
         }
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void leaveToken(DetailAST aAST)
     {
         switch (aAST.getType()) {
         case TokenTypes.CTOR_DEF:
         case TokenTypes.METHOD_DEF:
         case TokenTypes.INSTANCE_INIT:
         case TokenTypes.STATIC_INIT:
-            leaveMethodDef(aAST);
+            leaveMemberDef(aAST);
             break;
         case TokenTypes.SLIST:
             // Do nothing
             break;
         default:
             throw new IllegalStateException(aAST.toString());
         }
     }
 
-    /** Process the start of the method definition. */
-    private void visitMethodDef()
+    /**
+     * Process the start of the member definition.
+     * @param aAST the token representing the member definition.
+     */
+    private void visitMemberDef(DetailAST aAST)
     {
         mContextStack.push(mContext);
-        mContext = new Context();
+        mContext = new Context(aAST);
     }
 
     /**
-     * Process the end of a method definition.
+     * Process the end of a member definition.
      *
-     * @param aAST the token representing the method definition.
+     * @param aAST the token representing the member definition.
      */
-    private void leaveMethodDef(DetailAST aAST)
+    private void leaveMemberDef(DetailAST aAST)
     {
         final int count = mContext.getCount();
         if (count > getMax()) {
             log(
                 aAST.getLineNo(),
                 aAST.getColumnNo(),
                 "executableStatementCount",
                 new Integer(count),
                 new Integer(getMax()));
         }
         mContext = (Context) mContextStack.pop();
     }
 
     /**
      * Process the end of a statement list.
      *
      * @param aAST the token representing the statement list.
      */
     private void visitSlist(DetailAST aAST)
     {
         if (mContext != null) {
-            mContext.addCount(aAST.getChildCount() / 2);
+            // find member AST for the statement list
+            final DetailAST contextAST = mContext.getAST();
+            DetailAST parent = aAST.getParent();
+            while (parent != null) {
+                final int type = parent.getType();
+                if ((type == TokenTypes.CTOR_DEF)
+                    || (type == TokenTypes.METHOD_DEF)
+                    || (type == TokenTypes.INSTANCE_INIT)
+                    || (type == TokenTypes.STATIC_INIT))
+                {
+                    if (parent == contextAST) {
+                        mContext.addCount(aAST.getChildCount() / 2);
+                    }
+                    break;
+                }
+                parent = parent.getParent();
+            }
         }
     }
 
     /**
      * Class to encapsulate counting information about one member.
      * @author Simon Harris
      */
     private class Context
     {
+        /** Member AST node. */
+        private DetailAST mAST;
+
         /** Counter for context elements. */
         private int mCount;
 
         /**
-         * Creates new method context.
+         * Creates new member context.
+         * @param aAST member AST node.
          */
-        public Context()
+        public Context(DetailAST aAST)
         {
+            mAST = aAST;
             mCount = 0;
         }
 
         /**
          * Increase count.
          * @param aCount the count increment.
          */
         public void addCount(int aCount)
         {
             mCount += aCount;
         }
 
+        /**
+         * Gets the member AST node.
+         * @return the member AST node.
+         */
+        public DetailAST getAST()
+        {
+            return mAST;
+        }
+
         /**
          * Gets the count.
          * @return the count.
          */
         public int getCount()
         {
             return mCount;
         }
     }
 }
