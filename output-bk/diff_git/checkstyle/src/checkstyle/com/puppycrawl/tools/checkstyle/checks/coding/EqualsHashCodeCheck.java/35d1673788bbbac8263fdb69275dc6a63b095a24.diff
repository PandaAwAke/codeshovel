diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java
index e96edc6a5..abad4d37a 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java
@@ -83,64 +83,64 @@ public class EqualsHashCodeCheck
         final DetailAST parameters = aAST.findFirstToken(TokenTypes.PARAMETERS);
 
         if ((type.getFirstChild().getType() == TokenTypes.LITERAL_BOOLEAN)
                 && "equals".equals(methodName.getText())
                 && modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)
                 && (parameters.getChildCount() == 1)
                 && isObjectParam(parameters.getFirstChild())
             )
         {
             mObjBlockEquals.put(aAST.getParent(), aAST);
         }
         else if ((type.getFirstChild().getType() == TokenTypes.LITERAL_INT)
                 && "hashCode".equals(methodName.getText())
                 && modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)
                 && (parameters.getFirstChild() == null)) // no params
         {
             mObjBlockWithHashCode.add(aAST.getParent());
         }
     }
 
     /**
      * Determines if an AST is a formal param of type Object (or subclass).
      * @param aFirstChild the AST to check
      * @return true iff aFirstChild is a parameter of an Object type.
      */
     private boolean isObjectParam(AST aFirstChild)
     {
         final AST modifiers = aFirstChild.getFirstChild();
         final AST type = modifiers.getNextSibling();
         switch (type.getFirstChild().getType()) {
         case TokenTypes.LITERAL_BOOLEAN:
         case TokenTypes.LITERAL_BYTE:
         case TokenTypes.LITERAL_CHAR:
         case TokenTypes.LITERAL_DOUBLE:
         case TokenTypes.LITERAL_FLOAT:
         case TokenTypes.LITERAL_INT:
         case TokenTypes.LITERAL_LONG:
         case TokenTypes.LITERAL_SHORT:
             return false;
         default:
             return true;
         }
     }
 
     /**
      * {@inheritDoc}
      */
     public void finishTree(DetailAST aRootAST)
     {
         final Set equalsDefs = mObjBlockEquals.keySet();
-        for (Iterator it = equalsDefs.iterator(); it.hasNext();) {
+        for (final Iterator it = equalsDefs.iterator(); it.hasNext();) {
             final Object objBlock = it.next();
             if (!mObjBlockWithHashCode.contains(objBlock)) {
                 final DetailAST equalsAST =
                     (DetailAST) mObjBlockEquals.get(objBlock);
                 log(equalsAST.getLineNo(), equalsAST.getColumnNo(),
                         "equals.noHashCode");
             }
         }
 
         mObjBlockEquals.clear();
         mObjBlockWithHashCode.clear();
     }
 }
