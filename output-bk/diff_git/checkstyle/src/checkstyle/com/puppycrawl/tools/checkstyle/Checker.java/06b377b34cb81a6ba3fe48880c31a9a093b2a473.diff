diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java
index 5c4dc9b83..aadbbd417 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java
@@ -365,160 +365,159 @@ public class Checker extends AutomaticBean
         }
 
         final Stack s = new Stack();
         s.push(root);
         final StringTokenizer tok = new StringTokenizer(aPath, File.separator);
         while (tok.hasMoreTokens()) {
             final String thisToken = tok.nextToken();
             if (".".equals(thisToken)) {
                 continue;
             }
             else if ("..".equals(thisToken)) {
                 if (s.size() < 2) {
                     throw new IllegalArgumentException("Cannot resolve path "
                                                        + orig);
                 }
                 s.pop();
             }
             else { // plain component
                 s.push(thisToken);
             }
         }
 
         final StringBuffer sb = new StringBuffer();
         for (int i = 0; i < s.size(); i++) {
             if (i > 1) {
                 // not before the filesystem root and not after it, since root
                 // already contains one
                 sb.append(File.separatorChar);
             }
             sb.append(s.elementAt(i));
         }
 
 
         aPath = sb.toString();
         if (dosWithDrive) {
             aPath = aPath.replace('/', '\\');
         }
         return aPath;
     }
 
     /** @return the base directory property used in unit-test. */
     String getBasedir()
     {
         return mBasedir;
     }
 
     /** notify all listeners about the audit start */
     protected void fireAuditStarted()
     {
         final AuditEvent evt = new AuditEvent(this);
-        if (mFilters.accept(evt)) {
-            final Iterator it = mListeners.iterator();
-            while (it.hasNext()) {
-                final AuditListener listener = (AuditListener) it.next();
-                listener.auditStarted(evt);
-            }
+        final Iterator it = mListeners.iterator();
+        while (it.hasNext()) {
+            final AuditListener listener = (AuditListener) it.next();
+            listener.auditStarted(evt);
         }
     }
 
     /** notify all listeners about the audit end */
     protected void fireAuditFinished()
     {
         final AuditEvent evt = new AuditEvent(this);
-        if (mFilters.accept(evt)) {
-            final Iterator it = mListeners.iterator();
-            while (it.hasNext()) {
-                final AuditListener listener = (AuditListener) it.next();
-                listener.auditFinished(evt);
-            }
+        final Iterator it = mListeners.iterator();
+        while (it.hasNext()) {
+            final AuditListener listener = (AuditListener) it.next();
+            listener.auditFinished(evt);
         }
     }
 
     /**
      * Notify all listeners about the beginning of a file audit.
-     * @param aFileName the file to be audited
+     *
+     * @param aFileName
+     *            the file to be audited
      */
     public void fireFileStarted(String aFileName)
     {
         final String stripped = getStrippedFileName(aFileName);
         final AuditEvent evt = new AuditEvent(this, stripped);
-        if (mFilters.accept(evt)) {
-            final Iterator it = mListeners.iterator();
-            while (it.hasNext()) {
-                final AuditListener listener = (AuditListener) it.next();
-                listener.fileStarted(evt);
-            }
+        final Iterator it = mListeners.iterator();
+        while (it.hasNext()) {
+            final AuditListener listener = (AuditListener) it.next();
+            listener.fileStarted(evt);
         }
     }
 
     /**
      * Notify all listeners about the end of a file audit.
-     * @param aFileName the audited file
+     *
+     * @param aFileName
+     *            the audited file
      */
     public void fireFileFinished(String aFileName)
     {
         final String stripped = getStrippedFileName(aFileName);
         final AuditEvent evt = new AuditEvent(this, stripped);
-        if (mFilters.accept(evt)) {
-            final Iterator it = mListeners.iterator();
-            while (it.hasNext()) {
-                final AuditListener listener = (AuditListener) it.next();
-                listener.fileFinished(evt);
-            }
+        final Iterator it = mListeners.iterator();
+        while (it.hasNext()) {
+            final AuditListener listener = (AuditListener) it.next();
+            listener.fileFinished(evt);
         }
     }
 
     /**
      * notify all listeners about the errors in a file.
-     * @param aFileName the audited file
-     * @param aErrors the audit errors from the file
+     *
+     * @param aFileName
+     *            the audited file
+     * @param aErrors
+     *            the audit errors from the file
      */
     public void fireErrors(String aFileName, LocalizedMessage[] aErrors)
     {
         final String stripped = getStrippedFileName(aFileName);
         for (int i = 0; i < aErrors.length; i++) {
             final AuditEvent evt = new AuditEvent(this, stripped, aErrors[i]);
             if (mFilters.accept(evt)) {
                 final Iterator it = mListeners.iterator();
                 while (it.hasNext()) {
                     final AuditListener listener = (AuditListener) it.next();
                     listener.addError(evt);
                 }
             }
         }
     }
 
     /**
      * Sets the factory for creating submodules.
      *
      * @param aModuleFactory the factory for creating FileSetChecks
      */
     public void setModuleFactory(ModuleFactory aModuleFactory)
     {
         mModuleFactory = aModuleFactory;
     }
 
     /** @param aLocaleCountry the country to report messages  **/
     public void setLocaleCountry(String aLocaleCountry)
     {
         mLocaleCountry = aLocaleCountry;
     }
 
     /** @param aLocaleLanguage the language to report messages  **/
     public void setLocaleLanguage(String aLocaleLanguage)
     {
         mLocaleLanguage = aLocaleLanguage;
     }
 
     /**
      * Sets the severity level.  The string should be one of the names
      * defined in the <code>SeverityLevel</code> class.
      *
      * @param aSeverity  The new severity level
      * @see SeverityLevel
      */
     public final void setSeverity(String aSeverity)
     {
         mSeverityLevel = SeverityLevel.getInstance(aSeverity);
     }
 
