diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java
index 59c9c04cc..559b1b114 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java
@@ -168,122 +168,110 @@ public class DescendantTokenCheck extends Check
     private int mMinimumDepth;
 
     /** maximum depth */
     private int mMaximumDepth = Integer.MAX_VALUE;
 
     /** minimum number */
     private int mMinimumNumber;
 
     /** maximum number */
     private int mMaximumNumber = Integer.MAX_VALUE;
 
     /** limited tokens */
     private int[] mLimitedTokens = new int[0];
 
     /** error message when minimum count not reached */
     private String mMinimumMessage = "descendant.token.min";
 
     /** error message when maximum count exceeded */
     private String mMaximumMessage = "descendant.token.max";
 
     /**
      * Counts of descendant tokens.
      * Indexed by (token ID - 1) for performance.
      */
     private int[] mCounts = new int[0];
 
     /** {@inheritDoc} */
     @Override
     public int[] getDefaultTokens()
     {
         return new int[0];
     }
 
     /** {@inheritDoc} */
     @Override
     public void visitToken(DetailAST aAST)
     {
         //reset counts
         Arrays.fill(mCounts, 0);
 
         countTokens(aAST, 0);
 
         // name of this token
         final String name = TokenTypes.getTokenName(aAST.getType());
 
         for (int element : mLimitedTokens) {
             final int tokenCount = mCounts[element - 1];
             if (tokenCount < mMinimumNumber) {
                 final String descendantName =
                     TokenTypes.getTokenName(element);
-                log(aAST.getLineNo(),
-                    aAST.getColumnNo(),
-                    mMinimumMessage,
-                    new String[] {
-                        "" + tokenCount,
-                        "" + mMinimumNumber,
-                        name,
-                        descendantName,
-                    });
+                log(aAST.getLineNo(), aAST.getColumnNo(), mMinimumMessage,
+                    "" + tokenCount, "" + mMinimumNumber,
+                    name, descendantName);
             }
             if (tokenCount > mMaximumNumber) {
                 final String descendantName =
                     TokenTypes.getTokenName(element);
-                log(aAST.getLineNo(),
-                    aAST.getColumnNo(),
-                    mMaximumMessage,
-                    new String[] {
-                        "" + tokenCount,
-                        "" + mMaximumNumber,
-                        name,
-                        descendantName,
-                    });
+                log(aAST.getLineNo(), aAST.getColumnNo(), mMaximumMessage,
+                    "" + tokenCount, "" + mMaximumNumber,
+                    name, descendantName);
             }
         }
     }
 
     /**
      * Counts the number of occurrences of descendant tokens.
      * @param aAST the root token for descendants.
      * @param aDepth the maximum depth of the counted descendants.
      */
     private void countTokens(AST aAST, int aDepth)
     {
         if (aDepth <= mMaximumDepth) {
             //update count
             if (aDepth >= mMinimumDepth) {
                 final int type = aAST.getType();
                 if (type <= mCounts.length) {
                     mCounts[type - 1]++;
                 }
             }
             AST child = aAST.getFirstChild();
             final int nextDepth = aDepth + 1;
             while (child != null) {
                 countTokens(child, nextDepth);
                 child = child.getNextSibling();
             }
         }
     }
 
     /** {@inheritDoc} */
     @Override
     public int[] getAcceptableTokens()
     {
         // Any tokens set by property 'tokens' are acceptable
         final Set<String> tokenNames = getTokenNames();
         final int[] result = new int[tokenNames.size()];
         int i = 0;
         for (String name : tokenNames) {
             result[i++] = TokenTypes.getTokenId(name);
         }
         return result;
     }
 
     /**
      * Sets the tokens which occurance as descendant is limited.
      * @param aLimitedTokens - list of tokens to ignore.
      */
     public void setLimitedTokens(String[] aLimitedTokens)
     {
         mLimitedTokens = new int[aLimitedTokens.length];
 
