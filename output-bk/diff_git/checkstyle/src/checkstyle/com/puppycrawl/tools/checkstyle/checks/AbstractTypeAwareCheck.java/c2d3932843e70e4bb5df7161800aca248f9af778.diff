diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
index 709e09173..63ba85e81 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
@@ -87,139 +87,139 @@ public abstract class AbstractTypeAwareCheck extends Check
 
     /**
      * Controls whether to show class loading errors in the checkstyle report.
      *
      * @param aSuppressLoadErrors true if errors shouldn't be shown
      */
     public final void setSuppressLoadErrors(boolean aSuppressLoadErrors)
     {
         mSuppressLoadErrors = aSuppressLoadErrors;
     }
 
     /**
      * Called to process an AST when visiting it.
      * @param aAST the AST to process. Guaranteed to not be PACKAGE_DEF or
      *             IMPORT tokens.
      */
     protected abstract void processAST(DetailAST aAST);
 
     /** {@inheritDoc} */
     public final int[] getRequiredTokens()
     {
         return new int[] {
             TokenTypes.PACKAGE_DEF,
             TokenTypes.IMPORT,
             TokenTypes.CLASS_DEF,
             TokenTypes.ENUM_DEF,
         };
     }
 
     /** {@inheritDoc} */
     public void beginTree(DetailAST aRootAST)
     {
         mPackageFullIdent = FullIdent.createFullIdent(null);
         mImports.clear();
         // add java.lang.* since it's always imported
         mImports.add("java.lang.*");
         mClassResolver = null;
         mCurrentClass = "";
         mTypeParams.clear();
     }
 
     /** {@inheritDoc} */
     public final void visitToken(DetailAST aAST)
     {
         if (aAST.getType() == TokenTypes.PACKAGE_DEF) {
             processPackage(aAST);
         }
         else if (aAST.getType() == TokenTypes.IMPORT) {
             processImport(aAST);
         }
-        else if (aAST.getType() == TokenTypes.CLASS_DEF
-                 || aAST.getType() == TokenTypes.ENUM_DEF)
+        else if ((aAST.getType() == TokenTypes.CLASS_DEF)
+                 || (aAST.getType() == TokenTypes.ENUM_DEF))
         {
             processClass(aAST);
         }
         else {
             if (aAST.getType() == TokenTypes.METHOD_DEF) {
                 processTypeParams(aAST);
             }
             processAST(aAST);
         }
     }
 
     /** {@inheritDoc} */
     public final void leaveToken(DetailAST aAST)
     {
-        if (aAST.getType() == TokenTypes.CLASS_DEF
-            || aAST.getType() == TokenTypes.ENUM_DEF)
+        if ((aAST.getType() == TokenTypes.CLASS_DEF)
+            || (aAST.getType() == TokenTypes.ENUM_DEF))
         {
             // perhaps it was inner class
             int dotIdx = mCurrentClass.lastIndexOf("$");
             if (dotIdx == -1) {
                 // perhaps just a class
                 dotIdx = mCurrentClass.lastIndexOf(".");
             }
             if (dotIdx == -1) {
                 // looks like a topmost class
                 mCurrentClass = "";
             }
             else {
                 mCurrentClass = mCurrentClass.substring(0, dotIdx);
             }
             mTypeParams.remove(mTypeParams.size() - 1);
         }
         else if (aAST.getType() == TokenTypes.METHOD_DEF) {
             mTypeParams.remove(mTypeParams.size() - 1);
         }
-        else if (aAST.getType() != TokenTypes.PACKAGE_DEF
-                 && aAST.getType() != TokenTypes.IMPORT)
+        else if ((aAST.getType() != TokenTypes.PACKAGE_DEF)
+                 && (aAST.getType() != TokenTypes.IMPORT))
         {
             leaveAST(aAST);
         }
     }
 
     /**
      * Called when exiting an AST. A no-op by default, extending classes
      * may choose to override this to augment their processing.
      * @param aAST the AST we are departing. Guaranteed to not be PACKAGE_DEF,
      *             CLASS_DEF, or IMPORT
      */
     protected void leaveAST(DetailAST aAST)
     {
     }
 
     /**
      * Is exception is unchecked (subclass of <code>RuntimeException</code>
      * or <code>Error</code>
      *
      * @param aException <code>Class</code> of exception to check
      * @return true  if exception is unchecked
      *         false if exception is checked
      */
     protected boolean isUnchecked(Class aException)
     {
         return isSubclass(aException, RuntimeException.class)
             || isSubclass(aException, Error.class);
     }
 
     /**
      * Checks if one class is subclass of another
      *
      * @param aChild <code>Class</code> of class
      *               which should be child
      * @param aParent <code>Class</code> of class
      *                which should be parent
      * @return true  if aChild is subclass of aParent
      *         false otherwise
      */
     protected boolean isSubclass(Class aChild, Class aParent)
     {
         return (aParent != null) && (aChild != null)
             &&  aParent.isAssignableFrom(aChild);
     }
 
     /** @return <code>ClassResolver</code> for current tree. */
     private ClassResolver getClassResolver()
     {
         if (mClassResolver == null) {
             mClassResolver =
@@ -428,101 +428,101 @@ public abstract class AbstractTypeAwareCheck extends Check
 
         /**
          * Creates new instance of class inforamtion object.
          * @param aName token which represents class name.
          */
         protected ClassInfo(final Token aName)
         {
             if (aName == null) {
                 throw new NullPointerException(
                     "ClassInfo's name should be non-null");
             }
             mName = aName;
         }
     }
 
     /** Represents regular classes/enumes. */
     private static final class RegularClass extends ClassInfo
     {
         /** name of surrounding class. */
         private String mSurroundingClass;
         /** is class loadable. */
         private boolean mIsLoadable = true;
         /** <code>Class</code> object of this class if it's loadable. */
         private Class mClass;
         /** the check we use to resolve classes. */
         private final AbstractTypeAwareCheck mCheck;
 
         /**
          * Creates new instance of of class information object.
          * @param aName <code>FullIdent</code> associated with new object.
          * @param aSurroundingClass name of current surrounding class.
          * @param aCheck the check we use to load class.
          */
         private RegularClass(final Token aName,
                              final String aSurroundingClass,
                              final AbstractTypeAwareCheck aCheck)
         {
             super(aName);
             mSurroundingClass = aSurroundingClass;
             mCheck = aCheck;
         }
         /** @return if class is loadable ot not. */
         private boolean isLoadable()
         {
             return mIsLoadable;
         }
 
         /** @return <code>Class</code> associated with an object. */
         public Class getClazz()
         {
-            if (isLoadable() && mClass == null) {
+            if (isLoadable() && (mClass == null)) {
                 setClazz(mCheck.tryLoadClass(getName(), mSurroundingClass));
             }
             return mClass;
         }
 
         /**
          * Associates <code> Class</code> with an object.
          * @param aClass <code>Class</code> to associate with.
          */
         private void setClazz(Class aClass)
         {
             mClass = aClass;
             mIsLoadable = (mClass != null);
         }
 
         /** {@inheritDoc} */
         public String toString()
         {
             return "RegularClass[name=" + getName()
                 + ", in class=" + mSurroundingClass
                 + ", loadable=" + mIsLoadable
                 + ", class=" + mClass + "]";
         }
     }
 
     /** Represents type param which is "alias" for real type. */
     private static class ClassAlias extends ClassInfo
     {
         /** Class information associated with the alias. */
         private final ClassInfo mClassInfo;
 
         /**
          * Creates nnew instance of the class.
          * @param aName token which represents name of class alias.
          * @param aClassInfo class information associated with the alias.
          */
         ClassAlias(final Token aName, ClassInfo aClassInfo)
         {
             super(aName);
             mClassInfo = aClassInfo;
         }
 
         /** {@inheritDoc} */
         public final Class getClazz()
         {
             return mClassInfo.getClazz();
         }
 
         /** {@inheritDoc} */
         public String toString()
