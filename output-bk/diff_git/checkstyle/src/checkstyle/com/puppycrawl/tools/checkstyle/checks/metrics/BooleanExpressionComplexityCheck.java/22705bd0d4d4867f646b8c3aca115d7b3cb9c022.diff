diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheck.java
index 07f3f4dec..d5401befc 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheck.java
@@ -172,57 +172,55 @@ public final class BooleanExpressionComplexityCheck extends Check
      * Represents context (method/expression) in which we check complexity.
      *
      * @author <a href="mailto:simon@redhillconsulting.com.au">Simon Harris</a>
      * @author o_sukhodolsky
      */
     private class Context
     {
         /**
          * Should we perform check in current context or not.
          * Usually false if we are inside equals() method.
          */
         private final boolean mChecking;
         /** Count of boolean operators. */
         private int mCount;
 
         /**
          * Creates new instance.
          * @param aChecking should we check in current context or not.
          */
         public Context(boolean aChecking)
         {
             mChecking = aChecking;
             mCount = 0;
         }
 
         /**
          * Getter for checking property.
          * @return should we check in current context or not.
          */
         public boolean isChecking()
         {
             return mChecking;
         }
 
         /** Increases operator counter. */
         public void visitBooleanOperator()
         {
             ++mCount;
         }
 
         /**
          * Checks if we violates maximum allowed complexity.
          * @param aAST a node we check now.
          */
         public void checkCount(DetailAST aAST)
         {
             if (mChecking && (mCount > getMax())) {
                 final DetailAST parentAST = aAST.getParent();
 
                 log(parentAST.getLineNo(), parentAST.getColumnNo(),
-                    "booleanExpressionComplexity",
-                    new Integer(mCount),
-                    new Integer(getMax()));
+                    "booleanExpressionComplexity", mCount, getMax());
             }
         }
     }
 }
