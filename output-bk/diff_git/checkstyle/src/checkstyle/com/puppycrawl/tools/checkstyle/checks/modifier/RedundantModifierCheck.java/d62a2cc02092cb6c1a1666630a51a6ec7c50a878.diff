diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
index 0cde54a9c..e02923fb5 100755
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
@@ -8,104 +8,104 @@
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.modifier;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.ScopeUtils;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * Checks for redundant modifiers in interface and annotation definitions.
  * Also checks for redundant final modifiers on methods of final classes.
  *
  * @author lkuehne
  */
 public class RedundantModifierCheck
     extends Check
 {
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.METHOD_DEF,
             TokenTypes.VARIABLE_DEF,
             TokenTypes.ANNOTATION_FIELD_DEF,
         };
     }
 
     @Override
     public int[] getRequiredTokens()
     {
         return new int[] {};
     }
 
     @Override
     public void visitToken(DetailAST aAST)
     {
         if (ScopeUtils.inInterfaceOrAnnotationBlock(aAST)) {
             final DetailAST modifiers =
                 aAST.findFirstToken(TokenTypes.MODIFIERS);
 
-            DetailAST modifier = (DetailAST) modifiers.getFirstChild();
+            DetailAST modifier = modifiers.getFirstChild();
             while (modifier != null) {
 
                 // javac does not allow final or static in interface methods
                 // order annotation fields hence no need to check that this
                 // is not a method or annotation field
 
                 final int type = modifier.getType();
                 if ((type == TokenTypes.LITERAL_PUBLIC)
                     || (type == TokenTypes.ABSTRACT)
                     || (type == TokenTypes.LITERAL_STATIC)
                     || (type == TokenTypes.FINAL))
                 {
                     log(modifier.getLineNo(), modifier.getColumnNo(),
                             "redundantModifier", modifier.getText());
                     break;
                 }
 
-                modifier = (DetailAST) modifier.getNextSibling();
+                modifier = modifier.getNextSibling();
             }
         }
         else if (aAST.getType() == TokenTypes.METHOD_DEF) {
             final DetailAST modifiers =
                             aAST.findFirstToken(TokenTypes.MODIFIERS);
             // private method?
             boolean checkFinal =
                 modifiers.branchContains(TokenTypes.LITERAL_PRIVATE);
             // declared in a final class?
             DetailAST parent = aAST.getParent();
             while (parent != null) {
                 if (parent.getType() == TokenTypes.CLASS_DEF) {
                     final DetailAST classModifiers =
                         parent.findFirstToken(TokenTypes.MODIFIERS);
                     checkFinal |=
                         classModifiers.branchContains(TokenTypes.FINAL);
                     break;
                 }
                 parent = parent.getParent();
             }
             if (checkFinal) {
-                DetailAST modifier = (DetailAST) modifiers.getFirstChild();
+                DetailAST modifier = modifiers.getFirstChild();
                 while (modifier != null) {
                     final int type = modifier.getType();
                     if (type == TokenTypes.FINAL) {
                         log(modifier.getLineNo(), modifier.getColumnNo(),
                                 "redundantModifier", modifier.getText());
                         break;
                     }
-                    modifier = (DetailAST) modifier.getNextSibling();
+                    modifier = modifier.getNextSibling();
                 }
             }
         }
     }
 }
