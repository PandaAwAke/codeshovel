diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
index d3a488148..ad3eff6c2 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
@@ -1,91 +1,92 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2005  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.javadoc;
 
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.ListIterator;
 import java.util.Set;
 
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
 import antlr.collections.AST;
 
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FileContents;
 import com.puppycrawl.tools.checkstyle.api.FullIdent;
 import com.puppycrawl.tools.checkstyle.api.Scope;
 import com.puppycrawl.tools.checkstyle.api.ScopeUtils;
 import com.puppycrawl.tools.checkstyle.api.TextBlock;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.api.Utils;
 import com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck;
+import com.puppycrawl.tools.checkstyle.checks.CheckUtils;
 
 /**
  * Checks the Javadoc of a method or constructor.
  *
  * @author Oliver Burn
  * @author Rick Giles
  * @author o_sukhodoslky
  * @version 1.1
  */
 public class JavadocMethodCheck extends AbstractTypeAwareCheck
 {
     /** the pattern to match Javadoc tags that take an argument * */
     private static final String MATCH_JAVADOC_ARG_PAT =
         "@(throws|exception|param)\\s+(\\S+)\\s+\\S";
     /** compiled regexp to match Javadoc tags that take an argument * */
     private static final Pattern MATCH_JAVADOC_ARG = Utils
         .createPattern(MATCH_JAVADOC_ARG_PAT);
 
     /**
      * the pattern to match the first line of a multi-line Javadoc tag that
      * takes an argument.
      */
     private static final String MATCH_JAVADOC_ARG_MULTILINE_START_PAT =
         "@(throws|exception|param)\\s+(\\S+)\\s*$";
     /** compiled regexp to match first part of multilineJavadoc tags * */
     private static final Pattern MATCH_JAVADOC_ARG_MULTILINE_START = Utils
         .createPattern(MATCH_JAVADOC_ARG_MULTILINE_START_PAT);
 
     /** the pattern that looks for a continuation of the comment * */
     private static final String MATCH_JAVADOC_MULTILINE_CONT_PAT =
         "(\\*/|@|[^\\s\\*])";
     /** compiled regexp to look for a continuation of the comment * */
     private static final Pattern MATCH_JAVADOC_MULTILINE_CONT = Utils
         .createPattern(MATCH_JAVADOC_MULTILINE_CONT_PAT);
     /** Multiline finished at end of comment * */
     private static final String END_JAVADOC = "*/";
     /** Multiline finished at next Javadoc * */
     private static final String NEXT_TAG = "@";
 
     /** the pattern to match Javadoc tags with no argument * */
     private static final String MATCH_JAVADOC_NOARG_PAT =
         "@(return|see)\\s+\\S";
     /** compiled regexp to match Javadoc tags with no argument * */
     private static final Pattern MATCH_JAVADOC_NOARG = Utils
         .createPattern(MATCH_JAVADOC_NOARG_PAT);
     /**
      * the pattern to match the first line of a multi-line Javadoc tag that
      * takes no argument.
      */
     private static final String MATCH_JAVADOC_NOARG_MULTILINE_START_PAT =
@@ -308,101 +309,101 @@ public class JavadocMethodCheck extends AbstractTypeAwareCheck
                          "javadoc.classInfo",
                          new Object[] {"@throws", aIdent.getText()});
     }
 
     /**
      * Whether we should check this node.
      *
      * @param aAST a given node.
      * @return whether we should check a given node.
      */
     private boolean shouldCheck(final DetailAST aAST)
     {
         final DetailAST mods = aAST.findFirstToken(TokenTypes.MODIFIERS);
         final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);
         final Scope scope = ScopeUtils.inInterfaceOrAnnotationBlock(aAST)
             ? Scope.PUBLIC
             : declaredScope;
         final Scope surroundingScope = ScopeUtils.getSurroundingScope(aAST);
 
         return scope.isIn(mScope)
             && surroundingScope.isIn(mScope)
             && ((mExcludeScope == null) || !scope.isIn(mExcludeScope)
                 || !surroundingScope.isIn(mExcludeScope));
     }
 
     /**
      * Checks the Javadoc for a method.
      *
      * @param aAST the token for the method
      * @param aComment the Javadoc comment
      */
     private void checkComment(DetailAST aAST, TextBlock aComment)
     {
         final List tags = getMethodTags(aComment);
 
         // Check for only one @see or inheritDoc tag
         if ((tags.size() == 1)
             && ((JavadocTag) tags.get(0)).isSeeOrInheritDocTag())
         {
             return;
         }
 
         Iterator it = tags.iterator();
         if (aAST.getType() != TokenTypes.ANNOTATION_FIELD_DEF) {
             // Check for inheritDoc
             boolean hasInheritDocTag = false;
             while (it.hasNext() && !hasInheritDocTag) {
                 hasInheritDocTag |= ((JavadocTag) it.next()).isInheritDocTag();
             }
 
-            checkParamTags(tags, getParameters(aAST), !hasInheritDocTag);
+            checkParamTags(tags, aAST, !hasInheritDocTag);
             checkThrowsTags(tags, getThrows(aAST), !hasInheritDocTag);
             if (isFunction(aAST)) {
                 checkReturnTag(tags, aAST.getLineNo(), !hasInheritDocTag);
             }
         }
 
         // Dump out all unused tags
         it = tags.iterator();
         while (it.hasNext()) {
             final JavadocTag jt = (JavadocTag) it.next();
             if (!jt.isSeeOrInheritDocTag()) {
                 log(jt.getLineNo(), "javadoc.unusedTagGeneral");
             }
         }
     }
 
     /**
      * Returns the tags in a javadoc comment. Only finds throws, exception,
      * param, return and see tags.
      *
      * @return the tags found
      * @param aComment the Javadoc comment
      */
     private List getMethodTags(TextBlock aComment)
     {
         final String[] lines = aComment.getText();
         final List tags = new ArrayList();
         int currentLine = aComment.getStartLineNo() - 1;
 
         for (int i = 0; i < lines.length; i++) {
             currentLine++;
             Matcher javadocArgMatcher = MATCH_JAVADOC_ARG.matcher(lines[i]);
             Matcher javadocNoargMatcher =
                 MATCH_JAVADOC_NOARG.matcher(lines[i]);
             Matcher noargCurlyMatcher =
                 MATCH_JAVADOC_NOARG_CURLY.matcher(lines[i]);
             Matcher argMultilineStart =
                 MATCH_JAVADOC_ARG_MULTILINE_START.matcher(lines[i]);
             Matcher noargMultilineStart =
                 MATCH_JAVADOC_NOARG_MULTILINE_START.matcher(lines[i]);
             if (javadocArgMatcher.find()) {
                 tags.add(new JavadocTag(currentLine,
                                         javadocArgMatcher.group(1),
                                         javadocArgMatcher.group(2)));
             }
             else if (javadocNoargMatcher.find()) {
                 tags.add(new JavadocTag(currentLine,
                                         javadocNoargMatcher.group(1)));
             }
             else if (noargCurlyMatcher.find()) {
@@ -465,145 +466,175 @@ public class JavadocMethodCheck extends AbstractTypeAwareCheck
      * @return the list of parameter nodes for aAST.
      */
     private List getParameters(DetailAST aAST)
     {
         final DetailAST params = aAST.findFirstToken(TokenTypes.PARAMETERS);
         final List retVal = new ArrayList();
 
         DetailAST child = (DetailAST) params.getFirstChild();
         while (child != null) {
             if (child.getType() == TokenTypes.PARAMETER_DEF) {
                 final DetailAST ident = child.findFirstToken(TokenTypes.IDENT);
                 retVal.add(ident);
             }
             child = (DetailAST) child.getNextSibling();
         }
         return retVal;
     }
 
     /**
      * Computes the exception nodes for a method.
      *
      * @param aAST the method node.
      * @return the list of exception nodes for aAST.
      */
     private List getThrows(DetailAST aAST)
     {
         final List retVal = new ArrayList();
         final DetailAST throwsAST = aAST
             .findFirstToken(TokenTypes.LITERAL_THROWS);
         if (throwsAST != null) {
             DetailAST child = (DetailAST) throwsAST.getFirstChild();
             while (child != null) {
                 if ((child.getType() == TokenTypes.IDENT)
                     || (child.getType() == TokenTypes.DOT))
                 {
                     final ExceptionInfo ei =
                         new ExceptionInfo(FullIdent.createFullIdent(child),
                                           getCurrentClassName());
                     retVal.add(ei);
                 }
                 child = (DetailAST) child.getNextSibling();
             }
         }
         return retVal;
     }
 
     /**
      * Checks a set of tags for matching parameters.
      *
      * @param aTags the tags to check
-     * @param aParams the list of parameters to check
+     * @param aParent the node which takes the parameters
      * @param aReportExpectedTags whether we should report if do not find
      *            expected tag
      */
-    private void checkParamTags(List aTags, List aParams,
+    private void checkParamTags(final List aTags, final DetailAST aParent,
                                 boolean aReportExpectedTags)
     {
+        List params = getParameters(aParent);
+        List typeParams = CheckUtils.getTypeParameters(aParent);
+
         // Loop over the tags, checking to see they exist in the params.
         final ListIterator tagIt = aTags.listIterator();
         while (tagIt.hasNext()) {
             final JavadocTag tag = (JavadocTag) tagIt.next();
 
             if (!tag.isParamTag()) {
                 continue;
             }
 
             tagIt.remove();
 
-            // Loop looking for matching param
             boolean found = false;
-            final Iterator paramIt = aParams.iterator();
+
+            // Loop looking for matching param
+            final Iterator paramIt = params.iterator();
             while (paramIt.hasNext()) {
                 final DetailAST param = (DetailAST) paramIt.next();
                 if (param.getText().equals(tag.getArg1())) {
                     found = true;
                     paramIt.remove();
                     break;
                 }
             }
 
+            if (tag.getArg1().startsWith("<") && tag.getArg1().endsWith(">")) {
+                // Loop looking for matching type param
+                Iterator typeParamsIt = typeParams.iterator();
+                while (typeParamsIt.hasNext()) {
+                    final DetailAST typeParam = (DetailAST) typeParamsIt.next();
+                    if (typeParam.findFirstToken(TokenTypes.IDENT).getText()
+                        .equals(tag.getArg1().substring(
+                            1, tag.getArg1().length() - 1)))
+                    {
+                        found = true;
+                        typeParamsIt.remove();
+                        break;
+                    }
+                }
+
+            }
+
             // Handle extra JavadocTag
             if (!found) {
                 log(tag.getLineNo(), "javadoc.unusedTag", "@param", tag
                     .getArg1());
             }
         }
 
-        // Now dump out all parameters without tags :- unless
+        // Now dump out all type parameters/parameters without tags :- unless
         // the user has chosen to suppress these problems
         if (!mAllowMissingParamTags && aReportExpectedTags) {
-            final Iterator paramIt = aParams.iterator();
+            final Iterator paramIt = params.iterator();
             while (paramIt.hasNext()) {
                 final DetailAST param = (DetailAST) paramIt.next();
                 log(param, "javadoc.expectedTag", "@param", param.getText());
             }
+
+            final Iterator typeParamsIt = typeParams.iterator();
+            while (typeParamsIt.hasNext()) {
+                final DetailAST typeParam = (DetailAST) typeParamsIt.next();
+                log(typeParam, "javadoc.expectedTag", "@param",
+                    "<"
+                    + typeParam.findFirstToken(TokenTypes.IDENT).getText()
+                    + ">");
+            }
         }
     }
 
     /**
      * Checks whether a method is a function.
      *
      * @param aAST the method node.
      * @return whether the method is a function.
      */
     private boolean isFunction(DetailAST aAST)
     {
         boolean retVal = false;
         if (aAST.getType() == TokenTypes.METHOD_DEF) {
             final DetailAST typeAST = aAST.findFirstToken(TokenTypes.TYPE);
             if ((typeAST != null)
                 && (typeAST.findFirstToken(TokenTypes.LITERAL_VOID) == null))
             {
                 retVal = true;
             }
         }
         return retVal;
     }
 
     /**
      * Checks for only one return tag. All return tags will be removed from the
      * supplied list.
      *
      * @param aTags the tags to check
      * @param aLineNo the line number of the expected tag
      * @param aReportExpectedTags whether we should report if do not find
      *            expected tag
      */
     private void checkReturnTag(List aTags, int aLineNo,
                                 boolean aReportExpectedTags)
     {
         // Loop over tags finding return tags. After the first one, report an
         // error.
         boolean found = false;
         final ListIterator it = aTags.listIterator();
         while (it.hasNext()) {
             final JavadocTag jt = (JavadocTag) it.next();
             if (jt.isReturnTag()) {
                 if (found) {
                     log(jt.getLineNo(), "javadoc.return.duplicate");
                 }
                 found = true;
                 it.remove();
             }
         }
 
