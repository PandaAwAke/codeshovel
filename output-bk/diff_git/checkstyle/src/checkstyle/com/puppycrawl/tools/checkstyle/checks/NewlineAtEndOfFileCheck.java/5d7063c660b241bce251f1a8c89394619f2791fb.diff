diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java
index 1cc4affef..1ab8fb039 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java
@@ -68,106 +68,106 @@ public class NewlineAtEndOfFileCheck
 
     /**
      * @see com.puppycrawl.tools.checkstyle.api.FileSetCheck#process
      */
     public void process(File[] aFiles)
     {
         final File[] files = filter(aFiles);
         final MessageDispatcher dispatcher = getMessageDispatcher();
         for (int i = 0; i < files.length; i++) {
             final File file = files[i];
             final String path = file.getPath();
             dispatcher.fireFileStarted(path);
             RandomAccessFile randomAccessFile = null;
             try {
                 randomAccessFile = new RandomAccessFile(file, "r");
                 if (!endsWithNewline(randomAccessFile)) {
                     log(0, "noNewlineAtEOF", path);
                 }
             }
             catch (IOException e) {
                 ///CLOVER:OFF
                 logIOException(e);
                 ///CLOVER:ON
             }
             finally {
                 if (randomAccessFile != null) {
                     try {
                         randomAccessFile.close();
                     }
                     catch (IOException e) {
                         ///CLOVER:OFF
                         logIOException(e);
                         ///CLOVER:ON
                     }
                 }
             }
             fireErrors(path);
             dispatcher.fireFileFinished(path);
         }
     }
 
     /**
      * Sets the line separator to one of 'crlf', 'lf' or 'cr'.
      *
      * @param aLineSeparator The line separator to set
      * @throws IllegalArgumentException If the specified line separator is not
      *         one of 'crlf', 'lf' or 'cr'
      */
     public void setLineSeparator(String aLineSeparator)
     {
-        AbstractOption option =
+        final AbstractOption option =
             LineSeparatorOption.SYSTEM.decode(aLineSeparator);
 
         if (option == null) {
             throw new ConversionException("unable to parse " + aLineSeparator);
         }
 
         mLineSeparator = (LineSeparatorOption) option;
     }
 
     /**
      * Checks whether the content provided by the Reader ends with the platform
      * specific line separator.
      * @param aRandomAccessFile The reader for the content to check
      * @return boolean Whether the content ends with a line separator
      * @throws IOException When an IO error occurred while reading from the
      *         provided reader
      */
     private boolean endsWithNewline(RandomAccessFile aRandomAccessFile)
         throws IOException
     {
         final int len = mLineSeparator.length();
         if (aRandomAccessFile.length() < len) {
             return false;
         }
         aRandomAccessFile.seek(aRandomAccessFile.length() - len);
         final byte lastBytes[] = new byte[len];
         aRandomAccessFile.read(lastBytes);
         return mLineSeparator.matches(lastBytes);
     }
 
     /**
      * Helper method to log an IO exception.
      * @param aEx the exception that occured
      */
     ///CLOVER:OFF
     private void logIOException(IOException aEx)
     {
         String[] args = null;
         String key = "general.fileNotFound";
         if (!(aEx instanceof FileNotFoundException)) {
             args = new String[] {aEx.getMessage()};
             key = "general.exception";
         }
-        LocalizedMessage message =
+        final LocalizedMessage message =
             new LocalizedMessage(
                 0,
                 Defn.CHECKSTYLE_BUNDLE,
                 key,
                 args,
                 this.getClass());
         getMessageCollector().add(message);
         Utils.getExceptionLogger().debug("IOException occured.", aEx);
     }
     ///CLOVER:ON
 }
