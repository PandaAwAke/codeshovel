diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
index 90470cba1..63c915080 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
@@ -163,101 +163,105 @@ public final class TreeWalker
         mTabWidth = aTabWidth;
     }
 
     /** @param aFileName the cache file */
     public void setCacheFile(String aFileName)
     {
         final Configuration configuration = getConfiguration();
         mCache = new PropertyCacheFile(configuration, aFileName);
     }
 
     // TODO: Call from contextualize
     /** @param aClassLoader class loader to resolve classes with. */
     public void setClassLoader(ClassLoader aClassLoader)
     {
         mClassLoader = aClassLoader;
     }
 
     /**
      * Sets the module factory for creating child modules (Checks).
      * @param aModuleFactory the factory
      */
     public void setModuleFactory(ModuleFactory aModuleFactory)
     {
         mModuleFactory = aModuleFactory;
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Configurable */
     public void finishLocalSetup()
     {
         DefaultContext checkContext = new DefaultContext();
         checkContext.add("classLoader", mClassLoader);
         checkContext.add("messages", mMessages);
         // TODO: hmmm.. this looks less than elegant
         // we have just parsed the string,
         // now we're recreating it only to parse it again a few moments later
         checkContext.add("tabWidth", String.valueOf(mTabWidth));
 
         mChildContext = checkContext;
     }
 
     /**
      * Instantiates, configures and registers a Check that is specified
      * in the provided configuration.
      * @see com.puppycrawl.tools.checkstyle.api.AutomaticBean
      */
     public void setupChild(Configuration aChildConf)
             throws CheckstyleException
     {
         // TODO: improve the error handing
         final String name = aChildConf.getName();
-        final Check c = (Check) mModuleFactory.createModule(name);
+        final Object module = mModuleFactory.createModule(name);
+        if (!(module instanceof Check)) {
+            throw new CheckstyleException(name + " is not a Check");
+        }
+        final Check c = (Check) module;
         c.contextualize(mChildContext);
         c.configure(aChildConf);
         c.init();
 
         registerCheck(c);
     }
 
     /**
      * Processes a specified file and reports all errors found.
      * @param aFile the file to process
      **/
     private void process(File aFile)
     {
         // check if already checked and passed the file
         final String fileName = aFile.getPath();
         final long timestamp = aFile.lastModified();
         if (mCache.alreadyChecked(fileName, timestamp)) {
             return;
         }
 
         mMessages.reset();
         try {
             getMessageDispatcher().fireFileStarted(fileName);
             final String[] lines = Utils.getLines(fileName);
             final FileContents contents = new FileContents(fileName, lines);
             final DetailAST rootAST = TreeWalker.parse(contents);
             walk(rootAST, contents);
         }
         catch (FileNotFoundException fnfe) {
             // TODO: this dependency on the checkstyle package is not good. It
             // introduces a circular dependency between packages.
             mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE,
                                                "general.fileNotFound", null));
         }
         catch (IOException ioe) {
             mMessages.add(new LocalizedMessage(
                               0, Defn.CHECKSTYLE_BUNDLE,
                               "general.exception",
                               new String[] {ioe.getMessage()}));
         }
         catch (RecognitionException re) {
             mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE,
                                                "general.exception",
                                                new String[] {re.getMessage()}));
         }
         catch (TokenStreamException te) {
             mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE,
                                                "general.exception",
                                                new String[] {te.getMessage()}));
         }
