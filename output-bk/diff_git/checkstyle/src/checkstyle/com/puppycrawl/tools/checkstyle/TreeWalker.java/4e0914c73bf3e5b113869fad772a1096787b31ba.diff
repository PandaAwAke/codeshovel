diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
index 00ca51e96..90470cba1 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
@@ -72,101 +72,105 @@ public final class TreeWalker
          * @param aLexer the tokenstream the recognizer operates on.
          */
         private SilentJava14Recognizer(GeneratedJava14Lexer aLexer)
         {
             super(aLexer);
         }
 
         /**
          * Parser error-reporting function, does nothing.
          * @param aRex the exception to be reported
          */
         public void reportError(RecognitionException aRex)
         {
         }
 
         /**
          * Parser error-reporting function, does nothing.
          * @param aMsg the error message
          */
         public void reportError(String aMsg)
         {
         }
 
         /**
          * Parser warning-reporting function, does nothing.
          * @param aMsg the error message
          */
         public void reportWarning(String aMsg)
         {
         }
     }
     // TODO: really need to optimise the performance of this class.
 
     /** maps from token name to checks */
     private final Map mTokenToChecks = new HashMap();
     /** all the registered checks */
     private final Set mAllChecks = new HashSet();
     /** collects the error messages */
     private final LocalizedMessages mMessages;
     /** the distance between tab stops */
     private int mTabWidth = 8;
     /** cache file **/
     private PropertyCacheFile mCache = new PropertyCacheFile(null, null);
 
     /** class loader to resolve classes with. **/
     private ClassLoader mClassLoader;
 
     /** context of child components */
     private Context mChildContext;
     
-    private Map mContext = new HashMap();
+    /** context of visited node */
+    private final Map mTokenContext = new HashMap();
+
+    /** context of tree */
+    private final Map mTreeContext = new HashMap();
 
     /**
      * HACK - a reference to a private "mParent" field in DetailAST.
      * Don't do this at home!
      */
     private Field mDetailASTmParent;
 
     /** a factory for creating submodules (i.e. the Checks) */
     private ModuleFactory mModuleFactory;
 
     /**
      * Creates a new <code>TreeWalker</code> instance.
      */
     public TreeWalker()
     {
         mMessages = new LocalizedMessages();
 
         // TODO: I (lkuehne) can't believe I wrote this! HACK HACK HACK!
 
         // the parent relationship should really be managed by the DetailAST
         // itself but ANTLR calls setFirstChild and friends in an
         // unpredictable way. Introducing this hack for now to make
         // DetailsAST.setParent() private...
         try {
             mDetailASTmParent = DetailAST.class.getDeclaredField("mParent");
             // this will fail in environments with security managers
             mDetailASTmParent.setAccessible(true);
         }
         catch (NoSuchFieldException e) {
             mDetailASTmParent = null;
         }
     }
 
     /** @param aTabWidth the distance between tab stops */
     public void setTabWidth(int aTabWidth)
     {
         mTabWidth = aTabWidth;
     }
 
     /** @param aFileName the cache file */
     public void setCacheFile(String aFileName)
     {
         final Configuration configuration = getConfiguration();
         mCache = new PropertyCacheFile(configuration, aFileName);
     }
 
     // TODO: Call from contextualize
     /** @param aClassLoader class loader to resolve classes with. */
     public void setClassLoader(ClassLoader aClassLoader)
     {
@@ -337,161 +341,161 @@ public final class TreeWalker
     }
 
     /**
      * Initiates the walk of an AST.
      * @param aAST the root AST
      * @param aContents the contents of the file the AST was generated from
      */
     private void walk(DetailAST aAST, FileContents aContents)
     {
         mMessages.reset();
         notifyBegin(aContents);
 
          // empty files are not flagged by javac, will yield aAST == null
         if (aAST != null) {
             setParent(aAST, null); // TODO: Manage parent in DetailAST
             process(aAST);
         }
 
         notifyEnd();
     }
 
     /**
      * Sets the parent of an AST.
      * @param aChildAST the child that gets a new parent
      * @param aParentAST the new parent
      */
     // TODO: remove this method and manage parent in DetailAST
     private void setParent(DetailAST aChildAST, DetailAST aParentAST)
     {
         // HACK
         try {
             mDetailASTmParent.set(aChildAST, aParentAST);
         }
         catch (IllegalAccessException iae) {
             // can't happen because method has been made accesible
             throw new RuntimeException();
         }
         // End of HACK
     }
 
     /**
      * Notify interested checks that about to begin walking a tree.
      * @param aContents the contents of the file the AST was generated from
      */
     private void notifyBegin(FileContents aContents)
     {
         // TODO: do not track Context properly for token
         final Iterator it = mAllChecks.iterator();
         while (it.hasNext()) {
             final Check check = (Check) it.next();
-            final HashMap treeContext = new HashMap();
-            check.setTreeContext(treeContext);
+            mTreeContext.clear();
+            check.setTreeContext(mTreeContext);
             check.setFileContents(aContents);
             check.beginTree();
         }
     }
 
     /**
      * Notify checks that finished walking a tree.
      */
     private void notifyEnd()
     {
         final Iterator it = mAllChecks.iterator();
         while (it.hasNext()) {
             final Check check = (Check) it.next();
             check.finishTree();
         }
     }
 
     /**
      * Recursively processes a node calling interested checks at each node.
      * @param aAST the node to start from
      */
     private void process(DetailAST aAST)
     {
         if (aAST == null) {
             return;
         }
 
         notifyVisit(aAST);
 
         final DetailAST child = (DetailAST) aAST.getFirstChild();
         if (child != null) {
             setParent(child, aAST); // TODO: Manage parent in DetailAST
             process(child);
         }
 
         notifyLeave(aAST);
 
         final DetailAST sibling = (DetailAST) aAST.getNextSibling();
         if (sibling != null) {
             setParent(sibling, aAST.getParent()); // TODO: Manage parent ...
             process(sibling);
         }
 
     }
 
     /**
      * Notify interested checks that visiting a node.
      * @param aAST the node to notify for
      */
     private void notifyVisit(DetailAST aAST)
     {
         final ArrayList visitors =
             (ArrayList) mTokenToChecks.get(
                 TokenTypes.getTokenName(aAST.getType()));
         if (visitors != null) {
-            mContext.clear();
+            mTokenContext.clear();
             for (int i = 0; i < visitors.size(); i++) {
                 final Check check = (Check) visitors.get(i);
-                check.setTokenContext(mContext);
+                check.setTokenContext(mTokenContext);
                 check.visitToken(aAST);
             }
         }
     }
 
     /**
      * Notify interested checks that leaving a node.
      * @param aAST the node to notify for
      */
     private void notifyLeave(DetailAST aAST)
     {
         final ArrayList visitors =
             (ArrayList) mTokenToChecks.get(
                 TokenTypes.getTokenName(aAST.getType()));
         if (visitors != null) {
             for (int i = 0; i < visitors.size(); i++) {
                 final Check check = (Check) visitors.get(i);
                 // TODO: need to setup the token context
                 check.leaveToken(aAST);
             }
         }
     }
 
     /**
      * Static helper method to parses a Java source file.
      * @param aContents contains the contents of the file
      * @return the root of the AST
      * @throws TokenStreamException if lexing failed
      * @throws RecognitionException if parsing failed
      */
     public static DetailAST parse(FileContents aContents)
         throws TokenStreamException, RecognitionException
     {
         DetailAST rootAST;
         try {
             // try the 1.4 grammar first, this will succeed for
             // all code that compiles without any warnings in JDK 1.4,
             // that should cover most cases
             final Reader sar = new StringArrayReader(aContents.getLines());
             final GeneratedJava14Lexer jl = new GeneratedJava14Lexer(sar);
             jl.setFilename(aContents.getFilename());
             jl.setFileContents(aContents);
 
             final GeneratedJava14Recognizer jr =
                 new SilentJava14Recognizer(jl);
             jr.setFilename(aContents.getFilename());
             jr.setASTNodeClass(DetailAST.class.getName());
             jr.compilationUnit();
             rootAST = (DetailAST) jr.getAST();
         }
