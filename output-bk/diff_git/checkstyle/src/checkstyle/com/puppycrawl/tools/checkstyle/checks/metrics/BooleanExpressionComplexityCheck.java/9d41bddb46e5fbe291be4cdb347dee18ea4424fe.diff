diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheck.java
index ec57bb15d..96d589ad1 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheck.java
@@ -1,122 +1,126 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2007  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.metrics;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 import com.puppycrawl.tools.checkstyle.checks.CheckUtils;
 
 import java.util.Stack;
 
 /**
- * Restricts nested boolean operators (&amp;&amp;, || and ^) to
+ * Restricts nested boolean operators (&amp;&amp;, ||, &amp;, | and ^) to
  * a specified depth (default = 3).
  *
  * @author <a href="mailto:simon@redhillconsulting.com.au">Simon Harris</a>
  * @author o_sukhodolsky
  */
 public final class BooleanExpressionComplexityCheck extends Check
 {
     /** Default allowed complexity. */
     private static final int DEFAULT_MAX = 3;
 
     /** Stack of contexts. */
     private final Stack mContextStack = new Stack();
     /** Maximum allowed complexity. */
     private int mMax;
     /** Current context. */
     private Context mContext;
 
     /** Creates new instance of the check. */
     public BooleanExpressionComplexityCheck()
     {
         setMax(DEFAULT_MAX);
     }
 
     /** {@inheritDoc} */
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.CTOR_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.EXPR,
             TokenTypes.LAND,
             TokenTypes.BAND,
             TokenTypes.LOR,
             TokenTypes.BOR,
             TokenTypes.BXOR,
         };
     }
 
     /** {@inheritDoc} */
     public int[] getRequiredTokens()
     {
-        return getDefaultTokens();
+        return new int[] {
+            TokenTypes.CTOR_DEF,
+            TokenTypes.METHOD_DEF,
+            TokenTypes.EXPR,
+        };
     }
 
     /**
      * Getter for maximum allowed complexity.
      * @return value of maximum allowed complexity.
      */
     public int getMax()
     {
         return mMax;
     }
 
     /**
      * Setter for maximum allowed complexity.
      * @param aMax new maximum allowed complexity.
      */
     public void setMax(int aMax)
     {
         mMax = aMax;
     }
 
     /** {@inheritDoc} */
     public void visitToken(DetailAST aAST)
     {
         switch (aAST.getType()) {
         case TokenTypes.CTOR_DEF:
         case TokenTypes.METHOD_DEF:
             visitMethodDef(aAST);
             break;
         case TokenTypes.EXPR:
             visitExpr();
             break;
         case TokenTypes.LAND:
         case TokenTypes.BAND:
         case TokenTypes.LOR:
         case TokenTypes.BOR:
         case TokenTypes.BXOR:
             mContext.visitBooleanOperator();
             break;
         default:
             throw new IllegalStateException(aAST.toString());
         }
     }
 
     /** {@inheritDoc} */
     public void leaveToken(DetailAST aAST)
     {
         switch (aAST.getType()) {
         case TokenTypes.CTOR_DEF:
         case TokenTypes.METHOD_DEF:
             leaveMethodDef();
