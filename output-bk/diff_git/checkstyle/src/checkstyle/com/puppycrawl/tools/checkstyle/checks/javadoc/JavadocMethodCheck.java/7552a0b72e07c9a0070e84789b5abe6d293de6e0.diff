diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
index d1ac18d5e..6c4723c54 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
@@ -1,83 +1,83 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2008  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.javadoc;
 
 import antlr.collections.AST;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Sets;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FileContents;
 import com.puppycrawl.tools.checkstyle.api.FullIdent;
 import com.puppycrawl.tools.checkstyle.api.Scope;
 import com.puppycrawl.tools.checkstyle.api.ScopeUtils;
 import com.puppycrawl.tools.checkstyle.api.TextBlock;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.api.Utils;
 import com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck;
 import com.puppycrawl.tools.checkstyle.checks.CheckUtils;
-import java.util.ArrayList;
-import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.ListIterator;
 import java.util.Set;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
 /**
  * Checks the Javadoc of a method or constructor.
  *
  * @author Oliver Burn
  * @author Rick Giles
  * @author o_sukhodoslky
  * @version 1.1
  */
 public class JavadocMethodCheck extends AbstractTypeAwareCheck
 {
     /** compiled regexp to match Javadoc tags that take an argument * */
     private static final Pattern MATCH_JAVADOC_ARG =
         Utils.createPattern("@(throws|exception|param)\\s+(\\S+)\\s+\\S");
 
     /** compiled regexp to match first part of multilineJavadoc tags * */
     private static final Pattern MATCH_JAVADOC_ARG_MULTILINE_START =
         Utils.createPattern("@(throws|exception|param)\\s+(\\S+)\\s*$");
 
     /** compiled regexp to look for a continuation of the comment * */
     private static final Pattern MATCH_JAVADOC_MULTILINE_CONT =
         Utils.createPattern("(\\*/|@|[^\\s\\*])");
 
     /** Multiline finished at end of comment * */
     private static final String END_JAVADOC = "*/";
     /** Multiline finished at next Javadoc * */
     private static final String NEXT_TAG = "@";
 
     /** compiled regexp to match Javadoc tags with no argument * */
     private static final Pattern MATCH_JAVADOC_NOARG =
         Utils.createPattern("@(return|see)\\s+\\S");
     /** compiled regexp to match first part of multilineJavadoc tags * */
     private static final Pattern MATCH_JAVADOC_NOARG_MULTILINE_START =
         Utils.createPattern("@(return|see)\\s*$");
     /** compiled regexp to match Javadoc tags with no argument and {} * */
     private static final Pattern MATCH_JAVADOC_NOARG_CURLY =
         Utils.createPattern("\\{\\s*@(inheritDoc)\\s*\\}");
 
     /** Maximum children allowed * */
     private static final int MAX_CHILDREN = 7;
 
     /** Maximum children allowed * */
     private static final int BODY_SIZE = 3;
 
@@ -355,101 +355,101 @@ public class JavadocMethodCheck extends AbstractTypeAwareCheck
      * @param aTags the list of Javadoc tags associated with the construct
      * @param aScope the scope of the construct
      * @return true if the construct has a short circuit tag.
      */
     private boolean hasShortCircuitTag(final DetailAST aAST,
             final List<JavadocTag> aTags, final Scope aScope)
     {
         // Check if it contains {@inheritDoc} tag
         if ((aTags.size() != 1)
                 || !(aTags.get(0)).isInheritDocTag())
         {
             return false;
         }
 
         // Invalid if private or a constructor
         if ((aAST.getType() == TokenTypes.CTOR_DEF)
                 || (aScope == Scope.PRIVATE))
         {
             log(aAST, "javadoc.invalidInheritDoc");
         }
 
         return true;
     }
 
     /**
      * Returns the scope for the method/constructor at the specified AST. If
      * the method is in an interface or annotation block, the scope is assumed
      * to be public.
      *
      * @param aAST the token of the method/constructor
      * @return the scope of the method/constructor
      */
     private Scope calculateScope(final DetailAST aAST)
     {
         final DetailAST mods = aAST.findFirstToken(TokenTypes.MODIFIERS);
         final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);
         return ScopeUtils.inInterfaceOrAnnotationBlock(aAST) ? Scope.PUBLIC
                 : declaredScope;
     }
 
     /**
      * Returns the tags in a javadoc comment. Only finds throws, exception,
      * param, return and see tags.
      *
      * @return the tags found
      * @param aComment the Javadoc comment
      */
     private List<JavadocTag> getMethodTags(TextBlock aComment)
     {
         final String[] lines = aComment.getText();
-        final List<JavadocTag> tags = new ArrayList<JavadocTag>();
+        final List<JavadocTag> tags = Lists.newArrayList();
         int currentLine = aComment.getStartLineNo() - 1;
 
         for (int i = 0; i < lines.length; i++) {
             currentLine++;
             final Matcher javadocArgMatcher =
                 MATCH_JAVADOC_ARG.matcher(lines[i]);
             final Matcher javadocNoargMatcher =
                 MATCH_JAVADOC_NOARG.matcher(lines[i]);
             final Matcher noargCurlyMatcher =
                 MATCH_JAVADOC_NOARG_CURLY.matcher(lines[i]);
             final Matcher argMultilineStart =
                 MATCH_JAVADOC_ARG_MULTILINE_START.matcher(lines[i]);
             final Matcher noargMultilineStart =
                 MATCH_JAVADOC_NOARG_MULTILINE_START.matcher(lines[i]);
 
             if (javadocArgMatcher.find()) {
                 int col = javadocArgMatcher.start(1) - 1;
                 if (i == 0) {
                     col += aComment.getStartColNo();
                 }
                 tags.add(new JavadocTag(currentLine, col, javadocArgMatcher
                         .group(1), javadocArgMatcher.group(2)));
             }
             else if (javadocNoargMatcher.find()) {
                 int col = javadocNoargMatcher.start(1) - 1;
                 if (i == 0) {
                     col += aComment.getStartColNo();
                 }
                 tags.add(new JavadocTag(currentLine, col, javadocNoargMatcher
                         .group(1)));
             }
             else if (noargCurlyMatcher.find()) {
                 int col = noargCurlyMatcher.start(1) - 1;
                 if (i == 0) {
                     col += aComment.getStartColNo();
                 }
                 tags.add(new JavadocTag(currentLine, col, noargCurlyMatcher
                         .group(1)));
             }
             else if (argMultilineStart.find()) {
                 final String p1 = argMultilineStart.group(1);
                 final String p2 = argMultilineStart.group(2);
                 int col = argMultilineStart.start(1) - 1;
                 if (i == 0) {
                     col += aComment.getStartColNo();
                 }
 
                 // Look for the rest of the comment if all we saw was
                 // the tag and the name. Stop when we see '*/' (end of
                 // Javadoc), '@' (start of next tag), or anything that's
@@ -461,122 +461,122 @@ public class JavadocMethodCheck extends AbstractTypeAwareCheck
                     if (multilineCont.find()) {
                         remIndex = lines.length;
                         final String lFin = multilineCont.group(1);
                         if (!lFin.equals(NEXT_TAG) && !lFin.equals(END_JAVADOC))
                         {
                             tags.add(new JavadocTag(currentLine, col, p1, p2));
                         }
                     }
                     remIndex++;
                 }
             }
             else if (noargMultilineStart.find()) {
                 final String p1 = noargMultilineStart.group(1);
                 int col = noargMultilineStart.start(1) - 1;
                 if (i == 0) {
                     col += aComment.getStartColNo();
                 }
 
                 // Look for the rest of the comment if all we saw was
                 // the tag and the name. Stop when we see '*/' (end of
                 // Javadoc), '@' (start of next tag), or anything that's
                 // not whitespace or '*' characters.
                 int remIndex = i + 1;
                 while (remIndex < lines.length) {
                     final Matcher multilineCont = MATCH_JAVADOC_MULTILINE_CONT
                             .matcher(lines[remIndex]);
                     if (multilineCont.find()) {
                         remIndex = lines.length;
                         final String lFin = multilineCont.group(1);
                         if (!lFin.equals(NEXT_TAG) && !lFin.equals(END_JAVADOC))
                         {
                             tags.add(new JavadocTag(currentLine, col, p1));
                         }
                     }
                     remIndex++;
                 }
             }
         }
         return tags;
     }
 
     /**
      * Computes the parameter nodes for a method.
      *
      * @param aAST the method node.
      * @return the list of parameter nodes for aAST.
      */
     private List<DetailAST> getParameters(DetailAST aAST)
     {
         final DetailAST params = aAST.findFirstToken(TokenTypes.PARAMETERS);
-        final List<DetailAST> retVal = new ArrayList<DetailAST>();
+        final List<DetailAST> retVal = Lists.newArrayList();
 
         DetailAST child = (DetailAST) params.getFirstChild();
         while (child != null) {
             if (child.getType() == TokenTypes.PARAMETER_DEF) {
                 final DetailAST ident = child.findFirstToken(TokenTypes.IDENT);
                 retVal.add(ident);
             }
             child = (DetailAST) child.getNextSibling();
         }
         return retVal;
     }
 
     /**
      * Computes the exception nodes for a method.
      *
      * @param aAST the method node.
      * @return the list of exception nodes for aAST.
      */
     private List<ExceptionInfo> getThrows(DetailAST aAST)
     {
-        final List<ExceptionInfo> retVal = new ArrayList<ExceptionInfo>();
+        final List<ExceptionInfo> retVal = Lists.newArrayList();
         final DetailAST throwsAST = aAST
                 .findFirstToken(TokenTypes.LITERAL_THROWS);
         if (throwsAST != null) {
             DetailAST child = (DetailAST) throwsAST.getFirstChild();
             while (child != null) {
                 if ((child.getType() == TokenTypes.IDENT)
                         || (child.getType() == TokenTypes.DOT))
                 {
                     final FullIdent fi = FullIdent.createFullIdent(child);
                     final ExceptionInfo ei = new ExceptionInfo(new Token(fi),
                             getCurrentClassName());
                     retVal.add(ei);
                 }
                 child = (DetailAST) child.getNextSibling();
             }
         }
         return retVal;
     }
 
     /**
      * Checks a set of tags for matching parameters.
      *
      * @param aTags the tags to check
      * @param aParent the node which takes the parameters
      * @param aReportExpectedTags whether we should report if do not find
      *            expected tag
      */
     private void checkParamTags(final List<JavadocTag> aTags,
             final DetailAST aParent, boolean aReportExpectedTags)
     {
         final List<DetailAST> params = getParameters(aParent);
         final List<DetailAST> typeParams = CheckUtils
                 .getTypeParameters(aParent);
 
         // Loop over the tags, checking to see they exist in the params.
         final ListIterator<JavadocTag> tagIt = aTags.listIterator();
         while (tagIt.hasNext()) {
             final JavadocTag tag = tagIt.next();
 
             if (!tag.isParamTag()) {
                 continue;
             }
 
             tagIt.remove();
 
             boolean found = false;
 
             // Loop looking for matching param
             final Iterator<DetailAST> paramIt = params.iterator();
             while (paramIt.hasNext()) {
@@ -649,101 +649,101 @@ public class JavadocMethodCheck extends AbstractTypeAwareCheck
     }
 
     /**
      * Checks for only one return tag. All return tags will be removed from the
      * supplied list.
      *
      * @param aTags the tags to check
      * @param aLineNo the line number of the expected tag
      * @param aReportExpectedTags whether we should report if do not find
      *            expected tag
      */
     private void checkReturnTag(List<JavadocTag> aTags, int aLineNo,
         boolean aReportExpectedTags)
     {
         // Loop over tags finding return tags. After the first one, report an
         // error.
         boolean found = false;
         final ListIterator<JavadocTag> it = aTags.listIterator();
         while (it.hasNext()) {
             final JavadocTag jt = it.next();
             if (jt.isReturnTag()) {
                 if (found) {
                     log(jt.getLineNo(), jt.getColumnNo(),
                             "javadoc.return.duplicate");
                 }
                 found = true;
                 it.remove();
             }
         }
 
         // Handle there being no @return tags :- unless
         // the user has chosen to suppress these problems
         if (!found && !mAllowMissingReturnTag && aReportExpectedTags) {
             log(aLineNo, "javadoc.return.expected");
         }
     }
 
     /**
      * Checks a set of tags for matching throws.
      *
      * @param aTags the tags to check
      * @param aThrows the throws to check
      * @param aReportExpectedTags whether we should report if do not find
      *            expected tag
      */
     private void checkThrowsTags(List<JavadocTag> aTags,
             List<ExceptionInfo> aThrows, boolean aReportExpectedTags)
     {
         // Loop over the tags, checking to see they exist in the throws.
         // The foundThrows used for performance only
-        final Set<String> foundThrows = new HashSet<String>();
+        final Set<String> foundThrows = Sets.newHashSet();
         final ListIterator<JavadocTag> tagIt = aTags.listIterator();
         while (tagIt.hasNext()) {
             final JavadocTag tag = tagIt.next();
 
             if (!tag.isThrowsTag()) {
                 continue;
             }
 
             tagIt.remove();
 
             // Loop looking for matching throw
             final String documentedEx = tag.getArg1();
             final Token token = new Token(tag.getArg1(), tag.getLineNo(), tag
                     .getColumnNo());
             final ClassInfo documentedCI = createClassInfo(token,
                     getCurrentClassName());
             boolean found = foundThrows.contains(documentedEx);
 
             final ListIterator<ExceptionInfo> throwIt = aThrows.listIterator();
             while (!found && throwIt.hasNext()) {
                 final ExceptionInfo ei = throwIt.next();
 
                 if (documentedCI.getClazz() == ei.getClazz()) {
                     found = true;
                     ei.setFound();
                     foundThrows.add(documentedEx);
                 }
                 else if (mAllowThrowsTagsForSubclasses) {
                     found = isSubclass(documentedCI.getClazz(), ei.getClazz());
                 }
             }
 
             // Handle extra JavadocTag.
             if (!found) {
                 boolean reqd = true;
                 if (mAllowUndeclaredRTE) {
                     reqd = !isUnchecked(documentedCI.getClazz());
                 }
 
                 if (reqd) {
                     log(tag.getLineNo(), tag.getColumnNo(),
                             "javadoc.unusedTag", "@throws", tag.getArg1());
 
                 }
             }
         }
 
         // Now dump out all throws without tags :- unless
         // the user has chosen to suppress these problems
         if (!mAllowMissingThrowsTags && aReportExpectedTags) {
