diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java
index 900a54e87..c9f5e74a6 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java
@@ -112,101 +112,101 @@ public class JTreeTable extends JTable
                     if (tree.isExpanded(selected)) {
                         tree.collapsePath(selected);
                     }
                     else {
                         tree.expandPath(selected);
                     }
                     tree.setSelectionPath(selected);
                 }
             };
         KeyStroke stroke = KeyStroke.getKeyStroke("ENTER");
         String command = "expand/collapse";
         getInputMap().put(stroke, command);
         getActionMap().put(command, expand);
     }
 
     /**
      * Overridden to message super and forward the method to the tree.
      * Since the tree is not actually in the component hierarchy it will
      * never receive this unless we forward it in this manner.
      */
     public void updateUI()
     {
         super.updateUI();
         if (tree != null) {
             tree.updateUI();
         }
         // Use the tree's default foreground and background colors in the
         // table.
         LookAndFeel.installColorsAndFont(this, "Tree.background",
                 "Tree.foreground", "Tree.font");
     }
 
     /* Workaround for BasicTableUI anomaly. Make sure the UI never tries to
      * paint the editor. The UI currently uses different techniques to
      * paint the renderers and editors and overriding setBounds() below
      * is not the right thing to do for an editor. Returning -1 for the
      * editing row in this case, ensures the editor is never painted.
      */
     public int getEditingRow()
     {
         final Class editingClass = getColumnClass(editingColumn);
         return (editingClass == TreeTableModel.class) ? -1 : editingRow;
     }
 
     /**
      * Overridden to pass the new rowHeight to the tree.
      */
     public void setRowHeight(int newRowHeight)
     {
         super.setRowHeight(newRowHeight);
-        if (tree != null && tree.getRowHeight() != newRowHeight) {
+        if ((tree != null) && (tree.getRowHeight() != newRowHeight)) {
             tree.setRowHeight(getRowHeight());
         }
     }
 
     /**
      * @return the tree that is being shared between the model.
      */
     public JTree getTree()
     {
         return tree;
     }
 
     /**
      * A TreeCellRenderer that displays a JTree.
      */
     class TreeTableCellRenderer extends JTree implements
             TableCellRenderer
     {
         /** Last table/tree row asked to renderer. */
         protected int visibleRow;
 
         /** creates a new instance */
         public TreeTableCellRenderer(TreeModel model)
         {
             super(model);
         }
 
         /**
          * updateUI is overridden to set the colors of the Tree's renderer
          * to match that of the table.
          */
         public void updateUI()
         {
             super.updateUI();
             // Make the tree's cell renderer use the table's cell selection
             // colors.
             TreeCellRenderer tcr = getCellRenderer();
             if (tcr instanceof DefaultTreeCellRenderer) {
                 DefaultTreeCellRenderer dtcr = ((DefaultTreeCellRenderer) tcr);
                 // For 1.1 uncomment this, 1.2 has a bug that will cause an
                 // exception to be thrown if the border selection color is
                 // null.
                 // dtcr.setBorderSelectionColor(null);
                 dtcr.setTextSelectionColor(UIManager.getColor
                         ("Table.selectionForeground"));
                 dtcr.setBackgroundSelectionColor(UIManager.getColor
                         ("Table.selectionBackground"));
             }
         }
 
@@ -353,81 +353,81 @@ public class JTreeTable extends JTable
         {
             return listSelectionModel;
         }
 
         /**
          * This is overridden to set <code>updatingListSelectionModel</code>
          * and message super. This is the only place DefaultTreeSelectionModel
          * alters the ListSelectionModel.
          */
         public void resetRowSelection()
         {
             if (!updatingListSelectionModel) {
                 updatingListSelectionModel = true;
                 try {
                     super.resetRowSelection();
                 } finally {
                     updatingListSelectionModel = false;
                 }
             }
             // Notice how we don't message super if
             // updatingListSelectionModel is true. If
             // updatingListSelectionModel is true, it implies the
             // ListSelectionModel has already been updated and the
             // paths are the only thing that needs to be updated.
         }
 
         /**
          * Creates and returns an instance of ListSelectionHandler.
          */
         private ListSelectionListener createListSelectionListener()
         {
             return new ListSelectionHandler();
         }
 
         /**
          * If <code>updatingListSelectionModel</code> is false, this will
          * reset the selected paths from the selected rows in the list
          * selection model.
          */
         protected void updateSelectedPathsFromSelectedRows()
         {
             if (!updatingListSelectionModel) {
                 updatingListSelectionModel = true;
                 try {
                     // This is way expensive, ListSelectionModel needs an
                     // enumerator for iterating.
                     int min = listSelectionModel.getMinSelectionIndex();
                     int max = listSelectionModel.getMaxSelectionIndex();
 
                     clearSelection();
-                    if (min != -1 && max != -1) {
+                    if ((min != -1) && (max != -1)) {
                         for (int counter = min; counter <= max; counter++) {
                             if (listSelectionModel.isSelectedIndex(counter)) {
                                 TreePath selPath = tree.getPathForRow
                                         (counter);
 
                                 if (selPath != null) {
                                     addSelectionPath(selPath);
                                 }
                             }
                         }
                     }
                 } finally {
                     updatingListSelectionModel = false;
                 }
             }
         }
 
         /**
          * Class responsible for calling updateSelectedPathsFromSelectedRows
          * when the selection of the list changse.
          */
         class ListSelectionHandler implements ListSelectionListener
         {
             public void valueChanged(ListSelectionEvent e)
             {
                 updateSelectedPathsFromSelectedRows();
             }
         }
     }
 }
