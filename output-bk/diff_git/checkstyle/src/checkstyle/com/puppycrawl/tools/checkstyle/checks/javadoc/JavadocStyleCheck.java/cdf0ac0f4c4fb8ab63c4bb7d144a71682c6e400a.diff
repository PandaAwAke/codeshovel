diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
index 227fbc8ab..8761bfbaa 100755
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
@@ -22,164 +22,175 @@ import java.util.Stack;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FileContents;
 import com.puppycrawl.tools.checkstyle.api.Scope;
 import com.puppycrawl.tools.checkstyle.api.ScopeUtils;
 import com.puppycrawl.tools.checkstyle.api.TextBlock;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import org.apache.regexp.RE;
 import org.apache.regexp.RESyntaxException;
 
 /**
  * <p>Custom Checkstyle Check to validate Javadoc.
  * The following checks are performed:
  * <ul>
  * <li>Ensures the first sentence ends with proper punctuation (That is
  * a period, question mark, or exclaimation mark).  Javadoc  automatically
  * places the first sentence in the method summary table and index.  With out
  * proper punctuation the Javadoc may be malformed.
  * <li> Check text for Javadoc statements that do not have any description.
  * This includes both completely empty Javadoc, and Javadoc with only
  * tags such as @param and @return.
  * <li>Check text for incomplete html tags.  Verifies that HTML tags have
  * corresponding end tags and issues an UNCLOSED_HTML error if not.
  * An EXTRA_HTML error is issued if an end tag is found without a previous
  * open tag.
  * </ul>
  * <p>These checks were patterned after the checks made by the doclet
  * <code>com.sun.tools.doclets.doccheck.DocCheck</code>
  *
  * @author Chris Stillwell
  * @author Daniel Grenner
  * @version 1.2
  */
 public class JavadocStyleCheck
     extends Check
 {
     /** Message property key for the Unclosed HTML message. */
     private static final String UNCLOSED_HTML = "javadoc.unclosedhtml";
 
     /** Message property key for the Extra HTML message. */
     private static final String EXTRA_HTML = "javadoc.extrahtml";
 
     /** HTML tags that do not require a close tag. */
     private static final String[] SINGLE_TAG =
     {"p", "br", "li", "dt", "dd", "td", "hr", "img", "tr", "th", "td"};
 
     /** The scope to check. */
     private Scope mScope = Scope.PRIVATE;
 
+    /** the visibility scope where Javadoc comments shouldn't be checked **/
+    private Scope mExcludeScope;
+
     /** Regular expression for matching the end of a sentence. */
     private RE mEndOfSentenceRE;
 
     /**
      * Indicates if the first sentence should be checked for proper end of
      * sentence punctuation.
      */
     private boolean mCheckFirstSentence = true;
 
     /**
      * Indicates if the HTML within the comment should be checked.
      */
     private boolean mCheckHtml = true;
 
     /**
      * Indicates if empty javadoc statements should be checked.
      */
     private boolean mCheckEmptyJavadoc;
 
     /**
      * The default tokens this Check is used for.
      * @see com.puppycrawl.tools.checkstyle.api.Check#getDefaultTokens()
      */
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.INTERFACE_DEF,
             TokenTypes.CLASS_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.CTOR_DEF,
             TokenTypes.VARIABLE_DEF,
         };
     }
 
     /**
      * Called to process a token.
      * @see com.puppycrawl.tools.checkstyle.api.Check
      */
     public void visitToken(DetailAST aAST)
     {
-        if (!ScopeUtils.inCodeBlock(aAST)) {
-            final DetailAST mods =
-                aAST.findFirstToken(TokenTypes.MODIFIERS);
-            final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);
-            final Scope variableScope =
-                ScopeUtils.inInterfaceBlock(aAST)
-                    ? Scope.PUBLIC
-                    : declaredScope;
-
-            if (variableScope.isIn(mScope)) {
-                final Scope surroundingScope =
-                    ScopeUtils.getSurroundingScope(aAST);
-
-                if ((surroundingScope == null)
-                    || surroundingScope.isIn(mScope))
-                {
-                    final FileContents contents = getFileContents();
-                    final TextBlock cmt =
-                        contents.getJavadocBefore(aAST.getLineNo());
+        if (shouldCheck(aAST)) {
+            final FileContents contents = getFileContents();
+            final TextBlock cmt =
+                contents.getJavadocBefore(aAST.getLineNo());
 
-                    checkComment(cmt);
-                }
-            }
+            checkComment(cmt);
+        }
+    }
+
+    /**
+     * Whether we should check this node.
+     * @param aAST a given node.
+     * @return whether we should check a given node.
+     */
+    private boolean shouldCheck(final DetailAST aAST)
+    {
+        if (ScopeUtils.inCodeBlock(aAST)) {
+            return false;
         }
+
+        final DetailAST mods = aAST.findFirstToken(TokenTypes.MODIFIERS);
+        final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);
+        final Scope scope =
+            ScopeUtils.inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;
+        final Scope surroundingScope = ScopeUtils.getSurroundingScope(aAST);
+
+        return scope.isIn(mScope)
+            && ((surroundingScope == null) || surroundingScope.isIn(mScope))
+            && ((mExcludeScope == null)
+                || !scope.isIn(mExcludeScope)
+                || (surroundingScope != null)
+                && !surroundingScope.isIn(mExcludeScope));
     }
 
     /**
      * Performs the various checks agains the Javadoc comment.
      *
      * @param aComment the source lines that make up the Javadoc comment.
      *
      * @see #checkFirstSentence(TextBlock)
      * @see #checkHtml(TextBlock)
      */
     private void checkComment(TextBlock aComment)
     {
         if (aComment == null) {
             return;
         }
 
         if (mCheckFirstSentence) {
             checkFirstSentence(aComment);
         }
 
         if (mCheckHtml) {
             checkHtml(aComment);
         }
 
         if (mCheckEmptyJavadoc) {
             checkEmptyJavadoc(aComment);
         }
     }
 
     /**
      * Checks that the first sentence ends with proper puctuation.  This method
      * uses a regular expression that checks for the presence of a period,
      * question mark, or exclaimation mark followed either by whitespace, an
      * HTML element, or the end of string. This method ignores {@inheritDoc}
      * comments.
      *
      * @param aComment the source lines that make up the Javadoc comment.
      */
     private void checkFirstSentence(TextBlock aComment)
     {
         final String commentText = getCommentText(aComment.getText());
 
         if ((commentText.length() != 0)
             && !getEndOfSentenceRE().match(commentText)
             && !"{@inheritDoc}".equals(commentText))
         {
             log(aComment.getStartLineNo(), "javadoc.noperiod");
         }
     }
 
@@ -398,97 +409,106 @@ public class JavadocStyleCheck
     {
         boolean isSingleTag = false;
         for (int i = 0; i < SINGLE_TAG.length; i++) {
             // If its a singleton tag (<p>, <br>, etc.), ignore it
             // Can't simply not put them on the stack, since singletons
             // like <dt> and <dd> (unhappily) may either be terminated
             // or not terminated. Both options are legal.
             if (aTag.getId().equalsIgnoreCase(SINGLE_TAG[i])) {
                 isSingleTag = true;
             }
         }
         return isSingleTag;
     }
 
     /**
      * Determines if the given token is an extra HTML tag. This indicates that
      * a close tag was found that does not have a corresponding open tag.
      *
      * @param aToken an HTML tag id for which a close was found.
      * @param aHtmlStack a Stack of previous open HTML tags.
      * @return <code>false</code> if a previous open tag was found
      *         for the token.
      */
     private boolean isExtraHtml(String aToken, Stack aHtmlStack)
     {
         boolean isExtra = true;
         for (int i = 0; i < aHtmlStack.size(); i++) {
             // Loop, looking for tags that are closed.
             // The loop is needed in case there are unclosed
             // tags on the stack. In that case, the stack would
             // not be empty, but this tag would still be extra.
             HtmlTag td = (HtmlTag) aHtmlStack.elementAt(i);
             if (aToken.equalsIgnoreCase(td.getId())) {
                 isExtra = false;
                 break;
             }
         }
 
         return isExtra;
     }
 
     /**
      * Sets the scope to check.
      * @param aFrom string to get the scope from
      */
     public void setScope(String aFrom)
     {
         mScope = Scope.getInstance(aFrom);
     }
 
+    /**
+     * Set the excludeScope.
+     * @param aScope a <code>String</code> value
+     */
+    public void setExcludeScope(String aScope)
+    {
+        mExcludeScope = Scope.getInstance(aScope);
+    }
+
     /**
      * Returns a regular expression for matching the end of a sentence.
      *
      * @return a regular expression for matching the end of a sentence.
      */
     private RE getEndOfSentenceRE()
     {
         if (mEndOfSentenceRE == null) {
             try {
                 mEndOfSentenceRE = new RE("([.?!][ \t\n\r\f<])|([.?!]$)");
             }
             catch (RESyntaxException e) {
                 // This should never occur.
                 e.printStackTrace();
             }
         }
         return mEndOfSentenceRE;
     }
 
     /**
      * Sets the flag that determines if the first sentence is checked for
      * proper end of sentence punctuation.
      * @param aFlag <code>true</code> if the first sentence is to be checked
      */
     public void setCheckFirstSentence(boolean aFlag)
     {
         mCheckFirstSentence = aFlag;
     }
 
     /**
      * Sets the flag that determines if HTML checking is to be performed.
      * @param aFlag <code>true</code> if HTML checking is to be performed.
      */
     public void setCheckHtml(boolean aFlag)
     {
         mCheckHtml = aFlag;
     }
 
     /**
      * Sets the flag that determines if empty JavaDoc checking should be done.
      * @param aFlag <code>true</code> if empty JavaDoc checking should be done.
      */
     public void setCheckEmptyJavadoc(boolean aFlag)
     {
         mCheckEmptyJavadoc = aFlag;
     }
 }
