diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java
index 1aa7c2f8b..b87fdb4e8 100755
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java
@@ -191,104 +191,101 @@ public class RequireThisCheck extends Check
      */
     private void processIDENT(DetailAST aAST)
     {
         final int parentType = aAST.getParent().getType();
 
         // let's check method calls
         if (parentType == TokenTypes.METHOD_CALL) {
             if (mCheckMethods) {
                 log(aAST, "require.this.method", aAST.getText());
             }
             return;
         }
 
         // let's check fields
         if (!mCheckFields) {
             // we shouldn't check fields
             return;
         }
 
         if (ScopeUtils.getSurroundingScope(aAST) == null) {
             // it is not a class or inteface it's
             // either import or package
             // we shouldn't checks this
             return;
         }
 
         if (parentType == TokenTypes.DOT
             && aAST.getPreviousSibling() != null)
         {
             // it's the method name in a method call; no problem
             return;
         }
         if (parentType == TokenTypes.TYPE
             || parentType == TokenTypes.LITERAL_NEW)
         {
             // it's a type name; no problem
             return;
         }
         if (parentType == TokenTypes.VARIABLE_DEF
             || parentType == TokenTypes.CTOR_DEF
             || parentType == TokenTypes.METHOD_DEF
             || parentType == TokenTypes.CLASS_DEF
             || parentType == TokenTypes.PARAMETER_DEF)
         {
             // it's being declared; no problem
             return;
         }
 
         final String name = aAST.getText();
         final LexicalFrame declared = this.mFrames.findFrame(name);
-        if (declared == null) {
-            log(aAST, "require.this.unfound.variable", name);
-        }
-        else if (declared instanceof ClassFrame) {
+        if (declared instanceof ClassFrame) {
             log(aAST, "require.this.variable", name);
         }
     }
 } // end class RequireThis
 
 /**
  * A declaration frame.
  * @author Stephen Bloch
  * June 19, 2003
  */
 abstract class LexicalFrame
 {
     /** Set of name of variables declared in this frame. */
     private HashSet mVarNames;
 
     /** constructor -- invocable only via super() from subclasses */
     protected LexicalFrame()
     {
         mVarNames = new HashSet();
     }
 
     /** add a name to the frame.
      * @param aNameToAdd  the name we're adding
      */
     void addName(String aNameToAdd)
     {
         this.mVarNames.add(aNameToAdd);
     }
 
     /** check whether the frame contains a given name.
      * @param aNameToFind  the name we're looking for
      * @return whether it was found
      */
     boolean contains(String aNameToFind)
     {
         return this.mVarNames.contains(aNameToFind);
     }
 }
 
 /**
  * The global frame; should hold only class names.
  * @author Stephen Bloch
  */
 class GlobalFrame extends LexicalFrame
 {
     /** Create new instance of hte frame. */
     GlobalFrame()
     {
         super();
     }
