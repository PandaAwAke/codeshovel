diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
index ce5fe4366..095d9642b 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
@@ -1,138 +1,134 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2009  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle;
 
-import com.puppycrawl.tools.checkstyle.api.Utils;
-
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.puppycrawl.tools.checkstyle.api.AbstractLoader;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.api.FastStack;
 import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
-import java.io.BufferedInputStream;
-import java.io.FileInputStream;
+import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.MalformedURLException;
 import java.net.URL;
+import java.net.URI;
+import java.net.URISyntaxException;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import javax.xml.parsers.ParserConfigurationException;
 import org.xml.sax.Attributes;
 import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
 import org.xml.sax.SAXParseException;
 
 /**
  * Loads a configuration from a standard configuration XML file.
  *
  * @author Oliver Burn
  * @version 1.0
  */
 public final class ConfigurationLoader
 {
     /** the public ID for version 1_0 of the configuration dtd */
     private static final String DTD_PUBLIC_ID_1_0 =
         "-//Puppy Crawl//DTD Check Configuration 1.0//EN";
 
     /** the resource for version 1_0 of the configuration dtd */
     private static final String DTD_RESOURCE_NAME_1_0 =
         "com/puppycrawl/tools/checkstyle/configuration_1_0.dtd";
 
     /** the public ID for version 1_1 of the configuration dtd */
     private static final String DTD_PUBLIC_ID_1_1 =
         "-//Puppy Crawl//DTD Check Configuration 1.1//EN";
 
     /** the resource for version 1_1 of the configuration dtd */
     private static final String DTD_RESOURCE_NAME_1_1 =
         "com/puppycrawl/tools/checkstyle/configuration_1_1.dtd";
 
     /** the public ID for version 1_2 of the configuration dtd */
     private static final String DTD_PUBLIC_ID_1_2 =
         "-//Puppy Crawl//DTD Check Configuration 1.2//EN";
 
     /** the resource for version 1_2 of the configuration dtd */
     private static final String DTD_RESOURCE_NAME_1_2 =
         "com/puppycrawl/tools/checkstyle/configuration_1_2.dtd";
 
     /** the public ID for version 1_3 of the configuration dtd */
     private static final String DTD_PUBLIC_ID_1_3 =
         "-//Puppy Crawl//DTD Check Configuration 1.3//EN";
 
     /** the resource for version 1_3 of the configuration dtd */
     private static final String DTD_RESOURCE_NAME_1_3 =
         "com/puppycrawl/tools/checkstyle/configuration_1_3.dtd";
 
-    /** constant to specify two kilobyte of data */
-    private static final int TWO_KB = 2048;
-
     /**
      * Implements the SAX document handler interfaces, so they do not
      * appear in the public API of the ConfigurationLoader.
      */
     private final class InternalLoader
         extends AbstractLoader
     {
         /** module elements */
         private static final String MODULE = "module";
         /** name attribute */
         private static final String NAME = "name";
         /** property element */
         private static final String PROPERTY = "property";
         /** value attribute */
         private static final String VALUE = "value";
         /** default attribute */
         private static final String DEFAULT = "default";
         /** name of the severity property */
         private static final String SEVERITY = "severity";
         /** name of the message element */
         private static final String MESSAGE = "message";
         /** name of the key attribute */
         private static final String KEY = "key";
 
         /**
          * Creates a new InternalLoader.
          * @throws SAXException if an error occurs
          * @throws ParserConfigurationException if an error occurs
          */
         private InternalLoader()
             throws SAXException, ParserConfigurationException
         {
             // super(DTD_PUBLIC_ID_1_1, DTD_RESOURCE_NAME_1_1);
             super(createIdToResourceNameMap());
         }
 
         @Override
         public void startElement(String aNamespaceURI,
                                  String aLocalName,
                                  String aQName,
                                  Attributes aAtts)
             throws SAXException
         {
             // TODO: debug logging for support puposes
             if (aQName.equals(MODULE)) {
                 //create configuration
                 final String name = aAtts.getValue(NAME);
                 final DefaultConfiguration conf =
                     new DefaultConfiguration(name);
 
@@ -214,196 +210,224 @@ public final class ConfigurationLoader
         }
 
     }
 
     /** the SAX document handler */
     private final InternalLoader mSaxHandler;
 
     /** property resolver **/
     private final PropertyResolver mOverridePropsResolver;
     /** the loaded configurations **/
     private final FastStack<DefaultConfiguration> mConfigStack =
         FastStack.newInstance();
     /** the Configuration that is being built */
     private Configuration mConfiguration;
 
     /** flags if modules with the severity 'ignore' should be omitted. */
     private final boolean mOmitIgnoredModules;
 
     /**
      * Creates mapping between local resources and dtd ids.
      * @return map between local resources and dtd ids.
      */
     private static Map<String, String> createIdToResourceNameMap()
     {
         final Map<String, String> map = Maps.newHashMap();
         map.put(DTD_PUBLIC_ID_1_0, DTD_RESOURCE_NAME_1_0);
         map.put(DTD_PUBLIC_ID_1_1, DTD_RESOURCE_NAME_1_1);
         map.put(DTD_PUBLIC_ID_1_2, DTD_RESOURCE_NAME_1_2);
         map.put(DTD_PUBLIC_ID_1_3, DTD_RESOURCE_NAME_1_3);
         return map;
     }
 
     /**
      * Creates a new <code>ConfigurationLoader</code> instance.
      * @param aOverrideProps resolver for overriding properties
      * @param aOmitIgnoredModules <code>true</code> if ignored modules should be
      *         omitted
      * @throws ParserConfigurationException if an error occurs
      * @throws SAXException if an error occurs
      */
     private ConfigurationLoader(final PropertyResolver aOverrideProps,
                                 final boolean aOmitIgnoredModules)
         throws ParserConfigurationException, SAXException
     {
         mSaxHandler = new InternalLoader();
         mOverridePropsResolver = aOverrideProps;
         mOmitIgnoredModules = aOmitIgnoredModules;
     }
 
     /**
-     * Parses the specified stream loading the configuration information.
-     * The stream is NOT closed after parsing, it is the responsibility of
+     * Parses the specified input source loading the configuration information.
+     * The stream wrapped inside the source, if any, is NOT
+     * explicitely closed after parsing, it is the responsibility of
      * the caller to close the stream.
      *
-     * @param aStream the stream that contains the configuration data
+     * @param aSource the source that contains the configuration data
      * @throws IOException if an error occurs
      * @throws SAXException if an error occurs
      */
-    private void parseInputStream(InputStream aStream)
+    private void parseInputSource(InputSource aSource)
         throws IOException, SAXException
     {
-        final InputStream configStream =
-            new BufferedInputStream(aStream, TWO_KB);
-        final InputSource inputSource = new InputSource(configStream);
-        mSaxHandler.parseInputSource(inputSource);
+        mSaxHandler.parseInputSource(aSource);
     }
 
     /**
      * Returns the module configurations in a specified file.
      * @param aConfig location of config file, can be either a URL or a filename
      * @param aOverridePropsResolver overriding properties
      * @return the check configurations
      * @throws CheckstyleException if an error occurs
      */
     public static Configuration loadConfiguration(String aConfig,
             PropertyResolver aOverridePropsResolver) throws CheckstyleException
     {
         return loadConfiguration(aConfig, aOverridePropsResolver, false);
     }
 
     /**
      * Returns the module configurations in a specified file.
      *
      * @param aConfig location of config file, can be either a URL or a filename
      * @param aOverridePropsResolver overriding properties
      * @param aOmitIgnoredModules <code>true</code> if modules with severity
      *            'ignore' should be omitted, <code>false</code> otherwise
      * @return the check configurations
      * @throws CheckstyleException if an error occurs
      */
     public static Configuration loadConfiguration(String aConfig,
         PropertyResolver aOverridePropsResolver, boolean aOmitIgnoredModules)
         throws CheckstyleException
     {
-        InputStream bufferedStream = null;
         try {
             // figure out if this is a File or a URL
-            InputStream configStream;
+            URI uri;
             try {
                 final URL url = new URL(aConfig);
-                configStream = url.openStream();
+                uri = url.toURI();
             }
             catch (final MalformedURLException ex) {
-                configStream = new FileInputStream(aConfig);
+                uri = null;
             }
-            bufferedStream = new BufferedInputStream(configStream);
-
-            return loadConfiguration(bufferedStream, aOverridePropsResolver,
+            catch (final URISyntaxException ex) {
+                // URL violating RFC 2396
+                uri = null;
+            }
+            if (uri == null) {
+                final File file = new File(aConfig);
+                if (!file.exists()) {
+                    throw new FileNotFoundException(aConfig);
+                }
+                uri = file.toURI();
+            }
+            final InputSource source = new InputSource(uri.toString());
+            return loadConfiguration(source, aOverridePropsResolver,
                     aOmitIgnoredModules);
         }
         catch (final FileNotFoundException e) {
             throw new CheckstyleException("unable to find " + aConfig, e);
         }
-        catch (final IOException e) {
-            throw new CheckstyleException("unable to read " + aConfig, e);
-        }
         catch (final CheckstyleException e) {
                 //wrap again to add file name info
             throw new CheckstyleException("unable to read " + aConfig + " - "
                     + e.getMessage(), e);
         }
-        finally {
-            Utils.closeQuietly(bufferedStream);
-        }
     }
 
     /**
      * Returns the module configurations from a specified input stream.
      * Note that clients are required to close the given stream by themselves
      *
      * @param aConfigStream the input stream to the Checkstyle configuration
      * @param aOverridePropsResolver overriding properties
      * @param aOmitIgnoredModules <code>true</code> if modules with severity
      *            'ignore' should be omitted, <code>false</code> otherwise
      * @return the check configurations
      * @throws CheckstyleException if an error occurs
+     *
+     * @deprecated As this method does not provide a valid system ID,
+     *   preventing resolution of external entities, a
+     *   {@link #loadConfiguration(InputSource,PropertyResolver,boolean)
+     *          version using an InputSource}
+     *   should be used instead
      */
+    @Deprecated
     public static Configuration loadConfiguration(InputStream aConfigStream,
         PropertyResolver aOverridePropsResolver, boolean aOmitIgnoredModules)
         throws CheckstyleException
+    {
+        return loadConfiguration(new InputSource(aConfigStream),
+                                 aOverridePropsResolver, aOmitIgnoredModules);
+    }
+
+    /**
+     * Returns the module configurations from a specified input source.
+     * Note that if the source does wrap an open byte or character
+     * stream, clients are required to close that stream by themselves
+     *
+     * @param aConfigSource the input stream to the Checkstyle configuration
+     * @param aOverridePropsResolver overriding properties
+     * @param aOmitIgnoredModules <code>true</code> if modules with severity
+     *            'ignore' should be omitted, <code>false</code> otherwise
+     * @return the check configurations
+     * @throws CheckstyleException if an error occurs
+     */
+    public static Configuration loadConfiguration(InputSource aConfigSource,
+        PropertyResolver aOverridePropsResolver, boolean aOmitIgnoredModules)
+        throws CheckstyleException
     {
         try {
             final ConfigurationLoader loader =
                 new ConfigurationLoader(aOverridePropsResolver,
                                         aOmitIgnoredModules);
-            loader.parseInputStream(aConfigStream);
+            loader.parseInputSource(aConfigSource);
             return loader.getConfiguration();
         }
         catch (final ParserConfigurationException e) {
             throw new CheckstyleException(
                 "unable to parse configuration stream", e);
         }
         catch (final SAXParseException e) {
             throw new CheckstyleException("unable to parse configuration stream"
                     + " - " + e.getMessage() + ":" + e.getLineNumber()
                     + ":" + e.getColumnNumber(), e);
         }
         catch (final SAXException e) {
             throw new CheckstyleException("unable to parse configuration stream"
                     + " - " + e.getMessage(), e);
         }
         catch (final IOException e) {
             throw new CheckstyleException("unable to read from stream", e);
         }
     }
 
     /**
      * Returns the configuration in the last file parsed.
      * @return Configuration object
      */
     private Configuration getConfiguration()
     {
         return mConfiguration;
     }
 
     /**
      * Replaces <code>${xxx}</code> style constructions in the given value
      * with the string value of the corresponding data types.
      *
      * The method is package visible to facilitate testing.
      *
      * @param aValue The string to be scanned for property references.
      *              May be <code>null</code>, in which case this
      *              method returns immediately with no effect.
      * @param aProps  Mapping (String to String) of property names to their
      *              values. Must not be <code>null</code>.
      * @param aDefaultValue default to use if one of the properties in aValue
      *              cannot be resolved from aProps.
      *
      * @throws CheckstyleException if the string contains an opening
      *                           <code>${</code> without a closing
      *                           <code>}</code>
      * @return the original string with the properties replaced, or
      *         <code>null</code> if the original string is <code>null</code>.
      *
      * Code copied from ant -
