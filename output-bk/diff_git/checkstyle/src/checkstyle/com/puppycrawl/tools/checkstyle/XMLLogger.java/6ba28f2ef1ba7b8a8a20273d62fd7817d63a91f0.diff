diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/XMLLogger.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/XMLLogger.java
index 8e284ee7c..cbbe9bf9c 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/XMLLogger.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/XMLLogger.java
@@ -29,100 +29,101 @@ import java.io.UnsupportedEncodingException;
  * It outputs everything in UTF8 (default XML encoding is UTF8) in case
  * we want to localize error messages or simply that filenames are
  * localized and takes care about escaping as well.
 
  * @author <a href="mailto:stephane.bailliez@wanadoo.fr">Stephane Bailliez</a>
  */
 public class XMLLogger
     implements AuditListener
 {
     /** close output stream in auditFinished */
     private boolean mCloseStream;
 
     /** helper writer that allows easy encoding and printing */
     private PrintWriter mWriter;
 
     /** some known entities to detect */
     private static final String[] ENTITIES = {"gt", "amp", "lt", "apos",
                                               "quot"};
 
     /**
      * Creates a new <code>XMLLogger</code> instance.
      * Sets the output to a defined stream.
      * @param aOS the stream to write logs to.
      * @param aCloseStream close aOS in auditFinished
      */
     public XMLLogger(OutputStream aOS, boolean aCloseStream)
     {
         setOutputStream(aOS);
         mCloseStream = aCloseStream;
     }
 
     /**
      * sets the OutputStream
      * @param aOS the OutputStream to use
      **/
     private void setOutputStream(OutputStream aOS)
     {
         try {
             final OutputStreamWriter osw = new OutputStreamWriter(aOS, "UTF8");
             mWriter = new PrintWriter(osw);
         }
         catch (UnsupportedEncodingException e) {
             // unlikely to happen...
             throw new ExceptionInInitializerError(e);
         }
     }
 
     /** @see AuditListener **/
     public void auditStarted(AuditEvent aEvt)
     {
+        mWriter.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
         mWriter.println("<checkstyle>");
     }
 
     /** @see AuditListener **/
     public void auditFinished(AuditEvent aEvt)
     {
         mWriter.println("</checkstyle>");
         if (mCloseStream) {
             mWriter.close();
         }
         else {
             mWriter.flush();
         }
     }
 
     /** @see AuditListener **/
     public void fileStarted(AuditEvent aEvt)
     {
         mWriter.println("<file name=\"" + aEvt.getFileName() + "\">");
     }
 
     /** @see AuditListener **/
     public void fileFinished(AuditEvent aEvt)
     {
         mWriter.println("</file>");
     }
 
     /** @see AuditListener **/
     public void addError(AuditEvent aEvt)
     {
         mWriter.print("<error" + " line=\"" + aEvt.getLine() + "\"");
         if (aEvt.getColumn() > 0) {
             mWriter.print(" column=\"" + aEvt.getColumn() + "\"");
         }
         mWriter.println(" message=\"" + encode(aEvt.getMessage()) + "\"/>");
     }
 
     /** @see AuditListener **/
     public void addException(AuditEvent aEvt, Throwable aThrowable)
     {
         final StringWriter sw = new StringWriter();
         final PrintWriter pw = new PrintWriter(sw);
         pw.println("<exception>");
         pw.println("<![CDATA[");
         aThrowable.printStackTrace(pw);
         pw.println("]]>");
         pw.println("</exception>");
         pw.flush();
         mWriter.println(encode(sw.toString()));
     }
