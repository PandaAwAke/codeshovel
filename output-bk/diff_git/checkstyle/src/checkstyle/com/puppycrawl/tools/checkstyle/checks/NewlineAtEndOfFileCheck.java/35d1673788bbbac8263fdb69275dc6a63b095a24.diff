diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java
index e4c328327..3dd8cecd2 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java
@@ -37,111 +37,111 @@ import org.apache.commons.beanutils.ConversionException;
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="NewlineAtEndOfFile"/&gt;</pre>
  * <p>
  * This will check against the platform-specific default line separator.
  * </p>
  * <p>
  * It is also possible to enforce the use of a specific line-separator across
  * platforms, with the 'lineSeparator' property:
  * </p>
  * <pre>
  * &lt;module name="NewlineAtEndOfFile"&gt;
  *   &lt;property name="lineSeparator" value="lf"/&gt;
  * &lt;/module&gt;</pre>
  * <p>
  * Valid values for the 'lineSeparator' property are 'system' (system default),
  * 'crlf' (windows), 'cr' (mac) and 'lf' (unix).
  * </p>
  *
  * @author Christopher Lenz
  * @author lkuehne
  * @version 1.0
  */
 public class NewlineAtEndOfFileCheck
     extends AbstractFileSetCheck
 {
     /** the line separator to check against. */
     private LineSeparatorOption mLineSeparator =
         LineSeparatorOption.SYSTEM;
 
     /**
      * {@inheritDoc}
      */
     public void process(File[] aFiles)
     {
         final File[] files = filter(aFiles);
         final MessageDispatcher dispatcher = getMessageDispatcher();
         for (int i = 0; i < files.length; i++) {
             final File file = files[i];
             final String path = file.getPath();
             dispatcher.fireFileStarted(path);
             RandomAccessFile randomAccessFile = null;
             try {
                 randomAccessFile = new RandomAccessFile(file, "r");
                 if (!endsWithNewline(randomAccessFile)) {
                     log(0, "noNewlineAtEOF", path);
                 }
             }
-            catch (IOException e) {
+            catch (final IOException e) {
                 ///CLOVER:OFF
                 logIOException(e);
                 ///CLOVER:ON
             }
             finally {
                 if (randomAccessFile != null) {
                     try {
                         randomAccessFile.close();
                     }
-                    catch (IOException e) {
+                    catch (final IOException e) {
                         ///CLOVER:OFF
                         logIOException(e);
                         ///CLOVER:ON
                     }
                 }
             }
             fireErrors(path);
             dispatcher.fireFileFinished(path);
         }
     }
 
     /**
      * Sets the line separator to one of 'crlf', 'lf' or 'cr'.
      *
      * @param aLineSeparator The line separator to set
      * @throws IllegalArgumentException If the specified line separator is not
      *         one of 'crlf', 'lf' or 'cr'
      */
     public void setLineSeparator(String aLineSeparator)
     {
         final AbstractOption option =
             LineSeparatorOption.SYSTEM.decode(aLineSeparator);
 
         if (option == null) {
             throw new ConversionException("unable to parse " + aLineSeparator);
         }
 
         mLineSeparator = (LineSeparatorOption) option;
     }
 
     /**
      * Checks whether the content provided by the Reader ends with the platform
      * specific line separator.
      * @param aRandomAccessFile The reader for the content to check
      * @return boolean Whether the content ends with a line separator
      * @throws IOException When an IO error occurred while reading from the
      *         provided reader
      */
     private boolean endsWithNewline(RandomAccessFile aRandomAccessFile)
         throws IOException
     {
         final int len = mLineSeparator.length();
         if (aRandomAccessFile.length() < len) {
             return false;
         }
         aRandomAccessFile.seek(aRandomAccessFile.length() - len);
         final byte lastBytes[] = new byte[len];
         aRandomAccessFile.read(lastBytes);
         return mLineSeparator.matches(lastBytes);
     }
