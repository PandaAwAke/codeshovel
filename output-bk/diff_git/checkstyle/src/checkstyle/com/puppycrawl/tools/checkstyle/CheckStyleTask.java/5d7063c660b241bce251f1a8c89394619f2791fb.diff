diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
index 4ffa6acac..f866d4c0a 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
@@ -238,101 +238,101 @@ public class CheckStyleTask
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Sets a properties file for use instead
      * of individually setting them.
      * @param aProps the properties File to use
      */
     public void setProperties(File aProps)
     {
         mPropertiesFile = aProps;
     }
 
     ////////////////////////////////////////////////////////////////////////////
     // The doers
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Actually checks the files specified. All errors are reported to
      * System.out. Will fail if any errors occurred.
      * @throws BuildException an error occurred
      */
     public void execute()
         throws BuildException
     {
         // output version info in debug mode
         final ResourceBundle compilationProperties =
             ResourceBundle.getBundle("checkstylecompilation");
         final String version =
             compilationProperties.getString("checkstyle.compile.version");
         final String compileTimestamp =
             compilationProperties.getString("checkstyle.compile.timestamp");
         log("checkstyle version " + version, Project.MSG_VERBOSE);
         log("compiled on " + compileTimestamp, Project.MSG_VERBOSE);
 
         // Check for no arguments
         if ((mFileName == null) && (mFileSets.size() == 0)) {
             throw new BuildException(
                 "Must specify atleast one of 'file' or nested 'fileset'.",
                 getLocation());
         }
 
         if (mConfigLocation == null) {
             throw new BuildException("Must specify 'config'.", getLocation());
         }
 
         // Create the checker
         Checker c = null;
         try {
             c = createChecker();
 
-            SeverityLevelCounter warningCounter =
+            final SeverityLevelCounter warningCounter =
                     new SeverityLevelCounter(SeverityLevel.WARNING);
             c.addListener(warningCounter);
 
             // Process the files
             final File[] files = scanFileSets();
             final int numErrs = c.process(files);
             final int numWarnings = warningCounter.getCount();
             final boolean ok = numErrs <= mMaxErrors
                     && numWarnings <= mMaxWarnings;
 
             // Handle the return status
             if (!ok && mFailureProperty != null) {
                 getProject().setProperty(mFailureProperty, "true");
             }
 
             if (!ok && mFailOnViolation) {
                 throw new BuildException(
                         "Got " + numErrs + " errors and "
                         + numWarnings + " warnings.",
                                          getLocation());
             }
         }
         finally {
             if (c != null) {
                 c.destroy();
             }
         }
     }
 
     /**
      * Creates new instance of <code>Checker</code>.
      * @return new instance of <code>Checker</code>
      */
     private Checker createChecker()
     {
         Checker c = null;
         try {
             final Properties props = createOverridingProperties();
             final Configuration config =
                 ConfigurationLoader.loadConfiguration(
                     mConfigLocation, new PropertiesExpander(props));
 
             final DefaultContext context = new DefaultContext();
             final ClassLoader loader =
                 new AntClassLoader(getProject(), mClasspath);
             context.add("classloader", loader);
 
             c = new Checker();
 
             //load the set of package names
@@ -354,137 +354,138 @@ public class CheckStyleTask
         catch (Exception e) {
             throw new BuildException(
                 "Unable to create a Checker: " + e.getMessage(), e);
         }
 
         return c;
     }
     /**
      * Create the Properties object based on the arguments specified
      * to the ANT task.
      * @return the properties for property expansion expansion
      * @throws BuildException if an error occurs
      */
     private Properties createOverridingProperties()
     {
         final Properties retVal = new Properties();
 
         // Load the properties file if specified
         if (mPropertiesFile != null) {
             FileInputStream inStream = null;
             try {
                 inStream = new FileInputStream(mPropertiesFile);
                 retVal.load(inStream);
             }
             catch (FileNotFoundException e) {
                 throw new BuildException(
                     "Could not find Properties file '" + mPropertiesFile + "'",
                     e, getLocation());
             }
             catch (IOException e) {
                 throw new BuildException(
                     "Error loading Properties file '" + mPropertiesFile + "'",
                     e, getLocation());
             }
             finally {
                 try {
                     if (inStream != null) {
                         inStream.close();
                     }
                 }
                 catch (IOException e) {
                     throw new BuildException(
                         "Error closing Properties file '"
                         + mPropertiesFile + "'",
                         e, getLocation());
                 }
             }
         }
 
         // override with Ant properties like ${basedir}
-        Hashtable antProps = this.getProject().getProperties();
+        final Hashtable antProps = this.getProject().getProperties();
         for (Iterator it = antProps.keySet().iterator(); it.hasNext();) {
             final String key = (String) it.next();
             final String value = String.valueOf(antProps.get(key));
             retVal.put(key, value);
         }
 
         // override with properties specified in subelements
         for (Iterator it = mOverrideProps.iterator(); it.hasNext();) {
             final Property p = (Property) it.next();
             retVal.put(p.getKey(), p.getValue());
         }
 
         return retVal;
     }
 
     /**
      * Return the list of listeners set in this task.
      * @return the list of listeners.
      * @throws ClassNotFoundException if an error occurs
      * @throws InstantiationException if an error occurs
      * @throws IllegalAccessException if an error occurs
      * @throws IOException if an error occurs
      */
     protected AuditListener[] getListeners()
         throws ClassNotFoundException, InstantiationException,
         IllegalAccessException, IOException
     {
         final int formatterCount = Math.max(1, mFormatters.size());
 
         final AuditListener[] listeners =
             new AuditListener[formatterCount];
 
         // formatters
         if (mFormatters.size() == 0) {
-            OutputStream debug = new LogOutputStream(this, Project.MSG_DEBUG);
-            OutputStream err = new LogOutputStream(this, Project.MSG_ERR);
+            final OutputStream debug =
+                new LogOutputStream(this, Project.MSG_DEBUG);
+            final OutputStream err = new LogOutputStream(this, Project.MSG_ERR);
             listeners[0] = new DefaultLogger(debug, true, err, true);
         }
         else {
             for (int i = 0; i < formatterCount; i++) {
                 final Formatter f = (Formatter) mFormatters.get(i);
                 listeners[i] = f.createListener(this);
             }
         }
         return listeners;
     }
 
     /**
      * returns the list of files (full path name) to process.
      * @return the list of files included via the filesets.
      */
     protected File[] scanFileSets()
     {
         final ArrayList list = new ArrayList();
         if (mFileName != null) {
             // oops we've got an additional one to process, don't
             // forget it. No sweat, it's fully resolved via the setter.
             log("Adding standalone file for audit", Project.MSG_VERBOSE);
             list.add(new File(mFileName));
         }
         for (int i = 0; i < mFileSets.size(); i++) {
             final FileSet fs = (FileSet) mFileSets.get(i);
             final DirectoryScanner ds = fs.getDirectoryScanner(getProject());
             ds.scan();
 
             final String[] names = ds.getIncludedFiles();
             log(i + ") Adding " + names.length + " files from directory "
                 + ds.getBasedir(),
                 Project.MSG_VERBOSE);
 
             for (int j = 0; j < names.length; j++) {
                 final String pathname =
                     ds.getBasedir() + File.separator + names[j];
                 list.add(new File(pathname));
             }
         }
 
         return (File[]) list.toArray(new File[0]);
     }
 
     /**
      * Poor mans enumeration for the formatter types.
      * @author Oliver Burn
      */
     public static class FormatterType
         extends EnumeratedAttribute
