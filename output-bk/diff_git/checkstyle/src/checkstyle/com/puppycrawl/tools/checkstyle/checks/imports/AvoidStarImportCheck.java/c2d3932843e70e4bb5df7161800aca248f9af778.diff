diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java
index 2665c58d0..c243af61e 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java
@@ -39,61 +39,61 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  *   &lt;property name="excludes" value="java.io,java.net"/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * The optional "excludes" property allows for certain packages like
  * java.io or java.net to be exempted from the rule. Note that the excludes
  * property is not recursive, subpackages of excluded packages are not
  * automatically excluded.
  *
  * Compatible with Java 1.5 source.
  *
  * @author Oliver Burn
  * @author <a href="bschneider@vecna.com">Bill Schneider</a>
  * @version 1.0
  */
 public class AvoidStarImportCheck
     extends Check
 {
     /** the packages to exempt from this check. */
     private String[] mExcludes = new String[0];
 
     /** {@inheritDoc} */
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.IMPORT};
     }
 
     /**
      * Sets the list of packages to exempt from the check.
      * @param aExcludes a list of package names where star imports are ok
      */
     public void setExcludes(String[] aExcludes)
     {
         mExcludes = new String[aExcludes.length];
         for (int i = 0; i < aExcludes.length; i++) {
             mExcludes[i] = aExcludes[i];
             if (!mExcludes[i].endsWith(".*")) {
                 // force all package names to end with ".*" to disambiguate
                 // "java.io"
                 mExcludes[i] = mExcludes[i] + ".*";
             }
         }
     }
 
     /** {@inheritDoc} */
     public void visitToken(DetailAST aAST)
     {
         final FullIdent name = FullIdent.createFullIdentBelow(aAST);
         if ((name != null) && name.getText().endsWith(".*")) {
             boolean exempt = false;
-            for (int i = 0; i < mExcludes.length && !exempt; i++) {
+            for (int i = 0; (i < mExcludes.length) && !exempt; i++) {
                 if (name.getText().equals(mExcludes[i])) {
                     exempt = true;
                 }
             }
             if (!exempt) {
                 log(aAST.getLineNo(), "import.avoidStar", name.getText());
             }
         }
     }
 }
