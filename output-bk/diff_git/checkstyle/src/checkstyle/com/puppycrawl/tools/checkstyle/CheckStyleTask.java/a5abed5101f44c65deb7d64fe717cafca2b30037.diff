diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
index 93e4cf03e..a0cb8e35f 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
@@ -308,101 +308,101 @@ public class CheckStyleTask
         if ((numErrs > 0) && mFailOnViolation) {
             throw new BuildException("Got " + numErrs + " errors.", location);
         }
     }
 
     /**
      * Return the list of listeners set in this task.
      * @return the list of listeners.
      * @throws ClassNotFoundException if an error occurs
      * @throws InstantiationException if an error occurs
      * @throws IllegalAccessException if an error occurs
      * @throws IOException if an error occurs
      */
     protected AuditListener[] getListeners()
         throws ClassNotFoundException, InstantiationException,
         IllegalAccessException, IOException
     {
         // @todo should we add a default plain stdout
         // formatter ?
         if (mFormatters.size() == 0) {
             final Formatter f = new Formatter();
             final FormatterType type = new FormatterType();
             type.setValue(E_PLAIN);
             f.setType(type);
             mFormatters.add(f);
         }
 
         final AuditListener[] listeners = new AuditListener[mFormatters.size()];
         for (int i = 0; i < listeners.length; i++) {
             final Formatter f = (Formatter) mFormatters.get(i);
             listeners[i] = f.createListener(this);
         }
         return listeners;
     }
 
     /**
      * returns the list of files (full path name) to process.
      * @return the list of files included via the filesets.
      */
     protected String[] scanFileSets()
     {
         final ArrayList list = new ArrayList();
         if (mFileName != null) {
             // oops we've got an additional one to process, don't
             // forget it. No sweat, it's fully resolved via the setter.
             log("Adding standalone file for audit", Project.MSG_VERBOSE);
             list.add(mFileName);
         }
         for (int i = 0; i < mFileSets.size(); i++) {
             final FileSet fs = (FileSet) mFileSets.get(i);
-            final DirectoryScanner ds = fs.getDirectoryScanner(project);
+            final DirectoryScanner ds = fs.getDirectoryScanner(getProject());
             ds.scan();
 
             final String[] names = ds.getIncludedFiles();
             log(i + ") Adding " + names.length + " files from directory " +
                 ds.getBasedir(), Project.MSG_VERBOSE);
 
             for (int j = 0; j < names.length; j++) {
                 final String pathname =
                     ds.getBasedir() + File.separator + names[j];
                 list.add(pathname);
             }
         }
 
         return (String[]) list.toArray(new String[0]);
     }
 
     /**
      * Poor mans enumeration for the formatter types.
      * @author <a href="mailto:oliver@puppycrawl.com">Oliver Burn</a>
      */
     public static class FormatterType
         extends EnumeratedAttribute
     {
         /** my possible values **/
         private static final String[] VALUES = {E_XML, E_PLAIN};
 
         /** @see EnumeratedAttribute **/
         public String[] getValues()
         {
             return VALUES;
         }
     }
 
     /**
      * Details about a formatter to be used.
      * @author <a href="mailto:oliver@puppycrawl.com">Oliver Burn</a>
      */
     public static class Formatter
     {
         /** class name of formatter **/
         private String mClassName = null;
         /** whether formatter users a file **/
         private boolean mUseFile = true;
         /** the file to output to **/
         private File mToFile = null;
 
         /**
          * Set the type of the formatter.
          * @param aType the type
          */
