diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java
index 528fe9c18..53242bdb6 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java
@@ -229,101 +229,101 @@ public final class CheckUtils
             final int digit = Character.digit(aText.charAt(i), aRadix);
             result *= aRadix;
             result += digit;
         }
         return result;
     }
 
     /**
      * Returns the value represented by the specified string of the specified
      * type. Returns 0 for types other than float, double, int, and long.
      * @param aText the string to be parsed.
      * @param aType the token type of the text. Should be a constant of
      * {@link com.puppycrawl.tools.checkstyle.api.TokenTypes}.
      * @return the float value represented by the string argument.
      */
     public static double parseFloat(String aText, int aType)
     {
         return (float) parseDouble(aText, aType);
     }
 
     /**
      * Finds sub-node for given node minimal (line, column) pair.
      * @param aNode the root of tree for search.
      * @return sub-node with minimal (line, column) pair.
      */
     public static DetailAST getFirstNode(final DetailAST aNode)
     {
         DetailAST currentNode = aNode;
         DetailAST child = (DetailAST) aNode.getFirstChild();
         while (child != null) {
             final DetailAST newNode = getFirstNode(child);
             if ((newNode.getLineNo() < currentNode.getLineNo())
                 || ((newNode.getLineNo() == currentNode.getLineNo())
                     && (newNode.getColumnNo() < currentNode.getColumnNo())))
             {
                 currentNode = newNode;
             }
             child = (DetailAST) child.getNextSibling();
         }
 
         return currentNode;
     }
 
     /**
      * Retrieves the names of the type parameters to the node.
      * @param aNode the parameterised AST node
      * @return a list of type parameter names
      */
     public static List getTypeParameterNames(final DetailAST aNode)
     {
-        DetailAST typeParameters =
+        final DetailAST typeParameters =
             aNode.findFirstToken(TokenTypes.TYPE_PARAMETERS);
 
-        List typeParamNames = new ArrayList();
+        final List typeParamNames = new ArrayList();
         if (typeParameters != null) {
-            DetailAST typeParam =
+            final DetailAST typeParam =
                 typeParameters.findFirstToken(TokenTypes.TYPE_PARAMETER);
             typeParamNames.add(
                 typeParam.findFirstToken(TokenTypes.IDENT).getText());
 
             DetailAST sibling = (DetailAST) typeParam.getNextSibling();
             while (sibling != null) {
                 if (sibling.getType() == TokenTypes.TYPE_PARAMETER) {
                     typeParamNames.add(
                         sibling.findFirstToken(TokenTypes.IDENT).getText());
                 }
                 sibling = (DetailAST) sibling.getNextSibling();
             }
         }
 
         return typeParamNames;
     }
 
     /**
      * Retrieves the type parameters to the node.
      * @param aNode the parameterised AST node
      * @return a list of type parameter names
      */
     public static List getTypeParameters(final DetailAST aNode)
     {
-        DetailAST typeParameters =
+        final DetailAST typeParameters =
             aNode.findFirstToken(TokenTypes.TYPE_PARAMETERS);
 
-        List typeParams = new ArrayList();
+        final List typeParams = new ArrayList();
         if (typeParameters != null) {
-            DetailAST typeParam =
+            final DetailAST typeParam =
                 typeParameters.findFirstToken(TokenTypes.TYPE_PARAMETER);
             typeParams.add(typeParam);
 
             DetailAST sibling = (DetailAST) typeParam.getNextSibling();
             while (sibling != null) {
                 if (sibling.getType() == TokenTypes.TYPE_PARAMETER) {
                     typeParams.add(sibling);
                 }
                 sibling = (DetailAST) sibling.getNextSibling();
             }
         }
 
         return typeParams;
     }
 }
