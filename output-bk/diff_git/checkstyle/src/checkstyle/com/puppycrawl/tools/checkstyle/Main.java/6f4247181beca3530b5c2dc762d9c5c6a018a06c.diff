diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java
index 9980556bd..c1088b40b 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java
@@ -107,101 +107,102 @@ public final class Main
             }
             catch (FileNotFoundException e) {
                 System.out.println("Could not find file: '" + fname + "'");
                 System.exit(1);
             }
         }
         else {
             out = System.out;
             closeOut = false;
         }
 
         // create the appropriate listener
         final String format =
             line.hasOption("f") ? line.getOptionValue("f") : "plain";
 
         AuditListener listener = null;
         if ("xml".equals(format)) {
             listener = new XMLLogger(out, closeOut);
         }
         else if ("plain".equals(format)) {
             listener = new DefaultLogger(out, closeOut);
         }
         else {
             System.out.println("Invalid format: (" + format
                                + "). Must be 'plain' or 'xml'.");
             usage();
         }
 
         // Get all the Java files
         final List files = new ArrayList();
         if (line.hasOption("r")) {
             final String[] values = line.getOptionValues("r");
             for (int i = 0; i < values.length; i++) {
                 traverse(new File(values[i]), files);
             }
         }
 
         final String[] remainingArgs = line.getArgs();
         for (int i = 0; i < remainingArgs.length; i++) {
             files.add(remainingArgs[i]);
         }
 
         if (files.isEmpty()) {
             System.out.println("Must specify files to process");
             usage();
         }
 
         // create the checker
         Checker c = null;
         try {
-            c = new Checker(new Configuration(props, System.out), checkConfigs);
+            c = new Checker(new GlobalProperties(props, System.out),
+                            checkConfigs);
             c.addListener(listener);
         }
         catch (Exception e) {
             System.out.println("Unable to create Checker: "
                                + e.getMessage());
             e.printStackTrace(System.out);
             System.exit(1);
         }
 
         final int numErrs =
             c.process((String[]) files.toArray(new String[files.size()]));
         c.destroy();
         System.exit(numErrs);
     }
 
     /** Prints the usage information. **/
     private static void usage()
     {
         HelpFormatter hf = new HelpFormatter();
         hf.printHelp(
             "java "
                 + Main.class.getName()
                 + " [options] -c <config.xml> file...",
             OPTS);
         System.exit(1);
     }
 
     /**
      * Traverses a specified node looking for Java source files. Found Java
      * source files are added to a specified list. Subdirectories are also
      * traversed.
      *
      * @param aNode the node to process
      * @param aFiles list to add found files to
      */
     private static void traverse(File aNode, List aFiles)
     {
         if (aNode.canRead()) {
             if (aNode.isDirectory()) {
                 final File[] nodes = aNode.listFiles();
                 for (int i = 0; i < nodes.length; i++) {
                     traverse(nodes[i], aFiles);
                 }
             }
             else if (aNode.isFile() && aNode.getPath().endsWith(".java")) {
                 aFiles.add(aNode.getPath());
             }
         }
     }
 
