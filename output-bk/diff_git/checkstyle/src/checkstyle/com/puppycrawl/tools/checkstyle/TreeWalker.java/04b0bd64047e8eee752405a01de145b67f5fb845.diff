diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
index 8182fc4b3..0418e6728 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
@@ -70,101 +70,101 @@ public final class TreeWalker
          * Creates a new <code>SilentJava14Recognizer</code> instance.
          *
          * @param aLexer the tokenstream the recognizer operates on.
          */
         private SilentJava14Recognizer(GeneratedJava14Lexer aLexer)
         {
             super(aLexer);
         }
 
         /**
          * Parser error-reporting function, does nothing.
          * @param aRex the exception to be reported
          */
         public void reportError(RecognitionException aRex)
         {
         }
 
         /**
          * Parser error-reporting function, does nothing.
          * @param aMsg the error message
          */
         public void reportError(String aMsg)
         {
         }
 
         /**
          * Parser warning-reporting function, does nothing.
          * @param aMsg the error message
          */
         public void reportWarning(String aMsg)
         {
         }
     }
 
     /** maps from token name to checks */
     private final Map mTokenToChecks = new HashMap();
     /** all the registered checks */
     private final Set mAllChecks = new HashSet();
     /** collects the error messages */
     private final LocalizedMessages mMessages;
     /** the distance between tab stops */
     private int mTabWidth = 8;
     /** cache file **/
     private PropertyCacheFile mCache = new PropertyCacheFile(null, null);
 
     /** class loader to resolve classes with. **/
     private ClassLoader mClassLoader;
 
     /** context of child components */
     private Context mChildContext;
-    
+
     /**
      * HACK - a reference to a private "mParent" field in DetailAST.
      * Don't do this at home!
      */
     private Field mDetailASTmParent;
 
     /** a factory for creating submodules (i.e. the Checks) */
     private ModuleFactory mModuleFactory;
 
     /**
      * Creates a new <code>TreeWalker</code> instance.
      */
     public TreeWalker()
     {
         setFileExtensions(new String[]{"java"});
         mMessages = new LocalizedMessages();
 
         // TODO: I (lkuehne) can't believe I wrote this! HACK HACK HACK!
 
         // the parent relationship should really be managed by the DetailAST
         // itself but ANTLR calls setFirstChild and friends in an
         // unpredictable way. Introducing this hack for now to make
         // DetailsAST.setParent() private...
         try {
             mDetailASTmParent = DetailAST.class.getDeclaredField("mParent");
             // this will fail in environments with security managers
             mDetailASTmParent.setAccessible(true);
         }
         catch (NoSuchFieldException e) {
             mDetailASTmParent = null;
         }
     }
 
     /** @param aTabWidth the distance between tab stops */
     public void setTabWidth(int aTabWidth)
     {
         mTabWidth = aTabWidth;
     }
 
     /** @param aFileName the cache file */
     public void setCacheFile(String aFileName)
     {
         final Configuration configuration = getConfiguration();
         mCache = new PropertyCacheFile(configuration, aFileName);
     }
 
     /** @param aClassLoader class loader to resolve classes with. */
     public void setClassLoader(ClassLoader aClassLoader)
     {
         mClassLoader = aClassLoader;
@@ -297,153 +297,155 @@ public final class TreeWalker
                 }
                 catch (IllegalArgumentException ex) {
                     throw new CheckstyleException("illegal token \""
                         + token + "\" in check " + aCheck, ex);
                 }
             }
         }
         else {
             tokens = aCheck.getDefaultTokens();
         }
         for (int i = 0; i < tokens.length; i++) {
             registerCheck(tokens[i], aCheck);
         }
         mAllChecks.add(aCheck);
     }
 
     /**
      * Register a check for a specified token id.
      * @param aTokenID the id of the token
      * @param aCheck the check to register
      */
     private void registerCheck(int aTokenID, Check aCheck)
     {
         registerCheck(TokenTypes.getTokenName(aTokenID), aCheck);
     }
 
     /**
      * Register a check for a specified token name
      * @param aToken the name of the token
      * @param aCheck the check to register
      */
     private void registerCheck(String aToken, Check aCheck)
     {
         ArrayList visitors = (ArrayList) mTokenToChecks.get(aToken);
         if (visitors == null) {
             visitors = new ArrayList();
             mTokenToChecks.put(aToken, visitors);
         }
 
         visitors.add(aCheck);
     }
 
     /**
      * Initiates the walk of an AST.
      * @param aAST the root AST
      * @param aContents the contents of the file the AST was generated from
      */
     private void walk(DetailAST aAST, FileContents aContents)
     {
         mMessages.reset();
-        notifyBegin(aContents);
+        notifyBegin(aAST, aContents);
 
          // empty files are not flagged by javac, will yield aAST == null
         if (aAST != null) {
             setParent(aAST, null); // TODO: Manage parent in DetailAST
             process(aAST);
         }
 
-        notifyEnd();
+        notifyEnd(aAST);
     }
 
     /**
      * Sets the parent of an AST.
      * @param aChildAST the child that gets a new parent
      * @param aParentAST the new parent
      */
     // TODO: remove this method and manage parent in DetailAST
     private void setParent(DetailAST aChildAST, DetailAST aParentAST)
     {
         // HACK
         try {
             mDetailASTmParent.set(aChildAST, aParentAST);
         }
         catch (IllegalAccessException iae) {
             // can't happen because method has been made accesible
             throw new RuntimeException();
         }
         // End of HACK
     }
 
     /**
      * Notify interested checks that about to begin walking a tree.
+     * @param aRootAST the root of the tree
      * @param aContents the contents of the file the AST was generated from
      */
-    private void notifyBegin(FileContents aContents)
+    private void notifyBegin(DetailAST aRootAST, FileContents aContents)
     {
         final Iterator it = mAllChecks.iterator();
         while (it.hasNext()) {
             final Check check = (Check) it.next();
             check.setFileContents(aContents);
-            check.beginTree();
+            check.beginTree(aRootAST);
         }
     }
 
     /**
      * Notify checks that finished walking a tree.
+     * @param aRootAST the root of the tree
      */
-    private void notifyEnd()
+    private void notifyEnd(DetailAST aRootAST)
     {
         final Iterator it = mAllChecks.iterator();
         while (it.hasNext()) {
             final Check check = (Check) it.next();
-            check.finishTree();
+            check.finishTree(aRootAST);
         }
     }
 
     /**
      * Recursively processes a node calling interested checks at each node.
      * @param aAST the node to start from
      */
     private void process(DetailAST aAST)
     {
         if (aAST == null) {
             return;
         }
 
         notifyVisit(aAST);
 
         final DetailAST child = (DetailAST) aAST.getFirstChild();
         if (child != null) {
             setParent(child, aAST); // TODO: Manage parent in DetailAST
             process(child);
         }
 
         notifyLeave(aAST);
 
         final DetailAST sibling = (DetailAST) aAST.getNextSibling();
         if (sibling != null) {
             setParent(sibling, aAST.getParent()); // TODO: Manage parent ...
             process(sibling);
         }
 
     }
 
     /**
      * Notify interested checks that visiting a node.
      * @param aAST the node to notify for
      */
     private void notifyVisit(DetailAST aAST)
     {
         final ArrayList visitors =
             (ArrayList) mTokenToChecks.get(
                 TokenTypes.getTokenName(aAST.getType()));
         if (visitors != null) {
             for (int i = 0; i < visitors.size(); i++) {
                 final Check check = (Check) visitors.get(i);
                 check.visitToken(aAST);
             }
         }
     }
 
     /**
      * Notify interested checks that leaving a node.
