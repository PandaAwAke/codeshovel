diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
index 2e78baa01..a75a232a8 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
@@ -84,134 +84,136 @@ public class CheckStyleTask
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Tells this task to set the named property to "true" when there
      * is a violation.
      * @param aPropertyName the name of the property to set
      *                      in the event of an failure.
      */
     public void setFailureProperty(String aPropertyName)
     {
         mFailureProperty = aPropertyName;
     }
 
     /** @param aFail whether to fail if a violation is found **/
     public void setFailOnViolation(boolean aFail)
     {
         mFailOnViolation = aFail;
     }
 
     /**
      * Adds a set of files (nested fileset attribute).
      * @param aFS the file set to add
      */
     public void addFileset(FileSet aFS)
     {
         mFileSets.add(aFS);
     }
 
     /**
      * Add a formatter
      * @param aFormatter the formatter to add for logging.
      */
     public void addFormatter(Formatter aFormatter)
     {
         mFormatters.add(aFormatter);
     }
 
     /**
      * Set the class path.
      * @param aClasspath the path to locate classes
      */
     public void setClasspath(Path aClasspath)
     {
         mClasspath = aClasspath;
     }
 
     /** @return a created path for locating classes **/
     public Path createClasspath()
     {
         if (mClasspath == null) {
-            mClasspath = new Path(project);
+            mClasspath = new Path(getProject());
         }
         return mClasspath.createPath();
     }
 
     /** @param aFile the file to be checked **/
     public void setFile(File aFile)
     {
         mFileName = aFile.getAbsolutePath();
     }
 
     ////////////////////////////////////////////////////////////////////////////
     // Setters for Checker configuration attributes
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Sets a properties file for use instead
      * of individually setting them.
      * @param aProps the properties File to use
      */
     public void setProperties(File aProps)
     {
         Properties mProperties = new Properties();
         try {
             mProperties.load(new FileInputStream(aProps));
             mConfig = new Configuration(mProperties, System.out);
         }
         catch (FileNotFoundException e) {
             throw new BuildException(
-                "Could not find Properties file '" + aProps + "'", e, location);
+                "Could not find Properties file '" + aProps + "'",
+                e, getLocation());
         }
         catch (Exception e) {
             throw new BuildException(
-                "Error loading Properties file '" + aProps + "'", e, location);
+                "Error loading Properties file '" + aProps + "'",
+                e, getLocation());
         }
     }
 
     /** @param aAllowed whether tabs are allowed **/
     public void setAllowTabs(final boolean aAllowed)
     {
         setBooleanProperty(Defn.ALLOW_TABS_PROP, aAllowed);
     }
 
     /** @param aTabWidth number of spaces that are represented by one tab **/
     public void setTabWidth(final int aTabWidth)
     {
         setIntProperty(Defn.TAB_WIDTH_PROP, aTabWidth);
     }
 
     /** @param aAllowed whether protected data is allowed **/
     public void setAllowProtected(final boolean aAllowed)
     {
         setBooleanProperty(Defn.ALLOW_PROTECTED_PROP, aAllowed);
     }
 
     /** @param aAllowed whether package visible data is allowed **/
     public void setAllowPackage(final boolean aAllowed)
     {
         setBooleanProperty(Defn.ALLOW_PACKAGE_PROP, aAllowed);
     }
 
     /** @param aAllowed whether allow having no author **/
     public void setAllowNoAuthor(final boolean aAllowed)
     {
         setBooleanProperty(Defn.ALLOW_NO_AUTHOR_PROP, aAllowed);
     }
 
     /** @param aLen max allowed line length **/
     public void setMaxLineLen(final int aLen)
     {
         setIntProperty(Defn.MAX_LINE_LENGTH_PROP, aLen);
     }
 
     /** @param aLen max allowed method length **/
     public void setMaxMethodLen(final int aLen)
     {
         setIntProperty(Defn.MAX_METHOD_LENGTH_PROP, aLen);
     }
 
     /** @param aLen max allowed constructor length **/
     public void setMaxConstructorLen(final int aLen)
     {
         setIntProperty(Defn.MAX_CONSTRUCTOR_LENGTH_PROP, aLen);
     }
@@ -379,101 +381,101 @@ public class CheckStyleTask
                 public void run()
                 {
                     mConfig.setIllegalInstantiations(aClassList);
                 }
             });
     }
 
     /** @param aIgnore whether to ignore whitespace **/
     public void setIgnoreWhitespace(final boolean aIgnore)
     {
         setBooleanProperty(Defn.IGNORE_WHITESPACE_PROP, aIgnore);
     }
 
     /** @param aIgnore whether to ignore whitespace after casts **/
     public void setIgnoreCastWhitespace(final boolean aIgnore)
     {
         setBooleanProperty(Defn.IGNORE_CAST_WHITESPACE_PROP, aIgnore);
     }
 
     /** @param aIgnore whether to ignore braces **/
     public void setIgnoreBraces(final boolean aIgnore)
     {
         setBooleanProperty(Defn.IGNORE_BRACES_PROP, aIgnore);
     }
 
     /** @param aIgnore whether to ignore long 'L' **/
     public void setIgnoreLongEll(final boolean aIgnore)
     {
         setBooleanProperty(Defn.IGNORE_LONG_ELL_PROP, aIgnore);
     }
 
     /** @param aIgnore whether to ignore 'public' in interfaces **/
     public void setIgnorePublicInInterface(final boolean aIgnore)
     {
         setBooleanProperty(Defn.IGNORE_PUBLIC_IN_INTERFACE_PROP, aIgnore);
     }
 
     /** @param aEnable whether to check if unused @throws are a
      *                 RuntimeException
      **/
     public void setCheckUnusedThrows(final boolean aEnable)
     {
         setBooleanProperty(Defn.JAVADOC_CHECK_UNUSED_THROWS_PROP, aEnable);
     }
 
     /** @param aBasedir set the base directory **/
     public void setBasedir(final File aBasedir)
     {
         if (!aBasedir.isDirectory()) {
             throw new BuildException("basedir must specify a directory.",
-                                     location);
+                                     getLocation());
         }
         setStringProperty(Defn.BASEDIR_PROP, aBasedir.getAbsolutePath());
     }
 
     /** @param aLang the language to localise messages to **/
     public void setLocaleLanguage(String aLang)
     {
         setStringProperty(Defn.LOCALE_LANGUAGE_PROP, aLang);
     }
 
     /** @param aLang the country to localise messages to **/
     public void setLocaleCountry(String aLang)
     {
         setStringProperty(Defn.LOCALE_COUNTRY_PROP, aLang);
     }
 
     /** @param aCacheFile the file to cache which files have been checked **/
     public void setCacheFile(final File aCacheFile)
     {
         setStringProperty(Defn.CACHE_FILE_PROP, aCacheFile.getAbsolutePath());
     }
 
     /** @param aTo the left curly placement option for methods **/
     public void setLCurlyMethod(final String aTo)
     {
         setLeftCurlyOptionProperty(Defn.LCURLY_METHOD_PROP, aTo);
     }
 
     /** @param aTo the left curly placement option for types **/
     public void setLCurlyType(final String aTo)
     {
         setLeftCurlyOptionProperty(Defn.LCURLY_TYPE_PROP, aTo);
     }
 
     /** @param aTo the left curly placement option for others **/
     public void setLCurlyOther(final String aTo)
     {
         setLeftCurlyOptionProperty(Defn.LCURLY_OTHER_PROP, aTo);
     }
 
     /** @param aTo the right curly placement option **/
     public void setRCurly(final String aTo)
     {
         mOptionMemory.add(new Runnable()
             {
                 public void run()
                 {
                     mConfig.setRCurly(extractRightCurlyOption(aTo));
                 }
             });
@@ -490,135 +492,136 @@ public class CheckStyleTask
     {
         setBlockOptionProperty(Defn.CATCH_BLOCK_PROP, aTo);
     }
 
     /** @param aTo the finally block option **/
     public void setFinallyBlock(final String aTo)
     {
         setBlockOptionProperty(Defn.FINALLY_BLOCK_PROP, aTo);
     }
 
     /** @param aTo the parenthesis padding option **/
     public void setParenPad(final String aTo)
     {
         mOptionMemory.add(new Runnable()
             {
                 public void run()
                 {
                     mConfig.setParenPadOption(extractPadOption(aTo));
                 }
             });
     }
 
     /** @param aTo the operator wrapping option **/
     public void setWrapOp(final String aTo)
     {
         mOptionMemory.add(new Runnable()
             {
                 public void run()
                 {
                     mConfig.setWrapOpOption(extractWrapOpOption(aTo));
                 }
             });
     }
 
     ////////////////////////////////////////////////////////////////////////////
     // The doers
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Actually checks the files specified. All errors are reported to
      * System.out. Will fail if any errors occurred.
      * @throws BuildException an error occurred
      **/
     public void execute()
         throws BuildException
     {
         // Check for no arguments
         if ((mFileName == null) && (mFileSets.size() == 0)) {
             throw new BuildException(
                 "Must specify atleast one of 'file' or nested 'fileset'.",
-                location);
+                getLocation());
         }
 
         // setup the classloader
         if (mClasspath != null) {
-            mConfig.setClassLoader(new AntClassLoader(project, mClasspath));
+            mConfig.setClassLoader(
+                new AntClassLoader(getProject(), mClasspath));
         }
         // Create the checker
         Checker c = null;
         try {
             try {
                 applyExplicitOptions();
                 c = new Checker(mConfig);
                 // setup the listeners
                 AuditListener[] listeners = getListeners();
                 for (int i = 0; i < listeners.length; i++) {
                     c.addListener(listeners[i]);
                 }
             }
             catch (Exception e) {
                 throw new BuildException("Unable to create a Checker", e);
             }
 
             // Process the files
             final String[] files = scanFileSets();
             final int numErrs = c.process(files);
 
             // Handle the return status
             if ((numErrs > 0) && mFailureProperty != null) {
                 getProject().setProperty(mFailureProperty, "true");
             }
 
             if ((numErrs > 0) && mFailOnViolation) {
                 throw new BuildException("Got " + numErrs + " errors.",
-                                         location);
+                                         getLocation());
             }
         }
         finally {
             if (c != null) {
                 c.destroy();
             }
         }
     }
 
     /**
      * Return the list of listeners set in this task.
      * @return the list of listeners.
      * @throws ClassNotFoundException if an error occurs
      * @throws InstantiationException if an error occurs
      * @throws IllegalAccessException if an error occurs
      * @throws IOException if an error occurs
      */
     protected AuditListener[] getListeners()
         throws ClassNotFoundException, InstantiationException,
         IllegalAccessException, IOException
     {
         final int listenerCount = Math.max(1, mFormatters.size());
 
         final AuditListener[] listeners = new AuditListener[listenerCount];
 
         if (mFormatters.size() == 0) {
             OutputStream debug = new LogOutputStream(this, Project.MSG_DEBUG);
             OutputStream err = new LogOutputStream(this, Project.MSG_ERR);
             listeners[0] = new DefaultLogger(debug, true, err, true);
             return listeners;
         }
 
         for (int i = 0; i < listeners.length; i++) {
             final Formatter f = (Formatter) mFormatters.get(i);
             listeners[i] = f.createListener(this);
         }
         return listeners;
     }
 
     /**
      * returns the list of files (full path name) to process.
      * @return the list of files included via the filesets.
      */
     protected String[] scanFileSets()
     {
         final ArrayList list = new ArrayList();
         if (mFileName != null) {
             // oops we've got an additional one to process, don't
             // forget it. No sweat, it's fully resolved via the setter.
             log("Adding standalone file for audit", Project.MSG_VERBOSE);
@@ -710,133 +713,133 @@ public class CheckStyleTask
             else {
                 return createDefaultLogger(aTask);
             }
         }
 
         /**
          * @return a DefaultLogger instance
          * @param aTask the task to possibly log to
          * @throws IOException if an error occurs
          */
         private AuditListener createDefaultLogger(Task aTask)
             throws IOException
         {
             if (mToFile == null) {
                 return new DefaultLogger(
                     new LogOutputStream(aTask, Project.MSG_DEBUG), true,
                     new LogOutputStream(aTask, Project.MSG_ERR), true);
             }
             return new DefaultLogger(new FileOutputStream(mToFile), true);
         }
 
         /**
          * @return an XMLLogger instance
          * @param aTask the task to possibly log to
          * @throws IOException if an error occurs
          */
         private AuditListener createXMLLogger(Task aTask)
             throws IOException
         {
             if (mToFile == null) {
                 return new XMLLogger(
                     new LogOutputStream(aTask, Project.MSG_INFO), true);
             }
             else {
                 return new XMLLogger(new FileOutputStream(mToFile), true);
             }
         }
     }
 
     /**
      * @param aFrom String to decode the option from
      * @return the RightCurlyOption represented by aFrom
      * @throws BuildException if unable to decode aFrom
      */
     private RightCurlyOption extractRightCurlyOption(String aFrom)
         throws BuildException
     {
         final RightCurlyOption opt = RightCurlyOption.decode(aFrom);
         if (opt == null) {
             throw new BuildException("Unable to parse '" + aFrom + "'.",
-                                     location);
+                                     getLocation());
         }
         return opt;
     }
 
     /**
      * @param aFrom String to decode the option from
      * @return the PadOption represented by aFrom
      * @throws BuildException if unable to decode aFrom
      */
     private PadOption extractPadOption(String aFrom)
         throws BuildException
     {
         final PadOption opt = PadOption.decode(aFrom);
         if (opt == null) {
             throw new BuildException("Unable to parse '" + aFrom + "'.",
-                                     location);
+                                     getLocation());
         }
         return opt;
     }
 
     /**
      * @param aFrom String to decode the option from
      * @return the WrapOpOption represented by aFrom
      * @throws BuildException if unable to decode aFrom
      */
     private WrapOpOption extractWrapOpOption(String aFrom)
         throws BuildException
     {
         final WrapOpOption opt = WrapOpOption.decode(aFrom);
         if (opt == null) {
             throw new BuildException("Unable to parse '" + aFrom + "'.",
-                                     location);
+                                     getLocation());
         }
         return opt;
     }
 
     /**
      * Applies the options that have been saved in the mOptionMemory.
      */
     private void applyExplicitOptions()
     {
         final Iterator it = mOptionMemory.iterator();
         while (it.hasNext()) {
             final Runnable runnable = (Runnable) it.next();
             runnable.run();
         }
         mOptionMemory.clear();
     }
 
     /**
      * Set the specified boolean property.
      * @param aName name of property to set
      * @param aTo the value of the property
      */
     private void setBooleanProperty(final String aName, final boolean aTo)
     {
         mOptionMemory.add(new Runnable()
             {
                 public void run()
                 {
                     mConfig.setBooleanProperty(aName, aTo);
                 }
             });
     }
 
     /**
      * Set the specified integer property.
      * @param aName name of property to set
      * @param aTo the value of the property
      */
     private void setIntProperty(final String aName, final int aTo)
     {
         mOptionMemory.add(new Runnable()
             {
                 public void run()
                 {
                     mConfig.setIntProperty(aName, aTo);
                 }
             });
     }
 
     /**
@@ -845,85 +848,85 @@ public class CheckStyleTask
      * @param aTo the value of the property
      */
     private void setStringProperty(final String aName, final String aTo)
     {
         mOptionMemory.add(new Runnable()
             {
                 public void run()
                 {
                     mConfig.setStringProperty(aName, aTo);
                 }
             });
     }
 
     /**
      * Set the specified pattern property.
      * @param aName name of property to set
      * @param aTo the value of the property
      * @param aLabel the label to display in errors
      */
     private void setPatternProperty(final String aName,
                                     final String aTo,
                                     final String aLabel)
     {
         mOptionMemory.add(new Runnable()
             {
                 public void run()
                 {
                     try {
                         mConfig.setPatternProperty(aName, aTo);
                     }
                     catch (RESyntaxException ex) {
                         throw new BuildException(
                             "Unable to parse " + aLabel + " - ", ex);
                     }
                 }
             });
     }
 
     /**
      * Set the specified BlockOption property.
      * @param aName name of property to set
      * @param aTo the value of the property
      * @throws BuildException if unable to decode aTo
      */
     private void setBlockOptionProperty(final String aName, String aTo)
         throws BuildException
     {
         final BlockOption opt = BlockOption.decode(aTo);
         if (opt == null) {
             throw new BuildException("Unable to parse '" + aTo + "'.",
-                                     location);
+                                     getLocation());
         }
 
         mOptionMemory.add(new Runnable()
             {
                 public void run()
                 {
                     mConfig.setBlockOptionProperty(aName, opt);
                 }
             });
     }
 
     /**
      * Set the specified LeftCurlyOption property.
      * @param aName name of property to set
      * @param aTo the value of the property
      * @throws BuildException if unable to decode aTo
      */
     private void setLeftCurlyOptionProperty(final String aName, String aTo)
         throws BuildException
     {
         final LeftCurlyOption opt = LeftCurlyOption.decode(aTo);
         if (opt == null) {
             throw new BuildException("Unable to parse '" + aTo + "'.",
-                                     location);
+                                     getLocation());
         }
         mOptionMemory.add(new Runnable()
             {
                 public void run()
                 {
                     mConfig.setLeftCurlyOptionProperty(aName, opt);
                 }
             });
     }
 }
