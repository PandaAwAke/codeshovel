diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
index ab6a12964..832ad7bc2 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
@@ -116,180 +116,183 @@ public class AutomaticBean implements Configurable, Contextualizable
 
     /**
      * Implements the Configurable interface using bean introspection.
      * @see Configurable
      */
     public void configure(Configuration aConfiguration)
         throws CheckstyleException
     {
         // TODO: debug log messages
         final String[] attributes = aConfiguration.getAttributeNames();
 
         for (int i = 0; i < attributes.length; i++) {
             final String key = attributes[i];
             final String value = aConfiguration.getAttribute(key);
 
             try {
                 BeanUtils.copyProperty(this, key, value);
             }
             catch (InvocationTargetException e) {
                 throw new CheckstyleException(
                     "for " + aConfiguration.getName() + " unable to set " + key
                     + " with " + value);
             }
             catch (IllegalAccessException e) {
                 throw new CheckstyleException(
                     "cannot access " + key + " in "
                     + this.getClass().getName());
             }
         }
     }
 
     /**
      * Implements the Contextualizable interface using bean introspection.
      * @see Contextualizable
      */
     public void contextualize(Context aContext) throws CheckstyleException
     {
         // TODO: debug log messages
         final String[] attributes = aContext.getAttributeNames();
 
         for (int i = 0; i < attributes.length; i++) {
             final String key = attributes[i];
             final Object value = aContext.get(key);
 
             try {
                 BeanUtils.copyProperty(this, key, value);
             }
             catch (InvocationTargetException e) {
                 // TODO: log.debug("The bean " + this.getClass()
                 // + " is not interested in " + value)
+                throw new CheckstyleException("cannot set property "
+                    + key + " to value " + value + " in bean "
+                    + this.getClass().getName());
             }
             catch (IllegalAccessException e) {
                 throw new CheckstyleException(
                     "cannot access " + key + " in "
                     + this.getClass().getName());
             }
         }
     }
 }
 
 /**
  * <p>Standard Converter implementation that converts an incoming
  * String into an array of String.  On a conversion failure, returns
  * a specified default value or throws a ConversionException depending
  * on how this instance is constructed.</p>
  *
  * Hacked from
  * http://cvs.apache.org/viewcvs/jakarta-commons/beanutils/src/java/org/apache/commons/beanutils/converters/StringArrayConverter.java
  * because that implementation fails to convert array of tokens with elements
  * containing an underscore, "_" :(
  * 
  * @author Rick Giles
  */
 
 
 class StrArrayConverter extends AbstractArrayConverter
 {
     /**
      * <p>Model object for type comparisons.</p>
      */
-    private static String[] mModel = new String[0];
+    private static String[] sModel = new String[0];
 
     /**
      * Creates a new StrArrayConverter object.
      */
     public StrArrayConverter()
     {
         this.defaultValue = null;
         this.useDefault = false;
     }
 
     /**
      * Create a onverter that will return the specified default value
      * if a conversion error occurs.
      *
      * @param aDefaultValue The default value to be returned
      */
     public StrArrayConverter(Object aDefaultValue)
     {
         this.defaultValue = aDefaultValue;
         this.useDefault = true;
     }
 
     /**
      * Convert the specified input object into an output object of the
      * specified type.
      *
      * @param aType Data type to which this value should be converted
      * @param aValue The input value to be converted
      *
      * @return the converted object
      *
      * @throws ConversionException if conversion cannot be performed
      *  successfully
      */
     public Object convert(Class aType, Object aValue)
         throws ConversionException
     {
         // Deal with a null value
         if (aValue == null) {
             if (useDefault) {
                 return (defaultValue);
             }
             else {
                 throw new ConversionException("No value specified");
             }
         }
 
         // Deal with the no-conversion-needed case
-        if (mModel.getClass() == aValue.getClass()) {
+        if (sModel.getClass() == aValue.getClass()) {
             return (aValue);
         }
 
         // Parse the input value as a String into elements
         // and convert to the appropriate type
         try {
             final List list = parseElements(aValue.toString());
             final String[] results = new String[list.size()];
 
             for (int i = 0; i < results.length; i++) {
                 results[i] = (String) list.get(i);
             }
             return (results);
         }
         catch (Exception e) {
             if (useDefault) {
                 return (defaultValue);
             }
             else {
                 throw new ConversionException(aValue.toString(), e);
             }
         }
     }
 
     /**
     * <p>Parse an incoming String of the form similar to an array initializer
     * in the Java language into a <code>List</code> individual Strings
     * for each element, according to the following rules.</p>
     * <ul>
     * <li>The string must have matching '{' and '}' delimiters around
     *     a comma-delimited list of values.</li>
     * <li>Whitespace before and after each element is stripped.
     * <li>If an element is itself delimited by matching single or double
     *     quotes, the usual rules for interpreting a quoted String apply.</li>
     * </ul>
     *
     * @param aValue String value to be parsed
     * @return the list of Strings parsed from the array
     * @throws NullPointerException if <code>svalue</code>
     *  is <code>null</code>
     */
     protected List parseElements(String aValue)
         throws NullPointerException
     {
         // Validate the passed argument
         if (aValue == null) {
             throw new NullPointerException();
         }
 
         // Trim any matching '{' and '}' delimiters
