diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java
index e51396960..5994ac857 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java
@@ -57,53 +57,53 @@ public final class AbstractClassNameCheck extends AbstractFormatCheck
     {
         return getDefaultTokens();
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void visitToken(DetailAST aAST)
     {
         switch (aAST.getType()) {
         case TokenTypes.CLASS_DEF:
             visitClassDef(aAST);
             break;
         default:
             throw new IllegalStateException(aAST.toString());
         }
     }
 
     /**
      * Checks class definition.
      * @param aAST class definition for check.
      */
     private void visitClassDef(DetailAST aAST)
     {
         if (isAbstract(aAST)) {
             String className = aAST.findFirstToken(TokenTypes.IDENT).getText();
 
             if (!isMatchingClassName(className)) {
                 log(aAST.getLineNo(), aAST.getColumnNo(),
                     "illegal.abstract.class.name", className, getFormat());
             }
         }
     }
 
     /**
      * @param aAST class definition for check.
      * @return true if a given class declared as abstract.
      */
     private boolean isAbstract(DetailAST aAST)
     {
         final DetailAST abstractAST = aAST.findFirstToken(TokenTypes.MODIFIERS)
             .findFirstToken(TokenTypes.ABSTRACT);
 
         return abstractAST != null;
     }
 
     /**
      * @param aClassName class name for check.
      * @return true if class name matches format of abstract class names.
      */
     private boolean isMatchingClassName(String aClassName)
     {
-        return getRegexp().match(aClassName);
+        return getRegexp().matcher(aClassName).find();
     }
 }
