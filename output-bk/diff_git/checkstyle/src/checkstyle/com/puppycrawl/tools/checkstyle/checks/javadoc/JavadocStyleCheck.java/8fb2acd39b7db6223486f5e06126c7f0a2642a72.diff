diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
index 933133d0b..4d9a8e46a 100755
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
@@ -1,219 +1,219 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2003  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.javadoc;
 
+import java.util.Stack;
+
 import com.puppycrawl.tools.checkstyle.api.Check;
-import com.puppycrawl.tools.checkstyle.api.Comment;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FileContents;
 import com.puppycrawl.tools.checkstyle.api.Scope;
 import com.puppycrawl.tools.checkstyle.api.ScopeUtils;
+import com.puppycrawl.tools.checkstyle.api.TextBlock;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
-
-import java.util.Stack;
 import org.apache.regexp.RE;
 import org.apache.regexp.RESyntaxException;
 
 /**
  * <p>Custom Checkstyle Check to validate Javadoc.
  * The following checks are performed:
  * <ul>
  * <li>Ensures the first sentence ends with proper punctuation (That is
  * a period, question mark, or exclaimation mark).  Javadoc  automatically
  * places the first sentence in the method summary table and index.  With out
  * proper punctuation the Javadoc may be malformed.
  * <li>Check text for incomplete html tags.  Verifies that HTML tags have
  * corresponding end tags and issues an UNCLOSED_HTML error if not.
  * An EXTRA_HTML error is issued if an end tag is found without a previous
  * open tag.
  * </ul>
  * <p>These checks were patterned after the checks made by the doclet
  * <code>com.sun.tools.doclets.doccheck.DocCheck</code>
  *
  * @author Chris Stillwell
  * @version 1.1
  */
 public class JavadocStyleCheck
     extends Check
 {
     /** Message property key for the Unclosed HTML message. */
     private static final String UNCLOSED_HTML = "javadoc.unclosedhtml";
 
     /** Message property key for the Extra HTML message. */
     private static final String EXTRA_HTML = "javadoc.extrahtml";
 
     /** HTML tags that do not require a close tag. */
     private static final String[] SINGLE_TAG =
     {"p", "br", "li", "dt", "dd", "td", "hr", "img", "tr", "th", "td"};
 
     /** The scope to check. */
     private Scope mScope = Scope.PRIVATE;
 
     /** Regular expression for matching the end of a sentence. */
     private RE mEndOfSentenceRE;
 
     /**
      * Indicates if the first sentence should be checked for proper end of
      * sentence punctuation.
      */
     private boolean mCheckFirstSentence = true;
 
     /**
      * Indicates if the HTML within the comment should be checked.
      */
     private boolean mCheckHtml = true;
 
     /**
      * The default tokens this Check is used for.
      * @see com.puppycrawl.tools.checkstyle.api.Check#getDefaultTokens()
      */
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.INTERFACE_DEF,
             TokenTypes.CLASS_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.CTOR_DEF,
             TokenTypes.VARIABLE_DEF,
         };
     }
 
     /**
      * Called to process a token.
      * @see com.puppycrawl.tools.checkstyle.api.Check
      */
     public void visitToken(DetailAST aAST)
     {
         if (!ScopeUtils.inCodeBlock(aAST)) {
             final DetailAST mods =
                 aAST.findFirstToken(TokenTypes.MODIFIERS);
             final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);
             final Scope variableScope =
                 ScopeUtils.inInterfaceBlock(aAST)
                     ? Scope.PUBLIC
                     : declaredScope;
 
             if (variableScope.isIn(mScope)) {
                 final Scope surroundingScope =
                     ScopeUtils.getSurroundingScope(aAST);
 
                 if ((surroundingScope == null)
                     || surroundingScope.isIn(mScope))
                 {
                     final FileContents contents = getFileContents();
-                    final Comment cmt =
+                    final TextBlock cmt =
                         contents.getJavadocBefore(aAST.getLineNo());
 
                     checkComment(cmt);
                 }
             }
         }
     }
 
     /**
      * Performs the various checks agains the Javadoc comment.
      *
      * @param aComment the source lines that make up the Javadoc comment.
      *
-     * @see #checkFirstSentence(Comment)
-     * @see #checkHtml(Comment)
+     * @see #checkFirstSentence(TextBlock)
+     * @see #checkHtml(TextBlock)
      */
-    private void checkComment(Comment aComment)
+    private void checkComment(TextBlock aComment)
     {
         if (aComment == null) {
             return;
         }
 
         if (mCheckFirstSentence) {
             checkFirstSentence(aComment);
         }
 
         if (mCheckHtml) {
             checkHtml(aComment);
         }
     }
 
     /**
      * Checks that the first sentence ends with proper puctuation.  This method
      * uses a regular expression that checks for the presence of a period,
      * question mark, or exclaimation mark followed either by whitespace, an
      * HTML element, or the end of string. This method ignores {@inheritDoc}
      * comments.
      *
      * @param aComment the source lines that make up the Javadoc comment.
      */
-    private void checkFirstSentence(Comment aComment)
+    private void checkFirstSentence(TextBlock aComment)
     {
         final String commentText = getCommentText(aComment.getText());
 
         if ((commentText.length() != 0)
             && !getEndOfSentenceRE().match(commentText)
             && !"{@inheritDoc}".equals(commentText))
         {
-            log(aComment.getFirstLineNo(), "javadoc.noperiod");
+            log(aComment.getStartLineNo(), "javadoc.noperiod");
         }
     }
 
     /**
      * Returns the comment text from the Javadoc.
      * @param aComments the lines of Javadoc.
      * @return a comment text String.
      */
     private String getCommentText(String[] aComments)
     {
         final StringBuffer buffer = new StringBuffer();
         boolean foundTag = false;
 
         for (int i = 0; i < aComments.length; i++) {
             String line = aComments[i];
             final int textStart = findTextStart(line);
 
             if (textStart != -1) {
                 // Look for Javadoc tag that's neither a @link nor a
                 // @inheritDoc since they can appear
                 // within the comment text.
                 final int ndx = line.indexOf('@');
                 if ((ndx != -1)
                     && !line.regionMatches(ndx + 1, "link", 0, "link".length())
                     && !line.regionMatches(
                         ndx + 1,
                         "inheritDoc",
                         0,
                         "inheritDoc".length()))
                 {
                     foundTag = true;
                     line = line.substring(0, ndx);
                 }
 
                 buffer.append(line.substring(textStart));
                 trimTail(buffer);
                 buffer.append('\n');
 
                 if (foundTag) {
                     break;
                 }
             }
         }
 
         return buffer.toString().trim();
     }
 
     /**
      * Finds the index of the first non-whitespace character ignoring the
      * Javadoc comment start and end strings (&#47** and *&#47) as well as any
@@ -224,106 +224,106 @@ public class JavadocStyleCheck
      */
     private int findTextStart(String aLine)
     {
         int textStart = -1;
         for (int i = 0; i < aLine.length(); i++) {
             if (!Character.isWhitespace(aLine.charAt(i))) {
                 if (aLine.regionMatches(i, "/**", 0, "/**".length())) {
                     i += 2;
                 }
                 else if (aLine.regionMatches(i, "*/", 0, 2)) {
                     i++;
                 }
                 else if (aLine.charAt(i) != '*') {
                     textStart = i;
                     break;
                 }
             }
         }
         return textStart;
     }
 
     /**
      * Trims any trailing whitespace or the end of Javadoc comment string.
      * @param aBuffer the StringBuffer to trim.
      */
     private void trimTail(StringBuffer aBuffer)
     {
         for (int i = aBuffer.length() - 1; i >= 0; i--) {
             if (Character.isWhitespace(aBuffer.charAt(i))) {
                 aBuffer.deleteCharAt(i);
             }
             else if ((i > 0)
                      && (aBuffer.charAt(i - 1) == '*')
                      && (aBuffer.charAt(i) == '/'))
             {
                 aBuffer.deleteCharAt(i);
                 aBuffer.deleteCharAt(i - 1);
                 i--;
             }
             else {
                 break;
             }
         }
     }
 
     /**
      * Checks the comment for HTML tags that do not have a corresponding close
      * tag or a close tage that has no previous open tag.  This code was
      * primarily copied from the DocCheck checkHtml method.
      *
-     * @param aComment the <code>Comment</code> which represents
+     * @param aComment the <code>TextBlock</code> which represents
      *                 the Javadoc comment.
      */
-    private void checkHtml(Comment aComment)
+    private void checkHtml(TextBlock aComment)
     {
-        final int lineno = aComment.getFirstLineNo();
+        final int lineno = aComment.getStartLineNo();
         final Stack htmlStack = new Stack();
         final String[] text = aComment.getText();
 
         TagParser parser = null;
         parser = new TagParser(text, lineno);
 
         while (parser.hasNextTag()) {
             final HtmlTag tag = parser.nextTag();
 
             if (tag.isIncompleteTag()) {
                 log(tag.getLineno(), "javadoc.incompleteTag",
                     new Object[] {text[tag.getLineno() - lineno]});
                 return;
             }
             if (tag.isClosedTag()) {
                 //do nothing
                 continue;
             }
             if (!tag.isCloseTag()) {
                 htmlStack.push(tag);
             }
             else {
                 // We have found a close tag.
                 if (isExtraHtml(tag.getId(), htmlStack)) {
                     // No corresponding open tag was found on the stack.
                     log(tag.getLineno(),
                         tag.getPosition(),
                         EXTRA_HTML,
                         tag);
                 }
                 else {
                     // See if there are any unclosed tags that were opened
                     // after this one.
                     checkUnclosedTags(htmlStack, tag.getId());
                 }
             }
         }
 
         // Identify any tags left on the stack.
         String lastFound = ""; // Skip multiples, like <b>...<b>
         for (int i = 0; i < htmlStack.size(); i++) {
             final HtmlTag htag = (HtmlTag) htmlStack.elementAt(i);
             if (!isSingleTag(htag) && !htag.getId().equals(lastFound)) {
                 log(htag.getLineno(), htag.getPosition(), UNCLOSED_HTML, htag);
                 lastFound = htag.getId();
             }
         }
     }
 
     /**
