diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java
index 5b8cde7e6..d604b528f 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java
@@ -45,124 +45,113 @@ import com.puppycrawl.tools.checkstyle.checks.AbstractOptionCheck;
  * </p>
  * <pre>
  * &lt;module name="MethodParamPad"/&gt;
  * </pre>
  * <p> An example of how to configure the check to require a space
  * after the identifier of a method definition, except if the left
  * parenthesis occurs on a new line, is:
  * </p>
  * <pre>
  * &lt;module name="MethodParamPad"&gt;
  *     &lt;property name="tokens" value="METHOD_DEF"/&gt;
  *     &lt;property name="option" value="space"/&gt;
  *     &lt;property name="allowLineBreaks" value="true"/&gt;
  * &lt;/module&gt;
  * </pre>
  * @author Rick Giles
  * @version 1.0
  */
 
 public class MethodParamPadCheck
     extends AbstractOptionCheck
 {
     /**
      * Sets the pad otion to nospace.
      */
     public MethodParamPadCheck()
     {
         super(PadOption.NOSPACE);
     }
 
     /** Whether whitespace is allowed if the method identifier is at a
      * linebreak */
     private boolean mAllowLineBreaks;
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.CTOR_DEF,
             TokenTypes.LITERAL_NEW,
             TokenTypes.METHOD_CALL,
             TokenTypes.METHOD_DEF,
             TokenTypes.SUPER_CTOR_CALL,
         };
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void visitToken(DetailAST aAST)
     {
         final DetailAST parenAST;
-        if ((aAST.getType() == TokenTypes.METHOD_CALL)
-            || (aAST.getType() == TokenTypes.SUPER_CTOR_CALL))
-        {
+        if ((aAST.getType() == TokenTypes.METHOD_CALL)) {
             parenAST = aAST;
         }
         else {
             parenAST = aAST.findFirstToken(TokenTypes.LPAREN);
             // array construction => parenAST == null
             if (parenAST == null) {
                 return;
             }
         }
         int parenColumnNo = parenAST.getColumnNo();
         final String[] lines = getLines();
         int identLineNo = -1;
         int identColumnNo = -1;
         final String identText;
-        if (aAST.getType() == TokenTypes.SUPER_CTOR_CALL) {
-            identText = "super";
-            final String parenLine = lines[parenAST.getLineNo() - 1];
-            final int superIndex =
-                parenLine.lastIndexOf("super", parenAST.getColumnNo());
-            if (superIndex != -1) {
-                identLineNo = aAST.getLineNo();
-                identColumnNo = superIndex;
-            }
+        final DetailAST identAST;
+        final DetailAST dotAST = aAST.findFirstToken(TokenTypes.DOT);
+        if (dotAST != null) {
+            identAST = dotAST.getLastChild();
+        }
+        else if (aAST.getType() == TokenTypes.SUPER_CTOR_CALL) {
+            identAST = aAST;
         }
         else {
-            final DetailAST identAST;
-            final DetailAST dotAST = aAST.findFirstToken(TokenTypes.DOT);
-            if (dotAST != null) {
-                identAST = dotAST.getLastChild();
-            }
-            else {
-                identAST = aAST.findFirstToken(TokenTypes.IDENT);
-            }
-            identLineNo = identAST.getLineNo();
-            identColumnNo = identAST.getColumnNo();
-            identText = identAST.getText();
+            identAST = aAST.findFirstToken(TokenTypes.IDENT);
         }
+        identLineNo = identAST.getLineNo();
+        identColumnNo = identAST.getColumnNo();
+        identText = identAST.getText();
 
         if (identLineNo == parenAST.getLineNo()) {
             final int after = identColumnNo + identText.length();
             final String line = lines[identLineNo - 1];
             if ((PadOption.NOSPACE == getAbstractOption())
                 && (Character.isWhitespace(line.charAt(after))))
             {
                 log(identLineNo, after, "ws.followed", identText);
             }
             else if ((PadOption.SPACE == getAbstractOption())
                      && !Character.isWhitespace(line.charAt(after)))
             {
                 log(identLineNo, after, "ws.notFollowed", identText);
             }
         }
         else if (!mAllowLineBreaks) {
             log(
                 parenAST.getLineNo(),
                 parenColumnNo,
                 "line.previous",
                 parenAST.getText());
         }
     }
 
     /**
      * Control whether whitespace is flagged at linebreaks.
      * @param aAllowLineBreaks whether whitespace should be
      * flagged at linebreaks.
      */
     public void setAllowLineBreaks(boolean aAllowLineBreaks)
     {
         mAllowLineBreaks = aAllowLineBreaks;
     }
 }
