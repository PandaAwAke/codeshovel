diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/StaticVariableNameCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/StaticVariableNameCheck.java
index e0639b5c0..1d2ff3722 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/StaticVariableNameCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/StaticVariableNameCheck.java
@@ -27,53 +27,54 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  * Checks that static, non-final variable names conform to a format specified
  * by the format property. The format is a
  * {@link java.util.regex.Pattern regular expression} and defaults to
  * <strong>^[a-z][a-zA-Z0-9]*$</strong>.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="StaticVariableName"/&gt;
  * </pre>
  * <p>
  * An example of how to configure the check for names that begin with
  * a lower case letter, followed by letters, digits, and underscores is:
  * </p>
  * <pre>
  * &lt;module name="StaticVariableName"&gt;
  *    &lt;property name="format" value="^[a-z](_?[a-zA-Z0-9]+)*$"/&gt;
  * &lt;/module&gt;
  * </pre>
  * @author Rick Giles
  * @version 1.0
  */
 public class StaticVariableNameCheck
     extends AbstractAccessControlNameCheck
 {
     /** Creates a new <code>StaticVariableNameCheck</code> instance. */
     public StaticVariableNameCheck()
     {
         super("^[a-z][a-zA-Z0-9]*$");
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.VARIABLE_DEF};
     }
 
     @Override
     protected final boolean mustCheckName(DetailAST aAST)
     {
         final DetailAST modifiersAST =
             aAST.findFirstToken(TokenTypes.MODIFIERS);
         final boolean isStatic = (modifiersAST != null)
             && modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);
         final boolean isFinal = (modifiersAST != null)
             && modifiersAST.branchContains(TokenTypes.FINAL);
 
         return (isStatic
                 && !isFinal
+                && shouldCheckInScope(modifiersAST)
                 && !ScopeUtils.inInterfaceOrAnnotationBlock(aAST));
     }
 }
