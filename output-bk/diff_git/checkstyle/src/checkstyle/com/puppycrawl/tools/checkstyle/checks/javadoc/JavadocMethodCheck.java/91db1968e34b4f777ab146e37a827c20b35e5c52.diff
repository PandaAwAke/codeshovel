diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
index b4e9a8f18..ecb3abbdb 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
@@ -258,102 +258,101 @@ public class JavadocMethodCheck extends AbstractTypeAwareCheck
     {
         return new int[] {TokenTypes.PACKAGE_DEF, TokenTypes.IMPORT,
                           TokenTypes.CLASS_DEF, TokenTypes.ENUM_DEF,
                           TokenTypes.METHOD_DEF, TokenTypes.CTOR_DEF,
                           TokenTypes.ANNOTATION_FIELD_DEF,
         };
     }
 
     /** {@inheritDoc} */
     @Override
     public int[] getAcceptableTokens()
     {
         return new int[] {TokenTypes.METHOD_DEF, TokenTypes.CTOR_DEF,
                           TokenTypes.ANNOTATION_FIELD_DEF,
         };
     }
 
     /**
      * Checks Javadoc comments for a method or constructor.
      *
      * @param aAST the tree node for the method or constructor.
      */
     @Override
     protected final void processAST(DetailAST aAST)
     {
         final Scope theScope = calculateScope(aAST);
         if (shouldCheck(aAST, theScope)) {
             final FileContents contents = getFileContents();
             final TextBlock cmt = contents.getJavadocBefore(aAST.getLineNo());
 
             if (cmt == null) {
                 if (!isMissingJavadocAllowed(aAST)) {
                     log(aAST, "javadoc.missing");
                 }
             }
             else {
                 checkComment(aAST, cmt, theScope);
             }
         }
     }
 
     /**
      * Logs error if unable to load class information.
      *
      * @param aIdent class name for which we can no load class.
      */
     @Override
     protected final void logLoadError(Token aIdent)
     {
         logLoadErrorImpl(aIdent.getLineNo(), aIdent.getColumnNo(),
-                         "javadoc.classInfo",
-                         new Object[] {"@throws", aIdent.getText()});
+                         "javadoc.classInfo", "@throws", aIdent.getText());
     }
 
     /**
      * The JavadocMethodCheck is about to report a missing Javadoc.
      * This hook can be used by derived classes to allow a missing javadoc
      * in some situations.  The default implementation checks
      * <code>allowMissingJavadoc</code> and
      * <code>allowMissingPropertyJavadoc</code> properties, do not forget
      * to call <code>super.isMissingJavadocAllowed(aAST)</code> in case
      * you want to keep this logic.
      * @param aAST the tree node for the method or constructor.
      * @return True if this method or constructor doesn't need Javadoc.
      */
     protected boolean isMissingJavadocAllowed(final DetailAST aAST)
     {
         return mAllowMissingJavadoc
             || (mAllowMissingPropertyJavadoc
                 && (isSetterMethod(aAST) || isGetterMethod(aAST)));
     }
 
     /**
      * Whether we should check this node.
      *
      * @param aAST a given node.
      * @param aScope the scope of the node.
      * @return whether we should check a given node.
      */
     private boolean shouldCheck(final DetailAST aAST, final Scope aScope)
     {
         final Scope surroundingScope = ScopeUtils.getSurroundingScope(aAST);
 
         return aScope.isIn(mScope)
                 && surroundingScope.isIn(mScope)
                 && ((mExcludeScope == null) || !aScope.isIn(mExcludeScope)
                     || !surroundingScope.isIn(mExcludeScope));
     }
 
     /**
      * Checks the Javadoc for a method.
      *
      * @param aAST the token for the method
      * @param aComment the Javadoc comment
      * @param aScope the scope of the method.
      */
     private void checkComment(DetailAST aAST, TextBlock aComment, Scope aScope)
     {
         final List<JavadocTag> tags = getMethodTags(aComment);
 
         if (hasShortCircuitTag(aAST, tags, aScope)) {
             return;
