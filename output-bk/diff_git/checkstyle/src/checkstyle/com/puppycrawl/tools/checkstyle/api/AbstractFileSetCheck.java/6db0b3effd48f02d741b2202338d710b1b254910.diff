diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
index 69334b4b3..a825e341c 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
@@ -111,66 +111,66 @@ public abstract class AbstractFileSetCheck
 
         mFileExtensions = new String[aExtensions.length];
         for (int i = 0; i < aExtensions.length; i++) {
             final String extension = aExtensions[i];
             if (extension.startsWith(".")) {
                 mFileExtensions[i] = extension;
             }
             else {
                 mFileExtensions[i] = "." + extension;
             }
         }
     }
 
     /**
      * Returns the collector for violation messages.
      * Subclasses can use the collector to find out the violation
      * messages to fire via the message dispatcher.
      *
      * @return the collector for localized messages.
      */
     protected final LocalizedMessages getMessageCollector()
     {
         return mMessages;
     }
 
     /**
      * Adds a violation message to the
      * {@link #getMessageCollector message collector}.
      * @see AbstractViolationReporter#log(int, String, Object[])
      */
     protected final void log(int aLine, String aKey, Object aArgs[])
     {
         log(aLine, 0, aKey, aArgs);
     }
 
     /**
      * Adds a violation message to the
      * {@link #getMessageCollector message collector}.
      * @see AbstractViolationReporter#log(int, int, String, Object[])
      */
     protected final void log(int aLineNo, int aColNo,
                              String aKey, Object[] aArgs)
     {
         getMessageCollector().add(
             new LocalizedMessage(aLineNo,
                                  aColNo,
                                  getMessageBundle(),
                                  aKey,
                                  aArgs,
                                  getSeverityLevel(),
-                                 this.getClass().getName()));
+                                 this.getClass()));
     }
 
     /**
      * Notify all listeners about the errors in a file.
      * Calls <code>MessageDispatcher.fireErrors()</code> with
      * all logged errors and than clears errors' list.
      * @param aFileName the audited file
      */
     protected final void fireErrors(String aFileName)
     {
         final LocalizedMessage[] errors = getMessageCollector().getMessages();
         getMessageCollector().reset();
         getMessageDispatcher().fireErrors(aFileName, errors);
     }
 }
