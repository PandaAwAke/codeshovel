diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
index 400d08b2a..c5f6b9217 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
@@ -525,145 +525,158 @@ public class JavadocMethodCheck
      * @param aLineNo the line number of the expected tag
      **/
     private void checkReturnTag(List aTags, int aLineNo)
     {
         // Loop over tags finding return tags. After the first one, report an
         // error.
         boolean found = false;
         final ListIterator it = aTags.listIterator();
         while (it.hasNext()) {
             final JavadocTag jt = (JavadocTag) it.next();
             if (jt.isReturnTag()) {
                 if (found) {
                     log(jt.getLineNo(), "javadoc.return.duplicate");
                 }
                 found = true;
                 it.remove();
             }
         }
 
         // Handle there being no @return tags :- unless
         // the user has chosen to suppress these problems
         if (!found && !mAllowMissingReturnTag) {
             log(aLineNo, "javadoc.return.expected");
         }
     }
 
 
     /**
      * Checks a set of tags for matching throws.
      * @param aTags the tags to check
      * @param aThrows the throws to check
      **/
     private void checkThrowsTags(List aTags, List aThrows)
     {
         // Loop over the tags, checking to see they exist in the throws.
         final Set foundThrows = new HashSet(); //used for performance only
         final ListIterator tagIt = aTags.listIterator();
         while (tagIt.hasNext()) {
             final JavadocTag tag = (JavadocTag) tagIt.next();
 
             if (!tag.isThrowsTag()) {
                 continue;
             }
 
             tagIt.remove();
 
             // Loop looking for matching throw
             final String documentedEx = tag.getArg1();
             boolean found = foundThrows.contains(documentedEx);
             Class documentedClass = null;
-            if (!found
-                && (mAllowThrowsTagsForSubclasses || mAllowUndeclaredRTE))
-            {
-                documentedClass = resolveClass(documentedEx);
-                if (documentedClass == null) {
-                    log(tag.getLineNo(), "javadoc.classInfo",
-                        "@throws", documentedEx);
-                }
-            }
+            boolean classLoaded = false;
 
             final ListIterator throwIt = aThrows.listIterator();
             while (!found && throwIt.hasNext()) {
                 final ExceptionInfo ei = (ExceptionInfo) throwIt.next();
                 final FullIdent fi = ei.getName();
                 final String declaredEx = fi.getText();
                 if (isSameType(declaredEx, documentedEx)) {
                     found = true;
                     ei.setFound();
                     foundThrows.add(documentedEx);
                 }
-                else if (mAllowThrowsTagsForSubclasses
-                         && documentedClass != null)
-                {
-                    if (ei.isLoadable() && ei.getClazz() == null) {
-                        // if the class is not loaded yet.
-                        // try to load it.
-                        ei.setClazz(resolveClass(declaredEx));
-                        if (!ei.isLoadable()) {
-                            log(fi.getLineNo(), "javadoc.classInfo",
-                                "@throws", declaredEx);
-                        }
+                else if (mAllowThrowsTagsForSubclasses) {
+                    if (!classLoaded) {
+                        documentedClass = loadClassForTag(tag);
+                        classLoaded = true;
                     }
-
                     found = isSubclass(documentedClass, ei.getClazz());
                     if (found) {
                         ei.setFound();
                     }
                 }
             }
 
             // Handle extra JavadocTag.
             if (!found) {
                 boolean reqd = true;
-                if (mAllowUndeclaredRTE && documentedClass != null) {
+                if (mAllowUndeclaredRTE) {
+                    if (!classLoaded) {
+                        documentedClass = loadClassForTag(tag);
+                        classLoaded = true;
+                    }
                     reqd = !isUnchecked(documentedClass);
                 }
 
                 if (reqd) {
                     log(tag.getLineNo(), "javadoc.unusedTag",
                                   "@throws", tag.getArg1());
                 }
             }
         }
 
         // Now dump out all throws without tags :- unless
         // the user has chosen to suppress these problems
         if (!mAllowMissingThrowsTags) {
             final ListIterator throwIt = aThrows.listIterator();
             while (throwIt.hasNext()) {
                 final ExceptionInfo ei = (ExceptionInfo) throwIt.next();
                 if (!ei.isFound()) {
                     final FullIdent fi = ei.getName();
                     log(fi.getLineNo(), fi.getColumnNo(),
                         "javadoc.expectedTag", "@throws", fi.getText());
                 }
             }
         }
     }
 
+    /**
+     * Tries to load class for throws tag. Logs error if unable.
+     * @param aTag name of class which we try to load.
+     * @return <code>Class</code> for the tag.
+     */
+    private Class loadClassForTag(JavadocTag aTag)
+    {
+        Class clazz = resolveClass(aTag.getArg1());
+        if (clazz == null) {
+            log(aTag.getLineNo(), "javadoc.classInfo",
+                "@throws", aTag.getArg1());
+        }
+        return clazz;
+    }
+
+    /**
+     * Logs error if unable to load class information.
+     * @param aIdent class name for which we can no load class.
+     */
+    protected final void logLoadError(FullIdent aIdent)
+    {
+        log(aIdent.getLineNo(), "javadoc.classInfo", "@throws",
+            aIdent.getText());
+    }
+
     /** Stores useful information about declared exception. */
-    static class ExceptionInfo extends ClassInfo
+    class ExceptionInfo extends ClassInfo
     {
         /** does the exception have throws tag associated with. */
         private boolean mFound;
 
         /**
          * Creates new instance for <code>FullIdent</code>.
          * @param aIdent <code>FullIdent</code> of the exception
          */
         ExceptionInfo(FullIdent aIdent)
         {
             super(aIdent);
         }
         /** Mark that the exception has associated throws tag */
         final void setFound()
         {
             mFound = true;
         }
         /** @return whether the exception has throws tag associated with */
         final boolean isFound()
         {
             return mFound;
         }
     }
 }
