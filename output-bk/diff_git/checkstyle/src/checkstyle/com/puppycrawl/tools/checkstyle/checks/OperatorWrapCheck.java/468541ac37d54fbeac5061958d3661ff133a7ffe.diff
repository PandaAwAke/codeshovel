diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/OperatorWrapCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/OperatorWrapCheck.java
index 9eaf25d5c..362d34284 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/OperatorWrapCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/OperatorWrapCheck.java
@@ -30,83 +30,81 @@ import com.puppycrawl.tools.checkstyle.api.Utils;
  * @version 1.0
  */
 public class OperatorWrapCheck
     extends AbstractOptionCheck
 {
     /**
      * Sets the operator wrap otion to new line.
      */  
     public OperatorWrapCheck()
     {
         super(OperatorWrapOption.NL);
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.QUESTION,          // '?'
             TokenTypes.COLON,             // ':' (not reported for a case)
             TokenTypes.ASSIGN,            // '='
             TokenTypes.EQUAL,             // "=="
             TokenTypes.NOT_EQUAL,         // "!="
             TokenTypes.DIV,               // '/'
             TokenTypes.DIV_ASSIGN,        // "/="
             TokenTypes.PLUS,              //' +' (unary plus is UNARY_PLUS)
             TokenTypes.PLUS_ASSIGN,       // "+="
             TokenTypes.MINUS,             // '-' (unary minus is UNARY_MINUS)
             TokenTypes.MINUS_ASSIGN,      //"-="
             TokenTypes.STAR,              // '*'
             TokenTypes.STAR_ASSIGN,       // "*="
             TokenTypes.MOD,               // '%'
             TokenTypes.MOD_ASSIGN,        // "%="
             TokenTypes.SR,                // ">>"
             TokenTypes.SR_ASSIGN,         // ">>="
             TokenTypes.BSR,               // ">>>"
             TokenTypes.BSR_ASSIGN,        // ">>>="
             TokenTypes.GE,                // ">="
             TokenTypes.GT,                // ">"
             TokenTypes.SL,                // "<<"
             TokenTypes.SL_ASSIGN,         // "<<="
             TokenTypes.LE,                // "<="
             TokenTypes.LT,                // '<'
             TokenTypes.BXOR,              // '^'
             TokenTypes.BXOR_ASSIGN,       // "^="
             TokenTypes.BOR,               // '|'
             TokenTypes.BOR_ASSIGN,        // "|="
             TokenTypes.LOR,               // "||"
             TokenTypes.BAND,              // '&'
             TokenTypes.BAND_ASSIGN,       // "&="
             TokenTypes.LAND,              // "&&"
+            TokenTypes.LITERAL_INSTANCEOF,
         };
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void visitToken(DetailAST aAST)
     {
         final AbstractOption wOp = getAbstractOption();
 
-        if (wOp != OperatorWrapOption.NL.IGNORE) {
-            final String text = aAST.getText();
-            final int colNo = aAST.getColumnNo();
-            final int lineNo = aAST.getLineNo();
-            // TODO: Handle comments before and after operator
-            // Check if rest of line is whitespace, and not just the operator
-            // by itself. This last bit is to handle the operator on a line by
-            // itself.
-            if (wOp == OperatorWrapOption.NL
-                && !text.equals(getLines()[lineNo - 1].trim())
-                && (getLines()[lineNo - 1].substring(colNo + text.length())
-                    .trim().length() == 0))
-            {
-                log(lineNo, colNo, "line.new", text);
-            }
-            else if (wOp == OperatorWrapOption.EOL
-                      && Utils.whitespaceBefore(colNo - 1,
-                                               getLines()[lineNo - 1]))
-            {
-                log(lineNo, colNo, "line.previous", text);
-            }
+        final String text = aAST.getText();
+        final int colNo = aAST.getColumnNo();
+        final int lineNo = aAST.getLineNo();
+        final String currentLine = getLines()[lineNo - 1];
+        // TODO: Handle comments before and after operator
+        // Check if rest of line is whitespace, and not just the operator
+        // by itself. This last bit is to handle the operator on a line by
+        // itself.
+        if (wOp == OperatorWrapOption.NL
+            && !text.equals(currentLine.trim())
+            && (currentLine.substring(colNo + text.length())
+                .trim().length() == 0))
+        {
+            log(lineNo, colNo, "line.new", text);
+        }
+        else if (wOp == OperatorWrapOption.EOL
+                  && Utils.whitespaceBefore(colNo - 1, currentLine))
+        {
+            log(lineNo, colNo, "line.previous", text);
         }
-
     }
 }
