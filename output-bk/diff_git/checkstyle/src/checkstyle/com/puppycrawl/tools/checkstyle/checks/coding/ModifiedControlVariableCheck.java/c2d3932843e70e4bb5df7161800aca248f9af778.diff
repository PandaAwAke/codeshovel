diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java
index e0973bccd..aad3845b4 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java
@@ -127,105 +127,105 @@ public final class ModifiedControlVariableCheck extends Check
             break;
         case TokenTypes.OBJBLOCK:
             exitBlock();
             break;
         case TokenTypes.ASSIGN:
         case TokenTypes.PLUS_ASSIGN:
         case TokenTypes.MINUS_ASSIGN:
         case TokenTypes.STAR_ASSIGN:
         case TokenTypes.DIV_ASSIGN:
         case TokenTypes.MOD_ASSIGN:
         case TokenTypes.SR_ASSIGN:
         case TokenTypes.BSR_ASSIGN:
         case TokenTypes.SL_ASSIGN:
         case TokenTypes.BAND_ASSIGN:
         case TokenTypes.BXOR_ASSIGN:
         case TokenTypes.BOR_ASSIGN:
         case TokenTypes.INC:
         case TokenTypes.POST_INC:
         case TokenTypes.DEC:
         case TokenTypes.POST_DEC:
             // Do nothing
             break;
         default:
             throw new IllegalStateException(aAST.toString());
         }
     }
 
     /**
      * Enters an inner class, which requires a new variable set.
      */
     private void enterBlock()
     {
         mVariableStack.push(mCurrentVariables);
         mCurrentVariables = new Stack();
 
     }
     /**
      * Leave an inner class, so restore variable set.
      */
     private void exitBlock()
     {
         mCurrentVariables = (Stack) mVariableStack.pop();
     }
 
     /**
      * Check if ident is parameter.
      * @param aAST ident to check.
      */
     private void checkIdent(DetailAST aAST)
     {
-        if (mCurrentVariables != null && !mCurrentVariables.isEmpty()) {
+        if ((mCurrentVariables != null) && !mCurrentVariables.isEmpty()) {
             final DetailAST identAST = (DetailAST) aAST.getFirstChild();
 
-            if (identAST != null
-                && identAST.getType() == TokenTypes.IDENT
+            if ((identAST != null)
+                && (identAST.getType() == TokenTypes.IDENT)
                 && mCurrentVariables.contains(identAST.getText()))
             {
                 log(aAST.getLineNo(), aAST.getColumnNo(),
                     "modified.control.variable", identAST.getText());
             }
         }
     }
 
     /**
      * Push current variables to the stack.
      * @param aAST a for definition.
      */
     private void leaveForIter(DetailAST aAST)
     {
         final DetailAST forInitAST = aAST.findFirstToken(TokenTypes.FOR_INIT);
         DetailAST parameterDefAST =
             forInitAST.findFirstToken(TokenTypes.VARIABLE_DEF);
 
         for (; parameterDefAST != null;
              parameterDefAST = (DetailAST) parameterDefAST.getNextSibling())
         {
             if (parameterDefAST.getType() == TokenTypes.VARIABLE_DEF) {
                 final DetailAST param =
                     parameterDefAST.findFirstToken(TokenTypes.IDENT);
                 mCurrentVariables.push(param.getText());
             }
         }
     }
 
     /**
      * Push current variables to the stack.
      * @param aForEach a for-each clause
      */
     private void leaveForEach(DetailAST aForEach)
     {
         final DetailAST paramDef =
             aForEach.findFirstToken(TokenTypes.VARIABLE_DEF);
         final DetailAST paramName = paramDef.findFirstToken(TokenTypes.IDENT);
         mCurrentVariables.push(paramName.getText());
     }
 
     /**
      * Pops the variables from the stack.
      * @param aAST a for definition.
      */
     private void leaveForDef(DetailAST aAST)
     {
         final DetailAST forInitAST = aAST.findFirstToken(TokenTypes.FOR_INIT);
         if (forInitAST != null) {
             DetailAST parameterDefAST =
