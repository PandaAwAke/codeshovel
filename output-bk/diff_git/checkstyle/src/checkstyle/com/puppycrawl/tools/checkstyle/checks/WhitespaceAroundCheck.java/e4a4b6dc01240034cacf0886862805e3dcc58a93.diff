diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java
index 55a09e127..7fd5639a1 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java
@@ -65,63 +65,67 @@ public class WhitespaceAroundCheck
             TokenTypes.BXOR_ASSIGN,       // "^="
             TokenTypes.BOR,               // '|'
             TokenTypes.BOR_ASSIGN,        // "|="
             TokenTypes.LOR,               // "||"
             TokenTypes.BAND,              // '&'
             TokenTypes.BAND_ASSIGN,       // "&="
             TokenTypes.LAND,              // "&&"
             TokenTypes.LITERAL_CATCH,
             TokenTypes.LITERAL_DO,
             TokenTypes.LITERAL_ELSE,
             TokenTypes.LITERAL_FINALLY,
             TokenTypes.LITERAL_FOR,
             TokenTypes.LITERAL_IF,
             TokenTypes.LITERAL_RETURN,
             TokenTypes.LITERAL_SYNCHRONIZED,
             TokenTypes.LITERAL_TRY,
             TokenTypes.LITERAL_WHILE,
             TokenTypes.ASSERT     // TODO: why is it not LITERAL_assert?
                                   // maybe it's a bug in the grammar?
         };
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void visitToken(DetailAST aAST)
     {
         // Check for RCURLY in array initializer
         if ((aAST.getType() == TokenTypes.RCURLY)
             && (aAST.getParent().getType() == TokenTypes.ARRAY_INIT))
         {
             return;
         }
 
         // Check for import pkg.name.*;
         if ((aAST.getType() == TokenTypes.STAR)
             && (aAST.getParent().getType() == TokenTypes.DOT))
         {
             return;
         }
         
         final String[] lines = getLines();
         final String line = lines[aAST.getLineNo() - 1];
         final int before = aAST.getColumnNo() - 1;
         final int after = aAST.getColumnNo() + aAST.getText().length();
 
         if ((before >= 0) && !Character.isWhitespace(line.charAt(before))) {
             log(aAST.getLineNo(), aAST.getColumnNo(),
                     "ws.notPreceeded", new Object[]{aAST.getText()});
         }
 
         if ((after < line.length())
-            && !Character.isWhitespace(line.charAt(after))
-            // Check for "return;"
+            && !Character.isWhitespace(
+                line.charAt(after)) // Check for "return;"
             && !((aAST.getType() == TokenTypes.LITERAL_RETURN)
                 && (aAST.getFirstChild().getType() == TokenTypes.SEMI))
-            // Check for "})". Happens with anon-inners
+            // Check for "})" or "};". Happens with anon-inners
             && !((aAST.getType() == TokenTypes.RCURLY)
-                && (line.charAt(after) == ')')))
+                && ((line.charAt(after) == ')')
+                    || (line.charAt(after) == ';'))))
         {
-            log(aAST.getLineNo(), aAST.getColumnNo() + aAST.getText().length(),
-                    "ws.notFollowed", new Object[]{aAST.getText()});
+            log(
+                aAST.getLineNo(),
+                aAST.getColumnNo() + aAST.getText().length(),
+                "ws.notFollowed",
+                new Object[] { aAST.getText()});
         }
     }
 }
