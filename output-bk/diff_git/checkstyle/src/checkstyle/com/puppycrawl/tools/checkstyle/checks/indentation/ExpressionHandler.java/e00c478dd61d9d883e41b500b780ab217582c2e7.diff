diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java
index c15527135..16ee2bb6a 100755
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java
@@ -181,176 +181,178 @@ public abstract class ExpressionHandler
      * which represents first symbol for this sub-tree in file.
      * @param aAST a root of sub-tree in which the search shoul be performed.
      * @return a token which occurs first in the file.
      */
     static DetailAST getFirstToken(DetailAST aAST)
     {
         DetailAST first = aAST;
         DetailAST child = aAST.getFirstChild();
 
         while (child != null) {
             final DetailAST toTest = getFirstToken(child);
             if ((toTest.getLineNo() < first.getLineNo())
                 || ((toTest.getLineNo() == first.getLineNo())
                     && (toTest.getColumnNo() < first.getColumnNo())))
             {
                 first = toTest;
             }
             child = child.getNextSibling();
         }
 
         return first;
     }
 
     /**
      * Get the start of the line for the given expression.
      *
      * @param aAst   the expression to find the start of the line for
      *
      * @return the start of the line for the given expression
      */
     protected final int getLineStart(DetailAST aAst)
     {
         final String line = mIndentCheck.getLines()[aAst.getLineNo() - 1];
         return getLineStart(line);
     }
 
     // TODO: this whole checking of consecuitive/expression line indents is
     // smelling pretty bad... and is in serious need of pruning.  But, I
     // want to finish the invalid tests before I start messing around with
     // it.
 
     /**
      * Check the indentation of consecutive lines for the expression we are
      * handling.
      *
      * @param aStartLine     the first line to check
      * @param aEndLine       the last line to check
      * @param aIndentLevel   the required indent level
      */
     protected final void checkLinesIndent(int aStartLine, int aEndLine,
-                                          IndentLevel aIndentLevel)
+        IndentLevel aIndentLevel)
     {
         // check first line
         checkSingleLine(aStartLine, aIndentLevel);
 
         // check following lines
-        aIndentLevel = new IndentLevel(aIndentLevel, getBasicOffset());
+        final IndentLevel offsetLevel =
+            new IndentLevel(aIndentLevel, getBasicOffset());
         for (int i = aStartLine + 1; i <= aEndLine; i++) {
-            checkSingleLine(i, aIndentLevel);
+            checkSingleLine(i, offsetLevel);
         }
     }
 
     /**
      * @return true if indentation should be increased after
      *              fisrt line in checkLinesIndent()
      *         false otherwise
      */
     protected boolean shouldIncreaseIndent()
     {
         return true;
     }
 
     /**
      * Check the indentation for a set of lines.
      *
      * @param aLines              the set of lines to check
      * @param aIndentLevel        the indentation level
      * @param aFirstLineMatches   whether or not the first line has to match
      * @param aFirstLine          firstline of whole expression
      */
     private void checkLinesIndent(LineSet aLines,
                                   IndentLevel aIndentLevel,
                                   boolean aFirstLineMatches,
                                   int aFirstLine)
     {
         if (aLines.isEmpty()) {
             return;
         }
 
         // check first line
         final int startLine = aLines.firstLine();
         final int endLine = aLines.lastLine();
         final int startCol = aLines.firstLineCol();
 
         final int realStartCol =
             getLineStart(mIndentCheck.getLines()[startLine - 1]);
 
         if (realStartCol == startCol) {
             checkSingleLine(startLine, startCol, aIndentLevel,
                 aFirstLineMatches);
         }
 
         // if first line starts the line, following lines are indented
         // one level; but if the first line of this expression is
         // nested with the previous expression (which is assumed if it
         // doesn't start the line) then don't indent more, the first
         // indentation is absorbed by the nesting
 
         // TODO: shouldIncreaseIndent() is a hack, should be removed
         //       after complete rewriting of checkExpressionSubtree()
 
+        IndentLevel theLevel = aIndentLevel;
         if (aFirstLineMatches
             || ((aFirstLine > mMainAst.getLineNo()) && shouldIncreaseIndent()))
         {
-            aIndentLevel = new IndentLevel(aIndentLevel, getBasicOffset());
+            theLevel = new IndentLevel(aIndentLevel, getBasicOffset());
         }
 
         // check following lines
         for (int i = startLine + 1; i <= endLine; i++) {
             final Integer col = aLines.getStartColumn(i);
             // startCol could be null if this line didn't have an
             // expression that was required to be checked (it could be
             // checked by a child expression)
 
             if (col != null) {
-                checkSingleLine(i, col.intValue(), aIndentLevel, false);
+                checkSingleLine(i, col.intValue(), theLevel, false);
             }
         }
     }
 
     /**
      * Check the indent level for a single line.
      *
      * @param aLineNum       the line number to check
      * @param aIndentLevel   the required indent level
      */
     private void checkSingleLine(int aLineNum, IndentLevel aIndentLevel)
     {
         final String line = mIndentCheck.getLines()[aLineNum - 1];
         final int start = getLineStart(line);
         if (aIndentLevel.gt(start)) {
             logChildError(aLineNum, start, aIndentLevel);
         }
     }
 
     /**
      * Check the indentation for a single line.
      *
      * @param aLineNum       the number of the line to check
      * @param aColNum        the column number we are starting at
      * @param aIndentLevel   the indentation level
      * @param aMustMatch     whether or not the indentation level must match
      */
 
     private void checkSingleLine(int aLineNum, int aColNum,
         IndentLevel aIndentLevel, boolean aMustMatch)
     {
         final String line = mIndentCheck.getLines()[aLineNum - 1];
         final int start = getLineStart(line);
         // if must match is set, it is an error if the line start is not
         // at the correct indention level; otherwise, it is an only an
         // error if this statement starts the line and it is less than
         // the correct indentation level
         if (aMustMatch ? !aIndentLevel.accept(start)
             : (aColNum == start) && aIndentLevel.gt(start))
         {
             logChildError(aLineNum, start, aIndentLevel);
         }
     }
 
     /**
      * Get the start of the specified line.
      *
      * @param aLine   the specified line number
      *
      * @return the start of the specified line
@@ -392,115 +394,115 @@ public abstract class ExpressionHandler
         for (DetailAST child = aParent.getFirstChild();
                 child != null;
                 child = child.getNextSibling())
         {
             if (Arrays.binarySearch(aTokenTypes, child.getType()) >= 0) {
                 checkExpressionSubtree(child, aStartLevel,
                     aFirstLineMatches, aAllowNesting);
             }
         }
     }
 
     /**
      * Check the indentation level for an expression subtree.
      *
      * @param aTree               the expression subtree to check
      * @param aLevel              the indentation level
      * @param aFirstLineMatches   whether or not the first line has to match
      * @param aAllowNesting       whether or not subtree nesting is allowed
      */
     protected final void checkExpressionSubtree(
         DetailAST aTree,
         IndentLevel aLevel,
         boolean aFirstLineMatches,
         boolean aAllowNesting
     )
     {
         final LineSet subtreeLines = new LineSet();
         final int firstLine = getFirstLine(Integer.MAX_VALUE, aTree);
         if (aFirstLineMatches && !aAllowNesting) {
             subtreeLines.addLineAndCol(firstLine,
                 getLineStart(mIndentCheck.getLines()[firstLine - 1]));
         }
         findSubtreeLines(subtreeLines, aTree, aAllowNesting);
 
         checkLinesIndent(subtreeLines, aLevel, aFirstLineMatches, firstLine);
     }
 
     /**
      * Get the first line for a given expression.
      *
      * @param aStartLine   the line we are starting from
      * @param aTree        the expression to find the first line for
      *
      * @return the first line of the expression
      */
     protected final int getFirstLine(int aStartLine, DetailAST aTree)
     {
         // find line for this node
         // TODO: getLineNo should probably not return < 0, but it is for
         // the interface methods... I should ask about this
-
+        int realStart = aStartLine;
         final int currLine = aTree.getLineNo();
-        if (currLine < aStartLine) {
-            aStartLine = currLine;
+        if (currLine < realStart) {
+            realStart = currLine;
         }
 
         // check children
         for (DetailAST node = aTree.getFirstChild();
             node != null;
             node = node.getNextSibling())
         {
-            aStartLine = getFirstLine(aStartLine, node);
+            realStart = getFirstLine(realStart, node);
         }
 
-        return aStartLine;
+        return realStart;
     }
 
     /**
      * Get the column number for the start of a given expression, expanding
      * tabs out into spaces in the process.
      *
      * @param aAST   the expression to find the start of
      *
      * @return the column number for the start of the expression
      */
     protected final int expandedTabsColumnNo(DetailAST aAST)
     {
         final String line =
             mIndentCheck.getLines()[aAST.getLineNo() - 1];
 
         return Utils.lengthExpandedTabs(line, aAST.getColumnNo(),
             mIndentCheck.getIndentationTabWidth());
     }
 
     /**
      * Find the set of lines for a given subtree.
      *
      * @param aLines          the set of lines to add to
      * @param aTree           the subtree to examine
      * @param aAllowNesting   whether or not to allow nested subtrees
      */
     protected final void findSubtreeLines(LineSet aLines, DetailAST aTree,
         boolean aAllowNesting)
     {
         // find line for this node
         // TODO: getLineNo should probably not return < 0, but it is for
         // the interface methods... I should ask about this
 
         if (getIndentCheck().getHandlerFactory().isHandledType(aTree.getType())
             || (aTree.getLineNo() < 0))
         {
             return;
         }
 
         // TODO: the problem with this is that not all tree tokens actually
         // have the right column number -- I should get a list of these
         // and verify that checking nesting this way won't cause problems
 //          if (aAllowNesting && aTree.getColumnNo() != getLineStart(aTree)) {
 //              return;
 //          }
 
         final int lineNum = aTree.getLineNo();
         final Integer colNum = aLines.getStartColumn(lineNum);
 
         final int thisLineColumn = expandedTabsColumnNo(aTree);
