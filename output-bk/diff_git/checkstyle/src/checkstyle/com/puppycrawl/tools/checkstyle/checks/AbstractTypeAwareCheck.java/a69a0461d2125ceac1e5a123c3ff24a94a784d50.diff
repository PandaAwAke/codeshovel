diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
index f974d8a1d..e87cb018f 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
@@ -44,102 +44,108 @@ public abstract class AbstractTypeAwareCheck
     /** full identifier for package of the method **/
     private FullIdent mPackageFullIdent;
 
     /** Name of current class. */
     private String mCurrentClass;
 
     /** <code>ClassResolver</code> instance for current tree. */
     private ClassResolver mClassResolver;
 
     /**
      * Called to process an AST when visiting it.
      * @param aAST the AST to process. Guaranteed to not be PACKAGE_DEF or
      *             IMPORT tokens.
      */
     protected abstract void processAST(DetailAST aAST);
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void beginTree(DetailAST aRootAST)
     {
         mPackageFullIdent = FullIdent.createFullIdent(null);
         mImports.clear();
         // add java.lang.* since it's always imported
         mImports.add("java.lang.*");
         mClassResolver = null;
         mCurrentClass = "";
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public final void visitToken(DetailAST aAST)
     {
         if (aAST.getType() == TokenTypes.PACKAGE_DEF) {
             processPackage(aAST);
         }
         else if (aAST.getType() == TokenTypes.IMPORT) {
             processImport(aAST);
         }
         else if (aAST.getType() == TokenTypes.CLASS_DEF
                  || aAST.getType() == TokenTypes.ENUM_DEF)
         {
             processClass(aAST);
         }
         else {
             processAST(aAST);
         }
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public final void leaveToken(DetailAST aAST)
     {
         if (aAST.getType() == TokenTypes.CLASS_DEF) {
-            int dotIdx = mCurrentClass.lastIndexOf(".");
+            // perhaps it was inner class
+            int dotIdx = mCurrentClass.lastIndexOf("$");
             if (dotIdx == -1) {
+                // perhaps just a class
+                dotIdx = mCurrentClass.lastIndexOf(".");
+            }
+            if (dotIdx == -1) {
+                // looks like a topmost class
                 mCurrentClass = "";
             }
             else {
                 mCurrentClass = mCurrentClass.substring(0, dotIdx);
             }
         }
     }
 
     /**
      * Calculate if one type name is a shortname for another type name.
      * @param aShortName a shorthand, such as <code>IOException</code>
      * @param aFullName a full name, such as <code>java.io.IOException</code>
      * @return true iff aShortName represents the same type as aFullName
      */
     protected boolean isShortName(String aShortName, String aFullName)
     {
         if (aShortName.length() >= aFullName.length()) {
             return false;
         }
 
         final String base = Utils.baseClassname(aFullName);
         if (aShortName.length() >= aFullName.length()
                 || !base.equals(aShortName))
         {
             return false;
         }
 
         // check fully qualified import
         if (mImports.contains(aFullName)) {
             return true;
         }
 
         // check .* import
         final int endIndex = aFullName.length() - base.length() - 1;
         final String packageName = aFullName.substring(0, endIndex);
         final String starImport = packageName + ".*";
         if (mImports.contains(starImport)) {
             return true;
         }
 
         // check fully qualified class from same package
         return packageName.equals(mPackageFullIdent.getText());
     }
 
     /**
      * Is exception is unchecked (subclass of <code>RuntimeException</code>
      * or <code>Error</code>
      *
      * @param aException <code>Class</code> of exception to check
      * @return true  if exception is unchecked
