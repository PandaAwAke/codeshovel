diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
index 554da78be..4f8e11889 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
@@ -198,101 +198,101 @@ public final class LocalizedMessage
      * @param aModuleId the id of the module the message is associated with
      * @param aSourceClass the source class for the message
      */
     public LocalizedMessage(int aLineNo,
                             String aBundle,
                             String aKey,
                             Object[] aArgs,
                             SeverityLevel aSeverityLevel,
                             String aModuleId,
                             Class aSourceClass)
     {
         this(aLineNo, 0, aBundle, aKey, aArgs, aSeverityLevel, aModuleId,
                 aSourceClass);
     }
 
     /**
      * Creates a new <code>LocalizedMessage</code> instance. The column number
      * defaults to 0.
      *
      * @param aLineNo line number associated with the message
      * @param aBundle name of a resource bundle that contains error messages
      * @param aKey the key to locate the translation
      * @param aArgs arguments for the translation
      * @param aModuleId the id of the module the message is associated with
      * @param aSourceClass the name of the source for the message
      */
     public LocalizedMessage(
         int aLineNo,
         String aBundle,
         String aKey,
         Object[] aArgs,
         String aModuleId,
         Class aSourceClass)
     {
         this(aLineNo, 0, aBundle, aKey, aArgs, DEFAULT_SEVERITY, aModuleId,
                 aSourceClass);
     }
 
     /** @return the translated message **/
     public String getMessage()
     {
         try {
             // Important to use the default class loader, and not the one in
             // the GlobalProperties object. This is because the class loader in
             // the GlobalProperties is specified by the user for resolving
             // custom classes.
             final ResourceBundle bundle = getBundle(mBundle);
             final String pattern = bundle.getString(mKey);
             return MessageFormat.format(pattern, mArgs);
         }
-        catch (MissingResourceException ex) {
+        catch (final MissingResourceException ex) {
             // If the Check author didn't provide i18n resource bundles
             // and logs error messages directly, this will return
             // the author's original message
             return MessageFormat.format(mKey, mArgs);
         }
     }
 
     /**
      * Find a ResourceBundle for a given bundle name. Uses the classloader
      * of the class emitting this message, to be sure to get the correct
      * bundle.
      * @param aBundleName the bundle name
      * @return a ResourceBundle
      */
     private ResourceBundle getBundle(String aBundleName)
     {
         synchronized (BUNDLE_CACHE) {
             ResourceBundle bundle = (ResourceBundle) BUNDLE_CACHE
                     .get(aBundleName);
             if (bundle == null) {
                 bundle = ResourceBundle.getBundle(aBundleName, sLocale,
                         mSourceClass.getClassLoader());
                 BUNDLE_CACHE.put(aBundleName, bundle);
             }
             return bundle;
         }
     }
 
     /** @return the line number **/
     public int getLineNo()
     {
         return mLineNo;
     }
 
     /** @return the column number **/
     public int getColumnNo()
     {
         return mColNo;
     }
 
     /** @return the severity level **/
     public SeverityLevel getSeverityLevel()
     {
         return mSeverityLevel;
     }
 
     /** @return the module identifier. */
     public String getModuleId()
     {
         return mModuleId;
