diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java
index 074b94c8f..aa1be3093 100755
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java
@@ -1,210 +1,209 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2008  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.metrics;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
+import com.puppycrawl.tools.checkstyle.api.FastStack;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
-import java.util.Stack;
 
 /**
  * This check calculates the Non Commenting Source Statements (NCSS) metric for
  * java source files and methods. The check adheres to the <a
  * href="http://www.kclee.com/clemens/java/javancss/">JavaNCSS specification
  * </a> and gives the same results as the JavaNCSS tool.
  *
  * The NCSS-metric tries to determine complexity of methods, classes and files
  * by counting the non commenting lines. Roughly said this is (nearly)
  * equivalent to counting the semicolons and opening curly braces.
  *
  * @author Lars Kï¿½dderitzsch
  */
 public class JavaNCSSCheck extends Check
 {
     /** default constant for max file ncss */
     private static final int FILE_MAX_NCSS = 2000;
 
     /** default constant for max file ncss */
     private static final int CLASS_MAX_NCSS = 1500;
 
     /** default constant for max method ncss */
     private static final int METHOD_MAX_NCSS = 50;
 
     /** maximum ncss for a complete source file */
     private int mFileMax = FILE_MAX_NCSS;
 
     /** maximum ncss for a class */
     private int mClassMax = CLASS_MAX_NCSS;
 
     /** maximum ncss for a method */
     private int mMethodMax = METHOD_MAX_NCSS;
 
     /** list containing the stacked counters */
-    private Stack<Counter> mCounters;
+    private FastStack<Counter> mCounters;
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[]{
             TokenTypes.CLASS_DEF,
             TokenTypes.INTERFACE_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.CTOR_DEF,
             TokenTypes.INSTANCE_INIT,
             TokenTypes.STATIC_INIT,
             TokenTypes.PACKAGE_DEF,
             TokenTypes.IMPORT,
             TokenTypes.VARIABLE_DEF,
             TokenTypes.CTOR_CALL,
             TokenTypes.SUPER_CTOR_CALL,
             TokenTypes.LITERAL_IF,
             TokenTypes.LITERAL_ELSE,
             TokenTypes.LITERAL_WHILE,
             TokenTypes.LITERAL_DO,
             TokenTypes.LITERAL_FOR,
             TokenTypes.LITERAL_SWITCH,
             TokenTypes.LITERAL_BREAK,
             TokenTypes.LITERAL_CONTINUE,
             TokenTypes.LITERAL_RETURN,
             TokenTypes.LITERAL_THROW,
             TokenTypes.LITERAL_SYNCHRONIZED,
             TokenTypes.LITERAL_CATCH,
             TokenTypes.LITERAL_FINALLY,
             TokenTypes.EXPR,
             TokenTypes.LABELED_STAT,
             TokenTypes.LITERAL_CASE,
             TokenTypes.LITERAL_DEFAULT,
         };
     }
 
     @Override
     public int[] getRequiredTokens()
     {
         return new int[]{
             TokenTypes.CLASS_DEF,
             TokenTypes.INTERFACE_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.CTOR_DEF,
             TokenTypes.INSTANCE_INIT,
             TokenTypes.STATIC_INIT,
             TokenTypes.PACKAGE_DEF,
             TokenTypes.IMPORT,
             TokenTypes.VARIABLE_DEF,
             TokenTypes.CTOR_CALL,
             TokenTypes.SUPER_CTOR_CALL,
             TokenTypes.LITERAL_IF,
             TokenTypes.LITERAL_ELSE,
             TokenTypes.LITERAL_WHILE,
             TokenTypes.LITERAL_DO,
             TokenTypes.LITERAL_FOR,
             TokenTypes.LITERAL_SWITCH,
             TokenTypes.LITERAL_BREAK,
             TokenTypes.LITERAL_CONTINUE,
             TokenTypes.LITERAL_RETURN,
             TokenTypes.LITERAL_THROW,
             TokenTypes.LITERAL_SYNCHRONIZED,
             TokenTypes.LITERAL_CATCH,
             TokenTypes.LITERAL_FINALLY,
             TokenTypes.EXPR,
             TokenTypes.LABELED_STAT,
             TokenTypes.LITERAL_CASE,
             TokenTypes.LITERAL_DEFAULT,
         };
     }
 
     @Override
     public void beginTree(DetailAST aRootAST)
     {
-        mCounters = new Stack<Counter>();
+        mCounters = new FastStack<Counter>();
 
         //add a counter for the file
         mCounters.push(new Counter());
     }
 
     @Override
     public void visitToken(DetailAST aAST)
     {
         final int tokenType = aAST.getType();
 
         if ((TokenTypes.CLASS_DEF == tokenType)
             || (TokenTypes.METHOD_DEF == tokenType)
             || (TokenTypes.CTOR_DEF == tokenType)
             || (TokenTypes.STATIC_INIT == tokenType)
             || (TokenTypes.INSTANCE_INIT == tokenType))
         {
             //add a counter for this class/method
             mCounters.push(new Counter());
         }
 
         //check if token is countable
         if (isCountable(aAST)) {
             //increment the stacked counters
-            final int size = mCounters.size();
-            for (int i = 0; i < size; i++) {
-                (mCounters.get(i)).increment();
+            for (final Counter c : mCounters) {
+                c.increment();
             }
         }
     }
 
     @Override
     public void leaveToken(DetailAST aAST)
     {
         final int tokenType = aAST.getType();
         if ((TokenTypes.METHOD_DEF == tokenType)
             || (TokenTypes.CTOR_DEF == tokenType)
             || (TokenTypes.STATIC_INIT == tokenType)
             || (TokenTypes.INSTANCE_INIT == tokenType))
         {
             //pop counter from the stack
             final Counter counter = mCounters.pop();
 
             final int count = counter.getCount();
             if (count > mMethodMax) {
                 log(aAST.getLineNo(), aAST.getColumnNo(), "ncss.method",
                         count, mMethodMax);
             }
         }
         else if (TokenTypes.CLASS_DEF == tokenType) {
             //pop counter from the stack
             final Counter counter = mCounters.pop();
 
             final int count = counter.getCount();
             if (count > mClassMax) {
                 log(aAST.getLineNo(), aAST.getColumnNo(), "ncss.class",
                         count, mClassMax);
             }
         }
     }
 
     @Override
     public void finishTree(DetailAST aRootAST)
     {
         //pop counter from the stack
         final Counter counter = mCounters.pop();
 
         final int count = counter.getCount();
         if (count > mFileMax) {
             log(aRootAST.getLineNo(), aRootAST.getColumnNo(), "ncss.file",
                     count, mMethodMax);
         }
     }
 
     /**
      * Sets the maximum ncss for a file.
      *
