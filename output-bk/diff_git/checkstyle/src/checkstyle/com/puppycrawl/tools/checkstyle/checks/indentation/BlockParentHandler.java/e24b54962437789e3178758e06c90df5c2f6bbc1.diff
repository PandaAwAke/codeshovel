diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java
index 324fd7166..eb8ec98a6 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java
@@ -281,66 +281,72 @@ public class BlockParentHandler extends ExpressionHandler
         // or not first on the line ...
         final int rparenLevel = expandedTabsColumnNo(rparen);
         if (rparenLevel == getLevel()
             || !startsLine(rparen))
         {
             return;
         }
 
         // or has <lparen level> + 1 indentation
         final DetailAST lparen = getLParen();
         final int lparenLevel = expandedTabsColumnNo(lparen);
         if (rparenLevel == (lparenLevel + 1)) {
             return;
         }
 
         logError(rparen, "rparen", expandedTabsColumnNo(rparen));
     }
 
     /**
      * Check the indentation of the left parenthesis.
      */
     protected void checkLParen()
     {
         // the rcurly can either be at the correct indentation, or on the
         // same line as the lcurly
         DetailAST lparen = getLParen();
         if (lparen == null
             || expandedTabsColumnNo(lparen) == getLevel()
             || !startsLine(lparen))
         {
             return;
         }
         logError(lparen, "lparen", expandedTabsColumnNo(lparen));
     }
 
     /**
      * Check the indentation of the expression we are handling.
      */
     public void checkIndentation()
     {
         checkToplevelToken();
         // seperate to allow for eventual configuration
         checkLParen();
         checkRParen();
         if (hasCurlys()) {
             checkLCurly();
             checkRCurly();
         }
         DetailAST listChild = getListChild();
         if (listChild != null) {
-            final int expectedLevel =
-                getLevel() + getIndentCheck().getBasicOffset();
             // NOTE: switch statements usually don't have curlys
             if (!hasCurlys() || !areOnSameLine(getLCurly(), getRCurly())) {
                 checkChildren(listChild,
                               CHECKED_CHILDREN,
-                              expectedLevel,
+                              getChildrenExpectedLevel(),
                               true,
                               childrenMayNest());
             }
         }
         else {
             checkNonlistChild();
         }
     }
+
+    /**
+     * @return indentation level expected for children
+     */
+    protected int getChildrenExpectedLevel()
+    {
+        return getLevel() + getIndentCheck().getBasicOffset();
+    }
 }
