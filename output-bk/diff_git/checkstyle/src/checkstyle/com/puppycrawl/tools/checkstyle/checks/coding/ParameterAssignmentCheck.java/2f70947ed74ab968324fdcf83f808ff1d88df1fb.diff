diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheck.java
index 5a56769b2..01676ab64 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheck.java
@@ -127,100 +127,100 @@ public final class ParameterAssignmentCheck extends Check
             leaveMethodDef();
             break;
         case TokenTypes.ASSIGN:
         case TokenTypes.PLUS_ASSIGN:
         case TokenTypes.MINUS_ASSIGN:
         case TokenTypes.STAR_ASSIGN:
         case TokenTypes.DIV_ASSIGN:
         case TokenTypes.MOD_ASSIGN:
         case TokenTypes.SR_ASSIGN:
         case TokenTypes.BSR_ASSIGN:
         case TokenTypes.SL_ASSIGN:
         case TokenTypes.BAND_ASSIGN:
         case TokenTypes.BXOR_ASSIGN:
         case TokenTypes.BOR_ASSIGN:
         case TokenTypes.INC:
         case TokenTypes.POST_INC:
         case TokenTypes.DEC:
         case TokenTypes.POST_DEC:
             // Do nothing
             break;
         default:
             throw new IllegalStateException(aAST.toString());
         }
     }
 
     /**
      * Ckecks if this is assignments of parameter.
      * @param aAST assignment to check.
      */
     private void visitAssign(DetailAST aAST)
     {
         checkIdent(aAST);
     }
 
     /**
      * Checks if this is increment/decrement of parameter.
      * @param aAST dec/inc to check.
      */
     private void visitIncDec(DetailAST aAST)
     {
         checkIdent(aAST);
     }
 
     /**
      * Check if ident is parameter.
      * @param aAST ident to check.
      */
     private void checkIdent(DetailAST aAST)
     {
         if (mParameterNames != null && !mParameterNames.isEmpty()) {
-            DetailAST identAST = (DetailAST) aAST.getFirstChild();
+            final DetailAST identAST = (DetailAST) aAST.getFirstChild();
 
             if (identAST != null
                 && identAST.getType() == TokenTypes.IDENT
                 && mParameterNames.contains(identAST.getText()))
             {
                 log(aAST.getLineNo(), aAST.getColumnNo(),
                     "parameter.assignment", identAST.getText());
             }
         }
     }
 
     /**
      * Creates new set of parameters and store old one in stack.
      * @param aAST a method to process.
      */
     private void visitMethodDef(DetailAST aAST)
     {
         mParameterNamesStack.push(mParameterNames);
         mParameterNames = new HashSet();
 
         visitMethodParameters(aAST.findFirstToken(TokenTypes.PARAMETERS));
     }
 
     /** Restores old set of parameters. */
     private void leaveMethodDef()
     {
         mParameterNames = (Set) mParameterNamesStack.pop();
     }
 
     /**
      * Creates new parameter set for given method.
      * @param aAST a method for process.
      */
     private void visitMethodParameters(DetailAST aAST)
     {
         DetailAST parameterDefAST =
             aAST.findFirstToken(TokenTypes.PARAMETER_DEF);
 
         for (; parameterDefAST != null;
              parameterDefAST = (DetailAST) parameterDefAST.getNextSibling())
         {
             if (parameterDefAST.getType() == TokenTypes.PARAMETER_DEF) {
                 final DetailAST param =
                     parameterDefAST.findFirstToken(TokenTypes.IDENT);
                 mParameterNames.add(param.getText());
             }
         }
     }
 }
