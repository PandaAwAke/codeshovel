diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/DefaultConfiguration.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/DefaultConfiguration.java
index e894c1fdb..bb86140f1 100755
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/DefaultConfiguration.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/DefaultConfiguration.java
@@ -65,73 +65,79 @@ public final class DefaultConfiguration implements Configuration
 
     /** {@inheritDoc} */
     public String getAttribute(String aName) throws CheckstyleException
     {
         if (!mAttributeMap.containsKey(aName)) {
             // TODO: i18n
             throw new CheckstyleException(
                     "missing key '" + aName + "' in " + getName());
         }
         return mAttributeMap.get(aName);
     }
 
     /** {@inheritDoc} */
     public Configuration[] getChildren()
     {
         return mChildren.toArray(
             new Configuration[mChildren.size()]);
     }
 
     /** {@inheritDoc} */
     public String getName()
     {
         return mName;
     }
 
     /**
      * Makes a configuration a child of this configuration.
      * @param aConfiguration the child configuration.
      */
     public void addChild(Configuration aConfiguration)
     {
         mChildren.add(aConfiguration);
     }
 
     /**
      * Removes a child of this configuration.
      * @param aConfiguration the child configuration to remove.
      */
     public void removeChild(final Configuration aConfiguration)
     {
         mChildren.remove(aConfiguration);
     }
 
     /**
      * Adds an attribute to this configuration.
      * @param aName the name of the attribute.
      * @param aValue the value of the attribute.
      */
     public void addAttribute(String aName, String aValue)
     {
-        mAttributeMap.put(aName, aValue);
+        final String current = mAttributeMap.put(aName, aValue);
+        if (null == current) {
+            mAttributeMap.put(aName, aValue);
+        }
+        else {
+            mAttributeMap.put(aName, current + "," + aValue);
+        }
     }
 
     /**
      * Adds a custom message to this configuration.
      * @param aKey the message key
      * @param aValue the custom message pattern
      */
     public void addMessage(String aKey, String aValue)
     {
         mMessages.put(aKey, aValue);
     }
 
     /**
      * Returns an unmodifiable map instance containing the custom messages
      * for this configuration.
      * @return unmodifiable map containing custom messages
      */
     public ImmutableMap<String, String> getMessages()
     {
         return ImmutableMap.copyOf(mMessages);
     }
 }
