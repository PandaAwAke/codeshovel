diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java
index ddedf5974..ac80bad1a 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java
@@ -1,77 +1,79 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2004  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.api;
 
 import org.apache.regexp.RE;
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 import java.util.HashMap;
+import java.util.Collection;
+import java.util.Iterator;
 
 import com.puppycrawl.tools.checkstyle.grammars.CommentListener;
 
 /**
  * Represents the contents of a file.
  *
  * @author Oliver Burn
  * @version 1.0
  */
 public final class FileContents implements CommentListener
 {
     /**
      * the pattern to match a single line comment containing only the comment
      * itself -- no code.
      */
     private static final String MATCH_SINGLELINE_COMMENT_PAT =
         "^\\s*//.*$";
     /** compiled regexp to match a single-line comment line */
     private static final RE MATCH_SINGLELINE_COMMENT =
         Utils.createRE(MATCH_SINGLELINE_COMMENT_PAT);
 
     /** the file name */
     private final String mFilename;
 
     /** the lines */
     private final String[] mLines;
 
     /** map of the Javadoc comments indexed on the last line of the comment.
      * The hack is it assumes that there is only one Javadoc comment per line.
      */
     private final Map mJavadocComments = new HashMap();
 
     /** map of the C++ comments indexed on the first line of the comment. */
     private final Map mCPlusPlusComments = new HashMap();
     /**
      * map of the C comments indexed on the first line of the comment to a
      * list of comments on that line
      */
     private final Map mCComments = new HashMap();
 
     /**
      * Creates a new <code>FileContents</code> instance.
      *
      * @param aFilename name of the file
      * @param aLines the contents of the file
      */
     public FileContents(String aFilename, String[] aLines)
     {
         mFilename = aFilename;
         mLines = aLines;
@@ -194,51 +196,94 @@ public final class FileContents implements CommentListener
      * @return the Javadoc comment, or <code>null</code> if none
      * @param aLineNo the line number to check before
      **/
     public TextBlock getJavadocBefore(int aLineNo)
     {
         // Lines start at 1 to the callers perspective, so need to take off 2
         int lineNo = aLineNo - 2;
 
         // skip blank lines
         while ((lineNo > 0) && (lineIsBlank(lineNo) || lineIsComment(lineNo))) {
             lineNo--;
         }
 
         return (TextBlock) mJavadocComments.get(new Integer(lineNo));
     }
 
     /** @return the lines in the file */
     public String[] getLines()
     {
         return mLines;
     }
 
     /** @return the name of the file */
     public String getFilename()
     {
         return mFilename;
     }
 
     /**
      * Checks if the specified line is blank.
      * @param aLineNo the line number to check
      * @return if the specified line consists only of tabs and spaces.
      **/
     public boolean lineIsBlank(int aLineNo)
     {
         // possible improvement: avoid garbage creation in trim()
         return "".equals(mLines[aLineNo].trim());
     }
 
     /**
      * Checks if the specified line is a single-line comment without code.
      * @param aLineNo  the line number to check
      * @return if the specified line consists of only a single line comment
      *         without code.
      **/
     public boolean lineIsComment(int aLineNo)
     {
       return MATCH_SINGLELINE_COMMENT.match(mLines[aLineNo]);
     }
 
+    /**
+     * Checks if the specified position intersects with a comment.
+     * @param aStartLineNo the starting line number
+     * @param aStartColNo the starting column number
+     * @param aEndLineNo the ending line number
+     * @param aEndColNo the ending column number
+     * @return true if the positions intersects with a comment.
+     **/
+    public boolean hasIntersectionWithComment(
+            int aStartLineNo, int aStartColNo, int aEndLineNo, int aEndColNo)
+    {
+        // Check C comments (all comments should be checked)
+        Collection values = mCComments.values();
+
+        Iterator it = values.iterator();
+        while (it.hasNext()) {
+            List row = (List) it.next();
+            Iterator rowIterator = row.iterator();
+            while (rowIterator.hasNext()) {
+                Comment comment = (Comment) rowIterator.next();
+                if (comment.intersects(
+                        aStartLineNo, aStartColNo, aEndLineNo, aEndColNo))
+                {
+                    return true;
+                }
+            }
+        }
+
+        // Check CPP comments (line searching is possible)
+        for (int lineNumber = aStartLineNo; lineNumber <= aEndLineNo;
+            lineNumber++)
+        {
+            Comment comment = (Comment) mCPlusPlusComments.get(
+                new Integer(lineNumber));
+            if (comment != null && comment.intersects(aStartLineNo, aStartColNo,
+                aEndLineNo, aEndColNo))
+            {
+                return true;
+            }
+        }
+        return false;
+    }
+
 }
