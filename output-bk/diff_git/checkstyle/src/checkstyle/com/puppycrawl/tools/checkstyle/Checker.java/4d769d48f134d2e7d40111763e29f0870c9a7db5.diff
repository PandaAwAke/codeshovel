diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java
index 3904d0372..f83eed064 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java
@@ -59,168 +59,158 @@ public class Checker extends AutomaticBean
         {
             mCount++;
         }
 
         /** @see AuditListener */
         public void auditStarted(AuditEvent aEvt)
         {
             mCount = 0;
         }
 
         /** @see AuditListener */
         public void fileStarted(AuditEvent aEvt)
         {
         }
 
         /** @see AuditListener */
         public void auditFinished(AuditEvent aEvt)
         {
         }
 
         /** @see AuditListener */
         public void fileFinished(AuditEvent aEvt)
         {
         }
 
         /**
          * @return the number of errors since audit started.
          */
         private int getCount()
         {
             return mCount;
         }
     }
 
     /** maintains error count */
     private final ErrorCounter mCounter = new ErrorCounter();
 
     /** vector of listeners */
     private final ArrayList mListeners = new ArrayList();
 
     /** vector of fileset checks */
     private final ArrayList mFileSetChecks = new ArrayList();
 
     /** class loader to resolve classes with. **/
     private ClassLoader mLoader =
             Thread.currentThread().getContextClassLoader();
 
     /** the basedir to strip off in filenames */
     private String mBasedir;
 
-    public void setLocaleCountry(String aLocaleCountry)
-    {
-        mLocaleCountry = aLocaleCountry;
-    }
-
-    public void setLocaleLanguage(String aLocaleLanguage)
-    {
-        mLocaleLanguage = aLocaleLanguage;
-    }
-
     /** locale country to report messages  **/
     private String mLocaleCountry = Locale.getDefault().getCountry();
     /** locale language to report messages  **/
     private String mLocaleLanguage = Locale.getDefault().getLanguage();
 
-    /** List of package names for instatiating objects */
+    /**
+     * List of package names for instatiating objects. Do not access directly,
+     * but instead use the getter
+     */
     private String[] mPackageNames;
 
     /**
      * Creates a new <code>Checker</code> instance.
      * The instance needs to be contextualized and configured.
      *
      * @throws CheckstyleException if an error occurs
      */
     public Checker()
         throws CheckstyleException
     {
-        this.addListener(mCounter);
+        addListener(mCounter);
     }
 
     /** @see AutomaticBean */
     public void configure(Configuration aConfiguration)
             throws CheckstyleException
     {
         super.configure(aConfiguration);
 
         final Locale locale = new Locale(mLocaleLanguage, mLocaleCountry);
         LocalizedMessage.setLocale(locale);
 
         final DefaultContext context = new DefaultContext();
-        context.add("classLoader", this.getClassLoader());
+        context.add("classLoader", mLoader);
         final Configuration[] fileSetChecks = aConfiguration.getChildren();
         for (int i = 0; i < fileSetChecks.length; i++) {
             final Configuration fscConf = fileSetChecks[i];
             final String name = fscConf.getName();
             try {
-                FileSetCheck fsc =
+                final FileSetCheck fsc =
                     (FileSetCheck) PackageObjectFactory.makeObject(
-                        mPackageNames, getClassLoader(), name);
-                fsc.setPackageNames(mPackageNames);
+                        getPackageNames(),
+                        getClass().getClassLoader(),
+                        name);
+                fsc.setPackageNames(getPackageNames());
                 fsc.contextualize(context);
                 fsc.configure(fscConf);
                 addFileSetCheck(fsc);
             }
             catch (Exception ex) {
                 // TODO i18n
                 throw new CheckstyleException(
                         "cannot initialize filesetcheck with name "
                         + name + " - " + ex.getMessage());
             }
         }
     }
 
-    private ClassLoader getClassLoader()
-    {
-        return mLoader;
-    }
-
     /**
      * Adds a FileSetCheck to the list of FileSetChecks
      * that is executed in process().
      * @param aFileSetCheck the additional FileSetCheck
      */
     public void addFileSetCheck(FileSetCheck aFileSetCheck)
     {
         aFileSetCheck.setMessageDispatcher(this);
         mFileSetChecks.add(aFileSetCheck);
     }
 
     /** Cleans up the object **/
     public void destroy()
     {
         mListeners.clear();
     }
 
     /**
      * Add the listener that will be used to receive events from the audit
      * @param aListener the nosy thing
      */
     public void addListener(AuditListener aListener)
     {
         mListeners.add(aListener);
     }
 
     /**
      * Processes a set of files with all FileSetChecks.
      * Once this is done, it is highly recommended to call for
      * the destroy method to close and remove the listeners.
      * @param aFiles the list of files to be audited.
      * @return the total number of errors found
      * @see #destroy()
      */
     public int process(File[] aFiles)
     {
         fireAuditStarted();
         for (int i = 0; i < mFileSetChecks.size(); i++) {
             FileSetCheck fileSetCheck = (FileSetCheck) mFileSetChecks.get(i);
             fileSetCheck.process(aFiles);
             fileSetCheck.destroy();
         }
         int errorCount = mCounter.getCount();
         fireAuditFinished();
         return errorCount;
     }
 
 
     /**
      * Create a stripped down version of a filename.
@@ -273,58 +263,74 @@ public class Checker extends AutomaticBean
      * @param aFileName the file to be audited
      */
     public void fireFileStarted(String aFileName)
     {
         final String stripped = getStrippedFileName(aFileName);
         final AuditEvent evt = new AuditEvent(this, stripped);
         final Iterator it = mListeners.iterator();
         while (it.hasNext()) {
             final AuditListener listener = (AuditListener) it.next();
             listener.fileStarted(evt);
         }
     }
 
     /**
      * notify all listeners about the end of a file audit
      * @param aFileName the audited file
      */
     public void fireFileFinished(String aFileName)
     {
         final String stripped = getStrippedFileName(aFileName);
         final AuditEvent evt = new AuditEvent(this, stripped);
         final Iterator it = mListeners.iterator();
         while (it.hasNext()) {
             final AuditListener listener = (AuditListener) it.next();
             listener.fileFinished(evt);
         }
     }
 
     /**
      * notify all listeners about the errors in a file.
      * @param aFileName the audited file
      * @param aErrors the audit errors from the file
      */
     public void fireErrors(String aFileName, LocalizedMessage[] aErrors)
     {
         final String stripped = getStrippedFileName(aFileName);
         for (int i = 0; i < aErrors.length; i++) {
             final AuditEvent evt = new AuditEvent(this, stripped, aErrors[i]);
             final Iterator it = mListeners.iterator();
             while (it.hasNext()) {
                 final AuditListener listener = (AuditListener) it.next();
                 listener.addError(evt);
             }
         }
     }
 
     /** @see PackageNamesClient */
     public void setPackageNames(String[] aPackageNames)
         throws CheckstyleException
     {
-        if (aPackageNames == null) {
-           aPackageNames =
-            PackageNamesLoader.loadPackageNames(this.getClassLoader());
-        }
         mPackageNames = aPackageNames;
     }
 
+    private String[] getPackageNames()
+        throws CheckstyleException
+    {
+        if (mPackageNames == null) {
+            mPackageNames =
+                PackageNamesLoader.loadPackageNames(
+                    getClass().getClassLoader());
+        }
+        return mPackageNames;
+    }
+
+    public void setLocaleCountry(String aLocaleCountry)
+    {
+        mLocaleCountry = aLocaleCountry;
+    }
+
+    public void setLocaleLanguage(String aLocaleLanguage)
+    {
+        mLocaleLanguage = aLocaleLanguage;
+    }
 }
