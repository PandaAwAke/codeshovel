diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/DefaultLogger.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/DefaultLogger.java
index 6187159e1..1886b89aa 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/DefaultLogger.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/DefaultLogger.java
@@ -36,111 +36,115 @@ public class DefaultLogger
 {
     /** where to write info messages **/
     private final PrintWriter mInfoWriter;
     /** close info stream after use */
     private final boolean mCloseInfo;
 
     /** where to write error messages **/
     private final PrintWriter mErrorWriter;
     /** close error stream after use */
     private final boolean mCloseError;
 
     /**
      * Creates a new <code>DefaultLogger</code> instance.
      * @param aOS where to log infos and errors
      * @param aCloseStreamsAfterUse if aOS should be closed in auditFinished()
      */
     public DefaultLogger(OutputStream aOS, boolean aCloseStreamsAfterUse)
     {
         // no need to close aOS twice
         this(aOS, aCloseStreamsAfterUse, aOS, false);
     }
 
     /**
      * Creates a new <code>DefaultLogger</code> instance.
      *
      * @param aInfoStream the <code>OutputStream</code> for info messages
      * @param aCloseInfoAfterUse auditFinished should close aInfoStream
      * @param aErrorStream the <code>OutputStream</code> for error messages
      * @param aCloseErrorAfterUse auditFinished should close aErrorStream
      */
     public DefaultLogger(OutputStream aInfoStream,
                          boolean aCloseInfoAfterUse,
                          OutputStream aErrorStream,
                          boolean aCloseErrorAfterUse)
     {
         mCloseInfo = aCloseInfoAfterUse;
         mCloseError = aCloseErrorAfterUse;
         mInfoWriter = new PrintWriter(aInfoStream);
         mErrorWriter = (aInfoStream == aErrorStream)
             ? mInfoWriter
             : new PrintWriter(aErrorStream);
     }
 
     /**
      * Print an Emacs compliant line on the error stream.
      * If the column number is non zero, then also display it.
      * @see AuditListener
      **/
     public void addError(AuditEvent aEvt)
     {
+        String fileName = aEvt.getFileName();
+        String message = aEvt.getMessage();
+
+        // avoid StringBuffer.expandCapacity
+        int bufLen = fileName.length() + message.length() + 12;
+
+        StringBuffer sb = new StringBuffer(bufLen);
+
+        sb.append(fileName);
+        sb.append(':').append(aEvt.getLine());
         if (aEvt.getColumn() > 0) {
-            mErrorWriter.println(aEvt.getFileName()
-                                 + ":" + aEvt.getLine()
-                                 + ":" + aEvt.getColumn()
-                                 + ": " + aEvt.getMessage());
-        }
-        else {
-            mErrorWriter.println(aEvt.getFileName()
-                                 + ":" + aEvt.getLine()
-                                 + ": " + aEvt.getMessage());
+            sb.append(':').append(aEvt.getColumn());
         }
+        sb.append(": ").append(message);
+        mErrorWriter.println(sb.toString());
     }
 
     /** @see AuditListener **/
     public void addException(AuditEvent aEvt, Throwable aThrowable)
     {
         synchronized (mErrorWriter) {
             mErrorWriter.println("Error auditing " + aEvt.getFileName());
             aThrowable.printStackTrace(mErrorWriter);
         }
     }
 
     /** @see AuditListener **/
     public void auditStarted(AuditEvent aEvt)
     {
         mInfoWriter.println("Starting audit...");
     }
 
     /** @see AuditListener **/
     public void fileFinished(AuditEvent aEvt)
     {
     }
 
     /** @see AuditListener **/
     public void fileStarted(AuditEvent aEvt)
     {
     }
 
     /** @see AuditListener **/
     public void auditFinished(AuditEvent aEvt)
     {
         mInfoWriter.println("Audit done.");
         closeStreams();
     }
 
     /**
      * Flushes the output streams and closes them if needed.
      */
     protected void closeStreams()
     {
         mInfoWriter.flush();
         if (mCloseInfo) {
             mInfoWriter.close();
         }
 
         mErrorWriter.flush();
         if (mCloseError) {
             mErrorWriter.close();
         }
     }
 }
