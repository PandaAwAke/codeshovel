diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
index 065da61f2..530ed0ec9 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
@@ -29,112 +29,112 @@ import java.io.FileInputStream;
 import org.apache.regexp.RESyntaxException;
 import org.apache.tools.ant.BuildException;
 import org.apache.tools.ant.DirectoryScanner;
 import org.apache.tools.ant.Project;
 import org.apache.tools.ant.Task;
 import org.apache.tools.ant.taskdefs.LogOutputStream;
 import org.apache.tools.ant.types.EnumeratedAttribute;
 import org.apache.tools.ant.types.FileSet;
 
 /**
  * An implementation of a ANT task for calling checkstyle. See the documentation
  * of the task for usage.
  * @author <a href="mailto:oliver@puppycrawl.com">Oliver Burn</a>
  **/
 public class CheckStyleTask
     extends Task
 {
     /** poor man's enum for an xml formatter **/
     private static final String E_XML = "xml";
     /** poor man's enum for an plain formatter **/
     private static final String E_PLAIN = "plain";
 
     /** name of file to check **/
     private String mFileName;
 
     /** whether to fail build on violations **/
     private boolean mFailOnViolation = true;
 
     /** property to set on violations **/
     private String mFailureProperty = null;
 
     /** contains the filesets to process **/
     private final List mFileSets = new ArrayList();
 
     /** contains the formatters to log to **/
     private final List mFormatters = new ArrayList();
 
     /** the configuration to pass to the checker **/
     private Configuration mConfig = new Configuration();
 
     /** the properties **/
     private Properties mProperties = null;
 
     ////////////////////////////////////////////////////////////////////////////
     // Setters for attributes
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Sets a properties file for use instead
      * of individually setting them
-     * @param props the properties File to use
+     * @param aProps the properties File to use
      */
-    public void setProperties(File props)
+    public void setProperties(File aProps)
     {
         Properties mProperties = new Properties();
         try {
-            mProperties.load(new FileInputStream(props));
+            mProperties.load(new FileInputStream(aProps));
             mConfig = new Configuration(mProperties, System.out);
         }
         catch (Exception e) {
             throw new BuildException(
-                "Could not find Properties file '" + props + "'", location);
+                "Could not find Properties file '" + aProps + "'", location);
         }
     }
 
     /**
      * Adds a set of files (nested fileset attribute).
      * @param aFS the file set to add
      */
     public void addFileset(FileSet aFS)
     {
         mFileSets.add(aFS);
     }
 
     /**
      * Add a formatter
      * @param aFormatter the formatter to add for logging.
      */
     public void addFormatter(Formatter aFormatter)
     {
         mFormatters.add(aFormatter);
     }
 
 
     /** @param aFile the file to be checked **/
     public void setFile(File aFile)
     {
         mFileName = aFile.getAbsolutePath();
     }
 
     /** @param aAllowed whether tabs are allowed **/
     public void setAllowTabs(boolean aAllowed)
     {
         mConfig.setAllowTabs(aAllowed);
     }
 
     /** @param aAllowed whether protected data is allowed **/
     public void setAllowProtected(boolean aAllowed)
     {
         mConfig.setAllowProtected(aAllowed);
     }
 
     /** @param aAllowed whether package visible data is allowed **/
     public void setAllowPackage(boolean aAllowed)
     {
         mConfig.setAllowPackage(aAllowed);
     }
 
     /** @param aAllowed whether allow having no author **/
     public void setAllowNoAuthor(boolean aAllowed)
     {
         mConfig.setAllowNoAuthor(aAllowed);
