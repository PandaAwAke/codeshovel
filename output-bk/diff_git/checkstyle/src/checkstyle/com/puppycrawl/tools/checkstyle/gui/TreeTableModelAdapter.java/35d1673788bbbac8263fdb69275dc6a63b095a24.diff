diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/gui/TreeTableModelAdapter.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/gui/TreeTableModelAdapter.java
index 45209a5e6..d12e0f47a 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/gui/TreeTableModelAdapter.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/gui/TreeTableModelAdapter.java
@@ -83,85 +83,85 @@ public class TreeTableModelAdapter extends AbstractTableModel
         // not be guaranteed the mTree will have finished processing
         // the event before us.
         aTreeTableModel.addTreeModelListener(new TreeModelListener()
         {
             public void treeNodesChanged(TreeModelEvent e)
             {
                 delayedFireTableDataChanged();
             }
 
             public void treeNodesInserted(TreeModelEvent e)
             {
                 delayedFireTableDataChanged();
             }
 
             public void treeNodesRemoved(TreeModelEvent e)
             {
                 delayedFireTableDataChanged();
             }
 
             public void treeStructureChanged(TreeModelEvent e)
             {
                 delayedFireTableDataChanged();
             }
         });
     }
 
     // Wrappers, implementing TableModel interface.
 
     public int getColumnCount()
     {
         return mTreeTableModel.getColumnCount();
     }
 
     public String getColumnName(int column)
     {
         return mTreeTableModel.getColumnName(column);
     }
 
     public Class getColumnClass(int column)
     {
         return mTreeTableModel.getColumnClass(column);
     }
 
     public int getRowCount()
     {
         return mTree.getRowCount();
     }
 
     protected Object nodeForRow(int row)
     {
-        TreePath treePath = mTree.getPathForRow(row);
+        final TreePath treePath = mTree.getPathForRow(row);
         return treePath.getLastPathComponent();
     }
 
     public Object getValueAt(int row, int column)
     {
         return mTreeTableModel.getValueAt(nodeForRow(row), column);
     }
 
     public boolean isCellEditable(int row, int column)
     {
         return mTreeTableModel.isCellEditable(nodeForRow(row), column);
     }
 
     public void setValueAt(Object value, int row, int column)
     {
         mTreeTableModel.setValueAt(value, nodeForRow(row), column);
     }
 
     /**
      * Invokes fireTableDataChanged after all the pending events have been
      * processed. SwingUtilities.invokeLater is used to handle this.
      */
     protected void delayedFireTableDataChanged()
     {
         SwingUtilities.invokeLater(new Runnable()
         {
             public void run()
             {
                 fireTableDataChanged();
             }
         });
     }
 }
 
