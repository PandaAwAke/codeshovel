diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
index 66d1be07e..e0d056507 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
@@ -111,102 +111,107 @@ public class TranslationCheck
     /**
      * Loads the keys of the specified property file into a set.
      * @param aFile the property file
      * @return a Set object which holds the loaded keys
      */
     private Set loadKeys(File aFile)
     {
         final Set keys = new HashSet();
         InputStream inStream = null;
 
         try {
             // Load file and properties.
             inStream = new FileInputStream(aFile);
             Properties props = new Properties();
             props.load(inStream);
 
             // Gather the keys and put them into a set
             final Enumeration e = props.propertyNames();
             while (e.hasMoreElements()) {
                 keys.add(e.nextElement());
             }
         }
         catch (IOException e) {
             logIOException(e, aFile);
         }
         finally {
             try {
                 inStream.close();
             }
             catch (IOException e) {
                 logIOException(e, aFile);
             }
         }
         return keys;
     }
 
     /**
      * helper method to log an io exception.
      * @param aEx the exception that occured
      * @param aFile the file that could not be processed
      */
     private void logIOException(IOException aEx, File aFile)
     {
         String[] args = null;
         String key = "general.fileNotFound";
         if (!(aEx instanceof FileNotFoundException)) {
             args = new String[] {aEx.getMessage()};
             key = "general.exception";
         }
         final LocalizedMessage message =
-                new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, key, args);
-        final LocalizedMessage[] messages = new LocalizedMessage[]{message};
+            new LocalizedMessage(
+                0,
+                Defn.CHECKSTYLE_BUNDLE,
+                key,
+                args,
+                this.getClass().getName());
+        final LocalizedMessage[] messages = new LocalizedMessage[] {message};
         getMessageDispatcher().fireErrors(aFile.getPath(), messages);
     }
 
 
     /**
      * Compares the key sets of the given property files (arranged in a map)
      * with the specified key set. All missing keys are reported.
      * @param aKeys the set of keys to compare with
      * @param aFileMap a Map from property files to their key sets
      */
     private void compareKeySets(Set aKeys, Map aFileMap)
     {
         final Set fls = aFileMap.keySet();
 
         for (Iterator iter = fls.iterator(); iter.hasNext();) {
             final File currentFile = (File) iter.next();
             final MessageDispatcher dispatcher = getMessageDispatcher();
             final String path = currentFile.getPath();
             dispatcher.fireFileStarted(path);
             final Set currentKeys = (Set) aFileMap.get(currentFile);
 
             // Clone the keys so that they are not lost
             final Set keysClone = new HashSet(aKeys);
             keysClone.removeAll(currentKeys);
 
             // Remaining elements in the key set are missing in the current file
             if (!keysClone.isEmpty()) {
                 for (Iterator it = keysClone.iterator(); it.hasNext();) {
                     Object key = it.next();
                     log(0, "translation.missingKey", key);
                 }
             }
             fireErrors(path);
             dispatcher.fireFileFinished(path);
         }
     }
 
 
     /**
      * Tests whether the given property files (arranged by their prefixes
      * in a Map) contain the proper keys.
      *
      * Each group of files must have the same keys. If this is not the case
      * an error message is posted giving information which key misses in
      * which file.
      *
      * @param aPropFiles the property files organized as Map
      */
     private void checkPropertyFileSets(Map aPropFiles)
     {
