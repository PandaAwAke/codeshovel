diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
index 36a6821a4..382575636 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
@@ -46,100 +46,107 @@ import org.apache.tools.ant.types.Path;
 import org.apache.tools.ant.types.Reference;
 
 /**
  * An implementation of a ANT task for calling checkstyle. See the documentation
  * of the task for usage.
  * @author Oliver Burn
  */
 public class CheckStyleTask extends Task
 {
     /** poor man's enum for an xml formatter */
     private static final String E_XML = "xml";
     /** poor man's enum for an plain formatter */
     private static final String E_PLAIN = "plain";
 
     /** class path to locate class files */
     private Path mClasspath;
 
     /** name of file to check */
     private String mFileName;
 
     /** config file containing configuration */
     private String mConfigLocation;
 
     /** contains package names */
     private File mPackageNamesFile;
 
     /** whether to fail build on violations */
     private boolean mFailOnViolation = true;
 
     /** property to set on violations */
     private String mFailureProperty;
 
     /** contains the filesets to process */
     private final List<FileSet> mFileSets = new ArrayList<FileSet>();
 
     /** contains the formatters to log to */
     private final List<Formatter> mFormatters = new ArrayList<Formatter>();
 
     /** contains the Properties to override */
     private final List<Property> mOverrideProps = new ArrayList<Property>();
 
     /** the name of the properties file */
     private File mPropertiesFile;
 
     /** the maximum number of errors that are tolerated. */
     private int mMaxErrors;
 
     /** the maximum number of warnings that are tolerated. */
     private int mMaxWarnings = Integer.MAX_VALUE;
 
+    /**
+     * whether to omit ignored modules - some modules may log above
+     * their severity depending on their configuration (e.g. WriteTag) so
+     * need to be included
+     */
+    private boolean mOmitIgnoredModules = true;
+
     ////////////////////////////////////////////////////////////////////////////
     // Setters for ANT specific attributes
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Tells this task to set the named property to "true" when there
      * is a violation.
      * @param aPropertyName the name of the property to set
      *                      in the event of an failure.
      */
     public void setFailureProperty(String aPropertyName)
     {
         mFailureProperty = aPropertyName;
     }
 
     /** @param aFail whether to fail if a violation is found */
     public void setFailOnViolation(boolean aFail)
     {
         mFailOnViolation = aFail;
     }
 
     /**
      * Sets the maximum number of errors allowed. Default is 0.
      * @param aMaxErrors the maximum number of errors allowed.
      */
     public void setMaxErrors(int aMaxErrors)
     {
         mMaxErrors = aMaxErrors;
     }
 
     /**
      * Sets the maximum number of warings allowed. Default is
      * {@link Integer#MAX_VALUE}.
      * @param aMaxWarnings the maximum number of warnings allowed.
      */
     public void setMaxWarnings(int aMaxWarnings)
     {
         mMaxWarnings = aMaxWarnings;
     }
 
     /**
      * Adds a set of files (nested fileset attribute).
      * @param aFS the file set to add
      */
     public void addFileset(FileSet aFS)
     {
         mFileSets.add(aFS);
     }
 
     /**
@@ -182,100 +189,106 @@ public class CheckStyleTask extends Task
     {
         createClasspath().setRefid(aClasspathRef);
     }
 
     /** @return a created path for locating classes */
     public Path createClasspath()
     {
         if (mClasspath == null) {
             mClasspath = new Path(getProject());
         }
         return mClasspath.createPath();
     }
 
     /** @param aFile the file to be checked */
     public void setFile(File aFile)
     {
         mFileName = aFile.getAbsolutePath();
     }
 
     /** @param aFile the configuration file to use */
     public void setConfig(File aFile)
     {
         setConfigLocation(aFile.getAbsolutePath());
     }
 
     /** @param aURL the URL of the configuration to use */
     public void setConfigURL(URL aURL)
     {
         setConfigLocation(aURL.toExternalForm());
     }
 
     /**
      * Sets the location of the configuration.
      * @param aLocation the location, which is either a
      */
     private void setConfigLocation(String aLocation)
     {
         if (mConfigLocation != null) {
             throw new BuildException("Attributes 'config' and 'configURL' "
                     + "must not be set at the same time");
         }
         mConfigLocation = aLocation;
     }
 
     /** @param aFile the package names file to use */
     public void setPackageNamesFile(File aFile)
     {
         mPackageNamesFile = aFile;
     }
 
+    /** @param aOmit whether to omit ignored modules */
+    public void setOmitIgnoredModules(boolean aOmit)
+    {
+        mOmitIgnoredModules = aOmit;
+    }
+
     ////////////////////////////////////////////////////////////////////////////
     // Setters for Checker configuration attributes
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Sets a properties file for use instead
      * of individually setting them.
      * @param aProps the properties File to use
      */
     public void setProperties(File aProps)
     {
         mPropertiesFile = aProps;
     }
 
     ////////////////////////////////////////////////////////////////////////////
     // The doers
     ////////////////////////////////////////////////////////////////////////////
 
     @Override
     public void execute() throws BuildException
     {
         final long startTime = System.currentTimeMillis();
         final ClassLoader loader = Thread.currentThread()
                 .getContextClassLoader();
         try {
             Thread.currentThread().setContextClassLoader(
                     getClass().getClassLoader());
             realExecute();
         }
         finally {
             Thread.currentThread().setContextClassLoader(loader);
             final long endTime = System.currentTimeMillis();
             log("Total execution took " + (endTime - startTime) + " ms.",
                 Project.MSG_VERBOSE);
         }
     }
 
     /**
      * Helper implementation to perform execution.
      */
     private void realExecute()
     {
         // output version info in debug mode
         final ResourceBundle compilationProperties = ResourceBundle
                 .getBundle("checkstylecompilation");
         final String version = compilationProperties
                 .getString("checkstyle.compile.version");
         final String compileTimestamp = compilationProperties
                 .getString("checkstyle.compile.timestamp");
         log("checkstyle version " + version, Project.MSG_VERBOSE);
@@ -304,102 +317,105 @@ public class CheckStyleTask extends Task
             // Process the files
             long startTime = System.currentTimeMillis();
             final List<File> files = scanFileSets();
             long endTime = System.currentTimeMillis();
             log("To locate the files took " + (endTime - startTime) + " ms.",
                 Project.MSG_VERBOSE);
 
             log("Running Checkstyle " + version + " on " + files.size()
                     + " files", Project.MSG_INFO);
             log("Using configuration " + mConfigLocation, Project.MSG_VERBOSE);
 
             startTime = System.currentTimeMillis();
             final int numErrs = c.process(files);
             endTime = System.currentTimeMillis();
             log("To process the files took " + (endTime - startTime) + " ms.",
                 Project.MSG_VERBOSE);
             final int numWarnings = warningCounter.getCount();
             final boolean ok = (numErrs <= mMaxErrors)
                     && (numWarnings <= mMaxWarnings);
 
             // Handle the return status
             if (!ok) {
                 final String failureMsg =
                         "Got " + numErrs + " errors and " + numWarnings
                                 + " warnings.";
                 if (mFailureProperty != null) {
                     getProject().setProperty(mFailureProperty, failureMsg);
                 }
 
                 if (mFailOnViolation) {
                     throw new BuildException(failureMsg, getLocation());
                 }
             }
         }
         finally {
             if (c != null) {
                 c.destroy();
             }
         }
     }
 
     /**
      * Creates new instance of <code>Checker</code>.
      * @return new instance of <code>Checker</code>
      */
     private Checker createChecker()
     {
         Checker c = null;
         try {
             final Properties props = createOverridingProperties();
-            final Configuration config = ConfigurationLoader.loadConfiguration(
-                    mConfigLocation, new PropertiesExpander(props), true);
+            final Configuration config =
+                ConfigurationLoader.loadConfiguration(
+                    mConfigLocation,
+                    new PropertiesExpander(props),
+                    mOmitIgnoredModules);
 
             final DefaultContext context = new DefaultContext();
             final ClassLoader loader = new AntClassLoader(getProject(),
                     mClasspath);
             context.add("classloader", loader);
 
             c = new Checker();
 
             //load the set of package names
             if (mPackageNamesFile != null) {
                 final ModuleFactory moduleFactory = PackageNamesLoader
                         .loadModuleFactory(mPackageNamesFile.getAbsolutePath());
                 c.setModuleFactory(moduleFactory);
             }
             c.contextualize(context);
             c.configure(config);
 
             // setup the listeners
             final AuditListener[] listeners = getListeners();
             for (AuditListener element : listeners) {
                 c.addListener(element);
             }
         }
         catch (final Exception e) {
             throw new BuildException("Unable to create a Checker: "
                     + e.getMessage(), e);
         }
 
         return c;
     }
 
     /**
      * Create the Properties object based on the arguments specified
      * to the ANT task.
      * @return the properties for property expansion expansion
      * @throws BuildException if an error occurs
      */
     private Properties createOverridingProperties()
     {
         final Properties retVal = new Properties();
 
         // Load the properties file if specified
         if (mPropertiesFile != null) {
             FileInputStream inStream = null;
             try {
                 inStream = new FileInputStream(mPropertiesFile);
                 retVal.load(inStream);
             }
             catch (final FileNotFoundException e) {
                 throw new BuildException("Could not find Properties file '"
