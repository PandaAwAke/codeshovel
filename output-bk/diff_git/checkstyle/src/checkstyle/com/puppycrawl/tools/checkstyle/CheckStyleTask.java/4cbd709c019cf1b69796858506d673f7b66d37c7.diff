diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
index 077b4e21d..895a9f420 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
@@ -170,101 +170,101 @@ public class CheckStyleTask
     public void setProperties(File aProps)
     {
         mPropertiesFile = aProps;
     }
 
     ////////////////////////////////////////////////////////////////////////////
     // The doers
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Actually checks the files specified. All errors are reported to
      * System.out. Will fail if any errors occurred.
      * @throws BuildException an error occurred
      */
     public void execute()
         throws BuildException
     {
         // Check for no arguments
         if ((mFileName == null) && (mFileSets.size() == 0)) {
             throw new BuildException(
                 "Must specify atleast one of 'file' or nested 'fileset'.",
                 getLocation());
         }
 
         if (mConfigFile == null) {
             throw new BuildException("Must specify 'config'.", getLocation());
         }
 
         // Create the checker
         Checker c = null;
         try {
             try {
                 final Configuration config = createConfiguration();
                 final CheckConfiguration[] checkConfigs =
                     ConfigurationLoader.loadConfigs(
                         mConfigFile.getAbsolutePath());
                 c = new Checker(config, checkConfigs);
                 // setup the listeners
                 AuditListener[] listeners = getListeners();
                 for (int i = 0; i < listeners.length; i++) {
                     c.addListener(listeners[i]);
                 }
             }
             catch (Exception e) {
                 throw new BuildException(
                     "Unable to create a Checker: " + e.getMessage(), e);
             }
 
             // Process the files
             final String[] files = scanFileSets();
-            final int numErrs = c.processNEW(files);
+            final int numErrs = c.process(files);
 
             // Handle the return status
             if ((numErrs > 0) && mFailureProperty != null) {
                 getProject().setProperty(mFailureProperty, "true");
             }
 
             if ((numErrs > 0) && mFailOnViolation) {
                 throw new BuildException("Got " + numErrs + " errors.",
                                          getLocation());
             }
         }
         finally {
             if (c != null) {
                 c.destroy();
             }
         }
     }
 
     /**
      * Create the Configuration object based on the arguments specified to the
      * ANT task.
      * @return a brand spanking new Configuration object
      * @throws BuildException if an error occurs
      */
     private Configuration createConfiguration()
     {
         final Properties props = new Properties();
 
         // Load the properties file is specified
         if (mPropertiesFile != null) {
             try {
                 props.load(new FileInputStream(mPropertiesFile));
             }
             catch (FileNotFoundException e) {
                 throw new BuildException(
                     "Could not find Properties file '" + mPropertiesFile + "'",
                     e, getLocation());
             }
             catch (IOException e) {
                 throw new BuildException(
                     "Error loading Properties file '" + mPropertiesFile + "'",
                     e, getLocation());
             }
         }
 
         // Now override the properties specified
         for (Iterator it = mOverrideProps.iterator(); it.hasNext();) {
             final Property p = (Property) it.next();
             props.setProperty(p.getKey(), p.getValue());
         }
