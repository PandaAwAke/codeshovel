diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
index 778332b11..b79689f3d 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
@@ -243,81 +243,81 @@ public class JavadocTypeCheck
 
         int tagCount = 0;
         for (int i = aTags.size() - 1; i >= 0; i--) {
             final JavadocTag tag = (JavadocTag) aTags.get(i);
             if (tag.getTag().equals(aTag)) {
                 tagCount++;
                 if (!aFormatPattern.matcher(tag.getArg1()).find()) {
                     log(aLineNo, "type.tagFormat", "@" + aTag, aFormat);
                 }
             }
         }
         if (tagCount == 0) {
             log(aLineNo, "type.missingTag", "@" + aTag);
         }
     }
 
     /**
      * Verifies that a type definition has the specified param tag for
      * the specified type parameter name.
      * @param aLineNo the line number for the type definition.
      * @param aTags tags from the Javadoc comment for the type definition.
      * @param aTypeParamName the name of the type parameter
      */
     private void checkTypeParamTag(
         final int aLineNo, final Vector aTags, final String aTypeParamName)
     {
         boolean found = false;
         for (int i = aTags.size() - 1; i >= 0; i--) {
             final JavadocTag tag = (JavadocTag) aTags.get(i);
             if (tag.getTag().equals("param")
                 && tag.getArg1() != null
                 && tag.getArg1().indexOf("<" + aTypeParamName + ">") == 0)
             {
                 found = true;
             }
         }
         if (!found) {
             log(aLineNo, "type.missingTag", "@param <" + aTypeParamName + ">");
         }
     }
 
     /**
      * Checks for unused param tags for type parameters.
      * @param aTags tags from the Javadoc comment for the type definition.
      * @param aTypeParamNames names of type parameters
      */
     private void checkUnusedTypeParamTags(
         final Vector aTags,
         final List aTypeParamNames)
     {
-        Pattern pattern = Utils.getPattern("\\s*<([^>])+>.*");
+        Pattern pattern = Utils.getPattern("\\s*<([^>]+)>.*");
         for (int i = aTags.size() - 1; i >= 0; i--) {
             final JavadocTag tag = (JavadocTag) aTags.get(i);
             if (tag.getTag().equals("param")) {
 
                 if (tag.getArg1() != null) {
 
                     Matcher matcher = pattern.matcher(tag.getArg1());
                     String typeParamName = null;
 
                     if (matcher.matches()) {
                         typeParamName = matcher.group(1).trim();
                         if (!aTypeParamNames.contains(typeParamName)) {
                             log(tag.getLineNo(), tag.getColumnNo(),
                                 "javadoc.unusedTag",
                                 "@param", "<" + typeParamName + ">");
                         }
                     }
                     else {
                         log(tag.getLineNo(), tag.getColumnNo(),
                             "javadoc.unusedTagGeneral");
                     }
                 }
                 else {
                     log(tag.getLineNo(), tag.getColumnNo(),
                         "javadoc.unusedTagGeneral");
                 }
             }
         }
     }
 }
