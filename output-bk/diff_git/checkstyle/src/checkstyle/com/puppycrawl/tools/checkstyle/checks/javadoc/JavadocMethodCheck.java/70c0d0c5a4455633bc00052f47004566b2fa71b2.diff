diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
index a59ba17ce..95a35119f 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
@@ -644,81 +644,83 @@ public class JavadocMethodCheck
                         documentedClass = loadClassForTag(tag);
                         classLoaded = true;
                     }
                     reqd = !isUnchecked(documentedClass);
                 }
 
                 if (reqd) {
                     log(tag.getLineNo(), "javadoc.unusedTag",
                                   "@throws", tag.getArg1());
                 }
             }
         }
 
         // Now dump out all throws without tags :- unless
         // the user has chosen to suppress these problems
         if (!mAllowMissingThrowsTags && aReportExpectedTags) {
             final ListIterator throwIt = aThrows.listIterator();
             while (throwIt.hasNext()) {
                 final ExceptionInfo ei = (ExceptionInfo) throwIt.next();
                 if (!ei.isFound()) {
                     final FullIdent fi = ei.getName();
                     log(fi.getLineNo(), fi.getColumnNo(),
                         "javadoc.expectedTag", "@throws", fi.getText());
                 }
             }
         }
     }
 
     /**
      * Tries to load class for throws tag. Logs error if unable.
      * @param aTag name of class which we try to load.
      * @return <code>Class</code> for the tag.
      */
     private Class loadClassForTag(JavadocTag aTag)
     {
         final String currentClassName = "";
         Class clazz = resolveClass(aTag.getArg1(), currentClassName);
         if (clazz == null) {
             log(aTag.getLineNo(), "javadoc.classInfo",
                 "@throws", aTag.getArg1());
         }
         return clazz;
     }
 
     /**
      * Logs error if unable to load class information.
      * @param aIdent class name for which we can no load class.
      */
     protected final void logLoadError(FullIdent aIdent)
     {
-        log(aIdent.getLineNo(), "javadoc.classInfo", "@throws",
-            aIdent.getText());
+        logLoadErrorImpl(aIdent.getLineNo(),
+                         aIdent.getColumnNo(),
+                         "javadoc.classInfo",
+                         new Object[] {"@throws", aIdent.getText()});
     }
 
     /** Stores useful information about declared exception. */
     class ExceptionInfo extends ClassInfo
     {
         /** does the exception have throws tag associated with. */
         private boolean mFound;
 
         /**
          * Creates new instance for <code>FullIdent</code>.
          * @param aIdent <code>FullIdent</code> of the exception
          * @param aCurrentClass name of current class.
          */
         ExceptionInfo(FullIdent aIdent, String aCurrentClass)
         {
             super(aIdent, aCurrentClass);
         }
         /** Mark that the exception has associated throws tag */
         final void setFound()
         {
             mFound = true;
         }
         /** @return whether the exception has throws tag associated with */
         final boolean isFound()
         {
             return mFound;
         }
     }
 }
