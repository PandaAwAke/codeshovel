diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
index 328a38cad..13c621a97 100755
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
@@ -138,111 +138,106 @@ public class JavadocStyleCheck
     {
         if (aComment == null) {
             return;
         }
 
         if (mCheckFirstSentence) {
             checkFirstSentence(aComment);
         }
 
         if (mCheckHtml) {
             checkHtml(aComment);
         }
     }
 
     /**
      * Checks that the first sentence ends with proper puctuation.  This method
      * uses a regular expression that checks for the presence of a period,
      * question mark, or exclaimation mark followed either by whitespace, an
      * HTML element, or the end of string. This method ignores {@inheritDoc}
      * comments.
      *
      * @param aComment the source lines that make up the Javadoc comment.
      */
     private void checkFirstSentence(TextBlock aComment)
     {
         final String commentText = getCommentText(aComment.getText());
 
         if ((commentText.length() != 0)
             && !getEndOfSentenceRE().match(commentText)
             && !"{@inheritDoc}".equals(commentText))
         {
             log(aComment.getStartLineNo(), "javadoc.noperiod");
         }
     }
 
     /**
      * Returns the comment text from the Javadoc.
      * @param aComments the lines of Javadoc.
      * @return a comment text String.
      */
     private String getCommentText(String[] aComments)
     {
         final StringBuffer buffer = new StringBuffer();
         boolean foundTag = false;
 
         for (int i = 0; i < aComments.length; i++) {
             String line = aComments[i];
             final int textStart = findTextStart(line);
 
             if (textStart != -1) {
-                // Look for Javadoc tag that's neither a @link nor a
-                // @inheritDoc since they can appear
-                // within the comment text.
+                // Look for Javadoc tag that's not an inline tag
+                // it can appear within the comment text.
+                // Inline tags are denoted by curly braces: {@tag}
                 final int ndx = line.indexOf('@');
                 if ((ndx != -1)
-                    && !line.regionMatches(ndx + 1, "link", 0, "link".length())
-                    && !line.regionMatches(
-                        ndx + 1,
-                        "inheritDoc",
-                        0,
-                        "inheritDoc".length()))
+                    && (ndx == 0 || line.charAt(ndx - 1) != '{'))
                 {
                     foundTag = true;
                     line = line.substring(0, ndx);
                 }
 
                 buffer.append(line.substring(textStart));
                 trimTail(buffer);
                 buffer.append('\n');
 
                 if (foundTag) {
                     break;
                 }
             }
         }
 
         return buffer.toString().trim();
     }
 
     /**
      * Finds the index of the first non-whitespace character ignoring the
      * Javadoc comment start and end strings (&#47** and *&#47) as well as any
      * leading asterisk.
      * @param aLine the Javadoc comment line of text to scan.
      * @return the int index relative to 0 for the start of text
      *         or -1 if not found.
      */
     private int findTextStart(String aLine)
     {
         int textStart = -1;
         for (int i = 0; i < aLine.length(); i++) {
             if (!Character.isWhitespace(aLine.charAt(i))) {
                 if (aLine.regionMatches(i, "/**", 0, "/**".length())) {
                     i += 2;
                 }
                 else if (aLine.regionMatches(i, "*/", 0, 2)) {
                     i++;
                 }
                 else if (aLine.charAt(i) != '*') {
                     textStart = i;
                     break;
                 }
             }
         }
         return textStart;
     }
 
     /**
      * Trims any trailing whitespace or the end of Javadoc comment string.
      * @param aBuffer the StringBuffer to trim.
      */
