diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
index a532b57f8..5ff18f696 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
@@ -107,144 +107,144 @@ public class AutomaticBean
         ConvertUtils.register(new LongConverter(), Long.class);
         ConvertUtils.register(new LongArrayConverter(), longArray.getClass());
         ConvertUtils.register(new ShortConverter(), Short.TYPE);
         ConvertUtils.register(new ShortConverter(), Short.class);
         ConvertUtils.register(new ShortArrayConverter(), shortArray.getClass());
         // TODO: investigate:
         // StringArrayConverter doesn't properly convert an array of tokens with
         // elements containing an underscore, "_".
         // Hacked a replacement class :(
         //        ConvertUtils.register(new StringArrayConverter(),
         //                        String[].class);
         ConvertUtils.register(new StrArrayConverter(), String[].class);
         ConvertUtils.register(new IntegerArrayConverter(), Integer[].class);
 
         // BigDecimal, BigInteger, Class, Date, String, Time, TimeStamp
         // do not use defaults in the default configuration of ConvertUtils
     }
 
     /** the configuration of this bean */
     private Configuration mConfiguration;
 
     /**
      * Implements the Configurable interface using bean introspection.
      *
      * Subclasses are allowed to add behaviour. After the bean
      * based setup has completed first the method
      * {@link #finishLocalSetup finishLocalSetup}
      * is called to allow completion of the bean's local setup,
      * after that the method {@link #setupChild setupChild}
      * is called for each {@link Configuration#getChildren child Configuration}
      * of <code>aConfiguration</code>.
      *
      * @see Configurable
      */
     public final void configure(Configuration aConfiguration)
         throws CheckstyleException
     {
         mConfiguration = aConfiguration;
 
         // TODO: debug log messages
         final String[] attributes = aConfiguration.getAttributeNames();
 
         for (int i = 0; i < attributes.length; i++) {
             final String key = attributes[i];
             final String value = aConfiguration.getAttribute(key);
 
             try {
                 // BeanUtils.copyProperties silently ignores missing setters
                 // for key, so we have to go through great lengths here to
                 // figure out if the bean property really exists.
-                PropertyDescriptor pd =
-                        PropertyUtils.getPropertyDescriptor(this, key);
+                final PropertyDescriptor pd =
+                    PropertyUtils.getPropertyDescriptor(this, key);
                 if (pd == null || pd.getWriteMethod() == null) {
                     throw new CheckstyleException(
                         "Property '" + key + "' in module "
                         + aConfiguration.getName()
                         + " does not exist, please check the documentation");
                 }
 
                 // finally we can set the bean property
                 BeanUtils.copyProperty(this, key, value);
             }
             catch (InvocationTargetException e) {
                 throw new CheckstyleException(
                     "Cannot set property '" + key + "' in module "
                     + aConfiguration.getName() + " to '" + value
                     + "': " + e.getTargetException().getMessage(), e);
             }
             catch (IllegalAccessException e) {
                 throw new CheckstyleException(
                     "cannot access " + key + " in "
                     + this.getClass().getName(), e);
             }
             catch (NoSuchMethodException e) {
                 throw new CheckstyleException(
                     "cannot access " + key + " in "
                     + this.getClass().getName(), e);
             }
             catch (IllegalArgumentException e) {
                 throw new CheckstyleException(
                     "illegal value '" + value + "' for property '" + key
                     + "' of module " + aConfiguration.getName(), e);
             }
             catch (ConversionException e) {
                 throw new CheckstyleException(
                     "illegal value '" + value + "' for property '" + key
                     + "' of module " + aConfiguration.getName(), e);
             }
 
         }
 
         finishLocalSetup();
 
-        Configuration[] childConfigs = aConfiguration.getChildren();
+        final Configuration[] childConfigs = aConfiguration.getChildren();
         for (int i = 0; i < childConfigs.length; i++) {
             final Configuration childConfig = childConfigs[i];
             setupChild(childConfig);
         }
     }
 
     /**
      * Implements the Contextualizable interface using bean introspection.
      * @see Contextualizable
      */
     public final void contextualize(Context aContext)
         throws CheckstyleException
     {
         // TODO: debug log messages
         final String[] attributes = aContext.getAttributeNames();
 
         for (int i = 0; i < attributes.length; i++) {
             final String key = attributes[i];
             final Object value = aContext.get(key);
 
             try {
                 BeanUtils.copyProperty(this, key, value);
             }
             catch (InvocationTargetException e) {
                 // TODO: log.debug("The bean " + this.getClass()
                 // + " is not interested in " + value)
                 throw new CheckstyleException("cannot set property "
                     + key + " to value " + value + " in bean "
                     + this.getClass().getName(), e);
             }
             catch (IllegalAccessException e) {
                 throw new CheckstyleException(
                     "cannot access " + key + " in "
                     + this.getClass().getName(), e);
             }
             catch (IllegalArgumentException e) {
                 throw new CheckstyleException(
                     "illegal value '" + value + "' for property '" + key
                     + "' of bean " + this.getClass().getName(), e);
             }
             catch (ConversionException e) {
                 throw new CheckstyleException(
                     "illegal value '" + value + "' for property '" + key
                     + "' of bean " + this.getClass().getName(), e);
             }
         }
     }
 
     /**
      * Returns the configuration that was used to configure this component.
