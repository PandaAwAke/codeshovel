diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
index 6ce55977c..d3c410b28 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
@@ -49,101 +49,100 @@ public class LocalizedMessage
     /** key for the message format **/
     private final String mKey;
 
     /** arguments for MessageFormat **/
     private final Object[] mArgs;
 
     /** name of the resource bundle to get messages from **/
     private final String mBundle;
 
 
     /**
      * Creates a new <code>LocalizedMessage</code> instance.
      *
      * @param aLineNo line number associated with the message
      * @param aColNo column number associated with the message
      * @param aBundle resource bundle name
      * @param aKey the key to locate the translation
      * @param aArgs arguments for the translation
      */
     public LocalizedMessage(int aLineNo,
                             int aColNo,
                             String aBundle,
                             String aKey,
                             Object[] aArgs)
     {
         mLineNo = aLineNo;
         mColNo = aColNo;
         mKey = aKey;
         mArgs = aArgs;
         mBundle = aBundle;
     }
 
     /**
      * Creates a new <code>LocalizedMessage</code> instance. The column number
      * defaults to 0.
      *
      * @param aLineNo line number associated with the message
      * @param aBundle name of a resource bundle that contains error messages
      * @param aKey the key to locate the translation
      * @param aArgs arguments for the translation
      */
     public LocalizedMessage(
             int aLineNo, String aBundle, String aKey, Object[] aArgs)
     {
         this(aLineNo, 0, aBundle, aKey, aArgs);
     }
 
     /** @return the translated message **/
     public String getMessage()
     {
-        System.err.println("LocalizedMessage.getMessage");
         try {
             // PERF: Very simple approach - wait for performance problems.
             // Important to use the default class loader, and not the one in the
             // Configuration object. This is because the class loader in the
             // Configuration is specified by the user for resolving custom
             // classes.
             final ResourceBundle bundle =
                     ResourceBundle.getBundle(mBundle, sLocale);
             final String pattern = bundle.getString(mKey);
             return MessageFormat.format(pattern, mArgs);
         }
         catch (MissingResourceException ex) {
             ex.printStackTrace();
             // If the Check author didn't provide i18n resource bundles
             // and logs error messages directly, this will return
             // the author's original message
             return MessageFormat.format(mKey, mArgs);
         }
     }
 
     /** @return the line number **/
     public int getLineNo()
     {
         return mLineNo;
     }
 
     /** @return the column number **/
     public int getColumnNo()
     {
         return mColNo;
     }
 
     /** @param aLocale the locale to use for localization **/
     public static void setLocale(Locale aLocale)
     {
         sLocale = aLocale;
     }
 
     ////////////////////////////////////////////////////////////////////////////
     // Interface Comparable methods
     ////////////////////////////////////////////////////////////////////////////
 
     /** @see java.lang.Comparable **/
     public int compareTo(Object aOther)
     {
         final LocalizedMessage lt = (LocalizedMessage) aOther;
         if (getLineNo() == lt.getLineNo()) {
             if (getColumnNo() == lt.getColumnNo()) {
                 return 0;
             }
