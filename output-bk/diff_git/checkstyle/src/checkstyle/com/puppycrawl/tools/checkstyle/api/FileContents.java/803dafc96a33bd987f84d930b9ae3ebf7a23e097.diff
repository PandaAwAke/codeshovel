diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java
index df63ea5b0..ddedf5974 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java
@@ -52,143 +52,146 @@ public final class FileContents implements CommentListener
     /** the lines */
     private final String[] mLines;
 
     /** map of the Javadoc comments indexed on the last line of the comment.
      * The hack is it assumes that there is only one Javadoc comment per line.
      */
     private final Map mJavadocComments = new HashMap();
 
     /** map of the C++ comments indexed on the first line of the comment. */
     private final Map mCPlusPlusComments = new HashMap();
     /**
      * map of the C comments indexed on the first line of the comment to a
      * list of comments on that line
      */
     private final Map mCComments = new HashMap();
 
     /**
      * Creates a new <code>FileContents</code> instance.
      *
      * @param aFilename name of the file
      * @param aLines the contents of the file
      */
     public FileContents(String aFilename, String[] aLines)
     {
         mFilename = aFilename;
         mLines = aLines;
     }
 
     /** {@inheritDoc} */
     public void reportSingleLineComment(String aType,
                                         int aStartLineNo, int aStartColNo)
     {
         reportCppComment(aStartLineNo, aStartColNo);
     }
 
     /** {@inheritDoc} */
     public void reportBlockComment(String aType,
                                    int aStartLineNo, int aStartColNo,
                                    int aEndLineNo, int aEndColNo)
     {
         reportCComment(aStartLineNo, aStartColNo, aEndLineNo, aEndColNo);
     }
 
     /**
      * Report the location of a C++ style comment.
      * @param aStartLineNo the starting line number
      * @param aStartColNo the starting column number
      **/
     public void reportCppComment(int aStartLineNo, int aStartColNo)
     {
-        final String cmt = mLines[aStartLineNo - 1].substring(aStartColNo);
-        mCPlusPlusComments.put(new Integer(aStartLineNo), cmt);
+        final String line = mLines[aStartLineNo - 1];
+        final String[] txt = new String[] {line.substring(aStartColNo)};
+        final Comment comment =
+            new Comment(txt, aStartColNo, aStartLineNo, line.length() - 1);
+        mCPlusPlusComments.put(new Integer(aStartLineNo), comment);
     }
 
     /**
      * Returns a map of all the C++ style comments. The key is a line number,
      * the value is the comment at the line.
      * @return the Map of comments
      */
     public Map getCppComments()
     {
         return Collections.unmodifiableMap(mCPlusPlusComments);
     }
 
     /**
      * Report the location of a C-style comment.
      * @param aStartLineNo the starting line number
      * @param aStartColNo the starting column number
      * @param aEndLineNo the ending line number
      * @param aEndColNo the ending column number
      **/
     public void reportCComment(int aStartLineNo, int aStartColNo,
                                int aEndLineNo, int aEndColNo)
     {
         final String[] cc = extractCComment(aStartLineNo, aStartColNo,
                                             aEndLineNo, aEndColNo);
+        final Comment comment = new Comment(cc, aStartColNo, aEndLineNo,
+                                            aEndColNo);
 
         // save the comment
         final Integer key = new Integer(aStartLineNo);
         if (mCComments.containsKey(key)) {
             final List entries = (List) mCComments.get(key);
-            entries.add(cc);
+            entries.add(comment);
         }
         else {
             final List entries = new ArrayList();
-            entries.add(cc);
+            entries.add(comment);
             mCComments.put(key, entries);
         }
 
         // Remember if possible Javadoc comment
         if (mLines[aStartLineNo - 1].indexOf("/**", aStartColNo) != -1) {
-            Comment comment = new Comment(cc, aStartColNo, aEndLineNo);
-
             mJavadocComments.put(new Integer(aEndLineNo - 1), comment);
         }
     }
 
     /**
      * Returns a map of all C style comments. The key is the line number, the
      * value is a list of C style comments at the line.
      * @return the map of comments
      */
     public Map getCComments()
     {
         return Collections.unmodifiableMap(mCComments);
     }
 
     /**
      * Returns the specified C comment as a String array.
      * @return C comment as a array
      * @param aStartLineNo the starting line number
      * @param aStartColNo the starting column number
      * @param aEndLineNo the ending line number
      * @param aEndColNo the ending column number
      **/
     private String[] extractCComment(int aStartLineNo, int aStartColNo,
                                      int aEndLineNo, int aEndColNo)
     {
         String[] retVal;
         if (aStartLineNo == aEndLineNo) {
             retVal = new String[1];
             retVal[0] = mLines[aStartLineNo - 1].substring(aStartColNo,
                                                            aEndColNo + 1);
         }
         else {
             retVal = new String[aEndLineNo - aStartLineNo + 1];
             retVal[0] = mLines[aStartLineNo - 1].substring(aStartColNo);
             for (int i = aStartLineNo; i < aEndLineNo; i++) {
                 retVal[i - aStartLineNo + 1] = mLines[i];
             }
             retVal[retVal.length - 1] =
                 mLines[aEndLineNo - 1].substring(0, aEndColNo + 1);
         }
         return retVal;
     }
 
     /**
      * Returns the Javadoc comment before the specified line.
      * A return value of <code>null</code> means there is no such comment.
      * @return the Javadoc comment, or <code>null</code> if none
      * @param aLineNo the line number to check before
      **/
     public TextBlock getJavadocBefore(int aLineNo)
