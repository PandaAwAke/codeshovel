diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
index 7bb8b92b6..9dc3ec24a 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
@@ -528,244 +528,250 @@ public class CheckStyleTask
         }
         // Create the checker
         Checker c = null;
         try {
             try {
                 applyExplicitOptions();
                 c = new Checker(mConfig);
                 // setup the listeners
                 AuditListener[] listeners = getListeners();
                 for (int i = 0; i < listeners.length; i++) {
                     c.addListener(listeners[i]);
                 }
             }
             catch (Exception e) {
                 throw new BuildException("Unable to create a Checker", e);
             }
 
             // Process the files
             final String[] files = scanFileSets();
             final int numErrs = c.process(files);
 
             // Handle the return status
             if ((numErrs > 0) && mFailureProperty != null) {
                 getProject().setProperty(mFailureProperty, "true");
             }
 
             if ((numErrs > 0) && mFailOnViolation) {
                 throw new BuildException("Got " + numErrs + " errors.",
                                          location);
             }
         }
         finally {
             if (c != null) {
                 c.destroy();
             }
         }
     }
 
     /**
      * Return the list of listeners set in this task.
      * @return the list of listeners.
      * @throws ClassNotFoundException if an error occurs
      * @throws InstantiationException if an error occurs
      * @throws IllegalAccessException if an error occurs
      * @throws IOException if an error occurs
      */
     protected AuditListener[] getListeners()
         throws ClassNotFoundException, InstantiationException,
         IllegalAccessException, IOException
     {
+        final int listenerCount = Math.max(1, mFormatters.size());
+
+        final AuditListener[] listeners = new AuditListener[listenerCount];
+
         if (mFormatters.size() == 0) {
-            final Formatter f = new Formatter();
-            final FormatterType type = new FormatterType();
-            type.setValue(E_PLAIN);
-            f.setType(type);
-            mFormatters.add(f);
+            OutputStream debug = new LogOutputStream(this, Project.MSG_DEBUG);
+            OutputStream err = new LogOutputStream(this, Project.MSG_ERR);
+            listeners[0] = new DefaultLogger(debug, true, err, true);
+            return listeners;
         }
 
-        final AuditListener[] listeners = new AuditListener[mFormatters.size()];
         for (int i = 0; i < listeners.length; i++) {
             final Formatter f = (Formatter) mFormatters.get(i);
             listeners[i] = f.createListener(this);
         }
         return listeners;
     }
 
     /**
      * returns the list of files (full path name) to process.
      * @return the list of files included via the filesets.
      */
     protected String[] scanFileSets()
     {
         final ArrayList list = new ArrayList();
         if (mFileName != null) {
             // oops we've got an additional one to process, don't
             // forget it. No sweat, it's fully resolved via the setter.
             log("Adding standalone file for audit", Project.MSG_VERBOSE);
             list.add(mFileName);
         }
         for (int i = 0; i < mFileSets.size(); i++) {
             final FileSet fs = (FileSet) mFileSets.get(i);
             final DirectoryScanner ds = fs.getDirectoryScanner(getProject());
             ds.scan();
 
             final String[] names = ds.getIncludedFiles();
             log(i + ") Adding " + names.length + " files from directory "
                 + ds.getBasedir(),
                 Project.MSG_VERBOSE);
 
             for (int j = 0; j < names.length; j++) {
                 final String pathname =
                     ds.getBasedir() + File.separator + names[j];
                 list.add(pathname);
             }
         }
 
         return (String[]) list.toArray(new String[0]);
     }
 
     /**
      * Poor mans enumeration for the formatter types.
      * @author <a href="mailto:oliver@puppycrawl.com">Oliver Burn</a>
      */
     public static class FormatterType
         extends EnumeratedAttribute
     {
         /** my possible values **/
         private static final String[] VALUES = {E_XML, E_PLAIN};
 
         /** @see EnumeratedAttribute **/
         public String[] getValues()
         {
             return VALUES;
         }
     }
 
     /**
      * Details about a formatter to be used.
      * @author <a href="mailto:oliver@puppycrawl.com">Oliver Burn</a>
      */
     public static class Formatter
     {
-        /** class name of formatter **/
-        private String mClassName = null;
+        /** the formatter type **/
+        private FormatterType mFormatterType = null;
         /** the file to output to **/
         private File mToFile = null;
 
         /**
          * Set the type of the formatter.
          * @param aType the type
          */
         public void setType(FormatterType aType)
         {
             final String val = aType.getValue();
-            if (E_XML.equals(val)) {
-                setClassname(XMLLogger.class.getName());
-            }
-            else if (E_PLAIN.equals(val)) {
-                setClassname(DefaultLogger.class.getName());
-            }
-            else {
+            if (!E_XML.equals(val) && !E_PLAIN.equals(val)) {
                 throw new BuildException("Invalid formatter type: " + val);
             }
-        }
 
-        /**
-         * Set the class name of the formatter.
-         * @param aTo the formatter class name
-         */
-        public void setClassname(String aTo)
-        {
-            mClassName = aTo;
+            mFormatterType = aType;
         }
 
         /**
          * Set the file to output to.
          * @param aTo the file to output to
          */
         public void setTofile(File aTo)
         {
             mToFile = aTo;
         }
 
         /**
          * Creates a listener for the formatter.
          * @param aTask the task running
          * @return a listener
-         * @throws ClassNotFoundException if an error occurs
-         * @throws InstantiationException if an error occurs
-         * @throws IllegalAccessException if an error occurs
          * @throws IOException if an error occurs
          */
         public AuditListener createListener(Task aTask)
-            throws ClassNotFoundException, InstantiationException,
-            IllegalAccessException, IOException
+            throws IOException
         {
-            final Class clazz = Class.forName(mClassName);
-            final AuditListener listener = (AuditListener) clazz.newInstance();
-            listener.setOutputStream(createOutputStream(aTask));
-            return listener;
+            if (E_XML.equals(mFormatterType.getValue())) {
+                return createXMLLogger(aTask);
+            }
+            else {
+                return createDefaultLogger(aTask);
+            }
         }
 
         /**
-         * @return an output stream to log with
+         * @return a DefaultLogger instance
          * @param aTask the task to possibly log to
          * @throws IOException if an error occurs
          */
-        protected OutputStream createOutputStream(Task aTask)
+        private AuditListener createDefaultLogger(Task aTask)
             throws IOException
         {
             if (mToFile == null) {
-                return new LogOutputStream(aTask, Project.MSG_INFO);
+                return new DefaultLogger(
+                    new LogOutputStream(aTask, Project.MSG_DEBUG), true,
+                    new LogOutputStream(aTask, Project.MSG_ERR), true);
+            }
+            return new DefaultLogger(new FileOutputStream(mToFile), true);
+        }
+
+        /**
+         * @return an XMLLogger instance
+         * @param aTask the task to possibly log to
+         * @throws IOException if an error occurs
+         */
+        private AuditListener createXMLLogger(Task aTask)
+            throws IOException
+        {
+            if (mToFile == null) {
+                return new XMLLogger(
+                    new LogOutputStream(aTask, Project.MSG_INFO), true);
+            }
+            else {
+                return new XMLLogger(new FileOutputStream(mToFile), true);
             }
-            return new FileOutputStream(mToFile);
         }
     }
 
     /**
      * @param aFrom String to decode the option from
      * @return the RightCurlyOption represented by aFrom
      * @throws BuildException if unable to decode aFrom
      */
     private RightCurlyOption extractRightCurlyOption(String aFrom)
         throws BuildException
     {
         final RightCurlyOption opt = RightCurlyOption.decode(aFrom);
         if (opt == null) {
             throw new BuildException("Unable to parse '" + aFrom + "'.",
                                      location);
         }
         return opt;
     }
 
     /**
      * @param aFrom String to decode the option from
      * @return the PadOption represented by aFrom
      * @throws BuildException if unable to decode aFrom
      */
     private PadOption extractPadOption(String aFrom)
         throws BuildException
     {
         final PadOption opt = PadOption.decode(aFrom);
         if (opt == null) {
             throw new BuildException("Unable to parse '" + aFrom + "'.",
                                      location);
         }
         return opt;
     }
 
     /**
      * Applies the options that have been saved in the mOptionMemory.
      */
     private void applyExplicitOptions()
     {
         final Iterator it = mOptionMemory.iterator();
         while (it.hasNext()) {
             final Runnable runnable = (Runnable) it.next();
             runnable.run();
         }
         mOptionMemory.clear();
     }
 
     /**
      * Set the specified boolean property.
