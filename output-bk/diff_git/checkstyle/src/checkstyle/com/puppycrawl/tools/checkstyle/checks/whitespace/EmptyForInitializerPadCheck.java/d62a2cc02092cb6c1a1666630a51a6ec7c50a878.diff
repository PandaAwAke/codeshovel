diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForInitializerPadCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForInitializerPadCheck.java
index 42e4de57c..1c5686e0f 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForInitializerPadCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForInitializerPadCheck.java
@@ -23,71 +23,71 @@ import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.api.Utils;
 import com.puppycrawl.tools.checkstyle.checks.AbstractOptionCheck;
 
 /**
  * <p>Checks the padding of an empty for initializer; that is whether a
  * space is required at an empty for initializer, or such spaces are
  * forbidden. No check occurs if there is a line wrap at the initializer, as in
  * </p>
  * <pre class="body">
 for (
       ; i &lt; j; i++, j--)
    </pre>
  * <p>
  * The policy to verify is specified using the {@link PadOption} class and
  * defaults to {@link PadOption#NOSPACE}.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="EmptyForInitializerPad"/&gt;
  * </pre>
  *
  * @author lkuehne
  * @version 1.0
  */
 public class EmptyForInitializerPadCheck
     extends AbstractOptionCheck<PadOption>
 {
     /**
      * Sets the paren pad otion to nospace.
      */
     public EmptyForInitializerPadCheck()
     {
         super(PadOption.NOSPACE, PadOption.class);
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.FOR_INIT,
         };
     }
 
     @Override
     public void visitToken(DetailAST aAST)
     {
         if (aAST.getChildCount() == 0) {
             //empty for initializer. test pad before semi.
-            final DetailAST semi = (DetailAST) aAST.getNextSibling();
+            final DetailAST semi = aAST.getNextSibling();
             final int semiLineIdx = semi.getLineNo() - 1;
             final String line = getLines()[semiLineIdx];
             final int before = semi.getColumnNo() - 1;
             //don't check if semi at beginning of line
             if (!Utils.whitespaceBefore(before, line)) {
                 final PadOption option = getAbstractOption();
                 if ((PadOption.NOSPACE == option)
                     && (Character.isWhitespace(line.charAt(before))))
                 {
                     log(semi.getLineNo(), before, "ws.preceded", ";");
                 }
                 else if ((PadOption.SPACE == option)
                          && !Character.isWhitespace(line.charAt(before)))
                 {
                     log(semi.getLineNo(), before, "ws.notPreceded", ";");
                 }
             }
         }
     }
 }
