diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/DetailAST.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/DetailAST.java
index 36a49fc28..16e87f12a 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/DetailAST.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/DetailAST.java
@@ -50,101 +50,101 @@ public final class DetailAST extends CommonAST
     /** the parent token */
     private DetailAST mParent;
     /** previous sibling */
     private DetailAST mPreviousSibling;
 
     /**
      * All token types in this branch.
      * Token 'x' (where x is an int) is in this branch
      * if mBranchTokenTypes.get(x) is true.
      */
     private BitSet mBranchTokenTypes;
 
     /** {@inheritDoc} */
     public void initialize(Token aTok)
     {
         super.initialize(aTok);
         mLineNo = aTok.getLine();
         mColumnNo = aTok.getColumn() - 1; // expect columns to start @ 0
     }
 
     /** {@inheritDoc} */
     public void initialize(AST aAST)
     {
         final DetailAST da = (DetailAST) aAST;
         setText(da.getText());
         setType(da.getType());
         mLineNo = da.getLineNo();
         mColumnNo = da.getColumnNo();
     }
 
     /**
      * Sets this AST's first Child.
      * @param aAST the new first child
      */
     public void setFirstChild(AST aAST)
     {
         mChildCount = NOT_INITIALIZED;
         super.setFirstChild(aAST);
         if (aAST != null) {
             ((DetailAST) aAST).setParent(this);
         }
     }
 
     /**
      * Sets AST's next sibling.
      * @param aAST the new next sibling
      */
     public void setNextSibling(AST aAST)
     {
         super.setNextSibling(aAST);
-        if (aAST != null && mParent != null) {
+        if ((aAST != null) && (mParent != null)) {
             ((DetailAST) aAST).setParent(mParent);
         }
         if (aAST != null) {
             ((DetailAST) aAST).setPreviousSibling(this);
         }
     }
 
     /**
      * Sets previous sibling.
      * @param aAST a previous sibling
      */
     void setPreviousSibling(DetailAST aAST)
     {
         mPreviousSibling = aAST;
     }
 
     /**
      * Adds new child to AST.
      * @param aAST the new child
      */
     public void addChild(AST aAST)
     {
         super.addChild(aAST);
         if (aAST != null) {
             ((DetailAST) aAST).setParent(this);
             ((DetailAST) getFirstChild()).setParent(this);
         }
     }
 
     /**
      * Returns the number of child nodes one level below this node. That is is
      * does not recurse down the tree.
      * @return the number of child nodes
      */
     public int getChildCount()
     {
         // lazy init
         if (mChildCount == NOT_INITIALIZED) {
             mChildCount = 0;
             AST child = getFirstChild();
 
             while (child != null) {
                 mChildCount += 1;
                 child = child.getNextSibling();
             }
         }
         return mChildCount;
     }
 
     /**
