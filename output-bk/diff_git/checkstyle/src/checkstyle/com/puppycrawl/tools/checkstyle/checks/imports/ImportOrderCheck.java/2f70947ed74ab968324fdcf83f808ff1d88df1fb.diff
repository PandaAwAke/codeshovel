diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
index ba1bdf0bf..7324684e1 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
@@ -140,87 +140,87 @@ public class ImportOrderCheck extends Check
     }
 
     /** {@inheritDoc} */
     public int[] getDefaultTokens()
     {
         return new int[]{TokenTypes.IMPORT};
     }
 
     /** {@inheritDoc} */
     public int[] getRequiredTokens()
     {
         return getDefaultTokens();
     }
 
     /**
      * @param aName import name to check.
      * @return group number for given import name.
      */
     private int getGroupNumber(String aName)
     {
         int i = 0;
 
         // find out what group this belongs in
         // loop over mGroups and get index
         for (; i < mGroups.length; i++) {
             if (aName.startsWith(mGroups[i])) {
                 break;
             }
         }
 
         return i;
     }
 
     /** {@inheritDoc} */
     public void beginTree(DetailAST aRootAST)
     {
         mLastGroup = Integer.MIN_VALUE;
         mLastImportLine = Integer.MIN_VALUE;
         mLastImport = "";
         mBeforeFirstImport = true;
     }
 
     /** {@inheritDoc} */
     public void visitToken(DetailAST aAST)
     {
         final FullIdent ident = FullIdent.createFullIdentBelow(aAST);
 
         if (ident != null) {
             String name = ident.getText();
             int groupIdx = getGroupNumber(name);
-            int line = ident.getLineNo();
+            final int line = ident.getLineNo();
 
             if (groupIdx > mLastGroup) {
                 if (!mBeforeFirstImport && mSeparated) {
                     // This check should be made more robust to handle
                     // comments and imports that span more than one line.
                     if (line - mLastImportLine < 2) {
                         log(line, "import.separation", name);
                     }
                 }
             }
             else if (groupIdx == mLastGroup) {
                 if (mOrdered) {
                     boolean shouldFireError = false;
                     if (mCaseSensitive) {
                         shouldFireError = (mLastImport.compareTo(name) >= 0);
                     }
                     else {
                         shouldFireError =
                             (mLastImport.compareToIgnoreCase(name) >= 0);
                     }
                     if (shouldFireError) {
                         log(line, "import.ordering", name);
                     }
                 }
             }
             else {
                 log(line, "import.ordering", name);
             }
 
             mLastGroup = groupIdx;
             mLastImport = name;
             mLastImportLine = aAST.findFirstToken(TokenTypes.SEMI).getLineNo();
             mBeforeFirstImport = false;
         }
     }
 }
