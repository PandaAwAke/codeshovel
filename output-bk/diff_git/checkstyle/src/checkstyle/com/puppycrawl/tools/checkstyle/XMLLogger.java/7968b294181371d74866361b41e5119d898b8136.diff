diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/XMLLogger.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/XMLLogger.java
index f567e5413..7df603bec 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/XMLLogger.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/XMLLogger.java
@@ -1,142 +1,149 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2003  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle;
 
 import java.io.OutputStream;
 import java.io.OutputStreamWriter;
 import java.io.PrintWriter;
 import java.io.StringWriter;
 import java.io.UnsupportedEncodingException;
+import java.util.ResourceBundle;
 
 import com.puppycrawl.tools.checkstyle.api.AuditEvent;
 import com.puppycrawl.tools.checkstyle.api.AuditListener;
 import com.puppycrawl.tools.checkstyle.api.AutomaticBean;
 import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
 
 /**
  * Simple XML logger.
  * It outputs everything in UTF8 (default XML encoding is UTF8) in case
  * we want to localize error messages or simply that filenames are
  * localized and takes care about escaping as well.
 
  * @author <a href="mailto:stephane.bailliez@wanadoo.fr">Stephane Bailliez</a>
  */
 public class XMLLogger
     extends AutomaticBean
     implements AuditListener
 {
     /** decimal radix */
     private static final int BASE_10 = 10;
 
     /** hex radix */
     private static final int BASE_16 = 16;
 
     /** close output stream in auditFinished */
     private boolean mCloseStream;
 
     /** helper writer that allows easy encoding and printing */
     private PrintWriter mWriter;
 
     /** some known entities to detect */
     private static final String[] ENTITIES = {"gt", "amp", "lt", "apos",
                                               "quot", };
 
     /**
      * Creates a new <code>XMLLogger</code> instance.
      * Sets the output to a defined stream.
      * @param aOS the stream to write logs to.
      * @param aCloseStream close aOS in auditFinished
      */
     public XMLLogger(OutputStream aOS, boolean aCloseStream)
     {
         setOutputStream(aOS);
         mCloseStream = aCloseStream;
     }
 
     /**
      * sets the OutputStream
      * @param aOS the OutputStream to use
      **/
     private void setOutputStream(OutputStream aOS)
     {
         try {
             final OutputStreamWriter osw = new OutputStreamWriter(aOS, "UTF8");
             mWriter = new PrintWriter(osw);
         }
         catch (UnsupportedEncodingException e) {
             // unlikely to happen...
             throw new ExceptionInInitializerError(e);
         }
     }
 
     /** @see AuditListener **/
     public void auditStarted(AuditEvent aEvt)
     {
         mWriter.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
-        mWriter.println("<checkstyle>");
+
+        final ResourceBundle compilationProperties =
+            ResourceBundle.getBundle("checkstylecompilation");
+        final String version =
+            compilationProperties.getString("checkstyle.compile.version");
+
+        mWriter.println("<checkstyle version=\"" + version + "\">");
     }
 
     /** @see AuditListener **/
     public void auditFinished(AuditEvent aEvt)
     {
         mWriter.println("</checkstyle>");
         if (mCloseStream) {
             mWriter.close();
         }
         else {
             mWriter.flush();
         }
     }
 
     /** @see AuditListener **/
     public void fileStarted(AuditEvent aEvt)
     {
         mWriter.println("<file name=\"" + aEvt.getFileName() + "\">");
     }
 
     /** @see AuditListener **/
     public void fileFinished(AuditEvent aEvt)
     {
         mWriter.println("</file>");
     }
 
     /** @see AuditListener **/
     public void addError(AuditEvent aEvt)
     {
         if (!SeverityLevel.IGNORE.equals(aEvt.getSeverityLevel())) {
             mWriter.print("<error" + " line=\"" + aEvt.getLine() + "\"");
             if (aEvt.getColumn() > 0) {
                 mWriter.print(" column=\"" + aEvt.getColumn() + "\"");
             }
             mWriter.print(" severity=\""
                 + aEvt.getSeverityLevel().getName()
                 + "\"");
             mWriter.print(" message=\""
                 + encode(aEvt.getMessage())
                 + "\"");
             mWriter.println(" source=\""
                 + encode(aEvt.getSourceName())
                 + "\"/>");
         }
     }
 
     /** @see AuditListener **/
     public void addException(AuditEvent aEvt, Throwable aThrowable)
     {
         final StringWriter sw = new StringWriter();
