diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
index 8ed37f01d..e38cd10b5 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
@@ -1,128 +1,132 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2004  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle;
 
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.Reader;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Set;
+import java.lang.reflect.InvocationTargetException;
 
 import antlr.RecognitionException;
 import antlr.TokenStreamException;
 import antlr.TokenStreamRecognitionException;
+import antlr.TokenStream;
+import antlr.LLkParser;
 
 import com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck;
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.api.Context;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FileContents;
 import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.api.Utils;
 import com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer;
-import com.puppycrawl.tools.checkstyle.grammars.GeneratedJava14Recognizer;
+import com.puppycrawl.tools.checkstyle.grammars.GeneratedJava15Recognizer;
 import com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaLexer;
-import com.puppycrawl.tools.checkstyle.grammars.GeneratedJava14Lexer;
+import com.puppycrawl.tools.checkstyle.grammars.GeneratedJava15Lexer;
+import com.puppycrawl.tools.checkstyle.grammars.CommentListener;
 
 /**
  * Responsible for walking an abstract syntax tree and notifying interested
  * checks at each each node.
  *
  * @author Oliver Burn
  * @version 1.0
  */
 public final class TreeWalker
     extends AbstractFileSetCheck
 {
     /**
      * Overrides ANTLR error reporting so we completely control
      * checkstyle's output during parsing. This is important because
      * we try parsing with several grammers (with/without support for
      * <code>assert</code>). We must not write any error messages when
      * parsing fails because with the next grammar it might succeed
      * and the user will be confused.
      */
-    private static final class SilentJava14Recognizer
-        extends GeneratedJava14Recognizer
+    private static final class SilentJava15Recognizer
+        extends GeneratedJava15Recognizer
     {
         /**
          * Creates a new <code>SilentJava14Recognizer</code> instance.
          *
          * @param aLexer the tokenstream the recognizer operates on.
          */
-        private SilentJava14Recognizer(GeneratedJava14Lexer aLexer)
+        public SilentJava15Recognizer(TokenStream aLexer)
         {
             super(aLexer);
         }
 
         /**
          * Parser error-reporting function, does nothing.
          * @param aRex the exception to be reported
          */
         public void reportError(RecognitionException aRex)
         {
         }
 
         /**
          * Parser error-reporting function, does nothing.
          * @param aMsg the error message
          */
         public void reportError(String aMsg)
         {
         }
 
         /**
          * Parser warning-reporting function, does nothing.
          * @param aMsg the error message
          */
         public void reportWarning(String aMsg)
         {
         }
     }
 
     /** default distance between tab stops */
     private static final int DEFAULT_TAB_WIDTH = 8;
 
     /** maps from token name to checks */
     private final Map mTokenToChecks = new HashMap();
     /** all the registered checks */
     private final Set mAllChecks = new HashSet();
     /** the distance between tab stops */
     private int mTabWidth = DEFAULT_TAB_WIDTH;
     /** cache file **/
     private PropertyCacheFile mCache = new PropertyCacheFile(null, null);
 
     /** class loader to resolve classes with. **/
     private ClassLoader mClassLoader;
 
     /** context of child components */
     private Context mChildContext;
 
     /** a factory for creating submodules (i.e. the Checks) */
     private ModuleFactory mModuleFactory;
 
@@ -170,101 +174,102 @@ public final class TreeWalker
         checkContext.add("messages", getMessageCollector());
         checkContext.add("severity", getSeverity());
         // TODO: hmmm.. this looks less than elegant
         // we have just parsed the string,
         // now we're recreating it only to parse it again a few moments later
         checkContext.add("tabWidth", String.valueOf(mTabWidth));
 
         mChildContext = checkContext;
     }
 
     /**
      * Instantiates, configures and registers a Check that is specified
      * in the provided configuration.
      * @see com.puppycrawl.tools.checkstyle.api.AutomaticBean
      */
     public void setupChild(Configuration aChildConf)
         throws CheckstyleException
     {
         // TODO: improve the error handing
         final String name = aChildConf.getName();
         final Object module = mModuleFactory.createModule(name);
         if (!(module instanceof Check)) {
             throw new CheckstyleException(
                 "TreeWalker is not allowed as a parent of " + name);
         }
         final Check c = (Check) module;
         c.contextualize(mChildContext);
         c.configure(aChildConf);
         c.init();
 
         registerCheck(c);
     }
 
     /**
      * Processes a specified file and reports all errors found.
      * @param aFile the file to process
      **/
     private void process(File aFile)
     {
         // check if already checked and passed the file
         final String fileName = aFile.getPath();
         final long timestamp = aFile.lastModified();
         if (mCache.alreadyChecked(fileName, timestamp)) {
             return;
         }
 
         try {
             getMessageDispatcher().fireFileStarted(fileName);
             final String[] lines = Utils.getLines(fileName, getCharset());
             final FileContents contents = new FileContents(fileName, lines);
-            final DetailAST rootAST = TreeWalker.parse(contents);
+            final DetailAST rootAST =
+                TreeWalker.parse(contents);
             walk(rootAST, contents);
         }
         catch (FileNotFoundException fnfe) {
             Utils.getExceptionLogger()
                 .debug("FileNotFoundException occured.", fnfe);
             getMessageCollector().add(
                 new LocalizedMessage(
                     0,
                     Defn.CHECKSTYLE_BUNDLE,
                     "general.fileNotFound",
                     null,
                     this.getClass()));
         }
         catch (IOException ioe) {
             Utils.getExceptionLogger().debug("IOException occured.", ioe);
             getMessageCollector().add(
                 new LocalizedMessage(
                     0,
                     Defn.CHECKSTYLE_BUNDLE,
                     "general.exception",
                     new String[] {ioe.getMessage()},
                     this.getClass()));
         }
         catch (RecognitionException re) {
             Utils.getExceptionLogger()
                 .debug("RecognitionException occured.", re);
             getMessageCollector().add(
                 new LocalizedMessage(
                     re.getLine(),
                     re.getColumn(),
                     Defn.CHECKSTYLE_BUNDLE,
                     "general.exception",
                     new String[] {re.getMessage()},
                     this.getClass()));
         }
         catch (TokenStreamRecognitionException tre) {
             Utils.getExceptionLogger()
                 .debug("TokenStreamRecognitionException occured.", tre);
             final RecognitionException re = tre.recog;
             if (re != null) {
                 getMessageCollector().add(
                     new LocalizedMessage(
                         re.getLine(),
                         re.getColumn(),
                         Defn.CHECKSTYLE_BUNDLE,
                         "general.exception",
                         new String[] {re.getMessage()},
                         this.getClass()));
             }
             else {
@@ -440,119 +445,169 @@ public final class TreeWalker
         if (child != null) {
             process(child);
         }
 
         notifyLeave(aAST);
 
         final DetailAST sibling = (DetailAST) aAST.getNextSibling();
         if (sibling != null) {
             process(sibling);
         }
 
     }
 
     /**
      * Notify interested checks that visiting a node.
      * @param aAST the node to notify for
      */
     private void notifyVisit(DetailAST aAST)
     {
         final ArrayList visitors =
             (ArrayList) mTokenToChecks.get(
                 TokenTypes.getTokenName(aAST.getType()));
         if (visitors != null) {
             for (int i = 0; i < visitors.size(); i++) {
                 final Check check = (Check) visitors.get(i);
                 check.visitToken(aAST);
             }
         }
     }
 
     /**
      * Notify interested checks that leaving a node.
      * @param aAST the node to notify for
      */
     private void notifyLeave(DetailAST aAST)
     {
         final ArrayList visitors =
             (ArrayList) mTokenToChecks.get(
                 TokenTypes.getTokenName(aAST.getType()));
         if (visitors != null) {
             for (int i = 0; i < visitors.size(); i++) {
                 final Check check = (Check) visitors.get(i);
                 check.leaveToken(aAST);
             }
         }
     }
 
     /**
      * Static helper method to parses a Java source file.
      * @param aContents contains the contents of the file
-     * @throws RecognitionException if parsing failed
      * @throws TokenStreamException if lexing failed
+     * @throws RecognitionException if parsing failed
      * @return the root of the AST
      */
-    public static DetailAST parse(FileContents aContents)
+    public static DetailAST parse(
+        FileContents aContents)
         throws RecognitionException, TokenStreamException
     {
         DetailAST rootAST;
-        try {
-            // try the 1.4 grammar first, this will succeed for
-            // all code that compiles without any warnings in JDK 1.4,
-            // that should cover most cases
-            final Reader sar = new StringArrayReader(aContents.getLines());
-            final GeneratedJava14Lexer jl = new GeneratedJava14Lexer(sar);
-            jl.setFilename(aContents.getFilename());
-            jl.setCommentListener(aContents);
 
-            final GeneratedJava14Recognizer jr =
-                new SilentJava14Recognizer(jl);
-            jr.setFilename(aContents.getFilename());
-            jr.setASTNodeClass(DetailAST.class.getName());
-            jr.compilationUnit();
-            rootAST = (DetailAST) jr.getAST();
+        try {
+            rootAST = parse(
+                GeneratedJava15Lexer.class, SilentJava15Recognizer.class,
+                aContents);
         }
-        catch (RecognitionException re) {
-            // Parsing might have failed because the checked
-            // file contains "assert" as an identifier. Retry with a
-            // grammar that treats "assert" as an identifier
-            // and not as a keyword
+        catch (RecognitionException exception) {
+            rootAST = parse(
+                GeneratedJavaLexer.class, GeneratedJavaRecognizer.class,
+                aContents);
+        }
+        return rootAST;
+    }
 
-            // Arghh - the pain - duplicate code!
+    /**
+     * Static helper method to parses a Java source file with a given
+     * lexer class and parser class.
+     * @param aLexerClass class to use for lexing
+     * @param aParserClass class to use for parsing
+     * @param aContents contains the contents of the file
+     * @throws TokenStreamException if lexing failed
+     * @throws RecognitionException if parsing failed
+     * @return the root of the AST
+     */
+    private static DetailAST parse(
+        Class aLexerClass,
+        Class aParserClass,
+        FileContents aContents)
+        throws RecognitionException, TokenStreamException
+    {
+        try {
             final Reader sar = new StringArrayReader(aContents.getLines());
-            final GeneratedJavaLexer jl = new GeneratedJavaLexer(sar);
-            jl.setFilename(aContents.getFilename());
-            jl.setCommentListener(aContents);
-
-            final GeneratedJavaRecognizer jr = new GeneratedJavaRecognizer(jl);
-            jr.setFilename(aContents.getFilename());
-            jr.setASTNodeClass(DetailAST.class.getName());
-            jr.compilationUnit();
-            rootAST = (DetailAST) jr.getAST();
+            final TokenStream lexer = (TokenStream)
+                aLexerClass.getConstructor(new Class[] {Reader.class})
+                    .newInstance(new Object[] {sar});
+            aLexerClass.getMethod(
+                "setFilename",
+                new Class[] {String.class}).invoke(
+                    lexer, new Object[] {aContents.getFilename()});
+            aLexerClass.getMethod(
+                "setCommentListener", new Class[] {CommentListener.class})
+                    .invoke(lexer, new Object[] {aContents});
+
+            final LLkParser parser = (LLkParser)
+                aParserClass.getConstructor(new Class[] {TokenStream.class})
+                    .newInstance(new Object[] {lexer});
+
+            parser.setFilename(aContents.getFilename());
+            parser.setASTNodeClass(DetailAST.class.getName());
+            aParserClass.getMethod(
+                "compilationUnit", new Class[] {}).invoke(
+                    parser, new Object[] {});
+            return (DetailAST) parser.getAST();
+        }
+        catch (InvocationTargetException exception) {
+            //Re-throw antlr exceptions, pass on runtime exceptions
+            //and convert any other exception to a runtime exception
+            if (RecognitionException.class.isAssignableFrom(
+                exception.getCause().getClass()))
+            {
+                throw (RecognitionException) exception.getCause();
+            }
+            else if (TokenStreamException.class.isAssignableFrom(
+                exception.getCause().getClass()))
+            {
+                throw (TokenStreamException) exception.getCause();
+            }
+            else if (RuntimeException.class.isAssignableFrom(
+                exception.getCause().getClass()))
+            {
+                throw (RuntimeException) exception.getCause();
+            }
+            else {
+                throw new RuntimeException(exception.getCause());
+            }
+        }
+        catch (RuntimeException exception) {
+            //Pass on runtime exceptions
+            throw exception;
+        }
+        catch (Exception exception) {
+            //Convert any reflection exceptions to runtime exceptions
+            throw new RuntimeException(exception);
         }
-        return rootAST;
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.FileSetCheck */
     public void process(File[] aFiles)
     {
         final File[] javaFiles = filter(aFiles);
 
         for (int i = 0; i < javaFiles.length; i++) {
             process(javaFiles[i]);
         }
     }
 
     /**
      * @see com.puppycrawl.tools.checkstyle.api.FileSetCheck
      */
     public void destroy()
     {
         for (Iterator it = mAllChecks.iterator(); it.hasNext();) {
             final Check c = (Check) it.next();
             c.destroy();
         }
         mCache.destroy();
         super.destroy();
     }
 
 }
