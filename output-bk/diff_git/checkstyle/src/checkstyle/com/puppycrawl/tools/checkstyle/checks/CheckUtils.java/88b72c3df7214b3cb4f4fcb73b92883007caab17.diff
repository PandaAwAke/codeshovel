diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java
index e6ba4b5ce..48caa26a9 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java
@@ -120,101 +120,101 @@ public final class CheckUtils
             && isElse(aAST.getParent());
     }
 
     /**
      * Creates <code>FullIdent</code> for given type node.
      * @param aTypeAST a type node.
      * @return <code>FullIdent</code> for given type.
      */
     public static FullIdent createFullType(DetailAST aTypeAST)
     {
         DetailAST arrayDeclAST =
             aTypeAST.findFirstToken(TokenTypes.ARRAY_DECLARATOR);
 
         return createFullTypeNoArrays(arrayDeclAST == null ? aTypeAST
                                                            : arrayDeclAST);
     }
 
     /**
      * @param aTypeAST a type node (no array)
      * @return <code>FullIdent</code> for given type.
      */
     private static FullIdent createFullTypeNoArrays(DetailAST aTypeAST)
     {
         return FullIdent.createFullIdent((DetailAST) aTypeAST.getFirstChild());
     }
 
     // constants for parseDouble()
     /** octal radix */
     private static final int BASE_8 = 8;
 
     /** decimal radix */
     private static final int BASE_10 = 10;
 
     /** hex radix */
     private static final int BASE_16 = 16;
 
     /**
      * Returns the value represented by the specified string of the specified
      * type. Returns 0 for types other than float, double, int, and long.
      * @param aText the string to be parsed.
      * @param aType the token type of the text. Should be a constant of
      * {@link com.puppycrawl.tools.checkstyle.api.TokenTypes}.
      * @return the double value represented by the string argument.
      */
     public static double parseDouble(String aText, int aType)
     {
         double result = 0;
         switch (aType) {
         case TokenTypes.NUM_FLOAT:
         case TokenTypes.NUM_DOUBLE:
-            result = (double) Double.parseDouble(aText);
+            result = Double.parseDouble(aText);
             break;
         case TokenTypes.NUM_INT:
         case TokenTypes.NUM_LONG:
             int radix = BASE_10;
             if (aText.startsWith("0x") || aText.startsWith("0X")) {
                 radix = BASE_16;
                 aText = aText.substring(2);
             }
             else if (aText.charAt(0) == '0') {
                 radix = BASE_8;
                 aText = aText.substring(1);
             }
             if ((aText.endsWith("L")) || (aText.endsWith("l"))) {
                 aText = aText.substring(0, aText.length() - 1);
             }
             if (aText.length() > 0) {
                 if (aType == TokenTypes.NUM_INT) {
                     result = parseInt(aText, radix);
                 }
                 else {
                     result = parseLong(aText, radix);
                 }
             }
             break;
         default:
             break;
         }
         return result;
     }
 
     /**
      * Parses the string argument as a signed integer in the radix specified by
      * the second argument. The characters in the string must all be digits of
      * the specified radix. Handles negative values, which method
      * java.lang.Integer.parseInt(String, int) does not.
      * @param aText the String containing the integer representation to be
      * parsed. Precondition: aText contains a parsable int.
      * @param aRadix the radix to be used while parsing aText.
      * @return the integer represented by the string argument in the specified
      * radix.
      */
     public static int parseInt(String aText, int aRadix)
     {
         int result = 0;
         final int max = aText.length();
         for (int i = 0; i < max; i++) {
             final int digit = Character.digit(aText.charAt(i), aRadix);
             result *= aRadix;
             result += digit;
         }
