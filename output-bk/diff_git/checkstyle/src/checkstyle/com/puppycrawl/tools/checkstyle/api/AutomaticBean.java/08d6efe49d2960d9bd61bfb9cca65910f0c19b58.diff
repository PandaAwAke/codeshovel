diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
index 832ad7bc2..fc56959e1 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
@@ -17,210 +17,274 @@
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.api;
 
 import org.apache.commons.beanutils.BeanUtils;
 import org.apache.commons.beanutils.ConversionException;
 import org.apache.commons.beanutils.ConvertUtils;
 import org.apache.commons.beanutils.converters.AbstractArrayConverter;
 import org.apache.commons.beanutils.converters.BooleanArrayConverter;
 import org.apache.commons.beanutils.converters.BooleanConverter;
 import org.apache.commons.beanutils.converters.ByteArrayConverter;
 import org.apache.commons.beanutils.converters.ByteConverter;
 import org.apache.commons.beanutils.converters.CharacterArrayConverter;
 import org.apache.commons.beanutils.converters.CharacterConverter;
 import org.apache.commons.beanutils.converters.DoubleArrayConverter;
 import org.apache.commons.beanutils.converters.DoubleConverter;
 import org.apache.commons.beanutils.converters.FloatArrayConverter;
 import org.apache.commons.beanutils.converters.FloatConverter;
 import org.apache.commons.beanutils.converters.IntegerArrayConverter;
 import org.apache.commons.beanutils.converters.IntegerConverter;
 import org.apache.commons.beanutils.converters.LongArrayConverter;
 import org.apache.commons.beanutils.converters.LongConverter;
 import org.apache.commons.beanutils.converters.ShortArrayConverter;
 import org.apache.commons.beanutils.converters.ShortConverter;
 
 import java.lang.reflect.InvocationTargetException;
 
 import java.util.ArrayList;
 import java.util.List;
 import java.util.StringTokenizer;
 
 
 /**
  * A Java Bean that implements the component lifecycle interfaces by
  * calling the bean's setters for all configration attributes.
  * @author lkuehne
  */
 public class AutomaticBean implements Configurable, Contextualizable
 {
     static {
         initConverters();
     }
 
     /**
      * Setup the jakarta-commons-beanutils type converters so they throw
      * a ConversionException instead of using the default value.
      */
     private static void initConverters()
     {
         // TODO: is there a smarter way to tell beanutils not to use defaults?
+
+        // If any runtime environment like ANT or an IDE would use beanutils
+        // with different converters we would really be stuck here.
+        // Having to configure a static utility class in this way is really
+        // strange, it seems like a design problem in BeanUtils
+
         boolean[] booleanArray = new boolean[0];
         byte[] byteArray = new byte[0];
         char[] charArray = new char[0];
         double[] doubleArray = new double[0];
         float[] floatArray = new float[0];
         int[] intArray = new int[0];
         long[] longArray = new long[0];
         short[] shortArray = new short[0];
 
         ConvertUtils.register(new BooleanConverter(), Boolean.TYPE);
         ConvertUtils.register(new BooleanConverter(), Boolean.class);
         ConvertUtils.register(
             new BooleanArrayConverter(), booleanArray.getClass());
         ConvertUtils.register(new ByteConverter(), Byte.TYPE);
         ConvertUtils.register(new ByteConverter(), Byte.class);
         ConvertUtils.register(
             new ByteArrayConverter(byteArray), byteArray.getClass());
         ConvertUtils.register(new CharacterConverter(), Character.TYPE);
         ConvertUtils.register(new CharacterConverter(), Character.class);
         ConvertUtils.register(
             new CharacterArrayConverter(), charArray.getClass());
         ConvertUtils.register(new DoubleConverter(), Double.TYPE);
         ConvertUtils.register(new DoubleConverter(), Double.class);
         ConvertUtils.register(
             new DoubleArrayConverter(doubleArray), doubleArray.getClass());
         ConvertUtils.register(new FloatConverter(), Float.TYPE);
         ConvertUtils.register(new FloatConverter(), Float.class);
         ConvertUtils.register(new FloatArrayConverter(), floatArray.getClass());
         ConvertUtils.register(new IntegerConverter(), Integer.TYPE);
         ConvertUtils.register(new IntegerConverter(), Integer.class);
         ConvertUtils.register(new IntegerArrayConverter(), intArray.getClass());
         ConvertUtils.register(new LongConverter(), Long.TYPE);
         ConvertUtils.register(new LongConverter(), Long.class);
         ConvertUtils.register(new LongArrayConverter(), longArray.getClass());
         ConvertUtils.register(new ShortConverter(), Short.TYPE);
         ConvertUtils.register(new ShortConverter(), Short.class);
         ConvertUtils.register(new ShortArrayConverter(), shortArray.getClass());
         // TODO: investigate:
         // StringArrayConverter doesn't properly convert an array of tokens with
         // elements containing an underscore, "_".
         // Hacked a replacement class :(
         //        ConvertUtils.register(new StringArrayConverter(),
         //                        String[].class);
         ConvertUtils.register(new StrArrayConverter(), String[].class);
         ConvertUtils.register(new IntegerArrayConverter(), Integer[].class);
 
         // BigDecimal, BigInteger, Class, Date, String, Time, TimeStamp
         // do not use defaults in the default configuration of ConvertUtils
     }
 
+    /** the configuration of this bean */
+    private Configuration mConfiguration;
+
     /**
      * Implements the Configurable interface using bean introspection.
+     *
+     * Subclasses are allowed to add behaviour. After the bean
+     * based setup has completed first the method
+     * {@link #finishLocalSetup finishLocalSetup}
+     * is called to allow completion of the bean's local setup,
+     * after that the method {@link #setupChild setupChild}
+     * is called for each {@link Configuration#getChildren child Configuration}
+     * of <code>aConfiguration</code>.
+     *
      * @see Configurable
      */
-    public void configure(Configuration aConfiguration)
+    public final void configure(Configuration aConfiguration)
         throws CheckstyleException
     {
+        mConfiguration = aConfiguration;
+
         // TODO: debug log messages
         final String[] attributes = aConfiguration.getAttributeNames();
 
         for (int i = 0; i < attributes.length; i++) {
             final String key = attributes[i];
             final String value = aConfiguration.getAttribute(key);
 
             try {
                 BeanUtils.copyProperty(this, key, value);
             }
             catch (InvocationTargetException e) {
                 throw new CheckstyleException(
                     "for " + aConfiguration.getName() + " unable to set " + key
                     + " with " + value);
             }
             catch (IllegalAccessException e) {
                 throw new CheckstyleException(
                     "cannot access " + key + " in "
                     + this.getClass().getName());
             }
         }
+
+        finishLocalSetup();
+
+        Configuration[] childConfigs = aConfiguration.getChildren();
+        for (int i = 0; i < childConfigs.length; i++) {
+            Configuration childConfig = childConfigs[i];
+            setupChild(childConfig);
+        }
     }
 
     /**
      * Implements the Contextualizable interface using bean introspection.
      * @see Contextualizable
      */
-    public void contextualize(Context aContext) throws CheckstyleException
+    public final void contextualize(Context aContext)
+            throws CheckstyleException
     {
         // TODO: debug log messages
         final String[] attributes = aContext.getAttributeNames();
 
         for (int i = 0; i < attributes.length; i++) {
             final String key = attributes[i];
             final Object value = aContext.get(key);
 
             try {
                 BeanUtils.copyProperty(this, key, value);
             }
             catch (InvocationTargetException e) {
                 // TODO: log.debug("The bean " + this.getClass()
                 // + " is not interested in " + value)
                 throw new CheckstyleException("cannot set property "
                     + key + " to value " + value + " in bean "
                     + this.getClass().getName());
             }
             catch (IllegalAccessException e) {
                 throw new CheckstyleException(
                     "cannot access " + key + " in "
                     + this.getClass().getName());
             }
         }
     }
+
+    /**
+     * Returns the configuration that was used to configure this component.
+     * @return the configuration that was used to configure this component.
+     */
+    protected final Configuration getConfiguration()
+    {
+        return mConfiguration;
+    }
+
+    /**
+     * Provides a hook to finish the part of this compoent's setup that
+     * was not handled by the bean introspection.
+     * <p>
+     * The default implementation does nothing.
+     * </p>
+     * @throws CheckstyleException if there is a configuration error.
+     */
+    protected void finishLocalSetup() throws CheckstyleException
+    {
+    }
+
+    /**
+     * Called by configure() for every child of this component's Configuration.
+     * <p>
+     * The default implementation does nothing.
+     * </p>
+     * @param aChildConf a child of this component's Configuration
+     * @throws CheckstyleException if there is a configuration error.
+     * @see Configuration#getChildren
+     */
+    protected void setupChild(Configuration aChildConf)
+            throws CheckstyleException
+    {
+    }
 }
 
 /**
  * <p>Standard Converter implementation that converts an incoming
  * String into an array of String.  On a conversion failure, returns
  * a specified default value or throws a ConversionException depending
  * on how this instance is constructed.</p>
  *
  * Hacked from
  * http://cvs.apache.org/viewcvs/jakarta-commons/beanutils/src/java/org/apache/commons/beanutils/converters/StringArrayConverter.java
  * because that implementation fails to convert array of tokens with elements
  * containing an underscore, "_" :(
  * 
  * @author Rick Giles
  */
 
 
 class StrArrayConverter extends AbstractArrayConverter
 {
     /**
      * <p>Model object for type comparisons.</p>
      */
     private static String[] sModel = new String[0];
 
     /**
      * Creates a new StrArrayConverter object.
      */
     public StrArrayConverter()
     {
         this.defaultValue = null;
         this.useDefault = false;
     }
 
     /**
      * Create a onverter that will return the specified default value
      * if a conversion error occurs.
      *
      * @param aDefaultValue The default value to be returned
      */
     public StrArrayConverter(Object aDefaultValue)
     {
         this.defaultValue = aDefaultValue;
         this.useDefault = true;
     }
 
     /**
      * Convert the specified input object into an output object of the
      * specified type.
      *
      * @param aType Data type to which this value should be converted
