diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
index 647b2ff9e..fa6991a36 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
@@ -164,101 +164,102 @@ public abstract class AbstractTypeAwareCheck
                 new ClassResolver(getClassLoader(),
                                   mPackageFullIdent.getText(),
                                   mImports);
         }
         return mClassResolver;
     }
 
     /**
      * Attempts to resolve the Class for a specified name.
      * @param aClassName name of the class to resolve
      * @return the resolved class or <code>null</code>
      *          if unable to resolve the class.
      */
     protected final Class resolveClass(String aClassName)
     {
         try {
             return getClassResolver().resolve(aClassName);
         }
         catch (ClassNotFoundException e) {
             return null;
         }
     }
 
     /**
      * Tries to load class. Logs error if unable.
      * @param aIdent name of class which we try to load.
      * @return <code>Class</code> for a ident.
      */
     protected final Class tryLoadClass(FullIdent aIdent)
     {
         final Class clazz = resolveClass(aIdent.getText());
         if (clazz == null) {
             logLoadError(aIdent);
         }
         return clazz;
     }
 
     /**
      * Logs error if unable to load class information.
      * Abstract, should be overrided in subclasses.
      * @param aIdent class name for which we can no load class.
      */
     protected abstract void logLoadError(FullIdent aIdent);
 
     /**
      * Collects the details of a package.
      * @param aAST node containing the package details
      */
     private void processPackage(DetailAST aAST)
     {
-        final DetailAST nameAST = (DetailAST) aAST.getFirstChild();
+        final DetailAST nameAST =
+            (DetailAST) aAST.getLastChild().getPreviousSibling();
         mPackageFullIdent = FullIdent.createFullIdent(nameAST);
     }
 
     /**
      * Collects the details of imports.
      * @param aAST node containing the import details
      */
     private void processImport(DetailAST aAST)
     {
         final FullIdent name = FullIdent.createFullIdentBelow(aAST);
         if (name != null) {
             mImports.add(name.getText());
         }
     }
 
     /**
      * Contains class's <code>FullIdent</code>
      * and <code>Class</code> object if we can load it.
      */
     protected class ClassInfo
     {
         /** <code>FullIdent</code> associated with this class. */
         private FullIdent mName;
         /** <code>Class</code> object of this class if it's loadable. */
         private Class mClass;
         /** is class loadable. */
         private boolean mIsLoadable;
 
         /**
          * Creates new instance of of class information object.
          * @param aName <code>FullIdent</code> associated with new object.
          * @param aClass <code>Class</code> associated with new object
          *               or null id class is not loadable.
          */
         public ClassInfo(FullIdent aName, Class aClass)
         {
             if (aName == null && aClass == null) {
                 throw new NullPointerException(
                     "ClassInfo's name or class should be non-null");
             }
             mName = aName;
             setClazz(aClass);
         }
 
         /**
          * Creates new instance of of class information object.
          * @param aName <code>FullIdent</code> associated with new object.
          */
         public ClassInfo(FullIdent aName)
         {
