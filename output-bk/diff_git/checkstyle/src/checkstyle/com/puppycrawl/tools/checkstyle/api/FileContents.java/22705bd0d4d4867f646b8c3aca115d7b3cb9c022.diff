diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java
index 58ca922d3..ae855fded 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java
@@ -56,229 +56,227 @@ public final class FileContents implements CommentListener
     private final Map<Integer, TextBlock> mJavadocComments =
         new HashMap<Integer, TextBlock>();
     /** map of the C++ comments indexed on the first line of the comment. */
     private final Map<Integer, TextBlock> mCPlusPlusComments =
         new HashMap<Integer, TextBlock>();
 
     /**
      * map of the C comments indexed on the first line of the comment to a
      * list of comments on that line
      */
     private final Map<Integer, List<TextBlock>> mCComments =
         new HashMap<Integer, List<TextBlock>>();
 
     /**
      * Creates a new <code>FileContents</code> instance.
      *
      * @param aFilename name of the file
      * @param aLines the contents of the file
      */
     public FileContents(String aFilename, String[] aLines)
     {
         mFilename = aFilename;
         mLines = aLines;
     }
 
     /** {@inheritDoc} */
     public void reportSingleLineComment(String aType, int aStartLineNo,
             int aStartColNo)
     {
         reportCppComment(aStartLineNo, aStartColNo);
     }
 
     /** {@inheritDoc} */
     public void reportBlockComment(String aType, int aStartLineNo,
             int aStartColNo, int aEndLineNo, int aEndColNo)
     {
         reportCComment(aStartLineNo, aStartColNo, aEndLineNo, aEndColNo);
     }
 
     /**
      * Report the location of a C++ style comment.
      * @param aStartLineNo the starting line number
      * @param aStartColNo the starting column number
      **/
     public void reportCppComment(int aStartLineNo, int aStartColNo)
     {
         final String line = mLines[aStartLineNo - 1];
         final String[] txt = new String[] {line.substring(aStartColNo)};
         final Comment comment = new Comment(txt, aStartColNo, aStartLineNo,
                 line.length() - 1);
-        mCPlusPlusComments.put(new Integer(aStartLineNo), comment);
+        mCPlusPlusComments.put(aStartLineNo, comment);
     }
 
     /**
      * Returns a map of all the C++ style comments. The key is a line number,
      * the value is the comment {@link TextBlock} at the line.
      * @return the Map of comments
      */
     public Map<Integer, TextBlock> getCppComments()
     {
         return Collections.unmodifiableMap(mCPlusPlusComments);
     }
 
     /**
      * Report the location of a C-style comment.
      * @param aStartLineNo the starting line number
      * @param aStartColNo the starting column number
      * @param aEndLineNo the ending line number
      * @param aEndColNo the ending column number
      **/
     public void reportCComment(int aStartLineNo, int aStartColNo,
             int aEndLineNo, int aEndColNo)
     {
         final String[] cc = extractCComment(aStartLineNo, aStartColNo,
                 aEndLineNo, aEndColNo);
         final Comment comment = new Comment(cc, aStartColNo, aEndLineNo,
                 aEndColNo);
 
         // save the comment
-        final Integer key = new Integer(aStartLineNo);
-        if (mCComments.containsKey(key)) {
-            final List<TextBlock> entries = mCComments.get(key);
+        if (mCComments.containsKey(aStartLineNo)) {
+            final List<TextBlock> entries = mCComments.get(aStartLineNo);
             entries.add(comment);
         }
         else {
             final List<TextBlock> entries = new ArrayList<TextBlock>();
             entries.add(comment);
-            mCComments.put(key, entries);
+            mCComments.put(aStartLineNo, entries);
         }
 
         // Remember if possible Javadoc comment
         if (mLines[aStartLineNo - 1].indexOf("/**", aStartColNo) != -1) {
-            mJavadocComments.put(new Integer(aEndLineNo - 1), comment);
+            mJavadocComments.put(aEndLineNo - 1, comment);
         }
     }
 
     /**
      * Returns a map of all C style comments. The key is the line number, the
      * value is a {@link List} of C style comment {@link TextBlock}s
      * that start at that line.
      * @return the map of comments
      */
     public Map<Integer, List<TextBlock>> getCComments()
     {
         return Collections.unmodifiableMap(mCComments);
     }
 
     /**
      * Returns the specified C comment as a String array.
      * @return C comment as a array
      * @param aStartLineNo the starting line number
      * @param aStartColNo the starting column number
      * @param aEndLineNo the ending line number
      * @param aEndColNo the ending column number
      **/
     private String[] extractCComment(int aStartLineNo, int aStartColNo,
             int aEndLineNo, int aEndColNo)
     {
         String[] retVal;
         if (aStartLineNo == aEndLineNo) {
             retVal = new String[1];
             retVal[0] = mLines[aStartLineNo - 1].substring(aStartColNo,
                     aEndColNo + 1);
         }
         else {
             retVal = new String[aEndLineNo - aStartLineNo + 1];
             retVal[0] = mLines[aStartLineNo - 1].substring(aStartColNo);
             for (int i = aStartLineNo; i < aEndLineNo; i++) {
                 retVal[i - aStartLineNo + 1] = mLines[i];
             }
             retVal[retVal.length - 1] = mLines[aEndLineNo - 1].substring(0,
                     aEndColNo + 1);
         }
         return retVal;
     }
 
     /**
      * Returns the Javadoc comment before the specified line.
      * A return value of <code>null</code> means there is no such comment.
      * @return the Javadoc comment, or <code>null</code> if none
      * @param aLineNo the line number to check before
      **/
     public TextBlock getJavadocBefore(int aLineNo)
     {
         // Lines start at 1 to the callers perspective, so need to take off 2
         int lineNo = aLineNo - 2;
 
         // skip blank lines
         while ((lineNo > 0) && (lineIsBlank(lineNo) || lineIsComment(lineNo))) {
             lineNo--;
         }
 
-        return mJavadocComments.get(new Integer(lineNo));
+        return mJavadocComments.get(lineNo);
     }
 
     /** @return the lines in the file */
     public String[] getLines()
     {
         return mLines;
     }
 
     /** @return the name of the file */
     public String getFilename()
     {
         return mFilename;
     }
 
     /**
      * Checks if the specified line is blank.
      * @param aLineNo the line number to check
      * @return if the specified line consists only of tabs and spaces.
      **/
     public boolean lineIsBlank(int aLineNo)
     {
         // possible improvement: avoid garbage creation in trim()
         return "".equals(mLines[aLineNo].trim());
     }
 
     /**
      * Checks if the specified line is a single-line comment without code.
      * @param aLineNo  the line number to check
      * @return if the specified line consists of only a single line comment
      *         without code.
      **/
     public boolean lineIsComment(int aLineNo)
     {
         return MATCH_SINGLELINE_COMMENT.matcher(mLines[aLineNo]).matches();
     }
 
     /**
      * Checks if the specified position intersects with a comment.
      * @param aStartLineNo the starting line number
      * @param aStartColNo the starting column number
      * @param aEndLineNo the ending line number
      * @param aEndColNo the ending column number
      * @return true if the positions intersects with a comment.
      **/
     public boolean hasIntersectionWithComment(int aStartLineNo,
             int aStartColNo, int aEndLineNo, int aEndColNo)
     {
         // Check C comments (all comments should be checked)
         final Collection<List<TextBlock>> values = mCComments.values();
         for (List<TextBlock> row : values) {
             for (TextBlock comment : row) {
                 if (comment.intersects(aStartLineNo, aStartColNo, aEndLineNo,
                         aEndColNo))
                 {
                     return true;
                 }
             }
         }
 
         // Check CPP comments (line searching is possible)
         for (int lineNumber = aStartLineNo; lineNumber <= aEndLineNo;
              lineNumber++)
         {
-            final TextBlock comment = mCPlusPlusComments
-                    .get(new Integer(lineNumber));
+            final TextBlock comment = mCPlusPlusComments.get(lineNumber);
             if ((comment != null)
                     && comment.intersects(aStartLineNo, aStartColNo,
                             aEndLineNo, aEndColNo))
             {
                 return true;
             }
         }
         return false;
     }
 
 }
