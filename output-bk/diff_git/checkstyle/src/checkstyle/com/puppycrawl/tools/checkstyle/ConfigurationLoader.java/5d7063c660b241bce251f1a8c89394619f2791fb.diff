diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
index 5e1860957..1ddc99bab 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
@@ -133,158 +133,158 @@ public final class ConfigurationLoader
 
                 mConfigStack.push(conf);
             }
             else if (aQName.equals(PROPERTY)) {
                 //extract name and value
                 final String name = aAtts.getValue(NAME);
                 final String value;
                 try {
                     value = replaceProperties(aAtts.getValue(VALUE),
                         mOverridePropsResolver, aAtts.getValue(DEFAULT));
                 }
                 catch (CheckstyleException ex) {
                     throw new SAXException(ex.getMessage());
                 }
 
                 //add to attributes of configuration
                 final DefaultConfiguration top =
                     (DefaultConfiguration) mConfigStack.peek();
                 top.addAttribute(name, value);
             }
         }
 
         /** @see org.xml.sax.helpers.DefaultHandler **/
         public void endElement(String aNamespaceURI,
                                String aLocalName,
                                String aQName)
         {
             if (aQName.equals(MODULE)) {
                 mConfigStack.pop();
             }
         }
 
     }
 
     /** the SAX document handler */
     private InternalLoader mSaxHandler;
 
     /** property resolver **/
     private final PropertyResolver mOverridePropsResolver;
     /** the loaded configurations **/
     private final Stack mConfigStack = new Stack();
     /** the Configuration that is being built */
     private Configuration mConfiguration;
 
     /**
      * Creates mapping between local resources and dtd ids.
      * @return map between local resources and dtd ids.
      */
     private static Map createIdToResourceNameMap()
     {
-        Map map = new HashMap();
+        final Map map = new HashMap();
         map.put(DTD_PUBLIC_ID_1_0, DTD_RESOURCE_NAME_1_0);
         map.put(DTD_PUBLIC_ID_1_1, DTD_RESOURCE_NAME_1_1);
         map.put(DTD_PUBLIC_ID_1_2, DTD_RESOURCE_NAME_1_2);
         return map;
     }
 
 
     /**
      * Creates a new <code>ConfigurationLoader</code> instance.
      * @param aOverrideProps resolver for overriding properties
      * @throws ParserConfigurationException if an error occurs
      * @throws SAXException if an error occurs
      */
     private ConfigurationLoader(PropertyResolver aOverrideProps)
         throws ParserConfigurationException, SAXException
     {
         mSaxHandler = new InternalLoader();
         mOverridePropsResolver = aOverrideProps;
     }
 
     /**
      * Parses the specified stream loading the configuration information.
      * The stream is NOT closed after parsing, it is the responsibility of
      * the caller to close the stream.
      *
      * @param aStream the stream that contains the configuration data
      * @throws IOException if an error occurs
      * @throws SAXException if an error occurs
      */
     private void parseInputStream(InputStream aStream)
         throws IOException, SAXException
     {
         final InputStream configStream =
             new BufferedInputStream(aStream, TWO_KB);
         final InputSource inputSource = new InputSource(configStream);
         mSaxHandler.parseInputSource(inputSource);
     }
 
 
     /**
      * Returns the module configurations in a specified file.
      * @param aConfig location of config file, can be either a URL or a filename
      * @param aOverridePropsResolver overriding properties
      * @return the check configurations
      * @throws CheckstyleException if an error occurs
      */
     public static Configuration loadConfiguration(
         String aConfig, PropertyResolver aOverridePropsResolver)
         throws CheckstyleException
     {
         try {
             final ConfigurationLoader loader =
                 new ConfigurationLoader(aOverridePropsResolver);
             // figure out if this is a File or a URL
             InputStream configStream;
             try {
-                URL url = new URL(aConfig);
+                final URL url = new URL(aConfig);
                 configStream = url.openStream();
             }
             catch (MalformedURLException ex) {
                 configStream = new FileInputStream(aConfig);
             }
             final InputStream bufferedStream =
                 new BufferedInputStream(configStream);
             loader.parseInputStream(bufferedStream);
             bufferedStream.close();
             return loader.getConfiguration();
         }
         catch (FileNotFoundException e) {
             throw new CheckstyleException(
                 "unable to find " + aConfig, e);
         }
         catch (ParserConfigurationException e) {
             throw new CheckstyleException(
                 "unable to parse " + aConfig, e);
         }
         catch (SAXParseException e) {
             throw new CheckstyleException("unable to parse "
                     + aConfig + " - " + e.getMessage() + ":" + e.getLineNumber()
                     + ":" + e.getColumnNumber(), e);
         }
         catch (SAXException e) {
             throw new CheckstyleException("unable to parse "
                     + aConfig + " - " + e.getMessage(), e);
         }
         catch (IOException e) {
             throw new CheckstyleException("unable to read " + aConfig, e);
         }
     }
 
     /**
      * Returns the configuration in the last file parsed.
      * @return Configuration object
      */
     private Configuration getConfiguration()
     {
         return mConfiguration;
     }
 
     /**
      * Replaces <code>${xxx}</code> style constructions in the given value
      * with the string value of the corresponding data types.
      *
      * The method is package visible to facilitate testing.
      *
      * @param aValue The string to be scanned for property references.
      *              May be <code>null</code>, in which case this
