diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/Check.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/Check.java
index b6b7710b1..e7e78cbaa 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/Check.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/Check.java
@@ -195,78 +195,78 @@ public abstract class Check extends AbstractViolationReporter
      * Set the class loader associated with the tree.
      * @param aLoader the class loader
      */
     public final void setClassLoader(ClassLoader aLoader)
     {
         mLoader = aLoader;
     }
 
     /**
      * Returns the class loader associated with the tree.
      * @return the class loader
      */
     public final ClassLoader getClassLoader()
     {
         return mLoader;
     }
 
     /** @return the tab width to report errors with */
     protected final int getTabWidth()
     {
         return mTabWidth;
     }
 
     /**
      * Set the tab width to report errors with
      * @param aTabWidth an <code>int</code> value
      */
     public final void setTabWidth(int aTabWidth)
     {
         mTabWidth = aTabWidth;
     }
 
     /**
      * Log an error message.
      *
      * @param aLine the line number where the error was found
      * @param aKey the message that describes the error
      * @param aArgs the details of the message
      *
      * @see java.text.MessageFormat
      */
     protected final void log(int aLine, String aKey, Object aArgs[])
     {
         mMessages.add(
             new LocalizedMessage(
                 aLine,
                 getMessageBundle(),
                 aKey,
                 aArgs,
                 getSeverityLevel(),
-                this.getClass().getName()));
+                this.getClass()));
     }
 
 
     /**
      * Helper method to log a LocalizedMessage.
      *
      * @param aLineNo line number to associate with the message
      * @param aColNo column number to associate with the message
      * @param aKey key to locale message format
      * @param aArgs arguments for message
      */
     protected final void log(int aLineNo, int aColNo,
                              String aKey, Object[] aArgs)
     {
         final int col = 1 + Utils.lengthExpandedTabs(
             getLines()[aLineNo - 1], aColNo, getTabWidth());
         mMessages.add(
             new LocalizedMessage(
                 aLineNo,
                 col,
                 getMessageBundle(),
                 aKey,
                 aArgs,
                 getSeverityLevel(),
-                this.getClass().getName()));
+                this.getClass()));
     }
 }
