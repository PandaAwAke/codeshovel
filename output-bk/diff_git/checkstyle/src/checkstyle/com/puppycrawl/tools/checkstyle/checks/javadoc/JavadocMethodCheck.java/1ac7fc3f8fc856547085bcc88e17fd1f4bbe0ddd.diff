diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
index 184a37be8..941cf0874 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
@@ -207,122 +207,124 @@ public class JavadocMethodCheck
 
     /**
      * controls whether to allow documented exception that
      * are subclass of one of declared exceptions.
      * @param aFlag a <code>Boolean</code> value
      */
     public void setAllowThrowsTagsForSubclasses(boolean aFlag)
     {
         mAllowThrowsTagsForSubclasses = aFlag;
     }
 
     /**
      * controls whether to allow a method which has parameters
      * to omit matching param tags in the javadoc.
      * Defaults to false.
      * @param aFlag a <code>Boolean</code> value
      */
     public void setAllowMissingParamTags(boolean aFlag)
     {
         mAllowMissingParamTags = aFlag;
     }
 
     /**
      * controls whether to allow a method which declares that
      * it throws exceptions to omit matching throws tags
      * in the javadoc. Defaults to false.
      * @param aFlag a <code>Boolean</code> value
      */
     public void setAllowMissingThrowsTags(boolean aFlag)
     {
         mAllowMissingThrowsTags = aFlag;
     }
 
     /**
      * controls whether to allow a method which returns
      * non-void type to omit the return tag in the javadoc.
      * Defaults to false.
      * @param aFlag a <code>Boolean</code> value
      */
     public void setAllowMissingReturnTag(boolean aFlag)
     {
         mAllowMissingReturnTag = aFlag;
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.PACKAGE_DEF,
             TokenTypes.IMPORT,
+            TokenTypes.CLASS_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.CTOR_DEF,
             TokenTypes.ANNOTATION_FIELD_DEF,
         };
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public int[] getAcceptableTokens()
     {
         return new int[] {
             TokenTypes.METHOD_DEF,
             TokenTypes.CTOR_DEF,
             TokenTypes.ANNOTATION_FIELD_DEF,
         };
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public int[] getRequiredTokens()
     {
         return new int[] {
             TokenTypes.PACKAGE_DEF,
             TokenTypes.IMPORT,
+            TokenTypes.CLASS_DEF,
         };
     }
 
     /**
      * Checks Javadoc comments for a method or constructor.
      * @param aAST the tree node for the method or constructor.
      */
     protected final void processAST(DetailAST aAST)
     {
         if (shouldCheck(aAST)) {
             final FileContents contents = getFileContents();
             final TextBlock cmt = contents.getJavadocBefore(aAST.getLineNo());
 
             if (cmt == null) {
                 log(aAST, "javadoc.missing");
             }
             else {
                 checkComment(aAST, cmt);
             }
         }
     }
 
     /**
      * Whether we should check this node.
      * @param aAST a given node.
      * @return whether we should check a given node.
      */
     private boolean shouldCheck(final DetailAST aAST)
     {
         final DetailAST mods = aAST.findFirstToken(TokenTypes.MODIFIERS);
         final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);
         final Scope scope = ScopeUtils.inInterfaceOrAnnotationBlock(aAST)
                 ? Scope.PUBLIC : declaredScope;
         final Scope surroundingScope = ScopeUtils.getSurroundingScope(aAST);
 
         return scope.isIn(mScope) && surroundingScope.isIn(mScope)
             && ((mExcludeScope == null)
                 || !scope.isIn(mExcludeScope)
                 || !surroundingScope.isIn(mExcludeScope));
     }
 
     /**
      * Checks the Javadoc for a method.
      * @param aAST the token for the method
      * @param aComment the Javadoc comment
      */
     private void checkComment(DetailAST aAST, TextBlock aComment)
     {
         final List tags = getMethodTags(aComment);
 
@@ -425,101 +427,102 @@ public class JavadocMethodCheck
                             && !lFin.equals(END_JAVADOC))
                         {
                             tags.add(new JavadocTag(currentLine, p1));
                         }
                     }
                     remIndex++;
                 }
             }
         }
         return tags;
     }
 
     /**
      * Computes the parameter nodes for a method.
      * @param aAST the method node.
      * @return the list of parameter nodes for aAST.
      **/
     private List getParameters(DetailAST aAST)
     {
         final DetailAST params = aAST.findFirstToken(TokenTypes.PARAMETERS);
         final List retVal = new ArrayList();
 
         DetailAST child = (DetailAST) params.getFirstChild();
         while (child != null) {
             if (child.getType() == TokenTypes.PARAMETER_DEF) {
                 final DetailAST ident = child.findFirstToken(TokenTypes.IDENT);
                 retVal.add(ident);
             }
             child = (DetailAST) child.getNextSibling();
         }
         return retVal;
     }
 
      /**
      * Computes the exception nodes for a method.
      * @param aAST the method node.
      * @return the list of exception nodes for aAST.
      **/
     private List getThrows(DetailAST aAST)
     {
         final List retVal = new ArrayList();
         final DetailAST throwsAST =
             aAST.findFirstToken(TokenTypes.LITERAL_THROWS);
         if (throwsAST != null) {
             DetailAST child = (DetailAST) throwsAST.getFirstChild();
             while (child != null) {
                 if ((child.getType() == TokenTypes.IDENT)
                     || (child.getType() == TokenTypes.DOT))
                 {
                     final ExceptionInfo ei =
-                        new ExceptionInfo(FullIdent.createFullIdent(child));
+                        new ExceptionInfo(FullIdent.createFullIdent(child),
+                                          getCurrentClassName());
                     retVal.add(ei);
                 }
                 child = (DetailAST) child.getNextSibling();
             }
         }
         return retVal;
     }
 
 
     /**
      * Checks a set of tags for matching parameters.
      * @param aTags the tags to check
      * @param aParams the list of parameters to check
      * @param aReportExpectedTags whether we should report if do
      *        not find expected tag
      **/
     private void checkParamTags(List aTags, List aParams,
                                 boolean aReportExpectedTags)
     {
         // Loop over the tags, checking to see they exist in the params.
         final ListIterator tagIt = aTags.listIterator();
         while (tagIt.hasNext()) {
             final JavadocTag tag = (JavadocTag) tagIt.next();
 
             if (!tag.isParamTag()) {
                 continue;
             }
 
             tagIt.remove();
 
             // Loop looking for matching param
             boolean found = false;
             final Iterator paramIt = aParams.iterator();
             while (paramIt.hasNext()) {
                 final DetailAST param = (DetailAST) paramIt.next();
                 if (param.getText().equals(tag.getArg1())) {
                     found = true;
                     paramIt.remove();
                     break;
                 }
             }
 
             // Handle extra JavadocTag
             if (!found) {
                 log(tag.getLineNo(), "javadoc.unusedTag",
                               "@param", tag.getArg1());
             }
         }
 
         // Now dump out all parameters without tags :- unless
@@ -626,94 +629,96 @@ public class JavadocMethodCheck
                 }
                 else if (mAllowThrowsTagsForSubclasses) {
                     if (!classLoaded) {
                         documentedClass = loadClassForTag(tag);
                         classLoaded = true;
                     }
                     found = isSubclass(documentedClass, ei.getClazz());
                 }
             }
 
             // Handle extra JavadocTag.
             if (!found) {
                 boolean reqd = true;
                 if (mAllowUndeclaredRTE) {
                     if (!classLoaded) {
                         documentedClass = loadClassForTag(tag);
                         classLoaded = true;
                     }
                     reqd = !isUnchecked(documentedClass);
                 }
 
                 if (reqd) {
                     log(tag.getLineNo(), "javadoc.unusedTag",
                                   "@throws", tag.getArg1());
                 }
             }
         }
 
         // Now dump out all throws without tags :- unless
         // the user has chosen to suppress these problems
         if (!mAllowMissingThrowsTags && aReportExpectedTags) {
             final ListIterator throwIt = aThrows.listIterator();
             while (throwIt.hasNext()) {
                 final ExceptionInfo ei = (ExceptionInfo) throwIt.next();
                 if (!ei.isFound()) {
                     final FullIdent fi = ei.getName();
                     log(fi.getLineNo(), fi.getColumnNo(),
                         "javadoc.expectedTag", "@throws", fi.getText());
                 }
             }
         }
     }
 
     /**
      * Tries to load class for throws tag. Logs error if unable.
      * @param aTag name of class which we try to load.
      * @return <code>Class</code> for the tag.
      */
     private Class loadClassForTag(JavadocTag aTag)
     {
-        Class clazz = resolveClass(aTag.getArg1());
+        final String currentClassName = "";
+        Class clazz = resolveClass(aTag.getArg1(), currentClassName);
         if (clazz == null) {
             log(aTag.getLineNo(), "javadoc.classInfo",
                 "@throws", aTag.getArg1());
         }
         return clazz;
     }
 
     /**
      * Logs error if unable to load class information.
      * @param aIdent class name for which we can no load class.
      */
     protected final void logLoadError(FullIdent aIdent)
     {
         log(aIdent.getLineNo(), "javadoc.classInfo", "@throws",
             aIdent.getText());
     }
 
     /** Stores useful information about declared exception. */
     class ExceptionInfo extends ClassInfo
     {
         /** does the exception have throws tag associated with. */
         private boolean mFound;
 
         /**
          * Creates new instance for <code>FullIdent</code>.
          * @param aIdent <code>FullIdent</code> of the exception
+         * @param aCurrentClass name of current class.
          */
-        ExceptionInfo(FullIdent aIdent)
+        ExceptionInfo(FullIdent aIdent, String aCurrentClass)
         {
-            super(aIdent);
+            super(aIdent, aCurrentClass);
         }
         /** Mark that the exception has associated throws tag */
         final void setFound()
         {
             mFound = true;
         }
         /** @return whether the exception has throws tag associated with */
         final boolean isFound()
         {
             return mFound;
         }
     }
 }
