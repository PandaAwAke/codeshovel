diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
index 781927db7..1c7d483e0 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
@@ -42,101 +42,101 @@ public class PackageNamesLoader
 {
     /** the public ID for the configuration dtd */
     private static final String DTD_PUBLIC_ID =
         "-//Puppy Crawl//DTD Package Names 1.0//EN";
 
     /** the resource for the configuration dtd */
     private static final String DTD_RESOURCE_NAME =
         "com/puppycrawl/tools/checkstyle/packages_1_0.dtd";
 
     /** Name of default checkstyle package names resource file.
      * The file must be in the classpath.
      */
     private static final String DEFAULT_PACKAGES = "checkstyle_packages.xml";
             
     /** list of class names */
     private final List mPackageNames = new ArrayList();
     
     /** The loaded package names */   
     private Stack mPackageStack = new Stack();
     
     /**
      * Creates a new <code>PackageNameLoader</code> instance.
      * @throws ParserConfigurationException if an error occurs
      * @throws SAXException if an error occurs
      */
     private PackageNamesLoader()
         throws ParserConfigurationException, SAXException
     {
         super(DTD_PUBLIC_ID, DTD_RESOURCE_NAME);
     }
     
     /**
      * Returns the list of package names in the last file parsed.
      * @return the list of package names.
      */
     private String[] getPackageNames()
     {
         return (String[]) mPackageNames.toArray(
             new String[mPackageNames.size()]);
     }
 
     /** @see org.xml.sax.helpers.DefaultHandler **/
     public void startElement(String aNamespaceURI,
                              String aLocalName,
                              String aQName,
                              Attributes aAtts)
             throws SAXException
     {
         if (aQName.equals("package")) {
             //push package name
-            final String name = (String) aAtts.getValue("name");
+            final String name = aAtts.getValue("name");
             if (name == null) {
                 throw new SAXException("missing package name");
             }
             mPackageStack.push(name);
         }
    }
     
     /**
      * Creates a full package name from the package names on the stack.
      * @return the full name of the current package.
      */ 
     private String getPackageName()
     {
         if (mPackageStack.isEmpty()) {
             return "";
         }
         final StringBuffer buf = new StringBuffer();
         final Iterator it = mPackageStack.iterator();
         while (it.hasNext()) {
             String subPackage = (String) it.next();
             if (!subPackage.endsWith(".")) {
                 subPackage += ".";
             }
             buf.append(subPackage);
         }
         return buf.toString();
     }
     
     /** @see org.xml.sax.helpers.DefaultHandler **/
     public void endElement(String aNamespaceURI,
                            String aLocalName,
                            String aQName)
     {
         if (aQName.equals("package")) {
             mPackageNames.add(getPackageName());
             mPackageStack.pop();
         }
     }
 
     /**
      * Returns the default list of package names.
      * @param aClassLoader the class loader that gets the
      * default package names.
      * @return the default list of package names.
      * @throws CheckstyleException if an error occurs.
      */
     public static String[] loadPackageNames(ClassLoader aClassLoader)
         throws CheckstyleException
     {
 
