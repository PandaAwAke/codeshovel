diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
index 8ae683d80..f138371f2 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
@@ -225,106 +225,112 @@ public final class TreeWalker
             final String[] lines = Utils.getLines(fileName);
             final FileContents contents = new FileContents(fileName, lines);
             final DetailAST rootAST = TreeWalker.parse(contents);
             walk(rootAST, contents);
         }
         catch (FileNotFoundException fnfe) {
             mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE,
                                                "general.fileNotFound", null));
         }
         catch (IOException ioe) {
             mMessages.add(new LocalizedMessage(
                               0, Defn.CHECKSTYLE_BUNDLE,
                               "general.exception",
                               new String[] {ioe.getMessage()}));
         }
         catch (RecognitionException re) {
             mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE,
                                                "general.exception",
                                                new String[] {re.getMessage()}));
         }
         catch (TokenStreamException te) {
             mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE,
                                                "general.exception",
                                                new String[] {te.getMessage()}));
         }
 
         if (mMessages.size() == 0) {
             mCache.checkedOk(fileName, timestamp);
         }
         else {
             getMessageDispatcher().fireErrors(
                     fileName, mMessages.getMessages());
         }
 
         getMessageDispatcher().fireFileFinished(fileName);
     }
 
     /**
      * Register a check for a given configuration.
      * @param aCheck the check to register
      */
     void registerCheck(Check aCheck)
            throws CheckstyleException
     {
         final Set checkTokens = aCheck.getTokenNames();
         if (!checkTokens.isEmpty()) {
             int acceptableTokens[] = aCheck.getAcceptableTokens();
             Arrays.sort(acceptableTokens);
             final Iterator it = checkTokens.iterator();
             while (it.hasNext()) {
-                String token = (String) it.next();
-                int tokenId = TokenTypes.getTokenId(token);
-                if (Arrays.binarySearch(acceptableTokens, tokenId) >= 0) {
-                    registerCheck(token, aCheck);
+                final String token = (String) it.next();
+                try {
+                    int tokenId = TokenTypes.getTokenId(token);                    
+                    if (Arrays.binarySearch(acceptableTokens, tokenId) >= 0) {
+                        registerCheck(token, aCheck);
+                    }
+                    // TODO: else error message?
+                }
+                catch (IllegalArgumentException ex) {
+                    throw new CheckstyleException("illegal token \""
+                        + token + "\" in check " + aCheck);
                 }
-                // TODO: else error message?
             }
         }
         else {
             final int[] tokens = aCheck.getDefaultTokens();
             for (int i = 0; i < tokens.length; i++) {
                 registerCheck(tokens[i], aCheck);
             }
         }
         mAllChecks.add(aCheck);
     }
 
     /**
      * Register a check for a specified token id.
      * @param aTokenID the id of the token
      * @param aCheck the check to register
      */
     private void registerCheck(int aTokenID, Check aCheck)
     {
         registerCheck(TokenTypes.getTokenName(aTokenID), aCheck);
     }
 
     /**
      * Register a check for a specified token name
      * @param aToken the name of the token
      * @param aCheck the check to register
      */
     private void registerCheck(String aToken, Check aCheck)
     {
         ArrayList visitors = (ArrayList) mTokenToChecks.get(aToken);
         if (visitors == null) {
             visitors = new ArrayList();
             mTokenToChecks.put(aToken, visitors);
         }
 
         visitors.add(aCheck);
     }
 
     /**
      * Initiates the walk of an AST.
      * @param aAST the root AST
      * @param aContents the contents of the file the AST was generated from
      */
     private void walk(DetailAST aAST, FileContents aContents)
     {
         mMessages.reset();
         notifyBegin(aContents);
 
          // empty files are not flagged by javac, will yield aAST == null
         if (aAST != null) {
             aAST.setParent(null);
