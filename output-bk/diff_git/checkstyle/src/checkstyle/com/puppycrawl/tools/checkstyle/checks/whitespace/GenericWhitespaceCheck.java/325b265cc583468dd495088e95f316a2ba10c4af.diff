diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java
index 4f364ed06..d87250661 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java
@@ -40,86 +40,105 @@ public class GenericWhitespaceCheck extends Check
         return new int[] {TokenTypes.GENERIC_START, TokenTypes.GENERIC_END};
     }
 
     /** {@inheritDoc} */
     @Override
     public void beginTree(DetailAST aRootAST)
     {
         // Reset for each tree, just incase there are errors in preceeding
         // trees.
         mDepth = 0;
     }
 
     /** {@inheritDoc} */
     @Override
     public void visitToken(DetailAST aAST)
     {
         if (aAST.getType() == TokenTypes.GENERIC_START) {
             processStart(aAST);
             mDepth++;
         }
         else if (aAST.getType() == TokenTypes.GENERIC_END) {
             processEnd(aAST);
             mDepth--;
         }
     }
 
     /**
      * Checks the token for the end of Generics.
      * @param aAST the token to check
      */
     private void processEnd(DetailAST aAST)
     {
         final String line = getLines()[aAST.getLineNo() - 1];
         final int before = aAST.getColumnNo() - 1;
         final int after = aAST.getColumnNo() + 1;
 
         if ((0 <= before) && Character.isWhitespace(line.charAt(before))
                 && !Utils.whitespaceBefore(before, line))
         {
             log(aAST.getLineNo(), before, "ws.preceded", ">");
         }
 
         if (after < line.length()) {
             // Check if the last Generic, in which case must be a whitespace
             // or a '(),'.
             if (1 == mDepth) {
                 final char charAfter = line.charAt(after);
                 if (!Character.isWhitespace(charAfter) && ('(' != charAfter)
                         && (')' != charAfter) && (',' != charAfter))
                 {
-                    log(aAST.getLineNo(), after,
-                            "Unknown character follows '>'");
+                    log(aAST.getLineNo(), after, "ws.illegalFollow", ">");
                 }
             }
             else {
                 // In a nested Generic type, so can only be a '>'
                 if (line.charAt(after) != '>') {
                     log(aAST.getLineNo(), after, "ws.followed", ">");
                 }
             }
         }
     }
 
     /**
      * Checks the token for the start of Generics.
      * @param aAST the token to check
      */
     private void processStart(DetailAST aAST)
     {
         final String line = getLines()[aAST.getLineNo() - 1];
         final int before = aAST.getColumnNo() - 1;
         final int after = aAST.getColumnNo() + 1;
 
-        if ((0 <= before) && Character.isWhitespace(line.charAt(before))
+        // Need to handle two cases as in:
+        //
+        //   public static <T> Callable<T> callable(Runnable task, T result)
+        //                 ^           ^
+        //      ws reqd ---+           +--- whitespace NOT required
+        //
+        if (0 <= before) {
+            // Detect if the first case
+            final DetailAST parent = aAST.getParent();
+            final DetailAST grandparent = parent.getParent();
+            if ((TokenTypes.TYPE_PARAMETERS == parent.getType())
+                && (TokenTypes.METHOD_DEF == grandparent.getType()))
+            {
+                // Require whitespace
+                if (!Character.isWhitespace(line.charAt(before))) {
+                    log(aAST.getLineNo(), before, "ws.notPreceded", "<");
+                }
+            }
+            // Whitespace not required
+            else if (Character.isWhitespace(line.charAt(before))
                 && !Utils.whitespaceBefore(before, line))
-        {
-            log(aAST.getLineNo(), before, "ws.preceded", "<");
+            {
+                log(aAST.getLineNo(), before, "ws.preceded", "<");
+            }
         }
 
         if ((after < line.length())
                 && Character.isWhitespace(line.charAt(after)))
         {
             log(aAST.getLineNo(), after, "ws.followed", "<");
         }
     }
 }
