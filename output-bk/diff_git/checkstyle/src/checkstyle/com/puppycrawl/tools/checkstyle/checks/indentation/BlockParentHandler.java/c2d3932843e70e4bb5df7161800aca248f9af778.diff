diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java
index de9f9c27f..b7d0385e7 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java
@@ -47,218 +47,218 @@ public class BlockParentHandler extends ExpressionHandler
         TokenTypes.VARIABLE_DEF,
         TokenTypes.EXPR,
         TokenTypes.OBJBLOCK,
         TokenTypes.LITERAL_BREAK,
         TokenTypes.LITERAL_RETURN,
         TokenTypes.LITERAL_THROW,
         TokenTypes.LITERAL_CONTINUE,
     };
 
     /**
      * Returns array of token types which should be checked among childrens.
      * @return array of token types to check.
      */
     protected int[] getCheckedChildren()
     {
         return CHECKED_CHILDREN;
     }
 
     /**
      * Construct an instance of this handler with the given indentation check,
      * name, abstract syntax tree, and parent handler.
      *
      * @param aIndentCheck   the indentation check
      * @param aName          the name of the handler
      * @param aAst           the abstract syntax tree
      * @param aParent        the parent handler
      */
     public BlockParentHandler(IndentationCheck aIndentCheck,
         String aName, DetailAST aAst, ExpressionHandler aParent)
     {
         super(aIndentCheck, aName, aAst, aParent);
     }
 
     /**
      * Get the top level expression being managed by this handler.
      *
      * @return the top level expression
      */
     protected DetailAST getToplevelAST()
     {
         return getMainAst();
     }
 
     /**
      * Check the indent of the top level token.
      */
     protected void checkToplevelToken()
     {
         final DetailAST toplevel = getToplevelAST();
 
-        if (toplevel == null
+        if ((toplevel == null)
             || getLevel().accept(expandedTabsColumnNo(toplevel)))
         {
             return;
         }
         if (!toplevelMustStartLine() && !startsLine(toplevel)) {
             return;
         }
         logError(toplevel, "", expandedTabsColumnNo(toplevel));
     }
 
     /**
      * Determines if the top level token must start the line.
      *
      * @return true
      */
     protected boolean toplevelMustStartLine()
     {
         return true;
     }
 
     /**
      * Determines if this block expression has curly braces.
      *
      * @return true if curly braces are present, false otherwise
      */
     protected boolean hasCurlys()
     {
         return (getLCurly() != null) && (getRCurly() != null);
     }
 
     /**
      * Get the left curly brace portion of the expression we are handling.
      *
      * @return the left curly brace expression
      */
     protected DetailAST getLCurly()
     {
         return getMainAst().findFirstToken(TokenTypes.SLIST);
     }
 
     /**
      * Get the right curly brace portion of the expression we are handling.
      *
      * @return the right curly brace expression
      */
     protected DetailAST getRCurly()
     {
         final DetailAST slist = getMainAst().findFirstToken(TokenTypes.SLIST);
         if (slist == null) {
             return null;
         }
 
         return slist.findFirstToken(TokenTypes.RCURLY);
     }
 
     /**
      * Check the indentation of the left curly brace.
      */
     protected void checkLCurly()
     {
         // the lcurly can either be at the correct indentation, or nested
         // with a previous expression
         final DetailAST lcurly = getLCurly();
         final int lcurlyPos = expandedTabsColumnNo(lcurly);
 
-        if (lcurly == null
+        if ((lcurly == null)
             || curlyLevel().accept(lcurlyPos)
             || !startsLine(lcurly))
         {
             return;
         }
 
         logError(lcurly, "lcurly", lcurlyPos);
     }
 
     /**
      * Get the expected indentation level for the curly braces.
      *
      * @return the curly brace indentation level
      */
     private IndentLevel curlyLevel()
     {
         return new IndentLevel(getLevel(), getBraceAdjustement());
     }
 
     /**
      * Determines if the right curly brace must be at the start of the line.
      *
      * @return true
      */
     protected boolean rcurlyMustStart()
     {
         return true;
     }
 
     /**
      * Determines if child elements within the expression may be nested.
      *
      * @return false
      */
     protected boolean childrenMayNest()
     {
         return false;
     }
 
     /**
      * Check the indentation of the right curly brace.
      */
     protected void checkRCurly()
     {
         // the rcurly can either be at the correct indentation, or
         // on the same line as the lcurly
         DetailAST lcurly = getLCurly();
         DetailAST rcurly = getRCurly();
         int rcurlyPos = expandedTabsColumnNo(rcurly);
 
-        if (rcurly == null
+        if ((rcurly == null)
             || curlyLevel().accept(rcurlyPos)
             || (!rcurlyMustStart() && !startsLine(rcurly))
             || areOnSameLine(rcurly, lcurly))
         {
             return;
         }
         logError(rcurly, "rcurly", rcurlyPos, curlyLevel());
     }
 
     /**
      * Get the child element that is not a list of statements.
      *
      * @return the non-list child element
      */
     protected DetailAST getNonlistChild()
     {
         return (DetailAST) getMainAst().findFirstToken(
             TokenTypes.RPAREN).getNextSibling();
     }
 
     /**
      * Check the indentation level of a child that is not a list of statements.
      */
     private void checkNonlistChild()
     {
         // TODO: look for SEMI and check for it here?
         DetailAST nonlist = getNonlistChild();
         if (nonlist == null) {
             return;
         }
 
         IndentLevel expected = new IndentLevel(getLevel(), getBasicOffset());
 
         checkExpressionSubtree(nonlist, expected, false, false);
     }
 
     /**
      * Get the child element representing the list of statements.
      *
      * @return the statement list child
      */
     protected DetailAST getListChild()
     {
         return getMainAst().findFirstToken(TokenTypes.SLIST);
     }
 
     /**
      * Get the right parenthesis portion of the expression we are handling.
      *
      * @return the right parenthis expression
