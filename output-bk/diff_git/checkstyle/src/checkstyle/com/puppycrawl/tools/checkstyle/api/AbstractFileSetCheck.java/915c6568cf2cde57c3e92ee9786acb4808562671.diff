diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
index 5a22a723f..f368877c7 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
@@ -1,97 +1,112 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2004  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.api;
 
 
 import java.io.File;
 import java.util.ArrayList;
 
 /**
  * Provides common functionality for many FileSetChecks.
  *
  * @author lkuehne
  */
 public abstract class AbstractFileSetCheck
     extends AbstractViolationReporter
     implements FileSetCheck
 {
     /** The dispatcher errors are fired to. */
     private MessageDispatcher mDispatcher;
 
     /** the file extensions that are accepted by this filter */
     private String[] mFileExtensions = {};
 
     /** collects the error messages */
     private final LocalizedMessages mMessages = new LocalizedMessages();
 
+    /** Name of a charset */
+    private String mCharset = System.getProperty("file.encoding", "UTF-8");
+
     /** @see com.puppycrawl.tools.checkstyle.api.FileSetCheck */
     public void destroy()
     {
     }
 
+    /** @return the name of the charset */
+    public String getCharset()
+    {
+        return mCharset;
+    }
+
+    /** @param aCharset the name of a charset */
+    public void setCharset(String aCharset)
+    {
+        mCharset = aCharset;
+    }
+
     /** @see com.puppycrawl.tools.checkstyle.api.FileSetCheck */
     public final void setMessageDispatcher(MessageDispatcher aDispatcher)
     {
         mDispatcher = aDispatcher;
     }
 
     /**
      * A message dispatcher is used to fire violation messages to
      * interested audit listeners.
      *
      * @return the current MessageDispatcher.
      */
     protected final MessageDispatcher getMessageDispatcher()
     {
         return mDispatcher;
     }
 
     /**
      * Determines the set of files this FileSetCheck is interested in.
      * Returns the files that have one of the currently active file extensions.
      * If no file extensions are active the argument array is returned.
      *
      * <p>
      * This method can be used in the implementation of <code>process()</code>
      * to filter it's argument list for interesting files.
      * </p>
      *
      * @param aFiles the candidates for processing
      * @return the subset of aFiles that this FileSetCheck should process
      * @see FileSetCheck#process
      */
     protected final File[] filter(File[] aFiles)
     {
         if ((mFileExtensions == null) || (mFileExtensions.length == 0)) {
             return aFiles;
         }
 
         final ArrayList files = new ArrayList(aFiles.length);
         for (int i = 0; i < aFiles.length; i++) {
             final File f = aFiles[i];
             final String fileName = f.getName();
             for (int j = 0; j < mFileExtensions.length; j++) {
                 final String fileExtension = mFileExtensions[j];
                 if (fileName.endsWith(fileExtension)) {
                     files.add(f);
                 }
             }
         }
         return (File[]) files.toArray(new File[files.size()]);
     }
