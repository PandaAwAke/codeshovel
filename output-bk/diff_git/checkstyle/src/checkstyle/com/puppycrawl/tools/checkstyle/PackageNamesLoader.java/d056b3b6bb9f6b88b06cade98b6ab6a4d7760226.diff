diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
index f41460590..c64f3c296 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
@@ -97,101 +97,101 @@ public class PackageNamesLoader extends DefaultHandler
             mPackageStack.push(name);
         }
    }
     
     /**
      * Creates a full package name from the package names on the stack.
      * @return the full name of the current package.
      */ 
     private String getPackageName()
     {
         if (mPackageStack.isEmpty()) {
             return "";
         }
         final StringBuffer buf = new StringBuffer();
         final Iterator it = mPackageStack.iterator();
         while (it.hasNext()) {
             String subPackage = (String) it.next();
             if (!subPackage.endsWith(".")) {
                 subPackage += ".";
             }
             buf.append(subPackage);
         }
         return buf.toString();
     }
     
     /** @see org.xml.sax.helpers.DefaultHandler **/
     public void endElement(String aNamespaceURI,
                            String aLocalName,
                            String aQName)
     {
         if (aQName.equals("package")) {
             mPackageNames.add(getPackageName());
             mPackageStack.pop();
         }
     }
 
     /**
      * Returns the default list of package names.
      * @param aClassLoader the class loader that gets the
      * default package names.
      * @return the default list of package names.
      * @throws CheckstyleException if an error occurs.
      */
     public static String[] loadPackageNames(ClassLoader aClassLoader)
         throws CheckstyleException
     {
 
         final InputStream stream =
             aClassLoader.getResourceAsStream(DEFAULT_PACKAGES);
         final InputSource source = new InputSource(stream);
-        return loadPackageNames(source, "default map");
+        return loadPackageNames(source, "default package names");
     }
 
     /**
      * Returns the package names in a specified file.
      * @param aFilename name of the package file.
      * @return the list of package names stored in the
      * map file. 
      * @throws CheckstyleException if an error occurs.
      */      
     public static String[] loadPackageNames(String aFilename)
         throws CheckstyleException
     {
         FileReader reader = null;
         try {
             reader = new FileReader(aFilename);
         }
         catch (FileNotFoundException e) {
             throw new CheckstyleException("unable to find " + aFilename);
         }
         final InputSource source = new InputSource(reader);
         return loadPackageNames(source, aFilename);
     }
     
     /**
      * Returns the list of package names in a specified source.
      * @param aSource the source for the list.
      * @param aSourceName the name of the source.
      * @return the list ofpackage names stored in aSource. 
      * @throws CheckstyleException if an error occurs.
      */          
     private static String[] loadPackageNames(InputSource aSource,
             String aSourceName)
         throws CheckstyleException
     {
         try {
             final PackageNamesLoader nameLoader = new PackageNamesLoader();
             nameLoader.parseInputSource(aSource);
             return nameLoader.getPackageNames();
         }
         catch (FileNotFoundException e) {
             throw new CheckstyleException("unable to find " + aSourceName);
         }
         catch (ParserConfigurationException e) {
             throw new CheckstyleException("unable to parse " + aSourceName);
         }
         catch (SAXException e) {
             throw new CheckstyleException("unable to parse "
                     + aSourceName + " - " + e.getMessage());
         }
         catch (IOException e) {
