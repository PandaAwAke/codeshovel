diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/HtmlTag.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/HtmlTag.java
index 0be76dc51..94b030edc 100755
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/HtmlTag.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/HtmlTag.java
@@ -35,100 +35,103 @@ class HtmlTag
     private final int mLineNo;
 
     /** The position within the line where this tag was found. */
     private final int mPosition;
 
     /** The comment line of text where this tag appears. */
     private final String mText;
 
     /** if this tag is self-closed. */
     private final boolean mClosedTag;
 
     /** if the tag is inomplete. */
     private final boolean mIncomplete;
 
     /**
      * Construct the HtmlTag.
      * @param aId the HTML tag name.
      * @param aLineNo the source line number of this tag.
      * @param aPosition the position within the text of this tag.
      * @param aClosedTag if this tag is self-closed (XHTML style)
      * @param aIncomplete is the tag is incomplete.
      * @param aText the line of comment text for this tag.
      */
     HtmlTag(String aId, int aLineNo, int aPosition, boolean aClosedTag,
             boolean aIncomplete, String aText)
     {
         mId = (!"".equals(aId) && aId.charAt(0) == '/')
             ? aId.substring(1) : aId;
         mLineNo = aLineNo;
         mPosition = aPosition;
         mText = aText;
         mClosedTag = aClosedTag;
         mIncomplete = aIncomplete;
     }
 
     /**
      * Returns the id (name) of this tag.
      * @return a String id.
      */
     public String getId()
     {
         return mId;
     }
 
     /**
      * Indicates if this tag is a close (end) tag.
      * @return <code>true</code> is this is a close tag.
      */
     public boolean isCloseTag()
     {
+        if (mPosition == (mText.length() - 1)) {
+            return false;
+        }
         return (mText.charAt(mPosition + 1) == '/');
     }
 
     /**
      * Indicates if this tag is a self-closed XHTML style.
      * @return <code>true</code> is this is a self-closed tag.
      */
     public boolean isClosedTag()
     {
         return mClosedTag;
     }
 
     /**
      * Indicates if this tag is incomplete (has no close &gt;).
      * @return <code>true</code> if the tag is incomplete.
      */
     public boolean isIncompleteTag()
     {
         return mIncomplete;
     }
 
     /**
      * Returns the source line number where this tag was found.
      * Used for displaying a Checkstyle error.
      * @return an int line number.
      */
     public int getLineno()
     {
         return mLineNo;
     }
 
     /**
      * Returns the position with in the comment line where this tag
      * was found.  Used for displaying a Checkstyle error.
      * @return an int relative to zero.
      */
     public int getPosition()
     {
         return mPosition;
     }
 
     /**
      * Returns this HTML tag and trailing text.
      * Used for displaying a Checkstyle error.
      * @return the String text of this tag.
      */
     public String toString()
     {
         final int startOfText = mPosition;
         final int endOfText =
