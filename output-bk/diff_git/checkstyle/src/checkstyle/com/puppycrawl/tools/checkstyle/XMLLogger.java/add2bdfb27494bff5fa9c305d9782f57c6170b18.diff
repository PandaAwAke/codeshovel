diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/XMLLogger.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/XMLLogger.java
index 84410a134..8e284ee7c 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/XMLLogger.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/XMLLogger.java
@@ -1,144 +1,141 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2002  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle;
 
 import java.io.OutputStream;
 import java.io.OutputStreamWriter;
 import java.io.PrintWriter;
 import java.io.StringWriter;
 import java.io.UnsupportedEncodingException;
 
 /**
  * Simple XML logger.
  * It outputs everything in UTF8 (default XML encoding is UTF8) in case
  * we want to localize error messages or simply that filenames are
  * localized and takes care about escaping as well.
 
  * @author <a href="mailto:stephane.bailliez@wanadoo.fr">Stephane Bailliez</a>
  */
 public class XMLLogger
     implements AuditListener
 {
-    /** the original wrapped stream */
-    private OutputStream mStream;
+    /** close output stream in auditFinished */
+    private boolean mCloseStream;
 
     /** helper writer that allows easy encoding and printing */
     private PrintWriter mWriter;
 
     /** some known entities to detect */
     private static final String[] ENTITIES = {"gt", "amp", "lt", "apos",
                                               "quot"};
 
-    /** Creates a new <code>XMLLogger</code> instance. */
-    public XMLLogger()
-    {
-    }
-
     /**
-     * sets the output to a defined stream
+     * Creates a new <code>XMLLogger</code> instance.
+     * Sets the output to a defined stream.
      * @param aOS the stream to write logs to.
+     * @param aCloseStream close aOS in auditFinished
      */
-    public XMLLogger(OutputStream aOS)
+    public XMLLogger(OutputStream aOS, boolean aCloseStream)
     {
         setOutputStream(aOS);
+        mCloseStream = aCloseStream;
     }
 
-    /** @see AuditListener **/
-    public void setOutputStream(OutputStream aOS)
+    /**
+     * sets the OutputStream
+     * @param aOS the OutputStream to use
+     **/
+    private void setOutputStream(OutputStream aOS)
     {
         try {
             final OutputStreamWriter osw = new OutputStreamWriter(aOS, "UTF8");
             mWriter = new PrintWriter(osw);
-            // keep a handle on the original stream
-            // for getoutputstream
-            mStream = aOS;
         }
         catch (UnsupportedEncodingException e) {
             // unlikely to happen...
             throw new ExceptionInInitializerError(e);
         }
     }
 
-    /** @see AuditListener **/
-    public OutputStream getOutputStream()
-    {
-        return mStream;
-    }
-
     /** @see AuditListener **/
     public void auditStarted(AuditEvent aEvt)
     {
         mWriter.println("<checkstyle>");
     }
 
     /** @see AuditListener **/
     public void auditFinished(AuditEvent aEvt)
     {
         mWriter.println("</checkstyle>");
-        mWriter.flush();
+        if (mCloseStream) {
+            mWriter.close();
+        }
+        else {
+            mWriter.flush();
+        }
     }
 
     /** @see AuditListener **/
     public void fileStarted(AuditEvent aEvt)
     {
         mWriter.println("<file name=\"" + aEvt.getFileName() + "\">");
     }
 
     /** @see AuditListener **/
     public void fileFinished(AuditEvent aEvt)
     {
         mWriter.println("</file>");
     }
 
     /** @see AuditListener **/
     public void addError(AuditEvent aEvt)
     {
         mWriter.print("<error" + " line=\"" + aEvt.getLine() + "\"");
         if (aEvt.getColumn() > 0) {
             mWriter.print(" column=\"" + aEvt.getColumn() + "\"");
         }
         mWriter.println(" message=\"" + encode(aEvt.getMessage()) + "\"/>");
     }
 
     /** @see AuditListener **/
     public void addException(AuditEvent aEvt, Throwable aThrowable)
     {
         final StringWriter sw = new StringWriter();
         final PrintWriter pw = new PrintWriter(sw);
         pw.println("<exception>");
         pw.println("<![CDATA[");
         aThrowable.printStackTrace(pw);
         pw.println("]]>");
         pw.println("</exception>");
         pw.flush();
         mWriter.println(encode(sw.toString()));
     }
 
     /**
      * Escape &lt;, &gt; &amp; &apos; and &quot; as their entities.
      * @param aValue the value to escape.
      * @return the escaped value if necessary.
      */
     public String encode(String aValue)
     {
         final StringBuffer sb = new StringBuffer();
         for (int i = 0; i < aValue.length(); i++) {
             char c = aValue.charAt(i);
             switch (c) {
             case '<':
