diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
index 99071cb44..4285a180a 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
@@ -190,95 +190,95 @@ public class TranslationCheck extends AbstractFileSetCheck
      * with the specified key set. All missing keys are reported.
      * @param aKeys the set of keys to compare with
      * @param aFileMap a Map from property files to their key sets
      */
     private void compareKeySets(Set aKeys, Map aFileMap)
     {
         Set fls = aFileMap.keySet();
 
         for (Iterator iter = fls.iterator(); iter.hasNext();) {
             File currentFile = (File) iter.next();
             final MessageDispatcher dispatcher = getMessageDispatcher();
             final String path = currentFile.getPath();
             dispatcher.fireFileStarted(path);
             Set currentKeys = (Set) aFileMap.get(currentFile);
 
             // Clone the keys so that they are not lost
             Set keysClone = new HashSet(aKeys);
             keysClone.removeAll(currentKeys);
 
             // Remaining elements in the key set are missing in the current file
             if (!keysClone.isEmpty()) {
                 for (Iterator it = keysClone.iterator(); it.hasNext();) {
                     Object[] key = new Object[]{it.next()};
                     LocalizedMessage[] errors = new LocalizedMessage[1];
                     final String className = getClass().getName();
                     final int pkgEndIndex = className.lastIndexOf('.');
                     final String pkgName = className.substring(0, pkgEndIndex);
                     final String bundle = pkgName + ".messages";
                     errors[0] = new LocalizedMessage(
                             0, bundle, "translation.missingKey", key);
                     getMessageDispatcher().fireErrors(path, errors);
                 }
             }
             dispatcher.fireFileFinished(path);
         }
     }
 
 
     /**
      * Tests whether the given property files (arranged by their prefixes
      * in a Map) contain the proper keys.
      *
      * Each group of files must have the same keys. If this is not the case
      * an error message is posted giving information which key misses in
      * which file.
      *
      * @param aPropFiles the property files organized as Map
      */
     private void checkPropertyFileSets(Map aPropFiles)
     {
-        Set keySet = aPropFiles.keySet();
+        final Set keySet = aPropFiles.keySet();
 
         for (Iterator iterator = keySet.iterator(); iterator.hasNext();) {
-            String baseName = (String) iterator.next();
-            Set files = (Set) aPropFiles.get(baseName);
+            final String baseName = (String) iterator.next();
+            final Set files = (Set) aPropFiles.get(baseName);
 
             if (files.size() >= 2) {
                 // build a map from files to the keys they contain
-                Set keys = new HashSet();
-                Map fileMap = new HashMap();
+                final Set keys = new HashSet();
+                final Map fileMap = new HashMap();
 
                 for (Iterator iter = files.iterator(); iter.hasNext();) {
-                    File file = (File) iter.next();
-                    Set fileKeys = loadKeys(file);
+                    final File file = (File) iter.next();
+                    final Set fileKeys = loadKeys(file);
                     keys.addAll(fileKeys);
                     fileMap.put(file, fileKeys);
                 }
 
                 // check the map for consistency
                 compareKeySets(keys, fileMap);
             }
         }
     }
 
 
     /**
      * This method searches for property files in the specified file array
      * and checks whether the key usage is consistent.
      *
      * Two property files which have the same prefix should use the same
      * keys. If this is not the case the missing keys are reported.
      *
      * @see com.puppycrawl.tools.checkstyle.api.FileSetCheck
      */
     public void process(File[] aFiles)
     {
-        Set dirs = getParentDirs(aFiles);
-        Set propertyFiles = getPropertyFiles(dirs);
+        final Set dirs = getParentDirs(aFiles);
+        final Set propertyFiles = getPropertyFiles(dirs);
         final Map propFilesMap = arrangePropertyFiles(propertyFiles);
         checkPropertyFileSets(propFilesMap);
     }
 
 
 
 }
