diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoader.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoader.java
index 69724d296..625c5c45e 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoader.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoader.java
@@ -83,101 +83,101 @@ public final class SuppressionsLoader
                              String aLocalName,
                              String aQName,
                              Attributes aAtts)
         throws SAXException
     {
         if (aQName.equals("suppress")) {
             //add SuppressElement filter to the filter chain
             final String files = aAtts.getValue("files");
             if (files == null) {
                 throw new SAXException("missing files attribute");
             }
             final String checks = aAtts.getValue("checks");
             final String modId = aAtts.getValue("id");
             if ((checks == null) && (modId == null)) {
                 throw new SAXException("missing checks and id attribute");
             }
             final SuppressElement suppress;
             try {
                 suppress = new SuppressElement(files);
                 if (modId != null) {
                     suppress.setModuleId(modId);
                 }
                 if (checks != null) {
                     suppress.setChecks(checks);
                 }
             }
             catch (PatternSyntaxException e) {
                 throw new SAXException("invalid files or checks format");
             }
             final String lines = aAtts.getValue("lines");
             if (lines != null) {
                 suppress.setLines(lines);
             }
             final String columns = aAtts.getValue("columns");
             if (columns != null) {
                 suppress.setColumns(columns);
             }
             mFilterChain.addFilter(suppress);
         }
     }
 
     /**
      * Returns the suppression filters in a specified file.
      * @param aFilename name of the suppresssions file.
      * @return the filter chain of suppression elements specified in the file.
      * @throws CheckstyleException if an error occurs.
      */
     public static FilterSet loadSuppressions(String aFilename)
         throws CheckstyleException
     {
-        FileInputStream fis = null;
+        final FileInputStream fis;
         try {
             fis = new FileInputStream(aFilename);
         }
         catch (FileNotFoundException e) {
             throw new CheckstyleException(
                 "unable to find " + aFilename, e);
         }
         final InputSource source = new InputSource(fis);
         return loadSuppressions(source, aFilename);
     }
 
     /**
      * Returns the suppression filters in a specified source.
      * @param aSource the source for the suppressions.
      * @param aSourceName the name of the source.
      * @return the filter chain of suppression elements in aSource.
      * @throws CheckstyleException if an error occurs.
      */
     private static FilterSet loadSuppressions(
             InputSource aSource, String aSourceName)
         throws CheckstyleException
     {
         try {
             final SuppressionsLoader suppressionsLoader =
                 new SuppressionsLoader();
             suppressionsLoader.parseInputSource(aSource);
             return suppressionsLoader.getFilterChain();
         }
         catch (FileNotFoundException e) {
             throw new CheckstyleException("unable to find " + aSourceName, e);
         }
         catch (ParserConfigurationException e) {
             throw new CheckstyleException("unable to parse " + aSourceName, e);
         }
         catch (SAXException e) {
             throw new CheckstyleException("unable to parse "
                     + aSourceName + " - " + e.getMessage(), e);
         }
         catch (IOException e) {
             throw new CheckstyleException("unable to read " + aSourceName, e);
         }
         catch (NumberFormatException e) {
             throw new CheckstyleException("number format exception "
                 + aSourceName + " - " + e.getMessage(), e);
         }
     }
 
     /**
      * Creates mapping between local resources and dtd ids.
      * @return map between local resources and dtd ids.
