diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
index c3684fe52..db67504fd 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
@@ -194,155 +194,166 @@ public class CheckStyleTask
     ////////////////////////////////////////////////////////////////////////////
     // Setters for Checker configuration attributes
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Sets a properties file for use instead
      * of individually setting them.
      * @param aProps the properties File to use
      */
     public void setProperties(File aProps)
     {
         mPropertiesFile = aProps;
     }
 
     ////////////////////////////////////////////////////////////////////////////
     // The doers
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Actually checks the files specified. All errors are reported to
      * System.out. Will fail if any errors occurred.
      * @throws BuildException an error occurred
      */
     public void execute()
         throws BuildException
     {
         // output version info in debug mode
         final ResourceBundle compilationProperties =
             ResourceBundle.getBundle("checkstylecompilation");
         final String version =
             compilationProperties.getString("checkstyle.compile.version");
         final String compileTimestamp =
             compilationProperties.getString("checkstyle.compile.timestamp");
         log("checkstyle version " + version, Project.MSG_VERBOSE);
         log("compiled on " + compileTimestamp, Project.MSG_VERBOSE);
 
         // Check for no arguments
         if ((mFileName == null) && (mFileSets.size() == 0)) {
             throw new BuildException(
                 "Must specify atleast one of 'file' or nested 'fileset'.",
                 getLocation());
         }
 
         if (mConfigLocation == null) {
             throw new BuildException("Must specify 'config'.", getLocation());
         }
 
         // Create the checker
         Checker c = null;
         try {
-            try {
-                final Properties props = createOverridingProperties();
-                final Configuration config =
-                    ConfigurationLoader.loadConfiguration(
-                        mConfigLocation, new PropertiesExpander(props));
-
-                final DefaultContext context = new DefaultContext();
-                final ClassLoader loader =
-                    new AntClassLoader(getProject(), mClasspath);
-                context.add("classloader", loader);
-
-                c = new Checker();
-
-                //load the set of package names
-                if (mPackageNamesFile != null) {
-                    final ModuleFactory moduleFactory =
-                        PackageNamesLoader.loadModuleFactory(
-                            mPackageNamesFile.getAbsolutePath());
-                    c.setModuleFactory(moduleFactory);
-                }
-                c.contextualize(context);
-                c.configure(config);
-
-                // setup the listeners
-                final AuditListener[] listeners = getListeners();
-                for (int i = 0; i < listeners.length; i++) {
-                    c.addListener(listeners[i]);
-                }
-            }
-            catch (Exception e) {
-                throw new BuildException(
-                    "Unable to create a Checker: " + e.getMessage(), e);
-            }
+            c = createChecker();
 
             // Process the files
             final File[] files = scanFileSets();
             final int numErrs = c.process(files);
 
             // Handle the return status
             if ((numErrs > 0) && mFailureProperty != null) {
                 getProject().setProperty(mFailureProperty, "true");
             }
 
             if ((numErrs > 0) && mFailOnViolation) {
                 throw new BuildException("Got " + numErrs + " errors.",
                                          getLocation());
             }
         }
         finally {
             if (c != null) {
                 c.destroy();
             }
         }
     }
 
+    /**
+     * Creates new instance of <code>Checker</code>.
+     * @return new instance of <code>Checker</code>
+     */
+    private Checker createChecker()
+    {
+        Checker c = null;
+        try {
+            final Properties props = createOverridingProperties();
+            final Configuration config =
+                ConfigurationLoader.loadConfiguration(
+                    mConfigLocation, new PropertiesExpander(props));
+
+            final DefaultContext context = new DefaultContext();
+            final ClassLoader loader =
+                new AntClassLoader(getProject(), mClasspath);
+            context.add("classloader", loader);
+
+            c = new Checker();
+
+            //load the set of package names
+            if (mPackageNamesFile != null) {
+                final ModuleFactory moduleFactory =
+                    PackageNamesLoader.loadModuleFactory(
+                        mPackageNamesFile.getAbsolutePath());
+                c.setModuleFactory(moduleFactory);
+            }
+            c.contextualize(context);
+            c.configure(config);
+
+            // setup the listeners
+            final AuditListener[] listeners = getListeners();
+            for (int i = 0; i < listeners.length; i++) {
+                c.addListener(listeners[i]);
+            }
+        }
+        catch (Exception e) {
+            throw new BuildException(
+                "Unable to create a Checker: " + e.getMessage(), e);
+        }
+
+        return c;
+    }
     /**
      * Create the Properties object based on the arguments specified
      * to the ANT task.
      * @return the properties for property expansion expansion
      * @throws BuildException if an error occurs
      */
     private Properties createOverridingProperties()
     {
         final Properties retVal = new Properties();
 
         // Load the properties file if specified
         if (mPropertiesFile != null) {
             FileInputStream inStream = null;
             try {
                 inStream = new FileInputStream(mPropertiesFile);
                 retVal.load(inStream);
             }
             catch (FileNotFoundException e) {
                 throw new BuildException(
                     "Could not find Properties file '" + mPropertiesFile + "'",
                     e, getLocation());
             }
             catch (IOException e) {
                 throw new BuildException(
                     "Error loading Properties file '" + mPropertiesFile + "'",
                     e, getLocation());
             }
             finally {
                 try {
                     if (inStream != null) {
                         inStream.close();
                     }
                 }
                 catch (IOException e) {
                     throw new BuildException(
                         "Error closing Properties file '"
                         + mPropertiesFile + "'",
                         e, getLocation());
                 }
             }
         }
 
         // override with Ant properties like ${basedir}
         Hashtable antProps = this.getProject().getProperties();
         for (Iterator it = antProps.keySet().iterator(); it.hasNext();) {
             final String key = (String) it.next();
             final String value = String.valueOf(antProps.get(key));
             retVal.put(key, value);
         }
 
