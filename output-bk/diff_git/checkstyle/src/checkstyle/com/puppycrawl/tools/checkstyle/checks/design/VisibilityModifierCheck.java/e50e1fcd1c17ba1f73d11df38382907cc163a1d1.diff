diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java
index 36728071d..f8d859a0d 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java
@@ -161,59 +161,58 @@ public class VisibilityModifierCheck
         }
     }
 
     /**
      * Returns the variable name in a VARIABLE_DEF AST.
      * @param aVariableDefAST an AST where type == VARIABLE_DEF AST.
      * @return the variable name in aVariableDefAST
      */
     private DetailAST getVarNameAST(DetailAST aVariableDefAST)
     {
         AST ast = aVariableDefAST.getFirstChild();
         while (ast != null) {
             final AST nextSibling = ast.getNextSibling();
             if (ast.getType() == TokenTypes.TYPE) {
                 return (DetailAST) nextSibling;
             }
             ast = nextSibling;
         }
         return null;
     }
 
     /**
      * Returns the set of modifier Strings for a VARIABLE_DEF AST.
      * @param aVariableDefAST AST for a vraiable definition
      * @return the set of modifier Strings for variableDefAST
      */
     private Set<String> getModifiers(DetailAST aVariableDefAST)
     {
         final AST modifiersAST = aVariableDefAST.getFirstChild();
         if (modifiersAST.getType() != TokenTypes.MODIFIERS) {
             throw new IllegalStateException("Strange parse tree");
         }
         final Set<String> retVal = new HashSet<String>();
         AST modifier = modifiersAST.getFirstChild();
         while (modifier != null) {
             retVal.add(modifier.getText());
             modifier = modifier.getNextSibling();
         }
         return retVal;
 
     }
 
     /**
      * Returns the visibility scope specified with a set of modifiers.
      * @param aModifiers the set of modifier Strings
      * @return one of "public", "private", "protected", "package"
      */
     private String getVisibilityScope(Set<String> aModifiers)
     {
         final String[] explicitModifiers = {"public", "private", "protected"};
-        for (int i = 0; i < explicitModifiers.length; i++) {
-            final String candidate = explicitModifiers[i];
+        for (final String candidate : explicitModifiers) {
             if (aModifiers.contains(candidate)) {
                 return candidate;
             }
         }
         return "package";
     }
 }
