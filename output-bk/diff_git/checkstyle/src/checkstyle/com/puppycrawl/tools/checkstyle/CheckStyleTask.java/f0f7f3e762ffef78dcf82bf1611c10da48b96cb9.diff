diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
index c74b974bd..be193a759 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
@@ -88,121 +88,121 @@ public class CheckStyleTask
         mProps.setProperty(MAX_LINE_LENGTH_PROP, "" + aLen);
     }
 
     /** @param aPat pattern for member variables **/
     public void setMemberpattern(String aPat)
     {
         mProps.setProperty(MEMBER_PATTERN_PROP, aPat);
     }
 
     /** @param aPat pattern for parameters **/
     public void setParampattern(String aPat)
     {
         mProps.setProperty(PARAMETER_PATTERN_PROP, aPat);
     }
 
     /** @param aPat pattern for constant variables **/
     public void setConstpattern(String aPat)
     {
         mProps.setProperty(CONST_PATTERN_PROP, aPat);
     }
 
     /** @param aPat pattern for static variables **/
     public void setStaticpattern(String aPat)
     {
         mProps.setProperty(STATIC_PATTERN_PROP, aPat);
     }
 
     /** @param aPat pattern for type names **/
     public void setTypepattern(String aPat)
     {
         mProps.setProperty(TYPE_PATTERN_PROP, aPat);
     }
 
     /** @param aName header file name **/
     public void setHeaderfile(File aName)
     {
         mProps.setProperty(HEADER_FILE_PROP, aName.getAbsolutePath());
     }
 
     /** @param aNum **/
     public void setHeaderignoreline(int aNum)
     {
         mProps.setProperty(HEADER_IGNORE_LINE_PROP, "" + aNum);
     }
 
     /** @param aRelax whether to be relaxed on Javadoc **/
     public void setRelaxJavadoc(boolean aRelax)
     {
         mProps.setProperty(RELAX_JAVADOC_PROP, "" + aRelax);
     }
-    
+
     /** @param aIgnore whether to ignore import statements **/
     public void setIgnoreImports(boolean aIgnore)
     {
         mProps.setProperty(IGNORE_IMPORTS_PROP, "" + aIgnore);
     }
-    
+
     ////////////////////////////////////////////////////////////////////////////
     // The doers
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Actually checks the files specified. All errors are reported to
-     * System.err. Will fail if any errors occurred.
+     * System.out. Will fail if any errors occurred.
      * @throws BuildException an error occurred
      **/
     public void execute()
         throws BuildException
     {
         // Check for no arguments
         if ((mFileName == null) && (mFileSets.size() == 0)) {
             throw new BuildException("Must specify atleast one of 'file' " +
                                      "or nested 'fileset'.", location);
         }
 
         // Create the checker
         Checker c;
         try {
-            c = new Checker(mProps, System.err);
+            c = new Checker(mProps, System.out);
         }
         catch (RESyntaxException e){
             e.printStackTrace();
             throw new BuildException("Unable to create a Checker", location);
         }
 
         // Process the files
         int numErrs = 0;
         if (mFileName != null) {
             numErrs += c.process(mFileName);
         }
 
         final Iterator it = mFileSets.iterator();
         while (it.hasNext()) {
             final FileSet fs = (FileSet) it.next();
             final DirectoryScanner ds = fs.getDirectoryScanner(project);
             numErrs += process(fs.getDir(project).getAbsolutePath(),
                                ds.getIncludedFiles(),
                                c);
         }
 
         if (numErrs > 0) {
             throw new BuildException("Got " + numErrs + " errors.", location);
         }
     }
 
     /**
      * Processes the list of files.
      * @return the number of errors found
      * @param aDir absolute path to directory containing files
      * @param aFiles the files to process
      * @param aChecker the checker to process the files with
      **/
     private int process(String aDir, String[] aFiles, Checker aChecker)
     {
         int retVal = 0;
         for (int i = 0; i < aFiles.length; i++) {
             retVal += aChecker.process(aDir + File.separator + aFiles[i]);
         }
         return retVal;
     }
 }
