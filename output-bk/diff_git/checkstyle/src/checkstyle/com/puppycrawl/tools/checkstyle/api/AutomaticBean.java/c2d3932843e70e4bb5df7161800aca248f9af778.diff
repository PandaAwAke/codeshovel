diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
index 2faaa90f0..fb53515d5 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
@@ -115,101 +115,101 @@ public class AutomaticBean
         // TODO: investigate:
         // StringArrayConverter doesn't properly convert an array of tokens with
         // elements containing an underscore, "_".
         // Hacked a replacement class :(
         //        cub.register(new StringArrayConverter(),
         //                        String[].class);
         cub.register(new StrArrayConverter(), String[].class);
         cub.register(new IntegerArrayConverter(), Integer[].class);
 
         // BigDecimal, BigInteger, Class, Date, String, Time, TimeStamp
         // do not use defaults in the default configuration of ConvertUtilsBean
 
         return new BeanUtilsBean(cub, new PropertyUtilsBean());
     }
 
     /**
      * Implements the Configurable interface using bean introspection.
      *
      * Subclasses are allowed to add behaviour. After the bean
      * based setup has completed first the method
      * {@link #finishLocalSetup finishLocalSetup}
      * is called to allow completion of the bean's local setup,
      * after that the method {@link #setupChild setupChild}
      * is called for each {@link Configuration#getChildren child Configuration}
      * of <code>aConfiguration</code>.
      *
      * @param aConfiguration {@inheritDoc}
      * @throws CheckstyleException {@inheritDoc}
      * @see Configurable
      */
     public final void configure(Configuration aConfiguration)
         throws CheckstyleException
     {
         mConfiguration = aConfiguration;
 
         BeanUtilsBean beanUtils = createBeanUtilsBean();
 
         // TODO: debug log messages
         final String[] attributes = aConfiguration.getAttributeNames();
 
         for (int i = 0; i < attributes.length; i++) {
             final String key = attributes[i];
             final String value = aConfiguration.getAttribute(key);
 
             try {
                 // BeanUtilsBean.copyProperties silently ignores missing setters
                 // for key, so we have to go through great lengths here to
                 // figure out if the bean property really exists.
                 final PropertyDescriptor pd =
                     PropertyUtils.getPropertyDescriptor(this, key);
-                if (pd == null || pd.getWriteMethod() == null) {
+                if ((pd == null) || (pd.getWriteMethod() == null)) {
                     throw new CheckstyleException(
                         "Property '" + key + "' in module "
                         + aConfiguration.getName()
                         + " does not exist, please check the documentation");
                 }
 
                 // finally we can set the bean property
                 beanUtils.copyProperty(this, key, value);
             }
             catch (InvocationTargetException e) {
                 throw new CheckstyleException(
                     "Cannot set property '" + key + "' in module "
                     + aConfiguration.getName() + " to '" + value
                     + "': " + e.getTargetException().getMessage(), e);
             }
             catch (IllegalAccessException e) {
                 throw new CheckstyleException(
                     "cannot access " + key + " in "
                     + this.getClass().getName(), e);
             }
             catch (NoSuchMethodException e) {
                 throw new CheckstyleException(
                     "cannot access " + key + " in "
                     + this.getClass().getName(), e);
             }
             catch (IllegalArgumentException e) {
                 throw new CheckstyleException(
                     "illegal value '" + value + "' for property '" + key
                     + "' of module " + aConfiguration.getName(), e);
             }
             catch (ConversionException e) {
                 throw new CheckstyleException(
                     "illegal value '" + value + "' for property '" + key
                     + "' of module " + aConfiguration.getName(), e);
             }
 
         }
 
         finishLocalSetup();
 
         final Configuration[] childConfigs = aConfiguration.getChildren();
         for (int i = 0; i < childConfigs.length; i++) {
             final Configuration childConfig = childConfigs[i];
             setupChild(childConfig);
         }
     }
 
     /**
      * Implements the Contextualizable interface using bean introspection.
      * @param aContext {@inheritDoc}
