diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractLoader.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractLoader.java
index 7570c6fb8..e8d39e6d8 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractLoader.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractLoader.java
@@ -56,91 +56,93 @@ public abstract class AbstractLoader
      * @param aPublicId the public ID for the DTD to resolve
      * @param aDtdResourceName the resource for the DTD
      * @throws SAXException if an error occurs
      * @throws ParserConfigurationException if an error occurs
      */
     protected AbstractLoader(String aPublicId, String aDtdResourceName)
         throws SAXException, ParserConfigurationException
     {
         this(new HashMap(1));
         mPublicIdToResourceNameMap.put(aPublicId, aDtdResourceName);
     }
 
     /**
      * Creates a new instance.
      * @param aPublicIdToResourceNameMap maps public IDs to DTD resource names
      * @throws SAXException if an error occurs
      * @throws ParserConfigurationException if an error occurs
      */
     protected AbstractLoader(Map aPublicIdToResourceNameMap)
         throws SAXException, ParserConfigurationException
     {
         mPublicIdToResourceNameMap = new HashMap(aPublicIdToResourceNameMap);
         final SAXParserFactory factory = SAXParserFactory.newInstance();
         factory.setValidating(true);
         factory.setNamespaceAware(true);
         mParser = factory.newSAXParser().getXMLReader();
         mParser.setContentHandler(this);
         mParser.setEntityResolver(this);
         mParser.setErrorHandler(this);
     }
 
     /**
      * Parses the specified input source.
      * @param aInputSource the input source to parse.
      * @throws IOException if an error occurs
      * @throws SAXException in an error occurs
      */
     public void parseInputSource(InputSource aInputSource)
         throws IOException, SAXException
     {
         mParser.parse(aInputSource);
     }
 
     /** {@inheritDoc} */
     public InputSource resolveEntity(String aPublicId, String aSystemId)
         throws SAXException
     {
         if (mPublicIdToResourceNameMap.keySet().contains(aPublicId)) {
             final String dtdResourceName =
                     (String) mPublicIdToResourceNameMap.get(aPublicId);
-            final InputStream dtdIS = getClass().getClassLoader()
-                .getResourceAsStream(dtdResourceName);
+            final ClassLoader loader =
+                Thread.currentThread().getContextClassLoader();
+            final InputStream dtdIS =
+                loader.getResourceAsStream(dtdResourceName);
             if (dtdIS == null) {
                 throw new SAXException(
                     "Unable to load internal dtd " + dtdResourceName);
             }
             return new InputSource(dtdIS);
         }
         // This is a hack to workaround problem with SAX
         // DefaultHeader.resolveEntity():
         // sometimes it throws SAX- and IO- exceptions
         // sometime SAX only :(
         try {
             if (false) {
                 throw new IOException("");
             }
             return super.resolveEntity(aPublicId, aSystemId);
         }
         catch (IOException e) {
             throw new SAXException("" + e, e);
         }
     }
 
     /** @see org.xml.sax.ErrorHandler#warning(org.xml.sax.SAXParseException) */
     public void warning(SAXParseException aEx) throws SAXException
     {
         throw aEx;
     }
 
     /** @see org.xml.sax.ErrorHandler#error(org.xml.sax.SAXParseException) */
     public void error(SAXParseException aEx) throws SAXException
     {
         throw aEx;
     }
 
     /** @see org.xml.sax.ErrorHandler#fatalError */
     public void fatalError(SAXParseException aEx) throws SAXException
     {
         throw aEx;
     }
 }
