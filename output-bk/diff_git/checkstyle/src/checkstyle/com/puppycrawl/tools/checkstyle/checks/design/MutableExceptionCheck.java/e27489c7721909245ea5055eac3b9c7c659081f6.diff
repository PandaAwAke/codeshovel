diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheck.java
index 8f5e47e53..1794ac588 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheck.java
@@ -84,53 +84,53 @@ public final class MutableExceptionCheck extends AbstractFormatCheck
     {
         switch (aAST.getType()) {
         case TokenTypes.CLASS_DEF:
             leaveClassDef();
             break;
         default:
             // Do nothing
         }
     }
 
     /**
      * Called when we start processing class definition.
      * @param aAST class definition node
      */
     private void visitClassDef(DetailAST aAST)
     {
         mCheckingStack.push(mChecking ? Boolean.TRUE : Boolean.FALSE);
         mChecking =
             isExceptionClass(aAST.findFirstToken(TokenTypes.IDENT).getText());
     }
 
     /** Called when we leave class definition. */
     private void leaveClassDef()
     {
         mChecking = ((Boolean) mCheckingStack.pop()).booleanValue();
     }
 
     /**
      * Checks variable definition.
      * @param aAST variable def node for check.
      */
     private void visitVariableDef(DetailAST aAST)
     {
         if (mChecking && aAST.getParent().getType() == TokenTypes.OBJBLOCK) {
             final DetailAST modifiersAST =
                 aAST.findFirstToken(TokenTypes.MODIFIERS);
 
             if (!(modifiersAST.findFirstToken(TokenTypes.FINAL) != null)) {
                 log(aAST.getLineNo(),  aAST.getColumnNo(), "mutable.exception",
                         aAST.findFirstToken(TokenTypes.IDENT).getText());
             }
         }
     }
 
     /**
      * @param aClassName class name to check
      * @return true if a given class name confirms specified format
      */
     private boolean isExceptionClass(String aClassName)
     {
-        return getRegexp().match(aClassName);
+        return getRegexp().matcher(aClassName).find();
     }
 }
