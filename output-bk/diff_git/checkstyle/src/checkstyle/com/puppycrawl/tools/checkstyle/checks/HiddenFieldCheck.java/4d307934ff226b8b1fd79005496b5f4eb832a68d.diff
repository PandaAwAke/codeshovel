diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/HiddenFieldCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/HiddenFieldCheck.java
index 551d71fec..91a64c8e3 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/HiddenFieldCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/HiddenFieldCheck.java
@@ -54,97 +54,104 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  */
 public class HiddenFieldCheck
     extends Check
 {
 
     /** stack of sets of field names,
      * one for each class of a set of nested classes */
     private LinkedList mFieldsStack = null;
 
     /** check for shadowing parameters **/
     private boolean mCheckParameters = true;
 
     /**
      * Set whether to check for shadowing parameters.
      * @param aFlag a <code>Boolean</code> value
      */
     public void setCheckParameters(boolean aFlag)
     {
         mCheckParameters = aFlag;
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.VARIABLE_DEF,
             TokenTypes.PARAMETER_DEF,
             TokenTypes.CLASS_DEF,
         };
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void beginTree()
     {
         mFieldsStack = new LinkedList();
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void visitToken(DetailAST aAST)
     {
         switch (aAST.getType()) {
             case TokenTypes.VARIABLE_DEF:
                 processVariable(aAST);
                 break;
             case TokenTypes.PARAMETER_DEF:
                 if (mCheckParameters) {
                     processVariable(aAST);
                 }
                 break;
             case TokenTypes.CLASS_DEF:
-                //push
-                mFieldsStack.addLast(new HashSet());
+                //find and push fields
+                final HashSet fieldSet = new HashSet(); //fields container
+                //add fields to container
+                final DetailAST objBlock =
+                    aAST.findFirstToken(TokenTypes.OBJBLOCK);
+                DetailAST child = (DetailAST) objBlock.getFirstChild();
+                while (child != null) {
+                    if (child.getType() == TokenTypes.VARIABLE_DEF) {
+                        final String name =
+                            child.findFirstToken(TokenTypes.IDENT).getText();
+                        fieldSet.add(name);
+                    }
+                    child = (DetailAST) child.getNextSibling();
+                }                
+                mFieldsStack.addLast(fieldSet); //push container              
                 break;
         }
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void leaveToken(DetailAST aAST)
     {
         if (aAST.getType() == TokenTypes.CLASS_DEF) {
             //pop
             mFieldsStack.removeLast();
         }
     }
 
     /**
      * Process a variable token.
      * Check whether a local variable or parameter shadows a field.
      * Store a field for later comparison with local variables and parameters.
      * @param aAST the variable token.
      */
     private void processVariable(DetailAST aAST)
     {
         if (!ScopeUtils.inInterfaceBlock(aAST)) {
             if (ScopeUtils.inCodeBlock(aAST)) {
                 //local variable or parameter. Does it shadow a field?
                 final DetailAST nameAST = aAST.findFirstToken(TokenTypes.IDENT);
                 final String name = nameAST.getText();
-                Iterator it = mFieldsStack.iterator();
+                final Iterator it = mFieldsStack.iterator();
                 while (it.hasNext()) {
                     final HashSet aFieldsSet = (HashSet) it.next();
                     if (aFieldsSet.contains(name)) {
                         log(nameAST.getLineNo(), nameAST.getColumnNo(),
                             "hidden.field", name);
                         break;
                     }
                 }
             }
-            else {
-                //field. Add its name to the top stack element
-                final String name =
-                    aAST.findFirstToken(TokenTypes.IDENT).getText();
-                ((HashSet) mFieldsStack.getLast()).add(name);
-            }
         }
     }
  }
