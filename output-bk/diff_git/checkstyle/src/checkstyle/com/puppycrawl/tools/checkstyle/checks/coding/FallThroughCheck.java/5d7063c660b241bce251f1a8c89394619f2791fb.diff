diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
index 0f90177cb..58f61ac94 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
@@ -147,79 +147,81 @@ public class FallThroughCheck extends Check
 
         if (isTerminated && elseStmt != null) {
             isTerminated = isTerminated((DetailAST) elseStmt.getFirstChild(),
                                         aUseBreak, aUseContinue);
         }
         return isTerminated;
     }
 
     /**
      * Checks if a given loop terminated by return, throw or,
      * if allowed break, continue.
      * @param aAST loop to check
      * @return true if loop is terminated.
      */
     private boolean checkLoop(final DetailAST aAST)
     {
         DetailAST loopBody = null;
         if (aAST.getType() == TokenTypes.LITERAL_DO) {
             final DetailAST lparen = aAST.findFirstToken(TokenTypes.LPAREN);
             loopBody = lparen.getPreviousSibling();
         }
         else {
             final DetailAST rparen = aAST.findFirstToken(TokenTypes.RPAREN);
             loopBody = (DetailAST) rparen.getNextSibling();
         }
         return isTerminated(loopBody, false, false);
     }
 
     /**
      * Checks if a given try/cath/finally block terminated by return, throw or,
      * if allowed break, continue.
      * @param aAST loop to check
      * @param aUseBreak should we consider break as terminator.
      * @param aUseContinue should we consider continue as terminator.
      * @return true if try/cath/finally block is terminated.
      */
     private boolean checkTry(final DetailAST aAST, boolean aUseBreak,
                              boolean aUseContinue)
     {
         final DetailAST finalStmt = aAST.getLastChild();
         if (finalStmt.getType() == TokenTypes.LITERAL_FINALLY) {
             return isTerminated(finalStmt.findFirstToken(TokenTypes.SLIST),
                                 aUseBreak, aUseContinue);
         }
 
         boolean isTerminated = isTerminated((DetailAST) aAST.getFirstChild(),
                                             aUseBreak, aUseContinue);
 
         DetailAST catchStmt = aAST.findFirstToken(TokenTypes.LITERAL_CATCH);
         while (catchStmt != null && isTerminated) {
-            DetailAST catchBody = catchStmt.findFirstToken(TokenTypes.SLIST);
+            final DetailAST catchBody =
+                catchStmt.findFirstToken(TokenTypes.SLIST);
             isTerminated &= isTerminated(catchBody, aUseBreak, aUseContinue);
             catchStmt = (DetailAST) catchStmt.getNextSibling();
         }
         return isTerminated;
     }
 
     /**
      * Checks if a given switch terminated by return, throw or,
      * if allowed break, continue.
      * @param aAST loop to check
      * @param aUseContinue should we consider continue as terminator.
      * @return true if switch is terminated.
      */
     private boolean checkSwitch(final DetailAST aAST, boolean aUseContinue)
     {
         DetailAST caseGroup = aAST.findFirstToken(TokenTypes.CASE_GROUP);
         boolean isTerminated = (caseGroup != null);
         while (isTerminated && caseGroup != null
                && caseGroup.getType() != TokenTypes.RCURLY)
         {
-            DetailAST caseBody = caseGroup.findFirstToken(TokenTypes.SLIST);
+            final DetailAST caseBody =
+                caseGroup.findFirstToken(TokenTypes.SLIST);
             isTerminated &= isTerminated(caseBody, false, aUseContinue);
             caseGroup = (DetailAST) caseGroup.getNextSibling();
         }
         return isTerminated;
     }
 
 }
