diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
index bdccefa40..0fb0d3e97 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
@@ -205,168 +205,175 @@ public final class TreeWalker
      * in the provided configuration.
      * {@inheritDoc}
      */
     public void setupChild(Configuration aChildConf)
         throws CheckstyleException
     {
         // TODO: improve the error handing
         final String name = aChildConf.getName();
         final Object module = mModuleFactory.createModule(name);
         if (!(module instanceof Check)) {
             throw new CheckstyleException(
                 "TreeWalker is not allowed as a parent of " + name);
         }
         final Check c = (Check) module;
         c.contextualize(mChildContext);
         c.configure(aChildConf);
         c.init();
 
         registerCheck(c);
     }
 
     /**
      * Processes a specified file and reports all errors found.
      * @param aFile the file to process
      **/
     private void process(File aFile)
     {
         // check if already checked and passed the file
         final String fileName = aFile.getPath();
         final long timestamp = aFile.lastModified();
         if (mCache.alreadyChecked(fileName, timestamp)) {
             return;
         }
 
         try {
             getMessageDispatcher().fireFileStarted(fileName);
             final String[] lines = Utils.getLines(fileName, getCharset());
             final FileContents contents = new FileContents(fileName, lines);
             final DetailAST rootAST = TreeWalker.parse(contents);
             walk(rootAST, contents);
         }
         catch (FileNotFoundException fnfe) {
             Utils.getExceptionLogger()
                 .debug("FileNotFoundException occured.", fnfe);
             getMessageCollector().add(
                 new LocalizedMessage(
                     0,
                     Defn.CHECKSTYLE_BUNDLE,
                     "general.fileNotFound",
                     null,
+                    getId(),
                     this.getClass()));
         }
         catch (IOException ioe) {
             Utils.getExceptionLogger().debug("IOException occured.", ioe);
             getMessageCollector().add(
                 new LocalizedMessage(
                     0,
                     Defn.CHECKSTYLE_BUNDLE,
                     "general.exception",
                     new String[] {ioe.getMessage()},
+                    getId(),
                     this.getClass()));
         }
         catch (RecognitionException re) {
             Utils.getExceptionLogger()
                 .debug("RecognitionException occured.", re);
             getMessageCollector().add(
                 new LocalizedMessage(
                     re.getLine(),
                     re.getColumn(),
                     Defn.CHECKSTYLE_BUNDLE,
                     "general.exception",
                     new String[] {re.getMessage()},
+                    getId(),
                     this.getClass()));
         }
         catch (TokenStreamRecognitionException tre) {
             Utils.getExceptionLogger()
                 .debug("TokenStreamRecognitionException occured.", tre);
             final RecognitionException re = tre.recog;
             if (re != null) {
                 getMessageCollector().add(
                     new LocalizedMessage(
                         re.getLine(),
                         re.getColumn(),
                         Defn.CHECKSTYLE_BUNDLE,
                         "general.exception",
                         new String[] {re.getMessage()},
+                        getId(),
                         this.getClass()));
             }
             else {
                 getMessageCollector().add(
                     new LocalizedMessage(
                         0,
                         Defn.CHECKSTYLE_BUNDLE,
                         "general.exception",
                         new String[]
                         {"TokenStreamRecognitionException occured."},
+                        getId(),
                         this.getClass()));
             }
         }
         catch (TokenStreamException te) {
             Utils.getExceptionLogger()
                 .debug("TokenStreamException occured.", te);
             getMessageCollector().add(
                 new LocalizedMessage(
                     0,
                     Defn.CHECKSTYLE_BUNDLE,
                     "general.exception",
                     new String[] {te.getMessage()},
+                    getId(),
                     this.getClass()));
         }
         catch (Throwable err) {
             Utils.getExceptionLogger().debug("Throwable occured.", err);
             getMessageCollector().add(
                 new LocalizedMessage(
                     0,
                     Defn.CHECKSTYLE_BUNDLE,
                     "general.exception",
                     new String[] {"" + err},
+                    getId(),
                     this.getClass()));
         }
 
         if (getMessageCollector().size() == 0) {
             mCache.checkedOk(fileName, timestamp);
         }
         else {
             fireErrors(fileName);
         }
 
         getMessageDispatcher().fireFileFinished(fileName);
     }
 
     /**
      * Register a check for a given configuration.
      * @param aCheck the check to register
      * @throws CheckstyleException if an error occurs
      */
     private void registerCheck(Check aCheck)
         throws CheckstyleException
     {
         int[] tokens = new int[] {}; //safety initialization
         final Set checkTokens = aCheck.getTokenNames();
         if (!checkTokens.isEmpty()) {
             tokens = aCheck.getRequiredTokens();
 
             //register configured tokens
             final int acceptableTokens[] = aCheck.getAcceptableTokens();
             Arrays.sort(acceptableTokens);
             final Iterator it = checkTokens.iterator();
             while (it.hasNext()) {
                 final String token = (String) it.next();
                 try {
                     final int tokenId = TokenTypes.getTokenId(token);
                     if (Arrays.binarySearch(acceptableTokens, tokenId) >= 0) {
                         registerCheck(token, aCheck);
                     }
                     // TODO: else log warning
                 }
                 catch (IllegalArgumentException ex) {
                     throw new CheckstyleException("illegal token \""
                         + token + "\" in check " + aCheck, ex);
                 }
             }
         }
         else {
             tokens = aCheck.getDefaultTokens();
         }
         for (int i = 0; i < tokens.length; i++) {
             registerCheck(tokens[i], aCheck);
