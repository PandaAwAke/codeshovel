diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/RedundantImportCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/RedundantImportCheck.java
index ea3d46117..e4a8ac79e 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/RedundantImportCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/RedundantImportCheck.java
@@ -17,94 +17,97 @@
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks;
 
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FullIdent;
 
 import java.util.Iterator;
 import java.util.Set;
 import java.util.HashSet;
 
 /**
  * Checks for imports that are redundant.
  *
  * @author <a href="mailto:checkstyle@puppycrawl.com">Oliver Burn</a>
  * @version 1.0
  */
 public class RedundantImportCheck
     extends ImportCheck
 {
     /** name of package in file */
     private String mPkgName;
     /** set of the imports */
     private final Set mImports = new HashSet();
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void beginTree()
     {
         mPkgName = null;
         mImports.clear();
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.IMPORT, TokenTypes.PACKAGE_DEF};
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void visitToken(DetailAST aAST)
     {
         if (aAST.getType() == TokenTypes.PACKAGE_DEF) {
             final DetailAST nameAST = (DetailAST) aAST.getFirstChild();
             mPkgName = FullIdent.createFullIdent(nameAST).getText();
         }
         else {
             final FullIdent imp = getImportText(aAST);
             if (fromPackage(imp.getText(), "java.lang")) {
-                log(aAST.getLineNo(), aAST.getColumnNo(), "import.lang");
+                log(aAST.getLineNo(), aAST.getColumnNo(), "import.lang",
+                    imp.getText());
             }
             else if (fromPackage(imp.getText(), mPkgName)) {
-                log(aAST.getLineNo(), aAST.getColumnNo(), "import.same");
+                log(aAST.getLineNo(), aAST.getColumnNo(), "import.same",
+                    imp.getText());
             }
             // Check for a duplicate import
             final Iterator it = mImports.iterator();
             while (it.hasNext()) {
                 final FullIdent full = (FullIdent) it.next();
                 if (imp.getText().equals(full.getText())) {
                     log(aAST.getLineNo(),
                         aAST.getColumnNo(),
                         "import.duplicate",
-                        new Integer(full.getLineNo()));
+                        new Integer(full.getLineNo()),
+                        imp.getText());
                 }
             }
 
             mImports.add(imp);
         }
     }
 
     /**
      * Determines in an import statement is for types from a specified package.
      * @param aImport the import name
      * @param aPkg the package name
      * @return whether from the package
      */
     private static boolean fromPackage(String aImport, String aPkg)
     {
         boolean retVal = false;
         if (aPkg == null) {
             // If not package, then check for no package in the import.
             retVal = (aImport.indexOf('.') == -1);
         }
         else {
             final int index = aImport.lastIndexOf('.');
             if (index != -1) {
                 final String front = aImport.substring(0, index);
                 retVal = front.equals(aPkg);
             }
         }
         return retVal;
     }
 }
