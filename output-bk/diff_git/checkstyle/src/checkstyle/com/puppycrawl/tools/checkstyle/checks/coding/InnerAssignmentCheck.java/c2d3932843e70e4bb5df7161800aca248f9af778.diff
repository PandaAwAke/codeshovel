diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java
index 56271bf9d..34c05493a 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java
@@ -114,114 +114,114 @@ public class InnerAssignmentCheck
     /** {@inheritDoc} */
     public void visitToken(DetailAST aAST)
     {
         if (isInContext(aAST, ALLOWED_ASSIGMENT_CONTEXT)) {
             return;
         }
 
         if (isInNoBraceControlStatement(aAST)) {
             return;
         }
 
         if (isInWhileIdiom(aAST)) {
             return;
         }
 
         log(aAST.getLineNo(), aAST.getColumnNo(), "assignment.inner.avoid");
     }
 
     /**
      * Determines if aAST is in the body of a flow control statement without
      * braces. An example of such a statement would be
      * <p>
      * <pre>
      * if (y < 0)
      *     x = y;
      * </pre>
      * <p>
      * This leads to the following AST structure:
      * <p>
      * <pre>
      * LITERAL_IF
      *     LPAREN
      *     EXPR // test
      *     RPAREN
      *     EXPR // body
      *     SEMI
      * </pre>
      * <p>
      * We need to ensure that aAST is in the body and not in the test.
      *
      * @param aAST an assignment operator AST
      * @return whether aAST is in the body of a flow control statement
      */
     private static boolean isInNoBraceControlStatement(DetailAST aAST)
     {
         if (!isInContext(aAST, CONTROL_CONTEXT)) {
             return false;
         }
         final DetailAST expr = aAST.getParent();
         final AST exprNext = expr.getNextSibling();
-        return exprNext != null && exprNext.getType() == TokenTypes.SEMI;
+        return (exprNext != null) && (exprNext.getType() == TokenTypes.SEMI);
     }
 
     /**
      * Tests whether the given AST is used in the "assignment in while test"
      * idiom.
      * <p>
      * <pre>
      * while ((b = is.read()) != -1) {
      *   // work with b
      * }
      * <pre>
      * @param aAST assignment AST
      * @return whether the context of the assignemt AST indicates the idiom
      */
     private boolean isInWhileIdiom(DetailAST aAST)
     {
         if (!isComparison(aAST.getParent())) {
             return false;
         }
         return isInContext(
                 aAST.getParent(), ALLOWED_ASSIGMENT_IN_COMPARISON_CONTEXT);
     }
 
     /**
      * Checks if an AST is a comparison operator.
      * @param aAST the AST to check
      * @return true iff aAST is a comparison operator.
      */
     private static boolean isComparison(DetailAST aAST)
     {
         final int astType = aAST.getType();
         return (Arrays.binarySearch(COMPARISON_TYPES, astType) >= 0);
     }
 
     /**
      * Tests whether the provided AST is in
      * one of the given contexts.
      *
      * @param aAST the AST from which to start walking towards root
      * @param aContextSet the contexts to test against.
      *
      * @return whether the parents nodes of aAST match
      * one of the allowed type paths
      */
     private static boolean isInContext(DetailAST aAST, int[][] aContextSet)
     {
         for (int i = 0; i < aContextSet.length; i++) {
             DetailAST current = aAST;
             final int len = aContextSet[i].length;
             for (int j = 0; j < len; j++) {
                 current = current.getParent();
                 final int expectedType = aContextSet[i][j];
-                if (current == null || current.getType() != expectedType) {
+                if ((current == null) || (current.getType() != expectedType)) {
                     break;
                 }
                 if (j == len - 1) {
                     return true;
                 }
             }
         }
         return false;
     }
 }
