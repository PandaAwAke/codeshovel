diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
index 1aa5e87a0..3f4f92787 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
@@ -125,172 +125,174 @@ public final class TreeWalker
     {
         mMessages = new LocalizedMessages();
     }
 
     /** @param aTabWidth the distance between tab stops */
     public void setTabWidth(int aTabWidth)
     {
         mTabWidth = aTabWidth;
     }
 
     /** @param aFileName the cache file */
     public void setCacheFile(String aFileName)
     {
         final Configuration configuration = getConfiguration();
         mCache = new PropertyCacheFile(configuration, aFileName);
     }
 
     // TODO: Call from contextualize
     /** @param aClassLoader class loader to resolve classes with. */
     public void setClassLoader(ClassLoader aClassLoader)
     {
         mClassLoader = aClassLoader;
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Configurable */
     public void finishLocalSetup()
     {
         DefaultContext checkContext = new DefaultContext();
         checkContext.add("classLoader", mClassLoader);
         checkContext.add("messages", mMessages);
         // TODO: hmmm.. this looks less than elegant
         checkContext.add("tabWidth", String.valueOf(mTabWidth));
 
         mChildContext = checkContext;
     }
 
     /**
      * Instantiates, configures and registers a Check that is specified
      * in the provided configuration.
      * @see com.puppycrawl.tools.checkstyle.api.AutomaticBean
      */
     public void setupChild(Configuration aChildConf)
             throws CheckstyleException
     {
         // TODO: improve the error handing
 
         // IMPORTANT! Need to use the same class loader that created this
         // class. Otherwise can get ClassCastException problems.
         final String name = aChildConf.getName();
         final String[] packageNames = getPackageNames();
-        final Check check =
-                (Check) PackageObjectFactory.makeObject(
-                        packageNames, this.getClass().getClassLoader(), name);
-
-        check.contextualize(mChildContext);
-        check.configure(aChildConf);
-
-        registerCheck(check);
+        final Check c =
+            (Check) PackageObjectFactory.makeObject(
+                packageNames,
+                getClass().getClassLoader(),
+                name);
+        c.contextualize(mChildContext);
+        c.configure(aChildConf);
+        c.init();
+
+        registerCheck(c);
     }
 
     /**
      * Processes a specified file and reports all errors found.
      * @param aFile the file to process
      **/
     private void process(File aFile)
     {
         // check if already checked and passed the file
         final String fileName = aFile.getPath();
         final long timestamp = aFile.lastModified();
         if (mCache.alreadyChecked(fileName, timestamp)) {
             return;
         }
 
         mMessages.reset();
         try {
             getMessageDispatcher().fireFileStarted(fileName);
             final String[] lines = Utils.getLines(fileName);
             final FileContents contents = new FileContents(fileName, lines);
             final DetailAST rootAST = TreeWalker.parse(contents);
             walk(rootAST, contents);
         }
         catch (FileNotFoundException fnfe) {
             // TODO: this dependency on the checkstyle package is not good. It
             // introduces a circular dependency between packages.
             mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE,
                                                "general.fileNotFound", null));
         }
         catch (IOException ioe) {
             mMessages.add(new LocalizedMessage(
                               0, Defn.CHECKSTYLE_BUNDLE,
                               "general.exception",
                               new String[] {ioe.getMessage()}));
         }
         catch (RecognitionException re) {
             mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE,
                                                "general.exception",
                                                new String[] {re.getMessage()}));
         }
         catch (TokenStreamException te) {
             mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE,
                                                "general.exception",
                                                new String[] {te.getMessage()}));
         }
 
         if (mMessages.size() == 0) {
             mCache.checkedOk(fileName, timestamp);
         }
         else {
             getMessageDispatcher().fireErrors(
                 fileName, mMessages.getMessages());
         }
 
         getMessageDispatcher().fireFileFinished(fileName);
     }
 
     /**
      * Register a check for a given configuration.
      * @param aCheck the check to register
      * @throws CheckstyleException if an error occurs
      */
-    void registerCheck(Check aCheck)
-           throws CheckstyleException
+    private void registerCheck(Check aCheck)
+        throws CheckstyleException
     {
         final Set checkTokens = aCheck.getTokenNames();
         if (!checkTokens.isEmpty()) {
             final int acceptableTokens[] = aCheck.getAcceptableTokens();
             Arrays.sort(acceptableTokens);
             final Iterator it = checkTokens.iterator();
             while (it.hasNext()) {
                 final String token = (String) it.next();
                 try {
                     final int tokenId = TokenTypes.getTokenId(token);
                     if (Arrays.binarySearch(acceptableTokens, tokenId) >= 0) {
                         registerCheck(token, aCheck);
                     }
                     // TODO: else error message?
                 }
                 catch (IllegalArgumentException ex) {
                     throw new CheckstyleException("illegal token \""
                         + token + "\" in check " + aCheck);
                 }
             }
         }
         else {
             final int[] tokens = aCheck.getDefaultTokens();
             for (int i = 0; i < tokens.length; i++) {
                 registerCheck(tokens[i], aCheck);
             }
         }
         mAllChecks.add(aCheck);
     }
 
     /**
      * Register a check for a specified token id.
      * @param aTokenID the id of the token
      * @param aCheck the check to register
      */
     private void registerCheck(int aTokenID, Check aCheck)
     {
         registerCheck(TokenTypes.getTokenName(aTokenID), aCheck);
     }
 
     /**
      * Register a check for a specified token name
      * @param aToken the name of the token
      * @param aCheck the check to register
      */
     private void registerCheck(String aToken, Check aCheck)
     {
         ArrayList visitors = (ArrayList) mTokenToChecks.get(aToken);
         if (visitors == null) {
             visitors = new ArrayList();
@@ -427,54 +429,58 @@ public final class TreeWalker
         try {
             // try the 1.4 grammar first, this will succeed for
             // all code that compiles without any warnings in JDK 1.4,
             // that should cover most cases
             final Reader sar = new StringArrayReader(aContents.getLines());
             final GeneratedJava14Lexer jl = new GeneratedJava14Lexer(sar);
             jl.setFilename(aContents.getFilename());
             jl.setFileContents(aContents);
 
             final GeneratedJava14Recognizer jr =
                 new SilentJava14Recognizer(jl);
             jr.setFilename(aContents.getFilename());
             jr.setASTNodeClass(DetailAST.class.getName());
             jr.compilationUnit();
             rootAST = (DetailAST) jr.getAST();
         }
         catch (RecognitionException re) {
             // Parsing might have failed because the checked
             // file contains "assert" as an identifier. Retry with a
             // grammar that treats "assert" as an identifier
             // and not as a keyword
 
             // Arghh - the pain - duplicate code!
             final Reader sar = new StringArrayReader(aContents.getLines());
             final GeneratedJavaLexer jl = new GeneratedJavaLexer(sar);
             jl.setFilename(aContents.getFilename());
             jl.setFileContents(aContents);
 
             final GeneratedJavaRecognizer jr = new GeneratedJavaRecognizer(jl);
             jr.setFilename(aContents.getFilename());
             jr.setASTNodeClass(DetailAST.class.getName());
             jr.compilationUnit();
             rootAST = (DetailAST) jr.getAST();
         }
         return rootAST;
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.FileSetCheck */
     public void process(File[] aFiles)
     {
         for (int i = 0; i < aFiles.length; i++) {
             process(aFiles[i]);
         }
     }
 
     /**
      * @see com.puppycrawl.tools.checkstyle.api.FileSetCheck
      */
     public void destroy()
     {
-        super.destroy();
+        for (Iterator it = mAllChecks.iterator(); it.hasNext();) {
+            final Check c = (Check) it.next();
+            c.destroy();
+        }
         mCache.destroy();
+        super.destroy();
     }
 }
