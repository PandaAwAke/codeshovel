diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
index 6ae4d3fa2..0bcfdc84d 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
@@ -376,101 +376,103 @@ public class CheckStyleTask
         /** @see EnumeratedAttribute */
         public String[] getValues()
         {
             return VALUES;
         }
     }
 
     /**
      * Details about a formatter to be used.
      * @author <a href="mailto:oliver@puppycrawl.com">Oliver Burn</a>
      */
     public static class Formatter
     {
         /** the formatter type */
         private FormatterType mFormatterType = null;
         /** the file to output to */
         private File mToFile = null;
 
         /**
          * Set the type of the formatter.
          * @param aType the type
          */
         public void setType(FormatterType aType)
         {
             final String val = aType.getValue();
             if (!E_XML.equals(val) && !E_PLAIN.equals(val)) {
                 throw new BuildException("Invalid formatter type: " + val);
             }
 
             mFormatterType = aType;
         }
 
         /**
          * Set the file to output to.
          * @param aTo the file to output to
          */
         public void setTofile(File aTo)
         {
             mToFile = aTo;
         }
 
         /**
          * Creates a listener for the formatter.
          * @param aTask the task running
          * @return a listener
          * @throws IOException if an error occurs
          */
         public AuditListener createListener(Task aTask)
             throws IOException
         {
-            if (E_XML.equals(mFormatterType.getValue())) {
+            if (mFormatterType != null
+                && E_XML.equals(mFormatterType.getValue()))
+            {
                 return createXMLLogger(aTask);
             }
             else {
                 return createDefaultLogger(aTask);
             }
         }
 
         /**
          * @return a DefaultLogger instance
          * @param aTask the task to possibly log to
          * @throws IOException if an error occurs
          */
         private AuditListener createDefaultLogger(Task aTask)
             throws IOException
         {
             if (mToFile == null) {
                 return new DefaultLogger(
                     new LogOutputStream(aTask, Project.MSG_DEBUG), true,
                     new LogOutputStream(aTask, Project.MSG_ERR), true);
             }
             return new DefaultLogger(new FileOutputStream(mToFile), true);
         }
 
         /**
          * @return an XMLLogger instance
          * @param aTask the task to possibly log to
          * @throws IOException if an error occurs
          */
         private AuditListener createXMLLogger(Task aTask)
             throws IOException
         {
             if (mToFile == null) {
                 return new XMLLogger(
                     new LogOutputStream(aTask, Project.MSG_INFO), true);
             }
             else {
                 return new XMLLogger(new FileOutputStream(mToFile), true);
             }
         }
     }
 
     /**
      * Represents a property that consists of a key and value.
      */
     public static class Property
     {
         /** the property key */
         private String mKey;
         /** the property value */
         private String mValue;
