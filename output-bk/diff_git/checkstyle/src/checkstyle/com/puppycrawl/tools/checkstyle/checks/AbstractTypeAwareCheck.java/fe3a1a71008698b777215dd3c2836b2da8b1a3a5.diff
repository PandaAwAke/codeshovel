diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
index 80cda29b4..8e45ef62a 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
@@ -15,100 +15,102 @@
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FullIdent;
 import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.api.Utils;
 import java.util.HashSet;
 import java.util.Set;
 
 /**
  * Abstract class that endeavours to maintain type information for the Java
  * file being checked. It provides helper methods for performing type
  * information functions.
  *
  * @author Oliver Burn
  * @version 1.0
  */
 public abstract class AbstractTypeAwareCheck
     extends Check
 {
     /** imports details **/
     private Set mImports = new HashSet();
 
     /** full identifier for package of the method **/
     private FullIdent mPackageFullIdent;
 
     /** Name of current class. */
     private String mCurrentClass;
 
     /** <code>ClassResolver</code> instance for current tree. */
     private ClassResolver mClassResolver;
 
     /**
      * Called to process an AST when visiting it.
      * @param aAST the AST to process. Guaranteed to not be PACKAGE_DEF or
      *             IMPORT tokens.
      */
     protected abstract void processAST(DetailAST aAST);
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void beginTree(DetailAST aRootAST)
     {
         mPackageFullIdent = FullIdent.createFullIdent(null);
         mImports.clear();
+        // add java.lang.* since it's always imported
+        mImports.add("java.lang.*");
         mClassResolver = null;
         mCurrentClass = "";
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public final void visitToken(DetailAST aAST)
     {
         if (aAST.getType() == TokenTypes.PACKAGE_DEF) {
             processPackage(aAST);
         }
         else if (aAST.getType() == TokenTypes.IMPORT) {
             processImport(aAST);
         }
         else if (aAST.getType() == TokenTypes.CLASS_DEF) {
             processClass(aAST);
         }
         else {
             processAST(aAST);
         }
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public final void leaveToken(DetailAST aAST)
     {
         if (aAST.getType() == TokenTypes.CLASS_DEF) {
             int dotIdx = mCurrentClass.lastIndexOf(".");
             if (dotIdx == -1) {
                 mCurrentClass = "";
             }
             else {
                 mCurrentClass = mCurrentClass.substring(0, dotIdx);
             }
         }
     }
 
     /**
      * Calculate if one type name is a shortname for another type name.
      * @param aShortName a shorthand, such as <code>IOException</code>
      * @param aFullName a full name, such as <code>java.io.IOException</code>
      * @return true iff aShortName represents the same type as aFullName
      */
     protected boolean isShortName(String aShortName, String aFullName)
     {
         if (aShortName.length() >= aFullName.length()) {
             return false;
         }
 
         final String base = Utils.baseClassname(aFullName);
         if (aShortName.length() >= aFullName.length()
                 || !base.equals(aShortName))
