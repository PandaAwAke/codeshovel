diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java
index 137ef3a69..b60118b55 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java
@@ -168,71 +168,71 @@ public class HandlerFactory
         }
 
         if (aAst.getType() == TokenTypes.METHOD_CALL) {
             return createMethodCallHandler(aIndentCheck, aAst, aParent);
         }
 
         ExpressionHandler expHandler = null;
         try {
             final Constructor<?> handlerCtor =
                 mTypeHandlers.get(aAst.getType());
             if (handlerCtor != null) {
                 expHandler = (ExpressionHandler) handlerCtor.newInstance(
                         aIndentCheck, aAst, aParent);
             }
         }
         ///CLOVER:OFF
         catch (final InstantiationException e) {
             LOG.debug("couldn't instantiate constructor for " + aAst, e);
             throw new RuntimeException("couldn't instantiate constructor for "
                                        + aAst);
         }
         catch (final IllegalAccessException e) {
             LOG.debug("couldn't access constructor for " + aAst, e);
             throw new RuntimeException("couldn't access constructor for "
                                        + aAst);
         }
         catch (final InvocationTargetException e) {
             LOG.debug("couldn't instantiate constructor for " + aAst, e);
             throw new RuntimeException("couldn't instantiate constructor for "
                                        + aAst);
         }
         if (expHandler == null) {
             throw new RuntimeException("no handler for type " + aAst.getType());
         }
         ///CLOVER:ON
         return expHandler;
     }
 
     /**
      * Create new instance of handler for METHOD_CALL.
      *
      * @param aIndentCheck   the indentation check
      * @param aAst           ast to handle
      * @param aParent        the handler parent of this AST
      *
      * @return new instance.
      */
     ExpressionHandler createMethodCallHandler(IndentationCheck aIndentCheck,
         DetailAST aAst, ExpressionHandler aParent)
     {
-        DetailAST ast = (DetailAST) aAst.getFirstChild();
+        DetailAST ast = aAst.getFirstChild();
         while ((ast != null) && (ast.getType() == TokenTypes.DOT)) {
-            ast = (DetailAST) ast.getFirstChild();
+            ast = ast.getFirstChild();
         }
         if ((ast != null) && isHandledType(ast.getType())) {
             aParent = getHandler(aIndentCheck, ast, aParent);
             mCreatedHandlers.put(ast, aParent);
         }
         return new MethodCallHandler(aIndentCheck, aAst, aParent);
     }
 
     /** Clears cache of created handlers. */
     void clearCreatedHandlers()
     {
         mCreatedHandlers.clear();
     }
 
     /** cache for created method call handlers */
     private final Map<DetailAST, ExpressionHandler> mCreatedHandlers =
         Maps.newHashMap();
 }
