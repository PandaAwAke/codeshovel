diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/Utils.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/Utils.java
index d781533e2..9045ad9e5 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/Utils.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/Utils.java
@@ -126,51 +126,60 @@ public final class Utils
         if (retVal == null) {
             retVal = new RE(aPattern);
             CREATED_RES.put(aPattern, retVal);
         }
         return retVal;
     }
 
     /**
      * Loads the contents of a file in a String array.
      * @return the lines in the file
      * @param aFileName the name of the file to load
      * @throws IOException error occurred
      **/
     public static String[] getLines(String aFileName)
         throws IOException
     {
         final LineNumberReader lnr =
             new LineNumberReader(new FileReader(aFileName));
         final ArrayList lines = new ArrayList();
         while (true) {
             final String l = lnr.readLine();
             if (l == null) {
                 break;
             }
             lines.add(l);
         }
 
         return (String[]) lines.toArray(new String[0]);
     }
 
     /**
      * Helper method to create a regular expression.
      * @param aPattern the pattern to match
      * @return a created regexp object
      * @throws ConversionException if unable to create RE object.
      **/
     public static RE createRE(String aPattern)
         throws ConversionException
     {
         RE retVal = null;
         try {
             retVal = getRE(aPattern);
         }
         catch (RESyntaxException e) {
             throw new ConversionException(
                 "Failed to initialise regexp expression " + aPattern, e);
         }
         return retVal;
     }
 
+    /**
+     * @return the base class name from a fully qualified name
+     * @param aType the fully qualified name. Cannot be null
+     */
+    public static String baseClassname(String aType)
+    {
+        final int i = aType.lastIndexOf(".");
+        return (i == -1) ? aType : aType.substring(i + 1);
+    }
 }
