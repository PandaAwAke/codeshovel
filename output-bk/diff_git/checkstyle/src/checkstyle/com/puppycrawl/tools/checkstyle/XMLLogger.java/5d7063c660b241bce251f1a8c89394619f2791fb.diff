diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/XMLLogger.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/XMLLogger.java
index dc159d8c5..98428d332 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/XMLLogger.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/XMLLogger.java
@@ -119,116 +119,116 @@ public class XMLLogger
 
     /** @see AuditListener **/
     public void fileFinished(AuditEvent aEvt)
     {
         mWriter.println("</file>");
     }
 
     /** @see AuditListener **/
     public void addError(AuditEvent aEvt)
     {
         if (!SeverityLevel.IGNORE.equals(aEvt.getSeverityLevel())) {
             mWriter.print("<error" + " line=\"" + aEvt.getLine() + "\"");
             if (aEvt.getColumn() > 0) {
                 mWriter.print(" column=\"" + aEvt.getColumn() + "\"");
             }
             mWriter.print(" severity=\""
                 + aEvt.getSeverityLevel().getName()
                 + "\"");
             mWriter.print(" message=\""
                 + encode(aEvt.getMessage())
                 + "\"");
             mWriter.println(" source=\""
                 + encode(aEvt.getSourceName())
                 + "\"/>");
         }
     }
 
     /** @see AuditListener **/
     public void addException(AuditEvent aEvt, Throwable aThrowable)
     {
         final StringWriter sw = new StringWriter();
         final PrintWriter pw = new PrintWriter(sw);
         pw.println("<exception>");
         pw.println("<![CDATA[");
         aThrowable.printStackTrace(pw);
         pw.println("]]>");
         pw.println("</exception>");
         pw.flush();
         mWriter.println(encode(sw.toString()));
     }
 
     /**
      * Escape &lt;, &gt; &amp; &apos; and &quot; as their entities.
      * @param aValue the value to escape.
      * @return the escaped value if necessary.
      */
     public String encode(String aValue)
     {
         final StringBuffer sb = new StringBuffer();
         for (int i = 0; i < aValue.length(); i++) {
-            char c = aValue.charAt(i);
+            final char c = aValue.charAt(i);
             switch (c) {
             case '<':
                 sb.append("&lt;");
                 break;
             case '>':
                 sb.append("&gt;");
                 break;
             case '\'':
                 sb.append("&apos;");
                 break;
             case '\"':
                 sb.append("&quot;");
                 break;
             case '&':
-                int nextSemi = aValue.indexOf(";", i);
+                final int nextSemi = aValue.indexOf(";", i);
                 if ((nextSemi < 0)
                     || !isReference(aValue.substring(i, nextSemi + 1)))
                 {
                     sb.append("&amp;");
                 }
                 else {
                     sb.append('&');
                 }
                 break;
             default:
                 sb.append(c);
                 break;
             }
         }
         return sb.toString();
     }
 
     /**
      * @return whether the given argument a character or entity reference
      * @param aEnt the possible entity to look for.
      */
     public boolean isReference(String aEnt)
     {
         if (!(aEnt.charAt(0) == '&') || !aEnt.endsWith(";")) {
             return false;
         }
 
         if (aEnt.charAt(1) == '#') {
             int prefixLength = 2; // "&#"
             int radix = BASE_10;
             if (aEnt.charAt(2) == 'x') {
                 prefixLength++;
                 radix = BASE_16;
             }
             try {
                 Integer.parseInt(
                     aEnt.substring(prefixLength, aEnt.length() - 1), radix);
                 return true;
             }
             catch (NumberFormatException nfe) {
                 return false;
             }
         }
 
         final String name = aEnt.substring(1, aEnt.length() - 1);
         for (int i = 0; i < ENTITIES.length; i++) {
             if (name.equals(ENTITIES[i])) {
                 return true;
             }
         }
