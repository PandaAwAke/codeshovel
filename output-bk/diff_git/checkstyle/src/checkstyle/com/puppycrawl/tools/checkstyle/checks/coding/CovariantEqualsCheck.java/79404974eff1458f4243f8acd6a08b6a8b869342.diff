diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheck.java
index 5d204689d..f45bb8391 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheck.java
@@ -68,53 +68,53 @@ public class CovariantEqualsCheck extends Check
         final DetailAST objBlock = aAST.findFirstToken(TokenTypes.OBJBLOCK);
         if (objBlock != null) {
             DetailAST child = (DetailAST) objBlock.getFirstChild();
             while (child != null) {
                 if (child.getType() == TokenTypes.METHOD_DEF) {
                     if (CheckUtils.isEqualsMethod(child)) {
                         if (hasObjectParameter(child)) {
                             hasEqualsObject = true;
                         }
                         else {
                             mEqualsMethods.add(child);
                         }
                     }
                 }
                 child = (DetailAST) child.getNextSibling();
             }
 
             // report equals method definitions
             if (!hasEqualsObject) {
                 for (DetailAST equalsAST : mEqualsMethods) {
                     final DetailAST nameNode = equalsAST
                             .findFirstToken(TokenTypes.IDENT);
                     log(nameNode.getLineNo(), nameNode.getColumnNo(),
                             "covariant.equals");
                 }
             }
         }
     }
 
     /**
      * Tests whether a method definition AST has exactly one
      * parameter of type Object.
      * @param aAST the method definition AST to test.
      * Precondition: aAST is a TokenTypes.METHOD_DEF node.
      * @return true if aAST has exactly one parameter of type Object.
      */
     private boolean hasObjectParameter(DetailAST aAST)
     {
         // one parameter?
         final DetailAST paramsNode = aAST.findFirstToken(TokenTypes.PARAMETERS);
         if (paramsNode.getChildCount() != 1) {
             return false;
         }
 
         // parameter type "Object"?
         final DetailAST paramNode =
             paramsNode.findFirstToken(TokenTypes.PARAMETER_DEF);
         final DetailAST typeNode = paramNode.findFirstToken(TokenTypes.TYPE);
         final FullIdent fullIdent = FullIdent.createFullIdentBelow(typeNode);
         final String name = fullIdent.getText();
-        return (name.equals("Object") || name.equals("java.lang.Object"));
+        return ("Object".equals(name) || "java.lang.Object".equals(name));
     }
 }
