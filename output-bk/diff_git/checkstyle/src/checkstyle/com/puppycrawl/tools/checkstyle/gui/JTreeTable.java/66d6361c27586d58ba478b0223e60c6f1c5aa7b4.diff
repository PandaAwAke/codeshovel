diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java
index 265f67e5c..fa0e152da 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java
@@ -109,164 +109,164 @@ public class JTreeTable extends JTable
         Action expand = new AbstractAction() {
                 public void actionPerformed(ActionEvent e) {
                     TreePath selected = tree.getSelectionPath();
                     if (tree.isExpanded(selected)) {
                         tree.collapsePath(selected);
                     }
                     else {
                         tree.expandPath(selected);
                     }
                     tree.setSelectionPath(selected);
                 }
             };
         KeyStroke stroke = KeyStroke.getKeyStroke("ENTER");
         String command = "expand/collapse";
         getInputMap().put(stroke, command);
         getActionMap().put(command, expand);
     }
 
     /**
      * Overridden to message super and forward the method to the tree.
      * Since the tree is not actually in the component hierarchy it will
      * never receive this unless we forward it in this manner.
      */
     public void updateUI()
     {
         super.updateUI();
         if (tree != null) {
             tree.updateUI();
         }
         // Use the tree's default foreground and background colors in the
         // table.
         LookAndFeel.installColorsAndFont(this, "Tree.background",
                 "Tree.foreground", "Tree.font");
     }
 
     /* Workaround for BasicTableUI anomaly. Make sure the UI never tries to
      * paint the editor. The UI currently uses different techniques to
      * paint the renderers and editors and overriding setBounds() below
      * is not the right thing to do for an editor. Returning -1 for the
      * editing row in this case, ensures the editor is never painted.
      */
     public int getEditingRow()
     {
         final Class editingClass = getColumnClass(editingColumn);
         return (editingClass == TreeTableModel.class) ? -1 : editingRow;
     }
 
     /**
      * Overridden to pass the new rowHeight to the tree.
      */
-    public void setRowHeight(int rowHeight)
+    public void setRowHeight(int newRowHeight)
     {
-        super.setRowHeight(rowHeight);
-        if (tree != null && tree.getRowHeight() != rowHeight) {
+        super.setRowHeight(newRowHeight);
+        if (tree != null && tree.getRowHeight() != newRowHeight) {
             tree.setRowHeight(getRowHeight());
         }
     }
 
     /**
      * @return the tree that is being shared between the model.
      */
     public JTree getTree()
     {
         return tree;
     }
 
     /**
      * A TreeCellRenderer that displays a JTree.
      */
     class TreeTableCellRenderer extends JTree implements
             TableCellRenderer
     {
         /** Last table/tree row asked to renderer. */
         protected int visibleRow;
 
         /** creates a new instance */
         public TreeTableCellRenderer(TreeModel model)
         {
             super(model);
         }
 
         /**
          * updateUI is overridden to set the colors of the Tree's renderer
          * to match that of the table.
          */
         public void updateUI()
         {
             super.updateUI();
             // Make the tree's cell renderer use the table's cell selection
             // colors.
             TreeCellRenderer tcr = getCellRenderer();
             if (tcr instanceof DefaultTreeCellRenderer) {
                 DefaultTreeCellRenderer dtcr = ((DefaultTreeCellRenderer) tcr);
                 // For 1.1 uncomment this, 1.2 has a bug that will cause an
                 // exception to be thrown if the border selection color is
                 // null.
                 // dtcr.setBorderSelectionColor(null);
                 dtcr.setTextSelectionColor(UIManager.getColor
                         ("Table.selectionForeground"));
                 dtcr.setBackgroundSelectionColor(UIManager.getColor
                         ("Table.selectionBackground"));
             }
         }
 
         /**
          * Sets the row height of the tree, and forwards the row height to
          * the table.
          */
-        public void setRowHeight(int rowHeight)
+        public void setRowHeight(int newRowHeight)
         {
-            if (rowHeight > 0) {
-                super.setRowHeight(rowHeight);
+            if (newRowHeight > 0) {
+                super.setRowHeight(newRowHeight);
                 if (JTreeTable.this != null &&
-                        JTreeTable.this.getRowHeight() != rowHeight) {
+                        JTreeTable.this.getRowHeight() != newRowHeight) {
                     JTreeTable.this.setRowHeight(getRowHeight());
                 }
             }
         }
 
         /**
          * This is overridden to set the height to match that of the JTable.
          */
         public void setBounds(int x, int y, int w, int h)
         {
             super.setBounds(x, 0, w, JTreeTable.this.getHeight());
         }
 
         /**
          * Sublcassed to translate the graphics such that the last visible
          * row will be drawn at 0,0.
          */
         public void paint(Graphics g)
         {
             g.translate(0, -visibleRow * getRowHeight());
             super.paint(g);
         }
 
         /**
          * TreeCellRenderer method. Overridden to update the visible row.
          * @see TableCellRenderer
          */
         public Component getTableCellRendererComponent(JTable table,
                 Object value,
                 boolean isSelected,
                 boolean hasFocus,
                 int row, int column)
         {
             if (isSelected) {
                 setBackground(table.getSelectionBackground());
             } else {
                 setBackground(table.getBackground());
             }
 
             visibleRow = row;
             return this;
         }
     }
 
 
     /**
      * TreeTableCellEditor implementation. Component returned is the
      * JTree.
      */
     public class TreeTableCellEditor extends AbstractCellEditor implements
