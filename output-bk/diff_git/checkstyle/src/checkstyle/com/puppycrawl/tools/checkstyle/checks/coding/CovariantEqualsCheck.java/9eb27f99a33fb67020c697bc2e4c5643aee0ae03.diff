diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheck.java
index c2f2275e5..9bac0528d 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheck.java
@@ -96,123 +96,119 @@ public class CovariantEqualsCheck
             }
         }
 
         /**
          * Returns the set of AST nodes for equals method definitions.
          * The set is empty if the class defines method
          * equals(java.lang.Object).
          * @return the set of AST nodes for equals method definitions.
          */
         public Set getEqualsNodes()
         {
             return mEqualsNodes;
         }
 
         /**
          * Records the definition of method equals(java.lang.Object).
          */
         public void setHasEqualsObject()
         {
             mHasEqualsObject = true;
             mEqualsNodes.clear();
         }
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.CLASS_DEF,
             TokenTypes.LITERAL_NEW,
             TokenTypes.METHOD_DEF,
         };
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public int[] getRequiredTokens()
     {
         return getDefaultTokens();
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void beginTree(DetailAST aRootAST)
     {
         mClassStack.clear();
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void visitToken(DetailAST aAST)
     {
         if (aAST.getType() == TokenTypes.METHOD_DEF) {
-            final DetailAST definer = getDefiner(aAST);
-            final int type = definer.getType();
-            if ((type == TokenTypes.CLASS_DEF)
-                || (type == TokenTypes.LITERAL_NEW))
-            {
+            if (isEqualsMethod(aAST) && !ScopeUtils.inInterfaceBlock(aAST)) {
+                final DetailAST definer = getDefiner(aAST);
                 if (mClassStack.isEmpty()) {
                     mClassStack.add(new ClassAttributes(definer));
                 }
-                final ClassAttributes attrs =
-                        (ClassAttributes) mClassStack.getLast();
+                ClassAttributes attrs =
+                    (ClassAttributes) mClassStack.getLast();
                 final DetailAST currentRoot = attrs.getRootAST();
                 if (definer != currentRoot) {
-                    mClassStack.add(new ClassAttributes(definer));
+                    final ClassAttributes definerAttrs =
+                        new ClassAttributes(definer);
+                    mClassStack.add(definerAttrs);
+                    attrs = definerAttrs;
                 }
-                if (!ScopeUtils.inInterfaceBlock(aAST)
-                    && isEqualsMethod(aAST))
-                {
-                    if (hasObjectParameter(aAST)) {
-                        attrs.setHasEqualsObject();
-                    }
-                    else {
-                        attrs.addEqualsNode(aAST);
-                    }
+                if (hasObjectParameter(aAST)) {
+                    attrs.setHasEqualsObject();
+                }
+                else {
+                    attrs.addEqualsNode(aAST);
                 }
             }
         }
     }
 
     /**
      * Determines the definer of an AST node. The definer is a class,
      * interface or new (anonymous class).
      * @param aAST the defined AST node.
      * @return the definer of aAST.
      */
     private DetailAST getDefiner(DetailAST aAST)
     {
         for (DetailAST token = aAST.getParent();
              token != null;
              token = token.getParent())
         {
             final int type = token.getType();
             if ((type == TokenTypes.CLASS_DEF)
                 || (type == TokenTypes.INTERFACE_DEF)
                 || (type == TokenTypes.LITERAL_NEW))
             {
                 return token;
             }
 
         }
         return null;
     }
 
     /**
      * Tests whether a method definition AST defines an equals covariant.
      * @param aAST the method definition AST to test.
      * Precondition: aAST is a TokenTypes.METHOD_DEF node.
      * @return true if aAST defines an equals covariant.
      */
     private boolean isEqualsMethod(DetailAST aAST)
     {
         // non-static, non-abstract?
         final DetailAST modifiers = aAST.findFirstToken(TokenTypes.MODIFIERS);
         if (modifiers.branchContains(TokenTypes.LITERAL_STATIC)
             || modifiers.branchContains(TokenTypes.ABSTRACT))
         {
             return false;
         }
 
         // named "equals"?
         final DetailAST nameNode = aAST.findFirstToken(TokenTypes.IDENT);
         final String name = nameNode.getText();
         if (!name.equals("equals")) {
             return false;
