diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
index 13c621a97..227fbc8ab 100755
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
@@ -1,222 +1,249 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2004  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.javadoc;
 
 import java.util.Stack;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FileContents;
 import com.puppycrawl.tools.checkstyle.api.Scope;
 import com.puppycrawl.tools.checkstyle.api.ScopeUtils;
 import com.puppycrawl.tools.checkstyle.api.TextBlock;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import org.apache.regexp.RE;
 import org.apache.regexp.RESyntaxException;
 
 /**
  * <p>Custom Checkstyle Check to validate Javadoc.
  * The following checks are performed:
  * <ul>
  * <li>Ensures the first sentence ends with proper punctuation (That is
  * a period, question mark, or exclaimation mark).  Javadoc  automatically
  * places the first sentence in the method summary table and index.  With out
  * proper punctuation the Javadoc may be malformed.
+ * <li> Check text for Javadoc statements that do not have any description.
+ * This includes both completely empty Javadoc, and Javadoc with only
+ * tags such as @param and @return.
  * <li>Check text for incomplete html tags.  Verifies that HTML tags have
  * corresponding end tags and issues an UNCLOSED_HTML error if not.
  * An EXTRA_HTML error is issued if an end tag is found without a previous
  * open tag.
  * </ul>
  * <p>These checks were patterned after the checks made by the doclet
  * <code>com.sun.tools.doclets.doccheck.DocCheck</code>
  *
  * @author Chris Stillwell
- * @version 1.1
+ * @author Daniel Grenner
+ * @version 1.2
  */
 public class JavadocStyleCheck
     extends Check
 {
     /** Message property key for the Unclosed HTML message. */
     private static final String UNCLOSED_HTML = "javadoc.unclosedhtml";
 
     /** Message property key for the Extra HTML message. */
     private static final String EXTRA_HTML = "javadoc.extrahtml";
 
     /** HTML tags that do not require a close tag. */
     private static final String[] SINGLE_TAG =
     {"p", "br", "li", "dt", "dd", "td", "hr", "img", "tr", "th", "td"};
 
     /** The scope to check. */
     private Scope mScope = Scope.PRIVATE;
 
     /** Regular expression for matching the end of a sentence. */
     private RE mEndOfSentenceRE;
 
     /**
      * Indicates if the first sentence should be checked for proper end of
      * sentence punctuation.
      */
     private boolean mCheckFirstSentence = true;
 
     /**
      * Indicates if the HTML within the comment should be checked.
      */
     private boolean mCheckHtml = true;
 
+    /**
+     * Indicates if empty javadoc statements should be checked.
+     */
+    private boolean mCheckEmptyJavadoc;
+
     /**
      * The default tokens this Check is used for.
      * @see com.puppycrawl.tools.checkstyle.api.Check#getDefaultTokens()
      */
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.INTERFACE_DEF,
             TokenTypes.CLASS_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.CTOR_DEF,
             TokenTypes.VARIABLE_DEF,
         };
     }
 
     /**
      * Called to process a token.
      * @see com.puppycrawl.tools.checkstyle.api.Check
      */
     public void visitToken(DetailAST aAST)
     {
         if (!ScopeUtils.inCodeBlock(aAST)) {
             final DetailAST mods =
                 aAST.findFirstToken(TokenTypes.MODIFIERS);
             final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);
             final Scope variableScope =
                 ScopeUtils.inInterfaceBlock(aAST)
                     ? Scope.PUBLIC
                     : declaredScope;
 
             if (variableScope.isIn(mScope)) {
                 final Scope surroundingScope =
                     ScopeUtils.getSurroundingScope(aAST);
 
                 if ((surroundingScope == null)
                     || surroundingScope.isIn(mScope))
                 {
                     final FileContents contents = getFileContents();
                     final TextBlock cmt =
                         contents.getJavadocBefore(aAST.getLineNo());
 
                     checkComment(cmt);
                 }
             }
         }
     }
 
     /**
      * Performs the various checks agains the Javadoc comment.
      *
      * @param aComment the source lines that make up the Javadoc comment.
      *
      * @see #checkFirstSentence(TextBlock)
      * @see #checkHtml(TextBlock)
      */
     private void checkComment(TextBlock aComment)
     {
         if (aComment == null) {
             return;
         }
 
         if (mCheckFirstSentence) {
             checkFirstSentence(aComment);
         }
 
         if (mCheckHtml) {
             checkHtml(aComment);
         }
+
+        if (mCheckEmptyJavadoc) {
+            checkEmptyJavadoc(aComment);
+        }
     }
 
     /**
      * Checks that the first sentence ends with proper puctuation.  This method
      * uses a regular expression that checks for the presence of a period,
      * question mark, or exclaimation mark followed either by whitespace, an
      * HTML element, or the end of string. This method ignores {@inheritDoc}
      * comments.
      *
      * @param aComment the source lines that make up the Javadoc comment.
      */
     private void checkFirstSentence(TextBlock aComment)
     {
         final String commentText = getCommentText(aComment.getText());
 
         if ((commentText.length() != 0)
             && !getEndOfSentenceRE().match(commentText)
             && !"{@inheritDoc}".equals(commentText))
         {
             log(aComment.getStartLineNo(), "javadoc.noperiod");
         }
     }
 
+    /**
+     * Checks that the Javadoc is not empty.
+     *
+     * @param aComment the source lines that make up the Javadoc comment.
+     */
+    private void checkEmptyJavadoc(TextBlock aComment)
+    {
+        final String commentText = getCommentText(aComment.getText());
+
+        if (commentText.length() == 0) {
+            log(aComment.getStartLineNo(), "javadoc.empty");
+        }
+    }
+
     /**
      * Returns the comment text from the Javadoc.
      * @param aComments the lines of Javadoc.
      * @return a comment text String.
      */
     private String getCommentText(String[] aComments)
     {
         final StringBuffer buffer = new StringBuffer();
         boolean foundTag = false;
 
         for (int i = 0; i < aComments.length; i++) {
             String line = aComments[i];
             final int textStart = findTextStart(line);
 
             if (textStart != -1) {
                 // Look for Javadoc tag that's not an inline tag
                 // it can appear within the comment text.
                 // Inline tags are denoted by curly braces: {@tag}
                 final int ndx = line.indexOf('@');
                 if ((ndx != -1)
                     && (ndx == 0 || line.charAt(ndx - 1) != '{'))
                 {
                     foundTag = true;
                     line = line.substring(0, ndx);
                 }
 
                 buffer.append(line.substring(textStart));
                 trimTail(buffer);
                 buffer.append('\n');
 
                 if (foundTag) {
                     break;
                 }
             }
         }
 
         return buffer.toString().trim();
     }
 
     /**
      * Finds the index of the first non-whitespace character ignoring the
      * Javadoc comment start and end strings (&#47** and *&#47) as well as any
      * leading asterisk.
      * @param aLine the Javadoc comment line of text to scan.
      * @return the int index relative to 0 for the start of text
      *         or -1 if not found.
      */
     private int findTextStart(String aLine)
     {
         int textStart = -1;
@@ -409,51 +436,59 @@ public class JavadocStyleCheck
         return isExtra;
     }
 
     /**
      * Sets the scope to check.
      * @param aFrom string to get the scope from
      */
     public void setScope(String aFrom)
     {
         mScope = Scope.getInstance(aFrom);
     }
 
     /**
      * Returns a regular expression for matching the end of a sentence.
      *
      * @return a regular expression for matching the end of a sentence.
      */
     private RE getEndOfSentenceRE()
     {
         if (mEndOfSentenceRE == null) {
             try {
                 mEndOfSentenceRE = new RE("([.?!][ \t\n\r\f<])|([.?!]$)");
             }
             catch (RESyntaxException e) {
                 // This should never occur.
                 e.printStackTrace();
             }
         }
         return mEndOfSentenceRE;
     }
 
     /**
      * Sets the flag that determines if the first sentence is checked for
      * proper end of sentence punctuation.
      * @param aFlag <code>true</code> if the first sentence is to be checked
      */
     public void setCheckFirstSentence(boolean aFlag)
     {
         mCheckFirstSentence = aFlag;
     }
 
     /**
      * Sets the flag that determines if HTML checking is to be performed.
      * @param aFlag <code>true</code> if HTML checking is to be performed.
      */
     public void setCheckHtml(boolean aFlag)
     {
         mCheckHtml = aFlag;
     }
 
+    /**
+     * Sets the flag that determines if empty JavaDoc checking should be done.
+     * @param aFlag <code>true</code> if empty JavaDoc checking should be done.
+     */
+    public void setCheckEmptyJavadoc(boolean aFlag)
+    {
+        mCheckEmptyJavadoc = aFlag;
+    }
 }
