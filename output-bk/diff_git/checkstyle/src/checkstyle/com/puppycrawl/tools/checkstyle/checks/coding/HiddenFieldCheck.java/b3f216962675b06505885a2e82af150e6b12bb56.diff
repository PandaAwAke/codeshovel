diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java
index 06a507629..a95c7ca67 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java
@@ -116,138 +116,135 @@ public class HiddenFieldCheck
         if (aAST.getType() == TokenTypes.CLASS_DEF) {
             //find and push fields
             final HashSet fieldSet = new HashSet(); //fields container
             //add fields to container
             final DetailAST objBlock =
                 aAST.findFirstToken(TokenTypes.OBJBLOCK);
             DetailAST child = (DetailAST) objBlock.getFirstChild();
             while (child != null) {
                 if (child.getType() == TokenTypes.VARIABLE_DEF) {
                     final String name =
                         child.findFirstToken(TokenTypes.IDENT).getText();
                     fieldSet.add(name);
                 }
                 child = (DetailAST) child.getNextSibling();
             }
             mFieldsStack.addLast(fieldSet); //push container
         }
         else {
             //must be VARIABLE_DEF or PARAMETER_DEF
             processVariable(aAST);
         }
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void leaveToken(DetailAST aAST)
     {
         if (aAST.getType() == TokenTypes.CLASS_DEF) {
             //pop
             mFieldsStack.removeLast();
         }
     }
 
     /**
      * Process a variable token.
      * Check whether a local variable or parameter shadows a field.
      * Store a field for later comparison with local variables and parameters.
      * @param aAST the variable token.
      */
     private void processVariable(DetailAST aAST)
     {
         if (!ScopeUtils.inInterfaceBlock(aAST)) {
             if (ScopeUtils.isLocalVariableDef(aAST)
                 || (aAST.getType() == TokenTypes.PARAMETER_DEF))
             {
                 //local variable or parameter. Does it shadow a field?
                 final DetailAST nameAST = aAST.findFirstToken(TokenTypes.IDENT);
                 final String name = nameAST.getText();
                 final Iterator it = mFieldsStack.iterator();
                 while (it.hasNext()) {
                     final HashSet aFieldsSet = (HashSet) it.next();
-                    if (aFieldsSet.contains(name)) {
-                        if ((mRegexp == null) || (!getRegexp().match(name))) {
-                            if (!isIgnoredSetterParam(aAST, name)) {
-                                log(nameAST.getLineNo(), nameAST.getColumnNo(),
-                                    "hidden.field", name);
-                                break;
-                            }
-                        }
+                    if (aFieldsSet.contains(name)
+                        && ((mRegexp == null) || (!getRegexp().match(name)))
+                        && !isIgnoredSetterParam(aAST, name))
+                    {
+                        log(nameAST.getLineNo(), nameAST.getColumnNo(),
+                            "hidden.field", name);
+                        break;
                     }
                 }
             }
         }
     }
 
     /**
      * Decides whether to ignore an AST node that is the parameter of a
      * setter method, where the property setter method for field 'xyz' has
      * name 'setXyz', one parameter named 'xyz', and return type void.
      * @param aAST the AST to check.
      * @param aName the name of aAST.
      * @return true if aAST should be ignored because check property
      * ignoreSetter is true and aAST is the parameter of a setter method.
      */
     private boolean isIgnoredSetterParam(DetailAST aAST, String aName)
     {
         if (!(aAST.getType() == TokenTypes.PARAMETER_DEF)
             || !mIgnoreSetter)
         {
             return false;
         }
         //single parameter?
         final DetailAST parametersAST = aAST.getParent();
-        if (parametersAST.getChildCount() != 1)
-        {
+        if (parametersAST.getChildCount() != 1) {
             return false;
         }
         //method parameter, not constructor parameter?
         final DetailAST methodAST = parametersAST.getParent();
         if (methodAST.getType() != TokenTypes.METHOD_DEF) {
             return false;
         }
         //property setter name?
         final String expectedName =
             "set" + aName.substring(0, 1).toUpperCase() + aName.substring(1);
-        final DetailAST methodNameAST
-            = methodAST.findFirstToken(TokenTypes.IDENT);
+        final DetailAST methodNameAST =
+            methodAST.findFirstToken(TokenTypes.IDENT);
         final String methodName = methodNameAST.getText();
         if (!methodName.equals(expectedName)) {
             return false;
         }
         //void?
-        final DetailAST typeAST
-            = methodAST.findFirstToken(TokenTypes.TYPE);
+        final DetailAST typeAST = methodAST.findFirstToken(TokenTypes.TYPE);
         return typeAST.branchContains(TokenTypes.LITERAL_VOID);
     }
 
     /**
      * Set the ignore format to the specified regular expression.
      * @param aFormat a <code>String</code> value
      * @throws ConversionException unable to parse aFormat
      */
     public void setIgnoreFormat(String aFormat)
         throws ConversionException
     {
         try {
             mRegexp = Utils.getRE(aFormat);
         }
         catch (RESyntaxException e) {
             throw new ConversionException("unable to parse " + aFormat, e);
         }
     }
 
     /**
      * Set whether to ignore the parameter of a property setter method.
      * @param aIgnoreSetter decide whether to ignore the parameter of
      * a property setter method.
      */
     public void setIgnoreSetter(boolean aIgnoreSetter)
     {
         mIgnoreSetter = aIgnoreSetter;
     }
 
     /** @return the regexp to match against */
     public RE getRegexp()
     {
         return mRegexp;
     }
 }
