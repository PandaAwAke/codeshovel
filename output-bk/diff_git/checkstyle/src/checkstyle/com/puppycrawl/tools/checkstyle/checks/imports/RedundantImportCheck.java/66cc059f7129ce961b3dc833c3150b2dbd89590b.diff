diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java
index 40e2f1389..9b40087fe 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java
@@ -37,104 +37,102 @@ import java.util.Set;
  *  <li>It is a duplicate of another import. This is, when a class is imported
  *  more than once.</li>
  *  <li>The class non-statically imported is from the <code>java.lang</code>
  *  package. For example importing <code>java.lang.String</code>.</li>
  *  <li>The class non-statically imported is from the same package as the
  *  current package.</li>
  *</ul>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="RedundantImport"/&gt;
  * </pre>
  *
  * Compatible with Java 1.5 source.
  *
  * @author Oliver Burn
  * @version 1.0
  */
 public class RedundantImportCheck
     extends Check
 {
     /** name of package in file */
     private String mPkgName;
     /** set of the imports */
     private final Set mImports = new HashSet();
     /** set of static imports */
     private final Set mStaticImports = new HashSet();
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void beginTree(DetailAST aRootAST)
     {
         mPkgName = null;
         mImports.clear();
         mStaticImports.clear();
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public int[] getDefaultTokens()
     {
         return new int[]
         {TokenTypes.IMPORT,
          TokenTypes.STATIC_IMPORT,
          TokenTypes.PACKAGE_DEF, };
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void visitToken(DetailAST aAST)
     {
         if (aAST.getType() == TokenTypes.PACKAGE_DEF) {
-            mPkgName =
-                FullIdent.createFullIdent(
-                    (DetailAST) aAST.getLastChild()
-                        .getPreviousSibling()).getText();
+            mPkgName = FullIdent.createFullIdent(
+                    aAST.getLastChild().getPreviousSibling()).getText();
         }
         else if (aAST.getType() == TokenTypes.IMPORT) {
             final FullIdent imp = FullIdent.createFullIdentBelow(aAST);
             if (fromPackage(imp.getText(), "java.lang")) {
                 log(aAST.getLineNo(), aAST.getColumnNo(), "import.lang",
                     imp.getText());
             }
             else if (fromPackage(imp.getText(), mPkgName)) {
                 log(aAST.getLineNo(), aAST.getColumnNo(), "import.same",
                     imp.getText());
             }
             // Check for a duplicate import
             final Iterator it = mImports.iterator();
             while (it.hasNext()) {
                 final FullIdent full = (FullIdent) it.next();
                 if (imp.getText().equals(full.getText())) {
                     log(aAST.getLineNo(),
                         aAST.getColumnNo(),
                         "import.duplicate",
                         new Integer(full.getLineNo()),
                         imp.getText());
                 }
             }
 
             mImports.add(imp);
         }
         else {
             // Check for a duplicate static import
             final FullIdent imp =
                 FullIdent.createFullIdent(
                     aAST.getLastChild().getPreviousSibling());
             final Iterator it = mStaticImports.iterator();
             while (it.hasNext()) {
                 final FullIdent full = (FullIdent) it.next();
                 if (imp.getText().equals(full.getText())) {
                     log(aAST.getLineNo(),
                         aAST.getColumnNo(),
                         "import.duplicate",
                         new Integer(full.getLineNo()),
                         imp.getText());
                 }
             }
 
             mStaticImports.add(imp);
         }
     }
 
     /**
      * Determines if an import statement is for types from a specified package.
      * @param aImport the import name
