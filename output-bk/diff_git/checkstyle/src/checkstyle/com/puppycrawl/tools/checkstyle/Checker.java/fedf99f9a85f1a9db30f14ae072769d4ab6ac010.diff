diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java
index 265467e25..241159786 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java
@@ -108,106 +108,107 @@ public class Checker extends AutomaticBean
     private String mBasedir;
 
     /** locale country to report messages  **/
     private String mLocaleCountry = Locale.getDefault().getCountry();
     /** locale language to report messages  **/
     private String mLocaleLanguage = Locale.getDefault().getLanguage();
 
     /**
      * List of package names for instatiating objects. Do not access directly,
      * but instead use the getter
      */
     private String[] mPackageNames;
 
     /** the context of all child components */
     private Context mChildContext;
 
     /**
      * Creates a new <code>Checker</code> instance.
      * The instance needs to be contextualized and configured.
      *
      * @throws CheckstyleException if an error occurs
      */
     public Checker()
         throws CheckstyleException
     {
         addListener(mCounter);
     }
 
     /** @see AutomaticBean */
     public void finishLocalSetup()
             throws CheckstyleException
     {
         final Locale locale = new Locale(mLocaleLanguage, mLocaleCountry);
         LocalizedMessage.setLocale(locale);
 
         final DefaultContext context = new DefaultContext();
         context.add("classLoader", mLoader);
         mChildContext = context;
     }
 
     /**
      * Instantiates, configures and registers a FileSetCheck
      * that is specified in the provided configuration.
      * @see com.puppycrawl.tools.checkstyle.api.AutomaticBean
      */
     protected void setupChild(Configuration aChildConf)
             throws CheckstyleException
     {
         final String name = aChildConf.getName();
         try {
+            final String[] packageNames = getPackageNames();
             final FileSetCheck fsc =
                     (FileSetCheck) PackageObjectFactory.makeObject(
-                            getPackageNames(),
+                            packageNames,
                             getClass().getClassLoader(),
                             name);
-            fsc.setPackageNames(getPackageNames());
+            fsc.setPackageNames(packageNames);
             fsc.contextualize(mChildContext);
             fsc.configure(aChildConf);
             addFileSetCheck(fsc);
         }
         catch (Exception ex) {
             // TODO i18n
             throw new CheckstyleException(
                     "cannot initialize filesetcheck with name "
                     + name + " - " + ex.getMessage());
         }
     }
 
     /**
      * Adds a FileSetCheck to the list of FileSetChecks
      * that is executed in process().
      * @param aFileSetCheck the additional FileSetCheck
      */
     public void addFileSetCheck(FileSetCheck aFileSetCheck)
     {
         aFileSetCheck.setMessageDispatcher(this);
         mFileSetChecks.add(aFileSetCheck);
     }
 
     /** Cleans up the object **/
     public void destroy()
     {
         mListeners.clear();
     }
 
     /**
      * Add the listener that will be used to receive events from the audit
      * @param aListener the nosy thing
      */
     public void addListener(AuditListener aListener)
     {
         mListeners.add(aListener);
     }
 
     /**
      * Processes a set of files with all FileSetChecks.
      * Once this is done, it is highly recommended to call for
      * the destroy method to close and remove the listeners.
      * @param aFiles the list of files to be audited.
      * @return the total number of errors found
      * @see #destroy()
      */
     public int process(File[] aFiles)
     {
         fireAuditStarted();
         for (int i = 0; i < mFileSetChecks.size(); i++) {
