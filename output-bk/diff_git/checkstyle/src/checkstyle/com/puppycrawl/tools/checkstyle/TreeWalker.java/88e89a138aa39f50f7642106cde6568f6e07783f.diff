diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
index 0d4194921..d6cd0f35c 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java
@@ -78,174 +78,180 @@ public final class TreeWalker
 
         /**
          * Parser error-reporting function, does nothing.
          * @param aRex the exception to be reported
          */
         public void reportError(RecognitionException aRex)
         {
         }
 
         /**
          * Parser error-reporting function, does nothing.
          * @param aMsg the error message
          */
         public void reportError(String aMsg)
         {
         }
 
         /**
          * Parser warning-reporting function, does nothing.
          * @param aMsg the error message
          */
         public void reportWarning(String aMsg)
         {
         }
     }
     // TODO: really need to optimise the performance of this class.
 
     /** maps from token name to checks */
     private final Map mTokenToChecks = new HashMap();
     /** all the registered checks */
     private final Set mAllChecks = new HashSet();
     /** collects the error messages */
     private final LocalizedMessages mMessages;
     /** the distance between tab stops */
     private int mTabWidth = 8;
     /** cache file **/
     private PropertyCacheFile mCache = new PropertyCacheFile(null, null);
 
     /** class loader to resolve classes with. **/
     private ClassLoader mClassLoader;
 
     /** context of child components */
     private Context mChildContext;
 
     /**
      * HACK - a reference to a private "mParent" field in DetailAST.
      * Don't do this at home!
      */
     private Field mDetailASTmParent;
 
+    /** a factory for creating submodules (i.e. the Checks) */
+    private ModuleFactory mModuleFactory;
+
     /**
      * Creates a new <code>TreeWalker</code> instance.
      */
     public TreeWalker()
     {
         mMessages = new LocalizedMessages();
 
         // TODO: I (lkuehne) can't believe I wrote this! HACK HACK HACK!
 
         // the parent relationship should really be managed by the DetailAST
         // itself but ANTLR calls setFirstChild and friends in an
         // unpredictable way. Introducing this hack for now to make
         // DetailsAST.setParent() private...
         try {
             mDetailASTmParent = DetailAST.class.getDeclaredField("mParent");
             // this will fail in environments with security managers
             mDetailASTmParent.setAccessible(true);
         }
         catch (NoSuchFieldException e) {
             mDetailASTmParent = null;
         }
     }
 
     /** @param aTabWidth the distance between tab stops */
     public void setTabWidth(int aTabWidth)
     {
         mTabWidth = aTabWidth;
     }
 
     /** @param aFileName the cache file */
     public void setCacheFile(String aFileName)
     {
         final Configuration configuration = getConfiguration();
         mCache = new PropertyCacheFile(configuration, aFileName);
     }
 
     // TODO: Call from contextualize
     /** @param aClassLoader class loader to resolve classes with. */
     public void setClassLoader(ClassLoader aClassLoader)
     {
         mClassLoader = aClassLoader;
     }
 
+    /**
+     * Sets the module factory for creating child modules (Checks).
+     * @param aModuleFactory the factory
+     */
+    public void setModuleFactory(ModuleFactory aModuleFactory)
+    {
+        mModuleFactory = aModuleFactory;
+    }
+
     /** @see com.puppycrawl.tools.checkstyle.api.Configurable */
     public void finishLocalSetup()
     {
         DefaultContext checkContext = new DefaultContext();
         checkContext.add("classLoader", mClassLoader);
         checkContext.add("messages", mMessages);
         // TODO: hmmm.. this looks less than elegant
+        // we have just parsed the string,
+        // now we're recreating it only to parse it again a few moments later
         checkContext.add("tabWidth", String.valueOf(mTabWidth));
 
         mChildContext = checkContext;
     }
 
     /**
      * Instantiates, configures and registers a Check that is specified
      * in the provided configuration.
      * @see com.puppycrawl.tools.checkstyle.api.AutomaticBean
      */
     public void setupChild(Configuration aChildConf)
             throws CheckstyleException
     {
         // TODO: improve the error handing
-
-        // IMPORTANT! Need to use the same class loader that created this
-        // class. Otherwise can get ClassCastException problems.
         final String name = aChildConf.getName();
-        final String[] packageNames = getPackageNames();
-        final Check c =
-            (Check) PackageObjectFactory.makeObject(
-                packageNames,
-                getClass().getClassLoader(),
-                name);
+        final Check c = (Check) mModuleFactory.createModule(name);
         c.contextualize(mChildContext);
         c.configure(aChildConf);
         c.init();
 
         registerCheck(c);
     }
 
     /**
      * Processes a specified file and reports all errors found.
      * @param aFile the file to process
      **/
     private void process(File aFile)
     {
         // check if already checked and passed the file
         final String fileName = aFile.getPath();
         final long timestamp = aFile.lastModified();
         if (mCache.alreadyChecked(fileName, timestamp)) {
             return;
         }
 
         mMessages.reset();
         try {
             getMessageDispatcher().fireFileStarted(fileName);
             final String[] lines = Utils.getLines(fileName);
             final FileContents contents = new FileContents(fileName, lines);
             final DetailAST rootAST = TreeWalker.parse(contents);
             walk(rootAST, contents);
         }
         catch (FileNotFoundException fnfe) {
             // TODO: this dependency on the checkstyle package is not good. It
             // introduces a circular dependency between packages.
             mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE,
                                                "general.fileNotFound", null));
         }
         catch (IOException ioe) {
             mMessages.add(new LocalizedMessage(
                               0, Defn.CHECKSTYLE_BUNDLE,
                               "general.exception",
                               new String[] {ioe.getMessage()}));
         }
         catch (RecognitionException re) {
             mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE,
                                                "general.exception",
                                                new String[] {re.getMessage()}));
         }
         catch (TokenStreamException te) {
             mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE,
                                                "general.exception",
                                                new String[] {te.getMessage()}));
         }
