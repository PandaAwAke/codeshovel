diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java
index ea5645b50..e0973bccd 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java
@@ -168,80 +168,80 @@ public final class ModifiedControlVariableCheck extends Check
         mCurrentVariables = (Stack) mVariableStack.pop();
     }
 
     /**
      * Check if ident is parameter.
      * @param aAST ident to check.
      */
     private void checkIdent(DetailAST aAST)
     {
         if (mCurrentVariables != null && !mCurrentVariables.isEmpty()) {
             final DetailAST identAST = (DetailAST) aAST.getFirstChild();
 
             if (identAST != null
                 && identAST.getType() == TokenTypes.IDENT
                 && mCurrentVariables.contains(identAST.getText()))
             {
                 log(aAST.getLineNo(), aAST.getColumnNo(),
                     "modified.control.variable", identAST.getText());
             }
         }
     }
 
     /**
      * Push current variables to the stack.
      * @param aAST a for definition.
      */
     private void leaveForIter(DetailAST aAST)
     {
         final DetailAST forInitAST = aAST.findFirstToken(TokenTypes.FOR_INIT);
         DetailAST parameterDefAST =
             forInitAST.findFirstToken(TokenTypes.VARIABLE_DEF);
 
         for (; parameterDefAST != null;
              parameterDefAST = (DetailAST) parameterDefAST.getNextSibling())
         {
             if (parameterDefAST.getType() == TokenTypes.VARIABLE_DEF) {
                 final DetailAST param =
                     parameterDefAST.findFirstToken(TokenTypes.IDENT);
                 mCurrentVariables.push(param.getText());
             }
         }
     }
 
     /**
      * Push current variables to the stack.
      * @param aForEach a for-each clause
      */
     private void leaveForEach(DetailAST aForEach)
     {
         final DetailAST paramDef =
-            aForEach.findFirstToken(TokenTypes.PARAMETER_DEF);
+            aForEach.findFirstToken(TokenTypes.VARIABLE_DEF);
         final DetailAST paramName = paramDef.findFirstToken(TokenTypes.IDENT);
         mCurrentVariables.push(paramName.getText());
     }
 
     /**
      * Pops the variables from the stack.
      * @param aAST a for definition.
      */
     private void leaveForDef(DetailAST aAST)
     {
         final DetailAST forInitAST = aAST.findFirstToken(TokenTypes.FOR_INIT);
         if (forInitAST != null) {
             DetailAST parameterDefAST =
                 forInitAST.findFirstToken(TokenTypes.VARIABLE_DEF);
 
             for (; parameterDefAST != null;
                  parameterDefAST = (DetailAST) parameterDefAST.getNextSibling())
             {
                 if (parameterDefAST.getType() == TokenTypes.VARIABLE_DEF) {
                     mCurrentVariables.pop();
                 }
             }
         }
         else {
             // this is for-each loop, just pop veriables
             mCurrentVariables.pop();
         }
     }
 }
