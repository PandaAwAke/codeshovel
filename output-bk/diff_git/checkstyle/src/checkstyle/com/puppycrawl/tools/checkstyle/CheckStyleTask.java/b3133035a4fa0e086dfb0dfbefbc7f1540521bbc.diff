diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
index 6737724c3..7bb8b92b6 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
@@ -1,71 +1,72 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2002  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle;
 
 import java.io.File;
+import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Iterator;
 import java.util.Properties;
 import java.io.FileInputStream;
 import org.apache.regexp.RESyntaxException;
 import org.apache.tools.ant.BuildException;
 import org.apache.tools.ant.DirectoryScanner;
 import org.apache.tools.ant.Project;
 import org.apache.tools.ant.Task;
 import org.apache.tools.ant.AntClassLoader;
 import org.apache.tools.ant.taskdefs.LogOutputStream;
 import org.apache.tools.ant.types.EnumeratedAttribute;
 import org.apache.tools.ant.types.FileSet;
 import org.apache.tools.ant.types.Path;
 
 /**
  * An implementation of a ANT task for calling checkstyle. See the documentation
  * of the task for usage.
  * @author <a href="mailto:oliver@puppycrawl.com">Oliver Burn</a>
  **/
 public class CheckStyleTask
     extends Task
 {
     /** poor man's enum for an xml formatter **/
     private static final String E_XML = "xml";
     /** poor man's enum for an plain formatter **/
     private static final String E_PLAIN = "plain";
 
     /** class path to locate class files **/
     private Path mClasspath;
 
     /** name of file to check **/
     private String mFileName;
 
     /** whether to fail build on violations **/
     private boolean mFailOnViolation = true;
 
     /** property to set on violations **/
     private String mFailureProperty = null;
 
     /** contains the filesets to process **/
     private final List mFileSets = new ArrayList();
 
     /** contains the formatters to log to **/
     private final List mFormatters = new ArrayList();
 
@@ -110,103 +111,107 @@ public class CheckStyleTask
 
     /**
      * Add a formatter
      * @param aFormatter the formatter to add for logging.
      */
     public void addFormatter(Formatter aFormatter)
     {
         mFormatters.add(aFormatter);
     }
 
     /**
      * Set the class path.
      * @param aClasspath the path to locate classes
      */
     public void setClasspath(Path aClasspath)
     {
         mClasspath = aClasspath;
     }
 
     /** @return a created path for locating classes **/
     public Path createClasspath()
     {
         if (mClasspath == null) {
             mClasspath = new Path(project);
         }
         return mClasspath.createPath();
     }
 
     /** @param aFile the file to be checked **/
     public void setFile(File aFile)
     {
         mFileName = aFile.getAbsolutePath();
     }
 
     ////////////////////////////////////////////////////////////////////////////
     // Setters for Checker configuration attributes
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Sets a properties file for use instead
      * of individually setting them.
      * @param aProps the properties File to use
      */
     public void setProperties(File aProps)
     {
         Properties mProperties = new Properties();
         try {
             mProperties.load(new FileInputStream(aProps));
             mConfig = new Configuration(mProperties, System.out);
         }
+        catch (FileNotFoundException e) {
+            throw new BuildException(
+                "Could not find Properties file '" + aProps + "'", e, location);
+        }
         catch (Exception e) {
             throw new BuildException(
-                "Could not find Properties file '" + aProps + "'", location);
+                "Error loading Properties file '" + aProps + "'", e, location);
         }
     }
 
     /** @param aAllowed whether tabs are allowed **/
     public void setAllowTabs(final boolean aAllowed)
     {
         setBooleanProperty(Defn.ALLOW_TABS_PROP, aAllowed);
     }
 
     /** @param aTabWidth number of spaces that are represented by one tab **/
     public void setTabWidth(final int aTabWidth)
     {
         setIntProperty(Defn.TAB_WIDTH_PROP, aTabWidth);
     }
 
     /** @param aAllowed whether protected data is allowed **/
     public void setAllowProtected(final boolean aAllowed)
     {
         setBooleanProperty(Defn.ALLOW_PROTECTED_PROP, aAllowed);
     }
 
     /** @param aAllowed whether package visible data is allowed **/
     public void setAllowPackage(final boolean aAllowed)
     {
         setBooleanProperty(Defn.ALLOW_PACKAGE_PROP, aAllowed);
     }
 
     /** @param aAllowed whether allow having no author **/
     public void setAllowNoAuthor(final boolean aAllowed)
     {
         setBooleanProperty(Defn.ALLOW_NO_AUTHOR_PROP, aAllowed);
     }
 
     /** @param aLen max allowed line length **/
     public void setMaxLineLen(final int aLen)
     {
         setIntProperty(Defn.MAX_LINE_LENGTH_PROP, aLen);
     }
 
     /** @param aLen max allowed method length **/
     public void setMaxMethodLen(final int aLen)
     {
         setIntProperty(Defn.MAX_METHOD_LENGTH_PROP, aLen);
     }
 
     /** @param aLen max allowed constructor length **/
     public void setMaxConstructorLen(final int aLen)
     {
         setIntProperty(Defn.MAX_CONSTRUCTOR_LENGTH_PROP, aLen);
     }
