diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java
index 904598bc6..3a9ebea08 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java
@@ -80,101 +80,101 @@ public class MagicNumberCheck extends Check
         };
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void visitToken(DetailAST aAST)
     {
         if (inIgnoreList(aAST)) {
             return;
         }
 
         final DetailAST constantDefAST = findContainingConstantDef(aAST);
 
         if (constantDefAST == null) {
             reportMagicNumber(aAST);
         }
         else {
             DetailAST ast = aAST.getParent();
             while (ast != constantDefAST) {
                 final int type = ast.getType();
                 if (Arrays.binarySearch(ALLOWED_PATH_TOKENTYPES, type) < 0) {
                     reportMagicNumber(aAST);
                     break;
                 }
 
                 ast = ast.getParent();
             }
         }
     }
 
     /**
      * Finds the constant definition that contains aAST.
      * @param aAST the AST
      * @return the constant def or null if aAST is not
      * contained in a constant definition
      */
     private DetailAST findContainingConstantDef(DetailAST aAST)
     {
         DetailAST varDefAST = aAST;
         while (varDefAST != null
                 && varDefAST.getType() != TokenTypes.VARIABLE_DEF)
         {
             varDefAST = varDefAST.getParent();
         }
 
         // no containing variable definition?
         if (varDefAST == null) {
             return null;
         }
 
         // implicit constant?
-        if (ScopeUtils.inInterfaceBlock(varDefAST)) {
+        if (ScopeUtils.inInterfaceOrAnnotationBlock(varDefAST)) {
             return varDefAST;
         }
 
         // explicit constant
         final DetailAST modifiersAST =
                 varDefAST.findFirstToken(TokenTypes.MODIFIERS);
         if (modifiersAST.branchContains(TokenTypes.FINAL)) {
             return varDefAST;
         }
 
         return null;
     }
 
     /**
      * Reports aAST as a magic number, includes unary operators as needed.
      * @param aAST the AST node that contains the number to report
      */
     private void reportMagicNumber(DetailAST aAST)
     {
         String text = aAST.getText();
         final DetailAST parent = aAST.getParent();
         DetailAST reportAST = aAST;
         if (parent.getType() == TokenTypes.UNARY_MINUS) {
             reportAST = parent;
             text = "-" + text;
         }
         else if (parent.getType() == TokenTypes.UNARY_PLUS) {
             reportAST = parent;
             text = "+" + text;
         }
         log(reportAST.getLineNo(),
                 reportAST.getColumnNo(),
                 "magic.number",
                 text);
     }
 
     /**
      * Decides whether the number of an AST is in the ignore list of this
      * check.
      * @param aAST the AST to check
      * @return true if the number of aAST is in the ignore list of this
      * check.
      */
     private boolean inIgnoreList(DetailAST aAST)
     {
         double value = CheckUtils.parseDouble(aAST.getText(), aAST.getType());
         final DetailAST parent = aAST.getParent();
         if (parent.getType() == TokenTypes.UNARY_MINUS) {
             value = -1 * value;
         }
