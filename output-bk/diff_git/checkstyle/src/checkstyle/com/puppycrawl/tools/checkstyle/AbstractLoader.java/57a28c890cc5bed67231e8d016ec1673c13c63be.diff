diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/AbstractLoader.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/AbstractLoader.java
index 72ae1d8df..ca0d903b4 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/AbstractLoader.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/AbstractLoader.java
@@ -38,83 +38,83 @@ import org.xml.sax.helpers.DefaultHandler;
  * persnickety, picky, prudish, punctilious, puritanical, rigid, rigorous,
  * scrupulous, set, severe, square, stern, stickler, straight, strait-laced,
  * stringent, stuffy, stuffy, tough, unpermissive, unsparing and uptight.
  *
  * @author <a href="mailto:checkstyle@puppycrawl.com">Oliver Burn</a>
  */
 abstract class AbstractLoader
     extends DefaultHandler
 {
     /** the public id to resolve */
     private final String mPublicId;
     /** the resource name for the DTD */
     private final String mDtdResourceName;
     /** parser to read XML files **/
     private final XMLReader mParser;
 
     /**
      * Creates a new instance.
      * @param aPublicId the public ID for the DTD to resolve
      * @param aDtdResourceName the resource for the DTD
      * @throws SAXException if an error occurs
      * @throws ParserConfigurationException if an error occurs
      */
     protected AbstractLoader(String aPublicId, String aDtdResourceName)
         throws SAXException, ParserConfigurationException
     {
         mPublicId = aPublicId;
         mDtdResourceName = aDtdResourceName;
         final SAXParserFactory factory = SAXParserFactory.newInstance();
         factory.setValidating(true);
         mParser = factory.newSAXParser().getXMLReader();
         mParser.setContentHandler(this);
         mParser.setEntityResolver(this);
         mParser.setErrorHandler(this);
     }
 
     /**
      * Parses the specified input source.
      * @param aInputSource the input source to parse.
      * @throws IOException if an error occurs
      * @throws SAXException in an error occurs
      */
     protected void parseInputSource(InputSource aInputSource)
         throws IOException, SAXException
     {
         mParser.parse(aInputSource);
     }
 
     /** {@inheritDoc} */
     public InputSource resolveEntity(String aPublicId, String aSystemId)
-        throws SAXException, IOException
+        throws SAXException
     {
         if (mPublicId.equals(aPublicId)) {
             final InputStream dtdIS = getClass().getClassLoader()
                 .getResourceAsStream(mDtdResourceName);
             if (dtdIS == null) {
                 throw new SAXException(
                     "Unable to load internal dtd " + mDtdResourceName);
             }
             return new InputSource(dtdIS);
         }
 
         return super.resolveEntity(aPublicId, aSystemId);
     }
 
     /** @see org.xml.sax.ErrorHandler#warning(org.xml.sax.SAXParseException) */
     public void warning(SAXParseException aEx) throws SAXException
     {
         throw aEx;
     }
 
     /** @see org.xml.sax.ErrorHandler#error(org.xml.sax.SAXParseException) */
     public void error(SAXParseException aEx) throws SAXException
     {
         throw aEx;
     }
 
     /** @see org.xml.sax.ErrorHandler#fatalError */
     public void fatalError(SAXParseException aEx) throws SAXException
     {
         throw aEx;
     }
 }
