diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java
index b9fc33af9..3c19cea16 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java
@@ -1,70 +1,72 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2008  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle;
 
+import com.puppycrawl.tools.checkstyle.api.Utils;
+
 import com.google.common.collect.Lists;
 import com.puppycrawl.tools.checkstyle.api.AuditListener;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.util.List;
 import java.util.Properties;
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.CommandLineParser;
 import org.apache.commons.cli.HelpFormatter;
 import org.apache.commons.cli.Options;
 import org.apache.commons.cli.ParseException;
 import org.apache.commons.cli.PosixParser;
 
 /**
  * Wrapper command line program for the Checker.
  * @author Oliver Burn
  **/
 public final class Main
 {
     /** the options to the command line */
     private static final Options OPTS = new Options();
     static {
         OPTS.addOption("c", true, "The check configuration file to use.");
         OPTS.addOption("r", true, "Traverse the directory for source files");
         OPTS.addOption("o", true, "Sets the output file. Defaults to stdout");
         OPTS.addOption("p", true, "Loads the properties file");
         OPTS.addOption(
             "f",
             true,
             "Sets the output format. (plain|xml). Defaults to plain");
     }
 
     /**
      * Loops over the files specified checking them for errors. The exit code
      * is the number of errors found in all the files.
      * @param aArgs the command line arguments
      **/
     public static void main(String[] aArgs)
     {
         // parse the parameters
         final CommandLineParser clp = new PosixParser();
         CommandLine line = null;
         try {
             line = clp.parse(OPTS, aArgs);
@@ -221,71 +223,68 @@ public final class Main
             System.out.println("Error loading configuration file");
             e.printStackTrace(System.out);
             System.exit(1);
             return null; // can never get here
         }
     }
 
     /** Prints the usage information. **/
     private static void usage()
     {
         final HelpFormatter hf = new HelpFormatter();
         hf.printHelp(
             "java "
                 + Main.class.getName()
                 + " [options] -c <config.xml> file...",
             OPTS);
         System.exit(1);
     }
 
     /**
      * Traverses a specified node looking for files to check. Found
      * files are added to a specified list. Subdirectories are also
      * traversed.
      *
      * @param aNode the node to process
      * @param aFiles list to add found files to
      */
     private static void traverse(File aNode, List<File> aFiles)
     {
         if (aNode.canRead()) {
             if (aNode.isDirectory()) {
                 final File[] nodes = aNode.listFiles();
                 for (File element : nodes) {
                     traverse(element, aFiles);
                 }
             }
             else if (aNode.isFile()) {
                 aFiles.add(aNode);
             }
         }
     }
 
     /**
      * Loads properties from a File.
      * @param aFile the properties file
      * @return the properties in aFile
      */
     private static Properties loadProperties(File aFile)
     {
         final Properties properties = new Properties();
+        FileInputStream fis = null;
         try {
-            FileInputStream fis = null;
-            try {
-                fis = new FileInputStream(aFile);
-                properties.load(fis);
-            }
-            finally {
-                if (fis != null) {
-                    fis.close();
-                }
-            }
+            fis = new FileInputStream(aFile);
+            properties.load(fis);
         }
         catch (final IOException ex) {
             System.out.println("Unable to load properties from file: "
-                               + aFile.getAbsolutePath());
+                + aFile.getAbsolutePath());
             ex.printStackTrace(System.out);
             System.exit(1);
         }
+        finally {
+            Utils.closeQuietly(fis);
+        }
+
         return properties;
     }
 }
