diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
index 6cee526a4..80cda29b4 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
@@ -1,73 +1,74 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2005  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FullIdent;
+import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.api.Utils;
 import java.util.HashSet;
 import java.util.Set;
 
 /**
  * Abstract class that endeavours to maintain type information for the Java
  * file being checked. It provides helper methods for performing type
  * information functions.
  *
  * @author Oliver Burn
  * @version 1.0
  */
 public abstract class AbstractTypeAwareCheck
     extends Check
 {
     /** imports details **/
     private Set mImports = new HashSet();
 
     /** full identifier for package of the method **/
     private FullIdent mPackageFullIdent;
 
     /** Name of current class. */
     private String mCurrentClass;
 
     /** <code>ClassResolver</code> instance for current tree. */
     private ClassResolver mClassResolver;
 
     /**
      * Called to process an AST when visiting it.
      * @param aAST the AST to process. Guaranteed to not be PACKAGE_DEF or
      *             IMPORT tokens.
      */
     protected abstract void processAST(DetailAST aAST);
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void beginTree(DetailAST aRootAST)
     {
         mPackageFullIdent = FullIdent.createFullIdent(null);
         mImports.clear();
         mClassResolver = null;
         mCurrentClass = "";
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public final void visitToken(DetailAST aAST)
     {
         if (aAST.getType() == TokenTypes.PACKAGE_DEF) {
             processPackage(aAST);
         }
@@ -183,100 +184,120 @@ public abstract class AbstractTypeAwareCheck
         if (mClassResolver == null) {
             mClassResolver =
                 new ClassResolver(getClassLoader(),
                                   mPackageFullIdent.getText(),
                                   mImports);
         }
         return mClassResolver;
     }
 
     /**
      * Attempts to resolve the Class for a specified name.
      * @param aClassName name of the class to resolve
      * @param aCurrentClass name of surrounding class.
      * @return the resolved class or <code>null</code>
      *          if unable to resolve the class.
      */
     protected final Class resolveClass(String aClassName,
                                        String aCurrentClass)
     {
         try {
             return getClassResolver().resolve(aClassName, aCurrentClass);
         }
         catch (ClassNotFoundException e) {
             return null;
         }
     }
 
     /**
      * Tries to load class. Logs error if unable.
      * @param aIdent name of class which we try to load.
      * @param aCurrentClass name of surrounding class.
      * @return <code>Class</code> for a ident.
      */
     protected final Class tryLoadClass(FullIdent aIdent,
                                        String aCurrentClass)
     {
         final Class clazz = resolveClass(aIdent.getText(), aCurrentClass);
         if (clazz == null) {
             logLoadError(aIdent);
         }
         return clazz;
     }
 
     /**
      * Logs error if unable to load class information.
      * Abstract, should be overrided in subclasses.
      * @param aIdent class name for which we can no load class.
      */
     protected abstract void logLoadError(FullIdent aIdent);
 
+    /**
+     * Common implementation for logLoadError() method.
+     * @param aLineNo line number of the problem.
+     * @param aColumnNo column number of the problem.
+     * @param aMsgKey message key to use.
+     * @param aValues values to fill the message out.
+     */
+    protected final void logLoadErrorImpl(int aLineNo, int aColumnNo,
+                                          String aMsgKey, Object[] aValues)
+    {
+        LocalizedMessage msg = new LocalizedMessage(aLineNo,
+                                                    aColumnNo,
+                                                    getMessageBundle(),
+                                                    aMsgKey,
+                                                    aValues,
+                                                    getSeverityLevel(),
+                                                    this.getClass());
+        throw new RuntimeException(msg.getMessage());
+    }
+
     /**
      * Collects the details of a package.
      * @param aAST node containing the package details
      */
     private void processPackage(DetailAST aAST)
     {
         final DetailAST nameAST = aAST.getLastChild().getPreviousSibling();
         mPackageFullIdent = FullIdent.createFullIdent(nameAST);
     }
 
     /**
      * Collects the details of imports.
      * @param aAST node containing the import details
      */
     private void processImport(DetailAST aAST)
     {
         final FullIdent name = FullIdent.createFullIdentBelow(aAST);
         if (name != null) {
             mImports.add(name.getText());
         }
     }
 
     /**
      * Processes class definition.
      * @param aAST class defition to process.
      */
     private void processClass(DetailAST aAST)
     {
         final DetailAST ident = aAST.findFirstToken(TokenTypes.IDENT);
         mCurrentClass += ("".equals(mCurrentClass) ? "" : "$")
             + ident.getText();
     }
 
     /**
      * Returns current class.
      * @return name of current class.
      */
     protected final String getCurrentClassName()
     {
         return mCurrentClass;
     }
 
     /**
      * Contains class's <code>FullIdent</code>
      * and <code>Class</code> object if we can load it.
      */
     protected class ClassInfo
     {
         /** <code>FullIdent</code> associated with this class. */
         private FullIdent mName;
