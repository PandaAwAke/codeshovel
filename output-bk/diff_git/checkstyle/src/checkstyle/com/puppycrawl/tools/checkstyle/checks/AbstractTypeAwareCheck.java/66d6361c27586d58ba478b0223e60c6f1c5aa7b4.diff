diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
index 8e45ef62a..99355df29 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
@@ -258,104 +258,104 @@ public abstract class AbstractTypeAwareCheck
      * @param aAST node containing the package details
      */
     private void processPackage(DetailAST aAST)
     {
         final DetailAST nameAST = aAST.getLastChild().getPreviousSibling();
         mPackageFullIdent = FullIdent.createFullIdent(nameAST);
     }
 
     /**
      * Collects the details of imports.
      * @param aAST node containing the import details
      */
     private void processImport(DetailAST aAST)
     {
         final FullIdent name = FullIdent.createFullIdentBelow(aAST);
         if (name != null) {
             mImports.add(name.getText());
         }
     }
 
     /**
      * Processes class definition.
      * @param aAST class defition to process.
      */
     private void processClass(DetailAST aAST)
     {
         final DetailAST ident = aAST.findFirstToken(TokenTypes.IDENT);
         mCurrentClass += ("".equals(mCurrentClass) ? "" : "$")
             + ident.getText();
     }
 
     /**
      * Returns current class.
      * @return name of current class.
      */
     protected final String getCurrentClassName()
     {
         return mCurrentClass;
     }
 
     /**
      * Contains class's <code>FullIdent</code>
      * and <code>Class</code> object if we can load it.
      */
     protected class ClassInfo
     {
         /** <code>FullIdent</code> associated with this class. */
         private FullIdent mName;
         /** <code>Class</code> object of this class if it's loadable. */
         private Class mClass;
-        /** name of surrundeing class. */
-        private String mCurrentClass;
+        /** name of surrounding class. */
+        private String mSurroundingClass;
         /** is class loadable. */
         private boolean mIsLoadable;
 
         /**
          * Creates new instance of of class information object.
          * @param aName <code>FullIdent</code> associated with new object.
-         * @param aCurrentClass name of current surrounding class.
+         * @param aSurroundingClass name of current surrounding class.
          */
-        public ClassInfo(FullIdent aName, String aCurrentClass)
+        public ClassInfo(final FullIdent aName, final String aSurroundingClass)
         {
             if (aName == null) {
                 throw new NullPointerException(
                     "ClassInfo's name should be non-null");
             }
             mName = aName;
-            mCurrentClass = aCurrentClass;
+            mSurroundingClass = aSurroundingClass;
             mIsLoadable = true;
         }
 
         /** @return class name */
         public final FullIdent getName()
         {
             return mName;
         }
 
         /** @return if class is loadable ot not. */
         public final boolean isLoadable()
         {
             return mIsLoadable;
         }
 
         /** @return <code>Class</code> associated with an object. */
         public final Class getClazz()
         {
             if (isLoadable() && mClass == null) {
                 setClazz(AbstractTypeAwareCheck.this.
-                         tryLoadClass(getName(), mCurrentClass));
+                         tryLoadClass(getName(), mSurroundingClass));
             }
             return mClass;
         }
 
         /**
          * Associates <code> Class</code> with an object.
          * @param aClass <code>Class</code> to associate with.
          */
         public final void setClazz(Class aClass)
         {
             mClass = aClass;
             mIsLoadable = (mClass != null);
         }
     }
 }
