diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java
index 9f013fba1..da47e4f33 100755
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java
@@ -31,115 +31,116 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  * empty for iterators.
  * <p>
  * </p>
  * The policy to verify is specified using the {@link PadOption} class and
  * defaults to {@link PadOption#NOSPACE}.
  * </p>
  * <p> By default the check will check parentheses that occur with the following
  * tokens:
  *  {@link TokenTypes#CTOR_CALL CTOR_CALL},
  *  {@link TokenTypes#LPAREN LPAREN},
  *  {@link TokenTypes#METHOD_CALL METHOD_CALL},
  *  {@link TokenTypes#RPAREN RPAREN},
  *  {@link TokenTypes#SUPER_CTOR_CALL SUPER_CTOR_CALL},
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="ParenPad"/&gt;
  * </pre>
  * <p>
  * An example of how to configure the check to require spaces for the
  * parentheses of constructor, method, and super constructor invocations is:
  * </p>
  * <pre>
  * &lt;module name="ParenPad"&gt;
  *     &lt;property name="tokens"
  *               value="CTOR_CALL, METHOD_CALL, SUPER_CTOR_CALL"/&gt;
  *     &lt;property name="option" value="space"/&gt;
  * &lt;/module&gt;
  * </pre>
  * @author Oliver Burn
  * @version 1.0
  */
 public class ParenPadCheck extends AbstractParenPadCheck
 {
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.RPAREN,
                           TokenTypes.LPAREN,
                           TokenTypes.CTOR_CALL,
                           TokenTypes.SUPER_CTOR_CALL,
                           TokenTypes.METHOD_CALL,
         };
     }
 
     @Override
     public void visitToken(DetailAST aAST)
     {
+        DetailAST theAst = aAST;
         // Strange logic in this method to guard against checking RPAREN tokens
         // that are associated with a TYPECAST token.
-        if (aAST.getType() != TokenTypes.RPAREN) {
-            if ((aAST.getType() == TokenTypes.CTOR_CALL)
-                || (aAST.getType() == TokenTypes.SUPER_CTOR_CALL))
+        if (theAst.getType() != TokenTypes.RPAREN) {
+            if ((theAst.getType() == TokenTypes.CTOR_CALL)
+                || (theAst.getType() == TokenTypes.SUPER_CTOR_CALL))
             {
-                aAST = aAST.getFirstChild();
+                theAst = theAst.getFirstChild();
             }
-            if (!isPreceedsEmptyForInit(aAST)) {
-                processLeft(aAST);
+            if (!isPreceedsEmptyForInit(theAst)) {
+                processLeft(theAst);
             }
         }
-        else if ((aAST.getParent() == null)
-                 || (aAST.getParent().getType() != TokenTypes.TYPECAST)
-                 || (aAST.getParent().findFirstToken(TokenTypes.RPAREN)
-                     != aAST))
+        else if ((theAst.getParent() == null)
+                 || (theAst.getParent().getType() != TokenTypes.TYPECAST)
+                 || (theAst.getParent().findFirstToken(TokenTypes.RPAREN)
+                     != theAst))
         {
-            if (!isFollowsEmptyForIterator(aAST)) {
-                processRight(aAST);
+            if (!isFollowsEmptyForIterator(theAst)) {
+                processRight(theAst);
             }
         }
     }
 
     /**
      * @param aAST the token to check
      * @return whether a token follows an empty for iterator
      */
     private boolean isFollowsEmptyForIterator(DetailAST aAST)
     {
         boolean followsEmptyForIterator = false;
         final DetailAST parent = aAST.getParent();
         //Only traditional for statements are examined, not for-each statements
         if ((parent != null)
             && (parent.getType() == TokenTypes.LITERAL_FOR)
             && (parent.findFirstToken(TokenTypes.FOR_EACH_CLAUSE) == null))
         {
             final DetailAST forIterator =
                 parent.findFirstToken(TokenTypes.FOR_ITERATOR);
             followsEmptyForIterator = (forIterator.getChildCount() == 0)
                 && (aAST == forIterator.getNextSibling());
         }
         return followsEmptyForIterator;
     }
 
     /**
      * @param aAST the token to check
      * @return whether a token preceeds an empty for initializer
      */
     private boolean isPreceedsEmptyForInit(DetailAST aAST)
     {
         boolean preceedsEmptyForInintializer = false;
         final DetailAST parent = aAST.getParent();
         //Only traditional for statements are examined, not for-each statements
         if ((parent != null)
             && (parent.getType() == TokenTypes.LITERAL_FOR)
             && (parent.findFirstToken(TokenTypes.FOR_EACH_CLAUSE) == null))
         {
             final DetailAST forIterator =
                     parent.findFirstToken(TokenTypes.FOR_INIT);
             preceedsEmptyForInintializer = (forIterator.getChildCount() == 0)
                     && (aAST == forIterator.getPreviousSibling());
         }
         return preceedsEmptyForInintializer;
     }
 }
