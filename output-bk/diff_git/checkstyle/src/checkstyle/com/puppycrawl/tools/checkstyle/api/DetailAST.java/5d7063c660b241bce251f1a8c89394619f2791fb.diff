diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/DetailAST.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/DetailAST.java
index 773c70236..4516dd09f 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/DetailAST.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/DetailAST.java
@@ -97,101 +97,101 @@ public final class DetailAST
     {
         super.setNextSibling(aAST);
         if (aAST != null && mParent != null) {
             ((DetailAST) aAST).setParent(mParent);
         }
     }
 
     /**
      * Adds new child to AST.
      * @param aAST the new child
      */
     public void addChild(AST aAST)
     {
         super.addChild(aAST);
         if (aAST != null) {
             ((DetailAST) aAST).setParent(this);
         }
     }
 
     /**
      * Returns the number of child nodes one level below this node. That is is
      * does not recurse down the tree.
      * @return the number of child nodes
      */
     public int getChildCount()
     {
         // lazy init
         if (mChildCount == NOT_INITIALIZED) {
             mChildCount = 0;
             AST child = getFirstChild();
 
             while (child != null) {
                 mChildCount += 1;
                 child = child.getNextSibling();
             }
         }
         return mChildCount;
     }
 
     /**
      * Set the parent token.
      * @param aParent the parent token
      */
     // TODO: should be private but that breaks the DetailASTTest
     // until we manage parent in DetailAST instead of externally
     void setParent(DetailAST aParent)
     {
         // TODO: Check visibility, could be private
         // if set in setFirstChild() and friends
         mParent = aParent;
-        DetailAST nextSibling = (DetailAST) getNextSibling();
+        final DetailAST nextSibling = (DetailAST) getNextSibling();
         if (nextSibling != null) {
             nextSibling.setParent(aParent);
         }
     }
 
     /**
      * Returns the parent token.
      * @return the parent token
      */
     public DetailAST getParent()
     {
         return mParent;
     }
 
     /** @return the line number **/
     public int getLineNo()
     {
         if (mLineNo == NOT_INITIALIZED) {
             // an inner AST that has been initialized
             // with initialize(String text)
             final DetailAST child = (DetailAST) getFirstChild();
             final DetailAST sibling = (DetailAST) getNextSibling();
             if (child != null) {
                 return child.getLineNo();
             }
             else if (sibling != null) {
                 return sibling.getLineNo();
             }
         }
         return mLineNo;
     }
 
     /** @return the column number **/
     public int getColumnNo()
     {
         if (mColumnNo == NOT_INITIALIZED) {
             // an inner AST that has been initialized
             // with initialize(String text)
             final DetailAST child = (DetailAST) getFirstChild();
             final DetailAST sibling = (DetailAST) getNextSibling();
             if (child != null) {
                 return child.getColumnNo();
             }
             else if (sibling != null) {
                 return sibling.getColumnNo();
             }
         }
         return mColumnNo;
     }
 
