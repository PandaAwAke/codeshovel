diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/Utils.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/Utils.java
index c1523d655..eda059ce5 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/Utils.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/Utils.java
@@ -127,100 +127,101 @@ public final class Utils
             CREATED_RES.put(aPattern, retVal);
         }
         return retVal;
     }
 
     /**
      * Conditionally add a String to a set of properties.
      * @param aProps the Properties to add to
      * @param aKey the key to add the property under
      * @param aValue if not null, then the value to add the property with
      */
     public static void addObjectString(Properties aProps,
                                        String aKey,
                                        Object aValue)
     {
         if (aValue != null) {
             aProps.put(aKey, aValue.toString());
         }
     }
 
     /**
      * Loads the contents of a file in a String array.
      * @return the lines in the file
      * @param aFileName the name of the file to load
      * @throws IOException error occurred
      **/
     public static String[] getLines(String aFileName)
         throws IOException
     {
         final LineNumberReader lnr =
             new LineNumberReader(new FileReader(aFileName));
         final ArrayList lines = new ArrayList();
         while (true) {
             final String l = lnr.readLine();
             if (l == null) {
                 break;
             }
             lines.add(l);
         }
 
         return (String[]) lines.toArray(new String[0]);
     }
 
     /**
      * Helper method to create a regular expression.
      * @param aPattern the pattern to match
      * @return a created regexp object
      * @throws ConversionException if unable to create RE object.
      **/
     public static RE createRE(String aPattern)
+        throws ConversionException
     {
         RE retVal = null;
         try {
             retVal = getRE(aPattern);
         }
         catch (RESyntaxException e) {
             System.out.println("Failed to initialise regexp expression "
                                + aPattern);
             e.printStackTrace(System.out);
             throw new ConversionException(
                 "Failed to initialise regexp expression " + aPattern, e);
         }
         return retVal;
     }
 
     /**
      * Replaces <code>${xxx}</code> style constructions in the given value
      * with the string value of the corresponding data types.
      *
      * @param aValue The string to be scanned for property references.
      *              May be <code>null</code>, in which case this
      *              method returns immediately with no effect.
      * @param aProps  Mapping (String to String) of property names to their
      *              values. Must not be <code>null</code>.
      *
      * @throws CheckstyleException if the string contains an opening
      *                           <code>${</code> without a closing
      *                           <code>}</code>
      * @return the original string with the properties replaced, or
      *         <code>null</code> if the original string is <code>null</code>.
      *
      * Code copied from ant -
      * http://cvs.apache.org/viewcvs/jakarta-ant/src/main/org/apache/tools/ant/ProjectHelper.java
      */
     public static String replaceProperties(String aValue,  Properties aProps)
             throws CheckstyleException
     {
         if (aValue == null) {
             return null;
         }
 
         final List fragments = new ArrayList();
         final List propertyRefs = new ArrayList();
         parsePropertyString(aValue, fragments, propertyRefs);
 
         final StringBuffer sb = new StringBuffer();
         final Iterator i = fragments.iterator();
         final Iterator j = propertyRefs.iterator();
         while (i.hasNext()) {
             String fragment = (String) i.next();
