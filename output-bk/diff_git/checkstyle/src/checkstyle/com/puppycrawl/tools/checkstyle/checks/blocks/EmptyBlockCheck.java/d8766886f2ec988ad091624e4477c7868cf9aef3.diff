diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java
index fcdd8c3d9..e406153d4 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java
@@ -30,100 +30,101 @@ import com.puppycrawl.tools.checkstyle.checks.AbstractOptionCheck;
  *  {@link TokenTypes#LITERAL_WHILE LITERAL_WHILE},
  *  {@link TokenTypes#LITERAL_TRY LITERAL_TRY},
  *  {@link TokenTypes#LITERAL_CATCH LITERAL_CATCH},
  *  {@link TokenTypes#LITERAL_FINALLY LITERAL_FINALLY},
  *  {@link TokenTypes#LITERAL_DO LITERAL_DO},
  *  {@link TokenTypes#LITERAL_IF LITERAL_IF},
  *  {@link TokenTypes#LITERAL_ELSE LITERAL_ELSE},
  *  {@link TokenTypes#LITERAL_FOR LITERAL_FOR},
  *  {@link TokenTypes#STATIC_INIT STATIC_INIT}.
  *
  * <p> An example of how to configure the check is:
  * <pre>
  * &lt;module name="EmptyBlock"/&gt;
  * </pre>
  *
  * <p> An example of how to configure the check for the {@link
  * BlockOption#TEXT} policy and only catch blocks is:
  *
  * <pre>
  * &lt;module name="EmptyBlock"&gt;
  *    &lt;property name="tokens" value="LITERAL_CATCH"/&gt;
  *    &lt;property name="option" value="text"/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * @author Lars Kï¿½hne
  */
 public class EmptyBlockCheck
     extends AbstractOptionCheck
 {
     /**
      * Creates a new <code>EmptyBlockCheck</code> instance.
      */
     public EmptyBlockCheck()
     {
         super(BlockOption.STMT);
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.LITERAL_WHILE,
             TokenTypes.LITERAL_TRY,
             TokenTypes.LITERAL_CATCH,
             TokenTypes.LITERAL_FINALLY,
             TokenTypes.LITERAL_DO,
             TokenTypes.LITERAL_IF,
             TokenTypes.LITERAL_ELSE,
             TokenTypes.LITERAL_FOR,
+            TokenTypes.INSTANCE_INIT,
             TokenTypes.STATIC_INIT,
             // TODO: need to handle....
             //TokenTypes.LITERAL_SWITCH,
             //TODO: does this handle TokenTypes.LITERAL_SYNCHRONIZED?
         };
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void visitToken(DetailAST aAST)
     {
         final DetailAST slistAST = aAST.findFirstToken(TokenTypes.SLIST);
         if (slistAST != null) {
             if (getAbstractOption() == BlockOption.STMT) {
                 if (slistAST.getChildCount() <= 1) {
                     log(slistAST.getLineNo(),
                         slistAST.getColumnNo(),
                         "block.noStmt",
                         aAST.getText());
                 }
             }
             else if (getAbstractOption() == BlockOption.TEXT) {
                 if (!hasText(slistAST)) {
                     log(slistAST.getLineNo(),
                         slistAST.getColumnNo(),
                         "block.empty",
                         aAST.getText());
                 }
             }
         }
     }
 
     /**
      * @param aSlistAST a <code>DetailAST</code> value
      * @return whether the SLIST token contains any text.
      */
     private boolean hasText(final DetailAST aSlistAST)
     {
         boolean retVal = false;
 
         final DetailAST rcurlyAST = aSlistAST.findFirstToken(TokenTypes.RCURLY);
         if (rcurlyAST != null) {
             final int slistLineNo = aSlistAST.getLineNo();
             final int slistColNo = aSlistAST.getColumnNo();
             final int rcurlyLineNo = rcurlyAST.getLineNo();
             final int rcurlyColNo = rcurlyAST.getColumnNo();
             final String[] lines = getLines();
             if (slistLineNo == rcurlyLineNo) {
                 // Handle braces on the same line
                 final String txt = lines[slistLineNo - 1]
                     .substring(slistColNo + 1, rcurlyColNo);
