diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/IllegalInstantiationCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/IllegalInstantiationCheck.java
index da1d6b117..263e73037 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/IllegalInstantiationCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/IllegalInstantiationCheck.java
@@ -1,114 +1,115 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2002  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks;
 
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.Set;
 import java.util.StringTokenizer;
 
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FullIdent;
+import com.puppycrawl.tools.checkstyle.api.Utils;
 import antlr.collections.AST;
 
 // TODO: Clean up potential duplicate code here and in UnusedImportsCheck
 /**
  * <p>
  * Checks for illegal instantiations where a factory method is preferred.
  * </p>
  * <p>
  * Rationale: Depending on the project, for some classes it might be
  * preferable to create instances through factory methods rather than
  * calling the constructor.
  * </p>
  * <p>
  * A simple example is the java.lang.Boolean class, to save memory and CPU
  * cycles it is preferable to use the predeifined constants TRUE and FALSE.
  * Constructor invocations should be replaced by calls to Boolean.valueOf().
  * </p>
  * <p>
  * Some extremely performance sensitive projects may require the use of factory
  * methods for other classes as well, to enforce the usage of number caches or
  * object pools.
  * </p>
  * <p>
  * Limitations: It is currently not possible to specify array classes.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="IllegalInstantiation"/&gt;
  * </pre>
  * @author lkuehne
  */
 public class IllegalInstantiationCheck
-        extends AbstractImportCheck
+    extends AbstractImportCheck
 {
     /** Set of fully qualified classnames. E.g. "java.lang.Boolean" */
     private final Set mIllegalClasses = new HashSet();
 
     /** name of the package */
     private String mPkgName = null;
 
     /** the imports for the file */
     private final Set mImports = new HashSet();
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.IMPORT,
             TokenTypes.LITERAL_NEW,
             TokenTypes.PACKAGE_DEF
         };
     }
     
     /**
      * Prevent user from changing tokens in the configuration.
      * @see com.puppycrawl.tools.checkstyle.api.Check
      */
     public int[] getAcceptableTokens()
     {
         return new int[] {};
     }
     
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public int[] getRequiredTokens()
     {
         return new int[] {
             TokenTypes.IMPORT,
             TokenTypes.LITERAL_NEW,
             TokenTypes.PACKAGE_DEF
         };
     }
     
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void beginTree(DetailAST aRootAST)
     {
         super.beginTree(aRootAST);
         mPkgName = null;
         mImports.clear();
     }
 
     /** @see com.puppycrawl.tools.checkstyle.api.Check */
     public void visitToken(DetailAST aAST)
     {
@@ -191,84 +192,74 @@ public class IllegalInstantiationCheck
             return aClassName;
         }
 
         final int clsNameLen = aClassName.length();
         final int pkgNameLen = (mPkgName == null) ? 0 : mPkgName.length();
 
         final Iterator illIter = mIllegalClasses.iterator();
         while (illIter.hasNext()) {
             final String illegal = (String) illIter.next();
             final int illegalLen = illegal.length();
 
             // class from java.lang
             if (((illegalLen - javaLang.length()) == clsNameLen)
                 && illegal.endsWith(aClassName)
                 && illegal.startsWith(javaLang))
             {
                 return illegal;
             }
 
             // class from same package
 
             // the toplevel package (mPkgName == null) is covered by the
             // "illegalInsts.contains(aClassName)" check above
 
             // the test is the "no garbage" version of
             // illegal.equals(mPkgName + "." + aClassName)
             if (mPkgName != null
                 && clsNameLen == illegalLen - pkgNameLen - 1
                 && illegal.charAt(pkgNameLen) == '.'
                 && illegal.endsWith(aClassName)
                 && illegal.startsWith(mPkgName))
             {
                 return illegal;
             }
             // import statements
             final Iterator importIter = mImports.iterator();
             while (importIter.hasNext()) {
                 final FullIdent importLineText = (FullIdent) importIter.next();
                 final String importArg = importLineText.getText();
                 if (importArg.endsWith(".*")) {
                     final String fqClass =
                         importArg.substring(0, importArg.length() - 1)
                         + aClassName;
                     // assume that illegalInsts only contain existing classes
                     // or else we might create a false alarm here
                     if (mIllegalClasses.contains(fqClass)) {
                         return fqClass;
                     }
                 }
                 else {
-                    if (basename(importArg).equals(aClassName)
+                    if (Utils.baseClassname(importArg).equals(aClassName)
                         && mIllegalClasses.contains(importArg))
                     {
                         return importArg;
                     }
                 }
             }
         }
         return null;
     }
 
-    /**
-     * @return the class name from a fully qualified name
-     * @param aType the fully qualified name
-     */
-    private static String basename(String aType)
-    {
-        final int i = aType.lastIndexOf(".");
-        return (i == -1) ? aType : aType.substring(i + 1);
-    }
-
     /**
      * Sets the classes that are illegal to instantiate.
      * @param aClassNames a comma seperate list of class names
      */
     public void setClasses(String aClassNames)
     {
         mIllegalClasses.clear();
         final StringTokenizer tok = new StringTokenizer(aClassNames, ",");
         while (tok.hasMoreTokens()) {
             mIllegalClasses.add(tok.nextToken());
         }
     }
 }
