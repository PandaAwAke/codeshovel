diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java
index 68e43e165..86fce74de 100644
--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java
+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java
@@ -97,86 +97,87 @@ public class UnusedImportsCheck extends DeclarationCollector
             TokenTypes.IDENT,
             TokenTypes.IMPORT,
             TokenTypes.INTERFACE_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.PARAMETER_DEF,
             TokenTypes.SLIST,
             TokenTypes.STATIC_IMPORT,
             TokenTypes.VARIABLE_DEF,
         };
     }
 
     /** {@inheritDoc} */
     public int[] getRequiredTokens()
     {
         return getDefaultTokens();
     }
 
     /** {@inheritDoc} */
     public void visitToken(DetailAST aAST)
     {
         super.visitToken(aAST);
         if (aAST.getType() == TokenTypes.IDENT) {
             if (mCollect) {
                 processIdent(aAST);
             }
         }
         else if (aAST.getType() == TokenTypes.IMPORT) {
             processImport(aAST);
         }
         else if (aAST.getType() == TokenTypes.STATIC_IMPORT) {
             processStaticImport(aAST);
         }
         else if ((aAST.getType() == TokenTypes.CLASS_DEF)
             || (aAST.getType() == TokenTypes.INTERFACE_DEF)
             || (aAST.getType() == TokenTypes.ENUM_DEF)
             || (aAST.getType() == TokenTypes.ANNOTATION_DEF)
             || (aAST.getType() == TokenTypes.PACKAGE_DEF))
         {
             mCollect = true;
         }
     }
 
     /**
      * Collects references made by IDENT.
      * @param aAST the IDENT node to process
      */
     private void processIdent(DetailAST aAST)
     {
         final DetailAST parent = aAST.getParent();
         final int parentType = parent.getType();
-        if (parentType != TokenTypes.DOT
-            && parentType != TokenTypes.METHOD_DEF
-            || parentType == TokenTypes.DOT && aAST.getNextSibling() != null)
+        if (((parentType != TokenTypes.DOT)
+            && (parentType != TokenTypes.METHOD_DEF))
+            || ((parentType == TokenTypes.DOT)
+                && (aAST.getNextSibling() != null)))
         {
             if (!isDeclared(aAST.getText())) {
                 mReferenced.add(aAST.getText());
             }
         }
     }
 
     /**
      * Collects the details of imports.
      * @param aAST node containing the import details
      */
     private void processImport(DetailAST aAST)
     {
         final FullIdent name = FullIdent.createFullIdentBelow(aAST);
         if ((name != null) && !name.getText().endsWith(".*")) {
             mImports.add(name);
         }
     }
 
     /**
      * Collects the details of static imports.
      * @param aAST node containing the static import details
      */
     private void processStaticImport(DetailAST aAST)
     {
         final FullIdent name =
             FullIdent.createFullIdent(
                 (DetailAST) aAST.getFirstChild().getNextSibling());
         if ((name != null) && !name.getText().endsWith(".*")) {
             mImports.add(name);
         }
     }
 }
