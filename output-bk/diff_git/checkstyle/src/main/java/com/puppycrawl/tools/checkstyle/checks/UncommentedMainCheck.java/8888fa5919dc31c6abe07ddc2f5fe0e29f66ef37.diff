diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java
index b27ed97f2..cf84c1496 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java
@@ -16,105 +16,105 @@
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks;
 
 import java.util.Optional;
 import java.util.regex.Pattern;
 
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FullIdent;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 
 /**
  * Detects uncommented main methods. Basically detects
  * any main method, since if it is detectable
  * that means it is uncommented.
  *
  * <pre class="body">
  * &lt;module name=&quot;UncommentedMain&quot;/&gt;
  * </pre>
  *
  * @author Michael Yui
  * @author o_sukhodolsky
  */
 public class UncommentedMainCheck
     extends AbstractCheck {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "uncommented.main";
 
     /** The pattern to exclude classes from the check. */
     private String excludedClasses = "^$";
     /** Compiled regexp to exclude classes from check. */
     private Pattern excludedClassesPattern =
             CommonUtils.createPattern(excludedClasses);
     /** Current class name. */
     private String currentClass;
     /** Current package. */
     private FullIdent packageName;
     /** Class definition depth. */
     private int classDepth;
 
     /**
      * Set the excluded classes pattern.
-     * @param excludedClasses a {@code String} value
+     * @param excludedClasses a pattern
      */
-    public void setExcludedClasses(String excludedClasses) {
-        this.excludedClasses = excludedClasses;
-        excludedClassesPattern = CommonUtils.createPattern(excludedClasses);
+    public void setExcludedClasses(Pattern excludedClasses) {
+        this.excludedClasses = excludedClasses.pattern();
+        excludedClassesPattern = excludedClasses;
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.METHOD_DEF,
             TokenTypes.CLASS_DEF,
             TokenTypes.PACKAGE_DEF,
         };
     }
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getRequiredTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public void beginTree(DetailAST rootAST) {
         packageName = FullIdent.createFullIdent(null);
         currentClass = null;
         classDepth = 0;
     }
 
     @Override
     public void leaveToken(DetailAST ast) {
         if (ast.getType() == TokenTypes.CLASS_DEF) {
             if (classDepth == 1) {
                 currentClass = null;
             }
             classDepth--;
         }
     }
 
     @Override
     public void visitToken(DetailAST ast) {
 
         switch (ast.getType()) {
             case TokenTypes.PACKAGE_DEF:
                 visitPackageDef(ast);
                 break;
             case TokenTypes.CLASS_DEF:
                 visitClassDef(ast);
                 break;
             case TokenTypes.METHOD_DEF:
                 visitMethodDef(ast);
