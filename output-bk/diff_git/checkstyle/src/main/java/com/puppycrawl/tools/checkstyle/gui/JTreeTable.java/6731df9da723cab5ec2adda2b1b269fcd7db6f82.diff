diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java
index 8cf55f766..0598f9ba1 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java
@@ -16,103 +16,108 @@
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.gui;
 
 import java.awt.Component;
 import java.awt.Dimension;
 import java.awt.Graphics;
 import java.awt.event.ActionEvent;
 import java.awt.event.MouseEvent;
 import java.util.EventObject;
 import java.util.List;
 
 import javax.swing.AbstractAction;
 import javax.swing.Action;
 import javax.swing.JTable;
 import javax.swing.JTextArea;
 import javax.swing.JTree;
 import javax.swing.KeyStroke;
 import javax.swing.LookAndFeel;
 import javax.swing.UIManager;
 import javax.swing.table.TableCellEditor;
 import javax.swing.table.TableCellRenderer;
 import javax.swing.tree.DefaultTreeCellRenderer;
 import javax.swing.tree.TreeCellRenderer;
 import javax.swing.tree.TreeModel;
 import javax.swing.tree.TreePath;
 
 import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 
 /**
  * This example shows how to create a simple JTreeTable component,
  * by using a JTree as a renderer (and editor) for the cells in a
  * particular column in the JTable.
  *
  * <a href=
  * "https://docs.oracle.com/cd/E48246_01/apirefs.1111/e13403/oracle/ide/controls/TreeTableModel.html">
  * Original&nbsp;Source&nbsp;Location</a>
  *
  * @author Philip Milne
  * @author Scott Violet
  * @author Lars KÃ¼hne
  */
 public class JTreeTable extends JTable {
     /** For Serialisation that will never happen. */
     private static final long serialVersionUID = -8493693409423365387L;
     /** A subclass of JTree. */
     private final TreeTableCellRenderer tree;
+    /** JTextArea editor. */
     private JTextArea editor;
+    /** Line position map. */
     private List<Integer> linePositionMap;
 
+    /**
+     * @param treeTableModel Tree table model
+     */
     public JTreeTable(TreeTableModel treeTableModel) {
 
         // Create the tree. It will be used as a renderer and editor.
         tree = new TreeTableCellRenderer(treeTableModel);
 
         // Install a tableModel representing the visible rows in the tree.
         setModel(new TreeTableModelAdapter(treeTableModel, tree));
 
         // Force the JTable and JTree to share their row selection models.
         final ListToTreeSelectionModelWrapper selectionWrapper = new
                 ListToTreeSelectionModelWrapper(this);
         tree.setSelectionModel(selectionWrapper);
         setSelectionModel(selectionWrapper.getListSelectionModel());
 
         // Install the tree editor renderer and editor.
         setDefaultRenderer(TreeTableModel.class, tree);
         setDefaultEditor(TreeTableModel.class, new TreeTableCellEditor());
 
         // No grid.
         setShowGrid(false);
 
         // No intercell spacing
         setIntercellSpacing(new Dimension(0, 0));
 
         // And update the height of the trees row to match that of
         // the table.
         if (tree.getRowHeight() < 1) {
             // Metal looks better like this.
             setRowHeight(getRowHeight());
         }
 
         final Action expand = new AbstractAction() {
             private static final long serialVersionUID = -5859674518660156121L;
 
                 @Override
                 public void actionPerformed(ActionEvent e) {
                     final TreePath selected = tree.getSelectionPath();
                     final DetailAST ast = (DetailAST) selected.getLastPathComponent();
                     new CodeSelector(ast, editor, linePositionMap).select();
 
                     if (tree.isExpanded(selected)) {
                         tree.collapsePath(selected);
                     }
                     else {
                         tree.expandPath(selected);
                     }
                     tree.setSelectionPath(selected);
                 }
             };
         final KeyStroke stroke = KeyStroke.getKeyStroke("ENTER");
@@ -127,121 +132,132 @@ public class JTreeTable extends JTable {
      * never receive this unless we forward it in this manner.
      */
     @Override
     public void updateUI() {
         super.updateUI();
         if (tree != null) {
             tree.updateUI();
         }
         // Use the tree's default foreground and background colors in the
         // table.
         LookAndFeel.installColorsAndFont(this, "Tree.background",
                 "Tree.foreground", "Tree.font");
     }
 
     /* Workaround for BasicTableUI anomaly. Make sure the UI never tries to
      * paint the editor. The UI currently uses different techniques to
      * paint the renderers and editors and overriding setBounds() below
      * is not the right thing to do for an editor. Returning -1 for the
      * editing row in this case, ensures the editor is never painted.
      */
     @Override
     public int getEditingRow() {
         final Class<?> editingClass = getColumnClass(editingColumn);
 
         if (editingClass == TreeTableModel.class) {
             return -1;
         }
         else {
             return editingRow;
         }
     }
 
     /**
      * Overridden to pass the new rowHeight to the tree.
      */
     @Override
     public final void setRowHeight(int newRowHeight) {
         super.setRowHeight(newRowHeight);
         if (tree != null && tree.getRowHeight() != newRowHeight) {
             tree.setRowHeight(getRowHeight());
         }
     }
 
     /**
      * @return the tree that is being shared between the model.
      */
     public JTree getTree() {
         return tree;
     }
 
-    public void setEditor(JTextArea mJTextArea) {
-        editor = mJTextArea;
+    /**
+     * Sets text area editor.
+     * @param textArea JTextArea component.
+     */
+    public void setEditor(JTextArea textArea) {
+        editor = textArea;
     }
 
+    /**
+     * Sets line position map.
+     * @param linePositionMap Line position map.
+     */
     public void setLinePositionMap(List<Integer> linePositionMap) {
         this.linePositionMap = ImmutableList.copyOf(linePositionMap);
     }
 
     /**
      * A TreeCellRenderer that displays a JTree.
      */
     class TreeTableCellRenderer extends JTree implements
             TableCellRenderer {
         /**
          *
          */
         private static final long serialVersionUID = 4324031590789321581L;
         /** Last table/tree row asked to renderer. */
         private int visibleRow;
 
-        /** Creates a new instance */
+        /**
+         * Creates a new instance.
+         * @param model Tree model.
+         */
         TreeTableCellRenderer(TreeModel model) {
             super(model);
         }
 
         /**
          * UpdateUI is overridden to set the colors of the Tree's renderer
          * to match that of the table.
          */
         @Override
         public void updateUI() {
             super.updateUI();
             // Make the tree's cell renderer use the table's cell selection
             // colors.
             final TreeCellRenderer tcr = getCellRenderer();
             if (tcr instanceof DefaultTreeCellRenderer) {
                 final DefaultTreeCellRenderer dtcr = (DefaultTreeCellRenderer) tcr;
                 // For 1.1 uncomment this, 1.2 has a bug that will cause an
                 // exception to be thrown if the border selection color is
                 // null.
                 // dtcr.setBorderSelectionColor(null);
                 dtcr.setTextSelectionColor(UIManager.getColor("Table.selectionForeground"));
                 dtcr.setBackgroundSelectionColor(UIManager.getColor("Table.selectionBackground"));
             }
         }
 
         /**
          * Sets the row height of the tree, and forwards the row height to
          * the table.
          */
         @Override
         public void setRowHeight(int newRowHeight) {
             if (newRowHeight > 0) {
                 super.setRowHeight(newRowHeight);
                 if (JTreeTable.this != null
                         && JTreeTable.this.getRowHeight() != newRowHeight) {
                     JTreeTable.this.setRowHeight(getRowHeight());
                 }
             }
         }
 
         /**
          * This is overridden to set the height to match that of the JTable.
          */
         @Override
         public void setBounds(int x, int y, int w, int h) {
             super.setBounds(x, 0, w, JTreeTable.this.getHeight());
         }
 
         /**
          * Sublcassed to translate the graphics such that the last visible
