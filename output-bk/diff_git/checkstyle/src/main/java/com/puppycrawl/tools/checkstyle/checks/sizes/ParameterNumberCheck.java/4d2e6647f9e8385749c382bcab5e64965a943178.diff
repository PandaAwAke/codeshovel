diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheck.java
index a1c2ed9f5..27e088983 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheck.java
@@ -77,69 +77,69 @@ public class ParameterNumberCheck
     private static final String OVERRIDE = "Override";
 
     /** Canonical {@link Override Override} annotation name */
     private static final String CANONICAL_OVERRIDE = "java.lang." + OVERRIDE;
 
     /** Default maximum number of allowed parameters */
     private static final int DEFAULT_MAX_PARAMETERS = 7;
 
     /** The maximum number of allowed parameters */
     private int max = DEFAULT_MAX_PARAMETERS;
 
     /** Ignore overridden methods */
     private boolean ignoreOverriddenMethods;
 
     /**
      * Sets the maximum number of allowed parameters.
      * @param max the max allowed parameters
      */
     public void setMax(int max) {
         this.max = max;
     }
 
     /**
      * Ignore number of parameters for methods with
      * &#064;{@link Override} annotation.
      * @param ignoreOverriddenMethods set ignore overridden methods
      */
     public void setIgnoreOverriddenMethods(boolean ignoreOverriddenMethods) {
         this.ignoreOverriddenMethods = ignoreOverriddenMethods;
     }
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.METHOD_DEF, TokenTypes.CTOR_DEF};
     }
 
     @Override
     public int[] getRequiredTokens() {
         return ArrayUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);
         final int count = params.getChildCount(TokenTypes.PARAMETER_DEF);
-        if (count > max && !ignoreNumberOfParameters(ast)) {
+        if (count > max && !shouldIgnoreNumberOfParameters(ast)) {
             final DetailAST name = ast.findFirstToken(TokenTypes.IDENT);
             log(name.getLineNo(), name.getColumnNo(), MSG_KEY, max, count);
         }
     }
 
     /** Determine whether to ignore number of parameters for the method.
      *
      * @param ast the token to process
      * @return true if this is overridden method and number of parameters should be ignored
      *         false otherwise
      */
-    private boolean ignoreNumberOfParameters(DetailAST ast) {
+    private boolean shouldIgnoreNumberOfParameters(DetailAST ast) {
         //if you override a method, you have no power over the number of parameters
         return ignoreOverriddenMethods
                 && (AnnotationUtility.containsAnnotation(ast, OVERRIDE)
                 || AnnotationUtility.containsAnnotation(ast, CANONICAL_OVERRIDE));
     }
 }
