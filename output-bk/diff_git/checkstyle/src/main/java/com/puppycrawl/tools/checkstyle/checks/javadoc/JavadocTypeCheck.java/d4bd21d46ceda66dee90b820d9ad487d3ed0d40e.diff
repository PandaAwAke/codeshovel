diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
index 4f4780677..4493f75c5 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
@@ -256,100 +256,101 @@ public class JavadocTypeCheck
                 log(tag.getLine(), tag.getCol(), MSG_UNKNOWN_TAG,
                     tag.getName());
             }
         }
         return tags.getValidTags();
     }
 
     /**
      * Verifies that a type definition has a required tag.
      * @param lineNo the line number for the type definition.
      * @param tags tags from the Javadoc comment for the type definition.
      * @param tagName the required tag name.
      * @param formatPattern regexp for the tag value.
      */
     private void checkTag(int lineNo, List<JavadocTag> tags, String tagName,
                           Pattern formatPattern) {
         if (formatPattern != null) {
             int tagCount = 0;
             final String tagPrefix = "@";
             for (int i = tags.size() - 1; i >= 0; i--) {
                 final JavadocTag tag = tags.get(i);
                 if (tag.getTagName().equals(tagName)) {
                     tagCount++;
                     if (!formatPattern.matcher(tag.getFirstArg()).find()) {
                         log(lineNo, MSG_TAG_FORMAT, tagPrefix + tagName, formatPattern.pattern());
                     }
                 }
             }
             if (tagCount == 0) {
                 log(lineNo, MSG_MISSING_TAG, tagPrefix + tagName);
             }
         }
     }
 
     /**
      * Verifies that a type definition has the specified param tag for
      * the specified type parameter name.
      * @param lineNo the line number for the type definition.
      * @param tags tags from the Javadoc comment for the type definition.
      * @param typeParamName the name of the type parameter
      */
     private void checkTypeParamTag(final int lineNo,
             final List<JavadocTag> tags, final String typeParamName) {
         boolean found = false;
         for (int i = tags.size() - 1; i >= 0; i--) {
             final JavadocTag tag = tags.get(i);
             if (tag.isParamTag()
                 && tag.getFirstArg().indexOf(OPEN_ANGLE_BRACKET
                         + typeParamName + CLOSE_ANGLE_BRACKET) == 0) {
                 found = true;
+                break;
             }
         }
         if (!found) {
             log(lineNo, MSG_MISSING_TAG, JavadocTagInfo.PARAM.getText()
                 + " " + OPEN_ANGLE_BRACKET + typeParamName + CLOSE_ANGLE_BRACKET);
         }
     }
 
     /**
      * Checks for unused param tags for type parameters.
      * @param tags tags from the Javadoc comment for the type definition.
      * @param typeParamNames names of type parameters
      */
     private void checkUnusedTypeParamTags(
         final List<JavadocTag> tags,
         final List<String> typeParamNames) {
         for (int i = tags.size() - 1; i >= 0; i--) {
             final JavadocTag tag = tags.get(i);
             if (tag.isParamTag()) {
 
                 final String typeParamName = extractTypeParamNameFromTag(tag);
 
                 if (!typeParamNames.contains(typeParamName)) {
                     log(tag.getLineNo(), tag.getColumnNo(),
                             MSG_UNUSED_TAG,
                             JavadocTagInfo.PARAM.getText(),
                             OPEN_ANGLE_BRACKET + typeParamName + CLOSE_ANGLE_BRACKET);
                 }
             }
         }
     }
 
     /**
      * Extracts type parameter name from tag.
      * @param tag javadoc tag to extract parameter name
      * @return extracts type parameter name from tag
      */
     private static String extractTypeParamNameFromTag(JavadocTag tag) {
         final String typeParamName;
         final Matcher matchInAngleBrackets =
                 TYPE_NAME_IN_JAVADOC_TAG.matcher(tag.getFirstArg());
         if (matchInAngleBrackets.find()) {
             typeParamName = matchInAngleBrackets.group(1).trim();
         }
         else {
             typeParamName = TYPE_NAME_IN_JAVADOC_TAG_SPLITTER.split(tag.getFirstArg())[0];
         }
         return typeParamName;
     }
 }
