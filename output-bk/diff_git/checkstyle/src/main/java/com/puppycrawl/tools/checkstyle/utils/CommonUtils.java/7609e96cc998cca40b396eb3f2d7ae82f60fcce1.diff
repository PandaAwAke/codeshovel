diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java
index 98a208ad2..82ac3d263 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java
@@ -1,89 +1,88 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2017 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.utils;
 
 import java.io.Closeable;
 import java.io.File;
 import java.io.IOException;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 import java.net.MalformedURLException;
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.net.URL;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import java.util.regex.PatternSyntaxException;
 
 import org.apache.commons.beanutils.ConversionException;
 
-import com.google.common.base.CharMatcher;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 
 /**
  * Contains utility methods.
  *
  * @author <a href="mailto:nesterenko-aleksey@list.ru">Aleksey Nesterenko</a>
  */
 public final class CommonUtils {
 
     /** Copied from org.apache.commons.lang3.ArrayUtils. */
     public static final String[] EMPTY_STRING_ARRAY = new String[0];
     /** Copied from org.apache.commons.lang3.ArrayUtils. */
     public static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY = new Integer[0];
     /** Copied from org.apache.commons.lang3.ArrayUtils. */
     public static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];
     /** Copied from org.apache.commons.lang3.ArrayUtils. */
     public static final int[] EMPTY_INT_ARRAY = new int[0];
     /** Copied from org.apache.commons.lang3.ArrayUtils. */
     public static final byte[] EMPTY_BYTE_ARRAY = new byte[0];
     /** Copied from org.apache.commons.lang3.ArrayUtils. */
     public static final double[] EMPTY_DOUBLE_ARRAY = new double[0];
 
     /** Prefix for the exception when unable to find resource. */
     private static final String UNABLE_TO_FIND_EXCEPTION_PREFIX = "Unable to find: ";
 
     /** Stop instances being created. **/
     private CommonUtils() {
 
     }
 
     /**
      * Helper method to create a regular expression.
      *
      * @param pattern
      *            the pattern to match
      * @return a created regexp object
      * @throws ConversionException
      *             if unable to create Pattern object.
      **/
     public static Pattern createPattern(String pattern) {
         return createPattern(pattern, 0);
     }
 
     /**
      * Helper method to create a regular expression with a specific flags.
      *
      * @param pattern
      *            the pattern to match
      * @param flags
      *            the flags to set
@@ -377,139 +376,147 @@ public final class CommonUtils {
         }
         catch (final URISyntaxException | MalformedURLException ignored) {
             uri = null;
         }
 
         if (uri == null) {
             final File file = new File(filename);
             if (file.exists()) {
                 uri = file.toURI();
             }
             else {
                 // check to see if the file is in the classpath
                 try {
                     final URL configUrl = CommonUtils.class
                             .getResource(filename);
                     if (configUrl == null) {
                         throw new CheckstyleException(UNABLE_TO_FIND_EXCEPTION_PREFIX + filename);
                     }
                     uri = configUrl.toURI();
                 }
                 catch (final URISyntaxException ex) {
                     throw new CheckstyleException(UNABLE_TO_FIND_EXCEPTION_PREFIX + filename, ex);
                 }
             }
         }
 
         return uri;
     }
 
     /**
      * Puts part of line, which matches regexp into given template
      * on positions $n where 'n' is number of matched part in line.
      * @param template the string to expand.
      * @param lineToPlaceInTemplate contains expression which should be placed into string.
      * @param regexp expression to find in comment.
      * @return the string, based on template filled with given lines
      */
     public static String fillTemplateWithStringsByRegexp(
         String template, String lineToPlaceInTemplate, Pattern regexp) {
         final Matcher matcher = regexp.matcher(lineToPlaceInTemplate);
         String result = template;
         if (matcher.find()) {
             for (int i = 0; i <= matcher.groupCount(); i++) {
                 // $n expands comment match like in Pattern.subst().
                 result = result.replaceAll("\\$" + i, matcher.group(i));
             }
         }
         return result;
     }
 
-    /**
-     * Check if a string is blank.
-     * A string is considered blank if it is null, empty or contains only  whitespace characters,
-     * as determined by {@link CharMatcher#WHITESPACE}.
-     * @param str the string to check
-     * @return true if str is either null, empty or whitespace-only.
-     */
-    public static boolean isBlank(String str) {
-        return str == null || CharMatcher.WHITESPACE.matchesAllOf(str);
-    }
-
     /**
      * Returns file name without extension.
      * We do not use the method from Guava library to reduce Checkstyle's dependencies
      * on external libraries.
      * @param fullFilename file name with extension.
      * @return file name without extension.
      */
     public static String getFileNameWithoutExtension(String fullFilename) {
         final String fileName = new File(fullFilename).getName();
         final int dotIndex = fileName.lastIndexOf('.');
         final String fileNameWithoutExtension;
         if (dotIndex == -1) {
             fileNameWithoutExtension = fileName;
         }
         else {
             fileNameWithoutExtension = fileName.substring(0, dotIndex);
         }
         return fileNameWithoutExtension;
     }
 
     /**
      * Returns file extension for the given file name
      * or empty string if file does not have an extension.
      * We do not use the method from Guava library to reduce Checkstyle's dependencies
      * on external libraries.
      * @param fileNameWithExtension file name with extension.
      * @return file extension for the given file name
      *         or empty string if file does not have an extension.
      */
     public static String getFileExtension(String fileNameWithExtension) {
         final String fileName = Paths.get(fileNameWithExtension).toString();
         final int dotIndex = fileName.lastIndexOf('.');
         final String extension;
         if (dotIndex == -1) {
             extension = "";
         }
         else {
             extension = fileName.substring(dotIndex + 1);
         }
         return extension;
     }
 
     /**
      * Checks whether the given string is a valid identifier.
      * @param str A string to check.
      * @return true when the given string contains valid identifier.
      */
     public static boolean isIdentifier(String str) {
         boolean isIdentifier = !str.isEmpty();
 
         for (int i = 0; isIdentifier && i < str.length(); i++) {
             if (i == 0) {
                 isIdentifier = Character.isJavaIdentifierStart(str.charAt(0));
             }
             else {
                 isIdentifier = Character.isJavaIdentifierPart(str.charAt(i));
             }
         }
 
         return isIdentifier;
     }
 
     /**
      * Checks whether the given string is a valid name.
      * @param str A string to check.
      * @return true when the given string contains valid name.
      */
     public static boolean isName(String str) {
         boolean isName = !str.isEmpty();
 
         final String[] identifiers = str.split("\\.", -1);
         for (int i = 0; isName && i < identifiers.length; i++) {
             isName = isIdentifier(identifiers[i]);
         }
 
         return isName;
     }
+
+    /**
+     * Checks if the value arg is blank by either being null,
+     * empty, or contains only whitespace characters.
+     * @param value A string to check.
+     * @return true if the arg is blank.
+     */
+    public static boolean isBlank(String value) {
+        boolean result = true;
+        if (value != null && !value.isEmpty()) {
+            for (int i = 0; i < value.length(); i++) {
+                if (!Character.isWhitespace(value.charAt(i))) {
+                    result = false;
+                    break;
+                }
+            }
+        }
+        return result;
+    }
 }
