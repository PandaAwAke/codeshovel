diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java b/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
index cf9b0fab6..6346fc454 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
@@ -123,108 +123,108 @@ public class PackageObjectFactory implements ModuleFactory {
         if (packageName == null) {
             throw new IllegalArgumentException(NULL_PACKAGE_MESSAGE);
         }
 
         packages = new LinkedHashSet<>(1);
         packages.add(packageName);
         this.moduleClassLoader = moduleClassLoader;
     }
 
     /**
      * Creates a new instance of a class from a given name, or that name
      * concatenated with &quot;Check&quot;. If the name is
      * a class name, creates an instance of the named class. Otherwise, creates
      * an instance of a class name obtained by concatenating the given name
      * to a package name from a given list of package names.
      * @param name the name of a class.
      * @return the {@code Object} created by loader.
      * @throws CheckstyleException if an error occurs.
      */
     @Override
     public Object createModule(String name) throws CheckstyleException {
         Object instance = null;
         // if the name is a simple class name, try to find it in maps at first
         if (!name.contains(PACKAGE_SEPARATOR)) {
             // find the name in hardcode map
             final String fullModuleName = NAME_TO_FULL_MODULE_NAME.get(name);
             if (fullModuleName == null) {
                 final String fullCheckModuleName =
                         NAME_TO_FULL_MODULE_NAME.get(name + CHECK_SUFFIX);
                 if (fullCheckModuleName != null) {
                     instance = createObject(fullCheckModuleName);
                 }
             }
             else {
                 instance = createObject(fullModuleName);
             }
 
             // find the name in third party map
             if (instance == null) {
                 if (thirdPartyNameToFullModuleNames == null) {
                     thirdPartyNameToFullModuleNames =
                             generateThirdPartyNameToFullModuleName(moduleClassLoader);
                 }
                 instance = createObjectFromMap(name, thirdPartyNameToFullModuleNames);
             }
         }
 
         if (instance == null) {
             instance = createObject(name);
         }
-        final String nameCheck = name + CHECK_SUFFIX;
         if (instance == null) {
-            instance = createObject(nameCheck);
-        }
-        if (instance == null) {
-            final String attemptedNames = joinPackageNamesWithClassName(name, packages)
-                    + STRING_SEPARATOR + nameCheck + STRING_SEPARATOR
-                    + joinPackageNamesWithClassName(nameCheck, packages);
+            String attemptedNames = null;
+            if (!name.contains(PACKAGE_SEPARATOR)) {
+                final String nameCheck = name + CHECK_SUFFIX;
+                attemptedNames = joinPackageNamesWithClassName(name, packages)
+                        + STRING_SEPARATOR + nameCheck + STRING_SEPARATOR
+                        + joinPackageNamesWithClassName(nameCheck, packages);
+            }
             final LocalizedMessage exceptionMessage = new LocalizedMessage(0,
                 Definitions.CHECKSTYLE_BUNDLE, UNABLE_TO_INSTANTIATE_EXCEPTION_MESSAGE,
                 new String[] {name, attemptedNames}, null, getClass(), null);
             throw new CheckstyleException(exceptionMessage.getMessage());
         }
         return instance;
     }
 
     /**
      * Create object with the help of the supplied map.
      * @param name name of module.
      * @param map the supplied map.
      * @return instance of module if it is found in modules map and no ambiguous classes exist.
      * @throws CheckstyleException if the class fails to instantiate or there are ambiguous classes.
      */
     private Object createObjectFromMap(String name, Map<String, Set<String>> map)
             throws CheckstyleException {
         final Set<String> fullModuleNames = map.get(name);
         Object instance = null;
         if (fullModuleNames == null) {
             final Set<String> fullCheckModuleNames = map.get(name + CHECK_SUFFIX);
             if (fullCheckModuleNames != null) {
                 instance = createObjectFromFullModuleNames(name, fullCheckModuleNames);
             }
         }
         else {
             instance = createObjectFromFullModuleNames(name, fullModuleNames);
         }
         return instance;
     }
 
     /**
      * Create Object from optional full module names.
      * In most case, there should be only one element in {@code fullModuleName}, otherwise
      * an exception would be thrown.
      * @param name name of module
      * @param fullModuleNames the supplied full module names set
      * @return instance of module if there is only one element in {@code fullModuleName}
      * @throws CheckstyleException if the class fails to instantiate or there are more than one
      *      element in {@code fullModuleName}
      */
     private Object createObjectFromFullModuleNames(String name, Set<String> fullModuleNames)
             throws CheckstyleException {
         final Object returnValue;
         if (fullModuleNames.size() == 1) {
             returnValue = createObject(fullModuleNames.iterator().next());
         }
         else {
             final String optionalNames = fullModuleNames.stream()
                     .sorted()
