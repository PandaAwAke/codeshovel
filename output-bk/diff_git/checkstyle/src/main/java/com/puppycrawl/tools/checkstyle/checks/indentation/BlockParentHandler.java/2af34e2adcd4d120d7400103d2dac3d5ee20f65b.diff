diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java
index a10a8b9c6..8ad342fa5 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java
@@ -242,80 +242,81 @@ public class BlockParentHandler extends AbstractExpressionHandler {
     }
 
     /**
      * Get the right parenthesis portion of the expression we are handling.
      *
      * @return the right parenthesis expression
      */
     protected DetailAST getRParen() {
         return getMainAst().findFirstToken(TokenTypes.RPAREN);
     }
 
     /**
      * Get the left parenthesis portion of the expression we are handling.
      *
      * @return the left parenthesis expression
      */
     protected DetailAST getLParen() {
         return getMainAst().findFirstToken(TokenTypes.LPAREN);
     }
 
     @Override
     public void checkIndentation() {
         checkToplevelToken();
         // separate to allow for eventual configuration
         checkLParen(getLParen());
         checkRParen(getLParen(), getRParen());
         if (hasCurlys()) {
             checkLCurly();
             checkRCurly();
         }
         final DetailAST listChild = getListChild();
         if (listChild != null) {
             // NOTE: switch statements usually don't have curlys
             if (!hasCurlys() || !areOnSameLine(getLCurly(), getRCurly())) {
                 checkChildren(listChild,
                               getCheckedChildren(),
                               getChildrenExpectedLevel(),
                               true,
                               childrenMayNest());
             }
         }
         else {
             checkNonlistChild();
         }
     }
 
     /**
      * @return indentation level expected for children
      */
     protected IndentLevel getChildrenExpectedLevel() {
+        IndentLevel indentLevel = new IndentLevel(getLevel(), getBasicOffset());
         // if we have multileveled expected level then we should
         // try to suggest single level to children using curlies'
         // levels.
         if (getLevel().isMultiLevel() && hasCurlys()) {
             if (startsLine(getLCurly())) {
-                return new IndentLevel(expandedTabsColumnNo(getLCurly()) + getBasicOffset());
+                indentLevel = new IndentLevel(expandedTabsColumnNo(getLCurly()) + getBasicOffset());
             }
             else if (startsLine(getRCurly())) {
                 final IndentLevel level = new IndentLevel(curlyLevel(), getBasicOffset());
                 level.addAcceptedIndent(level.getFirstIndentLevel() + getLineWrappingIndent());
-                return level;
+                indentLevel = level;
             }
         }
-        return new IndentLevel(getLevel(), getBasicOffset());
+        return indentLevel;
     }
 
     @Override
     public IndentLevel suggestedChildLevel(AbstractExpressionHandler child) {
         return getChildrenExpectedLevel();
     }
 
     /**
      * A shortcut for {@code IndentationCheck} property.
      * @return value of lineWrappingIndentation property
      *         of {@code IndentationCheck}
      */
     private int getLineWrappingIndent() {
         return getIndentCheck().getLineWrappingIndentation();
     }
 }
