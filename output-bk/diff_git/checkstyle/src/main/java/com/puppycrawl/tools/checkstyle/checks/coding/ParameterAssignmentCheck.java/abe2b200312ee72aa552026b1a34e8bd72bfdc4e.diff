diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheck.java
index 17e3878ec..24bb9932d 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheck.java
@@ -31,100 +31,125 @@ import java.util.Set;
  * </p>
  * <p>
  * Rationale:
  * Parameter assignment is often considered poor
  * programming practice. Forcing developers to declare
  * parameters as final is often onerous. Having a check
  * ensure that parameters are never assigned would give
  * the best of both worlds.
  * </p>
  * @author <a href="mailto:simon@redhillconsulting.com.au">Simon Harris</a>
  */
 public final class ParameterAssignmentCheck extends Check
 {
     /** Stack of methods' parameters. */
     private final FastStack<Set<String>> parameterNamesStack =
         FastStack.newInstance();
     /** Current set of perameters. */
     private Set<String> parameterNames;
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.CTOR_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.ASSIGN,
             TokenTypes.PLUS_ASSIGN,
             TokenTypes.MINUS_ASSIGN,
             TokenTypes.STAR_ASSIGN,
             TokenTypes.DIV_ASSIGN,
             TokenTypes.MOD_ASSIGN,
             TokenTypes.SR_ASSIGN,
             TokenTypes.BSR_ASSIGN,
             TokenTypes.SL_ASSIGN,
             TokenTypes.BAND_ASSIGN,
             TokenTypes.BXOR_ASSIGN,
             TokenTypes.BOR_ASSIGN,
             TokenTypes.INC,
             TokenTypes.POST_INC,
             TokenTypes.DEC,
             TokenTypes.POST_DEC,
         };
     }
 
     @Override
     public int[] getRequiredTokens()
     {
         return getDefaultTokens();
     }
 
+    @Override
+    public int[] getAcceptableTokens()
+    {
+        return new int[] {
+            TokenTypes.CTOR_DEF,
+            TokenTypes.METHOD_DEF,
+            TokenTypes.ASSIGN,
+            TokenTypes.PLUS_ASSIGN,
+            TokenTypes.MINUS_ASSIGN,
+            TokenTypes.STAR_ASSIGN,
+            TokenTypes.DIV_ASSIGN,
+            TokenTypes.MOD_ASSIGN,
+            TokenTypes.SR_ASSIGN,
+            TokenTypes.BSR_ASSIGN,
+            TokenTypes.SL_ASSIGN,
+            TokenTypes.BAND_ASSIGN,
+            TokenTypes.BXOR_ASSIGN,
+            TokenTypes.BOR_ASSIGN,
+            TokenTypes.INC,
+            TokenTypes.POST_INC,
+            TokenTypes.DEC,
+            TokenTypes.POST_DEC,
+        };
+    }
+
     @Override
     public void beginTree(DetailAST rootAST)
     {
         // clear data
         parameterNamesStack.clear();
         parameterNames = null;
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
         switch (ast.getType()) {
             case TokenTypes.CTOR_DEF:
             case TokenTypes.METHOD_DEF:
                 visitMethodDef(ast);
                 break;
             case TokenTypes.ASSIGN:
             case TokenTypes.PLUS_ASSIGN:
             case TokenTypes.MINUS_ASSIGN:
             case TokenTypes.STAR_ASSIGN:
             case TokenTypes.DIV_ASSIGN:
             case TokenTypes.MOD_ASSIGN:
             case TokenTypes.SR_ASSIGN:
             case TokenTypes.BSR_ASSIGN:
             case TokenTypes.SL_ASSIGN:
             case TokenTypes.BAND_ASSIGN:
             case TokenTypes.BXOR_ASSIGN:
             case TokenTypes.BOR_ASSIGN:
                 visitAssign(ast);
                 break;
             case TokenTypes.INC:
             case TokenTypes.POST_INC:
             case TokenTypes.DEC:
             case TokenTypes.POST_DEC:
                 visitIncDec(ast);
                 break;
             default:
                 throw new IllegalStateException(ast.toString());
         }
     }
 
     @Override
     public void leaveToken(DetailAST ast)
     {
         switch (ast.getType()) {
             case TokenTypes.CTOR_DEF:
             case TokenTypes.METHOD_DEF:
                 leaveMethodDef();
                 break;
             case TokenTypes.ASSIGN:
