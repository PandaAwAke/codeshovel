diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java
index 7ca07a945..83ae5ee81 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java
@@ -49,174 +49,179 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocLexer;
 import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser;
 
 /**
  * Base class for Checks that process Javadoc comments.
  * @author Baratali Izmailov
  */
 public abstract class AbstractJavadocCheck extends Check {
     /**
      * Error message key for common javadoc errors.
      */
     public static final String PARSE_ERROR_MESSAGE_KEY = "javadoc.parse.error";
 
     /**
      * Unrecognized error from antlr parser.
      */
     public static final String UNRECOGNIZED_ANTLR_ERROR_MESSAGE_KEY =
             "javadoc.unrecognized.antlr.error";
 
     /**
      * key is "line:column"
      * value is DetailNode tree
      */
     private static final Map<String, ParseStatus> TREE_CACHE = new HashMap<>();
 
     /**
      * Custom error listener.
      */
     private final DescriptiveErrorListener errorListener =
             new DescriptiveErrorListener();
 
     /**
      * DetailAST node of considered Javadoc comment that is just a block comment
      * in Java language syntax tree.
      */
     private DetailAST blockCommentAst;
 
     /**
      * Returns the default token types a check is interested in.
      * @return the default token types
      * @see JavadocTokenTypes
      */
     public abstract int[] getDefaultJavadocTokens();
 
     /**
      * Called before the starting to process a tree.
      * @param rootAst
      *        the root of the tree
      */
     public void beginJavadocTree(DetailNode rootAst) {
+        // No code by default, should be overridden only by demand at subclasses
     }
 
     /**
      * Called after finished processing a tree.
      * @param rootAst
      *        the root of the tree
      */
     public void finishJavadocTree(DetailNode rootAst) {
+        // No code by default, should be overridden only by demand at subclasses
     }
 
     /**
      * Called to process a Javadoc token.
      * @param ast
      *        the token to process
      */
     public void visitJavadocToken(DetailNode ast) {
+        // No code by default, should be overridden only by demand at subclasses
     }
 
     /**
      * Called after all the child nodes have been process.
      * @param ast
      *        the token leaving
      */
     public void leaveJavadocToken(DetailNode ast) {
+        // No code by default, should be overridden only by demand at subclasses
     }
 
     /**
      * Defined final to not allow JavadocChecks to change default tokens.
      * @return default tokens
      */
     @Override
     public final int[] getDefaultTokens() {
         return new int[] {TokenTypes.BLOCK_COMMENT_BEGIN };
     }
 
     /**
      * Defined final to not allow JavadocChecks to change acceptable tokens.
      * @return acceptable tokens
      */
     @Override
     public final int[] getAcceptableTokens() {
         return super.getAcceptableTokens();
     }
 
     /**
      * Defined final to not allow JavadocChecks to change required tokens.
      * @return required tokens
      */
     @Override
     public final int[] getRequiredTokens() {
         return super.getRequiredTokens();
     }
 
     /**
      * Defined final because all JavadocChecks require comment nodes.
      * @return true
      */
     @Override
     public final boolean isCommentNodesRequired() {
         return true;
     }
 
     @Override
     public final void beginTree(DetailAST rootAST) {
         TREE_CACHE.clear();
     }
 
     @Override
     public final void finishTree(DetailAST rootAST) {
         TREE_CACHE.clear();
     }
 
     @Override
     public final void leaveToken(DetailAST ast) {
+        // No code by default, should be overridden only by demand at subclasses
     }
 
     @Override
     public final void visitToken(DetailAST blockCommentAst) {
         if (JavadocUtils.isJavadocComment(blockCommentAst)) {
             this.blockCommentAst = blockCommentAst;
 
             final String treeCacheKey = blockCommentAst.getLineNo() + ":"
                     + blockCommentAst.getColumnNo();
 
             ParseStatus ps;
 
             if (TREE_CACHE.containsKey(treeCacheKey)) {
                 ps = TREE_CACHE.get(treeCacheKey);
             }
             else {
                 ps = parseJavadocAsDetailNode(blockCommentAst);
                 TREE_CACHE.put(treeCacheKey, ps);
             }
 
             if (ps.getParseErrorMessage() == null) {
                 processTree(ps.getTree());
             }
             else {
                 final ParseErrorMessage parseErrorMessage = ps.getParseErrorMessage();
                 log(parseErrorMessage.getLineNumber(),
                         parseErrorMessage.getMessageKey(),
                         parseErrorMessage.getMessageArguments());
             }
         }
 
     }
 
     protected DetailAST getBlockCommentAst() {
         return blockCommentAst;
     }
 
     /**
      * Parses Javadoc comment as DetailNode tree.
      * @param javadocCommentAst
      *        DetailAST of Javadoc comment
      * @return DetailNode tree of Javadoc comment
      */
     private ParseStatus parseJavadocAsDetailNode(DetailAST javadocCommentAst) {
         final String javadocComment = JavadocUtils.getJavadocCommentContent(javadocCommentAst);
 
         // Log messages should have line number in scope of file,
         // not in scope of Javadoc comment.
         // Offset is line number of beginning of Javadoc comment.
         errorListener.setOffset(javadocCommentAst.getLineNo() - 1);
