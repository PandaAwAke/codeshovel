diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheck.java
index 2966295d7..888dce27c 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheck.java
@@ -42,69 +42,74 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  * An example of how to configure the check for comments that contain
  * {@code TODO} or {@code FIXME}is:
  * </p>
  *
  * <pre>
  * &lt;module name="TodoComment"&gt;
  *    &lt;property name="format" value="(TODO)|(FIXME)"/&gt;
  * &lt;/module&gt;
  * </pre>
  * @author Oliver Burn
  * @author Baratali Izmailov
  */
 public class TodoCommentCheck
         extends Check {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "todo.match";
 
     /**
      * Format of 'todo' comment.
      */
     private String format = "TODO:";
 
     /**
      * Regular expression pattern compiled from format.
      */
     private Pattern regexp = Pattern.compile(format);
 
     @Override
     public boolean isCommentNodesRequired() {
         return true;
     }
 
     /**
      * Setter for 'todo' comment format.
      * @param format
      *        format of 'todo' comment.
      * @throws org.apache.commons.beanutils.ConversionException
      *         if unable to create Pattern object.
      */
     public void setFormat(String format) {
         this.format = format;
         regexp = Utils.createPattern(format);
     }
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.COMMENT_CONTENT };
+        return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.COMMENT_CONTENT };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         final String[] lines = ast.getText().split("\n");
 
         for (int i = 0; i < lines.length; i++) {
             if (regexp.matcher(lines[i]).find()) {
                 log(ast.getLineNo() + i, MSG_KEY, format);
             }
         }
     }
 }
