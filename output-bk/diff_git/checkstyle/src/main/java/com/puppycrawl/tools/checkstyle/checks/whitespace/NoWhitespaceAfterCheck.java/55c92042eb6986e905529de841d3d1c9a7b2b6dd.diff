diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java
index 36be118dd..e3f15f991 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java
@@ -131,199 +131,199 @@ public class NoWhitespaceAfterCheck extends Check {
      */
     private static DetailAST getPreceded(DetailAST ast) {
         DetailAST preceded;
 
         switch (ast.getType()) {
             case TokenTypes.TYPECAST:
                 preceded = ast.findFirstToken(TokenTypes.RPAREN);
                 break;
             case TokenTypes.ARRAY_DECLARATOR:
                 preceded = getArrayTypeOrIdentifier(ast);
                 break;
             default:
                 preceded = ast;
         }
         return preceded;
     }
 
     /**
      * Gets position after token (place of possible redundant whitespace).
      * @param ast Node representing token.
      * @return position after token.
      */
     private static int getPositionAfter(DetailAST ast) {
         int after;
         //If target of possible redundant whitespace is in method definition
         if (ast.getType() == TokenTypes.IDENT
                 && ast.getNextSibling() != null
                 && ast.getNextSibling().getType() == TokenTypes.LPAREN) {
             final DetailAST methodDef = ast.getParent();
             final DetailAST endOfParams = methodDef.findFirstToken(TokenTypes.RPAREN);
             after = endOfParams.getColumnNo() + 1;
         }
         else {
             after = ast.getColumnNo() + ast.getText().length();
         }
         return after;
     }
 
     /**
      * Gets target place of possible redundant whitespace (array's type or identifier)
      *  after which {@link TokenTypes#ARRAY_DECLARATOR ARRAY_DECLARATOR} is set.
      * @param arrayDeclarator {@link TokenTypes#ARRAY_DECLARATOR ARRAY_DECLARATOR}
      * @return target place before possible redundant whitespace.
      */
     private static DetailAST getArrayTypeOrIdentifier(DetailAST arrayDeclarator) {
         DetailAST typeOrIdent = arrayDeclarator;
         if (isArrayInstantiation(arrayDeclarator)) {
             typeOrIdent = arrayDeclarator.getParent().getFirstChild();
         }
         else if (isMultiDimensionalArray(arrayDeclarator)) {
-            if (isCstyleMultiDimensionalArrayDeclaration(arrayDeclarator)) {
+            if (isCStyleMultiDimensionalArrayDeclaration(arrayDeclarator)) {
                 if (arrayDeclarator.getParent().getType() != TokenTypes.ARRAY_DECLARATOR) {
                     typeOrIdent = getArrayIdentifier(arrayDeclarator);
                 }
             }
             else {
                 DetailAST arrayIdentifier = arrayDeclarator.getFirstChild();
                 while (arrayIdentifier != null) {
                     typeOrIdent = arrayIdentifier;
                     arrayIdentifier = arrayIdentifier.getFirstChild();
                 }
             }
         }
         else {
-            if (isCstyleArrayDeclaration(arrayDeclarator)) {
+            if (isCStyleArrayDeclaration(arrayDeclarator)) {
                 typeOrIdent = getArrayIdentifier(arrayDeclarator);
             }
             else {
                 if (isArrayUsedAsTypeForGenericBoundedWildcard(arrayDeclarator)) {
                     typeOrIdent = arrayDeclarator.getParent();
                 }
                 else {
                     typeOrIdent = arrayDeclarator.getFirstChild();
                 }
             }
         }
         return typeOrIdent;
     }
 
     /**
      * Gets array identifier, e.g.:
      * <p>
      * {@code
      * int[] someArray;
      * }
      * </p>
      * <p>
      * someArray is identifier.
      * </p>
      * @param arrayDeclarator {@link TokenTypes#ARRAY_DECLARATOR ARRAY_DECLARATOR}
      * @return array identifier.
      */
     private static DetailAST getArrayIdentifier(DetailAST arrayDeclarator) {
         return arrayDeclarator.getParent().getNextSibling();
     }
 
     /**
      * Checks if current array is multidimensional.
      * @param arrayDeclaration {@link TokenTypes#ARRAY_DECLARATOR ARRAY_DECLARATOR}
      * @return true if current array is multidimensional.
      */
     private static boolean isMultiDimensionalArray(DetailAST arrayDeclaration) {
         return arrayDeclaration.getParent().getType() == TokenTypes.ARRAY_DECLARATOR
                 || arrayDeclaration.getFirstChild().getType() == TokenTypes.ARRAY_DECLARATOR;
     }
 
     /**
      * Checks if current array declaration is part of array instantiation.
      * @param arrayDeclaration {@link TokenTypes#ARRAY_DECLARATOR ARRAY_DECLARATOR}
      * @return true if current array declaration is part of array instantiation.
      */
     private static boolean isArrayInstantiation(DetailAST arrayDeclaration) {
         return arrayDeclaration.getParent().getType() == TokenTypes.LITERAL_NEW;
     }
 
     /**
      * Checks if current array is used as type for generic bounded wildcard.
      * <p>
      * E.g. {@code <? extends String[]>} or {@code <? super Object[]>}.
      * </p>
      * @param arrayDeclarator {@link TokenTypes#ARRAY_DECLARATOR ARRAY_DECLARATOR}
      * @return true if current array is used as type for generic bounded wildcard.
      */
     private static boolean isArrayUsedAsTypeForGenericBoundedWildcard(DetailAST arrayDeclarator) {
         final int firstChildType = arrayDeclarator.getFirstChild().getType();
         return firstChildType == TokenTypes.TYPE_UPPER_BOUNDS
                 || firstChildType == TokenTypes.TYPE_LOWER_BOUNDS;
     }
 
     /**
-     * Control whether whitespace is flagged at linebreaks.
+     * Control whether whitespace is flagged at line breaks.
      * @param allowLineBreaks whether whitespace should be
-     * flagged at linebreaks.
+     * flagged at line breaks.
      */
     public void setAllowLineBreaks(boolean allowLineBreaks) {
         this.allowLineBreaks = allowLineBreaks;
     }
 
     /**
      * Checks if current array is declared in C style, e.g.:
      * <p>
      * {@code
      * int array[] = { ... }; //C style
      * }
      * </p>
      * <p>
      * {@code
      * int[] array = { ... }; //Java style
      * }
      * </p>
      * @param arrayDeclaration {@link TokenTypes#ARRAY_DECLARATOR ARRAY_DECLARATOR}
      * @return true if array is declared in C style
      */
-    private static boolean isCstyleArrayDeclaration(DetailAST arrayDeclaration) {
+    private static boolean isCStyleArrayDeclaration(DetailAST arrayDeclaration) {
         boolean result = false;
         final DetailAST identifier = getArrayIdentifier(arrayDeclaration);
         if (identifier != null) {
             final int arrayDeclarationStart = arrayDeclaration.getColumnNo();
             final int identifierEnd = identifier.getColumnNo() + identifier.getText().length();
             result = arrayDeclarationStart == identifierEnd
                      || arrayDeclarationStart > identifierEnd;
         }
         return result;
     }
 
     /**
      * Works with multidimensional arrays.
      * @param arrayDeclaration {@link TokenTypes#ARRAY_DECLARATOR ARRAY_DECLARATOR}
      * @return true if multidimensional array is declared in C style.
      */
-    private static boolean isCstyleMultiDimensionalArrayDeclaration(DetailAST arrayDeclaration) {
+    private static boolean isCStyleMultiDimensionalArrayDeclaration(DetailAST arrayDeclaration) {
         boolean result = false;
         DetailAST parentArrayDeclaration = arrayDeclaration;
         while (parentArrayDeclaration != null) {
             if (parentArrayDeclaration.getParent() != null
                     && parentArrayDeclaration.getParent().getType() == TokenTypes.TYPE) {
-                result = isCstyleArrayDeclaration(parentArrayDeclaration);
+                result = isCStyleArrayDeclaration(parentArrayDeclaration);
             }
             parentArrayDeclaration = parentArrayDeclaration.getParent();
         }
         return result;
     }
 
     /**
      * Checks if current line has redundant whitespace after specified index.
      * @param line line of java source.
      * @param after specified index.
      * @return true if line contains redundant whitespace.
      */
     private boolean hasRedundantWhitespace(String line, int after) {
         boolean result = !allowLineBreaks;
         for (int i = after + 1; !result && i < line.length(); i++) {
             if (!Character.isWhitespace(line.charAt(i))) {
                 result = true;
             }
         }
         return result;
     }
 }
