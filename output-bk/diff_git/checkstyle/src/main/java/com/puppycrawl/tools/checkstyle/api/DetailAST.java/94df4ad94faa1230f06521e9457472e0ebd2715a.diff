diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
index 568db2d42..6fb4b99b3 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
@@ -63,253 +63,253 @@ public final class DetailAST extends CommonASTWithHiddenTokens {
         super.initialize(tok);
         lineNo = tok.getLine();
 
         // expect columns to start @ 0
         columnNo = tok.getColumn() - 1;
     }
 
     @Override
     public void initialize(AST ast) {
         final DetailAST detailAst = (DetailAST) ast;
         setText(detailAst.getText());
         setType(detailAst.getType());
         lineNo = detailAst.getLineNo();
         columnNo = detailAst.getColumnNo();
         hiddenAfter = detailAst.getHiddenAfter();
         hiddenBefore = detailAst.getHiddenBefore();
     }
 
     @Override
     public void setFirstChild(AST ast) {
         clearBranchTokenTypes();
         clearChildCountCache(this);
         super.setFirstChild(ast);
         if (ast != null) {
             ((DetailAST) ast).setParent(this);
         }
     }
 
     @Override
     public void setNextSibling(AST ast) {
         clearBranchTokenTypes();
         clearChildCountCache(parent);
         super.setNextSibling(ast);
         if (ast != null && parent != null) {
             ((DetailAST) ast).setParent(parent);
         }
         if (ast != null) {
             ((DetailAST) ast).previousSibling = this;
         }
     }
 
     /**
      * Add previous sibling.
      * @param ast
      *        DetailAST object.
      */
     public void addPreviousSibling(DetailAST ast) {
         clearBranchTokenTypes();
         clearChildCountCache(parent);
         if (ast != null) {
-            ast.setParent(parent);
+            //parent is set in setNextSibling or parent.setFirstChild
             final DetailAST previousSiblingNode = previousSibling;
 
             if (previousSiblingNode != null) {
                 ast.previousSibling = previousSiblingNode;
                 previousSiblingNode.setNextSibling(ast);
             }
             else if (parent != null) {
                 parent.setFirstChild(ast);
             }
 
             ast.setNextSibling(this);
             previousSibling = ast;
         }
     }
 
     /**
      * Add next sibling.
      * @param ast
      *        DetailAST object.
      */
     public void addNextSibling(DetailAST ast) {
         clearBranchTokenTypes();
         clearChildCountCache(parent);
         if (ast != null) {
-            ast.setParent(parent);
+            //parent is set in setNextSibling
             final DetailAST nextSibling = getNextSibling();
 
             if (nextSibling != null) {
                 ast.setNextSibling(nextSibling);
                 nextSibling.previousSibling = ast;
             }
 
             ast.previousSibling = this;
             setNextSibling(ast);
         }
     }
 
     @Override
     public void addChild(AST ast) {
         clearBranchTokenTypes();
         clearChildCountCache(this);
         if (ast != null) {
             ((DetailAST) ast).setParent(this);
             ((DetailAST) ast).previousSibling = getLastChild();
         }
         super.addChild(ast);
     }
 
     /**
      * Returns the number of child nodes one level below this node. That is is
      * does not recurse down the tree.
      * @return the number of child nodes
      */
     public int getChildCount() {
         // lazy init
         if (childCount == NOT_INITIALIZED) {
             childCount = 0;
             AST child = getFirstChild();
 
             while (child != null) {
                 childCount += 1;
                 child = child.getNextSibling();
             }
         }
         return childCount;
     }
 
     /**
      * Returns the number of direct child tokens that have the specified type.
      * @param type the token type to match
      * @return the number of matching token
      */
     public int getChildCount(int type) {
         int count = 0;
         for (AST ast = getFirstChild(); ast != null; ast = ast.getNextSibling()) {
             if (ast.getType() == type) {
                 count++;
             }
         }
         return count;
     }
 
     /**
      * Set the parent token.
      * @param parent the parent token
      */
     private void setParent(DetailAST parent) {
         clearBranchTokenTypes();
         this.parent = parent;
         final DetailAST nextSibling = getNextSibling();
         if (nextSibling != null) {
             nextSibling.setParent(parent);
             nextSibling.previousSibling = this;
         }
     }
 
     /**
      * Returns the parent token.
      * @return the parent token
      */
     public DetailAST getParent() {
         return parent;
     }
 
     /**
      * Gets line number.
      * @return the line number
      */
     public int getLineNo() {
         int resultNo = -1;
 
         if (lineNo == NOT_INITIALIZED) {
             // an inner AST that has been initialized
             // with initialize(String text)
             resultNo = findLineNo(getFirstChild());
 
-            if (resultNo < 0) {
+            if (resultNo == -1) {
                 resultNo = findLineNo(getNextSibling());
             }
         }
-        if (resultNo < 0) {
+        if (resultNo == -1) {
             resultNo = lineNo;
         }
         return resultNo;
     }
 
     /**
      * Set line number.
      * @param lineNo
      *        line number.
      */
     public void setLineNo(int lineNo) {
         this.lineNo = lineNo;
     }
 
     /**
      * Gets column number.
      * @return the column number
      */
     public int getColumnNo() {
         int resultNo = -1;
 
         if (columnNo == NOT_INITIALIZED) {
             // an inner AST that has been initialized
             // with initialize(String text)
             resultNo = findColumnNo(getFirstChild());
 
-            if (resultNo < 0) {
+            if (resultNo == -1) {
                 resultNo = findColumnNo(getNextSibling());
             }
         }
-        if (resultNo < 0) {
+        if (resultNo == -1) {
             resultNo = columnNo;
         }
         return resultNo;
     }
 
     /**
      * Set column number.
      * @param columnNo
      *        column number.
      */
     public void setColumnNo(int columnNo) {
         this.columnNo = columnNo;
     }
 
     /**
      * Gets the last child node.
      * @return the last child node
      */
     public DetailAST getLastChild() {
         DetailAST ast = getFirstChild();
         while (ast != null && ast.getNextSibling() != null) {
             ast = ast.getNextSibling();
         }
         return ast;
     }
 
     /**
      * Finds column number in the first non-comment node.
      *
      * @param ast DetailAST node.
      * @return Column number if non-comment node exists, -1 otherwise.
      */
     private static int findColumnNo(DetailAST ast) {
         int resultNo = -1;
         DetailAST node = ast;
         while (node != null) {
             // comment node can't be start of any java statement/definition
             if (TokenUtils.isCommentType(node.getType())) {
                 node = node.getNextSibling();
             }
             else {
                 resultNo = node.getColumnNo();
                 break;
             }
         }
         return resultNo;
     }
 
     /**
      * Finds line number in the first non-comment node.
