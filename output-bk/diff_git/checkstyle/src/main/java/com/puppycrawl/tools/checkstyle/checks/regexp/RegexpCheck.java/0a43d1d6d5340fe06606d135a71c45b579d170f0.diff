diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheck.java
index 52f9db23c..ab7f1b07d 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheck.java
@@ -181,101 +181,101 @@ public class RegexpCheck extends AbstractCheck {
     }
 
     @Override
     public int[] getRequiredTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public void beginTree(DetailAST rootAST) {
         matcher = format.matcher(getFileContents().getText().getFullText());
         matchCount = 0;
         errorCount = 0;
         findMatch();
     }
 
     /** Recursive method that finds the matches. */
     private void findMatch() {
 
         final boolean foundMatch = matcher.find();
         if (foundMatch) {
             final FileText text = getFileContents().getText();
             final LineColumn start = text.lineColumn(matcher.start());
             final int startLine = start.getLine();
 
             final boolean ignore = isIgnore(startLine, text, start);
 
             if (!ignore) {
                 matchCount++;
                 if (illegalPattern || checkForDuplicates
                         && matchCount - 1 > duplicateLimit) {
                     errorCount++;
                     logMessage(startLine);
                 }
             }
             if (canContinueValidation(ignore)) {
                 findMatch();
             }
         }
         else if (!illegalPattern && matchCount == 0) {
             logMessage(0);
         }
 
     }
 
     /**
      * Check if we can stop validation.
      * @param ignore flag
      * @return true is we can continue
      */
     private boolean canContinueValidation(boolean ignore) {
-        return errorCount < errorLimit
+        return errorCount <= errorLimit - 1
                 && (ignore || illegalPattern || checkForDuplicates);
     }
 
     /**
      * Detect ignore situation.
      * @param startLine position of line
      * @param text file text
      * @param start line column
      * @return true is that need to be ignored
      */
     private boolean isIgnore(int startLine, FileText text, LineColumn start) {
         final LineColumn end;
         if (matcher.end() == 0) {
             end = text.lineColumn(0);
         }
         else {
             end = text.lineColumn(matcher.end() - 1);
         }
         boolean ignore = false;
         if (ignoreComments) {
             final FileContents theFileContents = getFileContents();
             final int startColumn = start.getColumn();
             final int endLine = end.getLine();
             final int endColumn = end.getColumn();
             ignore = theFileContents.hasIntersectionWithComment(startLine,
                 startColumn, endLine, endColumn);
         }
         return ignore;
     }
 
     /**
      * Displays the right message.
      * @param lineNumber the line number the message relates to.
      */
     private void logMessage(int lineNumber) {
         String msg;
 
         if (message.isEmpty()) {
             msg = format.pattern();
         }
         else {
             msg = message;
         }
 
         if (errorCount >= errorLimit) {
             msg = ERROR_LIMIT_EXCEEDED_MESSAGE + msg;
         }
 
         if (illegalPattern) {
             log(lineNumber, MSG_ILLEGAL_REGEXP, msg);
