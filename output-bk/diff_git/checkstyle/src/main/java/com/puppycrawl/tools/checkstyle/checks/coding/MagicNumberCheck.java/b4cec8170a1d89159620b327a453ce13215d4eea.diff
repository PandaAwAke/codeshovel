diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java
index cf4d20cc9..7809f66ef 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java
@@ -141,111 +141,126 @@ public class MagicNumberCheck extends Check {
     private double[] ignoreNumbers = {-1, 0, 1, 2};
 
     /** Whether to ignore magic numbers in a hash code method. */
     private boolean ignoreHashCodeMethod;
 
     /** Whether to ignore magic numbers in annotation. */
     private boolean ignoreAnnotation;
 
     /** Whether to ignore magic numbers in field declaration. */
     private boolean ignoreFieldDeclaration;
 
     @Override
     public int[] getDefaultTokens() {
         return new int[] {
             TokenTypes.NUM_DOUBLE,
             TokenTypes.NUM_FLOAT,
             TokenTypes.NUM_INT,
             TokenTypes.NUM_LONG,
         };
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.NUM_DOUBLE,
             TokenTypes.NUM_FLOAT,
             TokenTypes.NUM_INT,
             TokenTypes.NUM_LONG,
         };
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         if (ignoreAnnotation && isChildOf(ast, TokenTypes.ANNOTATION)) {
             return;
         }
 
         if (inIgnoreList(ast)
             || ignoreHashCodeMethod && isInHashCodeMethod(ast)) {
             return;
         }
 
         final DetailAST constantDefAST = findContainingConstantDef(ast);
 
         if (constantDefAST == null) {
             if (!(ignoreFieldDeclaration && isFieldDeclaration(ast))) {
                 reportMagicNumber(ast);
             }
         }
         else {
-            DetailAST astNode = ast.getParent();
-            while (astNode != constantDefAST) {
-                final int type = astNode.getType();
-                if (Arrays.binarySearch(ALLOWED_PATH_TOKENTYPES, type) < 0) {
-                    reportMagicNumber(ast);
-                    break;
-                }
-
-                astNode = astNode.getParent();
+            final boolean found = isMagicNumberExists(ast, constantDefAST);
+            if (found) {
+                reportMagicNumber(ast);
+
+            }
+        }
+    }
+
+    /**
+     * is magic number some where at ast tree
+     * @param ast ast token
+     * @param constantDefAST constant ast
+     * @return true if magic number is present
+     */
+    private boolean isMagicNumberExists(DetailAST ast, DetailAST constantDefAST) {
+        boolean found = false;
+        DetailAST astNode = ast.getParent();
+        while (astNode != constantDefAST) {
+            final int type = astNode.getType();
+            if (Arrays.binarySearch(ALLOWED_PATH_TOKENTYPES, type) < 0) {
+                found = true;
+                break;
             }
+            astNode = astNode.getParent();
         }
+        return found;
     }
 
     /**
      * Finds the constant definition that contains aAST.
      * @param ast the AST
      * @return the constant def or null if ast is not
      * contained in a constant definition
      */
     private DetailAST findContainingConstantDef(DetailAST ast) {
         DetailAST varDefAST = ast;
         while (varDefAST != null
                 && varDefAST.getType() != TokenTypes.VARIABLE_DEF
                 && varDefAST.getType() != TokenTypes.ENUM_CONSTANT_DEF) {
             varDefAST = varDefAST.getParent();
         }
 
         // no containing variable definition?
         if (varDefAST == null) {
             return null;
         }
 
         // implicit constant?
         if (ScopeUtils.inInterfaceOrAnnotationBlock(varDefAST)
             || varDefAST.getType() == TokenTypes.ENUM_CONSTANT_DEF) {
             return varDefAST;
         }
 
         // explicit constant
         final DetailAST modifiersAST =
                 varDefAST.findFirstToken(TokenTypes.MODIFIERS);
         if (modifiersAST.branchContains(TokenTypes.FINAL)) {
             return varDefAST;
         }
 
         return null;
     }
 
     /**
      * Reports aAST as a magic number, includes unary operators as needed.
      * @param ast the AST node that contains the number to report
      */
     private void reportMagicNumber(DetailAST ast) {
         String text = ast.getText();
         final DetailAST parent = ast.getParent();
         DetailAST reportAST = ast;
         if (parent.getType() == TokenTypes.UNARY_MINUS) {
             reportAST = parent;
             text = "-" + text;
         }
         else if (parent.getType() == TokenTypes.UNARY_PLUS) {
