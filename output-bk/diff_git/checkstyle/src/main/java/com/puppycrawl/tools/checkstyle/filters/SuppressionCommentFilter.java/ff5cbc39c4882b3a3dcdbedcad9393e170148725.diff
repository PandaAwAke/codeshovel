diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java
index e36329137..dd47e6313 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java
@@ -243,160 +243,159 @@ public class SuppressionCommentFilter
 
         @Override
         public final String toString()
         {
             return "Tag[line=" + getLine() + "; col=" + getColumn()
                 + "; on=" + isOn() + "; text='" + getText() + "']";
         }
     }
 
     /** Turns checkstyle reporting off. */
     private static final String DEFAULT_OFF_FORMAT = "CHECKSTYLE\\:OFF";
 
     /** Turns checkstyle reporting on. */
     private static final String DEFAULT_ON_FORMAT = "CHECKSTYLE\\:ON";
 
     /** Control all checks */
     private static final String DEFAULT_CHECK_FORMAT = ".*";
 
     /** Whether to look in comments of the C type. */
     private boolean checkC = true;
 
     /** Whether to look in comments of the C++ type. */
     private boolean checkCPP = true;
 
     /** Parsed comment regexp that turns checkstyle reporting off. */
     private Pattern offRegexp;
 
     /** Parsed comment regexp that turns checkstyle reporting on. */
     private Pattern onRegexp;
 
     /** The check format to suppress. */
     private String checkFormat;
 
     /** The parsed check regexp. */
     private Pattern checkRegexp;
 
     /** The message format to suppress. */
     private String messageFormat;
 
     //TODO: Investigate performance improvement with array
     /** Tagged comments */
     private final List<Tag> tags = Lists.newArrayList();
 
     /**
      * References the current FileContents for this filter.
      * Since this is a weak reference to the FileContents, the FileContents
      * can be reclaimed as soon as the strong references in TreeWalker
      * and FileContentsHolder are reassigned to the next FileContents,
      * at which time filtering for the current FileContents is finished.
      */
-    private WeakReference<FileContents> fileContentsReference =
-        new WeakReference<FileContents>(null);
+    private WeakReference<FileContents> fileContentsReference = new WeakReference<>(null);
 
     /**
      * Constructs a SuppressionCoontFilter.
      * Initializes comment on, comment off, and check formats
      * to defaults.
      */
     public SuppressionCommentFilter()
     {
         setOnCommentFormat(DEFAULT_ON_FORMAT);
         setOffCommentFormat(DEFAULT_OFF_FORMAT);
         setCheckFormat(DEFAULT_CHECK_FORMAT);
     }
 
     /**
      * Set the format for a comment that turns off reporting.
      * @param format a <code>String</code> value.
      * @throws ConversionException unable to parse format.
      */
     public void setOffCommentFormat(String format)
         throws ConversionException
     {
         try {
             offRegexp = Utils.getPattern(format);
         }
         catch (final PatternSyntaxException e) {
             throw new ConversionException("unable to parse " + format, e);
         }
     }
 
     /**
      * Set the format for a comment that turns on reporting.
      * @param format a <code>String</code> value
      * @throws ConversionException unable to parse format
      */
     public void setOnCommentFormat(String format)
         throws ConversionException
     {
         try {
             onRegexp = Utils.getPattern(format);
         }
         catch (final PatternSyntaxException e) {
             throw new ConversionException("unable to parse " + format, e);
         }
     }
 
     /** @return the FileContents for this filter. */
     public FileContents getFileContents()
     {
         return fileContentsReference.get();
     }
 
     /**
      * Set the FileContents for this filter.
      * @param fileContents the FileContents for this filter.
      */
     public void setFileContents(FileContents fileContents)
     {
-        fileContentsReference = new WeakReference<FileContents>(fileContents);
+        fileContentsReference = new WeakReference<>(fileContents);
     }
 
     /**
      * Set the format for a check.
      * @param format a <code>String</code> value
      * @throws ConversionException unable to parse format
      */
     public void setCheckFormat(String format)
         throws ConversionException
     {
         try {
             checkRegexp = Utils.getPattern(format);
             checkFormat = format;
         }
         catch (final PatternSyntaxException e) {
             throw new ConversionException("unable to parse " + format, e);
         }
     }
 
     /**
      * Set the format for a message.
      * @param format a <code>String</code> value
      * @throws ConversionException unable to parse format
      */
     public void setMessageFormat(String format)
         throws ConversionException
     {
         // check that format parses
         try {
             Utils.getPattern(format);
         }
         catch (final PatternSyntaxException e) {
             throw new ConversionException("unable to parse " + format, e);
         }
         messageFormat = format;
     }
 
 
     /**
      * Set whether to look in C++ comments.
      * @param checkCPP <code>true</code> if C++ comments are checked.
      */
     public void setCheckCPP(boolean checkCPP)
     {
         this.checkCPP = checkCPP;
     }
 
     /**
      * Set whether to look in C comments.
      * @param checkC <code>true</code> if C comments are checked.
