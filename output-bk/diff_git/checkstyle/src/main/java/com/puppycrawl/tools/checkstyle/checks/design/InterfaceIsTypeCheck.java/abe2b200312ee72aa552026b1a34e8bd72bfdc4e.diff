diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/InterfaceIsTypeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/InterfaceIsTypeCheck.java
index 78282d960..1cd55f5d7 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/InterfaceIsTypeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/InterfaceIsTypeCheck.java
@@ -11,77 +11,83 @@
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.design;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 
 /**
  * Implements Bloch, Effective Java, Item 17 -
  * Use Interfaces only to define types.
  *
  * <p>
  * An interface should describe a <em>type</em>, it is therefore
  * inappropriate to define an interface that does not contain any methods
  * but only constants.
  * </p>
  *
  * <p>
  * The check can be configured to also disallow marker interfaces like
  * <code>java.io.Serializable</code>, that do not contain methods or
  * constants at all.
  * </p>
  *
  * @author lkuehne
  */
 public final class InterfaceIsTypeCheck
         extends Check
 {
     /** flag to control whether marker interfaces are allowed. */
     private boolean allowMarkerInterfaces = true;
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.INTERFACE_DEF};
     }
 
     @Override
     public int[] getRequiredTokens()
     {
         return getDefaultTokens();
     }
 
+    @Override
+    public int[] getAcceptableTokens()
+    {
+        return new int[] {TokenTypes.INTERFACE_DEF};
+    }
+
     @Override
     public void visitToken(DetailAST ast)
     {
         final DetailAST objBlock =
                 ast.findFirstToken(TokenTypes.OBJBLOCK);
         final DetailAST methodDef =
                 objBlock.findFirstToken(TokenTypes.METHOD_DEF);
         final DetailAST variableDef =
                 objBlock.findFirstToken(TokenTypes.VARIABLE_DEF);
         final boolean methodRequired =
                 !allowMarkerInterfaces || (variableDef != null);
 
         if ((methodDef == null) && methodRequired) {
             log(ast.getLineNo(), "interface.type");
         }
 
     }
 
     /**
      * Controls whether marker interfaces like Serializable are allowed.
      * @param flag whether to allow marker interfaces or not
      */
     public void setAllowMarkerInterfaces(boolean flag)
     {
         allowMarkerInterfaces = flag;
     }
 }
