diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
index 6ceebd0a7..5f074c577 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
@@ -12,324 +12,324 @@
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.gui;
 
 import java.awt.BorderLayout;
 import java.awt.Component;
 import java.awt.GridLayout;
 import java.awt.event.ActionEvent;
 import java.awt.event.KeyEvent;
 import java.io.File;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.TooManyListenersException;
 
 import javax.swing.AbstractAction;
 import javax.swing.Action;
 import javax.swing.JButton;
 import javax.swing.JFileChooser;
 import javax.swing.JOptionPane;
 import javax.swing.JPanel;
 import javax.swing.JScrollPane;
 import javax.swing.JTextArea;
 import javax.swing.SwingUtilities;
 import javax.swing.filechooser.FileFilter;
 
 import antlr.ANTLRException;
 
 import com.puppycrawl.tools.checkstyle.TreeWalker;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FileContents;
 import com.puppycrawl.tools.checkstyle.api.FileText;
 
 /**
  * Displays information about a parse tree.
  * The user can change the file that is parsed and displayed
  * through a JFileChooser.
  *
  * @author Lars KÃ¼hne
  */
 public class ParseTreeInfoPanel extends JPanel
 {
     /** For Serialisation that will never happen. */
     private static final long serialVersionUID = -4243405131202059043L;
-    private final JTreeTable mTreeTable;
-    private final ParseTreeModel mParseTreeModel;
-    private final JTextArea mJTextArea;
-    private File mLastDirectory = null;
-    private File mCurrentFile = null;
+    private final JTreeTable treeTable;
+    private final ParseTreeModel parseTreeModel;
+    private final JTextArea jTextArea;
+    private File lastDirectory = null;
+    private File currentFile = null;
     private final Action reloadAction;
     private final List<Integer>   lines2position  = new ArrayList<Integer>();
 
     private static class JavaFileFilter extends FileFilter
     {
         @Override
         public boolean accept(File f)
         {
             if (f == null) {
                 return false;
             }
             return f.isDirectory() || f.getName().endsWith(".java");
         }
 
         @Override
         public String getDescription()
         {
             return "Java Source Code";
         }
     }
 
-    public void openAst(DetailAST parseTree, final Component aParent)
+    public void openAst(DetailAST parseTree, final Component parent)
     {
-        mParseTreeModel.setParseTree(parseTree);
+        parseTreeModel.setParseTree(parseTree);
         reloadAction.setEnabled(true);
 
         // clear for each new file
         getLines2position().clear();
         // starts line counting at 1
         getLines2position().add(0);
         // insert the contents of the file to the text area
 
         // clean the text area before inserting the lines of the new file
-        if (mJTextArea.getText().length() != 0) {
-            mJTextArea.replaceRange("", 0, mJTextArea.getText().length());
+        if (jTextArea.getText().length() != 0) {
+            jTextArea.replaceRange("", 0, jTextArea.getText().length());
         }
 
         // move back to the top of the file
-        mJTextArea.moveCaretPosition(0);
+        jTextArea.moveCaretPosition(0);
     }
 
     private class FileSelectionAction extends AbstractAction
     {
         /**
          *
          */
         private static final long serialVersionUID = -1926935338069418119L;
 
         public FileSelectionAction()
         {
             super("Select Java File");
             putValue(Action.MNEMONIC_KEY, KeyEvent.VK_S);
         }
 
         @Override
         public void actionPerformed(ActionEvent e)
         {
-            final JFileChooser fc = new JFileChooser( mLastDirectory );
+            final JFileChooser fc = new JFileChooser( lastDirectory );
             final FileFilter filter = new JavaFileFilter();
             fc.setFileFilter(filter);
             final Component parent =
                 SwingUtilities.getRoot(ParseTreeInfoPanel.this);
             fc.showDialog(parent, "Open");
             final File file = fc.getSelectedFile();
             openFile(file, parent);
 
         }
     }
 
     private class ReloadAction extends AbstractAction
     {
         /**
          *
          */
         private static final long serialVersionUID = -1021880396046355863L;
 
         public ReloadAction()
         {
             super("Reload Java File");
             putValue(Action.MNEMONIC_KEY, KeyEvent.VK_R);
         }
 
         @Override
         public void actionPerformed(ActionEvent e)
         {
             final Component parent =
                 SwingUtilities.getRoot(ParseTreeInfoPanel.this);
-            openFile(mCurrentFile, parent);
+            openFile(currentFile, parent);
         }
     }
 
 
     private class FileDropListener implements FileDrop.Listener
     {
         private final JScrollPane mSp;
 
         @Override
         public void filesDropped(File[] files)
         {
             if ((files != null) && (files.length > 0))
             {
                 final File file = files[0];
                 openFile(file, mSp);
             }
         }
 
         public FileDropListener(JScrollPane aSp)
         {
             mSp = aSp;
         }
     }
 
 
-    public void openFile(File aFile, final Component aParent)
+    public void openFile(File file, final Component parent)
     {
-        if (aFile != null) {
+        if (file != null) {
             try {
-                Main.frame.setTitle("Checkstyle : " + aFile.getName());
-                final FileText text = new FileText(aFile.getAbsoluteFile(),
+                Main.frame.setTitle("Checkstyle : " + file.getName());
+                final FileText text = new FileText(file.getAbsoluteFile(),
                                                    getEncoding());
                 final DetailAST parseTree = parseFile(text);
-                mParseTreeModel.setParseTree(parseTree);
-                mCurrentFile = aFile;
-                mLastDirectory = aFile.getParentFile();
+                parseTreeModel.setParseTree(parseTree);
+                currentFile = file;
+                lastDirectory = file.getParentFile();
                 reloadAction.setEnabled(true);
 
                 final String[] sourceLines = text.toLinesArray();
 
                 // clear for each new file
                  getLines2position().clear();
                  // starts line counting at 1
                  getLines2position().add(0);
                  // insert the contents of the file to the text area
                  for (String element : sourceLines)
                  {
-                   getLines2position().add(mJTextArea.getText().length());
-                   mJTextArea.append(element + "\n");
+                   getLines2position().add(jTextArea.getText().length());
+                   jTextArea.append(element + "\n");
                  }
 
                 //clean the text area before inserting the lines of the new file
-                if (mJTextArea.getText().length() != 0) {
-                    mJTextArea.replaceRange("", 0, mJTextArea.getText()
+                if (jTextArea.getText().length() != 0) {
+                    jTextArea.replaceRange("", 0, jTextArea.getText()
                             .length());
                 }
 
                 // insert the contents of the file to the text area
                 for (final String element : sourceLines) {
-                    mJTextArea.append(element + "\n");
+                    jTextArea.append(element + "\n");
                 }
 
                 // move back to the top of the file
-                mJTextArea.moveCaretPosition(0);
+                jTextArea.moveCaretPosition(0);
             }
             catch (final IOException ex) {
                 showErrorDialog(
-                        aParent,
-                        "Could not open " + aFile + ": " + ex.getMessage());
+                        parent,
+                        "Could not open " + file + ": " + ex.getMessage());
             }
             catch (final ANTLRException ex) {
                 showErrorDialog(
-                        aParent,
-                        "Could not parse " + aFile + ": " + ex.getMessage());
+                        parent,
+                        "Could not parse " + file + ": " + ex.getMessage());
             }
         }
     }
 
     /**
      * Parses a file and returns the parse tree.
-     * @param aFileName the file to parse
+     * @param fileName the file to parse
      * @return the root node of the parse tree
      * @throws IOException if the file cannot be opened
      * @throws ANTLRException if the file is not a Java source
      * @deprecated Use {@link #parseFile(FileText)} instead
      */
     @Deprecated
-    public static DetailAST parseFile(String aFileName)
+    public static DetailAST parseFile(String fileName)
         throws IOException, ANTLRException
     {
-        return parseFile(new FileText(new File(aFileName), getEncoding()));
+        return parseFile(new FileText(new File(fileName), getEncoding()));
     }
 
     /**
      * Parses a file and returns the parse tree.
-     * @param aText the file to parse
+     * @param text the file to parse
      * @return the root node of the parse tree
      * @throws ANTLRException if the file is not a Java source
      */
-    public static DetailAST parseFile(FileText aText)
+    public static DetailAST parseFile(FileText text)
         throws ANTLRException
     {
-        final FileContents contents = new FileContents(aText);
+        final FileContents contents = new FileContents(text);
         return TreeWalker.parse(contents);
     }
 
     /**
      * Returns the configured file encoding.
      * This can be set using the {@code file.encoding} system property.
      * It defaults to UTF-8.
      * @return the configured file encoding
      */
     private static String getEncoding()
     {
         return System.getProperty("file.encoding", "UTF-8");
     }
 
     /**
      * Create a new ParseTreeInfoPanel instance.
      */
     public ParseTreeInfoPanel()
     {
         setLayout(new BorderLayout());
 
         final DetailAST treeRoot = null;
-        mParseTreeModel = new ParseTreeModel(treeRoot);
-        mTreeTable = new JTreeTable(mParseTreeModel);
-        final JScrollPane sp = new JScrollPane(mTreeTable);
+        parseTreeModel = new ParseTreeModel(treeRoot);
+        treeTable = new JTreeTable(parseTreeModel);
+        final JScrollPane sp = new JScrollPane(treeTable);
         this.add(sp, BorderLayout.NORTH);
 
         final JButton fileSelectionButton =
             new JButton(new FileSelectionAction());
 
         reloadAction = new ReloadAction();
         reloadAction.setEnabled(false);
         final JButton reloadButton = new JButton(reloadAction);
 
-        mJTextArea = new JTextArea(20, 15);
-        mJTextArea.setEditable(false);
-        mTreeTable.setEditor(mJTextArea);
-        mTreeTable.setLinePositionMap(lines2position);
+        jTextArea = new JTextArea(20, 15);
+        jTextArea.setEditable(false);
+        treeTable.setEditor(jTextArea);
+        treeTable.setLinePositionMap(lines2position);
 
-        final JScrollPane sp2 = new JScrollPane(mJTextArea);
+        final JScrollPane sp2 = new JScrollPane(jTextArea);
         this.add(sp2, BorderLayout.CENTER);
 
         final JPanel p = new JPanel(new GridLayout(1,2));
         this.add(p, BorderLayout.SOUTH);
         p.add(fileSelectionButton);
         p.add(reloadButton);
 
         try {
             // TODO: creating an object for the side effect of the constructor
             // and then ignoring the object looks strange.
             new FileDrop(sp, new FileDropListener(sp));
         }
         catch (final TooManyListenersException ex)
         {
            showErrorDialog(null, "Cannot initialize Drag and Drop support");
         }
 
     }
 
     private void showErrorDialog(final Component parent, final String msg)
     {
         final Runnable showError = new Runnable()
         {
             @Override
             public void run()
             {
                 JOptionPane.showMessageDialog(parent, msg);
             }
         };
         SwingUtilities.invokeLater(showError);
     }
 
     public List<Integer> getLines2position()
     {
       return lines2position;
     }
 }
 
