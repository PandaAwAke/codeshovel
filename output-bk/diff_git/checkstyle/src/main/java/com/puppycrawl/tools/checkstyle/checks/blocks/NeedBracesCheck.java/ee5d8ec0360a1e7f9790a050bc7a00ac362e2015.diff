diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
index cb81cfd1b..a46bfc735 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
@@ -307,129 +307,105 @@ public class NeedBracesCheck extends Check {
      * @param literalWhile {@link TokenTypes#LITERAL_WHILE while statement}.
      * @return true if current while statement is single-line statement.
      */
     private static boolean isSingleLineWhile(DetailAST literalWhile) {
         boolean result = false;
         if (literalWhile.getParent().getType() == TokenTypes.SLIST
                 && literalWhile.getLastChild().getType() != TokenTypes.SLIST) {
             final DetailAST block = literalWhile.getLastChild().getPreviousSibling();
             result = literalWhile.getLineNo() == block.getLineNo();
         }
         return result;
     }
 
     /**
      * Checks if current do-while statement is single-line statement, e.g.:
      * <p>
      * {@code
      * do this.notify(); while (o != null);
      * }
      * </p>
      * @param literalDo {@link TokenTypes#LITERAL_DO do-while statement}.
      * @return true if current do-while statement is single-line statement.
      */
     private static boolean isSingleLineDoWhile(DetailAST literalDo) {
         boolean result = false;
         if (literalDo.getParent().getType() == TokenTypes.SLIST
                 && literalDo.getFirstChild().getType() != TokenTypes.SLIST) {
             final DetailAST block = literalDo.getFirstChild();
             result = block.getLineNo() == literalDo.getLineNo();
         }
         return result;
     }
 
     /**
      * Checks if current for statement is single-line statement, e.g.:
      * <p>
      * {@code
      * for (int i = 0; ; ) this.notify();
      * }
      * </p>
      * @param literalFor {@link TokenTypes#LITERAL_FOR for statement}.
      * @return true if current for statement is single-line statement.
      */
     private static boolean isSingleLineFor(DetailAST literalFor) {
         boolean result = false;
         if (literalFor.getLastChild().getType() == TokenTypes.EMPTY_STAT) {
             result = true;
         }
         else if (literalFor.getParent().getType() == TokenTypes.SLIST
                 && literalFor.getLastChild().getType() != TokenTypes.SLIST) {
-            final DetailAST block = findExpressionBlockInForLoop(literalFor);
-            if (block == null) {
-                result = literalFor.getLineNo() == literalFor.getLastChild().getLineNo();
-            }
-            else {
-                result = literalFor.getLineNo() == block.getLineNo();
-            }
+            result = literalFor.getLineNo() == literalFor.getLastChild().getLineNo();
         }
         return result;
     }
 
-    /**
-     * Detects and returns expression block in classical and enhanced for loops.
-     *
-     * @param literalFor parent for loop literal
-     * @return expression block
-     */
-    private static DetailAST findExpressionBlockInForLoop(DetailAST literalFor) {
-        final DetailAST forEachClause = literalFor.findFirstToken(TokenTypes.FOR_EACH_CLAUSE);
-        final DetailAST firstToken;
-        if (forEachClause == null) {
-            firstToken = literalFor.findFirstToken(TokenTypes.EXPR);
-        }
-        else {
-            firstToken = forEachClause.findFirstToken(TokenTypes.EXPR);
-        }
-        return firstToken;
-    }
-
     /**
      * Checks if current if statement is single-line statement, e.g.:
      * <p>
      * {@code
      * if (obj.isValid()) return true;
      * }
      * </p>
      * @param literalIf {@link TokenTypes#LITERAL_IF if statement}.
      * @return true if current if statement is single-line statement.
      */
     private static boolean isSingleLineIf(DetailAST literalIf) {
         boolean result = false;
         final DetailAST ifCondition = literalIf.findFirstToken(TokenTypes.EXPR);
         if (literalIf.getParent().getType() == TokenTypes.SLIST) {
             final DetailAST literalIfLastChild = literalIf.getLastChild();
             final DetailAST block;
             if (literalIfLastChild.getType() == TokenTypes.LITERAL_ELSE) {
                 block = literalIfLastChild.getPreviousSibling();
             }
             else {
                 block = literalIfLastChild;
             }
             result = ifCondition.getLineNo() == block.getLineNo();
         }
         return result;
     }
 
     /**
      * Checks if current lambda statement is single-line statement, e.g.:
      * <p>
      * {@code
      * Runnable r = () -> System.out.println("Hello, world!");
      * }
      * </p>
      * @param lambda {@link TokenTypes#LAMBDA lambda statement}.
      * @return true if current lambda statement is single-line statement.
      */
     private static boolean isSingleLineLambda(DetailAST lambda) {
         boolean result = false;
         final DetailAST block = lambda.getLastChild();
         if (block.getType() != TokenTypes.SLIST) {
             result = lambda.getLineNo() == block.getLineNo();
         }
         return result;
     }
 
     /**
      * Checks if current case statement is single-line statement, e.g.:
      * <p>
      * {@code
