diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IfHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IfHandler.java
index c320d5c27..1df6aead0 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IfHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IfHandler.java
@@ -54,52 +54,61 @@ public class IfHandler extends BlockParentHandler
     @Override
     protected IndentLevel getLevelImpl()
     {
         if (isIfAfterElse()) {
             return getParent().getLevel();
         }
         return super.getLevelImpl();
     }
 
     /**
      * Determines if this 'if' statement is part of an 'else' clause
      * and on the same line.
      *
      * @return true if this 'if' is part of an 'else', false otherwise
      */
     private boolean isIfAfterElse()
     {
         // check if there is an 'else' and an 'if' on the same line
         final DetailAST parent = getMainAst().getParent();
         return (parent.getType() == TokenTypes.LITERAL_ELSE)
             && (parent.getLineNo() == getMainAst().getLineNo());
     }
 
     @Override
     protected void checkToplevelToken()
     {
         if (isIfAfterElse()) {
             return;
         }
 
         super.checkToplevelToken();
     }
 
     /**
      * Check the indentation of the conditional expression.
      */
     private void checkCondExpr()
     {
         final DetailAST condAst = getMainAst().findFirstToken(TokenTypes.LPAREN)
             .getNextSibling();
         final IndentLevel expected =
             new IndentLevel(getLevel(), getBasicOffset());
         checkExpressionSubtree(condAst, expected, false, false);
     }
 
     @Override
     public void checkIndentation()
     {
         super.checkIndentation();
         checkCondExpr();
+        final LineWrappingHandler lineWrap =
+            new LineWrappingHandler(getIndentCheck(), getMainAst()) {
+                @Override
+                public DetailAST findLastNode(DetailAST aFirstNode)
+                {
+                    return aFirstNode.findFirstToken(TokenTypes.RPAREN);
+                }
+            };
+        lineWrap.checkIndentation();
     }
 }
