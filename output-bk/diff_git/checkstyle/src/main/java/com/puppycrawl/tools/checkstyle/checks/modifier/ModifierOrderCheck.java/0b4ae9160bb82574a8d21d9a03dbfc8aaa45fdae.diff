diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java
index 3ba7707d1..173d107b0 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java
@@ -95,91 +95,102 @@ public class ModifierOrderCheck
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.MODIFIERS};
     }
 
     @Override
     public int[] getRequiredTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final List<DetailAST> mods = Lists.newArrayList();
         DetailAST modifier = ast.getFirstChild();
         while (modifier != null) {
             mods.add(modifier);
             modifier = modifier.getNextSibling();
         }
 
         if (!mods.isEmpty()) {
             final DetailAST error = checkOrderSuggestedByJLS(mods);
             if (error != null) {
                 if (error.getType() == TokenTypes.ANNOTATION) {
                     log(error.getLineNo(), error.getColumnNo(),
                             MSG_ANNOTATION_ORDER,
                              error.getFirstChild().getText()
                              + error.getFirstChild().getNextSibling()
                                 .getText());
                 }
                 else {
                     log(error.getLineNo(), error.getColumnNo(),
                             MSG_MODIFIER_ORDER, error.getText());
                 }
             }
         }
     }
 
     /**
      * Checks if the modifiers were added in the order suggested
      * in the Java language specification.
      *
      * @param modifiers list of modifier AST tokens
      * @return null if the order is correct, otherwise returns the offending
      *     modifier AST.
      */
     static DetailAST checkOrderSuggestedByJLS(List<DetailAST> modifiers) {
         final Iterator<DetailAST> it = modifiers.iterator();
 
         //Speed past all initial annotations
-        DetailAST modifier;
-        do {
-            modifier = it.next();
-        }
-        while (it.hasNext() && modifier.getType() == TokenTypes.ANNOTATION);
+        DetailAST modifier = skipAnnotations(it);
 
         DetailAST offendingModifier = null;
 
         //All modifiers are annotations, no problem
         if (modifier.getType() != TokenTypes.ANNOTATION) {
             int i = 0;
 
-            while (modifier != null) {
+            while (modifier != null
+                    && offendingModifier == null) {
+
                 if (modifier.getType() == TokenTypes.ANNOTATION) {
                     //Annotation not at start of modifiers, bad
                     offendingModifier = modifier;
                     break;
                 }
 
                 while (i < JLS_ORDER.length
                        && !JLS_ORDER[i].equals(modifier.getText())) {
                     i++;
                 }
 
                 if (i == JLS_ORDER.length) {
                     //Current modifier is out of JLS order
                     offendingModifier = modifier;
-                    break;
                 }
                 else if (it.hasNext()) {
                     modifier = it.next();
                 }
                 else {
                     //Reached end of modifiers without problem
                     modifier = null;
                 }
             }
         }
         return offendingModifier;
     }
+
+    /**
+     * Skip all annotations in modifier block.
+     * @param modifierIterator iterator for collection of modifiers
+     * @return modifier next to last annotation
+     */
+    private static DetailAST skipAnnotations(Iterator<DetailAST> modifierIterator) {
+        DetailAST modifier;
+        do {
+            modifier = modifierIterator.next();
+        }
+        while (modifierIterator.hasNext() && modifier.getType() == TokenTypes.ANNOTATION);
+        return modifier;
+    }
 }
