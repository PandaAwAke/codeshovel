diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePModel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePModel.java
index cc181c5d2..feb09100e 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePModel.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePModel.java
@@ -17,101 +17,101 @@
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.gui;
 
 import antlr.ASTFactory;
 import antlr.collections.AST;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.utils.TokenUtils;
 
 /**
  * The model that backs the parse tree in the GUI.
  *
  * @author Lars KÃ¼hne
  */
 public class ParseTreeTablePModel {
 
     /** Column names. */
     private static final String[] COLUMN_NAMES = {
         "Tree", "Type", "Line", "Column", "Text",
     };
 
     /**
      * The root node of the tree table model.
      */
     private final Object root;
 
     /**
      * @param parseTree DetailAST parse tree.
      */
     public ParseTreeTablePModel(DetailAST parseTree) {
         root = createArtificialTreeRoot();
         setParseTree(parseTree);
     }
 
     /**
      * Creates artificial tree root.
      * @return artificial tree root.
      */
     private static DetailAST createArtificialTreeRoot() {
         final ASTFactory factory = new ASTFactory();
         factory.setASTNodeClass(DetailAST.class.getName());
         return (DetailAST) factory.create(TokenTypes.EOF, "ROOT");
     }
 
     /**
      * Set parse tree.
      * @param parseTree DetailAST parse tree.
      */
-    final void setParseTree(DetailAST parseTree) {
+    protected final void setParseTree(DetailAST parseTree) {
         ((AST) root).setFirstChild(parseTree);
     }
 
     /**
      * @return the number of available columns.
      */
     public int getColumnCount() {
         return COLUMN_NAMES.length;
     }
 
     /**
      * @param column the column number
      * @return the name for column number {@code column}.
      */
     public String getColumnName(int column) {
         return COLUMN_NAMES[column];
     }
 
     /**
      * @param column the column number
      * @return the type for column number {@code column}.
      */
     public Class<?> getColumnClass(int column) {
         final Class<?> columnClass;
 
         switch (column) {
             case 0:
                 columnClass = ParseTreeTableModel.class;
                 break;
             case 1:
                 columnClass = String.class;
                 break;
             case 2:
                 columnClass = Integer.class;
                 break;
             case 3:
                 columnClass = Integer.class;
                 break;
             case 4:
                 columnClass = String.class;
                 break;
             default:
                 columnClass = Object.class;
         }
         return columnClass;
     }
 
     /**
      * @param node the node
      * @param column the column number
