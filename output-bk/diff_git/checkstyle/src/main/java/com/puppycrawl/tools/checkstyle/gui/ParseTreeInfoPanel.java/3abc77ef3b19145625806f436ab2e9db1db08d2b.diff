diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
index 7eed2362b..3f536fec6 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
@@ -116,101 +116,101 @@ public class ParseTreeInfoPanel extends JPanel {
             final JFileChooser fc = new JFileChooser(lastDirectory);
             final FileFilter filter = new JavaFileFilter();
             fc.setFileFilter(filter);
             final Component parent =
                 SwingUtilities.getRoot(ParseTreeInfoPanel.this);
             fc.showDialog(parent, "Open");
             final File file = fc.getSelectedFile();
             openFile(file, parent);
 
         }
     }
 
     private class ReloadAction extends AbstractAction {
         /**
          *
          */
         private static final long serialVersionUID = -1021880396046355863L;
 
         public ReloadAction() {
             super("Reload Java File");
             putValue(Action.MNEMONIC_KEY, KeyEvent.VK_R);
         }
 
         @Override
         public void actionPerformed(ActionEvent e) {
             final Component parent =
                 SwingUtilities.getRoot(ParseTreeInfoPanel.this);
             openFile(currentFile, parent);
         }
     }
 
     private class FileDropListener implements FileDrop.Listener {
         private final JScrollPane mSp;
 
         @Override
         public void filesDropped(File... files) {
             if (files != null && files.length > 0) {
                 final File file = files[0];
                 openFile(file, mSp);
             }
         }
 
         public FileDropListener(JScrollPane aSp) {
             mSp = aSp;
         }
     }
 
     public void openFile(File file, final Component parent) {
         if (file != null) {
             try {
-                Main.frame.setTitle("Checkstyle : " + file.getName());
+                Main.getFrame().setTitle("Checkstyle : " + file.getName());
                 final FileText text = new FileText(file.getAbsoluteFile(),
                                                    getEncoding());
                 final DetailAST parseTree = parseFile(text);
                 parseTreeModel.setParseTree(parseTree);
                 currentFile = file;
                 lastDirectory = file.getParentFile();
                 reloadAction.setEnabled(true);
 
                 final String[] sourceLines = text.toLinesArray();
 
                 // clear for each new file
                  getLines2position().clear();
                  // starts line counting at 1
                  getLines2position().add(0);
                  // insert the contents of the file to the text area
                  for (String element : sourceLines) {
                    getLines2position().add(jTextArea.getText().length());
                    jTextArea.append(element + "\n");
                  }
 
                 //clean the text area before inserting the lines of the new file
                 if (!jTextArea.getText().isEmpty()) {
                     jTextArea.replaceRange("", 0, jTextArea.getText()
                             .length());
                 }
 
                 // insert the contents of the file to the text area
                 for (final String element : sourceLines) {
                     jTextArea.append(element + "\n");
                 }
 
                 // move back to the top of the file
                 jTextArea.moveCaretPosition(0);
             }
             catch (final IOException | ANTLRException ex) {
                 showErrorDialog(
                         parent,
                         "Could not parse" + file + ": " + ex.getMessage());
             }
         }
     }
 
     /**
      * Parses a file and returns the parse tree.
      * @param fileName the file to parse
      * @return the root node of the parse tree
      * @throws IOException if the file cannot be opened
      * @throws ANTLRException if the file is not a Java source
      * @deprecated Use {@link #parseFile(FileText)} instead
      */
@@ -251,74 +251,74 @@ public class ParseTreeInfoPanel extends JPanel {
         parseTreeModel = new ParseTreeModel(null);
         final JTreeTable treeTable = new JTreeTable(parseTreeModel);
         final JScrollPane sp = new JScrollPane(treeTable);
         this.add(sp, BorderLayout.NORTH);
 
         final JButton fileSelectionButton =
             new JButton(new FileSelectionAction());
 
         reloadAction = new ReloadAction();
         reloadAction.setEnabled(false);
         final JButton reloadButton = new JButton(reloadAction);
 
         jTextArea = new JTextArea(20, 15);
         jTextArea.setEditable(false);
         treeTable.setEditor(jTextArea);
         treeTable.setLinePositionMap(lines2position);
 
         final JScrollPane sp2 = new JScrollPane(jTextArea);
         this.add(sp2, BorderLayout.CENTER);
 
         final JPanel p = new JPanel(new GridLayout(1,2));
         this.add(p, BorderLayout.SOUTH);
         p.add(fileSelectionButton);
         p.add(reloadButton);
 
         try {
             new FileDrop(sp, new FileDropListener(sp));
         }
         catch (final TooManyListenersException ignored) {
            showErrorDialog(null, "Cannot initialize Drag and Drop support");
         }
 
     }
 
     private static void showErrorDialog(final Component parent, final String msg) {
         final Runnable showError = new FrameShower(parent, msg);
         SwingUtilities.invokeLater(showError);
     }
 
     public List<Integer> getLines2position() {
       return lines2position;
     }
 
     /**
      * http://findbugs.sourceforge.net/bugDescriptions.html#SW_SWING_METHODS_INVOKED_IN_SWING_THREAD
      */
     private static class FrameShower implements Runnable {
         /**
          * frame
          */
-        final Component parent;
+        private final Component parent;
 
         /**
          * frame
          */
-        final String msg;
+        private final String msg;
 
         /**
          * contstructor
          */
         public FrameShower(Component parent, final String msg) {
             this.parent = parent;
             this.msg = msg;
         }
 
         /**
          * display a frame
          */
         @Override
         public void run() {
             JOptionPane.showMessageDialog(parent, msg);
         }
     }
 }
