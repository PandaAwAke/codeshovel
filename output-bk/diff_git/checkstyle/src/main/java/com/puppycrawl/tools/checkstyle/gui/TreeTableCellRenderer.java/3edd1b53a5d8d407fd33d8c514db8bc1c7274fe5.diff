diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableCellRenderer.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableCellRenderer.java
index 27b142527..fe462ec27 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableCellRenderer.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableCellRenderer.java
@@ -21,107 +21,107 @@ package com.puppycrawl.tools.checkstyle.gui;
 
 import java.awt.Component;
 import java.awt.Graphics;
 
 import javax.swing.JTable;
 import javax.swing.JTree;
 import javax.swing.UIManager;
 import javax.swing.table.TableCellRenderer;
 import javax.swing.tree.DefaultTreeCellRenderer;
 import javax.swing.tree.TreeCellRenderer;
 import javax.swing.tree.TreeModel;
 
 /**
  * A TreeCellRenderer that displays a JTree.
  * @author Lars KÃ¼hne
  */
 class TreeTableCellRenderer extends JTree implements
         TableCellRenderer {
     /**
      * Serial ID.
      */
     private static final long serialVersionUID = 4324031590789321581L;
 
     /** Tree table to render. */
     private final JTreeTable treeTable;
 
     /** Last table/tree row asked to renderer. */
     private int visibleRow;
 
     /**
      * Creates a new instance.
      * @param treeTable tree table to render.
      * @param model Tree model.
      */
     TreeTableCellRenderer(JTreeTable treeTable, TreeModel model) {
         super(model);
         this.treeTable = treeTable;
     }
 
     /**
      * UpdateUI is overridden to set the colors of the Tree's renderer
      * to match that of the table.
      */
     @Override
     public void updateUI() {
         super.updateUI();
         // Make the tree's cell renderer use the table's cell selection
         // colors.
         final TreeCellRenderer tcr = getCellRenderer();
         if (tcr instanceof DefaultTreeCellRenderer) {
-            final DefaultTreeCellRenderer dtcr = (DefaultTreeCellRenderer) tcr;
+            final DefaultTreeCellRenderer renderer = (DefaultTreeCellRenderer) tcr;
             // For 1.1 uncomment this, 1.2 has a bug that will cause an
             // exception to be thrown if the border selection color is
             // null.
-            // dtcr.setBorderSelectionColor(null);
-            dtcr.setTextSelectionColor(UIManager.getColor("Table.selectionForeground"));
-            dtcr.setBackgroundSelectionColor(UIManager.getColor("Table.selectionBackground"));
+            // renderer.setBorderSelectionColor(null);
+            renderer.setTextSelectionColor(UIManager.getColor("Table.selectionForeground"));
+            renderer.setBackgroundSelectionColor(UIManager.getColor("Table.selectionBackground"));
         }
     }
 
     /**
      * Sets the row height of the tree, and forwards the row height to
      * the table.
      */
     @Override
     public void setRowHeight(int newRowHeight) {
         if (newRowHeight > 0) {
             super.setRowHeight(newRowHeight);
             if (treeTable != null
                     && treeTable.getRowHeight() != newRowHeight) {
                 treeTable.setRowHeight(getRowHeight());
             }
         }
     }
 
     /**
      * This is overridden to set the height to match that of the JTable.
      */
     @Override
     public void setBounds(int x, int y, int w, int h) {
         super.setBounds(x, 0, w, treeTable.getHeight());
     }
 
     /**
      * Sublcassed to translate the graphics such that the last visible
      * row will be drawn at 0,0.
      */
     @Override
     public void paint(Graphics g) {
         g.translate(0, -visibleRow * getRowHeight());
         super.paint(g);
     }
 
     /**
      * TreeCellRenderer method. Overridden to update the visible row.
      * @see TableCellRenderer
      */
     @Override
     public Component getTableCellRendererComponent(JTable table,
             Object value,
             boolean isSelected,
             boolean hasFocus,
             int row, int column) {
         if (isSelected) {
             setBackground(table.getSelectionBackground());
         }
         else {
