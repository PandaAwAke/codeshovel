diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OverloadMethodsDeclarationOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OverloadMethodsDeclarationOrderCheck.java
index bc36e4a2c..b2409f082 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OverloadMethodsDeclarationOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OverloadMethodsDeclarationOrderCheck.java
@@ -54,65 +54,65 @@ public class OverloadMethodsDeclarationOrderCheck extends Check {
      * file.
      */
     public static final String MSG_KEY = "overload.methods.declaration";
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.OBJBLOCK,
         };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final int parentType = ast.getParent().getType();
         if (parentType == TokenTypes.CLASS_DEF
                 || parentType == TokenTypes.ENUM_DEF
                 || parentType == TokenTypes.INTERFACE_DEF
                 || parentType == TokenTypes.LITERAL_NEW) {
             checkOverloadMethodsGrouping(ast);
         }
     }
 
     /**
      * Checks that if overload methods are grouped together they should not be
      * separated from each other.
      * @param objectBlock
      *        is a class, interface or enum object block.
      */
     private void checkOverloadMethodsGrouping(DetailAST objectBlock) {
         final int allowedDistance = 1;
         DetailAST currentToken = objectBlock.getFirstChild();
         final Map<String, Integer> methodIndexMap = new HashMap<>();
         final Map<String, Integer> methodLineNumberMap = new HashMap<>();
         int currentIndex = 0;
         while (currentToken != null) {
             if (currentToken.getType() == TokenTypes.METHOD_DEF) {
                 currentIndex++;
                 final String methodName =
                         currentToken.findFirstToken(TokenTypes.IDENT).getText();
                 if (methodIndexMap.containsKey(methodName)) {
-                    final int priviousIndex = methodIndexMap.get(methodName);
-                    if (currentIndex - priviousIndex > allowedDistance) {
+                    final int previousIndex = methodIndexMap.get(methodName);
+                    if (currentIndex - previousIndex > allowedDistance) {
                         final int previousLineWithOverloadMethod =
                                 methodLineNumberMap.get(methodName);
                         log(currentToken.getLineNo(), MSG_KEY,
                                 previousLineWithOverloadMethod);
                     }
                 }
                 methodIndexMap.put(methodName, currentIndex);
                 methodLineNumberMap.put(methodName, currentToken.getLineNo());
             }
             currentToken = currentToken.getNextSibling();
         }
     }
 }
