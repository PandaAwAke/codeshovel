diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/FullIdent.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/FullIdent.java
index 8c01cf00e..b2fdfcbc3 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/FullIdent.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/FullIdent.java
@@ -46,101 +46,100 @@ public final class FullIdent
     private int lineNo;
     /** the column number **/
     private int colNo;
 
     /** hide default constructor */
     private FullIdent()
     {
     }
 
     /** @return the text **/
     public String getText()
     {
         return StringUtils.join(elements, "");
     }
 
     /** @return the line number **/
     public int getLineNo()
     {
         return lineNo;
     }
 
     /** @return the column number **/
     public int getColumnNo()
     {
         return colNo;
     }
 
     /**
      * Append the specified text.
      * @param text the text to append
      */
     private void append(String text)
     {
         elements.add(text);
     }
 
     /**
      * Append the specified token and also recalibrate the first line and
      * column.
      * @param ast the token to append
      */
     private void append(DetailAST ast)
     {
         elements.add(ast.getText());
         if (lineNo == 0) {
             lineNo = ast.getLineNo();
         }
         else if (ast.getLineNo() > 0) {
             lineNo = Math.min(lineNo, ast.getLineNo());
         }
-        // TODO: make a function
         if (colNo == 0) {
             colNo = ast.getColumnNo();
         }
         else if (ast.getColumnNo() > 0) {
             colNo = Math.min(colNo, ast.getColumnNo());
         }
     }
 
     /**
      * Creates a new FullIdent starting from the specified node.
      * @param ast the node to start from
      * @return a <code>FullIdent</code> value
      */
     public static FullIdent createFullIdent(DetailAST ast)
     {
         final FullIdent fi = new FullIdent();
         extractFullIdent(fi, ast);
         return fi;
     }
 
     /**
      * Creates a new FullIdent starting from the child of the specified node.
      * @param ast the parent node from where to start from
      * @return a <code>FullIdent</code> value
      */
     public static FullIdent createFullIdentBelow(DetailAST ast)
     {
         return createFullIdent(ast.getFirstChild());
     }
 
     /**
      * Recursively extract a FullIdent.
      *
      * @param full the FullIdent to add to
      * @param ast the node to recurse from
      */
     private static void extractFullIdent(FullIdent full, DetailAST ast)
     {
         if (ast == null) {
             return;
         }
 
         if (ast.getType() == TokenTypes.DOT) {
             extractFullIdent(full, ast.getFirstChild());
             full.append(".");
             extractFullIdent(
                 full, ast.getFirstChild().getNextSibling());
         }
         else {
             full.append(ast);
