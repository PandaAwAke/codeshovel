diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTableModel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTableModel.java
index a0597270d..141ad4a3c 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTableModel.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTableModel.java
@@ -57,133 +57,133 @@ public class ParseTreeTableModel implements TreeModel {
     /**
      * @param parseTree DetailAST parse tree.
      */
     public ParseTreeTableModel(DetailAST parseTree) {
         root = createArtificialTreeRoot();
         setParseTree(parseTree);
     }
 
     /**
      * Creates artificial tree root.
      * @return Artificial tree root.
      */
     private static DetailAST createArtificialTreeRoot() {
         final ASTFactory factory = new ASTFactory();
         factory.setASTNodeClass(DetailAST.class.getName());
         return (DetailAST) factory.create(TokenTypes.EOF, "ROOT");
     }
 
     /**
      * Sets parse tree.
      * @param parseTree DetailAST parse tree.
      */
     final void setParseTree(DetailAST parseTree) {
         ((AST) root).setFirstChild(parseTree);
         final Object[] path = {root};
         // no need to setup remaining info, as the call results in a
         // table structure changed event anyway - we just pass nulls
         fireTreeStructureChanged(this, path, null, (Object[]) null);
     }
 
     /**
      * @return the number of available column.
      */
     public int getColumnCount() {
         return COLUMN_NAMES.length;
     }
 
     /**
      * @param column the column number
      * @return the name for column number {@code column}.
      */
     public String getColumnName(int column) {
         return COLUMN_NAMES[column];
     }
 
     /**
      * @param column the column number
      * @return the type for column number {@code column}.
      */
     public Class<?> getColumnClass(int column) {
-        Class<?> columnClass;
+        final Class<?> columnClass;
 
         switch (column) {
             case 0:
                 columnClass = ParseTreeTableModel.class;
                 break;
             case 1:
                 columnClass = String.class;
                 break;
             case 2:
                 columnClass = Integer.class;
                 break;
             case 3:
                 columnClass = Integer.class;
                 break;
             case 4:
                 columnClass = String.class;
                 break;
             default:
                 columnClass = Object.class;
         }
         return columnClass;
     }
 
     /**
      * @param node the node
      * @param column the column number
      * @return the value to be displayed for node {@code node},
      *     at column number {@code column}.
      */
     public Object getValueAt(Object node, int column) {
         final DetailAST ast = (DetailAST) node;
-        Object value;
+        final Object value;
 
         switch (column) {
             case 1:
                 value = TokenUtils.getTokenName(ast.getType());
                 break;
             case 2:
                 value = ast.getLineNo();
                 break;
             case 3:
                 value = ast.getColumnNo();
                 break;
             case 4:
                 value = ast.getText();
                 break;
             default:
                 value = null;
         }
         return value;
     }
 
     @Override
     public Object getChild(Object parent, int index) {
         final DetailAST ast = (DetailAST) parent;
         int currentIndex = 0;
         AST child = ast.getFirstChild();
         while (currentIndex < index) {
             child = child.getNextSibling();
             currentIndex++;
         }
         return child;
     }
 
     @Override
     public int getChildCount(Object parent) {
         final DetailAST ast = (DetailAST) parent;
         return ast.getChildCount();
     }
 
     @Override
     public void valueForPathChanged(TreePath path, Object newValue) {
         //No Code, as tree is read-only
     }
 
     @Override
     public Object getRoot() {
         return root;
     }
 
     @Override
     public boolean isLeaf(Object node) {
