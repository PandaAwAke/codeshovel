diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SingleSpaceSeparatorCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SingleSpaceSeparatorCheck.java
index ebafad359..18564a64b 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SingleSpaceSeparatorCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SingleSpaceSeparatorCheck.java
@@ -59,111 +59,111 @@ import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
  * </p>
  *
  * <ul>
  * <li>validateComments - Boolean when set to {@code true}, whitespaces
  * surrounding comments will be ignored. Default value is {@code false}.</li>
  * </ul>
  *
  * <p>
  * To configure the check:
  * </p>
  *
  * <pre>
  * &lt;module name=&quot;SingleSpaceSeparator&quot;/&gt;
  * </pre>
  *
  * <p>
  * To configure the check so that it validates comments:
  * </p>
  *
  * <pre>
  * &lt;module name=&quot;SingleSpaceSeparator&quot;&gt;
  * &lt;property name=&quot;validateComments&quot; value=&quot;true&quot;/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * @author Robert Whitebit
  * @author Richard Veach
  */
 @StatelessCheck
 public class SingleSpaceSeparatorCheck extends AbstractCheck {
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "single.space.separator";
 
     /** Indicates if whitespaces surrounding comments will be ignored. */
     private boolean validateComments;
 
     /**
      * Sets whether or not to validate surrounding whitespaces at comments.
      *
      * @param validateComments {@code true} to validate surrounding whitespaces at comments.
      */
     public void setValidateComments(boolean validateComments) {
         this.validateComments = validateComments;
     }
 
     @Override
     public int[] getDefaultTokens() {
-        return CommonUtils.EMPTY_INT_ARRAY;
+        return getRequiredTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
-        return getDefaultTokens();
+        return getRequiredTokens();
     }
 
     @Override
     public int[] getRequiredTokens() {
-        return getDefaultTokens();
+        return CommonUtils.EMPTY_INT_ARRAY;
     }
 
     // -@cs[SimpleAccessorNameNotation] Overrides method from base class.
     // Issue: https://github.com/sevntu-checkstyle/sevntu.checkstyle/issues/166
     @Override
     public boolean isCommentNodesRequired() {
         return validateComments;
     }
 
     @Override
     public void beginTree(DetailAST rootAST) {
         visitEachToken(rootAST);
     }
 
     /**
      * Examines every sibling and child of {@code node} for violations.
      *
      * @param node The node to start examining.
      */
     private void visitEachToken(DetailAST node) {
         DetailAST sibling = node;
 
         while (sibling != null) {
             final int columnNo = sibling.getColumnNo() - 1;
 
             // in such expression: "j  =123", placed at the start of the string index of the second
             // space character will be: 2 = 0(j) + 1(whitespace) + 1(whitespace). It is a minimal
             // possible index for the second whitespace between non-whitespace characters.
             final int minSecondWhitespaceColumnNo = 2;
 
             if (columnNo >= minSecondWhitespaceColumnNo
                     && !isTextSeparatedCorrectlyFromPrevious(getLine(sibling.getLineNo() - 1),
                             columnNo)) {
                 log(sibling.getLineNo(), columnNo, MSG_KEY);
             }
             if (sibling.getChildCount() >= 1) {
                 visitEachToken(sibling.getFirstChild());
             }
 
             sibling = sibling.getNextSibling();
         }
     }
 
     /**
      * Checks if characters in {@code line} at and around {@code columnNo} has
      * the correct number of spaces. to return {@code true} the following
      * conditions must be met:<br />
      * - the character at {@code columnNo} is the first in the line.<br />
      * - the character at {@code columnNo} is not separated by whitespaces from
      * the previous non-whitespace character. <br />
