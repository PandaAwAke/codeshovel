diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java b/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java
index 601c74df4..0f64479c6 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java
@@ -168,102 +168,101 @@ public final class Utils {
         }
         return len;
     }
 
     /**
      * Returns the length of a String prefix with tabs expanded.
      * Each tab is counted as the number of characters is takes to
      * jump to the next tab stop.
      * @param string the input String
      * @param toIdx index in string (exclusive) where the calculation stops
      * @param tabWidth the distance between tab stop position.
      * @return the length of string.substring(0, toIdx) with tabs expanded.
      */
     public static int lengthExpandedTabs(String string,
                                          int toIdx,
                                          int tabWidth) {
         int len = 0;
         for (int idx = 0; idx < toIdx; idx++) {
             if (string.charAt(idx) == '\t') {
                 len = (len / tabWidth + 1) * tabWidth;
             }
             else {
                 len++;
             }
         }
         return len;
     }
 
     /**
      * Validates whether passed string is a valid pattern or not.
      * @param pattern
      *        string to validate
      * @return true if the pattern is valid false otherwise
      */
     public static boolean isPatternValid(String pattern) {
         try {
             Pattern.compile(pattern);
         }
         catch (final PatternSyntaxException e) {
             return false;
         }
         return true;
     }
 
     /**
      * Helper method to create a regular expression.
      * @param pattern the pattern to match
      * @return a created regexp object
      * @throws ConversionException if unable to create Pattern object.
      **/
-    public static Pattern createPattern(String pattern)
-        throws ConversionException {
+    public static Pattern createPattern(String pattern) {
         try {
             return Pattern.compile(pattern);
         }
         catch (final PatternSyntaxException e) {
             throw new ConversionException(
                 "Failed to initialise regular expression " + pattern, e);
         }
     }
 
     /**
      * @param type the fully qualified name. Cannot be null
      * @return the base class name from a fully qualified name
      */
     public static String baseClassname(String type) {
         final int i = type.lastIndexOf('.');
         return i == -1 ? type : type.substring(i + 1);
     }
 
     /**
      * Constructs a normalized relative path between base directory and a given path.
      * @param baseDirectory the base path to which given path is relativized
      * @param path the path to relativize against base directory
      * @return the relative normalized path between base directory and path or path if base
      * directory is null
      */
     public static String relativizeAndNormalizePath(final String baseDirectory, final String path) {
         if (baseDirectory == null) {
             return path;
         }
         final Path pathAbsolute = Paths.get(path).normalize();
         final Path pathBase = Paths.get(baseDirectory).normalize();
         return pathBase.relativize(pathAbsolute).toString();
     }
 
     /**
      * Tests if this string starts with the specified prefix.
      * <p/>
      * It is faster version of {@link String#startsWith(String)} optimized for one-character
      * prefixes at the expense of some readability. Suggested by SimplifyStartsWith PMD rule:
      * http://pmd.sourceforge.net/pmd-5.3.1/pmd-java/rules/java/optimizations.html#SimplifyStartsWith
      *
      * @param string the <code>String</code> to check
      * @param prefix the prefix to find
      * @return <code>true</code> if the <code>char</code> is a prefix of the given
      * <code>String</code>; <code>false</code> otherwise.
      */
     public static boolean startsWithChar(String string, char prefix) {
         return string.length() > 0 && string.charAt(0) == prefix;
     }
 
