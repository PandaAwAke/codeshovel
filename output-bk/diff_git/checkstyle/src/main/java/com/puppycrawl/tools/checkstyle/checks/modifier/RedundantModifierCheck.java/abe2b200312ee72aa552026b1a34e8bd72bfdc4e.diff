diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
index 34363a039..4c64e2a62 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
@@ -4,100 +4,111 @@
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.modifier;
 
 import java.util.ArrayList;
 import java.util.List;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * Checks for redundant modifiers in interface and annotation definitions.
  * Also checks for redundant final modifiers on methods of final classes.
  *
  * @author lkuehne
  */
 public class RedundantModifierCheck
     extends Check
 {
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.METHOD_DEF,
             TokenTypes.VARIABLE_DEF,
             TokenTypes.ANNOTATION_FIELD_DEF,
             TokenTypes.INTERFACE_DEF,
         };
     }
 
     @Override
     public int[] getRequiredTokens()
     {
         return new int[] {};
     }
 
+    @Override
+    public int[] getAcceptableTokens()
+    {
+        return new int[] {
+            TokenTypes.METHOD_DEF,
+            TokenTypes.VARIABLE_DEF,
+            TokenTypes.ANNOTATION_FIELD_DEF,
+            TokenTypes.INTERFACE_DEF,
+        };
+    }
+
     @Override
     public void visitToken(DetailAST ast)
     {
         if (TokenTypes.INTERFACE_DEF == ast.getType()) {
             final DetailAST modifiers =
                 ast.findFirstToken(TokenTypes.MODIFIERS);
             if (null != modifiers) {
                 for (final int tokenType : new int[] {
                     TokenTypes.LITERAL_STATIC,
                     TokenTypes.ABSTRACT, })
                 {
                     final DetailAST modifier =
                             modifiers.findFirstToken(tokenType);
                     if (null != modifier) {
                         log(modifier.getLineNo(), modifier.getColumnNo(),
                                 "redundantModifier", modifier.getText());
                     }
                 }
             }
         }
         else if (isInterfaceOrAnnotationMember(ast)) {
             final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
             DetailAST modifier = modifiers.getFirstChild();
             while (modifier != null) {
 
                 // javac does not allow final or static in interface methods
                 // order annotation fields hence no need to check that this
                 // is not a method or annotation field
 
                 final int type = modifier.getType();
                 if ((type == TokenTypes.LITERAL_PUBLIC)
                     || ((type == TokenTypes.LITERAL_STATIC)
                             && ast.getType() != TokenTypes.METHOD_DEF)
                     || (type == TokenTypes.ABSTRACT)
                     || (type == TokenTypes.FINAL))
                 {
                     log(modifier.getLineNo(), modifier.getColumnNo(),
                             "redundantModifier", modifier.getText());
                     break;
                 }
 
                 modifier = modifier.getNextSibling();
             }
         }
         else if (ast.getType() == TokenTypes.METHOD_DEF) {
             final DetailAST modifiers =
                             ast.findFirstToken(TokenTypes.MODIFIERS);
             // private method?
             boolean checkFinal =
                 modifiers.branchContains(TokenTypes.LITERAL_PRIVATE);
