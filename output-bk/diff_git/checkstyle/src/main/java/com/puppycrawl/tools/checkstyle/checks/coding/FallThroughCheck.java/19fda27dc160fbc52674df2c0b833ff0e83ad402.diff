diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
index 83e435037..cb3c1a28d 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
@@ -348,58 +348,57 @@ public class FallThroughCheck extends AbstractCheck {
 
         // Handle:
         //    case 1:
         //    /+ FALLTHRU +/ case 2:
         //    ....
         // and
         //    switch(i) {
         //    default:
         //    /+ FALLTHRU +/}
         //
         final String linePart = lines[endLineNo - 1].substring(0, endColNo);
         if (matchesComment(reliefPattern, linePart, endLineNo)) {
             allThroughComment = true;
         }
         else {
             // Handle:
             //    case 1:
             //    .....
             //    // FALLTHRU
             //    case 2:
             //    ....
             // and
             //    switch(i) {
             //    default:
             //    // FALLTHRU
             //    }
             final int startLineNo = currentCase.getLineNo();
             for (int i = endLineNo - 2; i > startLineNo - 1; i--) {
                 if (!CommonUtils.isBlank(lines[i])) {
                     allThroughComment = matchesComment(reliefPattern, lines[i], i + 1);
                     break;
                 }
             }
         }
         return allThroughComment;
     }
 
     /**
      * Does a regular expression match on the given line and checks that a
      * possible match is within a comment.
      * @param pattern The regular expression pattern to use.
      * @param line The line of test to do the match on.
      * @param lineNo The line number in the file.
      * @return True if a match was found inside a comment.
      */
     private boolean matchesComment(Pattern pattern, String line, int lineNo) {
         final Matcher matcher = pattern.matcher(line);
         boolean matches = false;
 
         if (matcher.find()) {
-            // -1 because it returns the char position beyond the match
             matches = getFileContents().hasIntersectionWithComment(lineNo, matcher.start(),
-                    lineNo, matcher.end() - 1);
+                    lineNo, matcher.end());
         }
         return matches;
     }
 
 }
