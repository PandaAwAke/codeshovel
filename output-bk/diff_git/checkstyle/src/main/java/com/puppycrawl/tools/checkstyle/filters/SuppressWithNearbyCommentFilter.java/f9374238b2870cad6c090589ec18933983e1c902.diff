diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java
index b1020b008..1fe71ec43 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java
@@ -32,155 +32,156 @@ import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import java.util.regex.PatternSyntaxException;
 import org.apache.commons.beanutils.ConversionException;
 
 /**
  * <p>
  * A filter that uses nearby comments to suppress audit events.
  * </p>
  * <p>
  * This check is philosophically similar to {@link SuppressionCommentFilter}.
  * Unlike {@link SuppressionCommentFilter}, this filter does not require
  * pairs of comments.  This check may be used to suppress warnings in the
  * current line:
  * <pre>
  *    offendingLine(for, whatever, reason); // SUPPRESS ParameterNumberCheck
  * </pre>
  * or it may be configured to span multiple lines, either forward:
  * <pre>
  *    // PERMIT MultipleVariableDeclarations NEXT 3 LINES
  *    double x1 = 1.0, y1 = 0.0, z1 = 0.0;
  *    double x2 = 0.0, y2 = 1.0, z2 = 0.0;
  *    double x3 = 0.0, y3 = 0.0, z3 = 1.0;
  * </pre>
  * or reverse:
  * <pre>
  *   try {
  *     thirdPartyLibrary.method();
  *   } catch (RuntimeException e) {
  *     // ALLOW ILLEGAL CATCH BECAUSE third party API wraps everything
  *     // in RuntimeExceptions.
  *     ...
  *   }
  * </pre>
  *
  * <p>
  * See {@link SuppressionCommentFilter} for usage notes.
  *
  *
  * @author Mick Killianey
  */
 public class SuppressWithNearbyCommentFilter
     extends AutomaticBean
     implements Filter
 {
     /**
      * A Tag holds a suppression comment and its location.
      */
-    public class Tag implements Comparable<Tag>
+    public static class Tag implements Comparable<Tag>
     {
         /** The text of the tag. */
         private final String text;
 
         /** The first line where warnings may be suppressed. */
         private int firstLine;
 
         /** The last line where warnings may be suppressed. */
         private int lastLine;
 
         /** The parsed check regexp, expanded for the text of this tag. */
         private Pattern tagCheckRegexp;
 
         /** The parsed message regexp, expanded for the text of this tag. */
         private Pattern tagMessageRegexp;
 
         /**
          * Constructs a tag.
          * @param text the text of the suppression.
          * @param line the line number.
+         * @param filter the {@code SuppressWithNearbyCommentFilter} with the context
          * @throws ConversionException if unable to parse expanded text.
          * on.
          */
-        public Tag(String text, int line)
+        public Tag(String text, int line, SuppressWithNearbyCommentFilter filter)
             throws ConversionException
         {
             this.text = text;
 
-            tagCheckRegexp = checkRegexp;
+            tagCheckRegexp = filter.checkRegexp;
             //Expand regexp for check and message
             //Does not intern Patterns with Utils.getPattern()
             String format = "";
             try {
-                format = expandFrocomment(text, checkFormat, commentRegexp);
+                format = expandFrocomment(text, filter.checkFormat, filter.commentRegexp);
                 tagCheckRegexp = Pattern.compile(format);
-                if (messageFormat != null) {
+                if (filter.messageFormat != null) {
                     format = expandFrocomment(
-                         text, messageFormat, commentRegexp);
+                         text, filter.messageFormat, filter.commentRegexp);
                     tagMessageRegexp = Pattern.compile(format);
                 }
                 int influence = 0;
-                if (influenceFormat != null) {
+                if (filter.influenceFormat != null) {
                     format = expandFrocomment(
-                        text, influenceFormat, commentRegexp);
+                        text, filter.influenceFormat, filter.commentRegexp);
                     try {
                         if (format.startsWith("+")) {
                             format = format.substring(1);
                         }
                         influence = Integer.parseInt(format);
                     }
                     catch (final NumberFormatException e) {
                         throw new ConversionException(
                             "unable to parse influence from '" + text
-                                + "' using " + influenceFormat, e);
+                                + "' using " + filter.influenceFormat, e);
                     }
                 }
                 if (influence >= 0) {
                     firstLine = line;
                     lastLine = line + influence;
                 }
                 else {
                     firstLine = line + influence;
                     lastLine = line;
                 }
             }
             catch (final PatternSyntaxException e) {
                 throw new ConversionException(
                     "unable to parse expanded comment " + format,
                     e);
             }
         }
 
         /** @return the text of the tag. */
         public String getText()
         {
             return text;
         }
 
         /** @return the line number of the first suppressed line. */
         public int getFirstLine()
         {
             return firstLine;
         }
 
         /** @return the line number of the last suppressed line. */
         public int getLastLine()
         {
             return lastLine;
         }
 
         /**
          * Compares the position of this tag in the file
          * with the position of another tag.
          * @param other the tag to compare with this one.
          * @return a negative number if this tag is before the other tag,
          * 0 if they are at the same position, and a positive number if this
          * tag is after the other tag.
          * @see java.lang.Comparable#compareTo(java.lang.Object)
          */
         @Override
         public int compareTo(Tag other)
         {
             if (firstLine == other.firstLine) {
                 return lastLine - other.lastLine;
@@ -435,54 +436,54 @@ public class SuppressWithNearbyCommentFilter
             tagSuppressions(contents.getCppComments().values());
         }
         if (checkC) {
             final Collection<List<TextBlock>> cComments =
                 contents.getCComments().values();
             for (final List<TextBlock> element : cComments) {
                 tagSuppressions(element);
             }
         }
         Collections.sort(tags);
     }
 
     /**
      * Appends the suppressions in a collection of comments to the full
      * set of suppression tags.
      * @param comments the set of comments.
      */
     private void tagSuppressions(Collection<TextBlock> comments)
     {
         for (final TextBlock comment : comments) {
             final int startLineNo = comment.getStartLineNo();
             final String[] text = comment.getText();
             tagCommentLine(text[0], startLineNo);
             for (int i = 1; i < text.length; i++) {
                 tagCommentLine(text[i], startLineNo + i);
             }
         }
     }
 
     /**
      * Tags a string if it matches the format for turning
      * checkstyle reporting on or the format for turning reporting off.
      * @param text the string to tag.
      * @param line the line number of text.
      */
     private void tagCommentLine(String text, int line)
     {
         final Matcher matcher = commentRegexp.matcher(text);
         if (matcher.find()) {
             addTag(matcher.group(0), line);
         }
     }
 
     /**
      * Adds a comment suppression <code>Tag</code> to the list of all tags.
      * @param text the text of the tag.
      * @param line the line number of the tag.
      */
     private void addTag(String text, int line)
     {
-        final Tag tag = new Tag(text, line);
+        final Tag tag = new Tag(text, line, this);
         tags.add(tag);
     }
 }
