diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java
index 8f130323c..68373bd7a 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java
@@ -43,106 +43,99 @@ import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
  * maximum, set property max.
  * </p>
  * <p>
  * To ignore lines in the check, set property ignorePattern to a regular
  * expression for the lines to ignore.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="LineLength"/&gt;
  * </pre>
  * <p> An example of how to configure the check to accept lines up to 120
  * characters long is:
  *</p>
  * <pre>
  * &lt;module name="LineLength"&gt;
  *    &lt;property name="max" value="120"/&gt;
  * &lt;/module&gt;
  * </pre>
  * <p> An example of how to configure the check to ignore lines that begin with
  * &quot; * &quot;, followed by just one word, such as within a Javadoc comment,
  * is:
  * </p>
  * <pre>
  * &lt;module name="LineLength"&gt;
  *    &lt;property name="ignorePattern" value="^ *\* *[^ ]+$"/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * @author Lars KÃ¼hne
  */
 public class LineLengthCheck extends AbstractCheck {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "maxLineLen";
 
     /** Default maximum number of columns in a line. */
     private static final int DEFAULT_MAX_COLUMNS = 80;
 
     /** Patterns matching package, import, and import static statements. */
     private static final Pattern IGNORE_PATTERN = Pattern.compile("^(package|import) .*");
 
     /** The maximum number of columns in a line. */
     private int max = DEFAULT_MAX_COLUMNS;
 
     /** The regexp when long lines are ignored. */
-    private Pattern ignorePattern;
-
-    /**
-     * Creates a new {@code LineLengthCheck} instance.
-     */
-    public LineLengthCheck() {
-        setIgnorePattern("^$");
-    }
+    private Pattern ignorePattern = Pattern.compile("^$");
 
     @Override
     public int[] getDefaultTokens() {
         return CommonUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return CommonUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public int[] getRequiredTokens() {
         return CommonUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public void beginTree(DetailAST rootAST) {
         final String[] lines = getLines();
         for (int i = 0; i < lines.length; i++) {
 
             final String line = lines[i];
             final int realLength = CommonUtils.lengthExpandedTabs(
                 line, line.length(), getTabWidth());
 
             if (realLength > max && !IGNORE_PATTERN.matcher(line).find()
                 && !ignorePattern.matcher(line).find()) {
                 log(i + 1, MSG_KEY, max, realLength);
             }
         }
     }
 
     /**
      * Sets the maximum length of a line.
      * @param length the maximum length of a line
      */
     public void setMax(int length) {
         max = length;
     }
 
     /**
      * Set the ignore pattern.
-     * @param format a {@code String} value
+     * @param pattern a pattern.
      */
-    public final void setIgnorePattern(String format) {
-        ignorePattern = CommonUtils.createPattern(format);
+    public final void setIgnorePattern(Pattern pattern) {
+        ignorePattern = pattern;
     }
 }
