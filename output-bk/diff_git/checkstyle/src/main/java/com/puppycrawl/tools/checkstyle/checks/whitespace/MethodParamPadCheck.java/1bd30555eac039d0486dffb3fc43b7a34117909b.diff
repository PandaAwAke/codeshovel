diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java
index c5ee8c9a7..44f54e6ce 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java
@@ -76,92 +76,92 @@ public class MethodParamPadCheck
      * file.
      */
     public static final String WS_PRECEDED = "ws.preceded";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String WS_NOT_PRECEDED = "ws.notPreceded";
 
     /**
      * Sets the pad option to nospace.
      */
     public MethodParamPadCheck()
     {
         super(PadOption.NOSPACE, PadOption.class);
     }
 
     /** Whether whitespace is allowed if the method identifier is at a
      * linebreak */
     private boolean allowLineBreaks;
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.CTOR_DEF,
             TokenTypes.LITERAL_NEW,
             TokenTypes.METHOD_CALL,
             TokenTypes.METHOD_DEF,
             TokenTypes.SUPER_CTOR_CALL,
         };
     }
 
     @Override
     public int[] getAcceptableTokens()
     {
         return new int[] {
             TokenTypes.CTOR_DEF,
             TokenTypes.LITERAL_NEW,
             TokenTypes.METHOD_CALL,
             TokenTypes.METHOD_DEF,
             TokenTypes.SUPER_CTOR_CALL,
         };
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
         final DetailAST parenAST;
-        if ((ast.getType() == TokenTypes.METHOD_CALL)) {
+        if (ast.getType() == TokenTypes.METHOD_CALL) {
             parenAST = ast;
         }
         else {
             parenAST = ast.findFirstToken(TokenTypes.LPAREN);
             // array construction => parenAST == null
             if (parenAST == null) {
                 return;
             }
         }
 
         final String line = getLines()[parenAST.getLineNo() - 1];
         if (Utils.whitespaceBefore(parenAST.getColumnNo(), line)) {
             if (!allowLineBreaks) {
                 log(parenAST, LINE_PREVIOUS, parenAST.getText());
             }
         }
         else {
             final int before = parenAST.getColumnNo() - 1;
-            if ((PadOption.NOSPACE == getAbstractOption())
-                && (Character.isWhitespace(line.charAt(before))))
+            if (PadOption.NOSPACE == getAbstractOption()
+                && Character.isWhitespace(line.charAt(before)))
             {
                 log(parenAST , WS_PRECEDED, parenAST.getText());
             }
-            else if ((PadOption.SPACE == getAbstractOption())
+            else if (PadOption.SPACE == getAbstractOption()
                      && !Character.isWhitespace(line.charAt(before)))
             {
                 log(parenAST, WS_NOT_PRECEDED, parenAST.getText());
             }
         }
     }
 
     /**
      * Control whether whitespace is flagged at linebreaks.
      * @param allowLineBreaks whether whitespace should be
      * flagged at linebreaks.
      */
     public void setAllowLineBreaks(boolean allowLineBreaks)
     {
         this.allowLineBreaks = allowLineBreaks;
     }
 }
