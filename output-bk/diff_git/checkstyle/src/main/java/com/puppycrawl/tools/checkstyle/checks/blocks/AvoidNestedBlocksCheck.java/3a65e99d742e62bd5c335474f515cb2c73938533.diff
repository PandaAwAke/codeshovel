diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheck.java
index 9f6b8a7bd..cf2e7347e 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheck.java
@@ -54,83 +54,83 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  * Thus to be able to introduce local variables that have case scope
  * it is necessary to open a nested block. This is supported, set
  * the allowInSwitchCase property to true and include all statements
  * of the case in the block.
  * </p>
  *
  * <pre>
  * switch (a)
  * {
  *     case 0:
  *         // Never OK, break outside block
  *         {
  *             x = 1;
  *         }
  *         break;
  *     case 1:
  *         // Never OK, statement outside block
  *         System.out.println("Hello");
  *         {
  *             x = 2;
  *             break;
  *         }
  *     case 1:
  *         // OK if allowInSwitchCase is true
  *         {
  *             System.out.println("Hello");
  *             x = 2;
  *             break;
  *         }
  * }
  * </pre>
  *
  * @author lkuehne
  */
 @StatelessCheck
 public class AvoidNestedBlocksCheck extends AbstractCheck {
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY_BLOCK_NESTED = "block.nested";
 
     /**
      * Whether nested blocks are allowed if they are the
      * only child of a switch case.
      */
     private boolean allowInSwitchCase;
 
     @Override
     public int[] getDefaultTokens() {
-        return getAcceptableTokens();
+        return getRequiredTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
-        return new int[] {TokenTypes.SLIST};
+        return getRequiredTokens();
     }
 
     @Override
     public int[] getRequiredTokens() {
-        return getAcceptableTokens();
+        return new int[] {TokenTypes.SLIST};
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final DetailAST parent = ast.getParent();
         if (parent.getType() == TokenTypes.SLIST
                 && (!allowInSwitchCase
                     || parent.getParent().getType() != TokenTypes.CASE_GROUP
                     || parent.getNumberOfChildren() != 1)) {
             log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY_BLOCK_NESTED);
         }
     }
 
     /**
      * Setter for allowInSwitchCase property.
      * @param allowInSwitchCase whether nested blocks are allowed
      *                 if they are the only child of a switch case.
      */
     public void setAllowInSwitchCase(boolean allowInSwitchCase) {
         this.allowInSwitchCase = allowInSwitchCase;
     }
 }
