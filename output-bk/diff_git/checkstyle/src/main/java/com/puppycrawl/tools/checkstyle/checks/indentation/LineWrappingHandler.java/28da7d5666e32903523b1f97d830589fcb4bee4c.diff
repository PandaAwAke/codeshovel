diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java
index 9773e2c05..d967ae619 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java
@@ -1,95 +1,89 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2016 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks.indentation;
 
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.NavigableMap;
 import java.util.TreeMap;
 
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * This class checks line-wrapping into definitions and expressions. The
  * line-wrapping indentation should be not less then value of the
  * lineWrappingIndentation parameter.
  *
  * @author maxvetrenko
  * @author <a href="mailto:piotr.listkiewicz@gmail.com">liscju</a>
  */
 public class LineWrappingHandler {
 
-    /**
-     * A key is pointing to the warning message text in "messages.properties"
-     * file.
-     */
-    private static final String MSG_INDENTATION_ERROR = "indentation.error";
-
     /**
      * The current instance of {@code IndentationCheck} class using this
      * handler. This field used to get access to private fields of
      * IndentationCheck instance.
      */
     private final IndentationCheck indentCheck;
 
     /**
      * Root node for current expression.
      */
     private final DetailAST firstNode;
 
     /**
      * Last node for current expression.
      */
     private final DetailAST lastNode;
 
     /**
      * User's value of line wrapping indentation.
      */
     private final int indentLevel;
 
     /**
      * Force strict condition in line wrapping case.
      */
     private final boolean forceStrictCondition;
 
     /**
      * Sets values of class field, finds last node and calculates indentation level.
      *
      * @param instance
      *            instance of IndentationCheck.
      * @param firstNode
      *            root node for current expression.
      * @param lastNode
      *            last node for current expression.
      */
     public LineWrappingHandler(IndentationCheck instance, DetailAST firstNode, DetailAST lastNode) {
         indentCheck = instance;
         this.firstNode = firstNode;
         this.lastNode = lastNode;
         indentLevel = indentCheck.getLineWrappingIndentation();
         forceStrictCondition = indentCheck.isForceStrictCondition();
     }
 
     /**
      *  Getter for lastNode field.
      *  @return lastNode field
      */
     protected final DetailAST getLastNode() {
@@ -222,63 +216,63 @@ public class LineWrappingHandler {
         while (firstNodesOnLines.size() > 1) {
             final DetailAST node = itr.next();
 
             if (node.getLineNo() <= lastAnnotationLine) {
                 final DetailAST parentNode = node.getParent();
                 final boolean isCurrentNodeCloseAnnotationAloneInLine =
                         node.getLineNo() == lastAnnotationLine
                         && node.equals(lastAnnotationNode);
                 if (isCurrentNodeCloseAnnotationAloneInLine
                         || node.getType() == TokenTypes.AT
                         && parentNode.getParent().getType() == TokenTypes.MODIFIERS) {
                     logWarningMessage(node, firstNodeIndent);
                 }
                 else {
                     logWarningMessage(node, currentIndent);
                 }
                 itr.remove();
             }
             else {
                 break;
             }
         }
     }
 
     /**
      * Finds and returns last annotation node.
      * @param atNode first at-clause node.
      * @return last annotation node.
      */
     private static DetailAST getLastAnnotationNode(DetailAST atNode) {
         DetailAST lastAnnotation = atNode.getParent();
         while (lastAnnotation.getNextSibling() != null
                 && lastAnnotation.getNextSibling().getType() == TokenTypes.ANNOTATION) {
             lastAnnotation = lastAnnotation.getNextSibling();
         }
         return lastAnnotation.getLastChild();
     }
 
     /**
      * Logs warning message if indentation is incorrect.
      *
      * @param currentNode
      *            current node which probably invoked an error.
      * @param currentIndent
      *            correct indentation.
      */
     private void logWarningMessage(DetailAST currentNode, int currentIndent) {
         if (forceStrictCondition) {
             if (currentNode.getColumnNo() != currentIndent) {
                 indentCheck.indentationLog(currentNode.getLineNo(),
-                        MSG_INDENTATION_ERROR, currentNode.getText(),
+                        IndentationCheck.MSG_ERROR, currentNode.getText(),
                         currentNode.getColumnNo(), currentIndent);
             }
         }
         else {
             if (currentNode.getColumnNo() < currentIndent) {
                 indentCheck.indentationLog(currentNode.getLineNo(),
-                        MSG_INDENTATION_ERROR, currentNode.getText(),
+                        IndentationCheck.MSG_ERROR, currentNode.getText(),
                         currentNode.getColumnNo(), currentIndent);
             }
         }
     }
 }
