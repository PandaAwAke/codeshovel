diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtils.java
index 3129cd98d..7d63e6050 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtils.java
@@ -1,286 +1,215 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2017 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.utils;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
 import com.google.common.collect.ImmutableMap;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.DetailNode;
 import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;
 import com.puppycrawl.tools.checkstyle.api.TextBlock;
 import com.puppycrawl.tools.checkstyle.checks.javadoc.InvalidJavadocTag;
 import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTag;
 import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagInfo;
 import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTags;
+import com.puppycrawl.tools.checkstyle.checks.javadoc.utils.BlockTagUtils;
+import com.puppycrawl.tools.checkstyle.checks.javadoc.utils.InlineTagUtils;
+import com.puppycrawl.tools.checkstyle.checks.javadoc.utils.TagInfo;
 
 /**
  * Contains utility methods for working with Javadoc.
  * @author Lyle Hanson
  */
 public final class JavadocUtils {
 
     /**
      * The type of Javadoc tag we want returned.
      */
     public enum JavadocTagType {
         /** Block type. */
         BLOCK,
         /** Inline type. */
         INLINE,
         /** All validTags. */
         ALL
     }
 
     /** Maps from a token name to value. */
     private static final ImmutableMap<String, Integer> TOKEN_NAME_TO_VALUE;
     /** Maps from a token value to name. */
     private static final String[] TOKEN_VALUE_TO_NAME;
 
     /** Exception message for unknown JavaDoc token id. */
     private static final String UNKNOWN_JAVADOC_TOKEN_ID_EXCEPTION_MESSAGE = "Unknown javadoc"
             + " token id. Given id: ";
 
-    /** Comment pattern. */
-    private static final Pattern COMMENT_PATTERN = Pattern.compile(
-        "^\\s*(?:/\\*{2,}|\\*+)\\s*(.*)");
-
-    /** Block tag pattern for a first line. */
-    private static final Pattern BLOCK_TAG_PATTERN_FIRST_LINE = Pattern.compile(
-        "/\\*{2,}\\s*@(\\p{Alpha}+)\\s");
-
-    /** Block tag pattern. */
-    private static final Pattern BLOCK_TAG_PATTERN = Pattern.compile(
-        "^\\s*\\**\\s*@(\\p{Alpha}+)\\s");
-
-    /** Inline tag pattern. */
-    private static final Pattern INLINE_TAG_PATTERN = Pattern.compile(
-        ".*?\\{@(\\p{Alpha}+)\\s+(.*?)}");
-
     /** Newline pattern. */
     private static final Pattern NEWLINE = Pattern.compile("\n");
 
     /** Return pattern. */
     private static final Pattern RETURN = Pattern.compile("\r");
 
     /** Tab pattern. */
     private static final Pattern TAB = Pattern.compile("\t");
 
     // Using reflection gets all token names and values from JavadocTokenTypes class
     // and saves to TOKEN_NAME_TO_VALUE and TOKEN_VALUE_TO_NAME collections.
     static {
         final ImmutableMap.Builder<String, Integer> builder = ImmutableMap.builder();
 
         final Field[] fields = JavadocTokenTypes.class.getDeclaredFields();
 
         String[] tempTokenValueToName = CommonUtils.EMPTY_STRING_ARRAY;
 
         for (final Field field : fields) {
 
             // Only process public int fields.
             if (!Modifier.isPublic(field.getModifiers())
                     || field.getType() != Integer.TYPE) {
                 continue;
             }
 
             final String name = field.getName();
 
             final int tokenValue = TokenUtils.getIntFromField(field, name);
             builder.put(name, tokenValue);
             if (tokenValue > tempTokenValueToName.length - 1) {
                 final String[] temp = new String[tokenValue + 1];
                 System.arraycopy(tempTokenValueToName, 0, temp, 0, tempTokenValueToName.length);
                 tempTokenValueToName = temp;
             }
             if (tokenValue == -1) {
                 tempTokenValueToName[0] = name;
             }
             else {
                 tempTokenValueToName[tokenValue] = name;
             }
         }
 
         TOKEN_NAME_TO_VALUE = builder.build();
         TOKEN_VALUE_TO_NAME = tempTokenValueToName;
     }
 
     /** Prevent instantiation. */
     private JavadocUtils() {
     }
 
     /**
      * Gets validTags from a given piece of Javadoc.
      * @param textBlock
      *        the Javadoc comment to process.
      * @param tagType
      *        the type of validTags we're interested in
      * @return all standalone validTags from the given javadoc.
      */
     public static JavadocTags getJavadocTags(TextBlock textBlock,
             JavadocTagType tagType) {
-        final String[] text = textBlock.getText();
-        final List<JavadocTag> tags = new ArrayList<>();
-        final List<InvalidJavadocTag> invalidTags = new ArrayList<>();
-        for (int i = 0; i < text.length; i++) {
-            final String textValue = text[i];
-            final Matcher blockTagMatcher = getBlockTagPattern(i).matcher(textValue);
-            if ((tagType == JavadocTagType.ALL || tagType == JavadocTagType.BLOCK)
-                    && blockTagMatcher.find()) {
-                final String tagName = blockTagMatcher.group(1);
-                String content = textValue.substring(blockTagMatcher.end(1));
-                if (content.endsWith("*/")) {
-                    content = content.substring(0, content.length() - 2);
-                }
-                final int line = textBlock.getStartLineNo() + i;
-                int col = blockTagMatcher.start(1) - 1;
-                if (i == 0) {
-                    col += textBlock.getStartColNo();
-                }
-                if (JavadocTagInfo.isValidName(tagName)) {
-                    tags.add(
-                            new JavadocTag(line, col, tagName, content.trim()));
-                }
-                else {
-                    invalidTags.add(new InvalidJavadocTag(line, col, tagName));
-                }
-            }
-            // No block tag, so look for inline validTags
-            else if (tagType == JavadocTagType.ALL || tagType == JavadocTagType.INLINE) {
-                lookForInlineTags(textBlock, i, tags, invalidTags);
-            }
-        }
-        return new JavadocTags(tags, invalidTags);
-    }
 
-    /**
-     * Get a block tag pattern depending on a line number of a javadoc.
-     * @param lineNumber the line number.
-     * @return a block tag pattern.
-     */
-    private static Pattern getBlockTagPattern(int lineNumber) {
-        final Pattern blockTagPattern;
-        if (lineNumber == 0) {
-            blockTagPattern = BLOCK_TAG_PATTERN_FIRST_LINE;
-        }
-        else {
-            blockTagPattern = BLOCK_TAG_PATTERN;
-        }
-        return blockTagPattern;
-    }
+        final boolean getBlockTags = tagType == JavadocTagType.ALL
+                                         || tagType == JavadocTagType.BLOCK;
+        final boolean getInlineTags = tagType == JavadocTagType.ALL
+                                          || tagType == JavadocTagType.INLINE;
 
-    /**
-     * Looks for inline tags in comment and adds them to the proper tags collection.
-     * @param comment comment text block
-     * @param lineNumber line number in the comment
-     * @param validTags collection of valid tags
-     * @param invalidTags collection of invalid tags
-     */
-    private static void lookForInlineTags(TextBlock comment, int lineNumber,
-            final List<JavadocTag> validTags, final List<InvalidJavadocTag> invalidTags) {
-        final String text = comment.getText()[lineNumber];
-        // Match Javadoc text after comment characters
-        final Matcher commentMatcher = COMMENT_PATTERN.matcher(text);
-        final String commentContents;
-
-        // offset including comment characters
-        final int commentOffset;
-
-        if (commentMatcher.find()) {
-            commentContents = commentMatcher.group(1);
-            commentOffset = commentMatcher.start(1) - 1;
+        final List<TagInfo> tags = new ArrayList<>();
+
+        if (getBlockTags) {
+            tags.addAll(BlockTagUtils.extractBlockTags(textBlock.getText()));
         }
-        else {
-            // No leading asterisks, still valid
-            commentContents = text;
-            commentOffset = 0;
+
+        if (getInlineTags) {
+            tags.addAll(InlineTagUtils.extractInlineTags(textBlock.getText()));
         }
-        final Matcher tagMatcher = INLINE_TAG_PATTERN.matcher(commentContents);
-        while (tagMatcher.find()) {
-            final String tagName = tagMatcher.group(1);
-            final int line = comment.getStartLineNo() + lineNumber;
-            int col = commentOffset + tagMatcher.start(1) - 1;
-            if (lineNumber == 0) {
-                col += comment.getStartColNo();
-            }
-            if (JavadocTagInfo.isValidName(tagName)) {
-                final String tagValue = tagMatcher.group(2).trim();
-                validTags.add(new JavadocTag(line, col, tagName,
-                        tagValue));
+
+        final List<JavadocTag> validTags = new ArrayList<>();
+        final List<InvalidJavadocTag> invalidTags = new ArrayList<>();
+
+        for (TagInfo tag : tags) {
+            final int col = tag.getPosition().getColumn();
+
+            // Add the starting line of the comment to the line number to get the actual line number
+            // in the source.
+            // Lines are one-indexed, so need a off-by-one correction.
+            final int line = textBlock.getStartLineNo() + tag.getPosition().getLine() - 1;
+
+            if (JavadocTagInfo.isValidName(tag.getName())) {
+                validTags.add(
+                    new JavadocTag(line, col, tag.getName(), tag.getValue()));
             }
             else {
-                invalidTags.add(new InvalidJavadocTag(line, col,
-                        tagName));
+                invalidTags.add(new InvalidJavadocTag(line, col, tag.getName()));
             }
         }
+
+        return new JavadocTags(validTags, invalidTags);
     }
 
     /**
      * Checks that commentContent starts with '*' javadoc comment identifier.
      * @param commentContent
      *        content of block comment
      * @return true if commentContent starts with '*' javadoc comment
      *         identifier.
      */
     public static boolean isJavadocComment(String commentContent) {
         boolean result = false;
 
         if (!commentContent.isEmpty()) {
             final char docCommentIdentificator = commentContent.charAt(0);
             result = docCommentIdentificator == '*';
         }
 
         return result;
     }
 
     /**
      * Checks block comment content starts with '*' javadoc comment identifier.
      * @param blockCommentBegin
      *        block comment AST
      * @return true if block comment content starts with '*' javadoc comment
      *         identifier.
      */
     public static boolean isJavadocComment(DetailAST blockCommentBegin) {
         final String commentContent = getBlockCommentContent(blockCommentBegin);
         return isJavadocComment(commentContent) && isCorrectJavadocPosition(blockCommentBegin);
     }
 
     /**
      * Gets content of block comment.
      * @param blockCommentBegin
      *        block comment AST.
      * @return content of block comment.
      */
     private static String getBlockCommentContent(DetailAST blockCommentBegin) {
         final DetailAST commentContent = blockCommentBegin.getFirstChild();
         return commentContent.getText();
     }
 
     /**
      * Get content of Javadoc comment.
      * @param javadocCommentBegin
      *        Javadoc comment AST
      * @return content of Javadoc comment.
      */
     public static String getJavadocCommentContent(DetailAST javadocCommentBegin) {
