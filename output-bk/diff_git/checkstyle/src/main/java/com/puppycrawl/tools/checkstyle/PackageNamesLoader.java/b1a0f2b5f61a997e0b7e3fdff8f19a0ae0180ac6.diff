diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
index 99eb68655..e2c96318d 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
@@ -94,79 +94,88 @@ public final class PackageNamesLoader
 
     /**
      * Creates a full package name from the package names on the stack.
      * @return the full name of the current package.
      */
     private String getPackageName() {
         final StringBuilder buf = new StringBuilder();
         final Iterator<String> iterator = packageStack.descendingIterator();
         while (iterator.hasNext()) {
             final String subPackage = iterator.next();
             buf.append(subPackage);
             if (!CommonUtils.endsWithChar(subPackage, '.') && iterator.hasNext()) {
                 buf.append('.');
             }
         }
         return buf.toString();
     }
 
     @Override
     public void endElement(String uri,
                            String localName,
                            String qName) {
         if (PACKAGE_ELEMENT_NAME.equals(qName)) {
 
             packageNames.add(getPackageName());
             packageStack.pop();
         }
     }
 
     /**
      * Returns the set of package names, compiled from all
      * checkstyle_packages.xml files found on the given class loaders
      * classpath.
      * @param classLoader the class loader for loading the
      *          checkstyle_packages.xml files.
      * @return the set of package names.
      * @throws CheckstyleException if an error occurs.
      */
     public static Set<String> getPackageNames(ClassLoader classLoader)
             throws CheckstyleException {
 
         final Set<String> result;
         try {
             //create the loader outside the loop to prevent PackageObjectFactory
             //being created anew for each file
             final PackageNamesLoader namesLoader = new PackageNamesLoader();
 
             final Enumeration<URL> packageFiles = classLoader.getResources(CHECKSTYLE_PACKAGES);
 
             while (packageFiles.hasMoreElements()) {
-                final URL packageFile = packageFiles.nextElement();
-                InputStream stream = null;
-
-                try {
-                    stream = new BufferedInputStream(packageFile.openStream());
-                    final InputSource source = new InputSource(stream);
-                    namesLoader.parseInputSource(source);
-                }
-                catch (IOException ex) {
-                    throw new CheckstyleException("unable to open " + packageFile, ex);
-                }
-                finally {
-                    Closeables.closeQuietly(stream);
-                }
+                processFile(packageFiles.nextElement(), namesLoader);
             }
 
             result = namesLoader.packageNames;
-
         }
         catch (IOException ex) {
             throw new CheckstyleException("unable to get package file resources", ex);
         }
         catch (ParserConfigurationException | SAXException ex) {
             throw new CheckstyleException("unable to open one of package files", ex);
         }
 
         return result;
     }
+
+    /**
+     * Reads the file provided and parses it with package names loader.
+     * @param packageFile file from package
+     * @param namesLoader package names loader
+     * @throws SAXException if an error while parsing occurs
+     * @throws CheckstyleException if unable to open file
+     */
+    private static void processFile(URL packageFile, PackageNamesLoader namesLoader)
+            throws SAXException, CheckstyleException {
+        InputStream stream = null;
+        try {
+            stream = new BufferedInputStream(packageFile.openStream());
+            final InputSource source = new InputSource(stream);
+            namesLoader.parseInputSource(source);
+        }
+        catch (IOException ex) {
+            throw new CheckstyleException("unable to open " + packageFile, ex);
+        }
+        finally {
+            Closeables.closeQuietly(stream);
+        }
+    }
 }
