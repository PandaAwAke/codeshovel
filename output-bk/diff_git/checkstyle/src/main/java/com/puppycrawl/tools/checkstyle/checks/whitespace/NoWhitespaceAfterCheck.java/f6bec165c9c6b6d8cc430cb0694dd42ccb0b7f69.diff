diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java
index f9622cce7..d2881f47b 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java
@@ -146,101 +146,101 @@ public class NoWhitespaceAfterCheck extends AbstractCheck {
      */
     private static DetailAST getWhitespaceFollowedNode(DetailAST ast) {
         final DetailAST whitespaceFollowedAst;
         switch (ast.getType()) {
             case TokenTypes.TYPECAST:
                 whitespaceFollowedAst = ast.findFirstToken(TokenTypes.RPAREN);
                 break;
             case TokenTypes.ARRAY_DECLARATOR:
                 whitespaceFollowedAst = getArrayDeclaratorPreviousElement(ast);
                 break;
             case TokenTypes.INDEX_OP:
                 whitespaceFollowedAst = getIndexOpPreviousElement(ast);
                 break;
             default:
                 whitespaceFollowedAst = ast;
         }
         return whitespaceFollowedAst;
     }
 
     /**
      * Gets position after token (place of possible redundant whitespace).
      * @param ast Node representing token.
      * @return position after token.
      */
     private static int getPositionAfter(DetailAST ast) {
         final int after;
         //If target of possible redundant whitespace is in method definition.
         if (ast.getType() == TokenTypes.IDENT
                 && ast.getNextSibling() != null
                 && ast.getNextSibling().getType() == TokenTypes.LPAREN) {
             final DetailAST methodDef = ast.getParent();
             final DetailAST endOfParams = methodDef.findFirstToken(TokenTypes.RPAREN);
             after = endOfParams.getColumnNo() + 1;
         }
         else {
             after = ast.getColumnNo() + ast.getText().length();
         }
         return after;
     }
 
     /**
      * Checks if there is unwanted whitespace after the visited node.
      * @param ast
      *        , visited node.
      * @param whitespaceColumnNo
      *        , column number of a possible whitespace.
      * @param whitespaceLineNo
      *        , line number of a possible whitespace.
      * @return true if whitespace found.
      */
-    boolean hasTrailingWhitespace(DetailAST ast,
+    private boolean hasTrailingWhitespace(DetailAST ast,
         int whitespaceColumnNo, int whitespaceLineNo) {
         final boolean result;
         final int astLineNo = ast.getLineNo();
         final String line = getLine(astLineNo - 1);
         if (astLineNo == whitespaceLineNo && whitespaceColumnNo < line.length()) {
             result = Character.isWhitespace(line.charAt(whitespaceColumnNo));
         }
         else {
             result = !allowLineBreaks;
         }
         return result;
     }
 
     /**
      * Returns proper argument for getPositionAfter method, it is a token after
      * {@link TokenTypes#ARRAY_DECLARATOR ARRAY_DECLARATOR}, in can be {@link TokenTypes#RBRACK
      * RBRACK}, {@link TokenTypes#IDENT IDENT} or an array type definition (literal).
      * @param ast
      *        , {@link TokenTypes#ARRAY_DECLARATOR ARRAY_DECLARATOR} node.
      * @return previous node by text order.
      */
     private static DetailAST getArrayDeclaratorPreviousElement(DetailAST ast) {
         final DetailAST previousElement;
         final DetailAST firstChild = ast.getFirstChild();
         if (firstChild.getType() == TokenTypes.ARRAY_DECLARATOR) {
             // second or higher array index
             previousElement = firstChild.findFirstToken(TokenTypes.RBRACK);
         }
         else {
             // first array index, is preceded with identifier or type
             final DetailAST parent = getFirstNonArrayDeclaratorParent(ast);
             switch (parent.getType()) {
                 // generics
                 case TokenTypes.TYPE_ARGUMENT:
                     final DetailAST wildcard = parent.findFirstToken(TokenTypes.WILDCARD_TYPE);
                     if (wildcard == null) {
                         // usual generic type argument like <char[]>
                         previousElement = getTypeLastNode(ast);
                     }
                     else {
                         // constructions with wildcard like <? extends String[]>
                         previousElement = getTypeLastNode(ast.getFirstChild());
                     }
                     break;
                 // 'new' is a special case with its own subtree structure
                 case TokenTypes.LITERAL_NEW:
                     previousElement = getTypeLastNode(parent);
                     break;
                 // mundane array declaration, can be either java style or C style
                 case TokenTypes.TYPE:
