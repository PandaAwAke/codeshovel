diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
index 8e0bd30ad..a3fc7e20a 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
@@ -939,79 +939,79 @@ public class JavadocMethodCheck extends AbstractTypeAwareCheck {
         final ListIterator<ExceptionInfo> throwIt = throwsList.listIterator();
         while (!found && throwIt.hasNext()) {
             final ExceptionInfo exceptionInfo = throwIt.next();
 
             if (exceptionInfo.getName().getText().equals(
                     documentedCI.getName().getText())) {
                 found = true;
                 foundException = exceptionInfo;
             }
         }
 
         // Now match on the exception type
         final ListIterator<ExceptionInfo> exceptionInfoIt = throwsList.listIterator();
         while (!found && exceptionInfoIt.hasNext()) {
             final ExceptionInfo exceptionInfo = exceptionInfoIt.next();
 
             if (documentedCI.getClazz() == exceptionInfo.getClazz()) {
                 found = true;
                 foundException = exceptionInfo;
             }
             else if (allowThrowsTagsForSubclasses) {
                 found = isSubclass(documentedCI.getClazz(), exceptionInfo.getClazz());
             }
         }
 
         if (foundException != null) {
             foundException.setFound();
             foundThrows.add(documentedCI.getName().getText());
         }
 
         return found;
     }
 
     /** Stores useful information about declared exception. */
     private static class ExceptionInfo {
         /** Does the exception have throws tag associated with. */
         private boolean found;
         /** Class information associated with this exception. */
         private final AbstractClassInfo classInfo;
 
         /**
          * Creates new instance for {@code FullIdent}.
          *
          * @param classInfo class info
          */
         ExceptionInfo(AbstractClassInfo classInfo) {
             this.classInfo = classInfo;
         }
 
         /** Mark that the exception has associated throws tag. */
-        final void setFound() {
+        private void setFound() {
             found = true;
         }
 
         /**
          * Checks that the exception has throws tag associated with it.
          * @return whether the exception has throws tag associated with
          */
-        final boolean isFound() {
+        private boolean isFound() {
             return found;
         }
 
         /**
          * Gets exception name.
          * @return exception's name
          */
-        final Token getName() {
+        private Token getName() {
             return classInfo.getName();
         }
 
         /**
          * Gets exception class.
          * @return class for this exception
          */
-        final Class<?> getClazz() {
+        private Class<?> getClazz() {
             return classInfo.getClazz();
         }
     }
 }
