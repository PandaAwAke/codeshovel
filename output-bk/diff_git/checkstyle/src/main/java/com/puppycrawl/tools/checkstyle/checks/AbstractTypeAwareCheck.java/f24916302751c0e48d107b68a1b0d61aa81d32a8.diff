diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
index c18a45579..a4ac5cf60 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
@@ -221,101 +221,101 @@ public abstract class AbstractTypeAwareCheck extends Check {
     protected final Class<?> resolveClass(String className,
             String currentClass) {
         try {
             return getClassResolver().resolve(className, currentClass);
         }
         catch (final ClassNotFoundException ignored) {
             return null;
         }
     }
 
     /**
      * Tries to load class. Logs error if unable.
      * @param ident name of class which we try to load.
      * @param currentClass name of surrounding class.
      * @return <code>Class</code> for a ident.
      */
     protected final Class<?> tryLoadClass(Token ident, String currentClass) {
         final Class<?> clazz = resolveClass(ident.getText(), currentClass);
         if (clazz == null) {
             logLoadError(ident);
         }
         return clazz;
     }
 
     /**
      * Logs error if unable to load class information.
      * Abstract, should be overrided in subclasses.
      * @param ident class name for which we can no load class.
      */
     protected abstract void logLoadError(Token ident);
 
     /**
      * Common implementation for logLoadError() method.
      * @param lineNo line number of the problem.
      * @param columnNo column number of the problem.
      * @param msgKey message key to use.
      * @param values values to fill the message out.
      */
     protected final void logLoadErrorImpl(int lineNo, int columnNo,
                                           String msgKey, Object... values) {
         if (!logLoadErrors) {
             final LocalizedMessage msg = new LocalizedMessage(lineNo,
                                                     columnNo,
                                                     getMessageBundle(),
                                                     msgKey,
                                                     values,
                                                     getSeverityLevel(),
                                                     getId(),
                                                     this.getClass(),
                                                     null);
-            throw new RuntimeException(msg.getMessage());
+            throw new IllegalStateException(msg.getMessage());
         }
 
         if (!suppressLoadErrors) {
             log(lineNo, columnNo, msgKey, values);
         }
     }
 
     /**
      * Collects the details of a package.
      * @param ast node containing the package details
      */
     private void processPackage(DetailAST ast) {
         final DetailAST nameAST = ast.getLastChild().getPreviousSibling();
         packageFullIdent = FullIdent.createFullIdent(nameAST);
     }
 
     /**
      * Collects the details of imports.
      * @param ast node containing the import details
      */
     private void processImport(DetailAST ast) {
         final FullIdent name = FullIdent.createFullIdentBelow(ast);
         imports.add(name.getText());
     }
 
     /**
      * Process type params (if any) for given class, enum or method.
      * @param ast class, enum or method to process.
      */
     private void processTypeParams(DetailAST ast) {
         final DetailAST params =
             ast.findFirstToken(TokenTypes.TYPE_PARAMETERS);
 
         final Map<String, AbstractClassInfo> paramsMap = Maps.newHashMap();
         typeParams.push(paramsMap);
 
         if (params == null) {
             return;
         }
 
         for (DetailAST child = params.getFirstChild();
              child != null;
              child = child.getNextSibling()) {
             if (child.getType() == TokenTypes.TYPE_PARAMETER) {
                 final DetailAST param = child;
                 final String alias =
                     param.findFirstToken(TokenTypes.IDENT).getText();
                 final DetailAST bounds =
                     param.findFirstToken(TokenTypes.TYPE_UPPER_BOUNDS);
                 if (bounds != null) {
