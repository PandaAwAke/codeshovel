diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java b/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
index a4353662e..f0cabb332 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
@@ -67,102 +67,101 @@ public final class TreeWalker
 {
     /**
      * State of AST.
      * Indicates whether tree contains certain nodes.
      */
     private static enum AstState {
         /**
          * Ordinary tree.
          */
         ORDINARY,
 
         /**
          * AST contains comment nodes.
          */
         WITH_COMMENTS
     }
 
     /** default distance between tab stops */
     private static final int DEFAULT_TAB_WIDTH = 8;
 
     /** maps from token name to ordinary checks */
     private final Multimap<String, Check> tokenToOrdinaryChecks =
         HashMultimap.create();
 
     /** maps from token name to comment checks */
     private final Multimap<String, Check> tokenToCommentChecks =
             HashMultimap.create();
 
     /** registered ordinary checks, that don't use comment nodes */
     private final Set<Check> ordinaryChecks = Sets.newHashSet();
 
     /** registered comment checks */
     private final Set<Check> commentChecks = Sets.newHashSet();
 
     /** the distance between tab stops */
     private int tabWidth = DEFAULT_TAB_WIDTH;
 
     /** cache file **/
     private PropertyCacheFile cache = new PropertyCacheFile(null, null);
 
     /** class loader to resolve classes with. **/
     private ClassLoader classLoader;
 
     /** context of child components */
     private Context childContext;
 
     /** a factory for creating submodules (i.e. the Checks) */
     private ModuleFactory moduleFactory;
 
     /** logger for debug purpose */
-    private static final Log LOG =
-        LogFactory.getLog("com.puppycrawl.tools.checkstyle.TreeWalker");
+    private static final Log LOG = LogFactory.getLog(TreeWalker.class);
 
     /**
      * Creates a new <code>TreeWalker</code> instance.
      */
     public TreeWalker()
     {
         setFileExtensions(new String[]{"java"});
     }
 
     /** @param tabWidth the distance between tab stops */
     public void setTabWidth(int tabWidth)
     {
         this.tabWidth = tabWidth;
     }
 
     /** @param fileName the cache file */
     public void setCacheFile(String fileName)
     {
         final Configuration configuration = getConfiguration();
         cache = new PropertyCacheFile(configuration, fileName);
     }
 
     /** @param classLoader class loader to resolve classes with. */
     public void setClassLoader(ClassLoader classLoader)
     {
         this.classLoader = classLoader;
     }
 
     /**
      * Sets the module factory for creating child modules (Checks).
      * @param moduleFactory the factory
      */
     public void setModuleFactory(ModuleFactory moduleFactory)
     {
         this.moduleFactory = moduleFactory;
     }
 
     @Override
     public void finishLocalSetup()
     {
         final DefaultContext checkContext = new DefaultContext();
         checkContext.add("classLoader", classLoader);
         checkContext.add("messages", getMessageCollector());
         checkContext.add("severity", getSeverity());
         // TODO: hmmm.. this looks less than elegant
         // we have just parsed the string,
         // now we're recreating it only to parse it again a few moments later
         checkContext.add("tabWidth", String.valueOf(tabWidth));
 
         childContext = checkContext;
@@ -170,206 +169,204 @@ public final class TreeWalker
 
     @Override
     public void setupChild(Configuration childConf)
         throws CheckstyleException
     {
         // TODO: improve the error handing
         final String name = childConf.getName();
         final Object module = moduleFactory.createModule(name);
         if (!(module instanceof Check)) {
             throw new CheckstyleException(
                 "TreeWalker is not allowed as a parent of " + name);
         }
         final Check c = (Check) module;
         c.contextualize(childContext);
         c.configure(childConf);
         c.init();
 
         registerCheck(c);
     }
 
     @Override
     protected void processFiltered(File file, List<String> lines)
     {
         // check if already checked and passed the file
         final String fileName = file.getPath();
         final long timestamp = file.lastModified();
         if (cache.alreadyChecked(fileName, timestamp)
                  || !fileExtensionMatches(file, getFileExtensions()))
         {
             return;
         }
 
         final String msg = "%s occurred during the analysis of file %s .";
 
         try {
             final FileText text = FileText.fromLines(file, lines);
             final FileContents contents = new FileContents(text);
             final DetailAST rootAST = TreeWalker.parse(contents);
 
             getMessageCollector().reset();
 
             walk(rootAST, contents, AstState.ORDINARY);
 
             final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);
 
             walk(astWithComments, contents, AstState.WITH_COMMENTS);
         }
         catch (final TokenStreamRecognitionException tre) {
             final String exceptionMsg = String.format(msg, "TokenStreamRecognitionException",
                      fileName);
-            Utils.getExceptionLogger().error(exceptionMsg);
+            LOG.error(exceptionMsg);
             final RecognitionException re = tre.recog;
             String message = "TokenStreamRecognitionException occured";
             if (re != null) {
                 message = re.getMessage();
             }
             getMessageCollector().add(createLocalizedMessage(message));
         }
         // RecognitionException and any other (need to check if needed)
         catch (Throwable ex) {
             final String exceptionMsg = String.format(msg, ex.getClass().getSimpleName(), fileName);
-            Utils.getExceptionLogger().error(exceptionMsg);
+            LOG.error(exceptionMsg);
             getMessageCollector().add(createLocalizedMessage(ex.getMessage()));
         }
 
         if (getMessageCollector().size() == 0) {
             cache.checkedOk(fileName, timestamp);
         }
     }
 
     /**
      * Creates {@link LocalizedMessage} object using default attributes.
      * @param message
      *        message that will be used for created object
      * @return instance of created object
      */
     private LocalizedMessage createLocalizedMessage(String message)
     {
         return new LocalizedMessage(
                 0,
                 Defn.CHECKSTYLE_BUNDLE,
                 "general.exception",
                 new String[] {message },
                 getId(),
                 this.getClass(), null);
     }
 
     /**
      * Register a check for a given configuration.
      * @param check the check to register
      * @throws CheckstyleException if an error occurs
      */
     private void registerCheck(Check check)
         throws CheckstyleException
     {
         final int[] tokens;
         final Set<String> checkTokens = check.getTokenNames();
         if (!checkTokens.isEmpty()) {
             tokens = check.getRequiredTokens();
 
             //register configured tokens
             final int[] acceptableTokens = check.getAcceptableTokens();
             Arrays.sort(acceptableTokens);
             for (String token : checkTokens) {
                 final int tokenId = TokenTypes.getTokenId(token);
                 if (Arrays.binarySearch(acceptableTokens, tokenId) >= 0) {
                     registerCheck(token, check);
                 }
                 else {
                     throw new CheckstyleException("Token \""
                         + token + "\" was not found in Acceptable tokens list"
                                 + " in check " + check);
                 }
             }
         }
         else {
             tokens = check.getDefaultTokens();
         }
         for (int element : tokens) {
             registerCheck(element, check);
         }
         if (check.isCommentNodesRequired()) {
             commentChecks.add(check);
         }
         else {
             ordinaryChecks.add(check);
         }
     }
 
     /**
      * Register a check for a specified token id.
      * @param tokenID the id of the token
      * @param check the check to register
      */
     private void registerCheck(int tokenID, Check check)
     {
         registerCheck(TokenTypes.getTokenName(tokenID), check);
     }
 
     /**
      * Register a check for a specified token name
      * @param token the name of the token
      * @param check the check to register
      */
     private void registerCheck(String token, Check check)
     {
         if (check.isCommentNodesRequired()) {
             tokenToCommentChecks.put(token, check);
         }
         else if (TokenTypes.isCommentType(token)) {
-            LOG.warn("Check '"
-                    + check.getClass().getName()
-                    + "' waits for comment type token ('"
-                    + token
-                    + "') and should override 'isCommentNodesRequred()'"
-                    + " method to return 'true'");
+            final String message = String.format("Check '%s' waits for comment type "
+                    + "token ('%s') and should override 'isCommentNodesRequred()' "
+                    + "method to return 'true'", check.getClass().getName(), token);
+            LOG.warn(message);
         }
         else {
             tokenToOrdinaryChecks.put(token, check);
         }
     }
 
     /**
      * Initiates the walk of an AST.
      * @param ast the root AST
      * @param contents the contents of the file the AST was generated from.
      * @param astState state of AST.
      */
     private void walk(DetailAST ast, FileContents contents
             , AstState astState)
     {
         notifyBegin(ast, contents, astState);
 
         // empty files are not flagged by javac, will yield ast == null
         if (ast != null) {
             processIter(ast, astState);
         }
 
         notifyEnd(ast, astState);
     }
 
     /**
      * Notify checks that we are about to begin walking a tree.
      * @param rootAST the root of the tree.
      * @param contents the contents of the file the AST was generated from.
      * @param astState state of AST.
      */
     private void notifyBegin(DetailAST rootAST, FileContents contents
             , AstState astState)
     {
         Set<Check> checks;
 
         if (astState == AstState.WITH_COMMENTS) {
             checks = commentChecks;
         }
         else {
             checks = ordinaryChecks;
         }
 
         for (Check ch : checks) {
             ch.setFileContents(contents);
             ch.beginTree(rootAST);
         }
     }
 
     /**
