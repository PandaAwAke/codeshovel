diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java
index 5a76888c6..7300f9e64 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java
@@ -1,152 +1,152 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2014  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.imports;
 
 import java.io.File;
 import java.net.URI;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FullIdent;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import org.apache.commons.beanutils.ConversionException;
 
 /**
  * Check that controls what packages can be imported in each package. Useful
  * for ensuring that application layering is not violated. Ideas on how the
  * check can be improved include support for:
  * <ul>
  * <li>
  * Change the default policy that if a package being checked does not
  * match any guards, then it is allowed. Currently defaults to disallowed.
  * </li>
  * </ul>
  *
  * @author Oliver Burn
  */
 public class ImportControlCheck extends Check
 {
     /** The root package controller. */
-    private PkgControl mRoot;
+    private PkgControl root;
     /** The package doing the import. */
-    private String mInPkg;
+    private String inPkg;
 
     /**
      * The package controller for the current file. Used for performance
      * optimisation.
      */
-    private PkgControl mCurrentLeaf;
+    private PkgControl currentLeaf;
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.PACKAGE_DEF, TokenTypes.IMPORT,
                           TokenTypes.STATIC_IMPORT, };
     }
 
     @Override
-    public void beginTree(final DetailAST aRootAST)
+    public void beginTree(final DetailAST rootAST)
     {
-        mCurrentLeaf = null;
+        currentLeaf = null;
     }
 
     @Override
-    public void visitToken(final DetailAST aAST)
+    public void visitToken(final DetailAST ast)
     {
-        if (aAST.getType() == TokenTypes.PACKAGE_DEF) {
-            final DetailAST nameAST = aAST.getLastChild().getPreviousSibling();
+        if (ast.getType() == TokenTypes.PACKAGE_DEF) {
+            final DetailAST nameAST = ast.getLastChild().getPreviousSibling();
             final FullIdent full = FullIdent.createFullIdent(nameAST);
-            if (mRoot == null) {
+            if (root == null) {
                 log(nameAST, "import.control.missing.file");
             }
             else {
-                mInPkg = full.getText();
-                mCurrentLeaf = mRoot.locateFinest(mInPkg);
-                if (mCurrentLeaf == null) {
+                inPkg = full.getText();
+                currentLeaf = root.locateFinest(inPkg);
+                if (currentLeaf == null) {
                     log(nameAST, "import.control.unknown.pkg");
                 }
             }
         }
-        else if (mCurrentLeaf != null) {
+        else if (currentLeaf != null) {
             final FullIdent imp;
-            if (aAST.getType() == TokenTypes.IMPORT) {
-                imp = FullIdent.createFullIdentBelow(aAST);
+            if (ast.getType() == TokenTypes.IMPORT) {
+                imp = FullIdent.createFullIdentBelow(ast);
             }
             else {
                 // know it is a static import
-                imp = FullIdent.createFullIdent(aAST
+                imp = FullIdent.createFullIdent(ast
                         .getFirstChild().getNextSibling());
             }
-            final AccessResult access = mCurrentLeaf.checkAccess(imp.getText(),
-                    mInPkg);
+            final AccessResult access = currentLeaf.checkAccess(imp.getText(),
+                    inPkg);
             if (!AccessResult.ALLOWED.equals(access)) {
-                log(aAST, "import.control.disallowed", imp.getText());
+                log(ast, "import.control.disallowed", imp.getText());
             }
         }
     }
 
     /**
      * Set the parameter for the url containing the import control
      * configuration. It will cause the url to be loaded.
-     * @param aUrl the url of the file to load.
+     * @param url the url of the file to load.
      * @throws ConversionException on error loading the file.
      */
-    public void setUrl(final String aUrl)
+    public void setUrl(final String url)
     {
         // Handle empty param
-        if ((aUrl == null) || (aUrl.trim().length() == 0)) {
+        if ((url == null) || (url.trim().length() == 0)) {
             return;
         }
         final URI uri;
         try {
-            uri = URI.create(aUrl);
+            uri = URI.create(url);
         }
         catch (final IllegalArgumentException ex) {
-            throw new ConversionException("syntax error in url " + aUrl, ex);
+            throw new ConversionException("syntax error in url " + url, ex);
         }
         try {
-            mRoot = ImportControlLoader.load(uri);
+            root = ImportControlLoader.load(uri);
         }
         catch (final CheckstyleException ex) {
-            throw new ConversionException("Unable to load " + aUrl, ex);
+            throw new ConversionException("Unable to load " + url, ex);
         }
     }
 
     /**
-     * Set the parameter for the file containing the import control
+     * Set the pnameter for the file containing the import control
      * configuration. It will cause the file to be loaded.
-     * @param aName the name of the file to load.
+     * @param name the name of the file to load.
      * @throws ConversionException on error loading the file.
      */
-    public void setFile(final String aName)
+    public void setFile(final String name)
     {
         // Handle empty param
-        if ((aName == null) || (aName.trim().length() == 0)) {
+        if ((name == null) || (name.trim().length() == 0)) {
             return;
         }
 
         try {
-            mRoot = ImportControlLoader.load(new File(aName).toURI());
+            root = ImportControlLoader.load(new File(name).toURI());
         }
         catch (final CheckstyleException ex) {
-            throw new ConversionException("Unable to load " + aName, ex);
+            throw new ConversionException("Unable to load " + name, ex);
         }
     }
 }
