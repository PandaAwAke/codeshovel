diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java
index d55d6320b..32dffcdf1 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java
@@ -458,105 +458,105 @@ public class VariableDeclarationUsageDistanceCheck extends Check {
      * @return entry which contains expression with variable usage and distance.
      */
     private static Entry<DetailAST, Integer> calculateDistanceBetweenScopes(
             DetailAST ast, DetailAST variable) {
         int dist = 0;
         DetailAST currentScopeAst = ast;
         DetailAST variableUsageAst = null;
         while (currentScopeAst != null) {
             final Entry<List<DetailAST>, Integer> searchResult =
                     searchVariableUsageExpressions(variable, currentScopeAst);
 
             currentScopeAst = null;
 
             final List<DetailAST> variableUsageExpressions = searchResult.getKey();
             dist += searchResult.getValue();
 
             // If variable usage exists in a single scope, then look into
             // this scope and count distance until variable usage.
             if (variableUsageExpressions.size() == 1) {
                 final DetailAST blockWithVariableUsage = variableUsageExpressions
                         .get(0);
                 DetailAST exprWithVariableUsage = null;
                 switch (blockWithVariableUsage.getType()) {
                     case TokenTypes.VARIABLE_DEF:
                     case TokenTypes.EXPR:
                         dist++;
                         break;
                     case TokenTypes.LITERAL_FOR:
                     case TokenTypes.LITERAL_WHILE:
                     case TokenTypes.LITERAL_DO:
                         exprWithVariableUsage = getFirstNodeInsideForWhileDoWhileBlocks(
                             blockWithVariableUsage, variable);
                         break;
                     case TokenTypes.LITERAL_IF:
                         exprWithVariableUsage = getFirstNodeInsideIfBlock(
                             blockWithVariableUsage, variable);
                         break;
                     case TokenTypes.LITERAL_SWITCH:
                         exprWithVariableUsage = getFirstNodeInsideSwitchBlock(
                             blockWithVariableUsage, variable);
                         break;
                     case TokenTypes.LITERAL_TRY:
                         exprWithVariableUsage =
                             getFirstNodeInsideTryCatchFinallyBlocks(blockWithVariableUsage,
                                 variable);
                         break;
                     default:
                         exprWithVariableUsage = blockWithVariableUsage.getFirstChild();
                 }
                 currentScopeAst = exprWithVariableUsage;
-                if (exprWithVariableUsage != null) {
-                    variableUsageAst = exprWithVariableUsage;
+                if (exprWithVariableUsage == null) {
+                    variableUsageAst = blockWithVariableUsage;
                 }
                 else {
-                    variableUsageAst = blockWithVariableUsage;
+                    variableUsageAst = exprWithVariableUsage;
                 }
             }
             // If variable usage exists in different scopes, then distance =
             // distance until variable first usage.
             else if (variableUsageExpressions.size() > 1) {
                 dist++;
                 variableUsageAst = variableUsageExpressions.get(0);
             }
             // If there's no any variable usage, then distance = 0.
             else {
                 variableUsageAst = null;
             }
         }
         return new SimpleEntry<>(variableUsageAst, dist);
     }
 
     /**
      * Searches variable usages starting from specified statement.
      * @param variableAst Variable that is used.
      * @param statementAst DetailAST to start searching from.
      * @return entry which contains list with found expressions that use the variable
      *     and distance from specified statement to first found expression.
      */
     private static Entry<List<DetailAST>, Integer>
         searchVariableUsageExpressions(final DetailAST variableAst, final DetailAST statementAst) {
         final List<DetailAST> variableUsageExpressions = new ArrayList<>();
         int distance = 0;
         DetailAST currentStatementAst = statementAst;
         while (currentStatementAst != null
                 && currentStatementAst.getType() != TokenTypes.RCURLY) {
             if (currentStatementAst.getFirstChild() != null) {
                 if (isChild(currentStatementAst, variableAst)) {
                     variableUsageExpressions.add(currentStatementAst);
                 }
                 // If expression doesn't contain variable and this variable
                 // hasn't been met yet, than distance + 1.
                 else if (variableUsageExpressions.isEmpty()
                         && currentStatementAst.getType() != TokenTypes.VARIABLE_DEF) {
                     distance++;
                 }
             }
             currentStatementAst = currentStatementAst.getNextSibling();
         }
         return new SimpleEntry<>(variableUsageExpressions, distance);
     }
 
     /**
      * Gets first Ast node inside FOR, WHILE or DO-WHILE blocks if variable
      * usage is met only inside the block (not in its declaration!).
      * @param block
