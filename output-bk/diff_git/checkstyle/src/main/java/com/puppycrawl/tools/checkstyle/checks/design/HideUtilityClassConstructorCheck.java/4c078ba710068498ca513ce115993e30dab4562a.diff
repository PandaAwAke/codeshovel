diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java
index b48bbf08d..ec9cc5168 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java
@@ -41,110 +41,110 @@ public class HideUtilityClassConstructorCheck extends Check {
      */
     public static final String MSG_KEY = "hide.utility.class";
 
     @Override
     public int[] getDefaultTokens() {
         return new int[] {TokenTypes.CLASS_DEF};
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.CLASS_DEF};
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         if (isAbstract(ast)) {
             // abstract class could not have private constructor
             return;
         }
         final boolean hasStaticModifier = isStatic(ast);
 
         final Details details = new Details(ast);
         details.invoke();
 
         final boolean hasDefaultCtor = details.isHasDefaultCtor();
         final boolean hasPublicCtor = details.isHasPublicCtor();
         final boolean hasMethodOrField = details.isHasMethodOrField();
         final boolean hasNonStaticMethodOrField = details.isHasNonStaticMethodOrField();
         final boolean hasNonPrivateStaticMethodOrField =
                 details.isHasNonPrivateStaticMethodOrField();
 
         final boolean hasAccessibleCtor = hasDefaultCtor || hasPublicCtor;
 
         // figure out if class extends java.lang.object directly
         // keep it simple for now and get a 99% solution
         final boolean extendsJLO = // J.Lo even made it into in our sources :-)
             ast.findFirstToken(TokenTypes.EXTENDS_CLAUSE) == null;
 
         final boolean isUtilClass = extendsJLO && hasMethodOrField
             && !hasNonStaticMethodOrField && hasNonPrivateStaticMethodOrField;
 
         if (isUtilClass && hasAccessibleCtor && !hasStaticModifier) {
             log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY);
         }
     }
 
     /**
      * @param ast class definition for check.
      * @return true if a given class declared as abstract.
      */
-    private boolean isAbstract(DetailAST ast) {
+    private static boolean isAbstract(DetailAST ast) {
         return ast.findFirstToken(TokenTypes.MODIFIERS)
             .branchContains(TokenTypes.ABSTRACT);
     }
 
     /**
      * @param ast class definition for check.
      * @return true if a given class declared as static.
      */
-    private boolean isStatic(DetailAST ast) {
+    private static boolean isStatic(DetailAST ast) {
         return ast.findFirstToken(TokenTypes.MODIFIERS)
             .branchContains(TokenTypes.LITERAL_STATIC);
     }
 
     /**
      * Details of class that are required for validation
      */
     private static class Details {
         /** class ast */
         private DetailAST ast;
         /** result of details gathering */
         private boolean hasMethodOrField;
         /** result of details gathering */
         private boolean hasNonStaticMethodOrField;
         /** result of details gathering */
         private boolean hasNonPrivateStaticMethodOrField;
         /** result of details gathering */
         private boolean hasDefaultCtor;
         /** result of details gathering */
         private boolean hasPublicCtor;
 
         /** c-tor
          * @param ast class ast
          * */
         public Details(DetailAST ast) {
             this.ast = ast;
         }
 
         /**
          * getter
          * @return boolean
          */
         public boolean isHasMethodOrField() {
             return hasMethodOrField;
         }
 
         /**
          * getter
          * @return boolean
          */
         public boolean isHasNonStaticMethodOrField() {
             return hasNonStaticMethodOrField;
         }
 
         /**
          * getter
          * @return boolean
          */
         public boolean isHasNonPrivateStaticMethodOrField() {
             return hasNonPrivateStaticMethodOrField;
