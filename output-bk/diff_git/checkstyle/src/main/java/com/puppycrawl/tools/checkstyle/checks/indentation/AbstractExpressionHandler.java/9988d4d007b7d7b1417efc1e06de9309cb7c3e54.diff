diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
index 50cd08190..8ee44518d 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
@@ -149,119 +149,116 @@ public abstract class AbstractExpressionHandler {
     protected final void logError(DetailAST ast, String subtypeName,
                                   int actualLevel, IndentLevel expectedLevel) {
         final String typeStr =
                 "".equals(subtypeName) ? "" : " " + subtypeName;
         String messageKey = MSG_ERROR;
         if (expectedLevel.isMultiLevel()) {
             messageKey = MSG_ERROR_MULTI;
         }
         indentCheck.indentationLog(ast.getLineNo(), messageKey,
             typeName + typeStr, actualLevel, expectedLevel);
     }
 
     /**
      * Log child indentation error.
      *
      * @param line           the expression that caused the error
      * @param actualLevel   the actual indent level of the expression
      * @param expectedLevel the expected indent level of the expression
      */
     private void logChildError(int line,
                                int actualLevel,
                                IndentLevel expectedLevel) {
         String messageKey = MSG_CHILD_ERROR;
         if (expectedLevel.isMultiLevel()) {
             messageKey = MSG_CHILD_ERROR_MULTI;
         }
         indentCheck.indentationLog(line, messageKey,
             typeName, actualLevel, expectedLevel);
     }
 
     /**
      * Determines if the given expression is at the start of a line.
      *
      * @param ast   the expression to check
      *
      * @return true if it is, false otherwise
      */
     protected final boolean startsLine(DetailAST ast) {
         return getLineStart(ast) == expandedTabsColumnNo(ast);
     }
 
     /**
      * Determines if two expressions are on the same line.
      *
      * @param ast1   the first expression
      * @param ast2   the second expression
      *
      * @return true if they are, false otherwise
      */
     static boolean areOnSameLine(DetailAST ast1, DetailAST ast2) {
-        return ast1 != null && ast2 != null
-            && ast1.getLineNo() == ast2.getLineNo();
+        return ast1.getLineNo() == ast2.getLineNo();
     }
 
     /**
      * Searchs in given sub-tree (including given node) for the token
      * which represents first symbol for this sub-tree in file.
      * @param ast a root of sub-tree in which the search shoul be performed.
      * @return a token which occurs first in the file.
      */
     static DetailAST getFirstToken(DetailAST ast) {
         DetailAST first = ast;
         DetailAST child = ast.getFirstChild();
 
         while (child != null) {
             final DetailAST toTest = getFirstToken(child);
-            if (toTest.getLineNo() < first.getLineNo()
-                || toTest.getLineNo() == first.getLineNo()
-                    && toTest.getColumnNo() < first.getColumnNo()) {
+            if (toTest.getColumnNo() < first.getColumnNo()) {
                 first = toTest;
             }
             child = child.getNextSibling();
         }
 
         return first;
     }
 
     /**
      * Get the start of the line for the given expression.
      *
      * @param ast   the expression to find the start of the line for
      *
      * @return the start of the line for the given expression
      */
     protected final int getLineStart(DetailAST ast) {
         final String line = indentCheck.getLine(ast.getLineNo() - 1);
         return getLineStart(line);
     }
 
     /**
      * Check the indentation of consecutive lines for the expression we are
      * handling.
      *
      * @param startLine     the first line to check
      * @param endLine       the last line to check
      * @param indentLevel   the required indent level
      */
     protected final void checkLinesIndent(int startLine, int endLine,
         IndentLevel indentLevel) {
         // check first line
         checkSingleLine(startLine, indentLevel);
 
         // check following lines
         final IndentLevel offsetLevel =
             new IndentLevel(indentLevel, getBasicOffset());
         for (int i = startLine + 1; i <= endLine; i++) {
             checkSingleLine(i, offsetLevel);
         }
     }
 
     /**
      * @return true if indentation should be increased after
      *              fisrt line in checkLinesIndent()
      *         false otherwise
      */
     protected boolean shouldIncreaseIndent() {
         return true;
     }
 
@@ -317,109 +314,106 @@ public abstract class AbstractExpressionHandler {
                 checkSingleLine(i, col.intValue(), theLevel, false);
             }
         }
     }
 
     /**
      * Check the indent level for a single line.
      *
      * @param lineNum       the line number to check
      * @param indentLevel   the required indent level
      */
     private void checkSingleLine(int lineNum, IndentLevel indentLevel) {
         final String line = indentCheck.getLine(lineNum - 1);
         final int start = getLineStart(line);
         if (indentLevel.greaterThan(start)) {
             logChildError(lineNum, start, indentLevel);
         }
     }
 
     /**
      * Check the indentation for a single line.
      *
      * @param lineNum       the number of the line to check
      * @param colNum        the column number we are starting at
      * @param indentLevel   the indentation level
      * @param mustMatch     whether or not the indentation level must match
      */
 
     private void checkSingleLine(int lineNum, int colNum,
         IndentLevel indentLevel, boolean mustMatch) {
         final String line = indentCheck.getLine(lineNum - 1);
         final int start = getLineStart(line);
         // if must match is set, it is an error if the line start is not
         // at the correct indention level; otherwise, it is an only an
         // error if this statement starts the line and it is less than
         // the correct indentation level
         if (mustMatch ? !indentLevel.accept(start)
             : colNum == start && indentLevel.greaterThan(start)) {
             logChildError(lineNum, start, indentLevel);
         }
     }
 
     /**
      * Get the start of the specified line.
      *
      * @param line   the specified line number
      *
      * @return the start of the specified line
      */
     protected final int getLineStart(String line) {
-        for (int start = 0; start < line.length(); start++) {
-            final char c = line.charAt(start);
-
-            if (!Character.isWhitespace(c)) {
-                return Utils.lengthExpandedTabs(
-                    line, start, indentCheck.getIndentationTabWidth());
-            }
+        int index = 0;
+        while (Character.isWhitespace(line.charAt(index))) {
+            index++;
         }
-        return 0;
+        return Utils.lengthExpandedTabs(
+            line, index, indentCheck.getIndentationTabWidth());
     }
 
     /**
      * Check the indent level of the children of the specified parent
      * expression.
      *
      * @param parent             the parent whose children we are checking
      * @param tokenTypes         the token types to check
      * @param startLevel         the starting indent level
      * @param firstLineMatches   whether or not the first line needs to match
      * @param allowNesting       whether or not nested children are allowed
      */
     protected final void checkChildren(DetailAST parent,
                                        int[] tokenTypes,
                                        IndentLevel startLevel,
                                        boolean firstLineMatches,
                                        boolean allowNesting) {
         Arrays.sort(tokenTypes);
         for (DetailAST child = parent.getFirstChild();
                 child != null;
                 child = child.getNextSibling()) {
             if (Arrays.binarySearch(tokenTypes, child.getType()) >= 0) {
                 checkExpressionSubtree(child, startLevel,
                     firstLineMatches, allowNesting);
             }
         }
     }
 
     /**
      * Check the indentation level for an expression subtree.
      *
      * @param tree               the expression subtree to check
      * @param level              the indentation level
      * @param firstLineMatches   whether or not the first line has to match
      * @param allowNesting       whether or not subtree nesting is allowed
      */
     protected final void checkExpressionSubtree(
         DetailAST tree,
         IndentLevel level,
         boolean firstLineMatches,
         boolean allowNesting
     ) {
         final LineSet subtreeLines = new LineSet();
         final int firstLine = getFirstLine(Integer.MAX_VALUE, tree);
         if (firstLineMatches && !allowNesting) {
             subtreeLines.addLineAndCol(firstLine,
                 getLineStart(indentCheck.getLine(firstLine - 1)));
         }
         findSubtreeLines(subtreeLines, tree, allowNesting);
 
@@ -429,102 +423,101 @@ public abstract class AbstractExpressionHandler {
     /**
      * Get the first line for a given expression.
      *
      * @param startLine   the line we are starting from
      * @param tree        the expression to find the first line for
      *
      * @return the first line of the expression
      */
     protected final int getFirstLine(int startLine, DetailAST tree) {
         int realStart = startLine;
         final int currLine = tree.getLineNo();
         if (currLine < realStart) {
             realStart = currLine;
         }
 
         // check children
         for (DetailAST node = tree.getFirstChild();
             node != null;
             node = node.getNextSibling()) {
             realStart = getFirstLine(realStart, node);
         }
 
         return realStart;
     }
 
     /**
      * Get the column number for the start of a given expression, expanding
      * tabs out into spaces in the process.
      *
      * @param ast   the expression to find the start of
      *
      * @return the column number for the start of the expression
      */
     protected final int expandedTabsColumnNo(DetailAST ast) {
         final String line =
             indentCheck.getLine(ast.getLineNo() - 1);
 
         return Utils.lengthExpandedTabs(line, ast.getColumnNo(),
             indentCheck.getIndentationTabWidth());
     }
 
     /**
      * Find the set of lines for a given subtree.
      *
      * @param lines          the set of lines to add to
      * @param tree           the subtree to examine
      * @param allowNesting   whether or not to allow nested subtrees
      */
     protected final void findSubtreeLines(LineSet lines, DetailAST tree,
         boolean allowNesting) {
-        if (getIndentCheck().getHandlerFactory().isHandledType(tree.getType())
-            || tree.getLineNo() < 0) {
+        if (getIndentCheck().getHandlerFactory().isHandledType(tree.getType())) {
             return;
         }
 
         final int lineNum = tree.getLineNo();
         final Integer colNum = lines.getStartColumn(lineNum);
 
         final int thisLineColumn = expandedTabsColumnNo(tree);
         if (colNum == null || thisLineColumn < colNum.intValue()) {
             lines.addLineAndCol(lineNum, thisLineColumn);
         }
 
         // check children
         for (DetailAST node = tree.getFirstChild();
             node != null;
             node = node.getNextSibling()) {
             findSubtreeLines(lines, node, allowNesting);
         }
     }
 
     /**
      * Check the indentation level of modifiers.
      */
     protected void checkModifiers() {
         final DetailAST modifiers =
             mainAst.findFirstToken(TokenTypes.MODIFIERS);
         for (DetailAST modifier = modifiers.getFirstChild();
              modifier != null;
              modifier = modifier.getNextSibling()) {
             if (startsLine(modifier)
                 && !getLevel().accept(expandedTabsColumnNo(modifier))) {
                 logError(modifier, "modifier",
                     expandedTabsColumnNo(modifier));
             }
         }
     }
 
     /**
      * Check the indentation of the expression we are handling.
      */
     public abstract void checkIndentation();
 
     /**
      * Accessor for the IndentCheck attribute.
      *
      * @return the IndentCheck attribute
      */
     protected final IndentationCheck getIndentCheck() {
         return indentCheck;
     }
 
