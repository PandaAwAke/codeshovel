diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java
index fd9134183..9e2a309c2 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java
@@ -66,126 +66,126 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  */
 public class ModifierOrderCheck
     extends Check {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_ANNOTATION_ORDER = "annotation.order";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_MODIFIER_ORDER = "mod.order";
 
     /**
      * The order of modifiers as suggested in sections 8.1.1,
      * 8.3.1 and 8.4.3 of the JLS.
      */
     private static final String[] JLS_ORDER = {
         "public", "protected", "private", "abstract", "static", "final",
         "transient", "volatile", "synchronized", "native", "strictfp", "default",
     };
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.MODIFIERS};
     }
 
     @Override
     public int[] getRequiredTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final List<DetailAST> mods = Lists.newArrayList();
         DetailAST modifier = ast.getFirstChild();
         while (modifier != null) {
             mods.add(modifier);
             modifier = modifier.getNextSibling();
         }
 
         if (!mods.isEmpty()) {
-            final DetailAST error = checkOrderSuggestedByJLS(mods);
+            final DetailAST error = checkOrderSuggestedByJls(mods);
             if (error != null) {
                 if (error.getType() == TokenTypes.ANNOTATION) {
                     log(error.getLineNo(), error.getColumnNo(),
                             MSG_ANNOTATION_ORDER,
                              error.getFirstChild().getText()
                              + error.getFirstChild().getNextSibling()
                                 .getText());
                 }
                 else {
                     log(error.getLineNo(), error.getColumnNo(),
                             MSG_MODIFIER_ORDER, error.getText());
                 }
             }
         }
     }
 
     /**
      * Checks if the modifiers were added in the order suggested
      * in the Java language specification.
      *
      * @param modifiers list of modifier AST tokens
      * @return null if the order is correct, otherwise returns the offending
      *     modifier AST.
      */
-    private static DetailAST checkOrderSuggestedByJLS(List<DetailAST> modifiers) {
+    private static DetailAST checkOrderSuggestedByJls(List<DetailAST> modifiers) {
         final Iterator<DetailAST> iterator = modifiers.iterator();
 
         //Speed past all initial annotations
         DetailAST modifier = skipAnnotations(iterator);
 
         DetailAST offendingModifier = null;
 
         //All modifiers are annotations, no problem
         if (modifier.getType() != TokenTypes.ANNOTATION) {
             int index = 0;
 
             while (modifier != null
                     && offendingModifier == null) {
 
                 if (modifier.getType() == TokenTypes.ANNOTATION) {
                     //Annotation not at start of modifiers, bad
                     offendingModifier = modifier;
                     break;
                 }
 
                 while (index < JLS_ORDER.length
                        && !JLS_ORDER[index].equals(modifier.getText())) {
                     index++;
                 }
 
                 if (index == JLS_ORDER.length) {
                     //Current modifier is out of JLS order
                     offendingModifier = modifier;
                 }
                 else if (iterator.hasNext()) {
                     modifier = iterator.next();
                 }
                 else {
                     //Reached end of modifiers without problem
                     modifier = null;
                 }
             }
         }
         return offendingModifier;
     }
 
     /**
      * Skip all annotations in modifier block.
      * @param modifierIterator iterator for collection of modifiers
      * @return modifier next to last annotation
      */
     private static DetailAST skipAnnotations(Iterator<DetailAST> modifierIterator) {
         DetailAST modifier;
         do {
             modifier = modifierIterator.next();
