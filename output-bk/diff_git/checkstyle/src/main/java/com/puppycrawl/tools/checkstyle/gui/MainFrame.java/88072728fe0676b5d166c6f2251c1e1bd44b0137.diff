diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/MainFrame.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/MainFrame.java
index c15b8ea56..1701a985c 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/MainFrame.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/MainFrame.java
@@ -73,101 +73,101 @@ public class MainFrame extends JFrame {
 
         textArea = new JTextArea(20, 15);
         textArea.setEditable(false);
         final JScrollPane textAreaScrollPane = new JScrollPane(textArea);
 
         parseTreeTableModel = new ParseTreeTableModel(null);
         treeTable = new JTreeTable(parseTreeTableModel);
         treeTable.setEditor(textArea);
         treeTable.setLinePositionMap(model.getLinesToPosition());
         final JScrollPane treeTableScrollPane = new JScrollPane(treeTable);
 
         final JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, treeTableScrollPane,
             textAreaScrollPane);
         add(splitPane, BorderLayout.CENTER);
         splitPane.setResizeWeight(0.7);
 
         add(createButtonsPanel(), BorderLayout.PAGE_END);
 
         pack();
     }
 
     /**
      * Create buttons panel.
      * @return buttons panel.
      */
     private JPanel createButtonsPanel() {
         final JButton openFileButton = new JButton(new FileSelectionAction());
         openFileButton.setMnemonic(KeyEvent.VK_S);
         openFileButton.setText("Open File");
 
         reloadAction.setEnabled(false);
         final JButton reloadFileButton = new JButton(reloadAction);
         reloadFileButton.setMnemonic(KeyEvent.VK_R);
         reloadFileButton.setText("Reload File");
 
         final JPanel buttonPanel = new JPanel();
         buttonPanel.setLayout(new GridLayout(1, 2));
         buttonPanel.add(openFileButton);
         buttonPanel.add(reloadFileButton);
 
         return buttonPanel;
     }
 
     /**
      * Open file and load it.
      * @param sourceFile the file to open.
      */
     public void openFile(File sourceFile) {
         if (sourceFile != null) {
             try {
-                setTitle("Checkstyle : " + sourceFile.getName());
+                setTitle("Checkstyle GUI : " + sourceFile.getName());
                 final DetailAST parseTree = model.parseFile(sourceFile);
                 parseTreeTableModel.setParseTree(parseTree);
                 reloadAction.setEnabled(true);
 
                 final String[] sourceLines = model.getFileText(sourceFile).toLinesArray();
 
                 // clear for each new file
                 model.clearLinesToPosition();
                 // starts line counting at 1
                 model.addLineToPosition(0);
 
                 // clean the text area before inserting the lines of the new file
                 textArea.setText("");
 
                 // insert the contents of the file to the text area
                 for (final String element : sourceLines) {
                     model.addLineToPosition(textArea.getText().length());
                     textArea.append(element + System.lineSeparator());
                 }
 
                 treeTable.setLinePositionMap(model.getLinesToPosition());
             }
             catch (final IOException | ANTLRException ex) {
                 JOptionPane.showMessageDialog(this,
                     "Could not parse" + sourceFile + ": " + ex.getMessage());
             }
         }
     }
 
     /**
      * Handler for file selection action events.
      */
     private class FileSelectionAction extends AbstractAction {
         private static final long serialVersionUID = 1762396148873280589L;
 
         @Override
         public void actionPerformed(ActionEvent event) {
             final JFileChooser fileChooser = new JFileChooser(model.getLastDirectory());
             final FileFilter filter = new JavaFileFilter();
             fileChooser.setFileFilter(filter);
 
             final int returnCode = fileChooser.showOpenDialog(MainFrame.this);
             if (returnCode == JFileChooser.APPROVE_OPTION) {
                 final File file = fileChooser.getSelectedFile();
                 openFile(file);
             }
         }
     }
 
     /**
