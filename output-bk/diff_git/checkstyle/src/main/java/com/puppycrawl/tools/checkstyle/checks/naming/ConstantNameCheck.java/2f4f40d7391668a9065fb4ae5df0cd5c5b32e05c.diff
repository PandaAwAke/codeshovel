diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java
index 7c1821be6..b64b1ef97 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java
@@ -29,72 +29,69 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  * by the format property.
  * A <em>constant</em> is a <strong>static</strong> and <strong>final</strong>
  * field or an interface/annotation field, except
  * <strong>serialVersionUID</strong> and <strong>serialPersistentFields
  * </strong>.  The format is a regular expression
  * and defaults to <strong>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</strong>.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="ConstantName"/&gt;
  * </pre>
  *
  * <p>
  * An example of how to configure the check for names that are only upper case
  * letters and digits is:
  * </p>
  * <pre>
  * &lt;module name="ConstantName"&gt;
  *    &lt;property name="format" value="^[A-Z][A-Z0-9]*$"/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  *
  * @author Rick Giles
  */
 public class ConstantNameCheck
     extends AbstractAccessControlNameCheck {
     /** Creates a new <code>ConstantNameCheck</code> instance. */
     public ConstantNameCheck() {
         super("^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$");
     }
 
     @Override
     public int[] getDefaultTokens() {
         return new int[] {TokenTypes.VARIABLE_DEF};
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.VARIABLE_DEF};
     }
 
     @Override
     protected final boolean mustCheckName(DetailAST ast) {
         boolean retVal = false;
 
         final DetailAST modifiersAST =
             ast.findFirstToken(TokenTypes.MODIFIERS);
-        final boolean isStatic = modifiersAST != null
-            && modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);
-        final boolean isFinal = modifiersAST != null
-            && modifiersAST.branchContains(TokenTypes.FINAL);
+        final boolean isStatic = modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);
+        final boolean isFinal = modifiersAST.branchContains(TokenTypes.FINAL);
 
         if (isStatic  && isFinal && shouldCheckInScope(modifiersAST)
                 || ScopeUtils.inAnnotationBlock(ast)
                 || ScopeUtils.inInterfaceOrAnnotationBlock(ast)
                         && !ScopeUtils.inCodeBlock(ast)) {
             // Handle the serialVersionUID and serialPersistentFields constants
             // which are used for Serialization. Cannot enforce rules on it. :-)
             final DetailAST nameAST = ast.findFirstToken(TokenTypes.IDENT);
-            if (nameAST != null
-                && !"serialVersionUID".equals(nameAST.getText())
+            if (!"serialVersionUID".equals(nameAST.getText())
                 && !"serialPersistentFields".equals(nameAST.getText())) {
                 retVal = true;
             }
         }
 
         return retVal;
     }
 }
