diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
index c2ffd8b49..373143110 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
@@ -1,78 +1,81 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2015 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks.imports;
 
+import java.util.Locale;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+import org.apache.commons.beanutils.ConversionException;
+
+import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FullIdent;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
-import com.puppycrawl.tools.checkstyle.checks.AbstractOptionCheck;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 
 /**
  * <ul>
  * <li>groups imports: ensures that groups of imports come in a specific order
  * (e.g., java. comes first, javax. comes second, then everything else)</li>
  * <li>adds a separation between groups : ensures that a blank line sit between
  * each group</li>
  * <li>sorts imports inside each group: ensures that imports within each group
  * are in lexicographic order</li>
  * <li>sorts according to case: ensures that the comparison between import is
  * case sensitive</li>
  * <li>groups static imports: ensures that static imports are at the top (or the
  * bottom) of all the imports, or above (or under) each group, or are treated
  * like non static imports (@see {@link ImportOrderOption}</li>
  * </ul>
  *
  * <pre>
  * Properties:
  * </pre>
  * <table summary="Properties" border="1">
  *   <tr><th>name</th><th>Description</th><th>type</th><th>default value</th></tr>
  *   <tr><td>option</td><td>policy on the relative order between regular imports and static
  *       imports</td><td>{@link ImportOrderOption}</td><td>under</td></tr>
  *   <tr><td>groups</td><td>list of imports groups (every group identified either by a common
  *       prefix string, or by a regular expression enclosed in forward slashes (e.g. /regexp/)</td>
  *       <td>list of strings</td><td>empty list</td></tr>
  *   <tr><td>ordered</td><td>whether imports within group should be sorted</td>
  *       <td>Boolean</td><td>true</td></tr>
  *   <tr><td>separated</td><td>whether imports groups should be separated by, at least,
  *       one blank line</td><td>Boolean</td><td>false</td></tr>
  *   <tr><td>caseSensitive</td><td>whether string comparison should be case sensitive or not.
  *       Case sensitive sorting is in ASCII sort order</td><td>Boolean</td><td>true</td></tr>
  *   <tr><td>sortStaticImportsAlphabetically</td><td>whether static imports grouped by top or
  *       bottom option are sorted alphabetically or not</td><td>Boolean</td><td>false</td></tr>
  * </table>
  *
  * <p>
  * Example:
  * </p>
  * <p>To configure the check so that it matches default Eclipse formatter configuration
  *    (tested on Kepler, Luna and Mars):</p>
  * <ul>
  *     <li>group of static imports is on the top</li>
  *     <li>groups of non-static imports: &quot;java&quot; then &quot;javax&quot;
  *         packages first, then &quot;org&quot; and then all other imports</li>
  *     <li>imports will be sorted in the groups</li>
  *     <li>groups are separated by, at least, one blank line</li>
  * </ul>
  *
@@ -128,147 +131,167 @@ import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
  *
  * <p>
  * Group descriptions enclosed in slashes are interpreted as regular
  * expressions. If multiple groups match, the one matching a longer
  * substring of the imported name will take precedence, with ties
  * broken first in favor of earlier matches and finally in favor of
  * the first matching group.
  * </p>
  *
  * <p>
  * There is always a wildcard group to which everything not in a named group
  * belongs. If an import does not match a named group, the group belongs to
  * this wildcard group. The wildcard group position can be specified using the
  * {@code *} character.
  * </p>
  *
  * <p>Check also has on option making it more flexible:
  * <b>sortStaticImportsAlphabetically</b> - sets whether static imports grouped by
  * <b>top</b> or <b>bottom</b> option should be sorted alphabetically or
  * not, default value is <b>false</b>. It is applied to static imports grouped
  * with <b>top</b> or <b>bottom</b> options.<br>
  * This option is helping in reconciling of this Check and other tools like
  * Eclipse's Organize Imports feature.
  * </p>
  * <p>
  * To configure the Check allows static imports grouped to the <b>top</b>
  * being sorted alphabetically:
  * </p>
  *
  * <pre>
  * {@code
  * import static java.lang.Math.abs;
  * import static org.abego.treelayout.Configuration.AlignmentInLevel; // OK, alphabetical order
  *
  * import org.abego.*;
  *
  * import java.util.Set;
  *
  * public class SomeClass { ... }
  * }
  * </pre>
  *
  *
  * @author Bill Schneider
  * @author o_sukhodolsky
  * @author David DIDIER
  * @author Steve McKay
  * @author <a href="mailto:nesterenko-aleksey@list.ru">Aleksey Nesterenko</a>
  */
 public class ImportOrderCheck
-    extends AbstractOptionCheck<ImportOrderOption> {
+    extends Check {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_SEPARATION = "import.separation";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_ORDERING = "import.ordering";
 
     /** The special wildcard that catches all remaining groups. */
     private static final String WILDCARD_GROUP_NAME = "*";
 
     /** Empty array of pattern type needed to initialize check. */
     private static final Pattern[] EMPTY_PATTERN_ARRAY = new Pattern[0];
 
     /** List of import groups specified by the user. */
     private Pattern[] groups = EMPTY_PATTERN_ARRAY;
     /** Require imports in group be separated. */
     private boolean separated;
     /** Require imports in group. */
     private boolean ordered = true;
     /** Should comparison be case sensitive. */
     private boolean caseSensitive = true;
 
     /** Last imported group. */
     private int lastGroup;
     /** Line number of last import. */
     private int lastImportLine;
     /** Name of last import. */
     private String lastImport;
     /** If last import was static. */
     private boolean lastImportStatic;
     /** Whether there was any imports. */
     private boolean beforeFirstImport;
     /** Whether static imports should be sorted alphabetically or not. */
     private boolean sortStaticImportsAlphabetically;
 
+    /** The policy to enforce. */
+    private ImportOrderOption option = ImportOrderOption.UNDER;
+
+    /**
+     * Set the option to enforce.
+     * @param optionStr string to decode option from
+     * @throws ConversionException if unable to decode
+     */
+    public void setOption(String optionStr) {
+        try {
+            option = ImportOrderOption.valueOf(optionStr.trim().toUpperCase(Locale.ENGLISH));
+        }
+        catch (IllegalArgumentException iae) {
+            throw new ConversionException("unable to parse " + optionStr, iae);
+        }
+    }
+
     /**
-     * Groups static imports under each group.
+     * Gets option set.
+     * @return the {@code option} set
      */
-    public ImportOrderCheck() {
-        super(ImportOrderOption.UNDER, ImportOrderOption.class);
+    public ImportOrderOption getAbstractOption() {
+        // WARNING!! Do not rename this method to getOption(). It breaks
+        // BeanUtils, which will silently not call setOption. Very annoying!
+        return option;
     }
 
     /**
      * Sets the list of package groups and the order they should occur in the
      * file.
      *
      * @param packageGroups a comma-separated list of package names/prefixes.
      */
     public void setGroups(String... packageGroups) {
         groups = new Pattern[packageGroups.length];
 
         for (int i = 0; i < packageGroups.length; i++) {
             String pkg = packageGroups[i];
             final StringBuilder pkgBuilder = new StringBuilder(pkg);
             Pattern grp;
 
             // if the pkg name is the wildcard, make it match zero chars
             // from any name, so it will always be used as last resort.
             if (WILDCARD_GROUP_NAME.equals(pkg)) {
                 // matches any package
                 grp = Pattern.compile("");
             }
             else if (CommonUtils.startsWithChar(pkg, '/')) {
                 if (!CommonUtils.endsWithChar(pkg, '/')) {
                     throw new IllegalArgumentException("Invalid group");
                 }
                 pkg = pkg.substring(1, pkg.length() - 1);
                 grp = Pattern.compile(pkg);
             }
             else {
                 if (!CommonUtils.endsWithChar(pkg, '.')) {
                     pkgBuilder.append('.');
                 }
                 grp = Pattern.compile("^" + Pattern.quote(pkgBuilder.toString()));
             }
 
             groups[i] = grp;
         }
     }
 
     /**
      * Sets whether or not imports should be ordered within any one group of
      * imports.
      *
      * @param ordered
      *            whether lexicographic ordering of imports within a group
      *            required or not.
      */
     public void setOrdered(boolean ordered) {
         this.ordered = ordered;
