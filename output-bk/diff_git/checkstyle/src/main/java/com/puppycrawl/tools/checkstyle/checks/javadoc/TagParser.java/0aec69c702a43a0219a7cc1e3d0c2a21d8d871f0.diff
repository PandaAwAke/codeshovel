diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java
index eaea6414a..d28cc4d33 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java
@@ -221,81 +221,81 @@ class TagParser {
     private static Point findChar(String[] text, char character, Point from) {
         Point curr = new Point(from.getLineNo(), from.getColumnNo());
         while (curr.getLineNo() < text.length
                && text[curr.getLineNo()].charAt(curr.getColumnNo()) != character) {
             curr = getNextCharPos(text, curr);
         }
 
         return curr;
     }
 
     /**
      * Returns position of next comment character, skips
      * whitespaces and asterisks.
      * @param text to search.
      * @param from location to search from
      * @return location of the next character.
      */
     private static Point getNextCharPos(String[] text, Point from) {
         int line = from.getLineNo();
         int column = from.getColumnNo() + 1;
         while (line < text.length && column >= text[line].length()) {
             // go to the next line
             line++;
             column = 0;
             if (line < text.length) {
                 //skip beginning spaces and stars
                 final String currentLine = text[line];
                 while (column < currentLine.length()
                        && (Character.isWhitespace(currentLine.charAt(column))
                            || currentLine.charAt(column) == '*')) {
                     column++;
                     if (column < currentLine.length()
                         && currentLine.charAt(column - 1) == '*'
                         && currentLine.charAt(column) == '/') {
                         // this is end of comment
                         column = currentLine.length();
                     }
                 }
             }
         }
 
         return new Point(line, column);
     }
 
     /**
      * Represents current position in the text.
      * @author o_sukholsky
      */
     private static final class Point {
         /** Line number. */
-        private final int line;
+        private final int lineNo;
         /** Column number.*/
-        private final int column;
+        private final int columnNo;
 
         /**
          * Creates new {@code Point} instance.
          * @param lineNo line number
          * @param columnNo column number
          */
         Point(int lineNo, int columnNo) {
-            line = lineNo;
-            column = columnNo;
+            this.lineNo = lineNo;
+            this.columnNo = columnNo;
         }
 
         /**
          * Getter for line number.
          * @return line number of the position.
          */
         public int getLineNo() {
-            return line;
+            return lineNo;
         }
 
         /**
          * Getter for column number.
          * @return column number of the position.
          */
         public int getColumnNo() {
-            return column;
+            return columnNo;
         }
     }
 }
