diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java
index b1f8c99ed..66b820251 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java
@@ -85,77 +85,77 @@ public class MethodParamPadCheck
      */
     public static final String WS_NOT_PRECEDED = "ws.notPreceded";
 
     /** Whether whitespace is allowed if the method identifier is at a
      * linebreak */
     private boolean allowLineBreaks;
 
     /**
      * Sets the pad option to nospace.
      */
     public MethodParamPadCheck() {
         super(PadOption.NOSPACE, PadOption.class);
     }
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.CTOR_DEF,
             TokenTypes.LITERAL_NEW,
             TokenTypes.METHOD_CALL,
             TokenTypes.METHOD_DEF,
             TokenTypes.SUPER_CTOR_CALL,
         };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return ArrayUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final DetailAST parenAST;
         if (ast.getType() == TokenTypes.METHOD_CALL) {
             parenAST = ast;
         }
         else {
             parenAST = ast.findFirstToken(TokenTypes.LPAREN);
             // array construction => parenAST == null
             if (parenAST == null) {
                 return;
             }
         }
 
         final String line = getLines()[parenAST.getLineNo() - 1];
-        if (CommonUtils.whitespaceBefore(parenAST.getColumnNo(), line)) {
+        if (CommonUtils.hasWhitespaceBefore(parenAST.getColumnNo(), line)) {
             if (!allowLineBreaks) {
                 log(parenAST, LINE_PREVIOUS, parenAST.getText());
             }
         }
         else {
             final int before = parenAST.getColumnNo() - 1;
             if (getAbstractOption() == PadOption.NOSPACE
                 && Character.isWhitespace(line.charAt(before))) {
                 log(parenAST , WS_PRECEDED, parenAST.getText());
             }
             else if (getAbstractOption() == PadOption.SPACE
                      && !Character.isWhitespace(line.charAt(before))) {
                 log(parenAST, WS_NOT_PRECEDED, parenAST.getText());
             }
         }
     }
 
     /**
      * Control whether whitespace is flagged at line breaks.
      * @param allowLineBreaks whether whitespace should be
      * flagged at line breaks.
      */
     public void setAllowLineBreaks(boolean allowLineBreaks) {
         this.allowLineBreaks = allowLineBreaks;
     }
 }
