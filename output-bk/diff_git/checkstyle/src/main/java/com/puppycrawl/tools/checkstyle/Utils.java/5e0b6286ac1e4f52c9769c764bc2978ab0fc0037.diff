diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java b/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java
index 31148b66b..dd0fe45bc 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java
@@ -1,87 +1,131 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2015 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle;
 
+import com.google.common.collect.ImmutableMap;
+import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import org.apache.commons.beanutils.ConversionException;
 
 import java.io.File;
+import java.lang.reflect.Field;
 import java.nio.file.Path;
 import java.nio.file.Paths;
+import java.util.ResourceBundle;
 import java.util.regex.Pattern;
 import java.util.regex.PatternSyntaxException;
 
 /**
  * Contains utility methods.
  *
  * @author <a href="mailto:nesterenko-aleksey@list.ru">Aleksey Nesterenko</a>
  */
 public final class Utils
 {
 
+    /** maps from a token name to value */
+    private static final ImmutableMap<String, Integer> TOKEN_NAME_TO_VALUE;
+    /** maps from a token value to name */
+    private static final String[] TOKEN_VALUE_TO_NAME;
+
+    // initialise the constants
+    static {
+        final ImmutableMap.Builder<String, Integer> builder =
+                ImmutableMap.builder();
+        final Field[] fields = TokenTypes.class.getDeclaredFields();
+        String[] tempTokenValueToName = new String[0];
+        for (final Field f : fields) {
+            // Only process the int declarations.
+            if (f.getType() != Integer.TYPE) {
+                continue;
+            }
+
+            final String name = f.getName();
+            try {
+                final int tokenValue = f.getInt(name);
+                builder.put(name, tokenValue);
+                if (tokenValue > tempTokenValueToName.length - 1) {
+                    final String[] temp = new String[tokenValue + 1];
+                    System.arraycopy(tempTokenValueToName, 0,
+                            temp, 0, tempTokenValueToName.length);
+                    tempTokenValueToName = temp;
+                }
+                tempTokenValueToName[tokenValue] = name;
+            }
+            catch (final IllegalArgumentException | IllegalAccessException e) {
+                throw new IllegalStateException(
+                        "Failed to instantiate collection of Java tokens", e);
+            }
+        }
+
+        TOKEN_NAME_TO_VALUE = builder.build();
+        TOKEN_VALUE_TO_NAME = tempTokenValueToName;
+    }
+
+
     /** stop instances being created **/
     private Utils()
     {
     }
 
     /**
      * Returns whether the file extension matches what we are meant to
      * process.
      * @param file the file to be checked.
      * @param fileExtensions files extensions, empty property in config makes it matches to all.
      * @return whether there is a match.
      */
     public static boolean fileExtensionMatches(File file, String... fileExtensions)
     {
         boolean result = false;
         if (fileExtensions == null || fileExtensions.length == 0) {
             result = true;
         }
         else {
             // normalize extensions so all of them have a leading dot
             final String[] withDotExtensions = new String[fileExtensions.length];
             for (int i = 0; i < fileExtensions.length; i++) {
                 final String extension = fileExtensions[i];
                 if (startsWithChar(extension, '.')) {
                     withDotExtensions[i] = extension;
                 }
                 else {
                     withDotExtensions[i] = "." + extension;
                 }
             }
 
             final String fileName = file.getName();
             for (final String fileExtension : withDotExtensions) {
                 if (fileName.endsWith(fileExtension)) {
                     result = true;
                 }
             }
         }
 
         return result;
     }
 
     /**
      * Returns whether the specified string contains only whitespace up to the
      * specified index.
      *
      * @param index index to check up to
      * @param line the line to check
      * @return whether there is only whitespace
      */
@@ -187,51 +231,126 @@ public final class Utils
     /**
      * Constructs a normalized relative path between base directory and a given path.
      * @param baseDirectory the base path to which given path is relativized
      * @param path the path to relativize against base directory
      * @return the relative normalized path between base directory and path or path if base
      * directory is null
      */
     public static String relativizeAndNormalizePath(final String baseDirectory, final String path)
     {
         if (baseDirectory == null) {
             return path;
         }
         final Path pathAbsolute = Paths.get(path).normalize();
         final Path pathBase = Paths.get(baseDirectory).normalize();
         return pathBase.relativize(pathAbsolute).toString();
     }
 
     /**
      * Tests if this string starts with the specified prefix.
      * <p/>
      * It is faster version of {@link String#startsWith(String)} optimized for one-character
      * prefixes at the expense of some readability. Suggested by SimplifyStartsWith PMD rule:
      * http://pmd.sourceforge.net/pmd-5.3.1/pmd-java/rules/java/optimizations.html#SimplifyStartsWith
      *
      * @param string the <code>String</code> to check
      * @param prefix the prefix to find
      * @return <code>true</code> if the <code>char</code> is a prefix of the given
      * <code>String</code>; <code>false</code> otherwise.
      */
     public static boolean startsWithChar(String string, char prefix)
     {
         return string.length() > 0 && string.charAt(0) == prefix;
     }
 
     /**
      * Tests if this string ends with the specified suffix.
      * <p/>
      * It is faster version of {@link String#endsWith(String)} optimized for one-character
      * suffixes at the expense of some readability. Suggested by SimplifyStartsWith PMD rule:
      * http://pmd.sourceforge.net/pmd-5.3.1/pmd-java/rules/java/optimizations.html#SimplifyStartsWith
      *
      * @param string the <code>String</code> to check
      * @param suffix the suffix to find
      * @return <code>true</code> if the <code>char</code> is a suffix of the given
      * <code>String</code>; <code>false</code> otherwise.
      */
     public static boolean endsWithChar(String string, char suffix)
     {
         return string.length() > 0 && string.charAt(string.length() - 1) == suffix;
     }
+
+    /**
+     * Returns the name of a token for a given ID.
+     * @param iD the ID of the token name to get
+     * @return a token name
+     */
+    public static String getTokenName(int iD)
+    {
+        if (iD > TOKEN_VALUE_TO_NAME.length - 1) {
+            throw new IllegalArgumentException("given id " + iD);
+        }
+        final String name = TOKEN_VALUE_TO_NAME[iD];
+        if (name == null) {
+            throw new IllegalArgumentException("given id " + iD);
+        }
+        return name;
+    }
+
+    /**
+     * Returns the ID of a token for a given name.
+     * @param name the name of the token ID to get
+     * @return a token ID
+     */
+    public static int getTokenId(String name)
+    {
+        final Integer id = TOKEN_NAME_TO_VALUE.get(name);
+        if (id == null) {
+            throw new IllegalArgumentException("given name " + name);
+        }
+        return id.intValue();
+    }
+
+    /**
+     * Returns the short description of a token for a given name.
+     * @param name the name of the token ID to get
+     * @return a short description
+     */
+    public static String getShortDescription(String name)
+    {
+        if (!TOKEN_NAME_TO_VALUE.containsKey(name)) {
+            throw new IllegalArgumentException("given name " + name);
+        }
+
+        final String tokentypes =
+            "com.puppycrawl.tools.checkstyle.api.tokentypes";
+        final ResourceBundle bundle = ResourceBundle.getBundle(tokentypes);
+        return bundle.getString(name);
+    }
+
+    /**
+     * Is argument comment-related type (SINGLE_LINE_COMMENT,
+     * BLOCK_COMMENT_BEGIN, BLOCK_COMMENT_END, COMMENT_CONTENT).
+     * @param type
+     *        token type.
+     * @return true if type is comment-related type.
+     */
+    public static boolean isCommentType(int type)
+    {
+        return type == TokenTypes.SINGLE_LINE_COMMENT
+                || type == TokenTypes.BLOCK_COMMENT_BEGIN
+                || type == TokenTypes.BLOCK_COMMENT_END
+                || type == TokenTypes.COMMENT_CONTENT;
+    }
+
+    /**
+     * Is argument comment-related type name (SINGLE_LINE_COMMENT,
+     * BLOCK_COMMENT_BEGIN, BLOCK_COMMENT_END, COMMENT_CONTENT).
+     * @param type
+     *        token type name.
+     * @return true if type is comment-related type name.
+     */
+    public static boolean isCommentType(String type)
+    {
+        return isCommentType(getTokenId(type));
+    }
 }
