diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
index 42663be92..93481b800 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
@@ -202,101 +202,101 @@ public class ImportOrderCheck
     /** Should comparison be case sensitive. */
     private boolean caseSensitive = true;
 
     /** Last imported group. */
     private int lastGroup;
     /** Line number of last import. */
     private int lastImportLine;
     /** Name of last import. */
     private String lastImport;
     /** If last import was static. */
     private boolean lastImportStatic;
     /** Whether there was any imports. */
     private boolean beforeFirstImport;
     /** Whether static imports should be sorted alphabetically or not. */
     private boolean sortStaticImportsAlphabetically;
 
     /**
      * Groups static imports under each group.
      */
     public ImportOrderCheck() {
         super(ImportOrderOption.UNDER, ImportOrderOption.class);
     }
 
     /**
      * Sets the list of package groups and the order they should occur in the
      * file.
      *
      * @param packageGroups a comma-separated list of package names/prefixes.
      */
     public void setGroups(String... packageGroups) {
         groups = new Pattern[packageGroups.length];
 
         for (int i = 0; i < packageGroups.length; i++) {
             String pkg = packageGroups[i];
             Pattern grp;
 
             // if the pkg name is the wildcard, make it match zero chars
             // from any name, so it will always be used as last resort.
             if (WILDCARD_GROUP_NAME.equals(pkg)) {
                 grp = Pattern.compile(""); // matches any package
             }
             else if (Utils.startsWithChar(pkg, '/')) {
                 if (!Utils.endsWithChar(pkg, '/')) {
                     throw new IllegalArgumentException("Invalid group");
                 }
                 pkg = pkg.substring(1, pkg.length() - 1);
                 grp = Pattern.compile(pkg);
             }
             else {
                 if (!Utils.endsWithChar(pkg, '.')) {
-                    pkg = pkg + ".";
+                    pkg += ".";
                 }
                 grp = Pattern.compile("^" + Pattern.quote(pkg));
             }
 
             groups[i] = grp;
         }
     }
 
     /**
      * Sets whether or not imports should be ordered within any one group of
      * imports.
      *
      * @param ordered
      *            whether lexicographic ordering of imports within a group
      *            required or not.
      */
     public void setOrdered(boolean ordered) {
         this.ordered = ordered;
     }
 
     /**
      * Sets whether or not groups of imports must be separated from one another
      * by at least one blank line.
      *
      * @param separated
      *            whether groups should be separated by oen blank line.
      */
     public void setSeparated(boolean separated) {
         this.separated = separated;
     }
 
     /**
      * Sets whether string comparison should be case sensitive or not.
      *
      * @param caseSensitive
      *            whether string comparison should be case sensitive.
      */
     public void setCaseSensitive(boolean caseSensitive) {
         this.caseSensitive = caseSensitive;
     }
 
     /**
      * Sets whether static imports (when grouped using 'top' and 'bottom' option)
      * are sorted alphabetically or according to the package groupings.
      * @param sortAlphabetically true or false.
      */
     public void setSortStaticImportsAlphabetically(boolean sortAlphabetically) {
         this.sortStaticImportsAlphabetically = sortAlphabetically;
     }
 
