diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/AstTreeStringPrinter.java b/src/main/java/com/puppycrawl/tools/checkstyle/AstTreeStringPrinter.java
index c1b5de6aa..dc3c88c42 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/AstTreeStringPrinter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/AstTreeStringPrinter.java
@@ -67,102 +67,101 @@ public final class AstTreeStringPrinter {
      */
     public static String printFileAst(File file, boolean withComments)
             throws IOException, CheckstyleException {
         return printTree(parseFile(file, withComments));
     }
 
     /**
      * Prints full AST (java + comments + javadoc) of the java file.
      * @param file java file
      * @return Full tree
      * @throws IOException Failed to open a file
      * @throws CheckstyleException error while parsing the file
      */
     public static String printJavaAndJavadocTree(File file)
             throws IOException, CheckstyleException {
         final DetailAST tree = parseFile(file, true);
         return printJavaAndJavadocTree(tree);
     }
 
     /**
      * Prints full tree (java + comments + javadoc) of the DetailAST.
      * @param ast root DetailAST
      * @return Full tree
      */
     private static String printJavaAndJavadocTree(DetailAST ast) {
         final StringBuilder messageBuilder = new StringBuilder();
         DetailAST node = ast;
         while (node != null) {
             if (node.getType() == TokenTypes.BLOCK_COMMENT_BEGIN
                     && JavadocUtils.isJavadocComment(node)) {
                 final String javadocTree = parseAndPrintJavadocTree(node);
                 messageBuilder.append(javadocTree);
             }
             else {
                 messageBuilder.append(getIndentation(node))
                     .append(getNodeInfo(node))
                     .append(LINE_SEPARATOR)
                     .append(printJavaAndJavadocTree(node.getFirstChild()));
             }
             node = node.getNextSibling();
         }
         return messageBuilder.toString();
     }
 
     /**
      * Parses block comment as javadoc and prints its tree.
      * @param node block comment begin
      * @return string javadoc tree
      */
     private static String parseAndPrintJavadocTree(DetailAST node) {
-        final JavadocDetailNodeParser parser = new JavadocDetailNodeParser();
-        final DetailNode tree = parser.parseJavadocAsDetailNode(node).getTree();
+        final DetailNode tree = DetailNodeTreeStringPrinter.parseJavadocAsDetailNode(node);
 
         final String rootPrefix = getIndentation(node);
         final String prefix = rootPrefix.substring(0, rootPrefix.length() - 2) + "   ";
         return DetailNodeTreeStringPrinter.printTree(tree, rootPrefix, prefix);
     }
 
     /**
      * Parse a file and print the parse tree.
      * @param text the text to parse.
      * @param withComments true to include comments to AST
      * @return the AST of the file in String form.
      * @throws CheckstyleException if the file is not a Java source.
      */
     public static String printAst(FileText text, boolean withComments) throws CheckstyleException {
         return printTree(parseFileText(text, withComments));
     }
 
     /**
      * Print AST.
      * @param ast the root AST node.
      * @return string AST.
      */
     private static String printTree(DetailAST ast) {
         final StringBuilder messageBuilder = new StringBuilder();
         DetailAST node = ast;
         while (node != null) {
             messageBuilder.append(getIndentation(node))
                     .append(getNodeInfo(node))
                     .append(LINE_SEPARATOR)
                     .append(printTree(node.getFirstChild()));
             node = node.getNextSibling();
         }
         return messageBuilder.toString();
     }
 
     /**
      * Get string representation of the node as token name,
      * node text, line number and column number.
      * @param node DetailAST
      * @return node info
      */
     private static String getNodeInfo(DetailAST node) {
         return TokenUtils.getTokenName(node.getType())
                 + " -> " + excapeAllControlChars(node.getText())
                 + " [" + node.getLineNo() + ':' + node.getColumnNo() + ']';
     }
 
     /**
      * Get indentation for an AST node.
      * @param ast the AST to get the indentation for.
