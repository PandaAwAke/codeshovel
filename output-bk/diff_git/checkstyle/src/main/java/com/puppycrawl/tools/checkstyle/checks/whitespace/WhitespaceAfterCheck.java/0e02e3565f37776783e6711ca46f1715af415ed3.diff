diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAfterCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAfterCheck.java
index 6d16e754e..45d918078 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAfterCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAfterCheck.java
@@ -68,83 +68,58 @@ public class WhitespaceAfterCheck
     public static final String WS_TYPECAST = "ws.typeCast";
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.COMMA,
             TokenTypes.SEMI,
             TokenTypes.TYPECAST,
         };
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final String line = getLine(ast.getLineNo() - 1);
         if (ast.getType() == TokenTypes.TYPECAST) {
             final DetailAST targetAST = ast.findFirstToken(TokenTypes.RPAREN);
             if (!isFollowedByWhitespace(targetAST, line)) {
                 log(targetAST.getLineNo(),
                     targetAST.getColumnNo() + targetAST.getText().length(),
                     WS_TYPECAST);
             }
         }
         else {
             if (!isFollowedByWhitespace(ast, line)) {
                 final Object[] message = new Object[]{ast.getText()};
                 log(ast.getLineNo(),
                     ast.getColumnNo() + ast.getText().length(),
                     WS_NOT_FOLLOWED,
                     message);
             }
         }
     }
 
     /**
      * checks whether token is followed by a whitespace.
      * @param targetAST Ast token.
      * @param line The line associated with the ast token.
      * @return true if ast token is followed by a whitespace.
      */
     private static boolean isFollowedByWhitespace(DetailAST targetAST, String line) {
         final int after =
             targetAST.getColumnNo() + targetAST.getText().length();
         boolean followedByWhitespace = true;
 
         if (after < line.length()) {
-
             final char charAfter = line.charAt(after);
-            if (targetAST.getType() == TokenTypes.SEMI
-                && (charAfter == ';' || charAfter == ')')) {
-                followedByWhitespace = true;
-            }
-            else if (!Character.isWhitespace(charAfter) && !isEmptyForIterator(targetAST)) {
-                followedByWhitespace = false;
-            }
+            followedByWhitespace = Character.isWhitespace(charAfter)
+                || targetAST.getType() == TokenTypes.SEMI
+                    && (charAfter == ';' || charAfter == ')');
         }
-
         return followedByWhitespace;
     }
-
-    /**
-     * check for empty FOR_ITERATOR.
-     * @param targetAST Ast token.
-     * @return true if iterator is empty.
-     */
-    private static boolean isEmptyForIterator(DetailAST targetAST) {
-
-        if (targetAST.getType() == TokenTypes.SEMI) {
-            final DetailAST sibling =
-                targetAST.getNextSibling();
-            if (sibling != null
-                && sibling.getType() == TokenTypes.FOR_ITERATOR
-                && sibling.getChildCount() == 0) {
-                return true;
-            }
-        }
-        return false;
-    }
 }
