diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java
index f799a3e63..729350403 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java
@@ -128,116 +128,116 @@ public final class FileContents implements CommentListener {
      * Report the location of a C-style comment.
      * @param startLineNo the starting line number
      * @param startColNo the starting column number
      * @param endLineNo the ending line number
      * @param endColNo the ending column number
      **/
     public void reportCComment(int startLineNo, int startColNo,
             int endLineNo, int endColNo) {
         final String[] cComment = extractCComment(startLineNo, startColNo,
                 endLineNo, endColNo);
         final Comment comment = new Comment(cComment, startColNo, endLineNo,
                 endColNo);
 
         // save the comment
         if (clangComments.containsKey(startLineNo)) {
             final List<TextBlock> entries = clangComments.get(startLineNo);
             entries.add(comment);
         }
         else {
             final List<TextBlock> entries = Lists.newArrayList();
             entries.add(comment);
             clangComments.put(startLineNo, entries);
         }
 
         // Remember if possible Javadoc comment
         if (line(startLineNo - 1).indexOf("/**", startColNo) != -1) {
             javadocComments.put(endLineNo - 1, comment);
         }
     }
 
     /**
      * Returns a map of all C style comments. The key is the line number, the
      * value is a {@link List} of C style comment {@link TextBlock}s
      * that start at that line.
      * @return the map of comments
      */
     public ImmutableMap<Integer, List<TextBlock>> getCComments() {
         return ImmutableMap.copyOf(clangComments);
     }
 
     /**
      * Returns the specified C comment as a String array.
      * @param startLineNo the starting line number
      * @param startColNo the starting column number
      * @param endLineNo the ending line number
      * @param endColNo the ending column number
      * @return C comment as a array
      **/
     private String[] extractCComment(int startLineNo, int startColNo,
             int endLineNo, int endColNo) {
-        String[] retVal;
+        String[] returnValue;
         if (startLineNo == endLineNo) {
-            retVal = new String[1];
-            retVal[0] = line(startLineNo - 1).substring(startColNo,
+            returnValue = new String[1];
+            returnValue[0] = line(startLineNo - 1).substring(startColNo,
                     endColNo + 1);
         }
         else {
-            retVal = new String[endLineNo - startLineNo + 1];
-            retVal[0] = line(startLineNo - 1).substring(startColNo);
+            returnValue = new String[endLineNo - startLineNo + 1];
+            returnValue[0] = line(startLineNo - 1).substring(startColNo);
             for (int i = startLineNo; i < endLineNo; i++) {
-                retVal[i - startLineNo + 1] = line(i);
+                returnValue[i - startLineNo + 1] = line(i);
             }
-            retVal[retVal.length - 1] = line(endLineNo - 1).substring(0,
+            returnValue[returnValue.length - 1] = line(endLineNo - 1).substring(0,
                     endColNo + 1);
         }
-        return retVal;
+        return returnValue;
     }
 
     /**
      * Returns the Javadoc comment before the specified line.
      * A return value of {@code null} means there is no such comment.
      * @param lineNoBefore the line number to check before
      * @return the Javadoc comment, or {@code null} if none
      **/
     public TextBlock getJavadocBefore(int lineNoBefore) {
         // Lines start at 1 to the callers perspective, so need to take off 2
         int lineNo = lineNoBefore - 2;
 
         // skip blank lines
         while (lineNo > 0 && (lineIsBlank(lineNo) || lineIsComment(lineNo))) {
             lineNo--;
         }
 
         return javadocComments.get(lineNo);
     }
 
     /**
      * Get a single line.
      * For internal use only, as getText().get(lineNo) is just as
      * suitable for external use and avoids method duplication.
      * @param lineNo the number of the line to get
      * @return the corresponding line, without terminator
      * @throws IndexOutOfBoundsException if lineNo is invalid
      */
     private String line(int lineNo) {
         return text.get(lineNo);
     }
 
     /**
      * Get the full text of the file.
      * @return an object containing the full text of the file
      */
     public FileText getText() {
         return new FileText(text);
     }
 
     /**
      * Gets the lines in the file.
      * @return the lines in the file
      */
     public String[] getLines() {
         return text.toLinesArray();
     }
 
     /**
      * Get the line from text of the file.
