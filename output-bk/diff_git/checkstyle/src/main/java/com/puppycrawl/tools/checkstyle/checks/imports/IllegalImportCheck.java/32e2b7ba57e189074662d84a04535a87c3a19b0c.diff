diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java
index 00e2fb770..706c7d1aa 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java
@@ -86,111 +86,111 @@ public class IllegalImportCheck
     private String[] illegalClasses;
 
     /**
      * Whether the packages or class names
      * should be interpreted as regular expressions.
      */
     private boolean regexp;
 
     /**
      * Creates a new {@code IllegalImportCheck} instance.
      */
     public IllegalImportCheck() {
         setIllegalPkgs("sun");
     }
 
     /**
      * Set the list of illegal packages.
      * @param from array of illegal packages
      * @noinspection WeakerAccess
      */
     public final void setIllegalPkgs(String... from) {
         illegalPkgs = from.clone();
         illegalPkgsRegexps.clear();
         for (String illegalPkg : illegalPkgs) {
             illegalPkgsRegexps.add(CommonUtils.createPattern("^" + illegalPkg + "\\..*"));
         }
     }
 
     /**
      * Set the list of illegal classes.
      * @param from array of illegal classes
      */
     public void setIllegalClasses(String... from) {
         illegalClasses = from.clone();
         for (String illegalClass : illegalClasses) {
             illegalClassesRegexps.add(CommonUtils.createPattern(illegalClass));
         }
     }
 
     /**
      * Controls whether the packages or class names
      * should be interpreted as regular expressions.
      * @param regexp a {@code Boolean} value
      */
     public void setRegexp(boolean regexp) {
         this.regexp = regexp;
     }
 
     @Override
     public int[] getDefaultTokens() {
-        return getAcceptableTokens();
+        return getRequiredTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
-        return new int[] {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};
+        return getRequiredTokens();
     }
 
     @Override
     public int[] getRequiredTokens() {
-        return getAcceptableTokens();
+        return new int[] {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final FullIdent imp;
         if (ast.getType() == TokenTypes.IMPORT) {
             imp = FullIdent.createFullIdentBelow(ast);
         }
         else {
             imp = FullIdent.createFullIdent(
                 ast.getFirstChild().getNextSibling());
         }
         if (isIllegalImport(imp.getText())) {
             log(ast.getLineNo(),
                 ast.getColumnNo(),
                 MSG_KEY,
                 imp.getText());
         }
     }
 
     /**
      * Checks if an import matches one of the regular expressions
      * for illegal packages or illegal class names.
      * @param importText the argument of the import keyword
      * @return if {@code importText} matches one of the regular expressions
      *         for illegal packages or illegal class names
      */
     private boolean isIllegalImportByRegularExpressions(String importText) {
         boolean result = false;
         for (Pattern pattern : illegalPkgsRegexps) {
             if (pattern.matcher(importText).matches()) {
                 result = true;
                 break;
             }
         }
         if (!result) {
             for (Pattern pattern : illegalClassesRegexps) {
                 if (pattern.matcher(importText).matches()) {
                     result = true;
                     break;
                 }
             }
         }
         return result;
     }
 
     /**
      * Checks if an import is from a package or class name that must not be used.
      * @param importText the argument of the import keyword
      * @return if {@code importText} contains an illegal package prefix or equals illegal class name
