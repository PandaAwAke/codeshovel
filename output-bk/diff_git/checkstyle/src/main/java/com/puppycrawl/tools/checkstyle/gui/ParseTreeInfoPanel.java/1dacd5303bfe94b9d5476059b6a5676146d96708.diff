diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
index 0c857b9b8..923028f31 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
@@ -170,109 +170,104 @@ public class ParseTreeInfoPanel extends JPanel
             }
         }
 
         public FileDropListener(JScrollPane aSp)
         {
             mSp = aSp;
         }
     }
 
 
     public void openFile(File file, final Component parent)
     {
         if (file != null) {
             try {
                 Main.frame.setTitle("Checkstyle : " + file.getName());
                 final FileText text = new FileText(file.getAbsoluteFile(),
                                                    getEncoding());
                 final DetailAST parseTree = parseFile(text);
                 parseTreeModel.setParseTree(parseTree);
                 currentFile = file;
                 lastDirectory = file.getParentFile();
                 reloadAction.setEnabled(true);
 
                 final String[] sourceLines = text.toLinesArray();
 
                 // clear for each new file
                  getLines2position().clear();
                  // starts line counting at 1
                  getLines2position().add(0);
                  // insert the contents of the file to the text area
                  for (String element : sourceLines)
                  {
                    getLines2position().add(jTextArea.getText().length());
                    jTextArea.append(element + "\n");
                  }
 
                 //clean the text area before inserting the lines of the new file
                 if (jTextArea.getText().length() != 0) {
                     jTextArea.replaceRange("", 0, jTextArea.getText()
                             .length());
                 }
 
                 // insert the contents of the file to the text area
                 for (final String element : sourceLines) {
                     jTextArea.append(element + "\n");
                 }
 
                 // move back to the top of the file
                 jTextArea.moveCaretPosition(0);
             }
-            catch (final IOException ex) {
+            catch (final IOException | ANTLRException ex) {
                 showErrorDialog(
                         parent,
-                        "Could not open " + file + ": " + ex.getMessage());
-            }
-            catch (final ANTLRException ex) {
-                showErrorDialog(
-                        parent,
-                        "Could not parse " + file + ": " + ex.getMessage());
+                        "Could not parse" + file + ": " + ex.getMessage());
             }
         }
     }
 
     /**
      * Parses a file and returns the parse tree.
      * @param fileName the file to parse
      * @return the root node of the parse tree
      * @throws IOException if the file cannot be opened
      * @throws ANTLRException if the file is not a Java source
      * @deprecated Use {@link #parseFile(FileText)} instead
      */
     @Deprecated
     public static DetailAST parseFile(String fileName)
         throws IOException, ANTLRException
     {
         return parseFile(new FileText(new File(fileName), getEncoding()));
     }
 
     /**
      * Parses a file and returns the parse tree.
      * @param text the file to parse
      * @return the root node of the parse tree
      * @throws ANTLRException if the file is not a Java source
      */
     public static DetailAST parseFile(FileText text)
         throws ANTLRException
     {
         final FileContents contents = new FileContents(text);
         return TreeWalker.parse(contents);
     }
 
     /**
      * Returns the configured file encoding.
      * This can be set using the {@code file.encoding} system property.
      * It defaults to UTF-8.
      * @return the configured file encoding
      */
     private static String getEncoding()
     {
         return System.getProperty("file.encoding", "UTF-8");
     }
 
     /**
      * Create a new ParseTreeInfoPanel instance.
      */
     public ParseTreeInfoPanel()
     {
         setLayout(new BorderLayout());
 
