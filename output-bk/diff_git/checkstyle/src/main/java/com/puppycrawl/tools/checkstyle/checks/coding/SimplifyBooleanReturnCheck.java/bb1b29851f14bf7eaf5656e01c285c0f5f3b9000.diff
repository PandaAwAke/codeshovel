diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java
index db01ed5c8..297d9f6b1 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java
@@ -1,149 +1,149 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2014  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks.coding;
 
 import antlr.collections.AST;
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 
 
 /**
  * <p>
  * Checks for overly complicated boolean return statements.
  * Idea shamelessly stolen from the equivalent PMD rule (pmd.sourceforge.net).
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="SimplifyBooleanReturn"/&gt;
  * </pre>
  * @author Lars KÃ¼hne
  */
 public class SimplifyBooleanReturnCheck
     extends Check
 {
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.LITERAL_IF};
     }
 
     @Override
-    public void visitToken(DetailAST aAST)
+    public void visitToken(DetailAST ast)
     {
         // LITERAL_IF has the following four or five children:
         // '('
         // condition
         // ')'
         // thenStatement
         // [ LITERAL_ELSE (with the elseStatement as a child) ]
 
         // don't bother if this is not if then else
         final AST elseLiteral =
-            aAST.findFirstToken(TokenTypes.LITERAL_ELSE);
+            ast.findFirstToken(TokenTypes.LITERAL_ELSE);
         if (elseLiteral == null) {
             return;
         }
         final AST elseStatement = elseLiteral.getFirstChild();
 
         // skip '(' and ')'
         // TODO: Introduce helpers in DetailAST
-        final AST condition = aAST.getFirstChild().getNextSibling();
+        final AST condition = ast.getFirstChild().getNextSibling();
         final AST thenStatement = condition.getNextSibling().getNextSibling();
 
         if (returnsOnlyBooleanLiteral(thenStatement)
             && returnsOnlyBooleanLiteral(elseStatement))
         {
-            log(aAST.getLineNo(), aAST.getColumnNo(), "simplify.boolreturn");
+            log(ast.getLineNo(), ast.getColumnNo(), "simplify.boolreturn");
         }
     }
 
     /**
      * Returns if an AST is a return statment with a boolean literal
      * or a compound statement that contains only such a return statement.
      *
-     * Returns <code>true</code> iff aAST represents
+     * Returns <code>true</code> iff ast represents
      * <br/>
      * <pre>
      * return true/false;
      * </pre>
      * or
      * <br/>
      * <pre>
      * {
      *   return true/false;
      * }
      * </pre>
      *
-     * @param aAST the sytax tree to check
-     * @return if aAST is a return statment with a boolean literal.
+     * @param ast the sytax tree to check
+     * @return if ast is a return statment with a boolean literal.
      */
-    private static boolean returnsOnlyBooleanLiteral(AST aAST)
+    private static boolean returnsOnlyBooleanLiteral(AST ast)
     {
-        if (isBooleanLiteralReturnStatement(aAST)) {
+        if (isBooleanLiteralReturnStatement(ast)) {
             return true;
         }
 
-        final AST firstStmnt = aAST.getFirstChild();
+        final AST firstStmnt = ast.getFirstChild();
         return isBooleanLiteralReturnStatement(firstStmnt);
     }
 
     /**
      * Returns if an AST is a return statment with a boolean literal.
      *
-     * Returns <code>true</code> iff aAST represents
+     * Returns <code>true</code> iff ast represents
      * <br/>
      * <pre>
      * return true/false;
      * </pre>
      *
-     * @param aAST the sytax tree to check
-     * @return if aAST is a return statment with a boolean literal.
+     * @param ast the sytax tree to check
+     * @return if ast is a return statment with a boolean literal.
      */
-    private static boolean isBooleanLiteralReturnStatement(AST aAST)
+    private static boolean isBooleanLiteralReturnStatement(AST ast)
     {
-        if ((aAST == null) || (aAST.getType() != TokenTypes.LITERAL_RETURN)) {
+        if ((ast == null) || (ast.getType() != TokenTypes.LITERAL_RETURN)) {
             return false;
         }
 
-        final AST expr = aAST.getFirstChild();
+        final AST expr = ast.getFirstChild();
 
         if ((expr == null) || (expr.getType() == TokenTypes.SEMI)) {
             return false;
         }
 
         final AST value = expr.getFirstChild();
         return isBooleanLiteralType(value.getType());
     }
 
     /**
      * Checks if a token type is a literal true or false.
-     * @param aTokenType the TokenType
-     * @return true iff aTokenType is LITERAL_TRUE or LITERAL_FALSE
+     * @param tokenType the TokenType
+     * @return true iff tokenType is LITERAL_TRUE or LITERAL_FALSE
      */
-    private static boolean isBooleanLiteralType(final int aTokenType)
+    private static boolean isBooleanLiteralType(final int tokenType)
     {
-        final boolean isTrue = (aTokenType == TokenTypes.LITERAL_TRUE);
-        final boolean isFalse = (aTokenType == TokenTypes.LITERAL_FALSE);
-        return isTrue || isFalse;
+        final boolean iastrue = (tokenType == TokenTypes.LITERAL_TRUE);
+        final boolean isFalse = (tokenType == TokenTypes.LITERAL_FALSE);
+        return iastrue || isFalse;
     }
 }
