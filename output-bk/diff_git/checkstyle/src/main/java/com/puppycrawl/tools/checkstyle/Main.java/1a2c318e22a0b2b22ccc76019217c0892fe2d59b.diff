diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
index 0291b89b1..1fdef9c27 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
@@ -1,336 +1,399 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2015 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle;
 
 import com.google.common.collect.Lists;
 import com.puppycrawl.tools.checkstyle.api.AuditListener;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.UnsupportedEncodingException;
+import java.util.ArrayList;
 import java.util.List;
 import java.util.Properties;
 
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.CommandLineParser;
 import org.apache.commons.cli.HelpFormatter;
 import org.apache.commons.cli.Options;
 import org.apache.commons.cli.ParseException;
 import org.apache.commons.cli.PosixParser;
 
 /**
  * Wrapper command line program for the Checker.
  * @author Damian Szczepanik (damianszczepanik@github)
  **/
 public final class Main
 {
     /** Don't create instance of this class, use {@link #main(String[])} method instead. */
     private Main()
     {
     }
 
     /**
      * Loops over the files specified checking them for errors. The exit code
      * is the number of errors found in all the files.
      * @param args the command line arguments
-     * @exception UnsupportedEncodingException if there is a problem to use UTF-8
+     * @throws UnsupportedEncodingException if there is a problem to use UTF-8
+     * @throws CheckstyleException if there is a problem with parsing a property file
+     * @throws FileNotFoundException if there is a problem with files access
      **/
     public static void main(String... args) throws UnsupportedEncodingException
+            , CheckstyleException, FileNotFoundException
     {
-        boolean parseResult = false;
+        int errorCounter = 0;
+        boolean cliViolations = false;
+
         try {
-            processCommandLine(parseCli(args));
-            parseResult = true;
+            //parse CLI arguments
+            final CommandLine commandLine = parseCli(args);
+
+            // show version and exit if it is requested
+            if (commandLine.hasOption("v")) {
+                System.out.println("Checkstyle version: "
+                        + Main.class.getPackage().getImplementationVersion());
+            }
+            else {
+                // return error is smth is wrong in arguments
+                final List<String> messages = validateCli(commandLine);
+                cliViolations = !messages.isEmpty();
+                if (messages.isEmpty()) {
+
+                    // create config helper object
+                    final CliOptions config = convertCliToPojo(commandLine);
+                    // run Checker
+                    errorCounter = runCheckstyle(config);
+
+                }
+                else {
+                    errorCounter = 1;
+                    for (String message : messages) {
+                        System.out.println(message);
+                    }
+                }
+            }
         }
-        catch (final ParseException e) {
-            System.err.println("Could not parse parameters: " + e.getMessage());
-            e.printStackTrace();
+        catch (ParseException pex) {
+            // smth wrong with arguments - print error and manual
+            cliViolations = true;
+            errorCounter = 1;
+            System.out.println(pex.getMessage());
+            printUsage();
         }
-        catch (final Exception e) {
-            System.err.println("Could not execute Checkstyle: " + e.getMessage());
-            e.printStackTrace();
+        catch (Exception ex) {
+            // smth wrong during processing
+            errorCounter = 1;
+            throw ex;
         }
         finally {
-            if (!parseResult) {
-                usage();
+            // return exit code base on validation of Checker
+            if (errorCounter != 0 && !cliViolations) {
+                System.out.println(String.format("Checkstyle ends with %d errors.", errorCounter));
             }
             // provide proper exit code based on results.
-            System.exit(parseResult ? 0 : 1);
+            System.exit(errorCounter);
         }
     }
 
     /**
      * Parses and executes Checkstyle based on passed arguments.
      * @param args
      *        command line parameters
      * @return parsed information about passed parameters
      * @throws ParseException
      *         when passed arguments are not valid
-     * @exception CheckstyleException when provided parameters are not supported
      */
     private static CommandLine parseCli(String... args)
             throws ParseException
     {
         // parse the parameters
         final CommandLineParser clp = new PosixParser();
         // always returns not null value
         return clp.parse(buildOptions(), args);
     }
 
     /**
-     * Executes required Checkstyle actions based on passed parameters.
-     * @param line
-     *        list of actions to execute
-     * @throws CheckstyleException
-     *         when could not create checker
-     * @throws UnsupportedEncodingException
-     *         if there is problem to use UTf-8
+     * Do validation of Command line options
+     * @param cmdLine command line object
+     * @return list of violations
      */
-    private static void processCommandLine(CommandLine line)
-            throws CheckstyleException, UnsupportedEncodingException
+    private static List<String> validateCli(CommandLine cmdLine)
     {
-        // show version and exit
-        if (line.hasOption("v")) {
-            System.out.println("Checkstyle version: "
-                    + Main.class.getPackage().getImplementationVersion());
-            return;
-        }
-
+        final List<String> result = new ArrayList<>();
         // ensure a configuration file is specified
-        if (!line.hasOption("c")) {
-            System.out.println("Must specify a config XML file.");
-            return;
+        if (!cmdLine.hasOption("c")) {
+            result.add("Must specify a config XML file.");
         }
-
-        // setup the properties
-        final Properties props =
-                line.hasOption("p")
-                        ? loadProperties(new File(line.getOptionValue("p")))
-                        : System.getProperties();
-        final String configFormat = line.getOptionValue("c");
-        final Configuration config = loadConfig(configFormat, props);
-
-        // setup the output stream
-        OutputStream out = null;
-        boolean closeOut = false;
-        if (line.hasOption("o")) {
-            final String fname = line.getOptionValue("o");
-            try {
-                out = new FileOutputStream(fname);
-                closeOut = true;
+        else {
+            // validate optional parameters
+            if (cmdLine.hasOption("f")) {
+                final String format = cmdLine.getOptionValue("f");
+                if (!"plain".equals(format) && !"xml".equals(format)) {
+                    result.add(String.format("Invalid output format."
+                            + " Found '%s' but expected 'plain' or 'xml'.", format));
+                }
             }
-            catch (final FileNotFoundException e) {
-                throw new CheckstyleException(String.format(
-                        "Could not find file '%s': %s ", fname, e.getMessage()));
+            if (cmdLine.hasOption("p")) {
+                final String propertiesLocation = cmdLine.getOptionValue("p");
+                final File file = new File(propertiesLocation);
+                if (!file.exists()) {
+                    result.add(String.format("Could not find file '%s'.", propertiesLocation));
+                }
+            }
+            if (cmdLine.hasOption("o")) {
+                final String outputLocation = cmdLine.getOptionValue("o");
+                final File file = new File(outputLocation);
+                if (!file.exists()) {
+                    result.add(String.format("Could not find file '%s'.", outputLocation));
+                }
+            }
+            final List<File> files = getFilesToProcess(cmdLine.getArgs());
+            if (files.isEmpty()) {
+                result.add("Must specify files to process, found 0.");
             }
-        }
-        else {
-            out = System.out;
-            closeOut = false;
         }
 
-        final String format = line.hasOption("f") ? line.getOptionValue("f") : "plain";
-        final AuditListener listener = createListener(format, out, closeOut);
-        final List<File> files = getFilesToProcess(line.getArgs());
-        if (files.isEmpty()) {
-            throw new CheckstyleException("Must specify files to process, found 0.");
-        }
+        return result;
+    }
 
-        final Checker checker = createChecker(config, listener);
-        final int errorCounter = checker.process(files);
-        checker.destroy();
-        if (errorCounter != 0) {
-            throw new CheckstyleException(String.format(
-                    "Checkstyle ends with %d errors.", errorCounter));
+    /**
+     * Util method to convert ComandLine type to POJO object
+     * @param cmdLine command line object
+     * @return command line option as POJO object
+     */
+    private static CliOptions convertCliToPojo(CommandLine cmdLine)
+    {
+        final CliOptions conf = new CliOptions();
+        conf.format = cmdLine.getOptionValue("f");
+        if (conf.format == null) {
+            conf.format = "plain";
         }
+        conf.outputLocation = cmdLine.getOptionValue("o");
+        conf.configLocation = cmdLine.getOptionValue("c");
+        conf.propertiesLocation = cmdLine.getOptionValue("p");
+        conf.files = getFilesToProcess(cmdLine.getArgs());
+        return conf;
     }
 
     /**
-     * Creates the Checker object.
-     * @param config
-     *        the configuration to use
-     * @param auditListener
-     *        the sticky beak to track what happens
-     * @return a nice new fresh Checker
-     * @throws CheckstyleException when could not create checker
+     * Executes required Checkstyle actions based on passed parameters.
+     * @param cliOptions
+     *        pojo object that contains all options
+     * @return number of violations of ERROR level
+     * @throws FileNotFoundException
+     *         when output file could not be found
+     * @throws CheckstyleException
+     *         when properties file could not be loaded
+     * @throws UnsupportedEncodingException
+     *         if there is problem to use UTf-8
      */
-    private static Checker createChecker(Configuration config,
-            AuditListener auditListener)
-            throws CheckstyleException
+    private static int runCheckstyle(CliOptions cliOptions)
+            throws CheckstyleException, UnsupportedEncodingException, FileNotFoundException
     {
+        // setup the properties
+        final Properties props =
+                cliOptions.propertiesLocation != null
+                        ? loadProperties(new File(cliOptions.propertiesLocation))
+                        : System.getProperties();
+
+        // create a configuration
+        final Configuration config = ConfigurationLoader.loadConfiguration(
+                cliOptions.configLocation, new PropertiesExpander(props));
+
+        // create a listener for output
+        final AuditListener listener = createListener(cliOptions.format, cliOptions.outputLocation);
+
+        // create Checker object and run it
+        int errorCounter = 0;
         final Checker checker = new Checker();
 
-        final ClassLoader moduleClassLoader = Checker.class.getClassLoader();
-        checker.setModuleClassLoader(moduleClassLoader);
-        checker.configure(config);
-        checker.addListener(auditListener);
+        try {
+
+            final ClassLoader moduleClassLoader = Checker.class.getClassLoader();
+            checker.setModuleClassLoader(moduleClassLoader);
+            checker.configure(config);
+            checker.addListener(listener);
 
-        return checker;
+            // run Checker
+            errorCounter = checker.process(cliOptions.files);
+
+        }
+        finally {
+            checker.destroy();
+        }
+
+        return errorCounter;
     }
 
     /**
-     * Determines the files to process.
-     * @param filesToProcess
-     *        arguments that were not processed yet but shall be
-     * @return list of files to process
+     * Loads properties from a File.
+     * @param file
+     *        the properties file
+     * @return the properties in file
      * @throws CheckstyleException
-     *         when there is no file to process
+     *         when could not load properties file
      */
-    private static List<File> getFilesToProcess(String... filesToProcess)
+    private static Properties loadProperties(File file)
             throws CheckstyleException
     {
-        final List<File> files = Lists.newLinkedList();
-        for (String element : filesToProcess) {
-            files.addAll(listFiles(new File(element)));
+        final Properties properties = new Properties();
+
+        try (FileInputStream fis = new FileInputStream(file)) {
+            properties.load(fis);
+        }
+        catch (final IOException e) {
+            throw new CheckstyleException(String.format(
+                    "Unable to load properties from file '%s'.", file.getAbsolutePath()), e);
         }
 
-        return files;
+        return properties;
     }
 
     /**
      * Creates the audit listener.
      *
      * @param format format of the auditt listener
-     * @param out the stream to log to
-     * @param closeOut whether the stream should be closed
+     * @param outputLocation the location of output
      * @return a fresh new <code>AuditListener</code>
      * @exception UnsupportedEncodingException if there is problem to use UTf-8
-     * @exception CheckstyleException when provided parameters are not supported
+     * @exception FileNotFoundException when provided output location is not found
      */
     private static AuditListener createListener(String format,
-                                                OutputStream out,
-                                                boolean closeOut)
-            throws UnsupportedEncodingException, CheckstyleException
+                                                String outputLocation)
+            throws UnsupportedEncodingException, FileNotFoundException
     {
+
+        // setup the output stream
+        OutputStream out = null;
+        boolean closeOut = false;
+        if (outputLocation != null) {
+            out = new FileOutputStream(outputLocation);
+            closeOut = true;
+        }
+        else {
+            out = System.out;
+            closeOut = false;
+        }
+
+        // setup a listener
         AuditListener listener = null;
         switch (format) {
             case "xml":
                 listener = new XMLLogger(out, closeOut);
                 break;
 
             case "plain":
                 listener = new DefaultLogger(out, closeOut);
                 break;
 
             default:
-                throw new CheckstyleException("Invalid output format. Found '" + format
+                throw new IllegalStateException("Invalid output format. Found '" + format
                         + "' but expected 'plain' or 'xml'.");
         }
 
         return listener;
     }
 
     /**
-     * Loads the configuration file. Will exit if unable to load.
-     *
-     * @param format
-     *            specifies the location of the configuration
-     * @param props
-     *            the properties to resolve with the configuration
-     * @return a fresh new configuration
-     * @throws CheckstyleException
-     *             when could not load properties file
+     * Determines the files to process.
+     * @param filesToProcess
+     *        arguments that were not processed yet but shall be
+     * @return list of files to process
      */
-    private static Configuration loadConfig(String format,
-                                            Properties props)
-            throws CheckstyleException
-    {
-        return ConfigurationLoader.loadConfiguration(format, new PropertiesExpander(props));
-    }
-
-    /** Prints the usage information. **/
-    private static void usage()
+    private static List<File> getFilesToProcess(String... filesToProcess)
     {
-        final HelpFormatter hf = new HelpFormatter();
-        hf.printHelp(String.format("java %s [options] -c <config.xml> file...",
-                Main.class.getName()), buildOptions());
-    }
+        final List<File> files = Lists.newLinkedList();
+        for (String element : filesToProcess) {
+            files.addAll(listFiles(new File(element)));
+        }
 
-    /**
-     * Builds and returns list of parameters supported by cli Checkstyle.
-     * @return available options
-     */
-    private static Options buildOptions()
-    {
-        final Options options = new Options();
-        options.addOption("c", true, "Sets the check configuration file to use.");
-        options.addOption("o", true, "Sets the output file. Defaults to stdout");
-        options.addOption("p", true, "Loads the properties file");
-        options.addOption("f", true, "Sets the output format. (plain|xml). Defaults to plain");
-        options.addOption("v", false, "Print product version and exit");
-        return options;
+        return files;
     }
 
     /**
      * Traverses a specified node looking for files to check. Found files are added to a specified
      * list. Subdirectories are also traversed.
      * @param node
      *        the node to process
      * @return found files
      */
     private static List<File> listFiles(File node)
     {
         // could be replaced with org.apache.commons.io.FileUtils.list() method
         // if only we add commons-io library
         final List<File> files = Lists.newLinkedList();
 
         if (node.canRead()) {
             if (node.isDirectory()) {
                 for (File element : node.listFiles()) {
                     files.addAll(listFiles(element));
                 }
             }
             else if (node.isFile()) {
                 files.add(node);
             }
         }
         return files;
     }
 
+    /** Prints the usage information. **/
+    private static void printUsage()
+    {
+        final HelpFormatter hf = new HelpFormatter();
+        hf.printHelp(String.format("java %s [options] -c <config.xml> file...",
+                Main.class.getName()), buildOptions());
+    }
+
     /**
-     * Loads properties from a File.
-     * @param file
-     *        the properties file
-     * @return the properties in file
-     * @throws CheckstyleException
-     *         when could not load properties file
+     * Builds and returns list of parameters supported by cli Checkstyle.
+     * @return available options
      */
-    private static Properties loadProperties(File file)
-            throws CheckstyleException
+    private static Options buildOptions()
     {
-        final Properties properties = new Properties();
-
-        try (FileInputStream fis = new FileInputStream(file)) {
-            properties.load(fis);
-        }
-        catch (final IOException e) {
-            throw new CheckstyleException(String.format(
-                    "Unable to load properties from file '%s'.", file.getAbsolutePath()), e);
-        }
+        final Options options = new Options();
+        options.addOption("c", true, "Sets the check configuration file to use.");
+        options.addOption("o", true, "Sets the output file. Defaults to stdout");
+        options.addOption("p", true, "Loads the properties file");
+        options.addOption("f", true, "Sets the output format. (plain|xml). Defaults to plain");
+        options.addOption("v", false, "Print product version and exit");
+        return options;
+    }
 
-        return properties;
+    /** Helper structure to clear show what is required for Checker to run. **/
+    private static class CliOptions
+    {
+        /** properties file location */
+        private String propertiesLocation;
+        /** config file location */
+        private String configLocation;
+        /** output format */
+        private String format;
+        /** output file location */
+        private String outputLocation;
+        /** list of file to validate */
+        private List<File> files;
     }
 }
