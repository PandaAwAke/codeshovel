diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
index dfd24e5d3..3f96908e5 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
@@ -206,107 +206,100 @@ public final class Main {
     /**
      * Do validation of Command line options.
      * @param cmdLine command line object
      * @param filesToProcess List of files to process found from the command line.
      * @return list of violations
      */
     private static List<String> validateCli(CommandLine cmdLine, List<File> filesToProcess) {
         final List<String> result = new ArrayList<>();
 
         if (filesToProcess.isEmpty()) {
             result.add("Files to process must be specified, found 0.");
         }
         // ensure there is no conflicting options
         else if (cmdLine.hasOption(OPTION_T_NAME) || cmdLine.hasOption(OPTION_CAPITAL_T_NAME)
                 || cmdLine.hasOption(OPTION_J_NAME) || cmdLine.hasOption(OPTION_CAPITAL_J_NAME)) {
             if (cmdLine.hasOption(OPTION_C_NAME) || cmdLine.hasOption(OPTION_P_NAME)
                     || cmdLine.hasOption(OPTION_F_NAME) || cmdLine.hasOption(OPTION_O_NAME)) {
                 result.add("Option '-t' cannot be used with other options.");
             }
             else if (filesToProcess.size() > 1) {
                 result.add("Printing AST is allowed for only one file.");
             }
         }
         // ensure a configuration file is specified
         else if (cmdLine.hasOption(OPTION_C_NAME)) {
             final String configLocation = cmdLine.getOptionValue(OPTION_C_NAME);
             try {
                 // test location only
                 CommonUtils.getUriByFilename(configLocation);
             }
             catch (CheckstyleException ignored) {
                 result.add(String.format("Could not find config XML file '%s'.", configLocation));
             }
 
             // validate optional parameters
             if (cmdLine.hasOption(OPTION_F_NAME)) {
                 final String format = cmdLine.getOptionValue(OPTION_F_NAME);
                 if (!PLAIN_FORMAT_NAME.equals(format) && !XML_FORMAT_NAME.equals(format)) {
                     result.add(String.format("Invalid output format."
                             + " Found '%s' but expected '%s' or '%s'.",
                             format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));
                 }
             }
             if (cmdLine.hasOption(OPTION_P_NAME)) {
                 final String propertiesLocation = cmdLine.getOptionValue(OPTION_P_NAME);
                 final File file = new File(propertiesLocation);
                 if (!file.exists()) {
                     result.add(String.format("Could not find file '%s'.", propertiesLocation));
                 }
             }
-            if (cmdLine.hasOption(OPTION_O_NAME)) {
-                final String outputLocation = cmdLine.getOptionValue(OPTION_O_NAME);
-                final File file = new File(outputLocation);
-                if (file.exists() && !file.canWrite()) {
-                    result.add(String.format("Permission denied : '%s'.", outputLocation));
-                }
-            }
         }
         else {
             result.add("Must specify a config XML file.");
         }
 
         return result;
     }
 
     /**
      * Do execution of CheckStyle based on Command line options.
      * @param commandLine command line object
      * @param filesToProcess List of files to process found from the command line.
      * @return number of violations
      * @throws IOException if a file could not be read.
      * @throws CheckstyleException if something happens processing the files.
      */
     private static int runCli(CommandLine commandLine, List<File> filesToProcess)
             throws IOException, CheckstyleException {
         int result = 0;
 
         // create config helper object
         final CliOptions config = convertCliToPojo(commandLine, filesToProcess);
         if (commandLine.hasOption(OPTION_T_NAME)) {
             // print AST
             final File file = config.files.get(0);
             final String stringAst = AstTreeStringPrinter.printFileAst(file, false);
             System.out.print(stringAst);
         }
         else if (commandLine.hasOption(OPTION_CAPITAL_T_NAME)) {
             final File file = config.files.get(0);
             final String stringAst = AstTreeStringPrinter.printFileAst(file, true);
             System.out.print(stringAst);
         }
         else if (commandLine.hasOption(OPTION_J_NAME)) {
             final File file = config.files.get(0);
             final String stringAst = DetailNodeTreeStringPrinter.printFileAst(file);
             System.out.print(stringAst);
         }
         else if (commandLine.hasOption(OPTION_CAPITAL_J_NAME)) {
             final File file = config.files.get(0);
             final String stringAst = AstTreeStringPrinter.printJavaAndJavadocTree(file);
             System.out.print(stringAst);
         }
         else {
             if (commandLine.hasOption(OPTION_D_NAME)) {
                 final Logger parentLogger = Logger.getLogger(Main.class.getName()).getParent();
                 final ConsoleHandler handler = new ConsoleHandler();
 
                 parentLogger.setLevel(Level.FINEST);
                 handler.setLevel(Level.FINEST);
