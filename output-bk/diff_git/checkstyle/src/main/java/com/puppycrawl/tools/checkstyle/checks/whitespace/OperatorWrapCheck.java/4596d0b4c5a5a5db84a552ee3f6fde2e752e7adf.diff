diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java
index 7ba87880f..95d04bd22 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java
@@ -43,100 +43,113 @@ import com.puppycrawl.tools.checkstyle.checks.AbstractOptionCheck;
  *  {@link TokenTypes#LAND LAND},
  *  {@link TokenTypes#LE LE},
  *  {@link TokenTypes#LITERAL_INSTANCEOF LITERAL_INSTANCEOF},
  *  {@link TokenTypes#LOR LOR},
  *  {@link TokenTypes#LT LT},
  *  {@link TokenTypes#MINUS MINUS},
  *  {@link TokenTypes#MOD MOD},
  *  {@link TokenTypes#NOT_EQUAL NOT_EQUAL},
  *  {@link TokenTypes#PLUS PLUS},
  *  {@link TokenTypes#QUESTION QUESTION},
  *  {@link TokenTypes#SL SL},
  *  {@link TokenTypes#SR SR},
  *  {@link TokenTypes#STAR STAR}.
  * Other acceptable tokens are
  *  {@link TokenTypes#ASSIGN ASSIGN},
  *  {@link TokenTypes#BAND_ASSIGN BAND_ASSIGN},
  *  {@link TokenTypes#BOR_ASSIGN BOR_ASSIGN},
  *  {@link TokenTypes#BSR_ASSIGN BSR_ASSIGN},
  *  {@link TokenTypes#BXOR_ASSIGN BXOR_ASSIGN},
  *  {@link TokenTypes#DIV_ASSIGN DIV_ASSIGN},
  *  {@link TokenTypes#MINUS_ASSIGN MINUS_ASSIGN},
  *  {@link TokenTypes#MOD_ASSIGN MOD_ASSIGN},
  *  {@link TokenTypes#PLUS_ASSIGN PLUS_ASSIGN},
  *  {@link TokenTypes#SL_ASSIGN SL_ASSIGN},
  *  {@link TokenTypes#SR_ASSIGN SR_ASSIGN},
  *  {@link TokenTypes#STAR_ASSIGN STAR_ASSIGN}.
  * </p>
  *  <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="OperatorWrap"/&gt;
  * </pre>
  * <p> An example of how to configure the check for assignment operators at the
  * end of a line is:
  * </p>
  * <pre>
  * &lt;module name="OperatorWrap"&gt;
  *     &lt;property name="tokens"
  *               value="ASSIGN,DIV_ASSIGN,PLUS_ASSIGN,MINUS_ASSIGN,STAR_ASSIGN,MOD_ASSIGN,SR_ASSIGN,BSR_ASSIGN,SL_ASSIGN,BXOR_ASSIGN,BOR_ASSIGN,BAND_ASSIGN"/&gt;
  *     &lt;property name="option" value="eol"/&gt;
   * &lt;/module&gt;
  * </pre>
  *
  * @author Rick Giles
  * @version 1.0
  */
 public class OperatorWrapCheck
     extends AbstractOptionCheck<WrapOption>
 {
+
+    /**
+     * A key is pointing to the warning message text in "messages.properties"
+     * file.
+     */
+    public static final String LINE_NEW = "line.new";
+
+    /**
+     * A key is pointing to the warning message text in "messages.properties"
+     * file.
+     */
+    public static final String LINE_PREVIOUS = "line.previous";
+
     /**
      * Sets the operator wrap option to new line.
      */
     public OperatorWrapCheck()
     {
         super(WrapOption.NL, WrapOption.class);
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.QUESTION,          // '?'
             TokenTypes.COLON,             // ':' (not reported for a case)
             TokenTypes.EQUAL,             // "=="
             TokenTypes.NOT_EQUAL,         // "!="
             TokenTypes.DIV,               // '/'
             TokenTypes.PLUS,              //' +' (unary plus is UNARY_PLUS)
             TokenTypes.MINUS,             // '-' (unary minus is UNARY_MINUS)
             TokenTypes.STAR,              // '*'
             TokenTypes.MOD,               // '%'
             TokenTypes.SR,                // ">>"
             TokenTypes.BSR,               // ">>>"
             TokenTypes.GE,                // ">="
             TokenTypes.GT,                // ">"
             TokenTypes.SL,                // "<<"
             TokenTypes.LE,                // "<="
             TokenTypes.LT,                // '<'
             TokenTypes.BXOR,              // '^'
             TokenTypes.BOR,               // '|'
             TokenTypes.LOR,               // "||"
             TokenTypes.BAND,              // '&'
             TokenTypes.LAND,              // "&&"
             TokenTypes.TYPE_EXTENSION_AND,
             TokenTypes.LITERAL_INSTANCEOF,
         };
     }
 
     @Override
     public int[] getAcceptableTokens()
     {
         return new int[] {
             TokenTypes.QUESTION,          // '?'
             TokenTypes.COLON,             // ':' (not reported for a case)
             TokenTypes.EQUAL,             // "=="
             TokenTypes.NOT_EQUAL,         // "!="
             TokenTypes.DIV,               // '/'
             TokenTypes.PLUS,              //' +' (unary plus is UNARY_PLUS)
             TokenTypes.MINUS,             // '-' (unary minus is UNARY_MINUS)
             TokenTypes.STAR,              // '*'
@@ -152,59 +165,59 @@ public class OperatorWrapCheck
             TokenTypes.BOR,               // '|'
             TokenTypes.LOR,               // "||"
             TokenTypes.BAND,              // '&'
             TokenTypes.LAND,              // "&&"
             TokenTypes.LITERAL_INSTANCEOF,
             TokenTypes.TYPE_EXTENSION_AND,
             TokenTypes.ASSIGN,            // '='
             TokenTypes.DIV_ASSIGN,        // "/="
             TokenTypes.PLUS_ASSIGN,       // "+="
             TokenTypes.MINUS_ASSIGN,      //"-="
             TokenTypes.STAR_ASSIGN,       // "*="
             TokenTypes.MOD_ASSIGN,        // "%="
             TokenTypes.SR_ASSIGN,         // ">>="
             TokenTypes.BSR_ASSIGN,        // ">>>="
             TokenTypes.SL_ASSIGN,         // "<<="
             TokenTypes.BXOR_ASSIGN,       // "^="
             TokenTypes.BOR_ASSIGN,        // "|="
             TokenTypes.BAND_ASSIGN,       // "&="
 
         };
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
         if (ast.getType() == TokenTypes.COLON) {
             final DetailAST parent = ast.getParent();
             if ((parent.getType() == TokenTypes.LITERAL_DEFAULT)
                 || (parent.getType() == TokenTypes.LITERAL_CASE))
             {
                 //we do not want to check colon for cases and defaults
                 return;
             }
         }
         final WrapOption wOp = getAbstractOption();
 
         final String text = ast.getText();
         final int colNo = ast.getColumnNo();
         final int lineNo = ast.getLineNo();
         final String currentLine = getLine(lineNo - 1);
 
         // TODO: Handle comments before and after operator
         // Check if rest of line is whitespace, and not just the operator
         // by itself. This last bit is to handle the operator on a line by
         // itself.
         if ((wOp == WrapOption.NL)
             && !text.equals(currentLine.trim())
             && (currentLine.substring(colNo + text.length())
                 .trim().length() == 0))
         {
-            log(lineNo, colNo, "line.new", text);
+            log(lineNo, colNo, LINE_NEW, text);
         }
         else if ((wOp == WrapOption.EOL)
                   && Utils.whitespaceBefore(colNo - 1, currentLine))
         {
-            log(lineNo, colNo, "line.previous", text);
+            log(lineNo, colNo, LINE_PREVIOUS, text);
         }
     }
 }
