diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/DefaultConfiguration.java b/src/main/java/com/puppycrawl/tools/checkstyle/DefaultConfiguration.java
index 078512096..db3db65fa 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/DefaultConfiguration.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/DefaultConfiguration.java
@@ -1,151 +1,151 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2014  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle;
 
 import com.google.common.collect.ImmutableMap;
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
 /**
  * Default implementation of the Configuration interface.
  * @author lkuehne
  */
 public final class DefaultConfiguration implements Configuration
 {
     /** Required for serialization. */
     private static final long serialVersionUID = 1157875385356127169L;
 
     /** The name of this configuration */
-    private final String mName;
+    private final String name;
 
     /** the list of child Configurations */
-    private final List<Configuration> mChildren = Lists.newArrayList();
+    private final List<Configuration> children = Lists.newArrayList();
 
     /** the map from attribute names to attribute values */
-    private final Map<String, String> mAttributeMap = Maps.newHashMap();
+    private final Map<String, String> attributeMap = Maps.newHashMap();
 
     /** the map containing custom messages. */
-    private final Map<String, String> mMessages = Maps.newHashMap();
+    private final Map<String, String> messages = Maps.newHashMap();
 
     /**
      * Instantiates a DefaultConfiguration.
-     * @param aName the name for this DefaultConfiguration.
+     * @param name the name for this DefaultConfiguration.
      */
-    public DefaultConfiguration(String aName)
+    public DefaultConfiguration(String name)
     {
-        mName = aName;
+        this.name = name;
     }
 
     /** {@inheritDoc} */
     @Override
     public String[] getAttributeNames()
     {
-        final Set<String> keySet = mAttributeMap.keySet();
+        final Set<String> keySet = attributeMap.keySet();
         return keySet.toArray(new String[keySet.size()]);
     }
 
     /** {@inheritDoc} */
     @Override
-    public String getAttribute(String aName) throws CheckstyleException
+    public String getAttribute(String name) throws CheckstyleException
     {
-        if (!mAttributeMap.containsKey(aName)) {
+        if (!attributeMap.containsKey(name)) {
             // TODO: i18n
             throw new CheckstyleException(
-                    "missing key '" + aName + "' in " + getName());
+                    "missing key '" + name + "' in " + getName());
         }
-        return mAttributeMap.get(aName);
+        return attributeMap.get(name);
     }
 
     /** {@inheritDoc} */
     @Override
     public Configuration[] getChildren()
     {
-        return mChildren.toArray(
-            new Configuration[mChildren.size()]);
+        return children.toArray(
+            new Configuration[children.size()]);
     }
 
     /** {@inheritDoc} */
     @Override
     public String getName()
     {
-        return mName;
+        return name;
     }
 
     /**
      * Makes a configuration a child of this configuration.
-     * @param aConfiguration the child configuration.
+     * @param configuration the child configuration.
      */
-    public void addChild(Configuration aConfiguration)
+    public void addChild(Configuration configuration)
     {
-        mChildren.add(aConfiguration);
+        children.add(configuration);
     }
 
     /**
      * Removes a child of this configuration.
-     * @param aConfiguration the child configuration to remove.
+     * @param configuration the child configuration to remove.
      */
-    public void removeChild(final Configuration aConfiguration)
+    public void removeChild(final Configuration configuration)
     {
-        mChildren.remove(aConfiguration);
+        children.remove(configuration);
     }
 
     /**
      * Adds an attribute to this configuration.
-     * @param aName the name of the attribute.
-     * @param aValue the value of the attribute.
+     * @param name the name of the attribute.
+     * @param value the value of the attribute.
      */
-    public void addAttribute(String aName, String aValue)
+    public void addAttribute(String name, String value)
     {
-        final String current = mAttributeMap.put(aName, aValue);
+        final String current = attributeMap.put(name, value);
         if (null == current) {
-            mAttributeMap.put(aName, aValue);
+            attributeMap.put(name, value);
         }
         else {
-            mAttributeMap.put(aName, current + "," + aValue);
+            attributeMap.put(name, current + "," + value);
         }
     }
 
     /**
      * Adds a custom message to this configuration.
-     * @param aKey the message key
-     * @param aValue the custom message pattern
+     * @param key the message key
+     * @param value the custom message pattern
      */
-    public void addMessage(String aKey, String aValue)
+    public void addMessage(String key, String value)
     {
-        mMessages.put(aKey, aValue);
+        messages.put(key, value);
     }
 
     /**
      * Returns an unmodifiable map instance containing the custom messages
      * for this configuration.
      * @return unmodifiable map containing custom messages
      */
     @Override
     public ImmutableMap<String, String> getMessages()
     {
-        return ImmutableMap.copyOf(mMessages);
+        return ImmutableMap.copyOf(messages);
     }
 }
