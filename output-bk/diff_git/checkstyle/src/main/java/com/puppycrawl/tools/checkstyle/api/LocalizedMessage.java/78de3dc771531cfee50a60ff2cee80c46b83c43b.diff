diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
index c9e080492..3161f30bf 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
@@ -364,108 +364,122 @@ public final class LocalizedMessage
     public SeverityLevel getSeverityLevel() {
         return severityLevel;
     }
 
     /**
      * Returns id of module.
      * @return the module identifier.
      */
     public String getModuleId() {
         return moduleId;
     }
 
     /**
      * Returns the message key to locate the translation, can also be used
      * in IDE plugins to map error messages to corrective actions.
      *
      * @return the message key
      */
     public String getKey() {
         return key;
     }
 
     /**
      * Gets the name of the source for this LocalizedMessage.
      * @return the name of the source for this LocalizedMessage
      */
     public String getSourceName() {
         return sourceClass.getName();
     }
 
     /**
      * Sets a locale to use for localization.
      * @param locale the locale to use for localization
      */
     public static void setLocale(Locale locale) {
         clearCache();
         if (Locale.ENGLISH.getLanguage().equals(locale.getLanguage())) {
             sLocale = Locale.ROOT;
         }
         else {
             sLocale = locale;
         }
     }
 
     ////////////////////////////////////////////////////////////////////////////
     // Interface Comparable methods
     ////////////////////////////////////////////////////////////////////////////
 
     @Override
     public int compareTo(LocalizedMessage other) {
-        int result = Integer.compare(lineNo, other.lineNo);
+        final int result;
 
         if (lineNo == other.lineNo) {
             if (columnNo == other.columnNo) {
-                result = getMessage().compareTo(other.getMessage());
+                if (Objects.equals(moduleId, other.moduleId)) {
+                    result = getMessage().compareTo(other.getMessage());
+                }
+                else if (moduleId == null) {
+                    result = -1;
+                }
+                else if (other.moduleId == null) {
+                    result = 1;
+                }
+                else {
+                    result = moduleId.compareTo(other.moduleId);
+                }
             }
             else {
                 result = Integer.compare(columnNo, other.columnNo);
             }
         }
+        else {
+            result = Integer.compare(lineNo, other.lineNo);
+        }
         return result;
     }
 
     /**
      * <p>
      * Custom ResourceBundle.Control implementation which allows explicitly read
      * the properties files as UTF-8.
      * </p>
      *
      * @author <a href="mailto:nesterenko-aleksey@list.ru">Aleksey Nesterenko</a>
      * @noinspection IOResourceOpenedButNotSafelyClosed
      */
     public static class Utf8Control extends Control {
         @Override
         public ResourceBundle newBundle(String aBaseName, Locale aLocale, String aFormat,
                  ClassLoader aLoader, boolean aReload) throws IOException {
             // The below is a copy of the default implementation.
             final String bundleName = toBundleName(aBaseName, aLocale);
             final String resourceName = toResourceName(bundleName, "properties");
             InputStream stream = null;
             if (aReload) {
                 final URL url = aLoader.getResource(resourceName);
                 if (url != null) {
                     final URLConnection connection = url.openConnection();
                     if (connection != null) {
                         connection.setUseCaches(false);
                         stream = connection.getInputStream();
                     }
                 }
             }
             else {
                 stream = aLoader.getResourceAsStream(resourceName);
             }
             ResourceBundle resourceBundle = null;
             if (stream != null) {
                 final Reader streamReader = new InputStreamReader(stream, "UTF-8");
                 try {
                     // Only this line is changed to make it to read properties files as UTF-8.
                     resourceBundle = new PropertyResourceBundle(streamReader);
                 }
                 finally {
                     stream.close();
                 }
             }
             return resourceBundle;
         }
     }
 }
