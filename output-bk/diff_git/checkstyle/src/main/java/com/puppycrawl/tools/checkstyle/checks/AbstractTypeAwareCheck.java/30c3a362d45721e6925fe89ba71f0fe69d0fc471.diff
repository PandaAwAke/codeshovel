diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
index 8dea646ad..01879e97e 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
@@ -275,162 +275,162 @@ public abstract class AbstractTypeAwareCheck extends Check {
 
         if (!suppressLoadErrors) {
             log(lineNo, columnNo, msgKey, values);
         }
     }
 
     /**
      * Collects the details of a package.
      * @param ast node containing the package details
      */
     private void processPackage(DetailAST ast) {
         final DetailAST nameAST = ast.getLastChild().getPreviousSibling();
         packageFullIdent = FullIdent.createFullIdent(nameAST);
     }
 
     /**
      * Collects the details of imports.
      * @param ast node containing the import details
      */
     private void processImport(DetailAST ast) {
         final FullIdent name = FullIdent.createFullIdentBelow(ast);
         imports.add(name.getText());
     }
 
     /**
      * Process type params (if any) for given class, enum or method.
      * @param ast class, enum or method to process.
      */
     private void processTypeParams(DetailAST ast) {
         final DetailAST params =
             ast.findFirstToken(TokenTypes.TYPE_PARAMETERS);
 
         final Map<String, AbstractClassInfo> paramsMap = Maps.newHashMap();
         typeParams.push(paramsMap);
 
         if (params == null) {
             return;
         }
 
         for (DetailAST child = params.getFirstChild();
              child != null;
              child = child.getNextSibling()) {
             if (child.getType() == TokenTypes.TYPE_PARAMETER) {
                 final String alias =
                     child.findFirstToken(TokenTypes.IDENT).getText();
                 final DetailAST bounds =
                     child.findFirstToken(TokenTypes.TYPE_UPPER_BOUNDS);
                 if (bounds != null) {
                     final FullIdent name =
                         FullIdent.createFullIdentBelow(bounds);
-                    final AbstractClassInfo ci =
+                    final AbstractClassInfo classInfo =
                         createClassInfo(new Token(name), currentClassName);
-                    paramsMap.put(alias, ci);
+                    paramsMap.put(alias, classInfo);
                 }
             }
         }
     }
 
     /**
      * Processes class definition.
      * @param ast class definition to process.
      */
     private void processClass(DetailAST ast) {
         final DetailAST ident = ast.findFirstToken(TokenTypes.IDENT);
         String innerClass = ident.getText();
 
         if (!currentClassName.isEmpty()) {
             innerClass = "$" + innerClass;
         }
         currentClassName += innerClass;
         processTypeParams(ast);
     }
 
     /**
      * Returns current class.
      * @return name of current class.
      */
     protected final String getCurrentClassName() {
         return currentClassName;
     }
 
     /**
      * Creates class info for given name.
      * @param name name of type.
      * @param surroundingClass name of surrounding class.
      * @return class info for given name.
      */
     protected final AbstractClassInfo createClassInfo(final Token name,
                                               final String surroundingClass) {
-        final AbstractClassInfo ci = findClassAlias(name.getText());
-        if (ci != null) {
-            return new ClassAlias(name, ci);
+        final AbstractClassInfo classInfo = findClassAlias(name.getText());
+        if (classInfo != null) {
+            return new ClassAlias(name, classInfo);
         }
         return new RegularClass(name, surroundingClass, this);
     }
 
     /**
      * Looking if a given name is alias.
      * @param name given name
      * @return ClassInfo for alias if it exists, null otherwise
      */
     protected final AbstractClassInfo findClassAlias(final String name) {
-        AbstractClassInfo ci = null;
+        AbstractClassInfo classInfo = null;
         final Iterator<Map<String, AbstractClassInfo>> iterator = typeParams.descendingIterator();
         while (iterator.hasNext()) {
             final Map<String, AbstractClassInfo> paramMap = iterator.next();
-            ci = paramMap.get(name);
-            if (ci != null) {
+            classInfo = paramMap.get(name);
+            if (classInfo != null) {
                 break;
             }
         }
-        return ci;
+        return classInfo;
     }
 
     /**
      * Contains class's {@code Token}.
      */
     protected abstract static class AbstractClassInfo {
         /** {@code FullIdent} associated with this class. */
         private final Token name;
 
         /**
          * Creates new instance of class information object.
          * @param className token which represents class name.
          */
         protected AbstractClassInfo(final Token className) {
             if (className == null) {
                 throw new IllegalArgumentException(
                     "ClassInfo's name should be non-null");
             }
             name = className;
         }
 
         /**
          * Gets class name.
          * @return class name
          */
         public final Token getName() {
             return name;
         }
 
         /**
          * @return {@code Class} associated with an object.
          */
         public abstract Class<?> getClazz();
     }
 
     /** Represents regular classes/enums. */
     private static final class RegularClass extends AbstractClassInfo {
         /** Name of surrounding class. */
         private final String surroundingClass;
         /** Is class loadable. */
         private boolean loadable = true;
         /** {@code Class} object of this class if it's loadable. */
         private Class<?> classObj;
         /** The check we use to resolve classes. */
         private final AbstractTypeAwareCheck check;
 
         /**
          * Creates new instance of of class information object.
          * @param name {@code FullIdent} associated with new object.
          * @param surroundingClass name of current surrounding class.
