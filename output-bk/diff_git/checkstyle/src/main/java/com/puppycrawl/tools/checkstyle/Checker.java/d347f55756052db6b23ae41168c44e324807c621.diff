diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java b/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
index f0fa91106..c347b014e 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
@@ -243,102 +243,106 @@ public class Checker extends AutomaticBean implements MessageDispatcher
      * Processes a set of files with all FileSetChecks.
      * Once this is done, it is highly recommended to call for
      * the destroy method to close and remove the listeners.
      * @param files the list of files to be audited.
      * @return the total number of errors found
      * @see #destroy()
      */
     public int process(List<File> files)
     {
         // Prepare to start
         fireAuditStarted();
         for (final FileSetCheck fsc : fileSetChecks) {
             fsc.beginProcessing(charset);
         }
 
         // Process each file
         for (final File f : files) {
             if (!fileExtensionMatches(f, fileExtensions)) {
                 continue;
             }
             final String fileName = f.getAbsolutePath();
             fireFileStarted(fileName);
             final SortedSet<LocalizedMessage> fileMessages = Sets.newTreeSet();
             try {
                 final FileText theText = new FileText(f.getAbsoluteFile(),
                         charset);
                 for (final FileSetCheck fsc : fileSetChecks) {
                     fileMessages.addAll(fsc.process(f, theText));
                 }
             }
             catch (final FileNotFoundException fnfe) {
                 Utils.getExceptionLogger().debug(
                         "FileNotFoundException occured.", fnfe);
                 fileMessages.add(new LocalizedMessage(0,
                         Defn.CHECKSTYLE_BUNDLE, "general.fileNotFound", null,
                         null, this.getClass(), null));
             }
             catch (final IOException ioe) {
                 Utils.getExceptionLogger().debug("IOException occured.", ioe);
                 fileMessages.add(new LocalizedMessage(0,
                         Defn.CHECKSTYLE_BUNDLE, "general.exception",
                         new String[] {ioe.getMessage()}, null, this.getClass(),
                         null));
             }
             fireErrors(fileName, fileMessages);
             fireFileFinished(fileName);
         }
 
         // Finish up
         for (final FileSetCheck fsc : fileSetChecks) {
-            // They may also log!!!
+            // It may also log!!!
             fsc.finishProcessing();
+        }
+
+        for (final FileSetCheck fsc : fileSetChecks) {
+            // It may also log!!!
             fsc.destroy();
         }
 
         final int errorCount = counter.getCount();
         fireAuditFinished();
         return errorCount;
     }
 
     /**
      * Create a stripped down version of a filename.
      * @param fileName the original filename
      * @return the filename where an initial prefix of basedir is stripped
      */
     private String getStrippedFileName(final String fileName)
     {
         return Utils.getStrippedFileName(basedir, fileName);
     }
 
     /** @param basedir the base directory to strip off in filenames */
     public void setBasedir(String basedir)
     {
         // we use getAbsolutePath() instead of getCanonicalPath()
         // because normalize() removes all . and .. so path
         // will be canonical by default.
         this.basedir = normalize(basedir);
     }
 
     /**
      * &quot;normalize&quot; the given absolute path.
      *
      * <p>This includes:
      * <ul>
      *   <li>Uppercase the drive letter if there is one.</li>
      *   <li>Remove redundant slashes after the drive spec.</li>
      *   <li>resolve all ./, .\, ../ and ..\ sequences.</li>
      *   <li>DOS style paths that start with a drive letter will have
      *     \ as the separator.</li>
      * </ul>
      * <p>
      *
      * @param normalizingPath a path for &quot;normalizing&quot;
      * @return &quot;normalized&quot; file name
      * @throws java.lang.NullPointerException if the file path is
      * equal to null.
      */
     public String normalize(String normalizingPath)
     {
 
         if (normalizingPath == null) {
             return normalizingPath;
