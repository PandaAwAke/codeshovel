diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
index 3744f6e74..cd5a75cc8 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
@@ -346,107 +346,107 @@ public final class Main {
 
         return result;
     }
 
     /**
      * Verifies threads number CLI parameter value.
      * @param cmdLine a command line
      * @param result a resulting list of errors
      * @param cliParameterName a CLI parameter name
      * @param mustBeGreaterThanZeroMessage a message which should be reported
      *                                     if the number of threads is less than or equal to zero
      * @param invalidNumberMessage a message which should be reported if the passed value
      *                             is not a valid number
      */
     private static void verifyThreadsNumberParameter(CommandLine cmdLine, List<String> result,
         String cliParameterName, String mustBeGreaterThanZeroMessage,
         String invalidNumberMessage) {
         if (cmdLine.hasOption(cliParameterName)) {
             final String checkerThreadsNumberStr =
                 cmdLine.getOptionValue(cliParameterName);
             if (CommonUtils.isInt(checkerThreadsNumberStr)) {
                 final int checkerThreadsNumber = Integer.parseInt(checkerThreadsNumberStr);
                 if (checkerThreadsNumber < 1) {
                     result.add(mustBeGreaterThanZeroMessage);
                 }
             }
             else {
                 result.add(invalidNumberMessage);
             }
         }
     }
 
     /**
      * Do execution of CheckStyle based on Command line options.
      * @param commandLine command line object
      * @param filesToProcess List of files to process found from the command line.
      * @return number of violations
      * @throws IOException if a file could not be read.
      * @throws CheckstyleException if something happens processing the files.
      */
     private static int runCli(CommandLine commandLine, List<File> filesToProcess)
             throws IOException, CheckstyleException {
         int result = 0;
 
         // create config helper object
         final CliOptions config = convertCliToPojo(commandLine, filesToProcess);
         if (commandLine.hasOption(OPTION_T_NAME)) {
             // print AST
             final File file = config.files.get(0);
             final String stringAst = AstTreeStringPrinter.printFileAst(file,
-                    AstTreeStringPrinter.PrintOptions.WITHOUT_COMMENTS);
+                    JavaParser.Options.WITHOUT_COMMENTS);
             System.out.print(stringAst);
         }
         else if (commandLine.hasOption(OPTION_CAPITAL_T_NAME)) {
             final File file = config.files.get(0);
             final String stringAst = AstTreeStringPrinter.printFileAst(file,
-                    AstTreeStringPrinter.PrintOptions.WITH_COMMENTS);
+                    JavaParser.Options.WITH_COMMENTS);
             System.out.print(stringAst);
         }
         else if (commandLine.hasOption(OPTION_J_NAME)) {
             final File file = config.files.get(0);
             final String stringAst = DetailNodeTreeStringPrinter.printFileAst(file);
             System.out.print(stringAst);
         }
         else if (commandLine.hasOption(OPTION_CAPITAL_J_NAME)) {
             final File file = config.files.get(0);
             final String stringAst = AstTreeStringPrinter.printJavaAndJavadocTree(file);
             System.out.print(stringAst);
         }
         else {
             if (commandLine.hasOption(OPTION_D_NAME)) {
                 final Logger parentLogger = Logger.getLogger(Main.class.getName()).getParent();
                 final ConsoleHandler handler = new ConsoleHandler();
                 handler.setLevel(Level.FINEST);
                 handler.setFilter(new Filter() {
                     private final String packageName = Main.class.getPackage().getName();
 
                     @Override
                     public boolean isLoggable(LogRecord record) {
                         return record.getLoggerName().startsWith(packageName);
                     }
                 });
                 parentLogger.addHandler(handler);
                 parentLogger.setLevel(Level.FINEST);
             }
             if (LOG.isDebugEnabled()) {
                 LOG.debug("Checkstyle debug logging enabled");
                 LOG.debug("Running Checkstyle with version: "
                         + Main.class.getPackage().getImplementationVersion());
             }
 
             // run Checker
             result = runCheckstyle(config);
         }
 
         return result;
     }
 
     /**
      * Util method to convert CommandLine type to POJO object.
      * @param cmdLine command line object
      * @param filesToProcess List of files to process found from the command line.
      * @return command line option as POJO object
      */
     private static CliOptions convertCliToPojo(CommandLine cmdLine, List<File> filesToProcess) {
         final CliOptions conf = new CliOptions();
         conf.format = cmdLine.getOptionValue(OPTION_F_NAME);
