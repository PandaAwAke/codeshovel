diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
index 312f29f4d..104985e9f 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
@@ -218,101 +218,101 @@ public class NeedBracesCheck extends Check {
      * Checks if current statement can be skipped by "need braces" warning.
      * @param statement if, for, while, do-while, lambda, else, case, default statements.
      * @return true if current statement can be skipped by Check.
      */
     private boolean isSkipStatement(DetailAST statement) {
         return allowSingleLineStatement && isSingleLineStatement(statement);
     }
 
     /**
      * Checks if current loop statement does not have body, e.g.:
      * <p>
      * {@code
      *   while (value.incrementValue() < 5);
      *   ...
      *   for(int i = 0; i < 10; value.incrementValue());
      * }
      * </p>
      * @param ast ast token.
      * @return true if current loop statement does not have body.
      */
     private boolean isEmptyLoopBody(DetailAST ast) {
         boolean noBodyLoop = false;
 
         if (ast.getType() == TokenTypes.LITERAL_FOR
                 || ast.getType() == TokenTypes.LITERAL_WHILE) {
             DetailAST currentToken = ast.getFirstChild();
             while (currentToken.getNextSibling() != null) {
                 currentToken = currentToken.getNextSibling();
             }
             noBodyLoop = currentToken.getType() == TokenTypes.EMPTY_STAT;
         }
         return noBodyLoop;
     }
 
     /**
      * Checks if current statement is single-line statement, e.g.:
      * <p>
      * {@code
      * if (obj.isValid()) return true;
      * }
      * </p>
      * <p>
      * {@code
      * while (obj.isValid()) return true;
      * }
      * </p>
      * @param statement if, for, while, do-while, lambda, else, case, default statements.
      * @return true if current statement is single-line statement.
      */
     private static boolean isSingleLineStatement(DetailAST statement) {
-        boolean result;
+        final boolean result;
 
         switch (statement.getType()) {
             case TokenTypes.LITERAL_IF:
                 result = isSingleLineIf(statement);
                 break;
             case TokenTypes.LITERAL_FOR:
                 result = isSingleLineFor(statement);
                 break;
             case TokenTypes.LITERAL_DO:
                 result = isSingleLineDoWhile(statement);
                 break;
             case TokenTypes.LITERAL_WHILE:
                 result = isSingleLineWhile(statement);
                 break;
             case TokenTypes.LAMBDA:
                 result = isSingleLineLambda(statement);
                 break;
             case TokenTypes.LITERAL_CASE:
                 result = isSingleLineCase(statement);
                 break;
             case TokenTypes.LITERAL_DEFAULT:
                 result = isSingleLineDefault(statement);
                 break;
             default:
                 result = isSingleLineElse(statement);
                 break;
         }
 
         return result;
     }
 
     /**
      * Checks if current while statement is single-line statement, e.g.:
      * <p>
      * {@code
      * while (obj.isValid()) return true;
      * }
      * </p>
      * @param literalWhile {@link TokenTypes#LITERAL_WHILE while statement}.
      * @return true if current while statement is single-line statement.
      */
     private static boolean isSingleLineWhile(DetailAST literalWhile) {
         boolean result = false;
         if (literalWhile.getParent().getType() == TokenTypes.SLIST
                 && literalWhile.getLastChild().getType() != TokenTypes.SLIST) {
             final DetailAST block = literalWhile.getLastChild().getPreviousSibling();
             result = literalWhile.getLineNo() == block.getLineNo();
         }
         return result;
     }
