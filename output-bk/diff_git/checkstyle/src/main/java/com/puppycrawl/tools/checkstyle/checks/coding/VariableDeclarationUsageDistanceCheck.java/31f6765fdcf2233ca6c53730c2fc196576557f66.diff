diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java
index da72a254d..d55d6320b 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java
@@ -728,127 +728,127 @@ public class VariableDeclarationUsageDistanceCheck extends Check {
 
         // Checking variable usage inside all CATCH blocks.
         while (currentNode != null
                 && currentNode.getType() == TokenTypes.LITERAL_CATCH) {
             final DetailAST catchBlock = currentNode.getLastChild();
 
             if (isChild(catchBlock, variable)) {
                 variableUsageExpressions.add(catchBlock);
             }
             currentNode = currentNode.getNextSibling();
         }
 
         // Checking variable usage inside FINALLY block.
         if (currentNode != null) {
             final DetailAST finalBlock = currentNode.getLastChild();
 
             if (isChild(finalBlock, variable)) {
                 variableUsageExpressions.add(finalBlock);
             }
         }
 
         DetailAST variableUsageNode = null;
 
         // If variable usage exists in several related blocks, then
         // firstNodeInsideBlock = null, otherwise if variable usage exists
         // only inside one block, then get node from
         // variableUsageExpressions.
         if (variableUsageExpressions.size() == 1) {
             variableUsageNode = variableUsageExpressions.get(0).getFirstChild();
         }
 
         return variableUsageNode;
     }
 
     /**
      * Checks if variable is in operator declaration. For instance:
      * <pre>
      * boolean b = true;
      * if (b) {...}
      * </pre>
      * Variable 'b' is in declaration of operator IF.
      * @param operator
      *        Ast node which represents operator.
      * @param variable
      *        Variable which is checked for content in operator.
      * @return true if operator contains variable in its declaration, otherwise
      *         - false.
      */
     private static boolean isVariableInOperatorExpr(
             DetailAST operator, DetailAST variable) {
-        boolean isVarInOperatorDeclr = false;
+        boolean isVarInOperatorDeclaration = false;
         final DetailAST openingBracket =
                 operator.findFirstToken(TokenTypes.LPAREN);
 
         // Get EXPR between brackets
         DetailAST exprBetweenBrackets = openingBracket.getNextSibling();
 
         // Look if variable is in operator expression
         while (exprBetweenBrackets.getType() != TokenTypes.RPAREN) {
 
             if (isChild(exprBetweenBrackets, variable)) {
-                isVarInOperatorDeclr = true;
+                isVarInOperatorDeclaration = true;
                 break;
             }
             exprBetweenBrackets = exprBetweenBrackets.getNextSibling();
         }
 
         // Variable may be met in ELSE declaration
         // So, check variable usage in these declarations.
-        if (!isVarInOperatorDeclr && operator.getType() == TokenTypes.LITERAL_IF) {
+        if (!isVarInOperatorDeclaration && operator.getType() == TokenTypes.LITERAL_IF) {
             final DetailAST elseBlock = operator.getLastChild();
 
             if (elseBlock.getType() == TokenTypes.LITERAL_ELSE) {
                 // Get IF followed by ELSE
                 final DetailAST firstNodeInsideElseBlock = elseBlock.getFirstChild();
 
                 if (firstNodeInsideElseBlock.getType() == TokenTypes.LITERAL_IF) {
-                    isVarInOperatorDeclr =
+                    isVarInOperatorDeclaration =
                         isVariableInOperatorExpr(firstNodeInsideElseBlock, variable);
                 }
             }
         }
 
-        return isVarInOperatorDeclr;
+        return isVarInOperatorDeclaration;
     }
 
     /**
      * Checks if Ast node contains given element.
      * @param parent
      *        Node of AST.
      * @param ast
      *        Ast element which is checked for content in Ast node.
      * @return true if Ast element was found in Ast node, otherwise - false.
      */
     private static boolean isChild(DetailAST parent, DetailAST ast) {
         boolean isChild = false;
         final ASTEnumeration astList = parent.findAllPartial(ast);
 
         while (astList.hasMoreNodes()) {
             final DetailAST astNode = (DetailAST) astList.nextNode();
             DetailAST astParent = astNode.getParent();
 
             while (astParent != null) {
 
                 if (astParent.equals(parent)
                         && astParent.getLineNo() == parent.getLineNo()) {
                     isChild = true;
                     break;
                 }
                 astParent = astParent.getParent();
             }
         }
 
         return isChild;
     }
 
     /**
      * Checks if entrance variable is contained in ignored pattern.
      * @param variable
      *        Variable which is checked for content in ignored pattern.
      * @return true if variable was found, otherwise - false.
      */
     private boolean isVariableMatchesIgnorePattern(String variable) {
         final Matcher matcher = ignoreVariablePattern.matcher(variable);
         return matcher.matches();
     }
 }
