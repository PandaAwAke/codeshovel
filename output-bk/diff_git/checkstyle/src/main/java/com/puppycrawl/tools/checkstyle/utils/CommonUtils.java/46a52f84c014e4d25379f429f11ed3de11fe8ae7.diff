diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java
index 6c3063a22..2997569c2 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java
@@ -5,139 +5,139 @@
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.utils;
 
 import java.io.Closeable;
 import java.io.File;
 import java.io.IOException;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.util.regex.Pattern;
 import java.util.regex.PatternSyntaxException;
 
 import org.apache.commons.beanutils.ConversionException;
 
 /**
  * Contains utility methods.
  *
  * @author <a href="mailto:nesterenko-aleksey@list.ru">Aleksey Nesterenko</a>
  */
 public final class CommonUtils {
 
     /** Stop instances being created **/
     private CommonUtils() {
 
     }
 
     /**
      * Returns whether the file extension matches what we are meant to process.
      *
      * @param file
      *            the file to be checked.
      * @param fileExtensions
      *            files extensions, empty property in config makes it matches to all.
      * @return whether there is a match.
      */
-    public static boolean fileExtensionMatches(File file, String... fileExtensions) {
+    public static boolean matchesFileExtension(File file, String... fileExtensions) {
         boolean result = false;
         if (fileExtensions == null || fileExtensions.length == 0) {
             result = true;
         }
         else {
             // normalize extensions so all of them have a leading dot
             final String[] withDotExtensions = new String[fileExtensions.length];
             for (int i = 0; i < fileExtensions.length; i++) {
                 final String extension = fileExtensions[i];
                 if (startsWithChar(extension, '.')) {
                     withDotExtensions[i] = extension;
                 }
                 else {
                     withDotExtensions[i] = "." + extension;
                 }
             }
 
             final String fileName = file.getName();
             for (final String fileExtension : withDotExtensions) {
                 if (fileName.endsWith(fileExtension)) {
                     result = true;
                 }
             }
         }
 
         return result;
     }
 
     /**
      * Returns whether the specified string contains only whitespace up to the specified index.
      *
      * @param index
      *            index to check up to
      * @param line
      *            the line to check
      * @return whether there is only whitespace
      */
-    public static boolean whitespaceBefore(int index, String line) {
+    public static boolean hasWhitespaceBefore(int index, String line) {
         for (int i = 0; i < index; i++) {
             if (!Character.isWhitespace(line.charAt(i))) {
                 return false;
             }
         }
         return true;
     }
 
     /**
      * Returns the length of a string ignoring all trailing whitespace.
      * It is a pity that there is not a trim() like
      * method that only removed the trailing whitespace.
      *
      * @param line
      *            the string to process
      * @return the length of the string ignoring all trailing whitespace
      **/
     public static int lengthMinusTrailingWhitespace(String line) {
         int len = line.length();
         for (int i = len - 1; i >= 0; i--) {
             if (!Character.isWhitespace(line.charAt(i))) {
                 break;
             }
             len--;
         }
         return len;
     }
 
     /**
      * Returns the length of a String prefix with tabs expanded.
      * Each tab is counted as the number of characters is
      * takes to jump to the next tab stop.
      *
      * @param inputString
      *            the input String
      * @param toIdx
      *            index in string (exclusive) where the calculation stops
      * @param tabWidth
      *            the distance between tab stop position.
      * @return the length of string.substring(0, toIdx) with tabs expanded.
      */
     public static int lengthExpandedTabs(String inputString,
             int toIdx,
             int tabWidth) {
         int len = 0;
         for (int idx = 0; idx < toIdx; idx++) {
             if (inputString.charAt(idx) == '\t') {
                 len = (len / tabWidth + 1) * tabWidth;
             }
             else {
