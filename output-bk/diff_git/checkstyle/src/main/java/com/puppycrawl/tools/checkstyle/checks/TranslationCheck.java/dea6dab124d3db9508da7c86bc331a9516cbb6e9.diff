diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
index 6a53e7cd0..4e5681285 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
@@ -155,154 +155,152 @@ public class TranslationCheck
             arrangePropertyFiles(propertyFiles, basenameSeparator);
         checkExistenceOfTranslations(propFilesMap);
         checkPropertyFileSets(propFilesMap);
     }
 
     /**
      * Checks existence of translation files (arranged in a map)
      * for each resource bundle in project.
      * @param translations the translation files bundles organized as Map.
      */
     private void checkExistenceOfTranslations(SetMultimap<String, File> translations) {
         for (String fullyQualifiedBundleName : translations.keySet()) {
             final String bundleBaseName = extractName(fullyQualifiedBundleName);
             if (bundleBaseName.contains("messages")) {
                 final Set<File> filesInBundle = translations.get(fullyQualifiedBundleName);
                 checkExistenceOfDefaultTranslation(filesInBundle);
                 checkExistenceOfRequiredTranslations(filesInBundle);
             }
         }
     }
 
     /**
      * Checks an existence of default translation file in
      * a set of files in resource bundle. The name of this file
      * begins with the full name of the resource bundle and ends
      * with the extension suffix.
      * @param filesInResourceBundle a set of files in resource bundle.
      */
     private void checkExistenceOfDefaultTranslation(Set<File> filesInResourceBundle) {
         final String fullBundleName = getFullBundleName(filesInResourceBundle);
         final String extension = getFileExtensions()[0];
         final String defaultTranslationFileName = fullBundleName + extension;
 
         final boolean missing = isMissing(defaultTranslationFileName, filesInResourceBundle);
         if (missing) {
             logMissingTranslation(defaultTranslationFileName);
         }
     }
 
     /**
      * Checks existence of translation files in a set of files
      * in resource bundle. If there is no translation file
      * with required language code, there will be a violation.
      * The name of translation file begins with the full name
      * of resource bundle which is followed by '_' and language code,
      * it ends with the extension suffix.
      * @param filesInResourceBundle a set of files in resource bundle.
      */
     private void checkExistenceOfRequiredTranslations(Set<File> filesInResourceBundle) {
         final String fullBundleName = getFullBundleName(filesInResourceBundle);
-        final String extension = getFileExtensions()[0];
 
         for (String languageCode : requiredTranslations) {
-            final String translationFileName =
-                fullBundleName + '_' + languageCode + extension;
+            final String translationFileName = fullBundleName + '_' + languageCode;
 
             final boolean missing = isMissing(translationFileName, filesInResourceBundle);
             if (missing) {
                 final String missingTranslationFileName =
                     formMissingTranslationName(fullBundleName, languageCode);
                 logMissingTranslation(missingTranslationFileName);
             }
         }
     }
 
     /**
      * Gets full name of resource bundle.
      * Full name of resource bundle consists of bundle path and
      * full base name.
      * @param filesInResourceBundle a set of files in resource bundle.
      * @return full name of resource bundle.
      */
     private String getFullBundleName(Set<File> filesInResourceBundle) {
         final String fullBundleName;
 
         final File firstTranslationFile = Collections.min(filesInResourceBundle);
         final String translationPath = firstTranslationFile.getPath();
         final String extension = getFileExtensions()[0];
 
         final Pattern pattern = Pattern.compile("^.+_[a-z]{2}"
             + extension + "$");
         final Matcher matcher = pattern.matcher(translationPath);
         if (matcher.matches()) {
             fullBundleName = translationPath
                 .substring(0, translationPath.lastIndexOf('_'));
         }
         else {
             fullBundleName = translationPath
                 .substring(0, translationPath.lastIndexOf('.'));
         }
         return fullBundleName;
     }
 
     /**
      * Checks whether file is missing in resource bundle.
      * @param fileName file name.
      * @param filesInResourceBundle a set of files in resource bundle.
      * @return true if file is missing.
      */
     private static boolean isMissing(String fileName, Set<File> filesInResourceBundle) {
         boolean missing = false;
         for (File file : filesInResourceBundle) {
             final String currentFileName = file.getPath();
-            missing = !currentFileName.equals(fileName);
+            missing = !currentFileName.contains(fileName);
             if (!missing) {
                 break;
             }
         }
         return missing;
     }
 
     /**
      * Forms a name of translation file which is missing.
      * @param fullBundleName full bundle name.
      * @param languageCode language code.
      * @return name of translation file which is missing.
      */
     private String formMissingTranslationName(String fullBundleName, String languageCode) {
         final String extension = getFileExtensions()[0];
         return String.format(Locale.ROOT, "%s_%s%s", fullBundleName, languageCode, extension);
     }
 
     /**
      * Logs that translation file is missing.
      * @param fullyQualifiedFileName fully qualified file name.
      */
     private void logMissingTranslation(String fullyQualifiedFileName) {
         final String filePath = extractPath(fullyQualifiedFileName);
 
         final MessageDispatcher dispatcher = getMessageDispatcher();
         dispatcher.fireFileStarted(filePath);
 
         log(0, MSG_KEY_MISSING_TRANSLATION_FILE, extractName(fullyQualifiedFileName));
 
         fireErrors(filePath);
         dispatcher.fireFileFinished(filePath);
     }
 
     /**
      * Extracts path from fully qualified file name.
      * @param fullyQualifiedFileName fully qualified file name.
      * @return file path.
      */
     private static String extractPath(String fullyQualifiedFileName) {
         return fullyQualifiedFileName
             .substring(0, fullyQualifiedFileName.lastIndexOf(File.separator));
     }
 
     /**
      * Extracts short file name from fully qualified file name.
      * @param fullyQualifiedFileName fully qualified file name.
      * @return short file name.
      */
     private static String extractName(String fullyQualifiedFileName) {
