diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/AbstractCellEditor.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/AbstractCellEditor.java
index 09c6681e3..5e5fa5bae 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/AbstractCellEditor.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/AbstractCellEditor.java
@@ -30,136 +30,136 @@
  *   notice, this list of conditions and the following disclaimer. 
  *   
  * - Redistribution in binary form must reproduce the above
  *   copyright notice, this list of conditions and the following
  *   disclaimer in the documentation and/or other materials
  *   provided with the distribution. 
  *   
  * Neither the name of Sun Microsystems, Inc. or the names of
  * contributors may be used to endorse or promote products derived
  * from this software without specific prior written permission.  
  * 
  * This software is provided "AS IS," without a warranty of any
  * kind. ALL EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND
  * WARRANTIES, INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY,
  * FITNESS FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT, ARE HEREBY
  * EXCLUDED. SUN AND ITS LICENSORS SHALL NOT BE LIABLE FOR ANY
  * DAMAGES OR LIABILITIES SUFFERED BY LICENSEE AS A RESULT OF OR
  * RELATING TO USE, MODIFICATION OR DISTRIBUTION OF THIS SOFTWARE OR
  * ITS DERIVATIVES. IN NO EVENT WILL SUN OR ITS LICENSORS BE LIABLE 
  * FOR ANY LOST REVENUE, PROFIT OR DATA, OR FOR DIRECT, INDIRECT,   
  * SPECIAL, CONSEQUENTIAL, INCIDENTAL OR PUNITIVE DAMAGES, HOWEVER  
  * CAUSED AND REGARDLESS OF THE THEORY OF LIABILITY, ARISING OUT OF 
  * THE USE OF OR INABILITY TO USE THIS SOFTWARE, EVEN IF SUN HAS 
  * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  * 
  * You acknowledge that this software is not designed, licensed or
  * intended for use in the design, construction, operation or
  * maintenance of any nuclear facility.
  */
 
 
 package com.puppycrawl.tools.checkstyle.gui;
 
 import java.util.EventObject;
 import javax.swing.CellEditor;
 import javax.swing.event.CellEditorListener;
 import javax.swing.event.ChangeEvent;
 import javax.swing.event.EventListenerList;
 
 /** 
  * A base class for CellEditors, providing default implementations for all 
  * methods in the CellEditor interface and support for managing a series 
  * of listeners.
  *
  * <a href="http://java.sun.com/products/jfc/tsc/articles/treetable1/index.html">Original&nbsp;Source&nbsp;Location</a>
  * 
  * @author Philip Milne
  */
 public class AbstractCellEditor implements CellEditor
 {
-    private final EventListenerList mListenerList = new EventListenerList();
+    private final EventListenerList listenerList = new EventListenerList();
 
     /** @see CellEditor */
     @Override
     public Object getCellEditorValue()
     {
         return null;
     }
 
     /** @see CellEditor */
     @Override
     public boolean isCellEditable(EventObject e)
     {
         return true;
     }
 
     /** @see CellEditor */
     @Override
     public boolean shouldSelectCell(EventObject anEvent)
     {
         return false;
     }
 
     /** @see CellEditor */
     @Override
     public boolean stopCellEditing()
     {
         return true;
     }
 
     /** @see CellEditor */
     @Override
     public void cancelCellEditing()
     {
     }
 
     /** @see CellEditor */
     @Override
     public void addCellEditorListener(CellEditorListener l)
     {
-        mListenerList.add(CellEditorListener.class, l);
+        listenerList.add(CellEditorListener.class, l);
     }
 
     /** @see CellEditor */
     @Override
     public void removeCellEditorListener(CellEditorListener l)
     {
-        mListenerList.remove(CellEditorListener.class, l);
+        listenerList.remove(CellEditorListener.class, l);
     }
 
     /*
      * Notify all listeners that have registered interest for
      * notification on this event type.
      * @see EventListenerList
      */
     protected void fireEditingStopped()
     {
         // Guaranteed to return a non-null array
-        final Object[] listeners = mListenerList.getListenerList();
+        final Object[] listeners = listenerList.getListenerList();
         // Process the listeners last to first, notifying
         // those that are interested in this event
         for (int i = listeners.length - 2; i >= 0; i -= 2) {
             if (listeners[i] == CellEditorListener.class) {
                 ((CellEditorListener) listeners[i + 1]).editingStopped(new ChangeEvent(this));
             }
         }
     }
 
     /*
      * Notify all listeners that have registered interest for
      * notification on this event type.
      * @see EventListenerList
      */
     protected void fireEditingCanceled()
     {
         // Guaranteed to return a non-null array
-        final Object[] listeners = mListenerList.getListenerList();
+        final Object[] listeners = listenerList.getListenerList();
         // Process the listeners last to first, notifying
         // those that are interested in this event
         for (int i = listeners.length - 2; i >= 0; i -= 2) {
             if (listeners[i] == CellEditorListener.class) {
                 ((CellEditorListener) listeners[i + 1]).editingCanceled(new ChangeEvent(this));
             }
         }
     }
 }
