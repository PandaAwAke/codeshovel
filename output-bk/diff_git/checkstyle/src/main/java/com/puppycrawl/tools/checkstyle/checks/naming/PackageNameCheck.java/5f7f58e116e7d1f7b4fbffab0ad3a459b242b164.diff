diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/PackageNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/PackageNameCheck.java
index 6ce11b63e..6598b7588 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/PackageNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/PackageNameCheck.java
@@ -41,76 +41,76 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  * href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-7.html">
  * Java Language specification</a> and the Sun coding conventions.
  * However both underscores and uppercase letters are rather uncommon,
  * so most projects should probably use
  * <strong>^[a-z]+(\.[a-z][a-z0-9]*)*$</strong>.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="PackageName"/&gt;
  * </pre>
  * <p>
  * An example of how to configure the check for package names that begin with
  * {@code com.puppycrawl.tools.checkstyle} is:
  * </p>
  * <pre>
  * &lt;module name="PackageName"&gt;
  *    &lt;property name="format"
  *              value="^com\.puppycrawl\.tools\.checkstyle(\.[a-zA-Z_][a-zA-Z_0-9]*)*$"/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * @author Oliver Burn
  */
 @StatelessCheck
 public class PackageNameCheck
     extends AbstractCheck {
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "name.invalidPattern";
 
     /** The regexp to match against. */
     // Uppercase letters seem rather uncommon, but they're allowed in
     // https://docs.oracle.com/javase/specs/
     //  second_edition/html/packages.doc.html#40169
     private Pattern format = Pattern.compile("^[a-z]+(\\.[a-zA-Z_][a-zA-Z0-9_]*)*$");
 
     /**
      * Set the format for the specified regular expression.
      * @param pattern the new pattern
      */
     public void setFormat(Pattern pattern) {
         format = pattern;
     }
 
     @Override
     public int[] getDefaultTokens() {
-        return getAcceptableTokens();
+        return getRequiredTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
-        return new int[] {TokenTypes.PACKAGE_DEF};
+        return getRequiredTokens();
     }
 
     @Override
     public int[] getRequiredTokens() {
-        return getAcceptableTokens();
+        return new int[] {TokenTypes.PACKAGE_DEF};
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final DetailAST nameAST = ast.getLastChild().getPreviousSibling();
         final FullIdent full = FullIdent.createFullIdent(nameAST);
         if (!format.matcher(full.getText()).find()) {
             log(full.getLineNo(),
                 full.getColumnNo(),
                 MSG_KEY,
                 full.getText(),
                 format.pattern());
         }
     }
 }
