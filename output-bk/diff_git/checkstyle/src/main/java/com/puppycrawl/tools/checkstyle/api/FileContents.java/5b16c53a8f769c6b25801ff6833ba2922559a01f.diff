diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java
index 98f5aa20d..d464760c5 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java
@@ -45,120 +45,120 @@ public final class FileContents implements CommentListener {
     /** Compiled regexp to match a single-line comment line. */
     private static final Pattern MATCH_SINGLELINE_COMMENT = Pattern
             .compile(MATCH_SINGLELINE_COMMENT_PAT);
 
     /** The file name. */
     private final String fileName;
 
     /** The text. */
     private final FileText text;
 
     /** Map of the Javadoc comments indexed on the last line of the comment.
      * The hack is it assumes that there is only one Javadoc comment per line.
      */
     private final Map<Integer, TextBlock> javadocComments = new HashMap<>();
     /** Map of the C++ comments indexed on the first line of the comment. */
     private final Map<Integer, TextBlock> cppComments = new HashMap<>();
 
     /**
      * Map of the C comments indexed on the first line of the comment to a list
      * of comments on that line.
      */
     private final Map<Integer, List<TextBlock>> clangComments = new HashMap<>();
 
     /**
      * Creates a new {@code FileContents} instance.
      *
      * @param filename name of the file
      * @param lines the contents of the file
      * @deprecated Use {@link #FileContents(FileText)} instead
      *     in order to preserve the original line breaks where possible.
      */
     @Deprecated
     public FileContents(String filename, String... lines) {
         fileName = filename;
         text = FileText.fromLines(new File(filename), Arrays.asList(lines));
     }
 
     /**
      * Creates a new {@code FileContents} instance.
      *
      * @param text the contents of the file
      */
     public FileContents(FileText text) {
         fileName = text.getFile().toString();
         this.text = new FileText(text);
     }
 
     @Override
     public void reportSingleLineComment(String type, int startLineNo,
             int startColNo) {
-        reportCppComment(startLineNo, startColNo);
+        reportSingleLineComment(startLineNo, startColNo);
     }
 
     /**
      * Report the location of a single line comment.
      * @param startLineNo the starting line number
      * @param startColNo the starting column number
      **/
     public void reportSingleLineComment(int startLineNo, int startColNo) {
         final String line = line(startLineNo - 1);
         final String[] txt = {line.substring(startColNo)};
         final Comment comment = new Comment(txt, startColNo, startLineNo,
                 line.length() - 1);
         cppComments.put(startLineNo, comment);
     }
 
     @Override
     public void reportBlockComment(String type, int startLineNo,
             int startColNo, int endLineNo, int endColNo) {
-        reportCComment(startLineNo, startColNo, endLineNo, endColNo);
+        reportBlockComment(startLineNo, startColNo, endLineNo, endColNo);
     }
 
     /**
      * Report the location of a block comment.
      * @param startLineNo the starting line number
      * @param startColNo the starting column number
      * @param endLineNo the ending line number
      * @param endColNo the ending column number
      **/
     public void reportBlockComment(int startLineNo, int startColNo,
             int endLineNo, int endColNo) {
         final String[] cComment = extractBlockComment(startLineNo, startColNo,
                 endLineNo, endColNo);
         final Comment comment = new Comment(cComment, startColNo, endLineNo,
                 endColNo);
 
         // save the comment
         if (clangComments.containsKey(startLineNo)) {
             final List<TextBlock> entries = clangComments.get(startLineNo);
             entries.add(comment);
         }
         else {
             final List<TextBlock> entries = new ArrayList<>();
             entries.add(comment);
             clangComments.put(startLineNo, entries);
         }
 
         // Remember if possible Javadoc comment
         final String firstLine = line(startLineNo - 1);
         if (firstLine.contains("/**") && !firstLine.contains("/**/")) {
             javadocComments.put(endLineNo - 1, comment);
         }
     }
 
     /**
      * Report the location of a C++ style comment.
      * @param startLineNo the starting line number
      * @param startColNo the starting column number
      * @deprecated Use {@link #reportSingleLineComment(int, int)} instead.
      **/
     @Deprecated
     public void reportCppComment(int startLineNo, int startColNo) {
         reportSingleLineComment(startLineNo, startColNo);
     }
 
     /**
      * Returns a map of all the C++ style comments. The key is a line number,
      * the value is the comment {@link TextBlock} at the line.
      * @return the Map of comments
      * @deprecated Use {@link #getSingleLineComments()} instead.
