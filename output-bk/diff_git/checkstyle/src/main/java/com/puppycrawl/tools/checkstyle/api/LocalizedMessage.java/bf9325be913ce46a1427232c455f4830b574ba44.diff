diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
index f1338dbc6..67272f522 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
@@ -249,182 +249,182 @@ public final class LocalizedMessage
 
         if (message == null) {
             try {
                 // Important to use the default class loader, and not the one in
                 // the GlobalProperties object. This is because the class loader in
                 // the GlobalProperties is specified by the user for resolving
                 // custom classes.
                 final ResourceBundle resourceBundle = getBundle(bundle);
                 final String pattern = resourceBundle.getString(key);
                 final MessageFormat formatter = new MessageFormat(pattern, Locale.ROOT);
                 message = formatter.format(args);
             }
             catch (final MissingResourceException ignored) {
                 // If the Check author didn't provide i18n resource bundles
                 // and logs error messages directly, this will return
                 // the author's original message
                 final MessageFormat formatter = new MessageFormat(key, Locale.ROOT);
                 message = formatter.format(args);
             }
         }
         return message;
     }
 
     /**
      * Returns the formatted custom message if one is configured.
      * @return the formatted custom message or {@code null}
      *          if there is no custom message
      */
     private String getCustomMessage() {
 
         if (customMessage == null) {
             return null;
         }
         final MessageFormat formatter = new MessageFormat(customMessage, Locale.ROOT);
         return formatter.format(args);
     }
 
     /**
      * Find a ResourceBundle for a given bundle name. Uses the classloader
      * of the class emitting this message, to be sure to get the correct
      * bundle.
      * @param bundleName the bundle name
      * @return a ResourceBundle
      */
     private ResourceBundle getBundle(String bundleName) {
         synchronized (BUNDLE_CACHE) {
             ResourceBundle resourceBundle = BUNDLE_CACHE
                     .get(bundleName);
             if (resourceBundle == null) {
                 resourceBundle = ResourceBundle.getBundle(bundleName, sLocale,
-                        sourceClass.getClassLoader(), new UTF8Control());
+                        sourceClass.getClassLoader(), new Utf8Control());
                 BUNDLE_CACHE.put(bundleName, resourceBundle);
             }
             return resourceBundle;
         }
     }
 
     /**
      * Gets the line number.
      * @return the line number
      */
     public int getLineNo() {
         return lineNo;
     }
 
     /**
      * Gets the column number.
      * @return the column number
      */
     public int getColumnNo() {
         return columnNo;
     }
 
     /**
      * Gets the severity level.
      * @return the severity level
      */
     public SeverityLevel getSeverityLevel() {
         return severityLevel;
     }
 
     /**
      * @return the module identifier.
      */
     public String getModuleId() {
         return moduleId;
     }
 
     /**
      * Returns the message key to locate the translation, can also be used
      * in IDE plugins to map error messages to corrective actions.
      *
      * @return the message key
      */
     public String getKey() {
         return key;
     }
 
     /**
      * Gets the name of the source for this LocalizedMessage.
      * @return the name of the source for this LocalizedMessage
      */
     public String getSourceName() {
         return sourceClass.getName();
     }
 
     /**
      * Sets a locale to use for localization.
      * @param locale the locale to use for localization
      */
     public static void setLocale(Locale locale) {
         if (Locale.ENGLISH.getLanguage().equals(locale.getLanguage())) {
             sLocale = Locale.ROOT;
         }
         else {
             sLocale = locale;
         }
     }
 
     ////////////////////////////////////////////////////////////////////////////
     // Interface Comparable methods
     ////////////////////////////////////////////////////////////////////////////
 
     @Override
     public int compareTo(LocalizedMessage other) {
         int result = Integer.compare(lineNo, other.lineNo);
 
         if (lineNo == other.lineNo) {
             if (columnNo == other.columnNo) {
                 result = getMessage().compareTo(other.getMessage());
             }
             else {
                 result = Integer.compare(columnNo, other.columnNo);
             }
         }
         return result;
     }
 
     /**
      * <p>
      * Custom ResourceBundle.Control implementation which allows explicitly read
      * the properties files as UTF-8
      * </p>
      *
      * @author <a href="mailto:nesterenko-aleksey@list.ru">Aleksey Nesterenko</a>
      */
-    protected static class UTF8Control extends Control {
+    protected static class Utf8Control extends Control {
         @Override
         public ResourceBundle newBundle(String aBaseName, Locale aLocale, String aFormat,
                  ClassLoader aLoader, boolean aReload) throws IOException {
             // The below is a copy of the default implementation.
             final String bundleName = toBundleName(aBaseName, aLocale);
             final String resourceName = toResourceName(bundleName, "properties");
             InputStream stream = null;
             if (aReload) {
                 final URL url = aLoader.getResource(resourceName);
                 if (url != null) {
                     final URLConnection connection = url.openConnection();
                     if (connection != null) {
                         connection.setUseCaches(false);
                         stream = connection.getInputStream();
                     }
                 }
             }
             else {
                 stream = aLoader.getResourceAsStream(resourceName);
             }
             ResourceBundle resourceBundle = null;
             if (stream != null) {
                 final Reader streamReader = new InputStreamReader(stream, "UTF-8");
                 try {
                     // Only this line is changed to make it to read properties files as UTF-8.
                     resourceBundle = new PropertyResourceBundle(streamReader);
                 }
                 finally {
                     stream.close();
                 }
             }
             return resourceBundle;
         }
     }
 }
