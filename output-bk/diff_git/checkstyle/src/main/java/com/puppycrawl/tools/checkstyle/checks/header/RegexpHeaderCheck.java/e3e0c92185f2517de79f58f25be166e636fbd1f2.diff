diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheck.java
index a4f8a60e2..158e79fa9 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheck.java
@@ -9,101 +9,101 @@
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks.header;
 
 import java.io.File;
 import java.util.Arrays;
 import java.util.List;
 import java.util.regex.Pattern;
 import java.util.regex.PatternSyntaxException;
 
 import org.apache.commons.beanutils.ConversionException;
 import org.apache.commons.lang3.StringUtils;
 
 import com.google.common.collect.Lists;
 import com.puppycrawl.tools.checkstyle.Utils;
 
 /**
  * Checks the header of the source against a header file that contains a
  * {@link java.util.regex.Pattern regular expression}
  * for each line of the source header. In default configuration,
  * if header is not specified, the default value of header is set to null
  * and the check does not rise any violations.
  *
  * @author Lars KÃ¼hne
  * @author o_sukhodolsky
  */
 public class RegexpHeaderCheck extends AbstractHeaderCheck {
     /** empty array to avoid instantiations. */
     private static final int[] EMPTY_INT_ARRAY = new int[0];
 
     /** the compiled regular expressions */
     private final List<Pattern> headerRegexps = Lists.newArrayList();
 
     /** the header lines to repeat (0 or more) in the check, sorted. */
     private int[] multiLines = EMPTY_INT_ARRAY;
 
     /**
      * Set the lines numbers to repeat in the header check.
      * @param list comma separated list of line numbers to repeat in header.
      */
     public void setMultiLines(int... list) {
-        if (list == null || list.length == 0) {
+        if (list.length == 0) {
             multiLines = EMPTY_INT_ARRAY;
             return;
         }
 
         multiLines = new int[list.length];
         System.arraycopy(list, 0, multiLines, 0, list.length);
         Arrays.sort(multiLines);
     }
 
     @Override
     protected void processFiltered(File file, List<String> lines) {
         final int headerSize = getHeaderLines().size();
         final int fileSize = lines.size();
 
         if (headerSize - multiLines.length > fileSize) {
             log(1, "header.missing");
         }
         else {
             int headerLineNo = 0;
             int i;
             for (i = 0; headerLineNo < headerSize && i < fileSize; i++) {
                 final String line = lines.get(i);
                 boolean isMatch = isMatch(line, headerLineNo);
                 while (!isMatch && isMultiLine(headerLineNo)) {
                     headerLineNo++;
                     isMatch = headerLineNo == headerSize
                             || isMatch(line, headerLineNo);
                 }
                 if (!isMatch) {
                     log(i + 1, "header.mismatch", getHeaderLines().get(
                             headerLineNo));
                     break; // stop checking
                 }
                 if (!isMultiLine(headerLineNo)) {
                     headerLineNo++;
                 }
             }
             if (i == fileSize) {
                 // if file finished, but we have at least one non-multi-line
                 // header isn't completed
                 for (; headerLineNo < headerSize; headerLineNo++) {
                     if (!isMultiLine(headerLineNo)) {
                         log(1, "header.missing");
                         break;
                     }
                 }
             }
         }
     }
 
