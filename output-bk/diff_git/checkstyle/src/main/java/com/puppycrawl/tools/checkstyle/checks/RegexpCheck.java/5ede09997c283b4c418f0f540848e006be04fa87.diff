diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/RegexpCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/RegexpCheck.java
index 3c817575c..567914314 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/RegexpCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/RegexpCheck.java
@@ -5,100 +5,119 @@
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks;
 
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FileContents;
 import com.puppycrawl.tools.checkstyle.api.FileText;
 import com.puppycrawl.tools.checkstyle.api.LineColumn;
 
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
 /**
  * <p>
  * A check that makes sure that a specified pattern exists (or not) in the file.
  * </p>
  * <p>
  * An example of how to configure the check to make sure a copyright statement
  * is included in the file (but without requirements on where in the file
  * it should be):
  * </p>
  * <pre>
  * &lt;module name="RequiredRegexp"&gt;
  *    &lt;property name="format" value="This code is copyrighted"/&gt;
  * &lt;/module&gt;
  * </pre>
  * <p>
  * And to make sure the same statement appears at the beginning of the file.
  * </p>
  * <pre>
  * &lt;module name="RequiredRegexp"&gt;
  *    &lt;property name="format" value="\AThis code is copyrighted"/&gt;
  * &lt;/module&gt;
  * </pre>
  * @author Stan Quinn
  */
 public class RegexpCheck extends AbstractFormatCheck
 {
+
+    /**
+     * A key is pointing to the warning message text in "messages.properties"
+     * file.
+     */
+    public static final String MSG_ILLEGAL_REGEXP = "illegal.regexp";
+
+    /**
+     * A key is pointing to the warning message text in "messages.properties"
+     * file.
+     */
+    public static final String MSG_REQUIRED_REGEXP = "required.regexp";
+
+    /**
+     * A key is pointing to the warning message text in "messages.properties"
+     * file.
+     */
+    public static final String MSG_DUPLICATE_REGEXP = "duplicate.regexp";
+
     /** Default duplicate limit */
     private static final int DEFAULT_DUPLICATE_LIMIT = -1;
 
     /** Default error report limit */
     private static final int DEFAULT_ERROR_LIMIT = 100;
 
     /** Error count exceeded message */
     private static final String ERROR_LIMIT_EXCEEDED_MESSAGE =
         "The error limit has been exceeded, "
         + "the check is aborting, there may be more unreported errors.";
 
     /** Custom message for report. */
     private String message = "";
 
     /** Ignore matches within comments? **/
     private boolean ignoreComments;
 
     /** Pattern illegal? */
     private boolean illegalPattern;
 
     /** Error report limit */
     private int errorLimit = DEFAULT_ERROR_LIMIT;
 
     /** Disallow more than x duplicates? */
     private int duplicateLimit;
 
     /** Boolean to say if we should check for duplicates. */
     private boolean checkForDuplicates;
 
     /** Tracks number of matches made */
     private int matchCount;
 
     /** Tracks number of errors */
     private int errorCount;
 
     /** The matcher */
     private Matcher matcher;
 
     /**
      * Instantiates an new RegexpCheck.
      */
     public RegexpCheck()
     {
         super("$^", Pattern.MULTILINE); // the empty language
     }
 
     /**
      * Setter for message property.
      * @param message custom message which should be used in report.
      */
@@ -181,63 +200,63 @@ public class RegexpCheck extends AbstractFormatCheck
         int endLine;
         int endColumn;
         boolean foundMatch;
         boolean ignore = false;
 
         foundMatch = matcher.find();
         if (!foundMatch && !illegalPattern && (matchCount == 0)) {
             logMessage(0);
         }
         else if (foundMatch) {
             final FileText text = getFileContents().getText();
             final LineColumn start = text.lineColumn(matcher.start());
             final LineColumn end = text.lineColumn(matcher.end() - 1);
             startLine = start.getLine();
             startColumn = start.getColumn();
             endLine = end.getLine();
             endColumn = end.getColumn();
             if (ignoreComments) {
                 final FileContents theFileContents = getFileContents();
                 ignore = theFileContents.hasIntersectionWithComment(startLine,
                     startColumn, endLine, endColumn);
             }
             if (!ignore) {
                 matchCount++;
                 if (illegalPattern || (checkForDuplicates
                         && ((matchCount - 1) > duplicateLimit)))
                 {
                     errorCount++;
                     logMessage(startLine);
                 }
             }
             if ((errorCount < errorLimit)
                     && (ignore || illegalPattern || checkForDuplicates))
             {
                 findMatch();
             }
         }
     }
 
     /**
      * Displays the right message.
      * @param lineNumber the line number the message relates to.
      */
     private void logMessage(int lineNumber)
     {
         String msg = "".equals(getMessage()) ? getFormat() : message;
         if (errorCount >= errorLimit) {
             msg = ERROR_LIMIT_EXCEEDED_MESSAGE + msg;
         }
         if (illegalPattern) {
-            log(lineNumber, "illegal.regexp", msg);
+            log(lineNumber, MSG_ILLEGAL_REGEXP, msg);
         }
         else {
             if (lineNumber > 0) {
-                log(lineNumber, "duplicate.regexp", msg);
+                log(lineNumber, MSG_DUPLICATE_REGEXP, msg);
             }
             else {
-                log(lineNumber, "required.regexp", msg);
+                log(lineNumber, MSG_REQUIRED_REGEXP, msg);
             }
         }
     }
 }
 
