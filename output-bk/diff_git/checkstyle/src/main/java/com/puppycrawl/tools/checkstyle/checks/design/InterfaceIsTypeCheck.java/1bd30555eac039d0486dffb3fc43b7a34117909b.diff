diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/InterfaceIsTypeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/InterfaceIsTypeCheck.java
index 9bbd5dffd..1c2344948 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/InterfaceIsTypeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/InterfaceIsTypeCheck.java
@@ -34,67 +34,67 @@ import com.puppycrawl.tools.checkstyle.api.DetailAST;
  *
  * <p>
  * The check can be configured to also disallow marker interfaces like
  * <code>java.io.Serializable</code>, that do not contain methods or
  * constants at all.
  * </p>
  *
  * @author lkuehne
  */
 public final class InterfaceIsTypeCheck
         extends Check
 {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "interface.type";
 
     /** flag to control whether marker interfaces are allowed. */
     private boolean allowMarkerInterfaces = true;
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.INTERFACE_DEF};
     }
 
     @Override
     public int[] getRequiredTokens()
     {
         return getDefaultTokens();
     }
 
     @Override
     public int[] getAcceptableTokens()
     {
         return new int[] {TokenTypes.INTERFACE_DEF};
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
         final DetailAST objBlock =
                 ast.findFirstToken(TokenTypes.OBJBLOCK);
         final DetailAST methodDef =
                 objBlock.findFirstToken(TokenTypes.METHOD_DEF);
         final DetailAST variableDef =
                 objBlock.findFirstToken(TokenTypes.VARIABLE_DEF);
         final boolean methodRequired =
-                !allowMarkerInterfaces || (variableDef != null);
+                !allowMarkerInterfaces || variableDef != null;
 
-        if ((methodDef == null) && methodRequired) {
+        if (methodDef == null && methodRequired) {
             log(ast.getLineNo(), MSG_KEY);
         }
 
     }
 
     /**
      * Controls whether marker interfaces like Serializable are allowed.
      * @param flag whether to allow marker interfaces or not
      */
     public void setAllowMarkerInterfaces(boolean flag)
     {
         allowMarkerInterfaces = flag;
     }
 }
