diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/TypeNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/TypeNameCheck.java
index 46f4ab4dd..4e8243bdc 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/TypeNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/TypeNameCheck.java
@@ -21,53 +21,54 @@ package com.puppycrawl.tools.checkstyle.checks.naming;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * <p>
  * Checks that type names conform to a format specified
  * by the format property. The format is a
  * {@link java.util.regex.Pattern regular expression} and defaults to
  * <strong>^[A-Z][a-zA-Z0-9]*$</strong>.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="TypeName"/&gt;
  * </pre>
  * <p>
  * An example of how to configure the check for names that begin with
  * a lower case letter, followed by letters, digits, and underscores is:
  * </p>
  * <pre>
  * &lt;module name="TypeName"&gt;
  *    &lt;property name="format" value="^[a-z](_?[a-zA-Z0-9]+)*$"/&gt;
  * &lt;/module&gt;
  * </pre>
  * @author Oliver Burn
  */
 public class TypeNameCheck
     extends AbstractAccessControlNameCheck
 {
 
     /**
      * default pattern for type name.
      */
     public static final String DEFAULT_PATTERN = "^[A-Z][a-zA-Z0-9]*$";
 
     /**
      * Creates a new <code>TypeNameCheck</code> instance.
      */
     public TypeNameCheck()
     {
         super(DEFAULT_PATTERN);
     }
 
     /** {@inheritDoc} */
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.CLASS_DEF,
                           TokenTypes.INTERFACE_DEF,
                           TokenTypes.ENUM_DEF,
+                          TokenTypes.ANNOTATION_DEF,
         };
     }
 }
