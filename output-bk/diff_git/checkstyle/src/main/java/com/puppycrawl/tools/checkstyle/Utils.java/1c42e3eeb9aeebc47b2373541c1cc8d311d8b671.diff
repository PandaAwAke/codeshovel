diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java b/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java
index ef1227113..125151e76 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java
@@ -132,71 +132,71 @@ public final class Utils
                 len = (len / tabWidth + 1) * tabWidth;
             }
             else {
                 len++;
             }
         }
         return len;
     }
 
     /**
      * Validates whether passed string is a valid pattern or not.
      * @param pattern
      *        string to validate
      * @return true if the pattern is valid false otherwise
      */
     public static boolean isPatternValid(String pattern)
     {
         try {
             Pattern.compile(pattern);
         }
         catch (final PatternSyntaxException e) {
             return false;
         }
         return true;
     }
 
     /**
      * Helper method to create a regular expression.
      * @param pattern the pattern to match
      * @return a created regexp object
      * @throws ConversionException if unable to create Pattern object.
      **/
     public static Pattern createPattern(String pattern)
         throws ConversionException
     {
         try {
             return Pattern.compile(pattern);
         }
         catch (final PatternSyntaxException e) {
             throw new ConversionException(
                 "Failed to initialise regular expression " + pattern, e);
         }
     }
 
     /**
      * @return the base class name from a fully qualified name
      * @param type the fully qualified name. Cannot be null
      */
     public static String baseClassname(String type)
     {
-        final int i = type.lastIndexOf(".");
+        final int i = type.lastIndexOf('.');
         return i == -1 ? type : type.substring(i + 1);
     }
 
     /**
      * Constructs a normalized relative path between base directory and a given path.
      * @param baseDirectory the base path to which given path is relativized
      * @param path the path to relativize against base directory
      * @return the relative normalized path between base directory and path or path if base
      * directory is null
      */
     public static String relativizeAndNormalizePath(final String baseDirectory, final String path)
     {
         if (baseDirectory == null) {
             return path;
         }
         final Path pathAbsolute = Paths.get(path).normalize();
         final Path pathBase = Paths.get(baseDirectory).normalize();
         return pathBase.relativize(pathAbsolute).toString();
     }
 }
