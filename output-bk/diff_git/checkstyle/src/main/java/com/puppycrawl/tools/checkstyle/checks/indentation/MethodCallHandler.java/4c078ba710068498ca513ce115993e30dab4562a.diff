diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java
index 5e21dd579..a368e2a2d 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java
@@ -74,101 +74,101 @@ public class MethodCallHandler extends AbstractExpressionHandler {
             AbstractExpressionHandler p = getParent();
             while (p instanceof MethodCallHandler) {
                 p = p.getParent();
             }
             return p.suggestedChildLevel(this);
         }
 
         // if our expression isn't first on the line, just use the start
         // of the line
         final LineSet lines = new LineSet();
         findSubtreeLines(lines, getMainAst().getFirstChild(), true);
         final int firstCol = lines.firstLineCol();
         final int lineStart = getLineStart(getFirstAst(getMainAst()));
         if (lineStart != firstCol) {
             return new IndentLevel(lineStart);
         }
         return super.getLevelImpl();
     }
 
     /**
      * if this is the first chained method call which was moved to the next line
      * @return true if chained class are wrapped
      */
     private boolean isChainedMethodCallWrapped() {
         boolean result = false;
         final DetailAST main = getMainAst();
         final DetailAST dot = main.getFirstChild();
         final DetailAST target = dot.getFirstChild();
 
         if (dot.getType() == TokenTypes.DOT
             && target.getType() == TokenTypes.METHOD_CALL) {
             final DetailAST dot1 = target.getFirstChild();
             final DetailAST target1 = dot1.getFirstChild();
 
             if (dot1.getType() == TokenTypes.DOT
                 && target1.getType() == TokenTypes.METHOD_CALL) {
                 result = true;
             }
         }
         return result;
     }
 
     /**
      * Get the first AST of the specified method call.
      *
      * @param ast
      *            the method call
      *
      * @return the first AST of the specified method call
      */
-    private DetailAST getFirstAst(DetailAST ast) {
+    private static DetailAST getFirstAst(DetailAST ast) {
         // walk down the first child part of the dots that make up a method
         // call name
 
         DetailAST astNode = ast.getFirstChild();
         while (astNode != null && astNode.getType() == TokenTypes.DOT) {
             astNode = astNode.getFirstChild();
         }
 
         if (astNode == null) {
             astNode = ast;
         }
 
         return astNode;
     }
 
     @Override
     public IndentLevel suggestedChildLevel(AbstractExpressionHandler child) {
         // for whatever reason a method that crosses lines, like asList
         // here:
         //            System.out.println("methods are: " + Arrays.asList(
         //                new String[] {"method"}).toString());
         // will not have the right line num, so just get the child name
 
         final DetailAST first = getMainAst().getFirstChild();
         int indentLevel = getLineStart(first);
         if (!areOnSameLine(child.getMainAst().getFirstChild(),
                            getMainAst().getFirstChild())) {
             indentLevel += getBasicOffset();
         }
         return new IndentLevel(indentLevel);
     }
 
     @Override
     public void checkIndentation() {
         final DetailAST exprNode = getMainAst().getParent();
         if (exprNode.getParent().getType() != TokenTypes.LCURLY
             && exprNode.getParent().getType() != TokenTypes.SLIST) {
             return;
         }
         final DetailAST methodName = getMainAst().getFirstChild();
         checkExpressionSubtree(methodName, getLevel(), false, false);
 
         final DetailAST lparen = getMainAst();
         final DetailAST rparen = getMainAst().findFirstToken(TokenTypes.RPAREN);
         checkLParen(lparen);
 
         if (rparen.getLineNo() == lparen.getLineNo()) {
             return;
         }
 
