diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java
index d8055e840..e5d6eb8ae 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java
@@ -83,68 +83,72 @@ public class UniquePropertiesCheck extends AbstractFileSetCheck {
             log(lineNumber, MSG_KEY, keyName, duplication.getCount() + 1);
         }
     }
 
     /**
      * Method returns line number the key is detected in the checked properties
      * files first.
      *
      * @param lines
      *            properties file lines list
      * @param keyName
      *            key name to look for
      * @return line number of first occurrence. If no key found in properties
      *         file, 0 is returned
      */
     protected static int getLineNumber(List<String> lines, String keyName) {
         final String keyPatternString =
                 "^" + keyName.replace(" ", "\\\\ ") + "[\\s:=].*$";
         final Pattern keyPattern = Pattern.compile(keyPatternString);
         int lineNumber = 1;
         final Matcher matcher = keyPattern.matcher("");
         for (String line : lines) {
             matcher.reset(line);
             if (matcher.matches()) {
                 break;
             }
             ++lineNumber;
         }
         if (lineNumber > lines.size()) {
             lineNumber = 0;
         }
         return lineNumber;
     }
 
     /**
      * Properties subclass to store duplicated property keys in a separate map.
      *
      * @author Pavel Baranchikov
      */
     private static class UniqueProperties extends Properties {
         /**
          * Default serial version id.
          */
         private static final long serialVersionUID = 1L;
         /**
          * Multiset, holding duplicated keys. Keys are added here only if they
          * already exist in Properties' inner map.
          */
         private final Multiset<String> duplicatedStrings = HashMultiset
                 .create();
+        /**
+         * Lock for this class to synchronize on
+         */
+        private final Object lock = new Object();
 
         @Override
         public Object put(Object key, Object value) {
-            synchronized (this) {
+            synchronized (lock) {
                 final Object oldValue = super.put(key, value);
                 if (oldValue != null && key instanceof String) {
                     final String keyString = (String) key;
                     duplicatedStrings.add(keyString);
                 }
                 return oldValue;
             }
         }
 
         public Multiset<String> getDuplicatedStrings() {
             return duplicatedStrings;
         }
     }
 }
