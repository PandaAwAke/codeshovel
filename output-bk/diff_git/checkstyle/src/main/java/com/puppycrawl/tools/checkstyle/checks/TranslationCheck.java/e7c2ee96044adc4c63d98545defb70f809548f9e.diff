diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
index c69a7b63d..2c9864998 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
@@ -1,76 +1,77 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2015 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks;
 
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
+import java.util.Collections;
 import java.util.Enumeration;
 import java.util.List;
 import java.util.Properties;
 import java.util.Set;
 import java.util.SortedSet;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
 import com.google.common.base.Splitter;
 import com.google.common.collect.HashMultimap;
 import com.google.common.collect.ImmutableSortedSet;
 import com.google.common.collect.Lists;
 import com.google.common.collect.SetMultimap;
 import com.google.common.collect.Sets;
 import com.google.common.io.Closeables;
 import com.puppycrawl.tools.checkstyle.Definitions;
 import com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck;
 import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
 import com.puppycrawl.tools.checkstyle.api.MessageDispatcher;
 
 /**
  * <p>
  * The TranslationCheck class helps to ensure the correct translation of code by
  * checking property files for consistency regarding their keys.
  * Two property files describing one and the same context are consistent if they
  * contain the same keys.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="Translation"/&gt;
  * </pre>
  * Check has the following properties:
  *
  * <p><b>basenameSeparator</b> which allows setting separator in file names,
  * default value is '_'.
  * <p>
  * E.g.:
  * </p>
  * <p>
  * messages_test.properties //separator is '_'
  * </p>
  * <p>
  * app-dev.properties //separator is '-'
  * </p>
  *
@@ -178,102 +179,102 @@ public class TranslationCheck
      * with the extension suffix.
      * @param filesInResourceBundle a set of files in resource bundle.
      */
     private void checkExistenceOfDefaultTranslation(Set<File> filesInResourceBundle) {
         final String fullBundleName = getFullBundleName(filesInResourceBundle);
         final String extension = getFileExtensions()[0];
         final String defaultTranslationFileName = fullBundleName + extension;
 
         final boolean missing = isMissing(defaultTranslationFileName, filesInResourceBundle);
         if (missing) {
             logMissingTranslation(defaultTranslationFileName);
         }
     }
 
     /**
      * Checks existence of translation files in a set of files
      * in resource bundle. If there is no translation file
      * with required language code, there will be a violation.
      * The name of translation file begins with the full name
      * of resource bundle which is followed by '_' and language code,
      * it ends with the extension suffix.
      * @param filesInResourceBundle a set of files in resource bundle.
      */
     private void checkExistenceOfRequiredTranslations(Set<File> filesInResourceBundle) {
         final String fullBundleName = getFullBundleName(filesInResourceBundle);
         final String extension = getFileExtensions()[0];
 
         for (String languageCode : requiredTranslations) {
             final String translationFileName =
                 fullBundleName + '_' + languageCode + extension;
 
             final boolean missing = isMissing(translationFileName, filesInResourceBundle);
             if (missing) {
                 final String missingTranslationFileName =
                     formMissingTranslationName(fullBundleName, languageCode);
                 logMissingTranslation(missingTranslationFileName);
             }
         }
     }
 
     /**
      * Gets full name of resource bundle.
      * Full name of resource bundle consists of bundle path and
      * full base name.
      * @param filesInResourceBundle a set of files in resource bundle.
      * @return full name of resource bundle.
      */
     private String getFullBundleName(Set<File> filesInResourceBundle) {
         final String fullBundleName;
 
-        final File translationFile = filesInResourceBundle.iterator().next();
-        final String translationPath = translationFile.getPath();
+        final File firstTranslationFile = Collections.min(filesInResourceBundle);
+        final String translationPath = firstTranslationFile.getPath();
         final String extension = getFileExtensions()[0];
 
         final Pattern pattern = Pattern.compile("^.+_[a-z]{2}"
             + extension + "$");
         final Matcher matcher = pattern.matcher(translationPath);
         if (matcher.matches()) {
             fullBundleName = translationPath
                 .substring(0, translationPath.lastIndexOf('_'));
         }
         else {
             fullBundleName = translationPath
                 .substring(0, translationPath.lastIndexOf('.'));
         }
         return fullBundleName;
     }
 
     /**
      * Checks whether file is missing in resource bundle.
      * @param fileName file name.
      * @param filesInResourceBundle a set of files in resource bundle.
      * @return true if file is missing.
      */
     private static boolean isMissing(String fileName, Set<File> filesInResourceBundle) {
         boolean missing = false;
         for (File file : filesInResourceBundle) {
             final String currentFileName = file.getPath();
             missing =  !currentFileName.equals(fileName);
             if (!missing) {
                 break;
             }
         }
         return missing;
     }
 
     /**
      * Forms a name of translation file which is missing.
      * @param fullBundleName full bundle name.
      * @param languageCode language code.
      * @return name of translation file which is missing.
      */
     private String formMissingTranslationName(String fullBundleName, String languageCode) {
         final String extension = getFileExtensions()[0];
         return String.format("%s_%s%s", fullBundleName, languageCode, extension);
     }
 
     /**
      * Logs that translation file is missing.
      * @param fullyQualifiedFileName fully qualified file name.
      */
     private void logMissingTranslation(String fullyQualifiedFileName) {
