diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
index d56e03a7f..607f7c520 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
@@ -83,173 +83,173 @@ import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
  * <pre>
  * &lt;module name="Translation"&gt;
  *     &lt;property name="fileExtensions" value="properties, translations"/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * <p><b>requiredTranslations</b> which allows to specify language codes of required translations
  * which must exist in project. Language code is composed of the lowercase, two-letter codes as
  * defined by <a href="https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes">ISO 639-1</a>.
  * Default value is <b>empty String Set</b> which means that only the existence of
  * default translation is checked. Note, if you specify language codes (or just one language
  * code) of required translations the check will also check for existence of default translation
  * files in project. ATTENTION: the check will perform the validation of ISO codes if the option
  * is used. So, if you specify, for example, "mm" for language code, TranslationCheck will rise
  * violation that the language code is incorrect.
  * <br>
  *
  * @author Alexandra Bunge
  * @author lkuehne
  * @author Andrei Selkin
  */
 public class TranslationCheck extends AbstractFileSetCheck {
 
     /**
      * A key is pointing to the warning message text for missing key
      * in "messages.properties" file.
      */
     public static final String MSG_KEY = "translation.missingKey";
 
     /**
      * A key is pointing to the warning message text for missing translation file
      * in "messages.properties" file.
      */
     public static final String MSG_KEY_MISSING_TRANSLATION_FILE =
         "translation.missingTranslationFile";
 
     /** Resource bundle which contains messages for TranslationCheck. */
     private static final String TRANSLATION_BUNDLE =
         "com.puppycrawl.tools.checkstyle.checks.messages";
 
     /**
      * A key is pointing to the warning message text for wrong language code
      * in "messages.properties" file.
      */
     private static final String WRONG_LANGUAGE_CODE_KEY = "translation.wrongLanguageCode";
 
     /** Logger for TranslationCheck. */
     private static final Log LOG = LogFactory.getLog(TranslationCheck.class);
 
     /**
-     * Regexp string for default tranlsation files.
+     * Regexp string for default translation files.
      * For example, messages.properties.
      */
     private static final String DEFAULT_TRANSLATION_REGEXP = "^.+\\..+$";
 
     /**
      * Regexp pattern for bundles names wich end with language code, followed by country code and
      * variant suffix. For example, messages_es_ES_UNIX.properties.
      */
     private static final Pattern LANGUAGE_COUNTRY_VARIANT_PATTERN =
         CommonUtils.createPattern("^.+\\_[a-z]{2}\\_[A-Z]{2}\\_[A-Za-z]+\\..+$");
     /**
      * Regexp pattern for bundles names wich end with language code, followed by country code
      * suffix. For example, messages_es_ES.properties.
      */
     private static final Pattern LANGUAGE_COUNTRY_PATTERN =
         CommonUtils.createPattern("^.+\\_[a-z]{2}\\_[A-Z]{2}\\..+$");
     /**
      * Regexp pattern for bundles names wich end with language code suffix.
      * For example, messages_es.properties.
      */
     private static final Pattern LANGUAGE_PATTERN =
         CommonUtils.createPattern("^.+\\_[a-z]{2}\\..+$");
 
     /** File name format for default translation. */
     private static final String DEFAULT_TRANSLATION_FILE_NAME_FORMATTER = "%s.%s";
     /** File name format with language code. */
     private static final String FILE_NAME_WITH_LANGUAGE_CODE_FORMATTER = "%s_%s.%s";
 
-    /** Formatting string to form regexp to validate required tranlsations file names. */
+    /** Formatting string to form regexp to validate required translations file names. */
     private static final String REGEXP_FORMAT_TO_CHECK_REQUIRED_TRANSLATIONS =
         "^%1$s\\_%2$s(\\_[A-Z]{2})?\\.%3$s$|^%1$s\\_%2$s\\_[A-Z]{2}\\_[A-Za-z]+\\.%3$s$";
-    /** Formatting string to form regexp to validate default tranlsations file names. */
+    /** Formatting string to form regexp to validate default translations file names. */
     private static final String REGEXP_FORMAT_TO_CHECK_DEFAULT_TRANSLATIONS = "^%s\\.%s$";
 
     /** The files to process. */
     private final Set<File> filesToProcess = new HashSet<>();
 
     /** The base name regexp pattern. */
     private Pattern baseName;
 
     /**
      * Language codes of required translations for the check (de, pt, ja, etc).
      */
     private Set<String> requiredTranslations = new HashSet<>();
 
     /**
      * Creates a new {@code TranslationCheck} instance.
      */
     public TranslationCheck() {
         setFileExtensions("properties");
         baseName = CommonUtils.createPattern("^messages.*$");
     }
 
     /**
      * Sets the base name regexp pattern.
      * @param baseName base name regexp.
      */
     public void setBaseName(Pattern baseName) {
         this.baseName = baseName;
     }
 
     /**
      * Sets language codes of required translations for the check.
      * @param translationCodes a comma separated list of language codes.
      */
     public void setRequiredTranslations(String... translationCodes) {
         requiredTranslations = Arrays.stream(translationCodes).collect(Collectors.toSet());
         validateUserSpecifiedLanguageCodes(requiredTranslations);
     }
 
     /**
-     * Validates the correctness of user specififed language codes for the check.
+     * Validates the correctness of user specified language codes for the check.
      * @param languageCodes user specified language codes for the check.
      */
     private void validateUserSpecifiedLanguageCodes(Set<String> languageCodes) {
         for (String code : languageCodes) {
             if (!isValidLanguageCode(code)) {
                 final LocalizedMessage msg = new LocalizedMessage(0, TRANSLATION_BUNDLE,
                         WRONG_LANGUAGE_CODE_KEY, new Object[] {code}, getId(), getClass(), null);
                 final String exceptionMessage = String.format(Locale.ROOT,
                         "%s [%s]", msg.getMessage(), TranslationCheck.class.getSimpleName());
                 throw new IllegalArgumentException(exceptionMessage);
             }
         }
     }
 
     /**
      * Checks whether user specified language code is correct (is contained in available locales).
      * @param userSpecifiedLanguageCode user specified language code.
      * @return true if user specified language code is correct.
      */
     private static boolean isValidLanguageCode(final String userSpecifiedLanguageCode) {
         boolean valid = false;
         final Locale[] locales = Locale.getAvailableLocales();
         for (Locale locale : locales) {
             if (userSpecifiedLanguageCode.equals(locale.toString())) {
                 valid = true;
                 break;
             }
         }
         return valid;
     }
 
     @Override
     public void beginProcessing(String charset) {
         super.beginProcessing(charset);
         filesToProcess.clear();
     }
 
     @Override
     protected void processFiltered(File file, List<String> lines) {
         // We just collecting files for processing at finishProcessing()
         filesToProcess.add(file);
     }
 
     @Override
     public void finishProcessing() {
         super.finishProcessing();
 
         final Set<ResourceBundle> bundles = groupFilesIntoBundles(filesToProcess, baseName);
         for (ResourceBundle currentBundle : bundles) {
             checkExistenceOfDefaultTranslation(currentBundle);
@@ -364,101 +364,101 @@ public class TranslationCheck extends AbstractFileSetCheck {
             }
         }
         return resourceBundles;
     }
 
     /**
      * Searches for specific resource bundle in a set of resource bundles.
      * @param bundles set of resource bundles.
      * @param targetBundle target bundle to search for.
      * @return Guava's Optional of resource bundle (present if target bundle is found).
      */
     private static Optional<ResourceBundle> findBundle(Set<ResourceBundle> bundles,
                                                        ResourceBundle targetBundle) {
         Optional<ResourceBundle> result = Optional.empty();
         for (ResourceBundle currentBundle : bundles) {
             if (targetBundle.getBaseName().equals(currentBundle.getBaseName())
                     && targetBundle.getExtension().equals(currentBundle.getExtension())
                     && targetBundle.getPath().equals(currentBundle.getPath())) {
                 result = Optional.of(currentBundle);
                 break;
             }
         }
         return result;
     }
 
     /**
      * Extracts the base name (the unique prefix) of resource bundle from translation file name.
      * For example "messages" is the base name of "messages.properties",
      * "messages_de_AT.properties", "messages_en.properties", etc.
      * @param fileName the fully qualified name of the translation file.
      * @return the extracted base name.
      */
     private static String extractBaseName(String fileName) {
         final String regexp;
         final Matcher languageCountryVariantMatcher =
             LANGUAGE_COUNTRY_VARIANT_PATTERN.matcher(fileName);
         final Matcher languageCountryMatcher = LANGUAGE_COUNTRY_PATTERN.matcher(fileName);
         final Matcher languageMatcher = LANGUAGE_PATTERN.matcher(fileName);
         if (languageCountryVariantMatcher.matches()) {
             regexp = LANGUAGE_COUNTRY_VARIANT_PATTERN.pattern();
         }
         else if (languageCountryMatcher.matches()) {
             regexp = LANGUAGE_COUNTRY_PATTERN.pattern();
         }
         else if (languageMatcher.matches()) {
             regexp = LANGUAGE_PATTERN.pattern();
         }
         else {
             regexp = DEFAULT_TRANSLATION_REGEXP;
         }
-        // We use substring(...) insead of replace(...), so that the regular expression does
+        // We use substring(...) instead of replace(...), so that the regular expression does
         // not have to be compiled each time it is used inside 'replace' method.
         final String removePattern = regexp.substring("^.+".length(), regexp.length());
         return fileName.replaceAll(removePattern, "");
     }
 
     /**
      * Extracts path from a file name which contains the path.
      * For example, if file nam is /xyz/messages.properties, then the method
      * will return /xyz/.
      * @param fileNameWithPath file name which contains the path.
      * @return file path.
      */
     private static String getPath(String fileNameWithPath) {
         return fileNameWithPath
             .substring(0, fileNameWithPath.lastIndexOf(File.separator));
     }
 
     /**
      * Checks resource files in bundle for consistency regarding their keys.
      * All files in bundle must have the same key set. If this is not the case
      * an error message is posted giving information which key misses in which file.
      * @param bundle resource bundle.
      */
     private void checkTranslationKeys(ResourceBundle bundle) {
         final Set<File> filesInBundle = bundle.getFiles();
         if (filesInBundle.size() > 1) {
             // build a map from files to the keys they contain
             final Set<String> allTranslationKeys = new HashSet<>();
             final SetMultimap<File, String> filesAssociatedWithKeys = HashMultimap.create();
             for (File currentFile : filesInBundle) {
                 final Set<String> keysInCurrentFile = getTranslationKeys(currentFile);
                 allTranslationKeys.addAll(keysInCurrentFile);
                 filesAssociatedWithKeys.putAll(currentFile, keysInCurrentFile);
             }
             checkFilesForConsistencyRegardingTheirKeys(filesAssociatedWithKeys, allTranslationKeys);
         }
     }
 
     /**
      * Compares th the specified key set with the key sets of the given translation files (arranged
      * in a map). All missing keys are reported.
      * @param fileKeys a Map from translation files to their key sets.
      * @param keysThatMustExist the set of keys to compare with.
      */
     private void checkFilesForConsistencyRegardingTheirKeys(SetMultimap<File, String> fileKeys,
                                                             Set<String> keysThatMustExist) {
         for (File currentFile : fileKeys.keySet()) {
             final MessageDispatcher dispatcher = getMessageDispatcher();
             final String path = currentFile.getPath();
             dispatcher.fireFileStarted(path);
