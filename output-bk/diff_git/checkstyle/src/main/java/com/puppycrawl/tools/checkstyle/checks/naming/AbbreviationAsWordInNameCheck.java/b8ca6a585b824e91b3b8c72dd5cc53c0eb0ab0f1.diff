diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java
index 9c5947697..1d89582ef 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java
@@ -228,122 +228,122 @@ public class AbbreviationAsWordInNameCheck extends Check
                     && hasOverrideAnnotation(modifiers);
         }
         return result;
     }
 
     /**
      * Check that variable definition in interface definition.
      * @param variableDefAst variable definition.
      * @return true if variable definition(variableDefAst) is in interface
      * definition.
      */
     private static boolean isInterfaceDeclaration(DetailAST variableDefAst)
     {
         boolean result = false;
         final DetailAST astBlock = variableDefAst.getParent();
         if (astBlock != null) {
             final DetailAST astParent2 = astBlock.getParent();
             if (astParent2 != null
                     && astParent2.getType() == TokenTypes.INTERFACE_DEF)
             {
                 result = true;
             }
         }
         return result;
     }
 
     /**
      * Checks that the method has "@Override" annotation.
      * @param methodModifiersAST
      *        A DetailAST nod is related to the given method modifiers
      *        (MODIFIERS type).
      * @return true if method has "@Override" annotation.
      */
     private static boolean hasOverrideAnnotation(DetailAST methodModifiersAST)
     {
         boolean result = false;
         for (DetailAST child : getChildren(methodModifiersAST)) {
             if (child.getType() == TokenTypes.ANNOTATION) {
                 final DetailAST annotationIdent = child.findFirstToken(TokenTypes.IDENT);
                 if (annotationIdent != null && "Override".equals(annotationIdent.getText())) {
                     result = true;
                     break;
                 }
             }
         }
         return result;
     }
 
     /**
      * Gets the disallowed abbreviation contained in given String.
-     * @param string
+     * @param str
      *        the given String.
      * @return the disallowed abbreviation contained in given String as a
      *         separate String.
      */
-    private String getDisallowedAbbreviation(String string)
+    private String getDisallowedAbbreviation(String str)
     {
         int beginIndex = 0;
         boolean abbrStarted = false;
         String result = null;
 
-        for (int index = 0; index < string.length(); index++) {
-            final char symbol = string.charAt(index);
+        for (int index = 0; index < str.length(); index++) {
+            final char symbol = str.charAt(index);
 
             if (Character.isUpperCase(symbol)) {
                 if (!abbrStarted) {
                     abbrStarted = true;
                     beginIndex = index;
                 }
             }
             else {
                 if (abbrStarted) {
                     abbrStarted = false;
 
                     // -1 as a first capital is usually beginning of next word
                     final int endIndex = index - 1;
                     final int abbrLength = endIndex - beginIndex;
                     if (abbrLength > allowedAbbreviationLength) {
-                        result = string.substring(beginIndex, endIndex);
+                        result = str.substring(beginIndex, endIndex);
                         if (!allowedAbbreviations.contains(result)) {
                             break;
                         }
                         else {
                             result = null;
                         }
                     }
                     beginIndex = -1;
                 }
             }
         }
         if (abbrStarted) {
-            final int endIndex = string.length();
+            final int endIndex = str.length();
             final int abbrLength = endIndex - beginIndex;
             if (abbrLength > 1 && abbrLength > allowedAbbreviationLength) {
-                result = string.substring(beginIndex, endIndex);
+                result = str.substring(beginIndex, endIndex);
                 if (allowedAbbreviations.contains(result)) {
                     result = null;
                 }
             }
         }
         return result;
     }
 
     /**
      * Gets all the children which are one level below on the current DetailAST
      * parent node.
      * @param node
      *        Current parent node.
      * @return The list of children one level below on the current parent node.
      */
     private static List<DetailAST> getChildren(final DetailAST node)
     {
         final List<DetailAST> result = new LinkedList<DetailAST>();
         DetailAST curNode = node.getFirstChild();
         while (curNode != null) {
             result.add(curNode);
             curNode = curNode.getNextSibling();
         }
         return result;
     }
 
 }
