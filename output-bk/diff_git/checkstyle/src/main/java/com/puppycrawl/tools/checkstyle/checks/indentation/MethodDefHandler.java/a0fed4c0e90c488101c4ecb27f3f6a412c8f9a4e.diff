diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodDefHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodDefHandler.java
index 773af50c5..185f2fb13 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodDefHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodDefHandler.java
@@ -14,89 +14,86 @@
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks.indentation;
 
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * Handler for method definitions.
  *
  * @author jrichard
  * @author Maikel Steneker
  */
 public class MethodDefHandler extends BlockParentHandler {
     /**
      * Construct an instance of this handler with the given indentation check,
      * abstract syntax tree, and parent handler.
      *
      * @param indentCheck   the indentation check
      * @param ast           the abstract syntax tree
      * @param parent        the parent handler
      */
     public MethodDefHandler(IndentationCheck indentCheck,
         DetailAST ast, AbstractExpressionHandler parent) {
         super(indentCheck, getHandlerName(ast), ast, parent);
     }
 
     @Override
     protected DetailAST getTopLevelAst() {
         // we check this stuff ourselves below
         return null;
     }
 
     @Override
     protected void checkModifiers() {
         final DetailAST modifier = getMainAst().findFirstToken(TokenTypes.MODIFIERS);
         if (isOnStartOfLine(modifier)
             && !getIndent().isAcceptable(expandedTabsColumnNo(modifier))) {
             logError(modifier, "modifier", expandedTabsColumnNo(modifier));
         }
     }
 
     @Override
     public void checkIndentation() {
         checkModifiers();
 
-        final LineWrappingHandler lineWrap =
-            new LineWrappingHandler(getIndentCheck(), getMainAst(),
-                getMethodDefParamRightParen(getMainAst()));
-        lineWrap.checkIndentation();
+        checkWrappingIndentation(getMainAst(), getMethodDefParamRightParen(getMainAst()));
         if (getLCurly() == null) {
             // abstract method def -- no body
             return;
         }
         super.checkIndentation();
     }
 
     /**
      * Returns right parenthesis of method definition parameter list.
      * @param methodDefAst
      *          method definition ast node(TokenTypes.LITERAL_IF)
      * @return right parenthesis of method definition parameter list.
      */
     private static DetailAST getMethodDefParamRightParen(DetailAST methodDefAst) {
         return methodDefAst.findFirstToken(TokenTypes.RPAREN);
     }
 
     /**
      * Creates a handler name for this class according to ast type.
      *
      * @param ast the abstract syntax tree.
      * @return handler name for this class.
      */
     private static String getHandlerName(DetailAST ast) {
         final String name;
 
         if (ast.getType() == TokenTypes.CTOR_DEF) {
             name = "ctor def";
         }
         else {
             name = "method def";
         }
         return name;
     }
 }
