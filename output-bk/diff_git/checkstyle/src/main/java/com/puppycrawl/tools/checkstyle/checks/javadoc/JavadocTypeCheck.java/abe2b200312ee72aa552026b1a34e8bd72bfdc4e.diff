diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
index bce3e840d..0a7a6d010 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
@@ -100,100 +100,111 @@ public class JavadocTypeCheck
 
     /**
      * Set the version format pattern.
      * @param format a <code>String</code> value
      * @throws ConversionException unable to parse aFormat
      */
     public void setVersionFormat(String format)
         throws ConversionException
     {
         try {
             versionFormat = format;
             versionFormatPattern = Utils.getPattern(format);
         }
         catch (final PatternSyntaxException e) {
             throw new ConversionException("unable to parse " + format, e);
         }
 
     }
 
     /**
      * Controls whether to allow a type which has type parameters to
      * omit matching param tags in the javadoc. Defaults to false.
      *
      * @param flag a <code>Boolean</code> value
      */
     public void setAllowMissingParamTags(boolean flag)
     {
         allowMissingParamTags = flag;
     }
 
     /**
      * Controls whether to flag errors for unknown tags. Defaults to false.
      * @param flag a <code>Boolean</code> value
      */
     public void setAllowUnknownTags(boolean flag)
     {
         allowUnknownTags = flag;
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.INTERFACE_DEF,
             TokenTypes.CLASS_DEF,
             TokenTypes.ENUM_DEF,
             TokenTypes.ANNOTATION_DEF,
         };
     }
 
+    @Override
+    public int[] getAcceptableTokens()
+    {
+        return new int[] {
+            TokenTypes.INTERFACE_DEF,
+            TokenTypes.CLASS_DEF,
+            TokenTypes.ENUM_DEF,
+            TokenTypes.ANNOTATION_DEF,
+        };
+    }
+
     @Override
     public void visitToken(DetailAST ast)
     {
         if (shouldCheck(ast)) {
             final FileContents contents = getFileContents();
             final int lineNo = ast.getLineNo();
             final TextBlock cmt = contents.getJavadocBefore(lineNo);
             if (cmt == null) {
                 log(lineNo, "javadoc.missing");
             }
             else if (ScopeUtils.isOuterMostType(ast)) {
                 // don't check author/version for inner classes
                 final List<JavadocTag> tags = getJavadocTags(cmt);
                 checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),
                          authorFormatPattern, authorFormat);
                 checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),
                          versionFormatPattern, versionFormat);
 
                 final List<String> typeParamNames =
                     CheckUtils.getTypeParameterNames(ast);
 
                 if (!allowMissingParamTags) {
                     //Check type parameters that should exist, do
                     for (final String string : typeParamNames) {
                         checkTypeParamTag(
                             lineNo, tags, string);
                     }
                 }
 
                 checkUnusedTypeParamTags(tags, typeParamNames);
             }
         }
     }
 
     /**
      * Whether we should check this node.
      * @param ast a given node.
      * @return whether we should check a given node.
      */
     private boolean shouldCheck(final DetailAST ast)
     {
         final DetailAST mods = ast.findFirstToken(TokenTypes.MODIFIERS);
         final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);
         final Scope scope =
             ScopeUtils.inInterfaceOrAnnotationBlock(ast)
                 ? Scope.PUBLIC : declaredScope;
         final Scope surroundingScope = ScopeUtils.getSurroundingScope(ast);
 
         return scope.isIn(this.scope)
             && ((surroundingScope == null) || surroundingScope.isIn(this.scope))
