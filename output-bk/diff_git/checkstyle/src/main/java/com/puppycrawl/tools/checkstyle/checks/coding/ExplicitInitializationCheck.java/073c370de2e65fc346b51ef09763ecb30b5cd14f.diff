diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java
index 230f2bd8b..d780a77eb 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java
@@ -39,107 +39,107 @@ import com.puppycrawl.tools.checkstyle.utils.ScopeUtils;
  * value (0 or null) before performing any
  * initialization specified in the code.  So in this case,
  * x gets initialized to 0 twice, and bar gets initialized
  * to null twice.  So there is a minor inefficiency.  This style of
  * coding is a hold-over from C/C++ style coding,
  * and it shows that the developer isn't really confident that
  * Java really initializes instance variables to default
  * values.
  * </p>
  *
  * @author o_sukhodolsky
  */
 public class ExplicitInitializationCheck extends AbstractCheck {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "explicit.init";
 
     /** Whether only explicit initialization made to null should be checked.**/
     private boolean onlyObjectReferences;
 
     @Override
     public final int[] getDefaultTokens() {
         return new int[] {TokenTypes.VARIABLE_DEF};
     }
 
     @Override
     public final int[] getRequiredTokens() {
         return getDefaultTokens();
     }
 
     @Override
     public final int[] getAcceptableTokens() {
         return new int[] {TokenTypes.VARIABLE_DEF};
     }
 
     /**
      * Sets whether only explicit initialization made to null should be checked.
      * @param onlyObjectReferences whether only explicit initialization made to null
      *                             should be checked
      */
     public void setOnlyObjectReferences(boolean onlyObjectReferences) {
         this.onlyObjectReferences = onlyObjectReferences;
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         if (!isSkipCase(ast)) {
-            final DetailAST ident = ast.findFirstToken(TokenTypes.IDENT);
             final DetailAST assign = ast.findFirstToken(TokenTypes.ASSIGN);
             final DetailAST exprStart =
                 assign.getFirstChild().getFirstChild();
             final DetailAST type = ast.findFirstToken(TokenTypes.TYPE);
             if (isObjectType(type)
                 && exprStart.getType() == TokenTypes.LITERAL_NULL) {
+                final DetailAST ident = ast.findFirstToken(TokenTypes.IDENT);
                 log(ident, MSG_KEY, ident.getText(), "null");
             }
             if (!onlyObjectReferences) {
                 validateNonObjects(ast);
             }
         }
     }
 
     /**
      * Checks for explicit initializations made to 'false', '0' and '\0'.
      * @param ast token being checked for explicit initializations
      */
     private void validateNonObjects(DetailAST ast) {
         final DetailAST ident = ast.findFirstToken(TokenTypes.IDENT);
         final DetailAST assign = ast.findFirstToken(TokenTypes.ASSIGN);
         final DetailAST exprStart =
                 assign.getFirstChild().getFirstChild();
         final DetailAST type = ast.findFirstToken(TokenTypes.TYPE);
         final int primitiveType = type.getFirstChild().getType();
         if (primitiveType == TokenTypes.LITERAL_BOOLEAN
                 && exprStart.getType() == TokenTypes.LITERAL_FALSE) {
             log(ident, MSG_KEY, ident.getText(), "false");
         }
         if (isNumericType(primitiveType) && isZero(exprStart)) {
             log(ident, MSG_KEY, ident.getText(), "0");
         }
         if (primitiveType == TokenTypes.LITERAL_CHAR
                 && isZeroChar(exprStart)) {
             log(ident, MSG_KEY, ident.getText(), "\\0");
         }
     }
 
     /**
      * Examine char literal for initializing to default value.
      * @param exprStart expression
      * @return true is literal is initialized by zero symbol
      */
     private static boolean isZeroChar(DetailAST exprStart) {
         return isZero(exprStart)
             || exprStart.getType() == TokenTypes.CHAR_LITERAL
             && "'\\0'".equals(exprStart.getText());
     }
 
     /**
      * Checks for cases that should be skipped: no assignment, local variable, final variables
      * @param ast Variable def AST
      * @return true is that is a case that need to be skipped.
      */
     private static boolean isSkipCase(DetailAST ast) {
         boolean skipCase = true;
