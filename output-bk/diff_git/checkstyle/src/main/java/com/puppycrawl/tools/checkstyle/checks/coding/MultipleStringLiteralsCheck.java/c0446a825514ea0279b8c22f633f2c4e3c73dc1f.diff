diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java
index 88bf76efd..4631c0764 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java
@@ -62,101 +62,101 @@ public class MultipleStringLiteralsCheck extends Check
      * generated.
      */
     private int allowedDuplicates = 1;
 
     /**
      * Sets the maximum allowed duplicates of a string.
      * @param allowedDuplicates The maximum number of duplicates.
      */
     public void setAllowedDuplicates(int allowedDuplicates)
     {
         this.allowedDuplicates = allowedDuplicates;
     }
 
     /**
      * Pattern for matching ignored strings.
      */
     private Pattern pattern;
 
     /**
      * Construct an instance with default values.
      */
     public MultipleStringLiteralsCheck()
     {
         setIgnoreStringsRegexp("^\"\"$");
         ignoreOccurrenceContext.set(TokenTypes.ANNOTATION);
     }
 
     /**
      * Sets regular expression pattern for ignored strings.
      * @param ignoreStringsRegexp
      *        regular expression pattern for ignored strings
      * @throws org.apache.commons.beanutils.ConversionException
      *         if unable to create Pattern object
      */
     public void setIgnoreStringsRegexp(String ignoreStringsRegexp)
     {
         if (ignoreStringsRegexp != null
             && ignoreStringsRegexp.length() > 0)
         {
             pattern = Utils.createPattern(ignoreStringsRegexp);
         }
         else {
             pattern = null;
         }
     }
 
     /**
      * Adds a set of tokens the check is interested in.
      * @param strRep the string representation of the tokens interested in
      */
-    public final void setIgnoreOccurrenceContext(String[] strRep)
+    public final void setIgnoreOccurrenceContext(String... strRep)
     {
         ignoreOccurrenceContext.clear();
         for (final String s : strRep) {
             final int type = TokenTypes.getTokenId(s);
             ignoreOccurrenceContext.set(type);
         }
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.STRING_LITERAL};
     }
 
     @Override
     public int[] getAcceptableTokens()
     {
         return new int[] {TokenTypes.STRING_LITERAL};
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
         if (isInIgnoreOccurrenceContext(ast)) {
             return;
         }
         final String currentString = ast.getText();
         if (pattern == null || !pattern.matcher(currentString).find()) {
             List<StringInfo> hitList = stringMap.get(currentString);
             if (hitList == null) {
                 hitList = Lists.newArrayList();
                 stringMap.put(currentString, hitList);
             }
             final int line = ast.getLineNo();
             final int col = ast.getColumnNo();
             hitList.add(new StringInfo(line, col));
         }
     }
 
     /**
      * Analyses the path from the AST root to a given AST for occurrences
      * of the token types in {@link #ignoreOccurrenceContext}.
      *
      * @param ast the node from where to start searching towards the root node
      * @return whether the path from the root node to ast contains one of the
      * token type in {@link #ignoreOccurrenceContext}.
      */
     private boolean isInIgnoreOccurrenceContext(DetailAST ast)
     {
         for (DetailAST token = ast;
