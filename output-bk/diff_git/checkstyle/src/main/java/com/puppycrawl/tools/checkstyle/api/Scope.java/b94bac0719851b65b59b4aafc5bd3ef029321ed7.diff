diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/Scope.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/Scope.java
index 0f3a82089..cd749c237 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/Scope.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/Scope.java
@@ -10,69 +10,69 @@
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.api;
 
 /**
  * Represents a Java visibility scope.
  *
  * @author Lars KÃ¼hne
  * @author Travis Schneeberger
  */
 public enum Scope
 {
     /** nothing scope. */
     NOTHING,
     /** public scope. */
     PUBLIC,
     /** protected scope. */
     PROTECTED,
     /** package or default scope. */
     PACKAGE,
     /** private scope. */
     PRIVATE,
     /** anonymous inner scope. */
     ANONINNER;
 
     @Override
     public String toString()
     {
         return getName();
     }
 
     /**
      * @return the name of this severity level.
      */
     public String getName()
     {
         return name().toLowerCase();
     }
 
     /**
      * Checks if this scope is a subscope of another scope.
      * Example: PUBLIC is a subscope of PRIVATE.
      *
-     * @param aScope a <code>Scope</code> value
-     * @return if <code>this</code> is a subscope of <code>aScope</code>.
+     * @param scope a <code>Scope</code> value
+     * @return if <code>this</code> is a subscope of <code>scope</code>.
      */
-    public boolean isIn(Scope aScope)
+    public boolean isIn(Scope scope)
     {
-        return (compareTo(aScope) <= 0);
+        return (compareTo(scope) <= 0);
     }
 
     /**
      * Scope factory method.
      *
-     * @param aScopeName scope name, such as "nothing", "public", etc.
-     * @return the <code>Scope</code> associated with <code>aScopeName</code>
+     * @param scopeName scope name, such as "nothing", "public", etc.
+     * @return the <code>Scope</code> associated with <code>scopeName</code>
      */
-    public static Scope getInstance(String aScopeName)
+    public static Scope getInstance(String scopeName)
     {
-        return valueOf(Scope.class, aScopeName.trim().toUpperCase());
+        return valueOf(Scope.class, scopeName.trim().toUpperCase());
     }
 }
