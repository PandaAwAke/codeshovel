diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
index b7bf9692e..593f55bd7 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
@@ -84,101 +84,100 @@ public final class ConfigurationLoader
     private static final String DTD_PUBLIC_ID_1_3 =
         "-//Puppy Crawl//DTD Check Configuration 1.3//EN";
 
     /** the resource for version 1_3 of the configuration dtd */
     private static final String DTD_RESOURCE_NAME_1_3 =
         "com/puppycrawl/tools/checkstyle/configuration_1_3.dtd";
 
     /**
      * Implements the SAX document handler interfaces, so they do not
      * appear in the public API of the ConfigurationLoader.
      */
     private final class InternalLoader
         extends AbstractLoader
     {
         /** module elements */
         private static final String MODULE = "module";
         /** name attribute */
         private static final String NAME = "name";
         /** property element */
         private static final String PROPERTY = "property";
         /** value attribute */
         private static final String VALUE = "value";
         /** default attribute */
         private static final String DEFAULT = "default";
         /** name of the severity property */
         private static final String SEVERITY = "severity";
         /** name of the message element */
         private static final String MESSAGE = "message";
         /** name of the key attribute */
         private static final String KEY = "key";
 
         /**
          * Creates a new InternalLoader.
          * @throws SAXException if an error occurs
          * @throws ParserConfigurationException if an error occurs
          */
         private InternalLoader()
             throws SAXException, ParserConfigurationException
         {
             // super(DTD_PUBLIC_ID_1_1, DTD_RESOURCE_NAME_1_1);
             super(createIdToResourceNameMap());
         }
 
         @Override
         public void startElement(String namespaceURI,
                                  String localName,
                                  String qName,
                                  Attributes atts)
             throws SAXException
         {
-            // TODO: debug logging for support purposes
             if (qName.equals(MODULE)) {
                 //create configuration
                 final String name = atts.getValue(NAME);
                 final DefaultConfiguration conf =
                     new DefaultConfiguration(name);
 
                 if (configuration == null) {
                     configuration = conf;
                 }
 
                 //add configuration to it's parent
                 if (!configStack.isEmpty()) {
                     final DefaultConfiguration top =
                         configStack.peek();
                     top.addChild(conf);
                 }
 
                 configStack.push(conf);
             }
             else if (qName.equals(PROPERTY)) {
                 //extract name and value
                 final String name = atts.getValue(NAME);
                 final String value;
                 try {
                     value = replaceProperties(atts.getValue(VALUE),
                         overridePropsResolver, atts.getValue(DEFAULT));
                 }
                 catch (final CheckstyleException ex) {
                     throw new SAXException(ex.getMessage());
                 }
 
                 //add to attributes of configuration
                 final DefaultConfiguration top =
                     configStack.peek();
                 top.addAttribute(name, value);
             }
             else if (qName.equals(MESSAGE)) {
                 //extract key and value
                 final String key = atts.getValue(KEY);
                 final String value = atts.getValue(VALUE);
 
                 //add to messages of configuration
                 final DefaultConfiguration top = configStack.peek();
                 top.addMessage(key, value);
             }
         }
 
         @Override
         public void endElement(String namespaceURI,
                                String localName,
@@ -468,103 +467,100 @@ public final class ConfigurationLoader
         final Iterator<String> j = propertyRefs.iterator();
         while (i.hasNext()) {
             String fragment = i.next();
             if (fragment == null) {
                 final String propertyName = j.next();
                 fragment = props.resolve(propertyName);
                 if (fragment == null) {
                     if (defaultValue != null) {
                         return defaultValue;
                     }
                     throw new CheckstyleException(
                         "Property ${" + propertyName + "} has not been set");
                 }
             }
             sb.append(fragment);
         }
 
         return sb.toString();
     }
 
     /**
      * Parses a string containing <code>${xxx}</code> style property
      * references into two lists. The first list is a collection
      * of text fragments, while the other is a set of string property names.
      * <code>null</code> entries in the first list indicate a property
      * reference from the second list.
      *
      * @param value     Text to parse. Must not be <code>null</code>.
      * @param fragments List to add text fragments to.
      *                  Must not be <code>null</code>.
      * @param propertyRefs List to add property names to.
      *                     Must not be <code>null</code>.
      *
      * @throws CheckstyleException if the string contains an opening
      *                           <code>${</code> without a closing
      *                           <code>}</code>
      * Code copied from ant -
      * http://cvs.apache.org/viewcvs/jakarta-ant/src/main/org/apache/tools/ant/ProjectHelper.java
      */
     private static void parsePropertyString(String value,
                                            List<String> fragments,
                                            List<String> propertyRefs)
         throws CheckstyleException
     {
         int prev = 0;
         //search for the next instance of $ from the 'prev' position
         int pos = value.indexOf('$', prev);
         while (pos >= 0) {
 
             //if there was any text before this, add it as a fragment
-            //TODO, this check could be modified to go if pos>prev;
-            //seems like this current version could stick empty strings
-            //into the list
             if (pos > 0) {
                 fragments.add(value.substring(prev, pos));
             }
             //if we are at the end of the string, we tack on a $
             //then move past it
             if (pos == value.length() - 1) {
                 fragments.add("$");
                 prev = pos + 1;
             }
             else if (value.charAt(pos + 1) != '{') {
                 //peek ahead to see if the next char is a property or not
                 //not a property: insert the char as a literal
                 /*
                 fragments.addElement(value.substring(pos + 1, pos + 2));
                 prev = pos + 2;
                 */
                 if (value.charAt(pos + 1) == '$') {
                     //backwards compatibility two $ map to one mode
                     fragments.add("$");
                     prev = pos + 2;
                 }
                 else {
                     //new behaviour: $X maps to $X for all values of X!='$'
                     fragments.add(value.substring(pos, pos + 2));
                     prev = pos + 2;
                 }
 
             }
             else {
                 //property found, extract its name or bail on a typo
                 final int endName = value.indexOf('}', pos);
                 if (endName < 0) {
                     throw new CheckstyleException("Syntax error in property: "
                                                     + value);
                 }
                 final String propertyName = value.substring(pos + 2, endName);
                 fragments.add(null);
                 propertyRefs.add(propertyName);
                 prev = endName + 1;
             }
 
             //search for the next instance of $ from the 'prev' position
             pos = value.indexOf('$', prev);
         }
         //no more $ signs found
         //if there is any tail to the file, append it
         if (prev < value.length()) {
             fragments.add(value.substring(prev));
         }
     }
