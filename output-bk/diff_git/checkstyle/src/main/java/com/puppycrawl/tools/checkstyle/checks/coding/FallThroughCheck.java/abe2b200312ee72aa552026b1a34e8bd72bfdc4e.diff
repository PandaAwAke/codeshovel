diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
index e6dce91a4..b208d14c9 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
@@ -45,100 +45,106 @@ import com.puppycrawl.tools.checkstyle.api.Utils;
  *     x = 2;
  *     // fallthru
  * case 4:
  * </pre>
  * <p>
  * The recognized relief comment can be configured with the property
  * <code>reliefPattern</code>. Default value of this regular expression
  * is "fallthru|fall through|fallthrough|falls through".
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="FallThrough"&gt;
  *     &lt;property name=&quot;reliefPattern&quot;
  *                  value=&quot;Fall Through&quot;/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * @author o_sukhodolsky
  */
 public class FallThroughCheck extends Check
 {
     /** Do we need to check last case group. */
     private boolean checkLastGroup;
 
     /** Relief pattern to allow fall throught to the next case branch. */
     private String reliefPattern = "fallthru|falls? ?through";
 
     /** Relief regexp. */
     private Pattern regExp;
 
     /** Creates new instance of the check. */
     public FallThroughCheck()
     {
         // do nothing
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[]{TokenTypes.CASE_GROUP};
     }
 
     @Override
     public int[] getRequiredTokens()
     {
         return getDefaultTokens();
     }
 
+    @Override
+    public int[] getAcceptableTokens()
+    {
+        return new int[]{TokenTypes.CASE_GROUP};
+    }
+
     /**
      * Set the relief pattern.
      *
      * @param pattern
      *            The regular expression pattern.
      */
     public void setReliefPattern(String pattern)
     {
         reliefPattern = pattern;
     }
 
     /**
      * Configures whether we need to check last case group or not.
      * @param value new value of the property.
      */
     public void setCheckLastCaseGroup(boolean value)
     {
         checkLastGroup = value;
     }
 
     @Override
     public void init()
     {
         super.init();
         regExp = Utils.getPattern(reliefPattern);
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
         final DetailAST nextGroup = ast.getNextSibling();
         final boolean isLastGroup =
             ((nextGroup == null)
              || (nextGroup.getType() != TokenTypes.CASE_GROUP));
         if (isLastGroup && !checkLastGroup) {
             // we do not need to check last group
             return;
         }
 
         final DetailAST slist = ast.findFirstToken(TokenTypes.SLIST);
 
         if (slist != null && !isTerminated(slist, true, true)
             && !hasFallTruComment(ast, nextGroup))
         {
             if (!isLastGroup) {
                 log(nextGroup, "fall.through");
             }
             else {
                 log(ast, "fall.through.last");
             }
