diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheck.java
index 719a59a83..f4ee1415c 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheck.java
@@ -74,76 +74,87 @@ public class AvoidStaticImportCheck
 
     /** The classes/static members to exempt from this check. */
     private String[] excludes = ArrayUtils.EMPTY_STRING_ARRAY;
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.STATIC_IMPORT};
     }
 
     @Override
     public int[] getRequiredTokens() {
         return getAcceptableTokens();
     }
 
     /**
      * Sets the list of classes or static members to be exempt from the check.
      * @param excludes a list of fully-qualified class names/specific
      *     static members where static imports are ok
      */
     public void setExcludes(String... excludes) {
         this.excludes = excludes.clone();
     }
 
     @Override
     public void visitToken(final DetailAST ast) {
         final DetailAST startingDot =
             ast.getFirstChild().getNextSibling();
         final FullIdent name = FullIdent.createFullIdent(startingDot);
 
         if (!isExempt(name.getText())) {
             log(startingDot.getLineNo(), MSG_KEY, name.getText());
         }
     }
 
     /**
      * Checks if a class or static member is exempt from known excludes.
      *
      * @param classOrStaticMember
      *                the class or static member
      * @return true if except false if not
      */
     private boolean isExempt(String classOrStaticMember) {
         boolean exempt = false;
 
         for (String exclude : excludes) {
-            if (classOrStaticMember.equals(exclude)) {
+            if (classOrStaticMember.equals(exclude)
+                    || isStarImportOfPackage(classOrStaticMember, exclude)) {
                 exempt = true;
                 break;
             }
-            else if (exclude.endsWith(".*")) {
-                //this section allows explicit imports
-                //to be exempt when configured using
-                //a starred import
-                final String excludeMinusDotStar =
-                    exclude.substring(0, exclude.length() - 2);
-                if (classOrStaticMember.startsWith(excludeMinusDotStar)
-                        && !classOrStaticMember.equals(excludeMinusDotStar)) {
-                    final String member =
-                        classOrStaticMember.substring(
-                            excludeMinusDotStar.length() + 1);
-                    //if it contains a dot then it is not a member but a package
-                    if (member.indexOf('.') == -1) {
-                        exempt = true;
-                        break;
-                    }
+        }
+        return exempt;
+    }
+
+    /**
+     * Returns true if classOrStaticMember is a starred name of package,
+     *  not just member name.
+     * @param classOrStaticMember - full name of member
+     * @param exclude - current exclusion
+     * @return true if member in exclusion list
+     */
+    private static boolean isStarImportOfPackage(String classOrStaticMember, String exclude) {
+        boolean result = false;
+        if (exclude.endsWith(".*")) {
+            //this section allows explicit imports
+            //to be exempt when configured using
+            //a starred import
+            final String excludeMinusDotStar =
+                exclude.substring(0, exclude.length() - 2);
+            if (classOrStaticMember.startsWith(excludeMinusDotStar)
+                    && !classOrStaticMember.equals(excludeMinusDotStar)) {
+                final String member = classOrStaticMember.substring(
+                        excludeMinusDotStar.length() + 1);
+                //if it contains a dot then it is not a member but a package
+                if (member.indexOf('.') == -1) {
+                    result = true;
                 }
             }
         }
-        return exempt;
+        return result;
     }
 }
