diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheck.java
index 022d3e654..1ad6286e4 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheck.java
@@ -53,95 +53,100 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  * <pre>
  * &lt;module name="MethodName"&gt;
  *    &lt;property name="format" value="^[a-z](_?[a-zA-Z0-9]+)*$"/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * <p>
  * An example of how to configure the check to allow method names
  * to be equal to the residing class name is:
  * </p>
  * <pre>
  * &lt;module name="MethodName"&gt;
  *    &lt;property name="allowClassName" value="true"/&gt;
  * &lt;/module&gt;
  * </pre>
  * @author Oliver Burn
  * @author Travis Schneeberger
  * @author Utkarsh Srivastava
  */
 public class MethodNameCheck
     extends AbstractAccessControlNameCheck {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "method.name.equals.class.name";
 
     /**
      * {@link Override Override} annotation name.
      */
     private static final String OVERRIDE = "Override";
 
     /**
      * Canonical {@link Override Override} annotation name.
      */
     private static final String CANONICAL_OVERRIDE = "java.lang." + OVERRIDE;
 
     /**
      * for allowing method name to be the same as the class name.
      */
     private boolean allowClassName;
 
     /** Creates a new {@code MethodNameCheck} instance. */
     public MethodNameCheck() {
         super("^[a-z][a-zA-Z0-9]*$");
     }
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.METHOD_DEF, };
+        return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.METHOD_DEF, };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         if (!AnnotationUtility.containsAnnotation(ast, OVERRIDE)
             && !AnnotationUtility.containsAnnotation(ast, CANONICAL_OVERRIDE)) {
             super.visitToken(ast); // Will check the name against the format.
         }
 
         if (!allowClassName) {
             final DetailAST method =
                 ast.findFirstToken(TokenTypes.IDENT);
             //in all cases this will be the classDef type except anon inner
             //with anon inner classes this will be the Literal_New keyword
             final DetailAST classDefOrNew = ast.getParent().getParent();
             final DetailAST classIdent =
                 classDefOrNew.findFirstToken(TokenTypes.IDENT);
             // Following logic is to handle when a classIdent can not be
             // found. This is when you have a Literal_New keyword followed
             // a DOT, which is when you have:
             // new Outclass.InnerInterface(x) { ... }
             // Such a rare case, will not have the logic to handle parsing
             // down the tree looking for the first ident.
             if (classIdent != null
                 && method.getText().equals(classIdent.getText())) {
                 log(method.getLineNo(), method.getColumnNo(),
                     MSG_KEY, method.getText());
             }
         }
     }
 
     /**
      * Sets the property for allowing a method to be the same name as a class.
      * @param allowClassName true to allow false to disallow
      */
     public void setAllowClassName(boolean allowClassName) {
         this.allowClassName = allowClassName;
     }
 }
