diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java
index 32804352d..827a62dad 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java
@@ -137,102 +137,117 @@ public final class CommonUtils {
      * @param inputString
      *            the input String
      * @param toIdx
      *            index in string (exclusive) where the calculation stops
      * @param tabWidth
      *            the distance between tab stop position.
      * @return the length of string.substring(0, toIdx) with tabs expanded.
      */
     public static int lengthExpandedTabs(String inputString,
             int toIdx,
             int tabWidth) {
         int len = 0;
         for (int idx = 0; idx < toIdx; idx++) {
             if (inputString.charAt(idx) == '\t') {
                 len = (len / tabWidth + 1) * tabWidth;
             }
             else {
                 len++;
             }
         }
         return len;
     }
 
     /**
      * Validates whether passed string is a valid pattern or not.
      *
      * @param pattern
      *            string to validate
      * @return true if the pattern is valid false otherwise
      */
     public static boolean isPatternValid(String pattern) {
         try {
             Pattern.compile(pattern);
         }
         catch (final PatternSyntaxException ignored) {
             return false;
         }
         return true;
     }
 
     /**
      * Helper method to create a regular expression.
      *
      * @param pattern
      *            the pattern to match
      * @return a created regexp object
      * @throws ConversionException
      *             if unable to create Pattern object.
      **/
     public static Pattern createPattern(String pattern) {
+        return createPattern(pattern, 0);
+    }
+
+    /**
+     * Helper method to create a regular expression with a specific flags.
+     *
+     * @param pattern
+     *            the pattern to match
+     * @param flags
+     *            the flags to set
+     * @return a created regexp object
+     * @throws ConversionException
+     *             if unable to create Pattern object.
+     **/
+    public static Pattern createPattern(String pattern, int flags) {
         try {
-            return Pattern.compile(pattern);
+            return Pattern.compile(pattern, flags);
         }
         catch (final PatternSyntaxException e) {
             throw new ConversionException(
                     "Failed to initialise regular expression " + pattern, e);
         }
     }
 
     /**
      * @param type
      *            the fully qualified name. Cannot be null
      * @return the base class name from a fully qualified name
      */
     public static String baseClassName(String type) {
         final int index = type.lastIndexOf('.');
 
         if (index == -1) {
             return type;
         }
         else {
             return type.substring(index + 1);
         }
     }
 
     /**
      * Constructs a normalized relative path between base directory and a given path.
      *
      * @param baseDirectory
      *            the base path to which given path is relativized
      * @param path
      *            the path to relativize against base directory
      * @return the relative normalized path between base directory and
      *     path or path if base directory is null.
      */
     public static String relativizeAndNormalizePath(final String baseDirectory, final String path) {
         if (baseDirectory == null) {
             return path;
         }
         final Path pathAbsolute = Paths.get(path).normalize();
         final Path pathBase = Paths.get(baseDirectory).normalize();
         return pathBase.relativize(pathAbsolute).toString();
     }
 
     /**
      * Tests if this string starts with the specified prefix.
      * <p>
      * It is faster version of {@link String#startsWith(String)} optimized for
      *  one-character prefixes at the expense of
      * some readability. Suggested by SimplifyStartsWith PMD rule:
      * http://pmd.sourceforge.net/pmd-5.3.1/pmd-java/rules/java/optimizations.html#SimplifyStartsWith
      * </p>
