diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java b/src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java
index d82eb7d92..85adb62c7 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java
@@ -185,161 +185,161 @@ public class JavadocDetailNodeParser {
                     (JavadocNodeImpl[]) currentJavadocParent.getChildren();
 
             insertChildrenNodes(children, parseTreeParent);
 
             if (children.length > 0) {
                 currentJavadocParent = children[0];
                 parseTreeParent = parseTreeParent.getChild(0);
             }
             else {
                 JavadocNodeImpl nextJavadocSibling = (JavadocNodeImpl) JavadocUtils
                         .getNextSibling(currentJavadocParent);
 
                 ParseTree nextParseTreeSibling = getNextSibling(parseTreeParent);
 
                 if (nextJavadocSibling == null) {
                     JavadocNodeImpl tempJavadocParent =
                             (JavadocNodeImpl) currentJavadocParent.getParent();
 
                     ParseTree tempParseTreeParent = parseTreeParent.getParent();
 
                     while (nextJavadocSibling == null && tempJavadocParent != null) {
 
                         nextJavadocSibling = (JavadocNodeImpl) JavadocUtils
                                 .getNextSibling(tempJavadocParent);
 
                         nextParseTreeSibling = getNextSibling(tempParseTreeParent);
 
                         tempJavadocParent = (JavadocNodeImpl) tempJavadocParent.getParent();
                         tempParseTreeParent = tempParseTreeParent.getParent();
                     }
                 }
                 currentJavadocParent = nextJavadocSibling;
                 parseTreeParent = nextParseTreeSibling;
             }
         }
 
         return rootJavadocNode;
     }
 
     /**
      * Creates child nodes for each node from 'nodes' array.
      * @param parseTreeParent original ParseTree parent node
      * @param nodes array of JavadocNodeImpl nodes
      */
     private void insertChildrenNodes(final JavadocNodeImpl[] nodes, ParseTree parseTreeParent) {
         for (int i = 0; i < nodes.length; i++) {
             final JavadocNodeImpl currentJavadocNode = nodes[i];
             final ParseTree currentParseTreeNodeChild = parseTreeParent.getChild(i);
             final JavadocNodeImpl[] subChildren =
                     createChildrenNodes(currentJavadocNode, currentParseTreeNodeChild);
-            currentJavadocNode.setChildren(subChildren);
+            currentJavadocNode.setChildren((DetailNode[]) subChildren);
         }
     }
 
     /**
      * Creates children Javadoc nodes base on ParseTree node's children.
      * @param parentJavadocNode node that will be parent for created children
      * @param parseTreeNode original ParseTree node
      * @return array of Javadoc nodes
      */
     private JavadocNodeImpl[]
             createChildrenNodes(JavadocNodeImpl parentJavadocNode, ParseTree parseTreeNode) {
         final JavadocNodeImpl[] children =
                 new JavadocNodeImpl[parseTreeNode.getChildCount()];
 
         for (int j = 0; j < children.length; j++) {
             final JavadocNodeImpl child =
                     createJavadocNode(parseTreeNode.getChild(j), parentJavadocNode, j);
 
             children[j] = child;
         }
         return children;
     }
 
     /**
      * Creates root JavadocNodeImpl node base on ParseTree root node.
      * @param parseTreeNode ParseTree root node
      * @return root Javadoc node
      */
     private JavadocNodeImpl createRootJavadocNode(ParseTree parseTreeNode) {
         final JavadocNodeImpl rootJavadocNode = createJavadocNode(parseTreeNode, null, -1);
 
         final int childCount = parseTreeNode.getChildCount();
         final JavadocNodeImpl[] children = new JavadocNodeImpl[childCount];
 
         for (int i = 0; i < childCount; i++) {
             final JavadocNodeImpl child = createJavadocNode(parseTreeNode.getChild(i),
                     rootJavadocNode, i);
             children[i] = child;
         }
-        rootJavadocNode.setChildren(children);
+        rootJavadocNode.setChildren((DetailNode[]) children);
         return rootJavadocNode;
     }
 
     /**
      * Creates JavadocNodeImpl node on base of ParseTree node.
      *
      * @param parseTree ParseTree node
      * @param parent DetailNode that will be parent of new node
      * @param index child index that has new node
      * @return JavadocNodeImpl node on base of ParseTree node.
      */
     private JavadocNodeImpl createJavadocNode(ParseTree parseTree, DetailNode parent, int index) {
         final JavadocNodeImpl node = new JavadocNodeImpl();
         node.setText(parseTree.getText());
         node.setColumnNumber(getColumn(parseTree));
         node.setLineNumber(getLine(parseTree) + blockCommentLineNumber);
         node.setIndex(index);
         node.setType(getTokenType(parseTree));
         node.setParent(parent);
-        node.setChildren(new JavadocNodeImpl[parseTree.getChildCount()]);
+        node.setChildren((DetailNode[]) new JavadocNodeImpl[parseTree.getChildCount()]);
         return node;
     }
 
     /**
      * Gets line number from ParseTree node.
      * @param tree
      *        ParseTree node
      * @return line number
      */
     private static int getLine(ParseTree tree) {
         if (tree instanceof TerminalNode) {
             return ((TerminalNode) tree).getSymbol().getLine() - 1;
         }
         else {
             final ParserRuleContext rule = (ParserRuleContext) tree;
             return rule.start.getLine() - 1;
         }
     }
 
     /**
      * Gets column number from ParseTree node.
      * @param tree
      *        ParseTree node
      * @return column number
      */
     private static int getColumn(ParseTree tree) {
         if (tree instanceof TerminalNode) {
             return ((TerminalNode) tree).getSymbol().getCharPositionInLine();
         }
         else {
             final ParserRuleContext rule = (ParserRuleContext) tree;
             return rule.start.getCharPositionInLine();
         }
     }
 
     /**
      * Gets next sibling of ParseTree node.
      * @param node ParseTree node
      * @return next sibling of ParseTree node.
      */
     private static ParseTree getNextSibling(ParseTree node) {
         ParseTree nextSibling = null;
 
         if (node.getParent() != null) {
             final ParseTree parent = node.getParent();
             final int childCount = parent.getChildCount();
 
             int index = 0;
             while (true) {
                 final ParseTree currentNode = parent.getChild(index);
