diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
index ed1602c2d..4fb87fe07 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
@@ -64,105 +64,105 @@ import com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter;
  * An implementation of a ANT task for calling checkstyle. See the documentation
  * of the task for usage.
  * @author Oliver Burn
  */
 public class CheckstyleAntTask extends Task {
     /** Poor man's enum for an xml formatter. */
     private static final String E_XML = "xml";
     /** Poor man's enum for an plain formatter. */
     private static final String E_PLAIN = "plain";
 
     /** Suffix for time string. */
     private static final String TIME_SUFFIX = " ms.";
 
     /** Contains the paths to process. */
     private final List<Path> paths = new ArrayList<>();
 
     /** Contains the filesets to process. */
     private final List<FileSet> fileSets = new ArrayList<>();
 
     /** Contains the formatters to log to. */
     private final List<Formatter> formatters = new ArrayList<>();
 
     /** Contains the Properties to override. */
     private final List<Property> overrideProps = new ArrayList<>();
 
     /** Class path to locate class files. */
     private Path classpath;
 
     /** Name of file to check. */
     private String fileName;
 
     /** Config file containing configuration. */
     private String configLocation;
 
     /** Whether to fail build on violations. */
     private boolean failOnViolation = true;
 
     /** Property to set on violations. */
     private String failureProperty;
 
     /** The name of the properties file. */
     private File properties;
 
     /** The maximum number of errors that are tolerated. */
     private int maxErrors;
 
     /** The maximum number of warnings that are tolerated. */
     private int maxWarnings = Integer.MAX_VALUE;
 
     /**
-     * Whether to omit ignored modules - some modules may log tove
+     * Whether to execute ignored modules - some modules may log above
      * their severity depending on their configuration (e.g. WriteTag) so
      * need to be included
      */
-    private boolean omitIgnoredModules = true;
+    private boolean executeIgnoredModules;
 
     ////////////////////////////////////////////////////////////////////////////
     // Setters for ANT specific attributes
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Tells this task to write failure message to the named property when there
      * is a violation.
      * @param propertyName the name of the property to set
      *                      in the event of an failure.
      */
     public void setFailureProperty(String propertyName) {
         failureProperty = propertyName;
     }
 
     /**
      * Sets flag - whether to fail if a violation is found.
      * @param fail whether to fail if a violation is found
      */
     public void setFailOnViolation(boolean fail) {
         failOnViolation = fail;
     }
 
     /**
      * Sets the maximum number of errors allowed. Default is 0.
      * @param maxErrors the maximum number of errors allowed.
      */
     public void setMaxErrors(int maxErrors) {
         this.maxErrors = maxErrors;
     }
 
     /**
      * Sets the maximum number of warnings allowed. Default is
      * {@link Integer#MAX_VALUE}.
      * @param maxWarnings the maximum number of warnings allowed.
      */
     public void setMaxWarnings(int maxWarnings) {
         this.maxWarnings = maxWarnings;
     }
 
     /**
      * Adds a path.
      * @param path the path to add.
      */
     public void addPath(Path path) {
         paths.add(path);
     }
 
     /**
      * Adds set of files (nested fileset attribute).
@@ -222,105 +222,105 @@ public class CheckstyleAntTask extends Task {
 
     /**
      * Sets file to be checked.
      * @param file the file to be checked
      */
     public void setFile(File file) {
         fileName = file.getAbsolutePath();
     }
 
     /**
      * Sets configuration file.
      * @param file the configuration file to use
      */
     public void setConfig(File file) {
         setConfigLocation(file.getAbsolutePath());
     }
 
     /**
      * Sets URL to the configuration.
      * @param url the URL of the configuration to use
      * @deprecated please use setConfigUrl instead
      */
     // -@cs[AbbreviationAsWordInName] Should be removed at 7.0 version,
     // we keep for some time to avoid braking compatibility.
     @Deprecated
     public void setConfigURL(URL url) {
         setConfigUrl(url);
     }
 
     /**
      * Sets URL to the configuration.
      * @param url the URL of the configuration to use
      */
     public void setConfigUrl(URL url) {
         setConfigLocation(url.toExternalForm());
     }
 
     /**
      * Sets the location of the configuration.
      * @param location the location, which is either a
      */
     private void setConfigLocation(String location) {
         if (configLocation != null) {
             throw new BuildException("Attributes 'config' and 'configURL' "
                     + "must not be set at the same time");
         }
         configLocation = location;
     }
 
     /**
-     * Sets flag - whether to omit ignored modules.
-     * @param omit whether to omit ignored modules
+     * Sets flag - whether to execute ignored modules.
+     * @param omit whether to execute ignored modules
      */
-    public void setOmitIgnoredModules(boolean omit) {
-        omitIgnoredModules = omit;
+    public void setExecuteIgnoredModules(boolean omit) {
+        executeIgnoredModules = omit;
     }
 
     ////////////////////////////////////////////////////////////////////////////
     // Setters for Root Module's configuration attributes
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Sets a properties file for use instead
      * of individually setting them.
      * @param props the properties File to use
      */
     public void setProperties(File props) {
         properties = props;
     }
 
     ////////////////////////////////////////////////////////////////////////////
     // The doers
     ////////////////////////////////////////////////////////////////////////////
 
     @Override
     public void execute() {
         final long startTime = System.currentTimeMillis();
 
         try {
             // output version info in debug mode
             final ResourceBundle compilationProperties = ResourceBundle
                     .getBundle("checkstylecompilation", Locale.ROOT);
             final String version = compilationProperties
                     .getString("checkstyle.compile.version");
             final String compileTimestamp = compilationProperties
                     .getString("checkstyle.compile.timestamp");
             log("checkstyle version " + version, Project.MSG_VERBOSE);
             log("compiled on " + compileTimestamp, Project.MSG_VERBOSE);
 
             // Check for no arguments
             if (fileName == null
                     && fileSets.isEmpty()
                     && paths.isEmpty()) {
                 throw new BuildException(
                         "Must specify at least one of 'file' or nested 'fileset' or 'path'.",
                         getLocation());
             }
             if (configLocation == null) {
                 throw new BuildException("Must specify 'config'.", getLocation());
             }
             realExecute(version);
         }
         finally {
             final long endTime = System.currentTimeMillis();
             log("Total execution took " + (endTime - startTime) + TIME_SUFFIX,
@@ -378,101 +378,101 @@ public class CheckstyleAntTask extends Task {
         final long endTime = System.currentTimeMillis();
         log("To locate the files took " + (endTime - startTime) + TIME_SUFFIX,
             Project.MSG_VERBOSE);
 
         log("Running Checkstyle " + checkstyleVersion + " on " + files.size()
                 + " files", Project.MSG_INFO);
         log("Using configuration " + configLocation, Project.MSG_VERBOSE);
 
         final int numErrs;
 
         try {
             final long processingStartTime = System.currentTimeMillis();
             numErrs = rootModule.process(files);
             final long processingEndTime = System.currentTimeMillis();
             log("To process the files took " + (processingEndTime - processingStartTime)
                 + TIME_SUFFIX, Project.MSG_VERBOSE);
         }
         catch (CheckstyleException ex) {
             throw new BuildException("Unable to process files: " + files, ex);
         }
         final int numWarnings = warningCounter.getCount();
         final boolean okStatus = numErrs <= maxErrors && numWarnings <= maxWarnings;
 
         // Handle the return status
         if (!okStatus) {
             final String failureMsg =
                     "Got " + numErrs + " errors and " + numWarnings
                             + " warnings.";
             if (failureProperty != null) {
                 getProject().setProperty(failureProperty, failureMsg);
             }
 
             if (failOnViolation) {
                 throw new BuildException(failureMsg, getLocation());
             }
         }
     }
 
     /**
      * Creates new instance of the root module.
      * @return new instance of the root module
      */
     private RootModule createRootModule() {
         final RootModule rootModule;
         try {
             final Properties props = createOverridingProperties();
             final Configuration config =
                 ConfigurationLoader.loadConfiguration(
                     configLocation,
                     new PropertiesExpander(props),
-                    omitIgnoredModules);
+                    !executeIgnoredModules);
 
             final ClassLoader moduleClassLoader =
                 Checker.class.getClassLoader();
 
             final ModuleFactory factory = new PackageObjectFactory(
                     Checker.class.getPackage().getName() + ".", moduleClassLoader);
 
             rootModule = (RootModule) factory.createModule(config.getName());
             rootModule.setModuleClassLoader(moduleClassLoader);
 
             if (rootModule instanceof Checker) {
                 final ClassLoader loader = new AntClassLoader(getProject(),
                         classpath);
 
                 ((Checker) rootModule).setClassLoader(loader);
             }
 
             rootModule.configure(config);
         }
         catch (final CheckstyleException ex) {
             throw new BuildException(String.format(Locale.ROOT, "Unable to create Root Module: "
                     + "configLocation {%s}, classpath {%s}.", configLocation, classpath), ex);
         }
         return rootModule;
     }
 
     /**
      * Create the Properties object based on the arguments specified
      * to the ANT task.
      * @return the properties for property expansion expansion
      * @throws BuildException if an error occurs
      */
     private Properties createOverridingProperties() {
         final Properties returnValue = new Properties();
 
         // Load the properties file if specified
         if (properties != null) {
             FileInputStream inStream = null;
             try {
                 inStream = new FileInputStream(properties);
                 returnValue.load(inStream);
             }
             catch (final IOException ex) {
                 throw new BuildException("Error loading Properties file '"
                         + properties + "'", ex, getLocation());
             }
             finally {
                 Closeables.closeQuietly(inStream);
             }
         }
