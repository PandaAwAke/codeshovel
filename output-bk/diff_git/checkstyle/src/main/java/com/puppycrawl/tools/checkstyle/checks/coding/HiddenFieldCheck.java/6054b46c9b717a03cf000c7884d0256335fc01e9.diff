diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java
index c07eabc72..e41d7ba64 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java
@@ -355,110 +355,111 @@ public class HiddenFieldCheck
      * @return true is regexp is matching
      */
     private boolean isMatchingRegexp(String name) {
         return ignoreFormat != null && ignoreFormat.matcher(name).find();
     }
 
     /**
      * Determines whether an AST node is in a static method or static
      * initializer.
      * @param ast the node to check.
      * @return true if ast is in a static method or a static block;
      */
     private static boolean isInStatic(DetailAST ast) {
         DetailAST parent = ast.getParent();
         boolean inStatic = false;
 
         while (parent != null && !inStatic) {
             if (parent.getType() == TokenTypes.STATIC_INIT) {
                 inStatic = true;
             }
             else if (parent.getType() == TokenTypes.METHOD_DEF
                         && !ScopeUtils.isInScope(parent, Scope.ANONINNER)
                         || parent.getType() == TokenTypes.VARIABLE_DEF) {
                 final DetailAST mods =
                     parent.findFirstToken(TokenTypes.MODIFIERS);
                 inStatic = mods.branchContains(TokenTypes.LITERAL_STATIC);
                 break;
             }
             else {
                 parent = parent.getParent();
             }
         }
         return inStatic;
     }
 
     /**
      * Decides whether to ignore an AST node that is the parameter of a
      * setter method, where the property setter method for field 'xyz' has
      * name 'setXyz', one parameter named 'xyz', and return type void
      * (default behavior) or return type is name of the class in which
      * such method is declared (allowed only if
      * {@link #setSetterCanReturnItsClass(boolean)} is called with
      * value <em>true</em>).
      *
      * @param ast the AST to check.
      * @param name the name of ast.
      * @return true if ast should be ignored because check property
      *     ignoreSetter is true and ast is the parameter of a setter method.
      */
     private boolean isIgnoredSetterParam(DetailAST ast, String name) {
+        boolean isIgnoredSetterParam = false;
         if (ignoreSetter && ast.getType() == TokenTypes.PARAMETER_DEF) {
             final DetailAST parametersAST = ast.getParent();
             final DetailAST methodAST = parametersAST.getParent();
             if (parametersAST.getChildCount() == 1
                 && methodAST.getType() == TokenTypes.METHOD_DEF
                 && isSetterMethod(methodAST, name)) {
-                return true;
+                isIgnoredSetterParam = true;
             }
         }
-        return false;
+        return isIgnoredSetterParam;
     }
 
     /**
      * Determine if a specific method identified by methodAST and a single
      * variable name aName is a setter. This recognition partially depends
      * on mSetterCanReturnItsClass property.
      *
      * @param aMethodAST AST corresponding to a method call
      * @param aName name of single parameter of this method.
      * @return true of false indicating of method is a setter or not.
      */
     private boolean isSetterMethod(DetailAST aMethodAST, String aName) {
         final String methodName =
             aMethodAST.findFirstToken(TokenTypes.IDENT).getText();
         boolean isSetterMethod = false;
 
         if (("set" + capitalize(aName)).equals(methodName)) {
             // method name did match set${Name}(${anyType} ${aName})
             // where ${Name} is capitalized version of ${aName}
             // therefore this method is potentially a setter
             final DetailAST typeAST = aMethodAST.findFirstToken(TokenTypes.TYPE);
             final String returnType = typeAST.getFirstChild().getText();
             if (typeAST.branchContains(TokenTypes.LITERAL_VOID)
                     || setterCanReturnItsClass && frame.isEmbeddedIn(returnType)) {
                 // this method has signature
                 //
                 //     void set${Name}(${anyType} ${name})
                 //
                 // and therefore considered to be a setter
                 //
                 // or
                 //
                 // return type is not void, but it is the same as the class
                 // where method is declared and and mSetterCanReturnItsClass
                 // is set to true
                 isSetterMethod = true;
             }
         }
 
         return isSetterMethod;
     }
 
     /**
      * Capitalizes a given property name the way we expect to see it in
      * a setter name.
      * @param name a property name
      * @return capitalized property name
      */
     private static String capitalize(final String name) {
         String setterName = name;
@@ -606,60 +607,62 @@ public class HiddenFieldCheck
          * @param field  the name of the instance field.
          */
         public void addStaticField(String field) {
             staticFields.add(field);
         }
 
         /**
          * Determines whether this FieldFrame contains an instance field.
          * @param field the field to check.
          * @return true if this FieldFrame contains instance field field.
          */
         public boolean containsInstanceField(String field) {
             return instanceFields.contains(field)
                     || parent != null
                     && !staticType
                     && parent.containsInstanceField(field);
 
         }
 
         /**
          * Determines whether this FieldFrame contains a static field.
          * @param field the field to check.
          * @return true if this FieldFrame contains static field field.
          */
         public boolean containsStaticField(String field) {
             return staticFields.contains(field)
                     || parent != null
                     && parent.containsStaticField(field);
         }
 
         /**
          * Getter for parent frame.
          * @return parent frame.
          */
         public FieldFrame getParent() {
             return parent;
         }
 
         /**
          * Check if current frame is embedded in class or enum with
          * specific name.
          *
          * @param classOrEnumName name of class or enum that we are looking
          *     for in the chain of field frames.
          *
          * @return true if current frame is embedded in class or enum
          *     with name classOrNameName
          */
         private boolean isEmbeddedIn(String classOrEnumName) {
             FieldFrame currentFrame = this;
+            boolean isEmbeddedIn = false;
             while (currentFrame != null) {
                 if (Objects.equals(currentFrame.frameName, classOrEnumName)) {
-                    return true;
+                    isEmbeddedIn = true;
+                    break;
                 }
                 currentFrame = currentFrame.parent;
             }
-            return false;
+            return isEmbeddedIn;
         }
     }
 }
