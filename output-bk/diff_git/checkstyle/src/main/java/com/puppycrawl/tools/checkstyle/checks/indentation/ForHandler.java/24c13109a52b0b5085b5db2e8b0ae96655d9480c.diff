diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ForHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ForHandler.java
index 38ca0de37..607373151 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ForHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ForHandler.java
@@ -29,63 +29,75 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 public class ForHandler extends BlockParentHandler
 {
     /**
      * Construct an instance of this handler with the given indentation check,
      * abstract syntax tree, and parent handler.
      *
      * @param indentCheck   the indentation check
      * @param ast           the abstract syntax tree
      * @param parent        the parent handler
      */
     public ForHandler(IndentationCheck indentCheck,
         DetailAST ast, ExpressionHandler parent)
     {
         super(indentCheck, "for", ast, parent);
     }
 
     /**
      * Check the indentation of the parameters of the 'for' loop.
      */
     private void checkForParams()
     {
         final IndentLevel expected =
             new IndentLevel(getLevel(), getBasicOffset());
         final DetailAST init = getMainAst().findFirstToken(TokenTypes.FOR_INIT);
 
         if (init != null) {
             checkExpressionSubtree(init, expected, false, false);
 
             final DetailAST cond =
                 getMainAst().findFirstToken(TokenTypes.FOR_CONDITION);
             checkExpressionSubtree(cond, expected, false, false);
 
             final DetailAST iter =
                 getMainAst().findFirstToken(TokenTypes.FOR_ITERATOR);
             checkExpressionSubtree(iter, expected, false, false);
         }
         // for each
         else {
             final DetailAST forEach =
                 getMainAst().findFirstToken(TokenTypes.FOR_EACH_CLAUSE);
             checkExpressionSubtree(forEach, expected, false, false);
         }
     }
 
     @Override
     public void checkIndentation()
     {
         checkForParams();
         super.checkIndentation();
         final LineWrappingHandler lineWrap =
-            new LineWrappingHandler(getIndentCheck(), getMainAst());
+            new LineWrappingHandler(getIndentCheck(), getMainAst(),
+                getForLoopRightParen(getMainAst()));
         lineWrap.checkIndentation();
     }
 
     @Override
     public IndentLevel suggestedChildLevel(ExpressionHandler child)
     {
         if (child instanceof ElseHandler) {
             return getLevel();
         }
         return super.suggestedChildLevel(child);
     }
+
+    /**
+     * Returns right parenthesis of for-loop statement.
+     * @param literalForAst
+     *          literal-for ast node(TokenTypes.LITERAL_FOR)
+     * @return right parenthesis of for-loop statement.
+     */
+    private static DetailAST getForLoopRightParen(DetailAST literalForAst)
+    {
+        return literalForAst.findFirstToken(TokenTypes.RPAREN);
+    }
 }
