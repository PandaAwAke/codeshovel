diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntRangeFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntRangeFilter.java
index e1fd134f5..56e56b43a 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntRangeFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntRangeFilter.java
@@ -1,79 +1,79 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2014  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.filters;
 
 /**
  * This filter accepts an Integer in a range.
  * @author Rick Giles
  */
 class IntRangeFilter implements IntFilter
 {
     /** hash function multiplicand */
     private static final int HASH_MULT = 29;
 
     /** lower bound of the range */
-    private final Integer mLowerBound;
+    private final Integer lowerBound;
 
     /** upper bound of the range */
-    private final Integer mUpperBound;
+    private final Integer upperBound;
 
     /**
      * Constructs a <code>IntRangeFilter</code> with a
      * lower bound and an upper bound for the range.
-     * @param aLowerBound the lower bound of the range.
-     * @param aUpperBound the upper bound of the range.
+     * @param lowerBound the lower bound of the range.
+     * @param upperBound the upper bound of the range.
      */
-    public IntRangeFilter(int aLowerBound, int aUpperBound)
+    public IntRangeFilter(int lowerBound, int upperBound)
     {
-        mLowerBound = aLowerBound;
-        mUpperBound = aUpperBound;
+        this.lowerBound = lowerBound;
+        this.upperBound = upperBound;
     }
 
     /** {@inheritDoc} */
     @Override
-    public boolean accept(int aInt)
+    public boolean accept(int intValue)
     {
-        return ((mLowerBound.compareTo(aInt) <= 0)
-            && (mUpperBound.compareTo(aInt) >= 0));
+        return ((lowerBound.compareTo(intValue) <= 0)
+            && (upperBound.compareTo(intValue) >= 0));
     }
 
     @Override
     public int hashCode()
     {
-        return HASH_MULT * mLowerBound.intValue() + mUpperBound.intValue();
+        return HASH_MULT * lowerBound.intValue() + upperBound.intValue();
     }
 
     @Override
-    public boolean equals(Object aObject)
+    public boolean equals(Object object)
     {
-        if (aObject instanceof IntRangeFilter) {
-            final IntRangeFilter other = (IntRangeFilter) aObject;
-            return (this.mLowerBound.equals(other.mLowerBound)
-                && this.mUpperBound.equals(other.mUpperBound));
+        if (object instanceof IntRangeFilter) {
+            final IntRangeFilter other = (IntRangeFilter) object;
+            return (this.lowerBound.equals(other.lowerBound)
+                && this.upperBound.equals(other.upperBound));
         }
         return false;
     }
 
     @Override
     public String toString()
     {
-        return "IntRangeFilter[" + mLowerBound + "," + mUpperBound + "]";
+        return "IntRangeFilter[" + lowerBound + "," + upperBound + "]";
     }
 
 }
