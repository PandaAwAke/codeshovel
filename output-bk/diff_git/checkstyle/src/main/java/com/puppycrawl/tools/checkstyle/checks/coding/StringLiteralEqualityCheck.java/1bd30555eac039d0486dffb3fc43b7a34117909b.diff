diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/StringLiteralEqualityCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/StringLiteralEqualityCheck.java
index 7e66af102..d18671b88 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/StringLiteralEqualityCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/StringLiteralEqualityCheck.java
@@ -16,58 +16,58 @@
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.coding;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import antlr.collections.AST;
 
 /**
  * <p>Checks that string literals are not used with
  * <code>==</code> or <code>&#33;=</code>.
  * </p>
  * <p>
  * Rationale: Novice Java programmers often use code like
  * <code>if (x == &quot;something&quot;)</code> when they mean
  * <code>if (&quot;something&quot;.equals(x))</code>.
  * </p>
  *
  * @author Lars K&uuml;hne
  */
 public class StringLiteralEqualityCheck extends Check
 {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "string.literal.equality";
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.EQUAL, TokenTypes.NOT_EQUAL};
     }
 
     @Override
     public int[] getAcceptableTokens()
     {
         return new int[] {TokenTypes.EQUAL, TokenTypes.NOT_EQUAL};
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
         // no need to check for nulls here, == and != always have two children
         final AST firstChild = ast.getFirstChild();
         final AST secondChild = firstChild.getNextSibling();
 
-        if ((firstChild.getType() == TokenTypes.STRING_LITERAL)
-                || (secondChild.getType() == TokenTypes.STRING_LITERAL))
+        if (firstChild.getType() == TokenTypes.STRING_LITERAL
+                || secondChild.getType() == TokenTypes.STRING_LITERAL)
         {
             log(ast.getLineNo(), ast.getColumnNo(),
                     MSG_KEY, ast.getText());
         }
     }
 }
