diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/Check.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/Check.java
index 5e45e9841..ce962428b 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/Check.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/Check.java
@@ -1,78 +1,78 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2015 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.api;
 
 import java.util.Collections;
 import java.util.Set;
 
 import org.apache.commons.lang3.ArrayUtils;
 
 import com.google.common.collect.Sets;
-import com.puppycrawl.tools.checkstyle.utils.Utils;
+import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 
 /**
  * The base class for checks.
  *
  * @author Oliver Burn
  * @see <a href="{@docRoot}/../writingchecks.html" target="_top">Writing
  * your own checks</a>
  */
 public abstract class Check extends AbstractViolationReporter {
     /** Default tab width for column reporting */
     private static final int DEFAULT_TAB_WIDTH = 8;
 
     /** The current file contents */
     private FileContents fileContents;
 
     /** The tokens the check is interested in */
     private final Set<String> tokens = Sets.newHashSet();
 
     /** The object for collecting messages. */
     private LocalizedMessages messages;
 
     /** The tab width for column reporting */
     private int tabWidth = DEFAULT_TAB_WIDTH;
 
     /**
      * The class loader to load external classes. Not initialised as this must
      * be set by my creator.
      */
     private ClassLoader classLoader;
 
     public boolean isCommentNodesRequired() {
         return false;
     }
 
     /**
      * Returns the default token a check is interested in. Only used if the
      * configuration for a check does not define the tokens.
      * @return the default tokens
      * @see TokenTypes
      */
     public abstract int[] getDefaultTokens();
 
     /**
      * The configurable token set.
      * Used to protect Checks against malicious users who specify an
      * unacceptable token set in the configuration file.
      * The default implementation returns the check's default tokens.
      * @return the token set this check is designed for.
      * @see TokenTypes
      */
@@ -197,65 +197,65 @@ public abstract class Check extends AbstractViolationReporter {
     public final FileContents getFileContents() {
         return fileContents;
     }
 
     /**
      * Set the class loader associated with the tree.
      * @param classLoader the class loader
      */
     public final void setClassLoader(ClassLoader classLoader) {
         this.classLoader = classLoader;
     }
 
     /**
      * Returns the class loader associated with the tree.
      * @return the class loader
      */
     public final ClassLoader getClassLoader() {
         return classLoader;
     }
 
     /** @return the tab width to report errors with */
     protected final int getTabWidth() {
         return tabWidth;
     }
 
     /**
      * Set the tab width to report errors with.
      * @param tabWidth an {@code int} value
      */
     public final void setTabWidth(int tabWidth) {
         this.tabWidth = tabWidth;
     }
 
     @Override
     public final void log(int line, String key, Object... args) {
         messages.add(
             new LocalizedMessage(
                 line,
                 getMessageBundle(),
                 key,
                 args,
                 getSeverityLevel(),
                 getId(),
                 getClass(),
                 getCustomMessages().get(key)));
     }
 
     @Override
     public final void log(int lineNo, int colNo, String key,
             Object... args) {
-        final int col = 1 + Utils.lengthExpandedTabs(
+        final int col = 1 + CommonUtils.lengthExpandedTabs(
             getLines()[lineNo - 1], colNo, tabWidth);
         messages.add(
             new LocalizedMessage(
                 lineNo,
                 col,
                 getMessageBundle(),
                 key,
                 args,
                 getSeverityLevel(),
                 getId(),
                 getClass(),
                 getCustomMessages().get(key)));
     }
 }
