diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
index 94c3f03c9..1576af7bb 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
@@ -270,109 +270,109 @@ public abstract class AbstractTypeAwareCheck extends AbstractCheck {
                                                     columnNo,
                                                     getMessageBundle(),
                                                     msgKey,
                                                     values,
                                                     getSeverityLevel(),
                                                     getId(),
                                                     getClass(),
                                                     null);
             throw new IllegalStateException(msg.getMessage());
         }
 
         if (!suppressLoadErrors) {
             log(lineNo, columnNo, msgKey, values);
         }
     }
 
     /**
      * Collects the details of a package.
      * @param ast node containing the package details
      */
     private void processPackage(DetailAST ast) {
         final DetailAST nameAST = ast.getLastChild().getPreviousSibling();
         packageFullIdent = FullIdent.createFullIdent(nameAST);
     }
 
     /**
      * Collects the details of imports.
      * @param ast node containing the import details
      */
     private void processImport(DetailAST ast) {
         final FullIdent name = FullIdent.createFullIdentBelow(ast);
         imports.add(name.getText());
     }
 
     /**
      * Process type params (if any) for given class, enum or method.
      * @param ast class, enum or method to process.
      */
     private void processTypeParams(DetailAST ast) {
         final DetailAST params =
             ast.findFirstToken(TokenTypes.TYPE_PARAMETERS);
 
         final Map<String, AbstractClassInfo> paramsMap = new HashMap<>();
         typeParams.push(paramsMap);
 
         if (params != null) {
             for (DetailAST child = params.getFirstChild();
                  child != null;
                  child = child.getNextSibling()) {
                 if (child.getType() == TokenTypes.TYPE_PARAMETER) {
-                    final String alias =
-                        child.findFirstToken(TokenTypes.IDENT).getText();
                     final DetailAST bounds =
                         child.findFirstToken(TokenTypes.TYPE_UPPER_BOUNDS);
                     if (bounds != null) {
                         final FullIdent name =
                             FullIdent.createFullIdentBelow(bounds);
                         final AbstractClassInfo classInfo =
                             createClassInfo(new Token(name), currentClassName);
+                        final String alias =
+                                child.findFirstToken(TokenTypes.IDENT).getText();
                         paramsMap.put(alias, classInfo);
                     }
                 }
             }
         }
     }
 
     /**
      * Processes class definition.
      * @param ast class definition to process.
      */
     private void processClass(DetailAST ast) {
         final DetailAST ident = ast.findFirstToken(TokenTypes.IDENT);
         String innerClass = ident.getText();
 
         if (!currentClassName.isEmpty()) {
             innerClass = "$" + innerClass;
         }
         currentClassName += innerClass;
         processTypeParams(ast);
     }
 
     /**
      * Returns current class.
      * @return name of current class.
      */
     protected final String getCurrentClassName() {
         return currentClassName;
     }
 
     /**
      * Creates class info for given name.
      * @param name name of type.
      * @param surroundingClass name of surrounding class.
      * @return class info for given name.
      */
     protected final AbstractClassInfo createClassInfo(final Token name,
                                               final String surroundingClass) {
         final AbstractClassInfo result;
         final AbstractClassInfo classInfo = findClassAlias(name.getText());
         if (classInfo == null) {
             result = new RegularClass(name, surroundingClass, this);
         }
         else {
             result = new ClassAlias(name, classInfo);
         }
         return result;
     }
 
     /**
