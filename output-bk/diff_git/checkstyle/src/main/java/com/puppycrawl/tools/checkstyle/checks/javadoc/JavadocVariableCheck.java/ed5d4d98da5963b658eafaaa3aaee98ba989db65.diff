diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java
index 5aab1cfd1..719eaf0a5 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java
@@ -83,78 +83,68 @@ public class JavadocVariableCheck
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.VARIABLE_DEF,
             TokenTypes.ENUM_CONSTANT_DEF,
         };
     }
 
     /*
      * Skipping enum values is requested.
      * Checkstyle's issue #1669: https://github.com/checkstyle/checkstyle/issues/1669
      */
     @Override
     public int[] getRequiredTokens() {
         return new int[] {
             TokenTypes.VARIABLE_DEF,
         };
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         if (shouldCheck(ast)) {
             final FileContents contents = getFileContents();
             final TextBlock textBlock =
                 contents.getJavadocBefore(ast.getLineNo());
 
             if (textBlock == null) {
                 log(ast, MSG_JAVADOC_MISSING);
             }
         }
     }
 
     /**
      * Decides whether the variable name of an AST is in the ignore list.
      * @param ast the AST to check
      * @return true if the variable name of ast is in the ignore list.
      */
     private boolean isIgnored(DetailAST ast) {
         final String name = ast.findFirstToken(TokenTypes.IDENT).getText();
         return ignoreNamePattern != null && ignoreNamePattern.matcher(name).matches()
             || "serialVersionUID".equals(name);
     }
 
     /**
      * Whether we should check this node.
      * @param ast a given node.
      * @return whether we should check a given node.
      */
     private boolean shouldCheck(final DetailAST ast) {
-        if (ScopeUtils.isInCodeBlock(ast) || isIgnored(ast)) {
-            return false;
-        }
-
-        final Scope customScope;
-        if (ast.getType() == TokenTypes.ENUM_CONSTANT_DEF) {
-            customScope = Scope.PUBLIC;
-        }
-        else {
-            final DetailAST mods = ast.findFirstToken(TokenTypes.MODIFIERS);
-            final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);
-
-            if (ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {
-                customScope = Scope.PUBLIC;
+        boolean result = false;
+        if (!ScopeUtils.isInCodeBlock(ast) && !isIgnored(ast)) {
+            Scope customScope = Scope.PUBLIC;
+            if (ast.getType() != TokenTypes.ENUM_CONSTANT_DEF
+                    && !ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {
+                final DetailAST mods = ast.findFirstToken(TokenTypes.MODIFIERS);
+                customScope = ScopeUtils.getScopeFromMods(mods);
             }
-            else {
-                customScope = declaredScope;
-            }
-        }
 
-        final Scope surroundingScope = ScopeUtils.getSurroundingScope(ast);
-
-        return customScope.isIn(scope) && surroundingScope.isIn(scope)
-            && (excludeScope == null
-                || !customScope.isIn(excludeScope)
-                || !surroundingScope.isIn(excludeScope));
+            final Scope surroundingScope = ScopeUtils.getSurroundingScope(ast);
+            result = customScope.isIn(scope) && surroundingScope.isIn(scope)
+                && (excludeScope == null
+                    || !customScope.isIn(excludeScope)
+                    || !surroundingScope.isIn(excludeScope));
+        }
+        return result;
     }
 }
