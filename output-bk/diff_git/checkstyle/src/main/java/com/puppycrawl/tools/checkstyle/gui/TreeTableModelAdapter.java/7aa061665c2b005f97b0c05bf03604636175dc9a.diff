diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableModelAdapter.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableModelAdapter.java
index d8f6ed67d..244d9c566 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableModelAdapter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableModelAdapter.java
@@ -48,164 +48,174 @@
  * ITS DERIVATIVES. IN NO EVENT WILL SUN OR ITS LICENSORS BE LIABLE
  * FOR ANY LOST REVENUE, PROFIT OR DATA, OR FOR DIRECT, INDIRECT,
  * SPECIAL, CONSEQUENTIAL, INCIDENTAL OR PUNITIVE DAMAGES, HOWEVER
  * CAUSED AND REGARDLESS OF THE THEORY OF LIABILITY, ARISING OUT OF
  * THE USE OF OR INABILITY TO USE THIS SOFTWARE, EVEN IF SUN HAS
  * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  *
  * You acknowledge that this software is not designed, licensed or
  * intended for use in the design, construction, operation or
  * maintenance of any nuclear facility.
  */
 
 package com.puppycrawl.tools.checkstyle.gui;
 
 import javax.swing.JTree;
 import javax.swing.SwingUtilities;
 import javax.swing.table.AbstractTableModel;
 import javax.swing.tree.TreePath;
 import javax.swing.event.TreeExpansionEvent;
 import javax.swing.event.TreeExpansionListener;
 import javax.swing.event.TreeModelEvent;
 import javax.swing.event.TreeModelListener;
 
 /**
  * This is a wrapper class takes a TreeTableModel and implements
  * the table model interface. The implementation is trivial, with
  * all of the event dispatching support provided by the superclass:
  * the AbstractTableModel.
  *
  * <a href="http://java.sun.com/products/jfc/tsc/articles/treetable1/index.html">Original&nbsp;Source&nbsp;Location</a>
  *
  * @author Philip Milne
  * @author Scott Violet
  */
 public class TreeTableModelAdapter extends AbstractTableModel
 {
     /** For Serialisation that will never happen. */
     private static final long serialVersionUID = 8269213416115369275L;
     private final JTree mTree;
     private final TreeTableModel mTreeTableModel;
 
     public TreeTableModelAdapter(TreeTableModel aTreeTableModel, JTree aTree)
     {
         this.mTree = aTree;
         this.mTreeTableModel = aTreeTableModel;
 
         aTree.addTreeExpansionListener(new TreeExpansionListener()
         {
             // Don't use fireTableRowsInserted() here; the selection model
             // would get updated twice.
+            @Override
             public void treeExpanded(TreeExpansionEvent event)
             {
                 fireTableDataChanged();
             }
 
+            @Override
             public void treeCollapsed(TreeExpansionEvent event)
             {
                 fireTableDataChanged();
             }
         });
 
         // Install a TreeModelListener that can update the table when
         // mTree changes. We use delayedFireTableDataChanged as we can
         // not be guaranteed the mTree will have finished processing
         // the event before us.
         aTreeTableModel.addTreeModelListener(new TreeModelListener()
         {
+            @Override
             public void treeNodesChanged(TreeModelEvent e)
             {
                 delayedFireTableDataChanged();
             }
 
+            @Override
             public void treeNodesInserted(TreeModelEvent e)
             {
                 delayedFireTableDataChanged();
             }
 
+            @Override
             public void treeNodesRemoved(TreeModelEvent e)
             {
                 delayedFireTableDataChanged();
             }
 
+            @Override
             public void treeStructureChanged(TreeModelEvent e)
             {
                 delayedFireTableDataChanged();
             }
         });
     }
 
     // Wrappers, implementing TableModel interface.
 
+    @Override
     public int getColumnCount()
     {
         return mTreeTableModel.getColumnCount();
     }
 
     /**
      * {@inheritDoc}
      */
     @Override
     public String getColumnName(int column)
     {
         return mTreeTableModel.getColumnName(column);
     }
 
     /**
      * {@inheritDoc}
      */
     @Override
     public Class<?> getColumnClass(int column)
     {
         return mTreeTableModel.getColumnClass(column);
     }
 
+    @Override
     public int getRowCount()
     {
         return mTree.getRowCount();
     }
 
     protected Object nodeForRow(int row)
     {
         final TreePath treePath = mTree.getPathForRow(row);
         return treePath.getLastPathComponent();
     }
 
+    @Override
     public Object getValueAt(int row, int column)
     {
         return mTreeTableModel.getValueAt(nodeForRow(row), column);
     }
 
     /**
      * {@inheritDoc}
      */
     @Override
     public boolean isCellEditable(int row, int column)
     {
         return mTreeTableModel.isCellEditable(nodeForRow(row), column);
     }
 
     /**
      * {@inheritDoc}
      */
     @Override
     public void setValueAt(Object value, int row, int column)
     {
         mTreeTableModel.setValueAt(value, nodeForRow(row), column);
     }
 
     /**
      * Invokes fireTableDataChanged after all the pending events have been
      * processed. SwingUtilities.invokeLater is used to handle this.
      */
     protected void delayedFireTableDataChanged()
     {
         SwingUtilities.invokeLater(new Runnable()
         {
+            @Override
             public void run()
             {
                 fireTableDataChanged();
             }
         });
     }
 }
 
