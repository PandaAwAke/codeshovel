diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
index 344d03fa4..94c3f03c9 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
@@ -184,106 +184,108 @@ public abstract class AbstractTypeAwareCheck extends AbstractCheck {
      * Is exception is unchecked (subclass of {@code RuntimeException}
      * or {@code Error}.
      *
      * @param exception {@code Class} of exception to check
      * @return true  if exception is unchecked
      *         false if exception is checked
      */
     protected static boolean isUnchecked(Class<?> exception) {
         return isSubclass(exception, RuntimeException.class)
             || isSubclass(exception, Error.class);
     }
 
     /**
      * Checks if one class is subclass of another.
      *
      * @param child {@code Class} of class
      *               which should be child
      * @param parent {@code Class} of class
      *                which should be parent
      * @return true  if aChild is subclass of aParent
      *         false otherwise
      */
     protected static boolean isSubclass(Class<?> child, Class<?> parent) {
         return parent != null && child != null
             && parent.isAssignableFrom(child);
     }
 
     /**
      * @return {@code ClassResolver} for current tree.
      */
     private ClassResolver getClassResolver() {
         if (classResolver == null) {
             classResolver =
                 new ClassResolver(getClassLoader(),
                                   packageFullIdent.getText(),
                                   imports);
         }
         return classResolver;
     }
 
     /**
      * Attempts to resolve the Class for a specified name.
      * @param resolvableClassName name of the class to resolve
      * @param className name of surrounding class.
      * @return the resolved class or {@code null}
      *          if unable to resolve the class.
      */
     // -@cs[ForbidWildcardAsReturnType] The class is deprecated and will be removed soon.
     protected final Class<?> resolveClass(String resolvableClassName,
             String className) {
+        Class<?> clazz;
         try {
-            return getClassResolver().resolve(resolvableClassName, className);
+            clazz = getClassResolver().resolve(resolvableClassName, className);
         }
         catch (final ClassNotFoundException ignored) {
-            return null;
+            clazz = null;
         }
+        return clazz;
     }
 
     /**
      * Tries to load class. Logs error if unable.
      * @param ident name of class which we try to load.
      * @param className name of surrounding class.
      * @return {@code Class} for a ident.
      */
     // -@cs[ForbidWildcardAsReturnType] The class is deprecated and will be removed soon.
     protected final Class<?> tryLoadClass(Token ident, String className) {
         final Class<?> clazz = resolveClass(ident.getText(), className);
         if (clazz == null) {
             logLoadError(ident);
         }
         return clazz;
     }
 
     /**
      * Common implementation for logLoadError() method.
      * @param lineNo line number of the problem.
      * @param columnNo column number of the problem.
      * @param msgKey message key to use.
      * @param values values to fill the message out.
      */
     protected final void logLoadErrorImpl(int lineNo, int columnNo,
                                           String msgKey, Object... values) {
         if (!logLoadErrors) {
             final LocalizedMessage msg = new LocalizedMessage(lineNo,
                                                     columnNo,
                                                     getMessageBundle(),
                                                     msgKey,
                                                     values,
                                                     getSeverityLevel(),
                                                     getId(),
                                                     getClass(),
                                                     null);
             throw new IllegalStateException(msg.getMessage());
         }
 
         if (!suppressLoadErrors) {
             log(lineNo, columnNo, msgKey, values);
         }
     }
 
     /**
      * Collects the details of a package.
      * @param ast node containing the package details
      */
     private void processPackage(DetailAST ast) {
         final DetailAST nameAST = ast.getLastChild().getPreviousSibling();
@@ -315,105 +317,109 @@ public abstract class AbstractTypeAwareCheck extends AbstractCheck {
                  child != null;
                  child = child.getNextSibling()) {
                 if (child.getType() == TokenTypes.TYPE_PARAMETER) {
                     final String alias =
                         child.findFirstToken(TokenTypes.IDENT).getText();
                     final DetailAST bounds =
                         child.findFirstToken(TokenTypes.TYPE_UPPER_BOUNDS);
                     if (bounds != null) {
                         final FullIdent name =
                             FullIdent.createFullIdentBelow(bounds);
                         final AbstractClassInfo classInfo =
                             createClassInfo(new Token(name), currentClassName);
                         paramsMap.put(alias, classInfo);
                     }
                 }
             }
         }
     }
 
     /**
      * Processes class definition.
      * @param ast class definition to process.
      */
     private void processClass(DetailAST ast) {
         final DetailAST ident = ast.findFirstToken(TokenTypes.IDENT);
         String innerClass = ident.getText();
 
         if (!currentClassName.isEmpty()) {
             innerClass = "$" + innerClass;
         }
         currentClassName += innerClass;
         processTypeParams(ast);
     }
 
     /**
      * Returns current class.
      * @return name of current class.
      */
     protected final String getCurrentClassName() {
         return currentClassName;
     }
 
     /**
      * Creates class info for given name.
      * @param name name of type.
      * @param surroundingClass name of surrounding class.
      * @return class info for given name.
      */
     protected final AbstractClassInfo createClassInfo(final Token name,
                                               final String surroundingClass) {
+        final AbstractClassInfo result;
         final AbstractClassInfo classInfo = findClassAlias(name.getText());
-        if (classInfo != null) {
-            return new ClassAlias(name, classInfo);
+        if (classInfo == null) {
+            result = new RegularClass(name, surroundingClass, this);
+        }
+        else {
+            result = new ClassAlias(name, classInfo);
         }
-        return new RegularClass(name, surroundingClass, this);
+        return result;
     }
 
     /**
      * Looking if a given name is alias.
      * @param name given name
      * @return ClassInfo for alias if it exists, null otherwise
      */
     protected final AbstractClassInfo findClassAlias(final String name) {
         AbstractClassInfo classInfo = null;
         final Iterator<Map<String, AbstractClassInfo>> iterator = typeParams.descendingIterator();
         while (iterator.hasNext()) {
             final Map<String, AbstractClassInfo> paramMap = iterator.next();
             classInfo = paramMap.get(name);
             if (classInfo != null) {
                 break;
             }
         }
         return classInfo;
     }
 
     /**
      * Contains class's {@code Token}.
      */
     protected abstract static class AbstractClassInfo {
         /** {@code FullIdent} associated with this class. */
         private final Token name;
 
         /**
          * Creates new instance of class information object.
          * @param className token which represents class name.
          */
         protected AbstractClassInfo(final Token className) {
             if (className == null) {
                 throw new IllegalArgumentException(
                     "ClassInfo's name should be non-null");
             }
             name = className;
         }
 
         /**
          * @return {@code Class} associated with an object.
          */
         // -@cs[ForbidWildcardAsReturnType] The class is deprecated and will be removed soon.
         public abstract Class<?> getClazz();
 
         /**
          * Gets class name.
          * @return class name
          */
         public final Token getName() {
