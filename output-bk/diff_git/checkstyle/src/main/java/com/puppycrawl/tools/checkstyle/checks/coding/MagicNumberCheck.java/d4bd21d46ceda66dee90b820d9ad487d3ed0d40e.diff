diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java
index 1e3fa78c7..0a8960fef 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java
@@ -395,57 +395,58 @@ public class MagicNumberCheck extends AbstractCheck {
         if (list.length == 0) {
             ignoreNumbers = CommonUtils.EMPTY_DOUBLE_ARRAY;
         }
         else {
             ignoreNumbers = new double[list.length];
             System.arraycopy(list, 0, ignoreNumbers, 0, list.length);
             Arrays.sort(ignoreNumbers);
         }
     }
 
     /**
      * Set whether to ignore hashCode methods.
      * @param ignoreHashCodeMethod decide whether to ignore
      *     hash code methods
      */
     public void setIgnoreHashCodeMethod(boolean ignoreHashCodeMethod) {
         this.ignoreHashCodeMethod = ignoreHashCodeMethod;
     }
 
     /**
      * Set whether to ignore Annotations.
      * @param ignoreAnnotation decide whether to ignore annotations
      */
     public void setIgnoreAnnotation(boolean ignoreAnnotation) {
         this.ignoreAnnotation = ignoreAnnotation;
     }
 
     /**
      * Set whether to ignore magic numbers in field declaration.
      * @param ignoreFieldDeclaration decide whether to ignore magic numbers
      *     in field declaration
      */
     public void setIgnoreFieldDeclaration(boolean ignoreFieldDeclaration) {
         this.ignoreFieldDeclaration = ignoreFieldDeclaration;
     }
 
     /**
      * Determines if the given AST node has a parent node with given token type code.
      *
      * @param ast the AST from which to search for annotations
      * @param type the type code of parent token
      *
      * @return {@code true} if the AST node has a parent with given token type.
      */
     private static boolean isChildOf(DetailAST ast, int type) {
         boolean result = false;
         DetailAST node = ast;
         do {
             if (node.getType() == type) {
                 result = true;
+                break;
             }
             node = node.getParent();
-        } while (node != null && !result);
+        } while (node != null);
 
         return result;
     }
 }
