diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/FinalParametersCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/FinalParametersCheck.java
index b295865ad..33e2aa1ce 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/FinalParametersCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/FinalParametersCheck.java
@@ -106,101 +106,101 @@ public class FinalParametersCheck extends Check {
             TokenTypes.FOR_EACH_CLAUSE,
         };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return ArrayUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         // don't flag interfaces
         final DetailAST container = ast.getParent().getParent();
         if (container.getType() == TokenTypes.INTERFACE_DEF) {
             return;
         }
 
         if (ast.getType() == TokenTypes.LITERAL_CATCH) {
             visitCatch(ast);
         }
         else if (ast.getType() == TokenTypes.FOR_EACH_CLAUSE) {
             visitForEachClause(ast);
         }
         else {
             visitMethod(ast);
         }
     }
 
     /**
      * Checks parameters of the method or ctor.
      * @param method method or ctor to check.
      */
     private void visitMethod(final DetailAST method) {
         // exit on fast lane if there is nothing to check here
         if (!method.branchContains(TokenTypes.PARAMETER_DEF)) {
             return;
         }
 
         // ignore abstract method
         final DetailAST modifiers =
             method.findFirstToken(TokenTypes.MODIFIERS);
         if (modifiers.branchContains(TokenTypes.ABSTRACT)) {
             return;
         }
 
         // we can now be sure that there is at least one parameter
         final DetailAST parameters =
             method.findFirstToken(TokenTypes.PARAMETERS);
         DetailAST child = parameters.getFirstChild();
         while (child != null) {
-            // childs are PARAMETER_DEF and COMMA
+            // children are PARAMETER_DEF and COMMA
             if (child.getType() == TokenTypes.PARAMETER_DEF) {
                 checkParam(child);
             }
             child = child.getNextSibling();
         }
     }
 
     /**
      * Checks parameter of the catch block.
      * @param catchClause catch block to check.
      */
     private void visitCatch(final DetailAST catchClause) {
         checkParam(catchClause.findFirstToken(TokenTypes.PARAMETER_DEF));
     }
 
     /**
      * Checks parameter of the for each clause.
      * @param forEachClause for each clause to check.
      */
     private void visitForEachClause(final DetailAST forEachClause) {
         checkParam(forEachClause.findFirstToken(TokenTypes.VARIABLE_DEF));
     }
 
     /**
      * Checks if the given parameter is final.
      * @param param parameter to check.
      */
     private void checkParam(final DetailAST param) {
         if (!param.branchContains(TokenTypes.FINAL) && !isIgnoredParam(param)) {
             final DetailAST paramName = param.findFirstToken(TokenTypes.IDENT);
             final DetailAST firstNode = CheckUtils.getFirstNode(param);
             log(firstNode.getLineNo(), firstNode.getColumnNo(),
                 MSG_KEY, paramName.getText());
         }
     }
 
     /**
      * Checks for skip current param due to <b>ignorePrimitiveTypes</b> option.
      * @param paramDef {@link TokenTypes#PARAMETER_DEF PARAMETER_DEF}
      * @return true if param has to be skipped.
      */
     private boolean isIgnoredParam(DetailAST paramDef) {
         boolean result = false;
         if (ignorePrimitiveTypes) {
             final DetailAST parameterType = paramDef
                 .findFirstToken(TokenTypes.TYPE).getFirstChild();
             if (primitiveDataTypes.contains(parameterType.getType())) {
                 result = true;
             }
         }
