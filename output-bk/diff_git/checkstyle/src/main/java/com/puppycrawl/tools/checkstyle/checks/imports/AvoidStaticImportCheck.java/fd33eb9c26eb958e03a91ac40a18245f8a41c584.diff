diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheck.java
index 1a95cca9e..6f8f3466d 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheck.java
@@ -75,64 +75,65 @@ public class AvoidStaticImportCheck
     private String[] excludes = new String[0];
 
     @Override
     public int[] getDefaultTokens() {
         return new int[] {TokenTypes.STATIC_IMPORT};
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.STATIC_IMPORT};
     }
 
     /**
      * Sets the list of classes or static members to be exempt from the check.
      * @param excludes a list of fully-qualified class names/specific
      * static members where static imports are ok
      */
     public void setExcludes(String... excludes) {
         this.excludes = excludes.clone();
     }
 
     @Override
     public void visitToken(final DetailAST ast) {
         final DetailAST startingDot =
             ast.getFirstChild().getNextSibling();
         final FullIdent name = FullIdent.createFullIdent(startingDot);
 
         if (!isExempt(name.getText())) {
             log(startingDot.getLineNo(), MSG_KEY, name.getText());
         }
     }
 
     /**
      * Checks if a class or static member is exempt from known excludes.
      *
      * @param classOrStaticMember
      *                the class or static member
      * @return true if except false if not
      */
     private boolean isExempt(String classOrStaticMember) {
         for (String exclude : excludes) {
             if (classOrStaticMember.equals(exclude)) {
                 return true;
             }
             else if (exclude.endsWith(".*")) {
                 //this section allows explicit imports
                 //to be exempt when configured using
                 //a starred import
                 final String excludeMinusDotStar =
                     exclude.substring(0, exclude.length() - 2);
-                if (classOrStaticMember.startsWith(excludeMinusDotStar)) {
+                if (classOrStaticMember.startsWith(excludeMinusDotStar)
+                        && !classOrStaticMember.equals(excludeMinusDotStar)) {
                     final String member =
                         classOrStaticMember.substring(
                             excludeMinusDotStar.length() + 1);
                     //if it contains a dot then it is not a member but a package
                     if (member.indexOf('.') == -1) {
                         return true;
                     }
                 }
             }
         }
         return false;
     }
 }
