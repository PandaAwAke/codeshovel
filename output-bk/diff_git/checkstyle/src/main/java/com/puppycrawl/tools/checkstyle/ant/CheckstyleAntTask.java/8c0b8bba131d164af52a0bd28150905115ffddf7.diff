diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
index 38f0a5b35..b9d22a99c 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
@@ -68,101 +68,101 @@ public class CheckstyleAntTask extends Task {
     private static final String E_PLAIN = "plain";
 
     /** Suffix for time string. */
     private static final String TIME_SUFFIX = " ms.";
 
     /** Contains the filesets to process. */
     private final List<FileSet> fileSets = Lists.newArrayList();
 
     /** Contains the formatters to log to. */
     private final List<Formatter> formatters = Lists.newArrayList();
 
     /** Contains the Properties to override. */
     private final List<Property> overrideProps = Lists.newArrayList();
 
     /** Class path to locate class files. */
     private Path classpath;
 
     /** Name of file to check. */
     private String fileName;
 
     /** Config file containing configuration. */
     private String configLocation;
 
     /** Whether to fail build on violations. */
     private boolean failOnViolation = true;
 
     /** Property to set on violations. */
     private String failureProperty;
 
     /** The name of the properties file. */
     private File properties;
 
     /** The maximum number of errors that are tolerated. */
     private int maxErrors;
 
     /** The maximum number of warnings that are tolerated. */
     private int maxWarnings = Integer.MAX_VALUE;
 
     /**
      * Whether to omit ignored modules - some modules may log tove
      * their severity depending on their configuration (e.g. WriteTag) so
      * need to be included
      */
     private boolean omitIgnoredModules = true;
 
     ////////////////////////////////////////////////////////////////////////////
     // Setters for ANT specific attributes
     ////////////////////////////////////////////////////////////////////////////
 
     /**
-     * Tells this task to set the named property to "true" when there
+     * Tells this task to write failure message to the named property when there
      * is a violation.
      * @param propertyName the name of the property to set
      *                      in the event of an failure.
      */
     public void setFailureProperty(String propertyName) {
         failureProperty = propertyName;
     }
 
     /**
      * Sets flag - whether to fail if a violation is found.
      * @param fail whether to fail if a violation is found
      */
     public void setFailOnViolation(boolean fail) {
         failOnViolation = fail;
     }
 
     /**
      * Sets the maximum number of errors allowed. Default is 0.
      * @param maxErrors the maximum number of errors allowed.
      */
     public void setMaxErrors(int maxErrors) {
         this.maxErrors = maxErrors;
     }
 
     /**
      * Sets the maximum number of warnings allowed. Default is
      * {@link Integer#MAX_VALUE}.
      * @param maxWarnings the maximum number of warnings allowed.
      */
     public void setMaxWarnings(int maxWarnings) {
         this.maxWarnings = maxWarnings;
     }
 
     /**
      * Adds set of files (nested fileset attribute).
      * @param fileSet the file set to add
      */
     public void addFileset(FileSet fileSet) {
         fileSets.add(fileSet);
     }
 
     /**
      * Add a formatter.
      * @param formatter the formatter to add for logging.
      */
     public void addFormatter(Formatter formatter) {
         formatters.add(formatter);
     }
 
     /**
@@ -493,144 +493,139 @@ public class CheckstyleAntTask extends Task {
      * Returns the list of files (full path name) to process.
      * @return the list of files included via the filesets.
      */
     protected List<File> scanFileSets() {
         final List<File> list = Lists.newArrayList();
         if (fileName != null) {
             // oops we've got an additional one to process, don't
             // forget it. No sweat, it's fully resolved via the setter.
             log("Adding standalone file for audit", Project.MSG_VERBOSE);
             list.add(new File(fileName));
         }
         for (int i = 0; i < fileSets.size(); i++) {
             final FileSet fileSet = fileSets.get(i);
             final DirectoryScanner scanner = fileSet.getDirectoryScanner(getProject());
             scanner.scan();
 
             final String[] names = scanner.getIncludedFiles();
             log(i + ") Adding " + names.length + " files from directory "
                     + scanner.getBasedir(), Project.MSG_VERBOSE);
 
             for (String element : names) {
                 final String pathname = scanner.getBasedir() + File.separator
                         + element;
                 list.add(new File(pathname));
             }
         }
 
         return list;
     }
 
     /**
      * Poor mans enumeration for the formatter types.
      * @author Oliver Burn
      */
     public static class FormatterType extends EnumeratedAttribute {
         /** My possible values. */
         private static final String[] VALUES = {E_XML, E_PLAIN};
 
         @Override
         public String[] getValues() {
             return VALUES.clone();
         }
     }
 
     /**
      * Details about a formatter to be used.
      * @author Oliver Burn
      */
     public static class Formatter {
         /** The formatter type. */
-        private FormatterType formatterType;
+        private FormatterType type;
         /** The file to output to. */
         private File toFile;
         /** Whether or not the write to the named file. */
         private boolean useFile = true;
 
         /**
          * Set the type of the formatter.
          * @param type the type
          */
         public void setType(FormatterType type) {
-            final String val = type.getValue();
-            if (!E_XML.equals(val) && !E_PLAIN.equals(val)) {
-                throw new BuildException("Invalid formatter type: " + val);
-            }
-
-            formatterType = type;
+            this.type = type;
         }
 
         /**
          * Set the file to output to.
          * @param destination destination the file to output to
          */
         public void setTofile(File destination) {
             toFile = destination;
         }
 
         /**
          * Sets whether or not we write to a file if it is provided.
          * @param use whether not not to use provided file.
          */
         public void setUseFile(boolean use) {
             useFile = use;
         }
 
         /**
          * Creates a listener for the formatter.
          * @param task the task running
          * @return a listener
          * @throws IOException if an error occurs
          */
         public AuditListener createListener(Task task) throws IOException {
-            if (formatterType != null
-                    && E_XML.equals(formatterType.getValue())) {
+            if (type != null
+                    && E_XML.equals(type.getValue())) {
                 return createXmlLogger(task);
             }
             return createDefaultLogger(task);
         }
 
         /**
          * Creates default logger.
          * @param task the task to possibly log to
          * @return a DefaultLogger instance
          * @throws IOException if an error occurs
          */
         private AuditListener createDefaultLogger(Task task)
             throws IOException {
             if (toFile == null || !useFile) {
                 return new DefaultLogger(
                     new LogOutputStream(task, Project.MSG_DEBUG),
                     true, new LogOutputStream(task, Project.MSG_ERR), true);
             }
             final FileOutputStream infoStream = new FileOutputStream(toFile);
             return new DefaultLogger(infoStream, true, infoStream, false);
         }
 
         /**
          * Creates XML logger.
          * @param task the task to possibly log to
          * @return an XMLLogger instance
          * @throws IOException if an error occurs
          */
         private AuditListener createXmlLogger(Task task) throws IOException {
             if (toFile == null || !useFile) {
                 return new XMLLogger(new LogOutputStream(task,
                         Project.MSG_INFO), true);
             }
             return new XMLLogger(new FileOutputStream(toFile), true);
         }
     }
 
     /**
      * Represents a property that consists of a key and value.
      */
     public static class Property {
         /** The property key. */
         private String key;
         /** The property value. */
         private String value;
 
         /**
          * Gets key.
          * @return the property key
          */
