diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
index 76e166656..a15bb3aa3 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
@@ -96,114 +96,110 @@ public class ParseTreeInfoPanel extends JPanel {
         add(p, BorderLayout.PAGE_END);
         p.add(fileSelectionButton);
         p.add(reloadButton);
 
         try {
             new FileDrop(sp, new FileDropListener(sp));
         }
         catch (final TooManyListenersException ignored) {
             showErrorDialog(null, "Cannot initialize Drag and Drop support");
         }
 
     }
 
     public void openAst(DetailAST parseTree) {
         parseTreeModel.setParseTree(parseTree);
         reloadAction.setEnabled(true);
 
         // clear for each new file
         clearLinesToPosition();
         // starts line counting at 1
         addLineToPosition(0);
         // insert the contents of the file to the text area
 
         // clean the text area before inserting the lines of the new file
         if (!textArea.getText().isEmpty()) {
             textArea.replaceRange("", 0, textArea.getText().length());
         }
 
         // move back to the top of the file
         textArea.moveCaretPosition(0);
     }
 
     public void openFile(File file, final Component parent) {
         if (file != null) {
             try {
                 Main.getFrame().setTitle("Checkstyle : " + file.getName());
                 final FileText text = new FileText(file.getAbsoluteFile(),
                                                    getEncoding());
                 final DetailAST parseTree = parseFile(text);
                 parseTreeModel.setParseTree(parseTree);
                 currentFile = file;
                 lastDirectory = file.getParentFile();
                 reloadAction.setEnabled(true);
 
                 final String[] sourceLines = text.toLinesArray();
 
                 // clear for each new file
                 clearLinesToPosition();
                 // starts line counting at 1
                 addLineToPosition(0);
-                // insert the contents of the file to the text area
-                for (String element : sourceLines) {
-                    addLineToPosition(textArea.getText().length());
-                    textArea.append(element + System.lineSeparator());
-                }
 
                 //clean the text area before inserting the lines of the new file
                 if (!textArea.getText().isEmpty()) {
                     textArea.replaceRange("", 0, textArea.getText()
                             .length());
                 }
 
                 // insert the contents of the file to the text area
                 for (final String element : sourceLines) {
+                    addLineToPosition(textArea.getText().length());
                     textArea.append(element + System.lineSeparator());
                 }
 
                 // move back to the top of the file
                 textArea.moveCaretPosition(0);
             }
             catch (final IOException | ANTLRException ex) {
                 showErrorDialog(
                         parent,
                         "Could not parse" + file + ": " + ex.getMessage());
             }
         }
     }
 
     /**
      * Parses a file and returns the parse tree.
      * @param text the file to parse
      * @return the root node of the parse tree
      * @throws ANTLRException if the file is not a Java source
      */
     private static DetailAST parseFile(FileText text)
         throws ANTLRException {
         final FileContents contents = new FileContents(text);
         return TreeWalker.parse(contents);
     }
 
     /**
      * Returns the configured file encoding.
      * This can be set using the {@code file.encoding} system property.
      * It defaults to UTF-8.
      * @return the configured file encoding
      */
     private static String getEncoding() {
         return System.getProperty("file.encoding", "UTF-8");
     }
 
     private static void showErrorDialog(final Component parent, final String msg) {
         final Runnable showError = new FrameShower(parent, msg);
         SwingUtilities.invokeLater(showError);
     }
 
     private void addLineToPosition(int value) {
         linesToPosition.add(value);
     }
 
     private void clearLinesToPosition() {
         linesToPosition.clear();
     }
 
     /**
