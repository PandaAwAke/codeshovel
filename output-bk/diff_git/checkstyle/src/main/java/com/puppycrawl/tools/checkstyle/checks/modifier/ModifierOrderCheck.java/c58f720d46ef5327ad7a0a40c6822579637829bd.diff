diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java
index 57178121b..32a31115f 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java
@@ -46,111 +46,111 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
   <li><span class="code">static</span></li>
   <li><span class="code">final</span></li>
   <li><span class="code">transient</span></li>
   <li><span class="code">volatile</span></li>
 
   <li><span class="code">synchronized</span></li>
   <li><span class="code">native</span></li>
   <li><span class="code">strictfp</span></li>
 </ol>
  * In additional, modifiers are checked to ensure all annotations
  * are declared before all other modifiers.
  * <p>
  * Rationale: Code is easier to read if everybody follows
  * a standard.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="ModifierOrder"/&gt;
  * </pre>
  * @author Lars KÃ¼hne
  */
 @StatelessCheck
 public class ModifierOrderCheck
     extends AbstractCheck {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_ANNOTATION_ORDER = "annotation.order";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_MODIFIER_ORDER = "mod.order";
 
     /**
      * The order of modifiers as suggested in sections 8.1.1,
      * 8.3.1 and 8.4.3 of the JLS.
      */
     private static final String[] JLS_ORDER = {
         "public", "protected", "private", "abstract", "default", "static",
         "final", "transient", "volatile", "synchronized", "native", "strictfp",
     };
 
     @Override
     public int[] getDefaultTokens() {
-        return getAcceptableTokens();
+        return getRequiredTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
-        return new int[] {TokenTypes.MODIFIERS};
+        return getRequiredTokens();
     }
 
     @Override
     public int[] getRequiredTokens() {
-        return getAcceptableTokens();
+        return new int[] {TokenTypes.MODIFIERS};
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final List<DetailAST> mods = new ArrayList<>();
         DetailAST modifier = ast.getFirstChild();
         while (modifier != null) {
             mods.add(modifier);
             modifier = modifier.getNextSibling();
         }
 
         if (!mods.isEmpty()) {
             final DetailAST error = checkOrderSuggestedByJls(mods);
             if (error != null) {
                 if (error.getType() == TokenTypes.ANNOTATION) {
                     log(error.getLineNo(), error.getColumnNo(),
                             MSG_ANNOTATION_ORDER,
                              error.getFirstChild().getText()
                              + error.getFirstChild().getNextSibling()
                                 .getText());
                 }
                 else {
                     log(error.getLineNo(), error.getColumnNo(),
                             MSG_MODIFIER_ORDER, error.getText());
                 }
             }
         }
     }
 
     /**
      * Checks if the modifiers were added in the order suggested
      * in the Java language specification.
      *
      * @param modifiers list of modifier AST tokens
      * @return null if the order is correct, otherwise returns the offending
      *     modifier AST.
      */
     private static DetailAST checkOrderSuggestedByJls(List<DetailAST> modifiers) {
         final Iterator<DetailAST> iterator = modifiers.iterator();
 
         //Speed past all initial annotations
         DetailAST modifier = skipAnnotations(iterator);
 
         DetailAST offendingModifier = null;
 
         //All modifiers are annotations, no problem
         if (modifier.getType() != TokenTypes.ANNOTATION) {
             int index = 0;
 
             while (modifier != null
