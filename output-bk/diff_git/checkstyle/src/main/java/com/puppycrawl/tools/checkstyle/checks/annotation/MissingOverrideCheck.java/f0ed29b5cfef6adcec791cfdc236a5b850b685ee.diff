diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java
index 0efc580b3..054bab99a 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java
@@ -113,91 +113,91 @@ public final class MissingOverrideCheck extends AbstractCheck {
      * <p>
      * In Java 5, this check could flag code that is not valid for the Override
      * annotation even though it is a proper override. See the class
      * documentation for more information.
      * </p>
      *
      * <p>
      * Set this to true to turn on Java 5 compatibility mode. Set this to
      * false to turn off Java 5 compatibility mode.
      * </p>
      *
      * @param compatibility compatibility or not
      */
     public void setJavaFiveCompatibility(final boolean compatibility) {
         javaFiveCompatibility = compatibility;
     }
 
     @Override
     public int[] getDefaultTokens() {
         return getRequiredTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return getRequiredTokens();
     }
 
     @Override
     public int[] getRequiredTokens() {
         return new int[]
         {TokenTypes.METHOD_DEF, };
     }
 
     // -@cs[CyclomaticComplexity] Too complex to break apart.
     @Override
     public void visitToken(final DetailAST ast) {
         final TextBlock javadoc =
             getFileContents().getJavadocBefore(ast.getLineNo());
 
         final boolean containsTag = containsJavadocTag(javadoc);
         if (containsTag && !JavadocTagInfo.INHERIT_DOC.isValidOn(ast)) {
             log(ast.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,
                 JavadocTagInfo.INHERIT_DOC.getText());
         }
         else {
             boolean check = true;
 
             if (javaFiveCompatibility) {
                 final DetailAST defOrNew = ast.getParent().getParent();
 
-                if (defOrNew.branchContains(TokenTypes.EXTENDS_CLAUSE)
-                    || defOrNew.branchContains(TokenTypes.IMPLEMENTS_CLAUSE)
+                if (defOrNew.findFirstToken(TokenTypes.EXTENDS_CLAUSE) != null
+                    || defOrNew.findFirstToken(TokenTypes.IMPLEMENTS_CLAUSE) != null
                     || defOrNew.getType() == TokenTypes.LITERAL_NEW) {
                     check = false;
                 }
             }
 
             if (check
                 && containsTag
                 && !AnnotationUtility.containsAnnotation(ast, OVERRIDE)
                 && !AnnotationUtility.containsAnnotation(ast, FQ_OVERRIDE)) {
                 log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);
             }
         }
     }
 
     /**
      * Checks to see if the text block contains a inheritDoc tag.
      *
      * @param javadoc the javadoc of the AST
      * @return true if contains the tag
      */
     private static boolean containsJavadocTag(final TextBlock javadoc) {
         boolean javadocTag = false;
 
         if (javadoc != null) {
             final String[] lines = javadoc.getText();
 
             for (final String line : lines) {
                 final Matcher matchInheritDoc =
                     MATCH_INHERIT_DOC.matcher(line);
 
                 if (matchInheritDoc.find()) {
                     javadocTag = true;
                     break;
                 }
             }
         }
         return javadocTag;
     }
 }
