diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java
index dcf88a357..b6e40cc5e 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java
@@ -45,109 +45,109 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 @StatelessCheck
 public final class AbstractClassNameCheck extends AbstractCheck {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_ILLEGAL_ABSTRACT_CLASS_NAME = "illegal.abstract.class.name";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_NO_ABSTRACT_CLASS_MODIFIER = "no.abstract.class.modifier";
 
     /** Whether to ignore checking the modifier. */
     private boolean ignoreModifier;
 
     /** Whether to ignore checking the name. */
     private boolean ignoreName;
 
     /** The regexp to match against. */
     private Pattern format = Pattern.compile("^Abstract.+$");
 
     /**
      * Whether to ignore checking for the {@code abstract} modifier.
      * @param value new value
      */
     public void setIgnoreModifier(boolean value) {
         ignoreModifier = value;
     }
 
     /**
      * Whether to ignore checking the name.
      * @param value new value.
      */
     public void setIgnoreName(boolean value) {
         ignoreName = value;
     }
 
     /**
      * Set the format for the specified regular expression.
      * @param pattern the new pattern
      */
     public void setFormat(Pattern pattern) {
         format = pattern;
     }
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.CLASS_DEF};
+        return getRequiredTokens();
     }
 
     @Override
     public int[] getRequiredTokens() {
         return new int[] {TokenTypes.CLASS_DEF};
     }
 
     @Override
     public int[] getAcceptableTokens() {
-        return new int[] {TokenTypes.CLASS_DEF};
+        return getRequiredTokens();
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         visitClassDef(ast);
     }
 
     /**
      * Checks class definition.
      * @param ast class definition for check.
      */
     private void visitClassDef(DetailAST ast) {
         final String className =
             ast.findFirstToken(TokenTypes.IDENT).getText();
         if (isAbstract(ast)) {
             // if class has abstract modifier
             if (!ignoreName && !isMatchingClassName(className)) {
                 log(ast.getLineNo(), ast.getColumnNo(),
                     MSG_ILLEGAL_ABSTRACT_CLASS_NAME, className, format.pattern());
             }
         }
         else if (!ignoreModifier && isMatchingClassName(className)) {
             log(ast.getLineNo(), ast.getColumnNo(),
                 MSG_NO_ABSTRACT_CLASS_MODIFIER, className);
         }
     }
 
     /**
      * Checks if declared class is abstract or not.
      * @param ast class definition for check.
      * @return true if a given class declared as abstract.
      */
     private static boolean isAbstract(DetailAST ast) {
         final DetailAST abstractAST = ast.findFirstToken(TokenTypes.MODIFIERS)
             .findFirstToken(TokenTypes.ABSTRACT);
 
         return abstractAST != null;
     }
 
     /**
      * Returns true if class name matches format of abstract class names.
      * @param className class name for check.
      * @return true if class name matches format of abstract class names.
      */
     private boolean isMatchingClassName(String className) {
         return format.matcher(className).find();
     }
 }
