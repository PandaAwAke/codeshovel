diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java b/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java
index 97edaa552..221c34c46 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java
@@ -48,116 +48,116 @@ public class DefaultLogger
     /** close info stream after use */
     private final boolean closeInfo;
 
     /** where to write error messages **/
     private final PrintWriter errorWriter;
     /** close error stream after use */
     private final boolean closeError;
 
     /**
      * Creates a new <code>DefaultLogger</code> instance.
      * @param os where to log infos and errors
      * @param closeStreamsAfterUse if oS should be closed in auditFinished()
      */
     public DefaultLogger(OutputStream os, boolean closeStreamsAfterUse)
     {
         // no need to close oS twice
         this(os, closeStreamsAfterUse, os, false);
     }
 
     /**
      * Creates a new <code>DefaultLogger</code> instance.
      *
      * @param infoStream the <code>OutputStream</code> for info messages
      * @param closeInfoAfterUse auditFinished should close infoStream
      * @param errorStream the <code>OutputStream</code> for error messages
      * @param closeErrorAfterUse auditFinished should close errorStream
      */
     public DefaultLogger(OutputStream infoStream,
                          boolean closeInfoAfterUse,
                          OutputStream errorStream,
                          boolean closeErrorAfterUse)
     {
         closeInfo = closeInfoAfterUse;
         closeError = closeErrorAfterUse;
         infoWriter = new PrintWriter(infoStream);
         errorWriter = (infoStream == errorStream)
             ? infoWriter
             : new PrintWriter(errorStream);
     }
 
     /**
      * Print an Emacs compliant line on the error stream.
      * If the column number is non zero, then also display it.
      * @param evt {@inheritDoc}
      * @see AuditListener
      **/
     @Override
     public void addError(AuditEvent evt)
     {
         final SeverityLevel severityLevel = evt.getSeverityLevel();
-        if (!SeverityLevel.IGNORE.equals(severityLevel)) {
+        if (SeverityLevel.IGNORE != severityLevel) {
 
             final String fileName = evt.getFileName();
             final String message = evt.getMessage();
 
             // avoid StringBuffer.expandCapacity
             final int bufLen = fileName.length() + message.length()
                 + BUFFER_CUSHION;
             final StringBuilder sb = new StringBuilder(bufLen);
 
             sb.append(fileName);
             sb.append(':').append(evt.getLine());
             if (evt.getColumn() > 0) {
                 sb.append(':').append(evt.getColumn());
             }
-            if (SeverityLevel.WARNING.equals(severityLevel)) {
+            if (SeverityLevel.WARNING == severityLevel) {
                 sb.append(": warning");
             }
             sb.append(": ").append(message);
             errorWriter.println(sb.toString());
         }
     }
 
     /** {@inheritDoc} */
     @Override
     public void addException(AuditEvent evt, Throwable throwable)
     {
         synchronized (errorWriter) {
             errorWriter.println("Error auditing " + evt.getFileName());
             throwable.printStackTrace(errorWriter);
         }
     }
 
     /** {@inheritDoc} */
     @Override
     public void auditStarted(AuditEvent evt)
     {
         infoWriter.println("Starting audit...");
     }
 
     /** {@inheritDoc} */
     @Override
     public void fileFinished(AuditEvent evt)
     {
     }
 
     /** {@inheritDoc} */
     @Override
     public void fileStarted(AuditEvent evt)
     {
     }
 
     /** {@inheritDoc} */
     @Override
     public void auditFinished(AuditEvent evt)
     {
         infoWriter.println("Audit done.");
         closeStreams();
     }
 
     /**
      * Flushes the output streams and closes them if needed.
      */
     protected void closeStreams()
     {
         infoWriter.flush();
