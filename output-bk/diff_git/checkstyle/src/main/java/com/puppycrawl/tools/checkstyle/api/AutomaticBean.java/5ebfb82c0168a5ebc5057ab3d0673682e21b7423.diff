diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
index 92260dd73..2d13e8c78 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
@@ -91,101 +91,101 @@ public class AutomaticBean
             int[].class);
         cub.register(new LongConverter(), Long.TYPE);
         cub.register(new LongConverter(), Long.class);
         cub.register(new ArrayConverter(long[].class, new LongConverter()),
             long[].class);
         cub.register(new ShortConverter(), Short.TYPE);
         cub.register(new ShortConverter(), Short.class);
         cub.register(new ArrayConverter(short[].class, new ShortConverter()),
             short[].class);
         cub.register(new RelaxedStringArrayConverter(), String[].class);
 
         // BigDecimal, BigInteger, Class, Date, String, Time, TimeStamp
         // do not use defaults in the default configuration of ConvertUtilsBean
 
         return new BeanUtilsBean(cub, new PropertyUtilsBean());
     }
 
     /**
      * Implements the Configurable interface using bean introspection.
      *
      * Subclasses are allowed to add behaviour. After the bean
      * based setup has completed first the method
      * {@link #finishLocalSetup finishLocalSetup}
      * is called to allow completion of the bean's local setup,
      * after that the method {@link #setupChild setupChild}
      * is called for each {@link Configuration#getChildren child Configuration}
      * of <code>configuration</code>.
      *
      * @param configuration {@inheritDoc}
      * @throws CheckstyleException {@inheritDoc}
      * @see Configurable
      */
     @Override
     public final void configure(Configuration configuration)
         throws CheckstyleException {
         this.configuration = configuration;
 
         final BeanUtilsBean beanUtils = createBeanUtilsBean();
 
         final String[] attributes = configuration.getAttributeNames();
 
         for (final String key : attributes) {
             final String value = configuration.getAttribute(key);
 
             try {
                 // BeanUtilsBean.copyProperties silently ignores missing setters
                 // for key, so we have to go through great lengths here to
                 // figure out if the bean property really exists.
                 final PropertyDescriptor pd =
                     PropertyUtils.getPropertyDescriptor(this, key);
-                if (pd == null || pd.getWriteMethod() == null) {
+                if (pd == null) {
                     throw new CheckstyleException(
                         "Property '" + key + "' in module "
                         + configuration.getName()
                         + " does not exist, please check the documentation");
                 }
 
                 // finally we can set the bean property
                 beanUtils.copyProperty(this, key, value);
             }
             catch (final InvocationTargetException e) {
                 throw new CheckstyleException(
                     "Cannot set property '" + key + "' in module "
                     + configuration.getName() + " to '" + value
                     + "': " + e.getTargetException().getMessage(), e);
             }
             catch (final IllegalAccessException | NoSuchMethodException e) {
                 throw new CheckstyleException(
                     "cannot access " + key + " in "
                     + this.getClass().getName(), e);
             }
             catch (final IllegalArgumentException | ConversionException e) {
                 throw new CheckstyleException(
                     "illegal value '" + value + "' for property '" + key
                     + "' of module " + configuration.getName(), e);
             }
         }
 
         finishLocalSetup();
 
         final Configuration[] childConfigs = configuration.getChildren();
         for (final Configuration childConfig : childConfigs) {
             setupChild(childConfig);
         }
     }
 
     /**
      * Implements the Contextualizable interface using bean introspection.
      * @param context {@inheritDoc}
      * @throws CheckstyleException {@inheritDoc}
      * @see Contextualizable
      */
     @Override
     public final void contextualize(Context context)
         throws CheckstyleException {
         final BeanUtilsBean beanUtils = createBeanUtilsBean();
 
         final Collection<String> attributes = context.getAttributeNames();
 
         for (final String key : attributes) {
             final Object value = context.get(key);
@@ -206,70 +206,65 @@ public class AutomaticBean
             catch (final IllegalArgumentException | ConversionException e) {
                 throw new CheckstyleException(
                     "illegal value '" + value + "' for property '" + key
                     + "' of bean " + this.getClass().getName(), e);
             }
         }
     }
 
     /**
      * Returns the configuration that was used to configure this component.
      * @return the configuration that was used to configure this component.
      */
     protected final Configuration getConfiguration() {
         return configuration;
     }
 
     /**
      * Provides a hook to finish the part of this component's setup that
      * was not handled by the bean introspection.
      * <p>
      * The default implementation does nothing.
      * </p>
      * @throws CheckstyleException if there is a configuration error.
      */
     protected void finishLocalSetup() throws CheckstyleException {
         // No code by default, should be overridden only by demand at subclasses
     }
 
     /**
      * Called by configure() for every child of this component's Configuration.
      * <p>
      * The default implementation does nothing.
      * </p>
      * @param childConf a child of this component's Configuration
      * @throws CheckstyleException if there is a configuration error.
      * @see Configuration#getChildren
      */
     protected void setupChild(Configuration childConf)
         throws CheckstyleException {
         // No code by default, should be overridden only by demand at subclasses
     }
 
     /**
      * A converter that does not care whether the array elements contain String
      * characters like '*' or '_'. The normal ArrayConverter class has problems
      * with this characters.
      */
     private static class RelaxedStringArrayConverter implements Converter {
         /** {@inheritDoc} */
         @Override
-        public Object convert(@SuppressWarnings("rawtypes") Class type,
-            Object value) {
-            if (null == type) {
-                throw new ConversionException("Cannot convert from null.");
-            }
-
+        public Object convert(@SuppressWarnings("rawtypes") Class type, Object value) {
             // Convert to a String and trim it for the tokenizer.
             final StringTokenizer st = new StringTokenizer(
                 value.toString().trim(), ",");
             final List<String> result = Lists.newArrayList();
 
             while (st.hasMoreTokens()) {
                 final String token = st.nextToken();
                 result.add(token.trim());
             }
 
             return result.toArray(new String[result.size()]);
         }
     }
 }
