diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java
index d31c52586..e9ce934e4 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java
@@ -65,127 +65,127 @@ public final class MethodCountCheck extends AbstractCheck {
     public static final String MSG_PUBLIC_METHODS = "too.many.publicMethods";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_MANY_METHODS = "too.many.methods";
 
     /** Default maximum number of methods. */
     private static final int DEFAULT_MAX_METHODS = 100;
 
     /** Maintains stack of counters, to support inner types. */
     private final Deque<MethodCounter> counters = new ArrayDeque<>();
 
     /** Maximum private methods. */
     private int maxPrivate = DEFAULT_MAX_METHODS;
     /** Maximum package methods. */
     private int maxPackage = DEFAULT_MAX_METHODS;
     /** Maximum protected methods. */
     private int maxProtected = DEFAULT_MAX_METHODS;
     /** Maximum public methods. */
     private int maxPublic = DEFAULT_MAX_METHODS;
     /** Maximum total number of methods. */
     private int maxTotal = DEFAULT_MAX_METHODS;
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.CLASS_DEF,
             TokenTypes.ENUM_CONSTANT_DEF,
             TokenTypes.ENUM_DEF,
             TokenTypes.INTERFACE_DEF,
             TokenTypes.ANNOTATION_DEF,
             TokenTypes.METHOD_DEF,
         };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return new int[] {TokenTypes.METHOD_DEF};
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         if (ast.getType() == TokenTypes.METHOD_DEF) {
-            if (isInLastestScopeDefinition(ast)) {
+            if (isInLatestScopeDefinition(ast)) {
                 raiseCounter(ast);
             }
         }
         else {
             counters.push(new MethodCounter(ast));
         }
     }
 
     @Override
     public void leaveToken(DetailAST ast) {
         if (ast.getType() != TokenTypes.METHOD_DEF) {
             final MethodCounter counter = counters.pop();
 
             checkCounters(counter, ast);
         }
     }
 
     /**
      * Checks if there is a scope definition to check and that the method is found inside that scope
      * (class, enum, etc.).
      * @param methodDef
-     *        The method to analzye.
+     *        The method to analyze.
      * @return {@code true} if the method is part of the latest scope definition and should be
      *         counted.
      */
-    private boolean isInLastestScopeDefinition(DetailAST methodDef) {
+    private boolean isInLatestScopeDefinition(DetailAST methodDef) {
         boolean result = false;
 
         if (!counters.isEmpty()) {
             final DetailAST latestDefinition = counters.peek().getScopeDefinition();
 
             result = latestDefinition == methodDef.getParent().getParent();
         }
 
         return result;
     }
 
     /**
      * Determine the visibility modifier and raise the corresponding counter.
      * @param method
      *            The method-subtree from the AbstractSyntaxTree.
      */
     private void raiseCounter(DetailAST method) {
         final MethodCounter actualCounter = counters.peek();
         final DetailAST temp = method.findFirstToken(TokenTypes.MODIFIERS);
         final Scope scope = ScopeUtils.getScopeFromMods(temp);
         actualCounter.increment(scope);
     }
 
     /**
      * Check the counters and report violations.
      * @param counter the method counters to check
      * @param ast to report errors against.
      */
     private void checkCounters(MethodCounter counter, DetailAST ast) {
         checkMax(maxPrivate, counter.value(Scope.PRIVATE),
                  MSG_PRIVATE_METHODS, ast);
         checkMax(maxPackage, counter.value(Scope.PACKAGE),
                  MSG_PACKAGE_METHODS, ast);
         checkMax(maxProtected, counter.value(Scope.PROTECTED),
                  MSG_PROTECTED_METHODS, ast);
         checkMax(maxPublic, counter.value(Scope.PUBLIC),
                  MSG_PUBLIC_METHODS, ast);
         checkMax(maxTotal, counter.getTotal(), MSG_MANY_METHODS, ast);
     }
 
     /**
      * Utility for reporting if a maximum has been exceeded.
      * @param max the maximum allowed value
      * @param value the actual value
      * @param msg the message to log. Takes two arguments of value and maximum.
      * @param ast the AST to associate with the message.
      */
     private void checkMax(int max, int value, String msg, DetailAST ast) {
         if (max < value) {
             log(ast.getLineNo(), msg, value, max);
