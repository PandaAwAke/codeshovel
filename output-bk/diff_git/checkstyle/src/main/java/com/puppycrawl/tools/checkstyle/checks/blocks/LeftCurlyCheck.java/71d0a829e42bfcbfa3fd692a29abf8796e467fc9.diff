diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
index 93ed56fb4..3d5aac685 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
@@ -129,241 +129,236 @@ public class LeftCurlyCheck
     @Override
     public int[] getDefaultTokens() {
         return new int[] {
             TokenTypes.INTERFACE_DEF,
             TokenTypes.CLASS_DEF,
             TokenTypes.ANNOTATION_DEF,
             TokenTypes.ENUM_DEF,
             TokenTypes.CTOR_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.ENUM_CONSTANT_DEF,
             TokenTypes.LITERAL_WHILE,
             TokenTypes.LITERAL_TRY,
             TokenTypes.LITERAL_CATCH,
             TokenTypes.LITERAL_FINALLY,
             TokenTypes.LITERAL_SYNCHRONIZED,
             TokenTypes.LITERAL_SWITCH,
             TokenTypes.LITERAL_DO,
             TokenTypes.LITERAL_IF,
             TokenTypes.LITERAL_ELSE,
             TokenTypes.LITERAL_FOR,
             TokenTypes.STATIC_INIT,
         };
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.INTERFACE_DEF,
             TokenTypes.CLASS_DEF,
             TokenTypes.ANNOTATION_DEF,
             TokenTypes.ENUM_DEF,
             TokenTypes.CTOR_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.ENUM_CONSTANT_DEF,
             TokenTypes.LITERAL_WHILE,
             TokenTypes.LITERAL_TRY,
             TokenTypes.LITERAL_CATCH,
             TokenTypes.LITERAL_FINALLY,
             TokenTypes.LITERAL_SYNCHRONIZED,
             TokenTypes.LITERAL_SWITCH,
             TokenTypes.LITERAL_DO,
             TokenTypes.LITERAL_IF,
             TokenTypes.LITERAL_ELSE,
             TokenTypes.LITERAL_FOR,
             TokenTypes.STATIC_INIT,
         };
     }
 
     @Override
     public void visitToken(DetailAST ast) {
-        final DetailAST startToken;
-        final DetailAST brace;
+        DetailAST startToken = null;
+        DetailAST brace = null;
 
         switch (ast.getType()) {
-            case TokenTypes.CTOR_DEF :
-            case TokenTypes.METHOD_DEF :
+            case TokenTypes.CTOR_DEF:
+            case TokenTypes.METHOD_DEF:
                 startToken = skipAnnotationOnlyLines(ast);
                 brace = ast.findFirstToken(TokenTypes.SLIST);
                 break;
-
-            case TokenTypes.INTERFACE_DEF :
-            case TokenTypes.CLASS_DEF :
-            case TokenTypes.ANNOTATION_DEF :
-            case TokenTypes.ENUM_DEF :
-            case TokenTypes.ENUM_CONSTANT_DEF :
+            case TokenTypes.INTERFACE_DEF:
+            case TokenTypes.CLASS_DEF:
+            case TokenTypes.ANNOTATION_DEF:
+            case TokenTypes.ENUM_DEF:
+            case TokenTypes.ENUM_CONSTANT_DEF:
                 startToken = skipAnnotationOnlyLines(ast);
                 final DetailAST objBlock = ast.findFirstToken(TokenTypes.OBJBLOCK);
                 brace = objBlock == null
-                    ? null
-                    : objBlock.getFirstChild();
+                        ? null
+                        : objBlock.getFirstChild();
                 break;
-
             case TokenTypes.LITERAL_WHILE:
             case TokenTypes.LITERAL_CATCH:
             case TokenTypes.LITERAL_SYNCHRONIZED:
             case TokenTypes.LITERAL_FOR:
             case TokenTypes.LITERAL_TRY:
             case TokenTypes.LITERAL_FINALLY:
             case TokenTypes.LITERAL_DO:
-            case TokenTypes.LITERAL_IF :
-            case TokenTypes.STATIC_INIT :
+            case TokenTypes.LITERAL_IF:
+            case TokenTypes.STATIC_INIT:
                 startToken = ast;
                 brace = ast.findFirstToken(TokenTypes.SLIST);
                 break;
-
-            case TokenTypes.LITERAL_ELSE :
+            case TokenTypes.LITERAL_ELSE:
                 startToken = ast;
                 final DetailAST candidate = ast.getFirstChild();
-                brace =
-                    candidate.getType() == TokenTypes.SLIST
-                    ? candidate
-                    : null; // silently ignore
+                brace = candidate.getType() == TokenTypes.SLIST
+                        ? candidate
+                        : null; // silently ignore
                 break;
+            default:
+//                ATTENTION! We have default here, but we expect case TokenTypes.METHOD_DEF,
+//                TokenTypes.LITERAL_FOR, TokenTypes.LITERAL_WHILE, TokenTypes.LITERAL_DO only.
+//                It has been done to improve coverage to 100%. I couldn't replace it with
+//                if-else-if block because code was ugly and didn't pass pmd check.
 
-            case TokenTypes.LITERAL_SWITCH :
                 startToken = ast;
                 brace = ast.findFirstToken(TokenTypes.LCURLY);
                 break;
-
-            default :
-                startToken = null;
-                brace = null;
         }
 
-        if (brace != null && startToken != null) {
+        if (brace != null) {
             verifyBrace(brace, startToken);
         }
     }
 
     /**
      * Skip lines that only contain <code>TokenTypes.ANNOTATION</code>s.
      * If the received <code>DetailAST</code>
      * has annotations within its modifiers then first token on the line
      * of the first token afer all annotations is return. This might be
      * an annotation.
      * Otherwise, the received <code>DetailAST</code> is returned.
      * @param ast <code>DetailAST</code>.
      * @return <code>DetailAST</code>.
      */
     private static DetailAST skipAnnotationOnlyLines(DetailAST ast) {
         final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
         if (modifiers == null) {
             return ast;
         }
         DetailAST lastAnnot = findLastAnnotation(modifiers);
         if (lastAnnot == null) {
             // There are no annotations.
             return ast;
         }
         final DetailAST tokenAfterLast = lastAnnot.getNextSibling() != null
                                        ? lastAnnot.getNextSibling()
                                        : modifiers.getNextSibling();
         if (tokenAfterLast.getLineNo() > lastAnnot.getLineNo()) {
             return tokenAfterLast;
         }
         final int lastAnnotLineNumber = lastAnnot.getLineNo();
         while (lastAnnot.getPreviousSibling() != null
                && lastAnnot.getPreviousSibling().getLineNo()
                     == lastAnnotLineNumber) {
             lastAnnot = lastAnnot.getPreviousSibling();
         }
         return lastAnnot;
     }
 
     /**
      * Find the last token of type <code>TokenTypes.ANNOTATION</code>
      * under the given set of modifiers.
      * @param modifiers <code>DetailAST</code>.
      * @return <code>DetailAST</code> or null if there are no annotations.
      */
     private static DetailAST findLastAnnotation(DetailAST modifiers) {
         DetailAST annot = modifiers.findFirstToken(TokenTypes.ANNOTATION);
         while (annot != null && annot.getNextSibling() != null
                && annot.getNextSibling().getType() == TokenTypes.ANNOTATION) {
             annot = annot.getNextSibling();
         }
         return annot;
     }
 
     /**
      * Verifies that a specified left curly brace is placed correctly
      * according to policy.
      * @param brace token for left curly brace
      * @param startToken token for start of expression
      */
     private void verifyBrace(final DetailAST brace,
                              final DetailAST startToken) {
         final String braceLine = getLine(brace.getLineNo() - 1);
 
         // calculate the previous line length without trailing whitespace. Need
         // to handle the case where there is no previous line, cause the line
         // being check is the first line in the file.
         final int prevLineLen = brace.getLineNo() == 1
             ? maxLineLength
             : Utils.lengthMinusTrailingWhitespace(getLine(brace.getLineNo() - 2));
 
         // Check for being told to ignore, or have '{}' which is a special case
         if (braceLine.length() <= brace.getColumnNo() + 1
                 || braceLine.charAt(brace.getColumnNo() + 1) != '}') {
             if (getAbstractOption() == LeftCurlyOption.NL) {
                 if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {
                     log(brace.getLineNo(), brace.getColumnNo(),
                         MSG_KEY_LINE_NEW, "{");
                 }
             }
             else if (getAbstractOption() == LeftCurlyOption.EOL) {
 
                 validateEol(brace, braceLine, prevLineLen);
             }
-            else if (getAbstractOption() == LeftCurlyOption.NLOW
-                    && startToken.getLineNo() != brace.getLineNo()) {
+            else if (startToken.getLineNo() != brace.getLineNo()) {
 
                 validateNewLinePosion(brace, startToken, braceLine, prevLineLen);
 
             }
         }
     }
 
     /**
      * validate EOL case
      * @param brace brase AST
      * @param braceLine line content
      * @param prevLineLen previous line length
      */
     private void validateEol(DetailAST brace, String braceLine, int prevLineLen) {
         if (Utils.whitespaceBefore(brace.getColumnNo(), braceLine)
             && prevLineLen + 2 <= maxLineLength) {
             log(brace.getLineNo(), brace.getColumnNo(),
                 MSG_KEY_LINE_PREVIOUS, "{");
         }
         if (!hasLineBreakAfter(brace)) {
             log(brace.getLineNo(), brace.getColumnNo(), MSG_KEY_LINE_BREAK_AFTER);
         }
     }
 
     /**
      * validate token on new Line position
      * @param brace brace AST
      * @param startToken start Token
      * @param braceLine content of line with Brace
      * @param prevLineLen previous Line length
      */
     private void validateNewLinePosion(DetailAST brace, DetailAST startToken,
                                        String braceLine, int prevLineLen) {
         // not on the same line
         if (startToken.getLineNo() + 1 == brace.getLineNo()) {
             if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {
                 log(brace.getLineNo(), brace.getColumnNo(),
                         MSG_KEY_LINE_NEW, "{");
             }
             else if (prevLineLen + 2 <= maxLineLength) {
                 log(brace.getLineNo(), brace.getColumnNo(),
                         MSG_KEY_LINE_PREVIOUS, "{");
             }
         }
         else if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {
             log(brace.getLineNo(), brace.getColumnNo(),
                     MSG_KEY_LINE_NEW, "{");
         }
     }
 
