diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java
index 8a52fac3e..70be63819 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java
@@ -213,97 +213,97 @@ public class CommentsIndentationCheck extends Check {
 
     /**
      * Checks if comment and next code statement
      * (or previous code stmt like <b>case</b> in switch block) are indented at the same level,
      * e.g.:
      * <p>
      * <pre>
      * {@code
      * // some comment - same indentation level
      * int x = 10;
      *     // some comment - different indentation level
      * int x1 = 5;
      * /*
      *  *
      *  *&#47;
      *  boolean bool = true; - same indentation level
      * }
      * </pre>
      * </p>
      * @param singleLineComment {@link TokenTypes#SINGLE_LINE_COMMENT single line comment}.
      * @param prevStmt previous code statement.
      * @param nextStmt next code statement.
      * @return true if comment and next code statement are indented at the same level.
      */
     private static boolean areSameLevelIndented(DetailAST singleLineComment,
                                                 DetailAST prevStmt, DetailAST nextStmt) {
         boolean result;
         if (prevStmt == null) {
             result = singleLineComment.getColumnNo() == nextStmt.getColumnNo();
         }
         else {
             result = singleLineComment.getColumnNo() == nextStmt.getColumnNo()
                 || singleLineComment.getColumnNo() == prevStmt.getColumnNo();
         }
         return result;
     }
 
     /**
      * Checks if current single line comment is trailing comment, e.g.:
      * <p>
      * {@code
      * double d = 3.14; // some comment
      * }
      * </p>
      * @param singleLineComment {@link TokenTypes#SINGLE_LINE_COMMENT single line comment}.
      * @return true if current single line comment is trailing comment.
      */
     private boolean isTrailingSingleLineComment(DetailAST singleLineComment) {
         final String targetSourceLine = getLine(singleLineComment.getLineNo() - 1);
         final int commentColumnNo = singleLineComment.getColumnNo();
-        return !CommonUtils.whitespaceBefore(commentColumnNo, targetSourceLine);
+        return !CommonUtils.hasWhitespaceBefore(commentColumnNo, targetSourceLine);
     }
 
     /**
      * Checks comment block indentations over surrounding code, e.g.:
      * <p>
      * {@code
      * /* some comment *&#47; - this is ok
      * double d = 3.14;
      *     /* some comment *&#47; - this is <b>not</b> ok.
      * double d1 = 5.0;
      * }
      * </p>
      * @param blockComment {@link TokenTypes#BLOCK_COMMENT_BEGIN block comment begin}.
      */
     private void visitBlockComment(DetailAST blockComment) {
         final DetailAST nextStatement = blockComment.getNextSibling();
         final DetailAST prevStatement = getPrevStatementFromSwitchBlock(blockComment);
 
         if (nextStatement != null
             && nextStatement.getType() != TokenTypes.RCURLY
             && !isTrailingBlockComment(blockComment)
             && !areSameLevelIndented(blockComment, prevStatement, nextStatement)) {
 
             log(blockComment.getLineNo(), MSG_KEY_BLOCK, nextStatement.getLineNo(),
                 blockComment.getColumnNo(), nextStatement.getColumnNo());
         }
     }
 
     /**
      * Checks if current comment block is trailing comment, e.g.:
      * <p>
      * {@code
      * double d = 3.14; /* some comment *&#47;
      * /* some comment *&#47; double d = 18.5;
      * }
      * </p>
      * @param blockComment {@link TokenTypes#BLOCK_COMMENT_BEGIN block comment begin}.
      * @return true if current comment block is trailing comment.
      */
     private boolean isTrailingBlockComment(DetailAST blockComment) {
         final String commentLine = getLine(blockComment.getLineNo() - 1);
         final int commentColumnNo = blockComment.getColumnNo();
-        return !CommonUtils.whitespaceBefore(commentColumnNo, commentLine)
+        return !CommonUtils.hasWhitespaceBefore(commentColumnNo, commentLine)
             || blockComment.getNextSibling().getLineNo() == blockComment.getLineNo();
     }
 }
