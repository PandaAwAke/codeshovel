diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
index 19cfeaeba..5071f2d93 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
@@ -66,101 +66,101 @@ public final class PackageNamesLoader
 
     /**
      * Creates a new <code>PackageNamesLoader</code> instance.
      * @throws ParserConfigurationException if an error occurs
      * @throws SAXException if an error occurs
      */
     private PackageNamesLoader()
         throws ParserConfigurationException, SAXException
     {
         super(DTD_PUBLIC_ID, DTD_RESOURCE_NAME);
     }
 
     /**
      * Returns the set of fully qualified package names this
      * this loader processed.
      * @return the set of package names
      */
     private Set<String> getPackageNames()
     {
         return packageNames;
     }
 
     @Override
     public void startElement(String namespaceURI,
                              String localName,
                              String qName,
                              Attributes atts)
         throws SAXException
     {
         if ("package".equals(qName)) {
             //push package name
             final String name = atts.getValue("name");
             if (name == null) {
                 throw new SAXException("missing package name");
             }
             packageStack.push(name);
         }
     }
 
     /**
      * Creates a full package name from the package names on the stack.
      * @return the full name of the current package.
      */
     private String getPackageName()
     {
         final StringBuilder buf = new StringBuilder();
         final Iterator<String> iterator = packageStack.descendingIterator();
         while (iterator.hasNext()) {
             final String subPackage = iterator.next();
             buf.append(subPackage);
-            if (!subPackage.endsWith(".")) {
+            if (!Utils.endsWithChar(subPackage, '.')) {
                 buf.append('.');
             }
         }
         return buf.toString();
     }
 
     @Override
     public void endElement(String namespaceURI,
                            String localName,
                            String qName)
     {
         if ("package".equals(qName)) {
 
             packageNames.add(getPackageName());
             packageStack.pop();
         }
     }
 
     /**
      * Returns the set of package names, compiled from all
      * checkstyle_packages.xml files found on the given classloaders
      * classpath.
      * @param classLoader the class loader for loading the
      *          checkstyle_packages.xml files.
      * @return the set of package names.
      * @throws CheckstyleException if an error occurs.
      */
     public static Set<String> getPackageNames(ClassLoader classLoader)
         throws CheckstyleException
     {
 
         Enumeration<URL> packageFiles = null;
         try {
             packageFiles = classLoader.getResources(CHECKSTYLE_PACKAGES);
         }
         catch (IOException e) {
             throw new CheckstyleException(
                     "unable to get package file resources", e);
         }
 
         //create the loader outside the loop to prevent PackageObjectFactory
         //being created anew for each file
         final PackageNamesLoader namesLoader = newPackageNamesLoader();
 
         while (packageFiles.hasMoreElements()) {
             final URL packageFile = packageFiles.nextElement();
             InputStream stream = null;
 
             try {
                 stream = new BufferedInputStream(packageFile.openStream());
