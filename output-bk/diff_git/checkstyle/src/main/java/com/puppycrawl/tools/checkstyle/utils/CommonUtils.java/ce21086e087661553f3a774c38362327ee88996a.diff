diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java
index 3247b7eb3..e8514dfe8 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java
@@ -41,109 +41,109 @@ import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 
 /**
  * Contains utility methods.
  *
  * @author <a href="mailto:nesterenko-aleksey@list.ru">Aleksey Nesterenko</a>
  */
 public final class CommonUtils {
 
     /** Copied from org.apache.commons.lang3.ArrayUtils. */
     public static final String[] EMPTY_STRING_ARRAY = new String[0];
     /** Copied from org.apache.commons.lang3.ArrayUtils. */
     public static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY = new Integer[0];
     /** Copied from org.apache.commons.lang3.ArrayUtils. */
     public static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];
     /** Copied from org.apache.commons.lang3.ArrayUtils. */
     public static final int[] EMPTY_INT_ARRAY = new int[0];
     /** Copied from org.apache.commons.lang3.ArrayUtils. */
     public static final byte[] EMPTY_BYTE_ARRAY = new byte[0];
     /** Copied from org.apache.commons.lang3.ArrayUtils. */
     public static final double[] EMPTY_DOUBLE_ARRAY = new double[0];
 
     /** Prefix for the exception when unable to find resource. */
     private static final String UNABLE_TO_FIND_EXCEPTION_PREFIX = "Unable to find: ";
 
     /** Stop instances being created. **/
     private CommonUtils() {
 
     }
 
     /**
      * Helper method to create a regular expression.
      *
      * @param pattern
      *            the pattern to match
      * @return a created regexp object
      * @throws ConversionException
      *             if unable to create Pattern object.
      **/
     public static Pattern createPattern(String pattern) {
         return createPattern(pattern, 0);
     }
 
     /**
      * Helper method to create a regular expression with a specific flags.
      *
      * @param pattern
      *            the pattern to match
      * @param flags
      *            the flags to set
      * @return a created regexp object
-     * @throws ConversionException
+     * @throws IllegalArgumentException
      *             if unable to create Pattern object.
      **/
     public static Pattern createPattern(String pattern, int flags) {
         try {
             return Pattern.compile(pattern, flags);
         }
         catch (final PatternSyntaxException ex) {
-            throw new ConversionException(
+            throw new IllegalArgumentException(
                 "Failed to initialise regular expression " + pattern, ex);
         }
     }
 
     /**
      * Returns whether the file extension matches what we are meant to process.
      *
      * @param file
      *            the file to be checked.
      * @param fileExtensions
      *            files extensions, empty property in config makes it matches to all.
      * @return whether there is a match.
      */
     public static boolean matchesFileExtension(File file, String... fileExtensions) {
         boolean result = false;
         if (fileExtensions == null || fileExtensions.length == 0) {
             result = true;
         }
         else {
             // normalize extensions so all of them have a leading dot
             final String[] withDotExtensions = new String[fileExtensions.length];
             for (int i = 0; i < fileExtensions.length; i++) {
                 final String extension = fileExtensions[i];
                 if (startsWithChar(extension, '.')) {
                     withDotExtensions[i] = extension;
                 }
                 else {
                     withDotExtensions[i] = "." + extension;
                 }
             }
 
             final String fileName = file.getName();
             for (final String fileExtension : withDotExtensions) {
                 if (fileName.endsWith(fileExtension)) {
                     result = true;
                 }
             }
         }
 
         return result;
     }
 
     /**
      * Returns whether the specified string contains only whitespace up to the specified index.
      *
      * @param index
      *            index to check up to
      * @param line
      *            the line to check
      * @return whether there is only whitespace
