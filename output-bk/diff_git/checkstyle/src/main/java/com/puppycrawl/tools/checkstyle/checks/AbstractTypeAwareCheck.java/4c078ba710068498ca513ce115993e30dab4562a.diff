diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
index 6af8b777f..ed0f4b088 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
@@ -133,116 +133,116 @@ public abstract class AbstractTypeAwareCheck extends Check {
             processPackage(ast);
         }
         else if (ast.getType() == TokenTypes.IMPORT) {
             processImport(ast);
         }
         else if (ast.getType() == TokenTypes.CLASS_DEF
                  || ast.getType() == TokenTypes.INTERFACE_DEF
                  || ast.getType() == TokenTypes.ENUM_DEF) {
             processClass(ast);
         }
         else {
             if (ast.getType() == TokenTypes.METHOD_DEF) {
                 processTypeParams(ast);
             }
             processAST(ast);
         }
     }
 
     @Override
     public final void leaveToken(DetailAST ast) {
         if (ast.getType() == TokenTypes.CLASS_DEF
             || ast.getType() == TokenTypes.ENUM_DEF) {
             // perhaps it was inner class
             int dotIdx = currentClass.lastIndexOf('$');
             if (dotIdx == -1) {
                 // perhaps just a class
                 dotIdx = currentClass.lastIndexOf('.');
             }
             if (dotIdx == -1) {
                 // looks like a topmost class
                 currentClass = "";
             }
             else {
                 currentClass = currentClass.substring(0, dotIdx);
             }
             typeParams.pop();
         }
         else if (ast.getType() == TokenTypes.METHOD_DEF) {
             typeParams.pop();
         }
     }
 
     /**
      * Is exception is unchecked (subclass of <code>RuntimeException</code>
      * or <code>Error</code>
      *
      * @param exception <code>Class</code> of exception to check
      * @return true  if exception is unchecked
      *         false if exception is checked
      */
-    protected boolean isUnchecked(Class<?> exception) {
+    protected static boolean isUnchecked(Class<?> exception) {
         return isSubclass(exception, RuntimeException.class)
             || isSubclass(exception, Error.class);
     }
 
     /**
      * Checks if one class is subclass of another
      *
      * @param child <code>Class</code> of class
      *               which should be child
      * @param parent <code>Class</code> of class
      *                which should be parent
      * @return true  if aChild is subclass of aParent
      *         false otherwise
      */
-    protected boolean isSubclass(Class<?> child, Class<?> parent) {
+    protected static boolean isSubclass(Class<?> child, Class<?> parent) {
         return parent != null && child != null
             &&  parent.isAssignableFrom(child);
     }
 
     /** @return <code>ClassResolver</code> for current tree. */
     private ClassResolver getClassResolver() {
         if (classResolver == null) {
             classResolver =
                 new ClassResolver(getClassLoader(),
                                   packageFullIdent.getText(),
                                   imports);
         }
         return classResolver;
     }
 
     /**
      * Attempts to resolve the Class for a specified name.
      * @param className name of the class to resolve
      * @param currentClass name of surrounding class.
      * @return the resolved class or <code>null</code>
      *          if unable to resolve the class.
      */
     protected final Class<?> resolveClass(String className,
             String currentClass) {
         try {
             return getClassResolver().resolve(className, currentClass);
         }
         catch (final ClassNotFoundException e) {
             return null;
         }
     }
 
     /**
      * Tries to load class. Logs error if unable.
      * @param ident name of class which we try to load.
      * @param currentClass name of surrounding class.
      * @return <code>Class</code> for a ident.
      */
     protected final Class<?> tryLoadClass(Token ident, String currentClass) {
         final Class<?> clazz = resolveClass(ident.getText(), currentClass);
         if (clazz == null) {
             logLoadError(ident);
         }
         return clazz;
     }
 
     /**
      * Logs error if unable to load class information.
      * Abstract, should be overrided in subclasses.
      * @param ident class name for which we can no load class.
