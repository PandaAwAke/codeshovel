diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java
index ccf109dad..e1b70c9d7 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java
@@ -68,101 +68,100 @@ public class IllegalImportCheck
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "import.illegal";
 
     /** The compiled regular expressions for packages. */
     private final List<Pattern> illegalPkgsRegexps = new ArrayList<>();
 
     /** The compiled regular expressions for classes. */
     private final List<Pattern> illegalClassesRegexps = new ArrayList<>();
 
     /** List of illegal packages. */
     private String[] illegalPkgs;
 
     /** List of illegal classes. */
     private String[] illegalClasses;
 
     /**
      * Whether the packages or class names
      * should be interpreted as regular expressions.
      */
     private boolean regexp;
 
     /**
      * Creates a new {@code IllegalImportCheck} instance.
      */
     public IllegalImportCheck() {
         setIllegalPkgs("sun");
     }
 
     /**
      * Set the list of illegal packages.
      * @param from array of illegal packages
      * @noinspection WeakerAccess
      */
     public final void setIllegalPkgs(String... from) {
         illegalPkgs = from.clone();
         illegalPkgsRegexps.clear();
         for (String illegalPkg : illegalPkgs) {
             illegalPkgsRegexps.add(CommonUtils.createPattern("^" + illegalPkg + "\\..*"));
         }
     }
 
     /**
      * Set the list of illegal classes.
      * @param from array of illegal classes
      */
     public void setIllegalClasses(String... from) {
         illegalClasses = from.clone();
-        illegalClassesRegexps.clear();
         for (String illegalClass : illegalClasses) {
             illegalClassesRegexps.add(CommonUtils.createPattern(illegalClass));
         }
     }
 
     /**
      * Controls whether the packages or class names
      * should be interpreted as regular expressions.
      * @param regexp a {@code Boolean} value
      */
     public void setRegexp(boolean regexp) {
         this.regexp = regexp;
     }
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};
     }
 
     @Override
     public int[] getRequiredTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final FullIdent imp;
         if (ast.getType() == TokenTypes.IMPORT) {
             imp = FullIdent.createFullIdentBelow(ast);
         }
         else {
             imp = FullIdent.createFullIdent(
                 ast.getFirstChild().getNextSibling());
         }
         if (isIllegalImport(imp.getText())) {
             log(ast.getLineNo(),
                 ast.getColumnNo(),
                 MSG_KEY,
                 imp.getText());
         }
     }
 
     /**
      * Checks if an import matches one of the regular expressions
      * for illegal packages or illegal class names.
