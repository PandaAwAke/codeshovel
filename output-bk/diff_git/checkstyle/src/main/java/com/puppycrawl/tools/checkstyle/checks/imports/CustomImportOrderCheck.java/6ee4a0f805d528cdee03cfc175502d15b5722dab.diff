diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java
index 98685aac2..fa3bc914f 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java
@@ -738,101 +738,101 @@ public class CustomImportOrderCheck extends Check {
                 || SPECIAL_IMPORTS_RULE_GROUP.equals(ruleStr)) {
             customImportOrderRules.add(ruleStr);
 
         }
         else if (ruleStr.startsWith(SAME_PACKAGE_RULE_GROUP)) {
 
             final String rule = ruleStr.substring(ruleStr.indexOf('(') + 1,
                     ruleStr.indexOf(')'));
             samePackageMatchingDepth = Integer.parseInt(rule);
             if (samePackageMatchingDepth <= 0) {
                 throw new IllegalArgumentException(
                         "SAME_PACKAGE rule parameter should be positive integer: " + ruleStr);
             }
             customImportOrderRules.add(SAME_PACKAGE_RULE_GROUP);
 
         }
         else {
             throw new IllegalStateException("Unexpected rule: " + ruleStr);
         }
     }
 
     /**
      * Creates samePackageDomainsRegExp of the first package domains.
      * @param firstPackageDomainsCount
      *        number of first package domains.
      * @param packageNode
      *        package node.
      * @return same package regexp.
      */
     private static String createSamePackageRegexp(int firstPackageDomainsCount,
              DetailAST packageNode) {
         final String packageFullPath = getFullImportIdent(packageNode);
         return getFirstNDomainsFromIdent(firstPackageDomainsCount, packageFullPath);
     }
 
     /**
      * Extracts defined amount of domains from the left side of package/import identifier
      * @param firstPackageDomainsCount
      *        number of first package domains.
      * @param packageFullPath
      *        full identifier containing path to package or imported object.
      * @return String with defined amount of domains or full identifier
      *        (if full identifier had less domain then specified)
      */
     private static String getFirstNDomainsFromIdent(
             final int firstPackageDomainsCount, final String packageFullPath) {
         final StringBuilder builder = new StringBuilder();
         final StringTokenizer tokens = new StringTokenizer(packageFullPath, ".");
         int count = firstPackageDomainsCount;
 
-        while (tokens.hasMoreTokens() && count > 0) {
+        while (count > 0 && tokens.hasMoreTokens()) {
             builder.append(tokens.nextToken()).append('.');
             count--;
         }
         return builder.toString();
     }
 
     /**
      * Contains import attributes as line number, import full path, import
      * group.
      * @author max
      */
     private static class ImportDetails {
         /** Import full path. */
         private final String importFullPath;
 
         /** Import line number. */
         private final int lineNumber;
 
         /** Import group. */
         private final String importGroup;
 
         /** Is static import. */
         private final boolean staticImport;
 
         /**
          * @param importFullPath
          *        import full path.
          * @param lineNumber
          *        import line number.
          * @param importGroup
          *        import group.
          * @param staticImport
          *        if import is static.
          */
         ImportDetails(String importFullPath,
                 int lineNumber, String importGroup, boolean staticImport) {
             this.importFullPath = importFullPath;
             this.lineNumber = lineNumber;
             this.importGroup = importGroup;
             this.staticImport = staticImport;
         }
 
         /**
          * Get import full path variable.
          * @return import full path variable.
          */
         public String getImportFullPath() {
             return importFullPath;
         }
 
