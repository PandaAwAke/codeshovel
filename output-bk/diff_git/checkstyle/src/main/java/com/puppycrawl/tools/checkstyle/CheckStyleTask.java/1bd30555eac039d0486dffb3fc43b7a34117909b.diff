diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/CheckStyleTask.java b/src/main/java/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
index e4dfb7005..ee7489bc7 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/CheckStyleTask.java
@@ -237,138 +237,138 @@ public class CheckStyleTask extends Task
 
     ////////////////////////////////////////////////////////////////////////////
     // Setters for Checker configuration attributes
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Sets a properties file for use instead
      * of individually setting them.
      * @param props the properties File to use
      */
     public void setProperties(File props)
     {
         propertiesFile = props;
     }
 
     ////////////////////////////////////////////////////////////////////////////
     // The doers
     ////////////////////////////////////////////////////////////////////////////
 
     @Override
     public void execute() throws BuildException
     {
         final long startTime = System.currentTimeMillis();
 
         try {
             realExecute();
         }
         finally {
             final long endTime = System.currentTimeMillis();
             log("Total execution took " + (endTime - startTime) + " ms.",
                 Project.MSG_VERBOSE);
         }
     }
 
     /**
      * Helper implementation to perform execution.
      */
     private void realExecute()
     {
         // output version info in debug mode
         final ResourceBundle compilationProperties = ResourceBundle
                 .getBundle("checkstylecompilation");
         final String version = compilationProperties
                 .getString("checkstyle.compile.version");
         final String compileTimestamp = compilationProperties
                 .getString("checkstyle.compile.timestamp");
         log("checkstyle version " + version, Project.MSG_VERBOSE);
         log("compiled on " + compileTimestamp, Project.MSG_VERBOSE);
 
         // Check for no arguments
-        if ((fileName == null) && fileSets.isEmpty()) {
+        if (fileName == null && fileSets.isEmpty()) {
             throw new BuildException(
                     "Must specify at least one of 'file' or nested 'fileset'.",
                     getLocation());
         }
 
         if (configLocation == null) {
             throw new BuildException("Must specify 'config'.", getLocation());
         }
 
         // Create the checker
         Checker c = null;
         try {
             c = createChecker();
 
             final SeverityLevelCounter warningCounter =
                 new SeverityLevelCounter(SeverityLevel.WARNING);
             c.addListener(warningCounter);
 
             // Process the files
             long startTime = System.currentTimeMillis();
             final List<File> files = scanFileSets();
             long endTime = System.currentTimeMillis();
             log("To locate the files took " + (endTime - startTime) + " ms.",
                 Project.MSG_VERBOSE);
 
             log("Running Checkstyle " + version + " on " + files.size()
                     + " files", Project.MSG_INFO);
             log("Using configuration " + configLocation, Project.MSG_VERBOSE);
 
             startTime = System.currentTimeMillis();
             final int numErrs = c.process(files);
             endTime = System.currentTimeMillis();
             log("To process the files took " + (endTime - startTime) + " ms.",
                 Project.MSG_VERBOSE);
             final int numWarnings = warningCounter.getCount();
-            final boolean ok = (numErrs <= maxErrors)
-                    && (numWarnings <= maxWarnings);
+            final boolean ok = numErrs <= maxErrors
+                    && numWarnings <= maxWarnings;
 
             // Handle the return status
             if (!ok) {
                 final String failureMsg =
                         "Got " + numErrs + " errors and " + numWarnings
                                 + " warnings.";
                 if (failureProperty != null) {
                     getProject().setProperty(failureProperty, failureMsg);
                 }
 
                 if (failOnViolation) {
                     throw new BuildException(failureMsg, getLocation());
                 }
             }
         }
         finally {
             if (c != null) {
                 c.destroy();
             }
         }
     }
 
     /**
      * Creates new instance of <code>Checker</code>.
      * @return new instance of <code>Checker</code>
      */
     private Checker createChecker()
     {
         Checker c = null;
         try {
             final Properties props = createOverridingProperties();
             final Configuration config =
                 ConfigurationLoader.loadConfiguration(
                     configLocation,
                     new PropertiesExpander(props),
                     omitIgnoredModules);
 
             final DefaultContext context = new DefaultContext();
             final ClassLoader loader = new AntClassLoader(getProject(),
                     classpath);
             context.add("classloader", loader);
 
             final ClassLoader moduleClassLoader =
                 Checker.class.getClassLoader();
             context.add("moduleClassLoader", moduleClassLoader);
 
             c = new Checker();
 
             c.contextualize(context);
             c.configure(config);
@@ -518,132 +518,132 @@ public class CheckStyleTask extends Task
      */
     public static class Formatter
     {
         /** the formatter type */
         private FormatterType formatterType;
         /** the file to output to */
         private File toFile;
         /** Whether or not the write to the named file. */
         private boolean useFile = true;
 
         /**
          * Set the type of the formatter.
          * @param type the type
          */
         public void setType(FormatterType type)
         {
             final String val = type.getValue();
             if (!E_XML.equals(val) && !E_PLAIN.equals(val)) {
                 throw new BuildException("Invalid formatter type: " + val);
             }
 
             formatterType = type;
         }
 
         /**
          * Set the file to output to.
          * @param to the file to output to
          */
         public void setTofile(File to)
         {
             toFile = to;
         }
 
         /**
          * Sets whether or not we write to a file if it is provided.
          * @param use whether not not to use provided file.
          */
         public void setUseFile(boolean use)
         {
             useFile = use;
         }
 
         /**
          * Creates a listener for the formatter.
          * @param task the task running
          * @return a listener
          * @throws IOException if an error occurs
          */
         public AuditListener createListener(Task task) throws IOException
         {
-            if ((formatterType != null)
+            if (formatterType != null
                     && E_XML.equals(formatterType.getValue()))
             {
                 return createXMLLogger(task);
             }
             return createDefaultLogger(task);
         }
 
         /**
          * @return a DefaultLogger instance
          * @param task the task to possibly log to
          * @throws IOException if an error occurs
          */
         private AuditListener createDefaultLogger(Task task)
             throws IOException
         {
-            if ((toFile == null) || !useFile) {
+            if (toFile == null || !useFile) {
                 return new DefaultLogger(
                     new LogOutputStream(task, Project.MSG_DEBUG),
                     true, new LogOutputStream(task, Project.MSG_ERR), true);
             }
             return new DefaultLogger(new FileOutputStream(toFile), true);
         }
 
         /**
          * @return an XMLLogger instance
          * @param task the task to possibly log to
          * @throws IOException if an error occurs
          */
         private AuditListener createXMLLogger(Task task) throws IOException
         {
-            if ((toFile == null) || !useFile) {
+            if (toFile == null || !useFile) {
                 return new XMLLogger(new LogOutputStream(task,
                         Project.MSG_INFO), true);
             }
             return new XMLLogger(new FileOutputStream(toFile), true);
         }
     }
 
     /**
      * Represents a property that consists of a key and value.
      */
     public static class Property
     {
         /** the property key */
         private String key;
         /** the property value */
         private String value;
 
         /** @return the property key */
         public String getKey()
         {
             return key;
         }
 
         /** @param key sets the property key */
         public void setKey(String key)
         {
             this.key = key;
         }
 
         /** @return the property value */
         public String getValue()
         {
             return value;
         }
 
         /** @param value set the property value */
         public void setValue(String value)
         {
             this.value = value;
         }
 
         /** @param value set the property value from a File */
         public void setFile(File value)
         {
             setValue(value.getAbsolutePath());
         }
     }
 
     /** Represents a custom listener. */
     public static class Listener
