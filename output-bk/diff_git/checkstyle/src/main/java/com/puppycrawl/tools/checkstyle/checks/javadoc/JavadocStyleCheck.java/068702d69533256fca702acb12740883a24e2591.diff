diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
index ef7de9f50..119ac51e8 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
@@ -219,161 +219,161 @@ public class JavadocStyleCheck
 
         if (checkingHtml) {
             checkHtml(ast, comment);
         }
 
         if (checkingEmptyJavadoc) {
             checkEmptyJavadoc(comment);
         }
     }
 
     /**
      * Checks that the first sentence ends with proper punctuation.  This method
      * uses a regular expression that checks for the presence of a period,
      * question mark, or exclamation mark followed either by whitespace, an
      * HTML element, or the end of string. This method ignores {_AT_inheritDoc}
      * comments for TokenTypes that are valid for {_AT_inheritDoc}.
      *
      * @param ast the current node
      * @param comment the source lines that make up the Javadoc comment.
      */
     private void checkFirstSentence(final DetailAST ast, TextBlock comment) {
         final String commentText = getCommentText(comment.getText());
 
         if (commentText.length() != 0
             && !getEndOfSentencePattern().matcher(commentText).find()
             && !("{@inheritDoc}".equals(commentText)
             && JavadocTagInfo.INHERIT_DOC.isValidOn(ast))) {
             log(comment.getStartLineNo(), NO_PERIOD);
         }
     }
 
     /**
      * Checks that the Javadoc is not empty.
      *
      * @param comment the source lines that make up the Javadoc comment.
      */
     private void checkEmptyJavadoc(TextBlock comment) {
         final String commentText = getCommentText(comment.getText());
 
         if (commentText.length() == 0) {
             log(comment.getStartLineNo(), EMPTY);
         }
     }
 
     /**
      * Returns the comment text from the Javadoc.
      * @param comments the lines of Javadoc.
      * @return a comment text String.
      */
     private static String getCommentText(String... comments) {
-        final StringBuffer buffer = new StringBuffer();
+        final StringBuilder builder = new StringBuilder();
         for (final String line : comments) {
             final int textStart = findTextStart(line);
 
             if (textStart != -1) {
                 if (line.charAt(textStart) == '@') {
                     //we have found the tag section
                     break;
                 }
-                buffer.append(line.substring(textStart));
-                trimTail(buffer);
-                buffer.append('\n');
+                builder.append(line.substring(textStart));
+                trimTail(builder);
+                builder.append('\n');
             }
         }
 
-        return buffer.toString().trim();
+        return builder.toString().trim();
     }
 
     /**
      * Finds the index of the first non-whitespace character ignoring the
      * Javadoc comment start and end strings (&#47** and *&#47) as well as any
      * leading asterisk.
      * @param line the Javadoc comment line of text to scan.
      * @return the int index relative to 0 for the start of text
      *         or -1 if not found.
      */
     private static int findTextStart(String line) {
         int textStart = -1;
         for (int i = 0; i < line.length(); i++) {
             if (!Character.isWhitespace(line.charAt(i))) {
                 if (line.regionMatches(i, "/**", 0, "/**".length())) {
                     i += 2;
                 }
                 else if (line.regionMatches(i, "*/", 0, 2)) {
                     i++;
                 }
                 else if (line.charAt(i) != '*') {
                     textStart = i;
                     break;
                 }
             }
         }
         return textStart;
     }
 
     /**
      * Trims any trailing whitespace or the end of Javadoc comment string.
-     * @param buffer the StringBuffer to trim.
+     * @param builder the StringBuilder to trim.
      */
-    private static void trimTail(StringBuffer buffer) {
-        int i = buffer.length() - 1;
+    private static void trimTail(StringBuilder builder) {
+        int i = builder.length() - 1;
         while (true) {
-            if (Character.isWhitespace(buffer.charAt(i))) {
-                buffer.deleteCharAt(i);
+            if (Character.isWhitespace(builder.charAt(i))) {
+                builder.deleteCharAt(i);
             }
-            else if (buffer.charAt(i - 1) == '*') {
-                buffer.deleteCharAt(i);
-                buffer.deleteCharAt(i - 1);
+            else if (builder.charAt(i - 1) == '*') {
+                builder.deleteCharAt(i);
+                builder.deleteCharAt(i - 1);
                 i--;
-                while (buffer.charAt(i - 1) == '*') {
-                    buffer.deleteCharAt(i - 1);
+                while (builder.charAt(i - 1) == '*') {
+                    builder.deleteCharAt(i - 1);
                     i--;
                 }
             }
             else {
                 break;
             }
             i--;
         }
     }
 
     /**
      * Checks the comment for HTML tags that do not have a corresponding close
      * tag or a close tag that has no previous open tag.  This code was
      * primarily copied from the DocCheck checkHtml method.
      *
      * @param ast the node with the Javadoc
      * @param comment the <code>TextBlock</code> which represents
      *                 the Javadoc comment.
      */
     private void checkHtml(final DetailAST ast, final TextBlock comment) {
         final int lineno = comment.getStartLineNo();
         final Deque<HtmlTag> htmlStack = new ArrayDeque<>();
         final String[] text = comment.getText();
 
         TagParser parser = null;
         parser = new TagParser(text, lineno);
 
         while (parser.hasNextTag()) {
             final HtmlTag tag = parser.nextTag();
 
             if (tag.isIncompleteTag()) {
                 log(tag.getLineNo(), INCOMPLETE_TAG,
                     text[tag.getLineNo() - lineno]);
                 return;
             }
             if (tag.isClosedTag()) {
                 //do nothing
                 continue;
             }
             if (!tag.isCloseTag()) {
                 //We only push html tags that are allowed
                 if (isAllowedTag(tag)) {
                     htmlStack.push(tag);
                 }
             }
             else {
                 // We have found a close tag.
                 if (isExtraHtml(tag.getId(), htmlStack)) {
                     // No corresponding open tag was found on the stack.
                     log(tag.getLineNo(),
