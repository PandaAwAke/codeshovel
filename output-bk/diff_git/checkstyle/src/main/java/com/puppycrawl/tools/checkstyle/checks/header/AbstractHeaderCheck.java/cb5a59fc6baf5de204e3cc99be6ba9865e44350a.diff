diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java
index 448abc847..e885dc3e6 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java
@@ -167,71 +167,71 @@ public abstract class AbstractHeaderCheck extends AbstractFileSetCheck {
         if (!readerLines.isEmpty()) {
             throw new ConversionException(
                     "header has already been set - "
                     + "set either header or headerFile, not both");
         }
     }
 
     /**
      * Set the header to check against. Individual lines in the header
      * must be separated by '\n' characters.
      * @param header header content to check against.
      * @throws ConversionException if the header cannot be interpreted
      */
     public void setHeader(String header) {
         if (StringUtils.isBlank(header)) {
             return;
         }
 
         checkHeaderNotInitialized();
 
         final String headerExpandedNewLines = ESCAPED_LINE_FEED_PATTERN
                 .matcher(header).replaceAll("\n");
 
         final Reader headerReader = new StringReader(headerExpandedNewLines);
         try {
             loadHeader(headerReader);
         }
         catch (final IOException ex) {
             throw new ConversionException("unable to load header", ex);
         }
         finally {
             Closeables.closeQuietly(headerReader);
         }
     }
 
     /**
      * Load header to check against from a Reader into readerLines.
      * @param headerReader delivers the header to check against
      * @throws IOException if
      */
     private void loadHeader(final Reader headerReader) throws IOException {
         final LineNumberReader lnr = new LineNumberReader(headerReader);
         readerLines.clear();
         while (true) {
             final String line = lnr.readLine();
             if (line == null) {
                 break;
             }
             readerLines.add(line);
         }
-        postprocessHeaderLines();
+        postProcessHeaderLines();
     }
 
     /**
      * Hook method for post processing header lines.
      * This implementation does nothing.
      */
-    protected void postprocessHeaderLines() {
+    protected void postProcessHeaderLines() {
         // No code by default
     }
 
     @Override
     protected final void finishLocalSetup() throws CheckstyleException {
         if (filename != null) {
             loadHeaderFile();
         }
         if (readerLines.isEmpty()) {
             setHeader(null);
         }
     }
 }
