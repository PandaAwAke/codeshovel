diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NoCloneCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NoCloneCheck.java
index 850b6d1d5..9db5aecb1 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NoCloneCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NoCloneCheck.java
@@ -101,58 +101,58 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  *
  * <pre>
  * Shape s2 = s1.clone();
  * System.out.println(s2 instanceof Square); //true
  * </pre>
  * Just keep in mind if this type of polymorphic cloning is required
  * then a properly implemented clone method may be the best choice.
  *
  * <p>Much of this information was taken from Effective Java:
  * Programming Language Guide First Edition by Joshua Bloch
  * pages 45-52.  Give Bloch credit for writing an excellent book.
  * </p>
  *
  * <p>This check is almost exactly the same as the {@link NoFinalizerCheck}
  *
  * @author Travis Schneeberger
  * @see Object#clone()
  */
 public class NoCloneCheck extends AbstractCheck {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "avoid.clone.method";
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.METHOD_DEF};
     }
 
     @Override
     public int[] getRequiredTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public void visitToken(DetailAST aAST) {
         final DetailAST mid = aAST.findFirstToken(TokenTypes.IDENT);
         final String name = mid.getText();
 
         if ("clone".equals(name)) {
 
             final DetailAST params = aAST.findFirstToken(TokenTypes.PARAMETERS);
             final boolean hasEmptyParamList =
-                !params.branchContains(TokenTypes.PARAMETER_DEF);
+                params.findFirstToken(TokenTypes.PARAMETER_DEF) == null;
 
             if (hasEmptyParamList) {
                 log(aAST.getLineNo(), MSG_KEY);
             }
         }
     }
 }
