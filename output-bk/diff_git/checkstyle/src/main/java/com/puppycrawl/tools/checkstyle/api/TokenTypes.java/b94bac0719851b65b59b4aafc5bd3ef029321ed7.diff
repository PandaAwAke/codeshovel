diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java
index b4d62e85b..8bb0f13ee 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java
@@ -2857,101 +2857,101 @@ public final class TokenTypes
      *         +--LCURLY ({)
      *         +--ENUM_CONSTANT_DEF
      *             |
      *             +--IDENT (FIRST_CONSTANT)
      *         +--COMMA (,)
      *         +--ENUM_CONSTANT_DEF
      *             |
      *             +--IDENT (SECOND_CONSTANT)
      *         +--SEMI (;)
      *         +--METHOD_DEF
      *             |
      *             +--MODIFIERS
      *                 |
      *                 +--LITERAL_PUBLIC (public)
      *             +--TYPE
      *                 |
      *                 +--LITERAL_void (void)
      *             +--IDENT (someMethod)
      *             +--LPAREN (()
      *             +--PARAMETERS
      *             +--RPAREN ())
      *             +--SLIST ({)
      *                 |
      *                 +--RCURLY (})
      *         +--RCURLY (})
      * </pre>
      *
      * @see <a href="http://www.jcp.org/en/jsr/detail?id=201">
      * JSR201</a>
      * @see #MODIFIERS
      * @see #ENUM
      * @see #IDENT
      * @see #EXTENDS_CLAUSE
      * @see #IMPLEMENTS_CLAUSE
      * @see #OBJBLOCK
      * @see #LITERAL_NEW
      * @see #ENUM_CONSTANT_DEF
      **/
     public static final int ENUM_DEF =
         GeneratedJavaTokenTypes.ENUM_DEF;
 
     /**
      * The <code>enum</code> keyword.  This element appears
      * as part of an enum declaration.
      **/
     public static final int ENUM =
         GeneratedJavaTokenTypes.ENUM;
 
     /**
      * An enum constant declaration. Its notable children are annotations,
-     * arguments and object block akin to an annonymous
+     * arguments and object block akin to an anonymous
      * inner class' body.
      *
      * <p>For example:</p>
      * <pre>
      * SOME_CONSTANT(1)
      * {
      *     public void someMethodOverridenFromMainBody()
      *     {
      *     }
      * }
      * </pre>
      * <p>parses as:</p>
      * <pre>
      * +--ENUM_CONSTANT_DEF
      *     |
      *     +--ANNOTATIONS
      *     +--IDENT (SOME_CONSTANT)
      *     +--LPAREN (()
      *     +--ELIST
      *         |
      *         +--EXPR
      *             |
      *             +--NUM_INT (1)
      *     +--RPAREN ())
      *     +--OBJBLOCK
      *         |
      *         +--LCURLY ({)
      *         |
      *         +--METHOD_DEF
      *             |
      *             +--MODIFIERS
      *                 |
      *                 +--LITERAL_PUBLIC (public)
      *             +--TYPE
      *                 |
      *                 +--LITERAL_void (void)
      *             +--IDENT (someMethodOverridenFromMainBody)
      *             +--LPAREN (()
      *             +--PARAMETERS
      *             +--RPAREN ())
      *             +--SLIST ({)
      *                 |
      *                 +--RCURLY (})
      *         +--RCURLY (})
      * </pre>
      *
      * @see <a href="http://www.jcp.org/en/jsr/detail?id=201">
      * JSR201</a>
      * @see #ANNOTATIONS
      * @see #MODIFIERS
@@ -3495,123 +3495,123 @@ public final class TokenTypes
 
     ////////////////////////////////////////////////////////////////////////
     // The interesting code goes here
     ////////////////////////////////////////////////////////////////////////
 
     /** maps from a token name to value */
     private static final ImmutableMap<String, Integer> TOKEN_NAME_TO_VALUE;
     /** maps from a token value to name */
     private static final String[] TOKEN_VALUE_TO_NAME;
 
     // initialise the constants
     static {
         final ImmutableMap.Builder<String, Integer> builder =
             ImmutableMap.builder();
         final Field[] fields = TokenTypes.class.getDeclaredFields();
         String[] tempTokenValueToName = new String[0];
         for (final Field f : fields) {
             // Only process the int declarations.
             if (f.getType() != Integer.TYPE) {
                 continue;
             }
 
             final String name = f.getName();
             try {
                 final int tokenValue = f.getInt(name);
                 builder.put(name, tokenValue);
                 if (tokenValue > tempTokenValueToName.length - 1) {
                     final String[] temp = new String[tokenValue + 1];
                     System.arraycopy(tempTokenValueToName, 0,
                                      temp, 0, tempTokenValueToName.length);
                     tempTokenValueToName = temp;
                 }
                 tempTokenValueToName[tokenValue] = name;
             }
             catch (final IllegalArgumentException e) {
                 e.printStackTrace();
                 System.exit(1);
             }
             catch (final IllegalAccessException e) {
                 e.printStackTrace();
                 System.exit(1);
             }
         }
 
         TOKEN_NAME_TO_VALUE = builder.build();
         TOKEN_VALUE_TO_NAME = tempTokenValueToName;
     }
 
     /**
      * Returns the name of a token for a given ID.
-     * @param aID the ID of the token name to get
+     * @param iD the ID of the token name to get
      * @return a token name
      */
-    public static String getTokenName(int aID)
+    public static String getTokenName(int iD)
     {
-        if (aID > TOKEN_VALUE_TO_NAME.length - 1) {
-            throw new IllegalArgumentException("given id " + aID);
+        if (iD > TOKEN_VALUE_TO_NAME.length - 1) {
+            throw new IllegalArgumentException("given id " + iD);
         }
-        final String name = TOKEN_VALUE_TO_NAME[aID];
+        final String name = TOKEN_VALUE_TO_NAME[iD];
         if (name == null) {
-            throw new IllegalArgumentException("given id " + aID);
+            throw new IllegalArgumentException("given id " + iD);
         }
         return name;
     }
 
     /**
      * Returns the ID of a token for a given name.
-     * @param aName the name of the token ID to get
+     * @param name the name of the token ID to get
      * @return a token ID
      */
-    public static int getTokenId(String aName)
+    public static int getTokenId(String name)
     {
-        final Integer id = TOKEN_NAME_TO_VALUE.get(aName);
+        final Integer id = TOKEN_NAME_TO_VALUE.get(name);
         if (id == null) {
-            throw new IllegalArgumentException("given name " + aName);
+            throw new IllegalArgumentException("given name " + name);
         }
         return id.intValue();
     }
 
     /**
      * Returns the short description of a token for a given name.
-     * @param aName the name of the token ID to get
+     * @param name the name of the token ID to get
      * @return a short description
      */
-    public static String getShortDescription(String aName)
+    public static String getShortDescription(String name)
     {
-        if (!TOKEN_NAME_TO_VALUE.containsKey(aName)) {
-            throw new IllegalArgumentException("given name " + aName);
+        if (!TOKEN_NAME_TO_VALUE.containsKey(name)) {
+            throw new IllegalArgumentException("given name " + name);
         }
 
         final String tokentypes =
             "com.puppycrawl.tools.checkstyle.api.tokentypes";
         final ResourceBundle bundle = ResourceBundle.getBundle(tokentypes);
-        return bundle.getString(aName);
+        return bundle.getString(name);
     }
 
     /**
      * Is argument comment-related type (SINGLE_LINE_COMMENT,
      * BLOCK_COMMENT_BEGIN, BLOCK_COMMENT_END, COMMENT_CONTENT).
-     * @param aType
+     * @param type
      *        token type.
-     * @return true if aType is comment-related type.
+     * @return true if type is comment-related type.
      */
-    public static boolean isCommentType(int aType)
+    public static boolean isCommentType(int type)
     {
-        return aType == TokenTypes.SINGLE_LINE_COMMENT
-                || aType == TokenTypes.BLOCK_COMMENT_BEGIN
-                || aType == TokenTypes.BLOCK_COMMENT_END
-                || aType == TokenTypes.COMMENT_CONTENT;
+        return type == TokenTypes.SINGLE_LINE_COMMENT
+                || type == TokenTypes.BLOCK_COMMENT_BEGIN
+                || type == TokenTypes.BLOCK_COMMENT_END
+                || type == TokenTypes.COMMENT_CONTENT;
     }
 
     /**
      * Is argument comment-related type name (SINGLE_LINE_COMMENT,
      * BLOCK_COMMENT_BEGIN, BLOCK_COMMENT_END, COMMENT_CONTENT).
-     * @param aType
+     * @param type
      *        token type name.
-     * @return true if aType is comment-related type name.
+     * @return true if type is comment-related type name.
      */
-    public static boolean isCommentType(String aType)
+    public static boolean isCommentType(String type)
     {
-        return isCommentType(getTokenId(aType));
+        return isCommentType(getTokenId(type));
     }
 }
