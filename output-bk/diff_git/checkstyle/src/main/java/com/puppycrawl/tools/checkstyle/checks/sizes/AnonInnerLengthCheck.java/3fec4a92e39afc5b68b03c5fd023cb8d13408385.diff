diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/AnonInnerLengthCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/AnonInnerLengthCheck.java
index 0f42cb020..0bd9600f9 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/AnonInnerLengthCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/AnonInnerLengthCheck.java
@@ -14,83 +14,83 @@
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.sizes;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * <p>
  * Checks for long anonymous inner classes.
  * </p>
  * <p>
  * Rationale: If an anonymous inner class becomes very long
  * it is hard to understand and to see the flow of the method
  * where the class is defined. Therefore long anonymous inner
  * classes should usually be refactored into a named inner class.
  * See also Bloch, Effective Java, p. 93.
  * </p>
  * <p>
  * The default maximum anonymous inner class length is 20 lines.
  * To change the maximum number of lines, set property max.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="AnonInnerLength"/&gt;
  * </pre>
  * <p>
  * An example of how to configure the check so that it accepts anonymous
  * inner classes with up to 60 lines is:
  * </p>
  * <pre>
  * &lt;module name="AnonInnerLength"&gt;
  *    &lt;property name="max" value="60"/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * @author Rob Worth
  */
 public class AnonInnerLengthCheck extends Check
 {
     /** default maximum number of lines */
     private static final int DEFAULT_MAX = 20;
 
     /** maximum number of lines */
-    private int mMax = DEFAULT_MAX;
+    private int max = DEFAULT_MAX;
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.LITERAL_NEW};
     }
 
     @Override
-    public void visitToken(DetailAST aAST)
+    public void visitToken(DetailAST ast)
     {
-        final DetailAST openingBrace = aAST.findFirstToken(TokenTypes.OBJBLOCK);
+        final DetailAST openingBrace = ast.findFirstToken(TokenTypes.OBJBLOCK);
         if (openingBrace != null) {
             final DetailAST closingBrace =
                 openingBrace.findFirstToken(TokenTypes.RCURLY);
             final int length =
                 closingBrace.getLineNo() - openingBrace.getLineNo() + 1;
-            if (length > mMax) {
-                log(aAST.getLineNo(), aAST.getColumnNo(), "maxLen.anonInner",
-                        length, mMax);
+            if (length > max) {
+                log(ast.getLineNo(), ast.getColumnNo(), "maxLen.anonInner",
+                        length, max);
             }
         }
     }
 
 
     /**
-     * @param aLength the maximum length of an anonymous inner class.
+     * @param length the maximum length of an anonymous inner class.
      */
-    public void setMax(int aLength)
+    public void setMax(int length)
     {
-        mMax = aLength;
+        max = length;
     }
 }
