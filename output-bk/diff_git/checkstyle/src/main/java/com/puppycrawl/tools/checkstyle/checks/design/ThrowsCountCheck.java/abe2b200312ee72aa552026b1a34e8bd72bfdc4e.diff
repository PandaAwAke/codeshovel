diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheck.java
index 58181ab1e..19cb14caa 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheck.java
@@ -21,94 +21,102 @@ package com.puppycrawl.tools.checkstyle.checks.design;
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * <p>
  * Restricts throws statements to a specified count (default = 1).
  * </p>
  * <p>
  * Rationale:
  * Exceptions form part of a methods interface. Declaring
  * a method to throw too many differently rooted
  * exceptions makes exception handling onerous and leads
  * to poor programming practices such as catch
  * (Exception). This check forces developers to put
  * exceptions into a hierarchy such that in the simplest
  * case, only one type of exception need be checked for by
  * a caller but allows any sub-classes to be caught
  * specifically if necessary.
  * </p>
  * @author <a href="mailto:simon@redhillconsulting.com.au">Simon Harris</a>
  */
 public final class ThrowsCountCheck extends Check
 {
     /** default value of max property */
     private static final int DEFAULT_MAX = 1;
 
     /** maximum allowed throws statements */
     private int max;
 
     /** Creates new instance of the check. */
     public ThrowsCountCheck()
     {
         setMax(DEFAULT_MAX);
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.LITERAL_THROWS,
         };
     }
 
     @Override
     public int[] getRequiredTokens()
     {
         return getDefaultTokens();
     }
 
+    @Override
+    public int[] getAcceptableTokens()
+    {
+        return new int[] {
+            TokenTypes.LITERAL_THROWS,
+        };
+    }
+
     /**
      * Getter for max property.
      * @return maximum allowed throws statements.
      */
     public int getMax()
     {
         return max;
     }
 
     /**
      * Setter for max property.
      * @param max maximum allowed throws statements.
      */
     public void setMax(int max)
     {
         this.max = max;
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
         switch (ast.getType()) {
             case TokenTypes.LITERAL_THROWS:
                 visitLiteralThrows(ast);
                 break;
             default:
                 throw new IllegalStateException(ast.toString());
         }
     }
 
     /**
      * Checks number of throws statements.
      * @param ast throws for check.
      */
     private void visitLiteralThrows(DetailAST ast)
     {
         // Account for all the commas!
         final int count = (ast.getChildCount() + 1) / 2;
         if (count > getMax()) {
             log(ast.getLineNo(),  ast.getColumnNo(), "throws.count",
                 count, getMax());
         }
     }
 }
