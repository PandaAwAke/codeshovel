diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java
index b036479da..1ef0e5981 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java
@@ -361,79 +361,79 @@ public class AnnotationLocationCheck extends AbstractCheck {
         }
         return allowSamelineMultipleAnnotations
             || allowingCondition && !hasNodeBefore(annotation)
             || !allowingCondition && (!hasNodeBeside(annotation)
             || isAllowedPosition(annotation, SINGLELINE_ANNOTATION_PARENTS));
     }
 
     /**
      * Checks whether an annotation node has any node before on the same line.
      * @param annotation annotation node.
      * @return true if an annotation node has any node before on the same line.
      */
     private static boolean hasNodeBefore(DetailAST annotation) {
         final int annotationLineNo = annotation.getLineNo();
         final DetailAST previousNode = annotation.getPreviousSibling();
 
         return previousNode != null && annotationLineNo == previousNode.getLineNo();
     }
 
     /**
      * Checks whether an annotation node has any node before or after on the same line.
      * @param annotation annotation node.
      * @return true if an annotation node has any node before or after on the same line.
      */
     private static boolean hasNodeBeside(DetailAST annotation) {
         return hasNodeBefore(annotation) || hasNodeAfter(annotation);
     }
 
     /**
      * Checks whether an annotation node has any node after on the same line.
      * @param annotation annotation node.
      * @return true if an annotation node has any node after on the same line.
      */
     private static boolean hasNodeAfter(DetailAST annotation) {
         final int annotationLineNo = annotation.getLineNo();
         DetailAST nextNode = annotation.getNextSibling();
 
         if (nextNode == null) {
             nextNode = annotation.getParent().getNextSibling();
         }
 
         return annotationLineNo == nextNode.getLineNo();
     }
 
     /**
      * Checks whether position of annotation is allowed.
      * @param annotation annotation token.
      * @param allowedPositions an array of allowed annotation positions.
      * @return true if position of annotation is allowed.
      */
-    public static boolean isAllowedPosition(DetailAST annotation, int... allowedPositions) {
+    private static boolean isAllowedPosition(DetailAST annotation, int... allowedPositions) {
         boolean allowed = false;
         for (int position : allowedPositions) {
             if (isInSpecificCodeBlock(annotation, position)) {
                 allowed = true;
                 break;
             }
         }
         return allowed;
     }
 
     /**
      * Checks whether the scope of a node is restricted to a specific code block.
      * @param node node.
      * @param blockType block type.
      * @return true if the scope of a node is restricted to a specific code block.
      */
     private static boolean isInSpecificCodeBlock(DetailAST node, int blockType) {
         boolean returnValue = false;
         for (DetailAST token = node.getParent(); token != null; token = token.getParent()) {
             final int type = token.getType();
             if (type == blockType) {
                 returnValue = true;
                 break;
             }
         }
         return returnValue;
     }
 }
