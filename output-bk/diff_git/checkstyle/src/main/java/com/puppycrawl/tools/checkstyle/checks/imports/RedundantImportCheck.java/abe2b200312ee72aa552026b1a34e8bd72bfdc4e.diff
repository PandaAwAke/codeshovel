diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java
index 4d8569b9f..ee08f09a7 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java
@@ -31,100 +31,109 @@ import java.util.Set;
  * Checks for imports that are redundant. An import statement is
  * considered redundant if:
  * </p>
  *<ul>
  *  <li>It is a duplicate of another import. This is, when a class is imported
  *  more than once.</li>
  *  <li>The class non-statically imported is from the <code>java.lang</code>
  *  package. For example importing <code>java.lang.String</code>.</li>
  *  <li>The class non-statically imported is from the same package as the
  *  current package.</li>
  *</ul>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="RedundantImport"/&gt;
  * </pre>
  *
  * Compatible with Java 1.5 source.
  *
  * @author Oliver Burn
  * @version 1.0
  */
 public class RedundantImportCheck
     extends Check
 {
     /** name of package in file */
     private String pkgName;
     /** set of the imports */
     private final Set<FullIdent> imports = Sets.newHashSet();
     /** set of static imports */
     private final Set<FullIdent> staticImports = Sets.newHashSet();
 
     @Override
     public void beginTree(DetailAST aRootAST)
     {
         pkgName = null;
         imports.clear();
         staticImports.clear();
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[]
         {TokenTypes.IMPORT,
          TokenTypes.STATIC_IMPORT,
          TokenTypes.PACKAGE_DEF, };
     }
 
+    @Override
+    public int[] getAcceptableTokens()
+    {
+        return new int[]
+        {TokenTypes.IMPORT,
+         TokenTypes.STATIC_IMPORT,
+         TokenTypes.PACKAGE_DEF, };
+    }
+
     @Override
     public void visitToken(DetailAST ast)
     {
         if (ast.getType() == TokenTypes.PACKAGE_DEF) {
             pkgName = FullIdent.createFullIdent(
                     ast.getLastChild().getPreviousSibling()).getText();
         }
         else if (ast.getType() == TokenTypes.IMPORT) {
             final FullIdent imp = FullIdent.createFullIdentBelow(ast);
             if (fromPackage(imp.getText(), "java.lang")) {
                 log(ast.getLineNo(), ast.getColumnNo(), "import.lang",
                     imp.getText());
             }
             else if (fromPackage(imp.getText(), pkgName)) {
                 log(ast.getLineNo(), ast.getColumnNo(), "import.same",
                     imp.getText());
             }
             // Check for a duplicate import
             for (FullIdent full : imports) {
                 if (imp.getText().equals(full.getText())) {
                     log(ast.getLineNo(), ast.getColumnNo(),
                             "import.duplicate", full.getLineNo(),
                             imp.getText());
                 }
             }
 
             imports.add(imp);
         }
         else {
             // Check for a duplicate static import
             final FullIdent imp =
                 FullIdent.createFullIdent(
                     ast.getLastChild().getPreviousSibling());
             for (FullIdent full : staticImports) {
                 if (imp.getText().equals(full.getText())) {
                     log(ast.getLineNo(), ast.getColumnNo(),
                         "import.duplicate", full.getLineNo(), imp.getText());
                 }
             }
 
             staticImports.add(imp);
         }
     }
 
     /**
      * Determines if an import statement is for types from a specified package.
      * @param importName the import name
      * @param pkg the package name
      * @return whether from the package
      */
