diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java
index 22f14f9dc..b17ec490a 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java
@@ -15,100 +15,106 @@
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.coding;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.ScopeUtils;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 import com.puppycrawl.tools.checkstyle.checks.CheckUtils;
 
 /**
  * <p>
  * Checks if any class or object member explicitly initialized
  * to default for its type value (<code>null</code> for object
  * references, zero for numeric types and <code>char</code>
  * and <code>false</code> for <code>boolean</code>.
  * </p>
  * <p>
  * Rationale: each instance variable gets
  * initialized twice, to the same value.  Java
  * initializes each instance variable to its default
  * value (0 or null) before performing any
  * initialization specified in the code.  So in this case,
  * x gets initialized to 0 twice, and bar gets initialized
  * to null twice.  So there is a minor inefficiency.  This style of
  * coding is a hold-over from C/C++ style coding,
  * and it shows that the developer isn't really confident that
  * Java really initializes instance variables to default
  * values.
  * </p>
  *
  * @author o_sukhodolsky
  */
 public class ExplicitInitializationCheck extends Check
 {
     @Override
     public final int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.VARIABLE_DEF};
     }
 
     @Override
     public final int[] getRequiredTokens()
     {
         return getDefaultTokens();
     }
 
+    @Override
+    public final int[] getAcceptableTokens()
+    {
+        return new int[] {TokenTypes.VARIABLE_DEF};
+    }
+
     @Override
     public void visitToken(DetailAST ast)
     {
         // do not check local variables and
         // fields declared in interface/annotations
         if (ScopeUtils.isLocalVariableDef(ast)
             || ScopeUtils.inInterfaceOrAnnotationBlock(ast))
         {
             return;
         }
 
         final DetailAST assign = ast.findFirstToken(TokenTypes.ASSIGN);
         if (assign == null) {
             // no assign - no check
             return;
         }
 
         final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
         if ((modifiers != null)
             && modifiers.branchContains(TokenTypes.FINAL))
         {
             // do not check final variables
             return;
         }
 
         final DetailAST type = ast.findFirstToken(TokenTypes.TYPE);
         final DetailAST ident = ast.findFirstToken(TokenTypes.IDENT);
         final DetailAST exprStart =
             assign.getFirstChild().getFirstChild();
         if (isObjectType(type)
             && (exprStart.getType() == TokenTypes.LITERAL_NULL))
         {
             log(ident, "explicit.init", ident.getText(), "null");
         }
 
         final int primitiveType = type.getFirstChild().getType();
         if ((primitiveType == TokenTypes.LITERAL_BOOLEAN)
             && (exprStart.getType() == TokenTypes.LITERAL_FALSE))
         {
             log(ident, "explicit.init", ident.getText(), "false");
         }
         if (isNumericType(primitiveType) && isZero(exprStart)) {
             log(ident, "explicit.init", ident.getText(), "0");
         }
         if ((primitiveType == TokenTypes.LITERAL_CHAR)
             && (isZero(exprStart)
                 || ((exprStart.getType() == TokenTypes.CHAR_LITERAL)
                 && "'\\0'".equals(exprStart.getText()))))
         {
             log(ident, "explicit.init", ident.getText(), "\\0");
