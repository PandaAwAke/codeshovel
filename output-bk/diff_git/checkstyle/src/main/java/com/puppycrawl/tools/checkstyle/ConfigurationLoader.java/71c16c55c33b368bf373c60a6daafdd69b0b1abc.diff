diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
index 6a226b593..2959416af 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
@@ -62,165 +62,172 @@ public final class ConfigurationLoader {
         "-//Puppy Crawl//DTD Check Configuration 1.0//EN";
 
     /** the resource for version 1_0 of the configuration dtd */
     private static final String DTD_RESOURCE_NAME_1_0 =
         "com/puppycrawl/tools/checkstyle/configuration_1_0.dtd";
 
     /** the public ID for version 1_1 of the configuration dtd */
     private static final String DTD_PUBLIC_ID_1_1 =
         "-//Puppy Crawl//DTD Check Configuration 1.1//EN";
 
     /** the resource for version 1_1 of the configuration dtd */
     private static final String DTD_RESOURCE_NAME_1_1 =
         "com/puppycrawl/tools/checkstyle/configuration_1_1.dtd";
 
     /** the public ID for version 1_2 of the configuration dtd */
     private static final String DTD_PUBLIC_ID_1_2 =
         "-//Puppy Crawl//DTD Check Configuration 1.2//EN";
 
     /** the resource for version 1_2 of the configuration dtd */
     private static final String DTD_RESOURCE_NAME_1_2 =
         "com/puppycrawl/tools/checkstyle/configuration_1_2.dtd";
 
     /** the public ID for version 1_3 of the configuration dtd */
     private static final String DTD_PUBLIC_ID_1_3 =
         "-//Puppy Crawl//DTD Check Configuration 1.3//EN";
 
     /** the resource for version 1_3 of the configuration dtd */
     private static final String DTD_RESOURCE_NAME_1_3 =
         "com/puppycrawl/tools/checkstyle/configuration_1_3.dtd";
 
     /**
      * Implements the SAX document handler interfaces, so they do not
      * appear in the public API of the ConfigurationLoader.
      */
     private final class InternalLoader
         extends AbstractLoader {
         /** module elements */
         private static final String MODULE = "module";
         /** name attribute */
         private static final String NAME = "name";
         /** property element */
         private static final String PROPERTY = "property";
         /** value attribute */
         private static final String VALUE = "value";
         /** default attribute */
         private static final String DEFAULT = "default";
         /** name of the severity property */
         private static final String SEVERITY = "severity";
         /** name of the message element */
         private static final String MESSAGE = "message";
+        /** name of the message element */
+        private static final String METADATA = "metadata";
         /** name of the key attribute */
         private static final String KEY = "key";
 
         /**
          * Creates a new InternalLoader.
          * @throws SAXException if an error occurs
          * @throws ParserConfigurationException if an error occurs
          */
         public InternalLoader()
             throws SAXException, ParserConfigurationException {
             // super(DTD_PUBLIC_ID_1_1, DTD_RESOURCE_NAME_1_1);
             super(createIdToResourceNameMap());
         }
 
         @Override
         public void startElement(String namespaceURI,
                                  String localName,
                                  String qName,
                                  Attributes atts)
             throws SAXException {
             if (qName.equals(MODULE)) {
                 //create configuration
                 final String name = atts.getValue(NAME);
                 final DefaultConfiguration conf =
                     new DefaultConfiguration(name);
 
                 if (configuration == null) {
                     configuration = conf;
                 }
 
                 //add configuration to it's parent
                 if (!configStack.isEmpty()) {
                     final DefaultConfiguration top =
                         configStack.peek();
                     top.addChild(conf);
                 }
 
                 configStack.push(conf);
             }
             else if (qName.equals(PROPERTY)) {
                 //extract value and name
                 final String value;
                 try {
                     value = replaceProperties(atts.getValue(VALUE),
                         overridePropsResolver, atts.getValue(DEFAULT));
                 }
                 catch (final CheckstyleException ex) {
                     throw new SAXException(ex.getMessage());
                 }
                 final String name = atts.getValue(NAME);
 
                 //add to attributes of configuration
                 final DefaultConfiguration top =
                     configStack.peek();
                 top.addAttribute(name, value);
             }
             else if (qName.equals(MESSAGE)) {
                 //extract key and value
                 final String key = atts.getValue(KEY);
                 final String value = atts.getValue(VALUE);
 
                 //add to messages of configuration
                 final DefaultConfiguration top = configStack.peek();
                 top.addMessage(key, value);
             }
+            else {
+                if (!qName.equals(METADATA)) {
+                    throw new IllegalStateException("Unknown name:" + qName + ".");
+                }
+            }
         }
 
         @Override
         public void endElement(String namespaceURI,
                                String localName,
                                String qName)
             throws SAXException {
             if (qName.equals(MODULE)) {
 
                 final Configuration recentModule =
                     configStack.pop();
 
                 // remove modules with severity ignore if these modules should
                 // be omitted
                 SeverityLevel level = null;
                 try {
                     final String severity = recentModule.getAttribute(SEVERITY);
                     level = SeverityLevel.getInstance(severity);
                 }
                 catch (final CheckstyleException e) {
                     LOG.debug("Severity not set, ignoring exception", e);
                 }
 
                 // omit this module if these should be omitted and the module
                 // has the severity 'ignore'
                 final boolean omitModule = omitIgnoredModules
                     && SeverityLevel.IGNORE == level;
 
                 if (omitModule && !configStack.isEmpty()) {
                     final DefaultConfiguration parentModule =
                         configStack.peek();
                     parentModule.removeChild(recentModule);
                 }
             }
         }
 
     }
 
     /** the SAX document handler */
     private final InternalLoader saxHandler;
 
     /** property resolver **/
     private final PropertyResolver overridePropsResolver;
     /** the loaded configurations **/
     private final Deque<DefaultConfiguration> configStack = new ArrayDeque<>();
     /** the Configuration that is being built */
     private Configuration configuration;
 
     /** flags if modules with the severity 'ignore' should be omitted. */
     private final boolean omitIgnoredModules;
@@ -253,194 +260,183 @@ public final class ConfigurationLoader {
         map.put(DTD_PUBLIC_ID_1_3, DTD_RESOURCE_NAME_1_3);
         return map;
     }
 
     /**
      * Parses the specified input source loading the configuration information.
      * The stream wrapped inside the source, if any, is NOT
      * explicitely closed after parsing, it is the responsibility of
      * the caller to close the stream.
      *
      * @param source the source that contains the configuration data
      * @throws IOException if an error occurs
      * @throws SAXException if an error occurs
      */
     private void parseInputSource(InputSource source)
         throws IOException, SAXException {
         saxHandler.parseInputSource(source);
     }
 
     /**
      * Returns the module configurations in a specified file.
      * @param config location of config file, can be either a URL or a filename
      * @param overridePropsResolver overriding properties
      * @return the check configurations
      * @throws CheckstyleException if an error occurs
      */
     public static Configuration loadConfiguration(String config,
             PropertyResolver overridePropsResolver) throws CheckstyleException {
         return loadConfiguration(config, overridePropsResolver, false);
     }
 
     /**
      * Returns the module configurations in a specified file.
      *
      * @param config location of config file, can be either a URL or a filename
      * @param overridePropsResolver overriding properties
      * @param omitIgnoredModules <code>true</code> if modules with severity
      *            'ignore' should be omitted, <code>false</code> otherwise
      * @return the check configurations
      * @throws CheckstyleException if an error occurs
      */
     public static Configuration loadConfiguration(String config,
         PropertyResolver overridePropsResolver, boolean omitIgnoredModules)
         throws CheckstyleException {
         // figure out if this is a File or a URL
         URI uri;
         try {
             final URL url = new URL(config);
             uri = url.toURI();
         }
-        catch (final MalformedURLException ex) {
-            uri = null;
-        }
-        catch (final URISyntaxException ex) {
-            // URL violating RFC 2396
+        catch (final URISyntaxException | MalformedURLException ex) {
             uri = null;
         }
+
         if (uri == null) {
             final File file = new File(config);
             if (file.exists()) {
                 uri = file.toURI();
             }
             else {
                 // check to see if the file is in the classpath
                 try {
                     final URL configUrl = ConfigurationLoader.class
                             .getResource(config);
                     if (configUrl == null) {
                         throw new CheckstyleException("unable to find " + config);
                     }
                     uri = configUrl.toURI();
                 }
                 catch (final URISyntaxException e) {
-                    throw new CheckstyleException("unable to find " + config);
+                    throw new CheckstyleException("unable to find " + config, e);
                 }
             }
         }
         final InputSource source = new InputSource(uri.toString());
         return loadConfiguration(source, overridePropsResolver,
                 omitIgnoredModules);
     }
 
     /**
      * Returns the module configurations from a specified input stream.
      * Note that clients are required to close the given stream by themselves
      *
      * @param configStream the input stream to the Checkstyle configuration
      * @param overridePropsResolver overriding properties
      * @param omitIgnoredModules <code>true</code> if modules with severity
      *            'ignore' should be omitted, <code>false</code> otherwise
      * @return the check configurations
      * @throws CheckstyleException if an error occurs
      *
      * @deprecated As this method does not provide a valid system ID,
      *   preventing resolution of external entities, a
      *   {@link #loadConfiguration(InputSource,PropertyResolver,boolean)
      *          version using an InputSource}
      *   should be used instead
      */
     @Deprecated
     public static Configuration loadConfiguration(InputStream configStream,
         PropertyResolver overridePropsResolver, boolean omitIgnoredModules)
         throws CheckstyleException {
         return loadConfiguration(new InputSource(configStream),
                                  overridePropsResolver, omitIgnoredModules);
     }
 
     /**
      * Returns the module configurations from a specified input source.
      * Note that if the source does wrap an open byte or character
      * stream, clients are required to close that stream by themselves
      *
      * @param configSource the input stream to the Checkstyle configuration
      * @param overridePropsResolver overriding properties
      * @param omitIgnoredModules <code>true</code> if modules with severity
      *            'ignore' should be omitted, <code>false</code> otherwise
      * @return the check configurations
      * @throws CheckstyleException if an error occurs
      */
     public static Configuration loadConfiguration(InputSource configSource,
         PropertyResolver overridePropsResolver, boolean omitIgnoredModules)
         throws CheckstyleException {
         try {
             final ConfigurationLoader loader =
                 new ConfigurationLoader(overridePropsResolver,
                                         omitIgnoredModules);
             loader.parseInputSource(configSource);
             return loader.getConfiguration();
         }
-        catch (final ParserConfigurationException e) {
-            throw new CheckstyleException(
-                "unable to parse configuration stream", e);
-        }
         catch (final SAXParseException e) {
             throw new CheckstyleException("unable to parse configuration stream"
                     + " - " + e.getMessage() + ":" + e.getLineNumber()
                     + ":" + e.getColumnNumber(), e);
         }
-        catch (final SAXException e) {
-            throw new CheckstyleException("unable to parse configuration stream"
-                    + " - " + e.getMessage(), e);
-        }
-        catch (final IOException e) {
-            throw new CheckstyleException("unable to read from stream", e);
+        catch (final ParserConfigurationException | IOException | SAXException e) {
+            throw new CheckstyleException("unable to parse configuration stream", e);
         }
     }
 
     /**
      * Returns the configuration in the last file parsed.
      * @return Configuration object
      */
     private Configuration getConfiguration() {
         return configuration;
     }
 
     /**
      * Replaces <code>${xxx}</code> style constructions in the given value
      * with the string value of the corresponding data types.
      *
      * The method is package visible to facilitate testing.
      *
      * @param value The string to be scanned for property references.
      *              May be <code>null</code>, in which case this
      *              method returns immediately with no effect.
      * @param props Mapping (String to String) of property names to their
      *              values. Must not be <code>null</code>.
      * @param defaultValue default to use if one of the properties in value
      *              cannot be resolved from props.
      *
      * @return the original string with the properties replaced, or
      *         <code>null</code> if the original string is <code>null</code>.
      * @throws CheckstyleException if the string contains an opening
      *                           <code>${</code> without a closing
      *                           <code>}</code>
      *
      * Code copied from ant -
      * http://cvs.apache.org/viewcvs/jakarta-ant/src/main/org/apache/tools/ant/ProjectHelper.java
      */
     // Package visible for testing purposes
     static String replaceProperties(
             String value, PropertyResolver props, String defaultValue)
         throws CheckstyleException {
         if (value == null) {
             return null;
         }
 
         final List<String> fragments = Lists.newArrayList();
         final List<String> propertyRefs = Lists.newArrayList();
         parsePropertyString(value, fragments, propertyRefs);
 
         final StringBuilder sb = new StringBuilder();
         final Iterator<String> i = fragments.iterator();
         final Iterator<String> j = propertyRefs.iterator();
         while (i.hasNext()) {
