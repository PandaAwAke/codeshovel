diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java
index 563f870ad..6a61b7b1d 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java
@@ -59,122 +59,122 @@ public class JTreeTable extends JTable {
     private static final long serialVersionUID = -8493693409423365387L;
     /** A subclass of JTree. */
     private final TreeTableCellRenderer tree;
     /** JTextArea editor. */
     private JTextArea editor;
     /** Line position map. */
     private List<Integer> linePositionMap;
 
     /**
      * Creates JTreeTable base on TreeTableModel.
      * @param treeTableModel Tree table model
      */
     public JTreeTable(ParseTreeTableModel treeTableModel) {
 
         // Create the tree. It will be used as a renderer and editor.
         tree = new TreeTableCellRenderer(this, treeTableModel);
 
         // Install a tableModel representing the visible rows in the tree.
         setModel(new TreeTableModelAdapter(treeTableModel, tree));
 
         // Force the JTable and JTree to share their row selection models.
         final ListToTreeSelectionModelWrapper selectionWrapper = new
                 ListToTreeSelectionModelWrapper(this);
         tree.setSelectionModel(selectionWrapper);
         setSelectionModel(selectionWrapper.getListSelectionModel());
 
         // Install the tree editor renderer and editor.
         setDefaultRenderer(ParseTreeTableModel.class, tree);
         setDefaultEditor(ParseTreeTableModel.class, new TreeTableCellEditor());
 
         // No grid.
         setShowGrid(false);
 
         // No intercell spacing
         setIntercellSpacing(new Dimension(0, 0));
 
         // And update the height of the trees row to match that of
         // the table.
         if (tree.getRowHeight() < 1) {
             // Metal looks better like this.
             setRowHeight(getRowHeight());
         }
 
         setColumnsInitialWidth();
 
         final Action expand = new AbstractAction() {
             private static final long serialVersionUID = -5859674518660156121L;
 
             @Override
             public void actionPerformed(ActionEvent event) {
-                doExpandByEnter();
+                expandSelectedNode();
             }
         };
         final KeyStroke stroke = KeyStroke.getKeyStroke("ENTER");
         final String command = "expand/collapse";
         getInputMap().put(stroke, command);
         getActionMap().put(command, expand);
 
         addMouseListener(new MouseAdapter() {
             @Override
             public void mouseClicked(MouseEvent event) {
                 if (event.getClickCount() == 2) {
-                    makeCodeSelection();
+                    expandSelectedNode();
                 }
             }
         });
     }
 
     /**
-     * Do expansion of a tree node after pressing ENTER.
+     * Do expansion of a tree node.
      */
-    private void doExpandByEnter() {
+    private void expandSelectedNode() {
         final TreePath selected = makeCodeSelection();
 
         if (tree.isExpanded(selected)) {
             tree.collapsePath(selected);
         }
         else {
             tree.expandPath(selected);
         }
         tree.setSelectionPath(selected);
     }
 
     /**
      * Make selection of code in a text area.
      * @return selected TreePath.
      */
     private TreePath makeCodeSelection() {
         final TreePath selected = tree.getSelectionPath();
         final DetailAST ast = (DetailAST) selected.getLastPathComponent();
         new CodeSelector(ast, editor, linePositionMap).select();
         return selected;
     }
 
     /**
      * Set initial value of width for columns in table.
      */
     private void setColumnsInitialWidth() {
         final FontMetrics fontMetrics = getFontMetrics(getFont());
         // Six character string to contain "Column" column.
         final int widthOfSixCharacterString = fontMetrics.stringWidth("XXXXXX");
         // Padding must be added to width for columns to make them fully
         // visible in table header.
         final int padding = 10;
         final int widthOfColumnContainingSixCharacterString =
                 widthOfSixCharacterString + padding;
         getColumn("Line").setMaxWidth(widthOfColumnContainingSixCharacterString);
         getColumn("Column").setMaxWidth(widthOfColumnContainingSixCharacterString);
         final int preferredTreeColumnWidth =
                 Ints.checkedCast(Math.round(getPreferredSize().getWidth() * 0.6));
         getColumn("Tree").setPreferredWidth(preferredTreeColumnWidth);
         // Twenty eight character string to contain "Type" column
         final int widthOfTwentyEightCharacterString =
                 fontMetrics.stringWidth("XXXXXXXXXXXXXXXXXXXXXXXXXXXX");
         final int preferredTypeColumnWidth = widthOfTwentyEightCharacterString + padding;
         getColumn("Type").setPreferredWidth(preferredTypeColumnWidth);
     }
 
     /**
      * Overridden to message super and forward the method to the tree.
      * Since the tree is not actually in the component hierarchy it will
      * never receive this unless we forward it in this manner.
