diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
index e87d341b4..8965e6abe 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
@@ -44,221 +44,267 @@ import com.google.common.collect.Sets;
 import com.google.common.io.Closeables;
 import com.google.common.io.Files;
 import com.puppycrawl.tools.checkstyle.Definitions;
 import com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck;
 import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
 import com.puppycrawl.tools.checkstyle.api.MessageDispatcher;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 
 /**
  * <p>
  * The TranslationCheck class helps to ensure the correct translation of code by
  * checking locale-specific resource files for consistency regarding their keys.
  * Two locale-specific resource files describing one and the same context are consistent if they
  * contain the same keys. TranslationCheck also can check an existence of required translations
  * which must exist in project, if 'requiredTranslations' option is used.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="Translation"/&gt;
  * </pre>
  * Check has the following options:
  *
  * <p><b>baseName</b> - a base name regexp for resource bundles which contain message resources. It
  * helps the check to distinguish config and localization resources. Default value is
  * <b>^messages.*$</b>
  * <p>An example of how to configure the check to validate only bundles which base names start with
  * "ButtonLabels":
  * </p>
  * <pre>
  * &lt;module name="Translation"&gt;
  *     &lt;property name="baseName" value="^ButtonLabels.*$"/&gt;
  * &lt;module/&gt;
  * </pre>
  * <p>To configure the check to check only files which have '.properties' and '.translations'
  * extensions:
  * </p>
  * <pre>
  * &lt;module name="Translation"&gt;
  *     &lt;property name="fileExtensions" value="properties, translations"/&gt;
  * &lt;module/&gt;
  * </pre>
  *
  * <p><b>requiredTranslations</b> which allows to specify language codes of required translations
  * which must exist in project. Language code is composed of the lowercase, two-letter codes as
  * defined by <a href="https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes">ISO 639-1</a>.
  * Default value is <b>empty String Set</b> which means that only the existence of
  * default translation is checked. Note, if you specify language codes (or just one language
  * code) of required translations the check will also check for existence of default translation
- * files in project.
+ * files in project. ATTENTION: the check will perform the validation of ISO codes if the option
+ * is used. So, if you specify, for example, "mm" for language code, TranslationCheck will rise
+ * violation that the language code is incorrect.
  * <br>
  *
  * @author Alexandra Bunge
  * @author lkuehne
  * @author Andrei Selkin
  */
 public class TranslationCheck extends AbstractFileSetCheck {
 
     /**
      * A key is pointing to the warning message text for missing key
      * in "messages.properties" file.
      */
     public static final String MSG_KEY = "translation.missingKey";
 
     /**
      * A key is pointing to the warning message text for missing translation file
      * in "messages.properties" file.
      */
     public static final String MSG_KEY_MISSING_TRANSLATION_FILE =
         "translation.missingTranslationFile";
 
+    /** Resource bundle which contains messages for TranslationCheck. */
+    private static final String TRANSLATION_BUNDLE =
+        "com.puppycrawl.tools.checkstyle.checks.messages";
+
+    /**
+     * A key is pointing to the warning message text for wrong language code
+     * in "messages.properties" file.
+     */
+    private static final String WRONG_LANGUAGE_CODE_KEY = "translation.wrongLanguageCode";
+
     /** Logger for TranslationCheck. */
     private static final Log LOG = LogFactory.getLog(TranslationCheck.class);
 
     /**
      * Regexp string for default tranlsation files.
      * For example, messages.properties.
      */
     private static final String DEFAULT_TRANSLATION_REGEXP = "^.+\\..+$";
 
     /**
      * Regexp pattern for bundles names wich end with language code, followed by country code and
      * variant suffix. For example, messages_es_ES_UNIX.properties.
      */
     private static final Pattern LANGUAGE_COUNTRY_VARIANT_PATTERN =
         CommonUtils.createPattern("^.+\\_[a-z]{2}\\_[A-Z]{2}\\_[A-Za-z]+\\..+$");
     /**
      * Regexp pattern for bundles names wich end with language code, followed by country code
      * suffix. For example, messages_es_ES.properties.
      */
     private static final Pattern LANGUAGE_COUNTRY_PATTERN =
         CommonUtils.createPattern("^.+\\_[a-z]{2}\\_[A-Z]{2}\\..+$");
     /**
      * Regexp pattern for bundles names wich end with language code suffix.
      * For example, messages_es.properties.
      */
     private static final Pattern LANGUAGE_PATTERN =
         CommonUtils.createPattern("^.+\\_[a-z]{2}\\..+$");
 
     /** File name format for default translation. */
     private static final String DEFAULT_TRANSLATION_FILE_NAME_FORMATTER = "%s.%s";
     /** File name format with language code. */
     private static final String FILE_NAME_WITH_LANGUAGE_CODE_FORMATTER = "%s_%s.%s";
 
     /** Formatting string to form regexp to validate required tranlsations file names. */
     private static final String REGEXP_FORMAT_TO_CHECK_REQUIRED_TRANSLATIONS =
         "^%1$s\\_%2$s(\\_[A-Z]{2})?\\.%3$s$|^%1$s\\_%2$s\\_[A-Z]{2}\\_[A-Za-z]+\\.%3$s$";
     /** Formatting string to form regexp to validate default tranlsations file names. */
     private static final String REGEXP_FORMAT_TO_CHECK_DEFAULT_TRANSLATIONS = "^%s\\.%s$";
 
     /** The files to process. */
     private final Set<File> filesToProcess = Sets.newHashSet();
 
     /** The base name regexp pattern. */
     private Pattern baseNamePattern;
 
     /**
      * Language codes of required translations for the check (de, pt, ja, etc).
      */
     private SortedSet<String> requiredTranslations = Sets.newTreeSet();
 
     /**
      * Creates a new {@code TranslationCheck} instance.
      */
     public TranslationCheck() {
         setFileExtensions("properties");
         baseNamePattern = CommonUtils.createPattern("^messages.*$");
     }
 
     /**
      * Sets the base name regexp pattern.
      * @param baseName base name regexp.
      */
     public void setBaseName(String baseName) {
         baseNamePattern = CommonUtils.createPattern(baseName);
     }
 
     /**
      * Sets language codes of required translations for the check.
      * @param translationCodes a comma separated list of language codes.
      */
     public void setRequiredTranslations(String translationCodes) {
         requiredTranslations = Sets.newTreeSet(Splitter.on(',')
             .trimResults().omitEmptyStrings().split(translationCodes));
+        validateUserSpecifiedLanguageCodes(requiredTranslations);
     }
 
     @Override
     public void beginProcessing(String charset) {
         super.beginProcessing(charset);
         filesToProcess.clear();
     }
 
     @Override
     protected void processFiltered(File file, List<String> lines) {
         // We just collecting files for processing at finishProcessing()
         filesToProcess.add(file);
     }
 
     @Override
     public void finishProcessing() {
         super.finishProcessing();
 
         final Set<ResourceBundle> bundles = groupFilesIntoBundles(filesToProcess, baseNamePattern);
         for (ResourceBundle currentBundle : bundles) {
             checkExistenceOfDefaultTranslation(currentBundle);
             checkExistenceOfRequiredTranslations(currentBundle);
             checkTranslationKeys(currentBundle);
         }
     }
 
+    /**
+     * Validates the correctness of user specififed language codes for the check.
+     * @param languageCodes user specified language codes for the check.
+     */
+    private void validateUserSpecifiedLanguageCodes(SortedSet<String> languageCodes) {
+        for (String code : languageCodes) {
+            if (!isValidLanguageCode(code)) {
+                final LocalizedMessage msg = new LocalizedMessage(0, TRANSLATION_BUNDLE,
+                    WRONG_LANGUAGE_CODE_KEY, new Object[] {code}, getId(), getClass(), null);
+                final String exceptionMessage = String.format(Locale.ROOT,
+                    "%s [%s]", msg.getMessage(), TranslationCheck.class.getSimpleName());
+                throw new IllegalArgumentException(exceptionMessage);
+            }
+        }
+    }
+
+    /**
+     * Checks whether user specified language code is correct (is contained in available locales).
+     * @param userSpecifiedLanguageCode user specified language code.
+     * @return true if user specified language code is correct.
+     */
+    private static boolean isValidLanguageCode(final String userSpecifiedLanguageCode) {
+        boolean valid = false;
+        final Locale[] locales = Locale.getAvailableLocales();
+        for (Locale locale : locales) {
+            if (userSpecifiedLanguageCode.equals(locale.toString())) {
+                valid = true;
+                break;
+            }
+        }
+        return valid;
+    }
+
     /**
      * Groups a set of files into bundles.
      * Only files, which names match base name regexp pattern will be grouped.
      * @param files set of files.
      * @param baseNameRegexp base name regexp pattern.
      * @return set of ResourceBundles.
      */
     private static Set<ResourceBundle> groupFilesIntoBundles(Set<File> files,
                                                              Pattern baseNameRegexp) {
         final Set<ResourceBundle> resourceBundles = Sets.newHashSet();
         for (File currentFile : files) {
             final String fileName = currentFile.getName();
             final String baseName = extractBaseName(fileName);
             final Matcher baseNameMatcher = baseNameRegexp.matcher(baseName);
             if (baseNameMatcher.matches()) {
                 final String extension = Files.getFileExtension(fileName);
                 final String path = getPath(currentFile.getAbsolutePath());
                 final ResourceBundle newBundle = new ResourceBundle(baseName, path, extension);
                 final Optional<ResourceBundle> bundle = findBundle(resourceBundles, newBundle);
                 if (bundle.isPresent()) {
                     bundle.get().addFile(currentFile);
                 }
                 else {
                     newBundle.addFile(currentFile);
                     resourceBundles.add(newBundle);
                 }
             }
         }
         return resourceBundles;
     }
 
     /**
      * Checks an existence of default translation file in the resource bundle.
      * @param bundle resource bundle.
      */
     private void checkExistenceOfDefaultTranslation(ResourceBundle bundle) {
         final Optional<String> fileName = getMissingFileName(bundle, null);
         if (fileName.isPresent()) {
             logMissingTranslation(bundle.getPath(), fileName.get());
         }
     }
 
     /**
      * Checks an existence of translation files in the resource bundle.
      * The name of translation file begins with the base name of resource bundle which is followed
      * by '_' and a language code (country and variant are optional), it ends with the extension
      * suffix.
      * @param bundle resource bundle.
      */
     private void checkExistenceOfRequiredTranslations(ResourceBundle bundle) {
