diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
index d28fd3640..98673ed24 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
@@ -196,211 +196,214 @@ public final class LocalizedMessage
      * @param sourceClass the name of the source for the message
      * @param customMessage optional custom message overriding the default
      */
     public LocalizedMessage(
         int lineNo,
         String bundle,
         String key,
         Object[] args,
         String moduleId,
         Class<?> sourceClass,
         String customMessage) {
         this(lineNo, 0, bundle, key, args, DEFAULT_SEVERITY, moduleId,
                 sourceClass, customMessage);
     }
 
     @Override
     public boolean equals(Object object) {
         if (this == object) {
             return true;
         }
         if (object == null || getClass() != object.getClass()) {
             return false;
         }
         final LocalizedMessage localizedMessage = (LocalizedMessage) object;
         return Objects.equals(lineNo, localizedMessage.lineNo)
                 && Objects.equals(colNo, localizedMessage.colNo)
                 && Objects.equals(severityLevel, localizedMessage.severityLevel)
                 && Objects.equals(moduleId, localizedMessage.moduleId)
                 && Objects.equals(key, localizedMessage.key)
                 && Objects.equals(bundle, localizedMessage.bundle)
                 && Objects.equals(sourceClass, localizedMessage.sourceClass)
                 && Objects.equals(customMessage, localizedMessage.customMessage)
                 && Arrays.equals(args, localizedMessage.args);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(lineNo, colNo, severityLevel, moduleId, key, bundle, sourceClass,
                 customMessage, Arrays.hashCode(args));
     }
 
     /** Clears the cache. */
     public static void clearCache() {
         synchronized (BUNDLE_CACHE) {
             BUNDLE_CACHE.clear();
         }
     }
 
     /** @return the translated message **/
     public String getMessage() {
-
-        final String message = getCustomMessage();
-        if (message != null) {
-            return message;
-        }
-
-        try {
-            // Important to use the default class loader, and not the one in
-            // the GlobalProperties object. This is because the class loader in
-            // the GlobalProperties is specified by the user for resolving
-            // custom classes.
-            final ResourceBundle resourceBundle = getBundle(this.bundle);
-            final String pattern = resourceBundle.getString(key);
-            return MessageFormat.format(pattern, args);
-        }
-        catch (final MissingResourceException ignored) {
-            // If the Check author didn't provide i18n resource bundles
-            // and logs error messages directly, this will return
-            // the author's original message
-            return MessageFormat.format(key, args);
+        String message = getCustomMessage();
+
+        if (message == null) {
+            try {
+                // Important to use the default class loader, and not the one in
+                // the GlobalProperties object. This is because the class loader in
+                // the GlobalProperties is specified by the user for resolving
+                // custom classes.
+                final ResourceBundle resourceBundle = getBundle(this.bundle);
+                final String pattern = resourceBundle.getString(key);
+                message = MessageFormat.format(pattern, args);
+            }
+            catch (final MissingResourceException ignored) {
+                // If the Check author didn't provide i18n resource bundles
+                // and logs error messages directly, this will return
+                // the author's original message
+                message = MessageFormat.format(key, args);
+            }
         }
+        return message;
     }
 
     /**
      * Returns the formatted custom message if one is configured.
      * @return the formatted custom message or {@code null}
      *          if there is no custom message
      */
     private String getCustomMessage() {
 
         if (customMessage == null) {
             return null;
         }
 
         return MessageFormat.format(customMessage, args);
     }
 
     /**
      * Find a ResourceBundle for a given bundle name. Uses the classloader
      * of the class emitting this message, to be sure to get the correct
      * bundle.
      * @param bundleName the bundle name
      * @return a ResourceBundle
      */
     private ResourceBundle getBundle(String bundleName) {
         synchronized (BUNDLE_CACHE) {
             ResourceBundle resourceBundle = BUNDLE_CACHE
                     .get(bundleName);
             if (resourceBundle == null) {
                 resourceBundle = ResourceBundle.getBundle(bundleName, sLocale,
                         sourceClass.getClassLoader(), new UTF8Control());
                 BUNDLE_CACHE.put(bundleName, resourceBundle);
             }
             return resourceBundle;
         }
     }
 
     /** @return the line number **/
     public int getLineNo() {
         return lineNo;
     }
 
     /** @return the column number **/
     public int getColumnNo() {
         return colNo;
     }
 
     /** @return the severity level **/
     public SeverityLevel getSeverityLevel() {
         return severityLevel;
     }
 
     /** @return the module identifier. */
     public String getModuleId() {
         return moduleId;
     }
 
     /**
      * Returns the message key to locate the translation, can also be used
      * in IDE plugins to map error messages to corrective actions.
      *
      * @return the message key
      */
     public String getKey() {
         return key;
     }
 
     /** @return the name of the source for this LocalizedMessage */
     public String getSourceName() {
         return sourceClass.getName();
     }
 
     /** @param locale the locale to use for localization **/
     public static void setLocale(Locale locale) {
         if (Locale.ENGLISH.getLanguage().equals(locale.getLanguage())) {
             sLocale = Locale.ROOT;
         }
         else {
             sLocale = locale;
         }
     }
 
     ////////////////////////////////////////////////////////////////////////////
     // Interface Comparable methods
     ////////////////////////////////////////////////////////////////////////////
 
     @Override
     public int compareTo(LocalizedMessage other) {
+        int result = Integer.compare(getLineNo(), other.getLineNo());
+
         if (getLineNo() == other.getLineNo()) {
             if (getColumnNo() == other.getColumnNo()) {
-                return getMessage().compareTo(other.getMessage());
+                result = getMessage().compareTo(other.getMessage());
+            }
+            else {
+                result = Integer.compare(getColumnNo(), other.getColumnNo());
             }
-            return Integer.compare(getColumnNo(), other.getColumnNo());
         }
-        return Integer.compare(getLineNo(), other.getLineNo());
+        return result;
     }
 
     /**
      * <p>
      * Custom ResourceBundle.Control implementation which allows explicitly read
      * the properties files as UTF-8
      * </p>
      *
      * @author <a href="mailto:nesterenko-aleksey@list.ru">Aleksey Nesterenko</a>
      */
     protected static class UTF8Control extends Control {
         @Override
         public ResourceBundle newBundle(String aBaseName, Locale aLocale, String aFormat,
                  ClassLoader aLoader, boolean aReload) throws IOException {
             // The below is a copy of the default implementation.
             final String bundleName = toBundleName(aBaseName, aLocale);
             final String resourceName = toResourceName(bundleName, "properties");
             InputStream stream = null;
             if (aReload) {
                 final URL url = aLoader.getResource(resourceName);
                 if (url != null) {
                     final URLConnection connection = url.openConnection();
                     if (connection != null) {
                         connection.setUseCaches(false);
                         stream = connection.getInputStream();
                     }
                 }
             }
             else {
                 stream = aLoader.getResourceAsStream(resourceName);
             }
             ResourceBundle resourceBundle = null;
             if (stream != null) {
                 final Reader streamReader = new InputStreamReader(stream, "UTF-8");
                 try {
                     // Only this line is changed to make it to read properties files as UTF-8.
                     resourceBundle = new PropertyResourceBundle(streamReader);
                 }
                 finally {
                     stream.close();
                 }
             }
             return resourceBundle;
         }
     }
 }
