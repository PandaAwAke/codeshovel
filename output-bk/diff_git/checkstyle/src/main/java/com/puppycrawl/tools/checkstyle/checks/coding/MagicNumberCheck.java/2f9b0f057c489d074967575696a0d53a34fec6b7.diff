diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java
index 7ed85eb51..e4a172230 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java
@@ -20,101 +20,101 @@ package com.puppycrawl.tools.checkstyle.checks.coding;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.ScopeUtils;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.checks.CheckUtils;
 import java.util.Arrays;
 
 /**
  * <p>
  * Checks for magic numbers.
  * </p>
  * <p>
  * An example of how to configure the check to ignore
  * numbers 0, 1, 1.5, 2:
  * </p>
  * <pre>
  * &lt;module name="MagicNumber"&gt;
  *    &lt;property name="ignoreNumbers" value="0, 1, 1.5, 2"/&gt;
  *    &lt;property name="ignoreHashCodeMethod" value="true"/&gt;
  * &lt;/module&gt;
  * </pre>
  * @author Rick Giles
  * @author Lars Kühne
  * @author Daniel Solano Gómez
  */
 public class MagicNumberCheck extends Check
 {
     /**
      * The token types that are allowed in the AST path from the
      * number literal to the enclosing constant definition.
      */
     private static final int[] ALLOWED_PATH_TOKENTYPES = {
         TokenTypes.ASSIGN,
         TokenTypes.ARRAY_INIT,
         TokenTypes.EXPR,
         TokenTypes.UNARY_PLUS,
         TokenTypes.UNARY_MINUS,
         TokenTypes.TYPECAST,
         TokenTypes.ELIST,
         TokenTypes.LITERAL_NEW,
         TokenTypes.METHOD_CALL,
         TokenTypes.STAR,
     };
 
     static {
         Arrays.sort(ALLOWED_PATH_TOKENTYPES);
     }
 
     /** the numbers to ignore in the check, sorted */
-    private double[] mIgnoreNumbers = {-1, 0, 1, 2};
+    private double[] ignoreNumbers = {-1, 0, 1, 2};
     /** Whether to ignore magic numbers in a hash code method. */
     private boolean ignoreHashCodeMethod;
     /** Whether to ignore magic numbers in annotation. */
     private boolean ignoreAnnotation;
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.NUM_DOUBLE,
             TokenTypes.NUM_FLOAT,
             TokenTypes.NUM_INT,
             TokenTypes.NUM_LONG,
         };
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
         if (ignoreAnnotation && isInAnnotation(ast)) {
             return;
         }
 
         if (inIgnoreList(ast)
             || (ignoreHashCodeMethod && isInHashCodeMethod(ast)))
         {
             return;
         }
 
         final DetailAST constantDefAST = findContainingConstantDef(ast);
 
         if (constantDefAST == null) {
             reportMagicNumber(ast);
         }
         else {
             DetailAST astNode = ast.getParent();
             while (astNode != constantDefAST) {
                 final int type = astNode.getType();
                 if (Arrays.binarySearch(ALLOWED_PATH_TOKENTYPES, type) < 0) {
                     reportMagicNumber(ast);
                     break;
                 }
 
                 astNode = astNode.getParent();
             }
         }
     }
 
     /**
      * Finds the constant definition that contains aAST.
@@ -193,110 +193,110 @@ public class MagicNumberCheck extends Check
         // if not in a code block, can't be in hashCode()
         if (!ScopeUtils.inCodeBlock(ast)) {
             return false;
         }
 
         // find the method definition AST
         DetailAST methodDefAST = ast.getParent();
         while ((null != methodDefAST)
                 && (TokenTypes.METHOD_DEF != methodDefAST.getType()))
         {
             methodDefAST = methodDefAST.getParent();
         }
 
         if (null == methodDefAST) {
             return false;
         }
 
         // Check for 'hashCode' name.
         final DetailAST identAST =
             methodDefAST.findFirstToken(TokenTypes.IDENT);
         if (!"hashCode".equals(identAST.getText())) {
             return false;
         }
 
         // Check for no arguments.
         final DetailAST paramAST =
             methodDefAST.findFirstToken(TokenTypes.PARAMETERS);
         if (0 != paramAST.getChildCount()) {
             return false;
         }
 
         // we are in a 'public int hashCode()' method! The compiler will ensure
         // the method returns an 'int' and is public.
         return true;
     }
 
     /**
      * Decides whether the number of an AST is in the ignore list of this
      * check.
      * @param ast the AST to check
      * @return true if the number of ast is in the ignore list of this
      * check.
      */
     private boolean inIgnoreList(DetailAST ast)
     {
         double value = CheckUtils.parseDouble(ast.getText(), ast.getType());
         final DetailAST parent = ast.getParent();
         if (parent.getType() == TokenTypes.UNARY_MINUS) {
             value = -1 * value;
         }
-        return (Arrays.binarySearch(mIgnoreNumbers, value) >= 0);
+        return (Arrays.binarySearch(ignoreNumbers, value) >= 0);
     }
 
     /**
      * Sets the numbers to ignore in the check.
      * BeanUtils converts numeric token list to double array automatically.
      * @param list list of numbers to ignore.
      */
     public void setIgnoreNumbers(double[] list)
     {
         if ((list == null) || (list.length == 0)) {
-            mIgnoreNumbers = new double[0];
+            ignoreNumbers = new double[0];
         }
         else {
-            mIgnoreNumbers = new double[list.length];
-            System.arraycopy(list, 0, mIgnoreNumbers, 0, list.length);
-            Arrays.sort(mIgnoreNumbers);
+            ignoreNumbers = new double[list.length];
+            System.arraycopy(list, 0, ignoreNumbers, 0, list.length);
+            Arrays.sort(ignoreNumbers);
         }
     }
 
     /**
      * Set whether to ignore hashCode methods.
      * @param ignoreHashCodeMethod decide whether to ignore
      * hash code methods
      */
     public void setIgnoreHashCodeMethod(boolean ignoreHashCodeMethod)
     {
         this.ignoreHashCodeMethod = ignoreHashCodeMethod;
     }
 
     /**
      * Set whether to ignore Annotations.
      * @param ignoreAnnotation decide whether to ignore annotations
      */
     public void setIgnoreAnnotation(boolean ignoreAnnotation)
     {
         this.ignoreAnnotation = ignoreAnnotation;
     }
 
     /**
      * Determines if the column displays a token type of annotation or
      * annotation member
      *
      * @param ast the AST from which to search for annotations
      *
      * @return {@code true} if the token type for this node is a annotation
      */
     private boolean isInAnnotation(DetailAST ast)
     {
         if ((null == ast.getParent())
                 || (null == ast.getParent().getParent()))
         {
             return false;
         }
 
         return (TokenTypes.ANNOTATION == ast.getParent().getParent().getType())
                 || (TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR
                         == ast.getParent().getParent().getType());
     }
 }
