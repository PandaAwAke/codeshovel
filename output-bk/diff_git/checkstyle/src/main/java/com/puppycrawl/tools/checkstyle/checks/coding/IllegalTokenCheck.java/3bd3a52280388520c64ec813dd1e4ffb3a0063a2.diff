diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenCheck.java
index d92f4f082..c32ba4800 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenCheck.java
@@ -58,62 +58,62 @@ public class IllegalTokenCheck
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "illegal.token";
 
     @Override
     public int[] getDefaultTokens() {
         return new int[] {
             TokenTypes.LABELED_STAT,
         };
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return TokenUtils.getAllTokenIds();
     }
 
     @Override
     public int[] getRequiredTokens() {
         return CommonUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public boolean isCommentNodesRequired() {
         return true;
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         log(
             ast.getLineNo(),
             ast.getColumnNo(),
             MSG_KEY,
             convertToString(ast)
         );
     }
 
     /**
      * Converts given AST node to string representation.
      * @param ast node to be represented as string
      * @return string representation of AST node
      */
     private static String convertToString(DetailAST ast) {
         final String tokenText;
         switch (ast.getType()) {
             case TokenTypes.LABELED_STAT:
                 tokenText = ast.getFirstChild().getText() + ast.getText();
                 break;
-            // multyline tokens need to become singlelined
+            // multiline tokens need to become singlelined
             case TokenTypes.COMMENT_CONTENT:
-                tokenText = JavadocUtils.excapeAllControlChars(ast.getText());
+                tokenText = JavadocUtils.escapeAllControlChars(ast.getText());
                 break;
             default:
                 tokenText = ast.getText();
                 break;
         }
         return tokenText;
     }
 
 }
