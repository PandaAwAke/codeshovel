diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java
index f170675c4..34f08a656 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java
@@ -64,101 +64,101 @@ public final class FileContents implements CommentListener {
      * map of the C comments indexed on the first line of the comment to a list
      * of comments on that line
      */
     private final Map<Integer, List<TextBlock>> clangComments = Maps.newHashMap();
 
     /**
      * Creates a new <code>FileContents</code> instance.
      *
      * @param filename name of the file
      * @param lines the contents of the file
      * @deprecated Use {@link #FileContents(FileText)} instead
      *   in order to preserve the original line breaks where possible.
      */
     @Deprecated
     public FileContents(String filename, String... lines) {
         this.fileName = filename;
         text = FileText.fromLines(new File(filename), Arrays.asList(lines));
     }
 
     /**
      * Creates a new <code>FileContents</code> instance.
      *
      * @param text the contents of the file
      */
     public FileContents(FileText text) {
         fileName = text.getFile().toString();
         this.text = text;
     }
 
     /** {@inheritDoc} */
     @Override
     public void reportSingleLineComment(String type, int startLineNo,
             int startColNo) {
         reportCppComment(startLineNo, startColNo);
     }
 
     /** {@inheritDoc} */
     @Override
     public void reportBlockComment(String type, int startLineNo,
             int startColNo, int endLineNo, int endColNo) {
         reportCComment(startLineNo, startColNo, endLineNo, endColNo);
     }
 
     /**
      * Report the location of a C++ style comment.
      * @param startLineNo the starting line number
      * @param startColNo the starting column number
      **/
     public void reportCppComment(int startLineNo, int startColNo) {
         final String line = line(startLineNo - 1);
-        final String[] txt = new String[] {line.substring(startColNo)};
+        final String[] txt = {line.substring(startColNo)};
         final Comment comment = new Comment(txt, startColNo, startLineNo,
                 line.length() - 1);
         cppComments.put(startLineNo, comment);
     }
 
     /**
      * Returns a map of all the C++ style comments. The key is a line number,
      * the value is the comment {@link TextBlock} at the line.
      * @return the Map of comments
      */
     public ImmutableMap<Integer, TextBlock> getCppComments() {
         return ImmutableMap.copyOf(cppComments);
     }
 
     /**
      * Report the location of a C-style comment.
      * @param startLineNo the starting line number
      * @param startColNo the starting column number
      * @param endLineNo the ending line number
      * @param endColNo the ending column number
      **/
     public void reportCComment(int startLineNo, int startColNo,
             int endLineNo, int endColNo) {
         final String[] cc = extractCComment(startLineNo, startColNo,
                 endLineNo, endColNo);
         final Comment comment = new Comment(cc, startColNo, endLineNo,
                 endColNo);
 
         // save the comment
         if (clangComments.containsKey(startLineNo)) {
             final List<TextBlock> entries = clangComments.get(startLineNo);
             entries.add(comment);
         }
         else {
             final List<TextBlock> entries = Lists.newArrayList();
             entries.add(comment);
             clangComments.put(startLineNo, entries);
         }
 
         // Remember if possible Javadoc comment
         if (line(startLineNo - 1).indexOf("/**", startColNo) != -1) {
             javadocComments.put(endLineNo - 1, comment);
         }
     }
 
     /**
      * Returns a map of all C style comments. The key is the line number, the
      * value is a {@link List} of C style comment {@link TextBlock}s
      * that start at that line.
      * @return the map of comments
