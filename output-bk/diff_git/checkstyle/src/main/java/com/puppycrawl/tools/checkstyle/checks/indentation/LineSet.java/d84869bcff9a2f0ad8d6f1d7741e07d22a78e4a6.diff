diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineSet.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineSet.java
index dec001623..fdc15f75e 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineSet.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineSet.java
@@ -1,105 +1,105 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2014  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.indentation;
 
 import com.google.common.collect.Maps;
 import java.util.SortedMap;
 
 /**
  * Represents a set of lines.
  *
  * @author jrichard
  */
 public class LineSet
 {
     /**
      * Maps line numbers to their start column.
      */
-    private final SortedMap<Integer, Integer> mLines = Maps.newTreeMap();
+    private final SortedMap<Integer, Integer> lines = Maps.newTreeMap();
 
     /**
      * Get the starting column for a given line number.
      *
-     * @param aLineNum   the specified line number
+     * @param lineNum   the specified line number
      *
      * @return the starting column for the given line number
      */
-    public Integer getStartColumn(Integer aLineNum)
+    public Integer getStartColumn(Integer lineNum)
     {
-        return mLines.get(aLineNum);
+        return lines.get(lineNum);
     }
 
     /**
      * Get the starting column for the first line.
      *
      * @return the starting column for the first line.
      */
     public int firstLineCol()
     {
-        final Object firstLineKey = mLines.firstKey();
-        return (mLines.get(firstLineKey)).intValue();
+        final Object firstLineKey = lines.firstKey();
+        return (lines.get(firstLineKey)).intValue();
     }
 
     /**
      * Get the line number of the first line.
      *
      * @return the line number of the first line
      */
     public int firstLine()
     {
-        return (mLines.firstKey()).intValue();
+        return (lines.firstKey()).intValue();
     }
 
     /**
      * Get the line number of the last line.
      *
      * @return the line number of the last line
      */
     public int lastLine()
     {
-        return (mLines.lastKey()).intValue();
+        return (lines.lastKey()).intValue();
     }
 
     /**
      * Add a line to this set of lines.
      *
-     * @param aLineNum   the line to add
-     * @param aCol       the starting column of the new line
+     * @param lineNum   the line to add
+     * @param col       the starting column of the new line
      */
-    public void addLineAndCol(int aLineNum, int aCol)
+    public void addLineAndCol(int lineNum, int col)
     {
-        mLines.put(aLineNum, aCol);
+        lines.put(lineNum, col);
     }
 
     /**
      * Determines if this set of lines is empty.
      *
      * @return true if it is empty, false otherwise
      */
     public boolean isEmpty()
     {
-        return mLines.isEmpty();
+        return lines.isEmpty();
     }
 
     @Override
     public String toString()
     {
         return "LineSet[ start=" + firstLine() + ", last=" + lastLine() + "]";
     }
 }
