diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java
index 1fcc26844..8707a93c0 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java
@@ -1,88 +1,87 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2016 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks.design;
 
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
 import antlr.collections.AST;
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FullIdent;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.utils.AnnotationUtility;
-import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 import com.puppycrawl.tools.checkstyle.utils.ScopeUtils;
 
 /**
  * Checks visibility of class members. Only static final, immutable or annotated
  * by specified annotation members may be public,
  * other class members must be private unless allowProtected/Package is set.
  * <p>
  * Public members are not flagged if the name matches the public
  * member regular expression (contains "^serialVersionUID$" by
  * default).
  * </p>
  * Rationale: Enforce encapsulation.
  * <p>
  * Check also has options making it less strict:
  * </p>
  * <p>
  * <b>ignoreAnnotationCanonicalNames</b> - the list of annotations canonical names
  * which ignore variables in consideration, if user will provide short annotation name
  * that type will match to any named the same type without consideration of package,
  * list by default:
  * </p>
  * <ul>
  * <li>org.junit.Rule</li>
  * <li>org.junit.ClassRule</li>
  * <li>com.google.common.annotations.VisibleForTesting</li>
  * </ul>
  * <p>
  * For example such public field will be skipped by default value of list above:
  * </p>
  *
  * <pre>
  * {@code @org.junit.Rule
  * public TemporaryFolder publicJUnitRule = new TemporaryFolder();
  * }
  * </pre>
  *
  * <p>
  * <b>allowPublicFinalFields</b> - which allows public final fields. Default value is <b>false</b>.
  * </p>
  * <p>
  * <b>allowPublicImmutableFields</b> - which allows immutable fields to be
  * declared as public if defined in final class. Default value is <b>false</b>
  * </p>
  * <p>
  * Field is known to be immutable if:
  * </p>
  * <ul>
  * <li>It's declared as final</li>
  * <li>Has either a primitive type or instance of class user defined to be immutable
  * (such as String, ImmutableCollection from Guava and etc)</li>
@@ -325,106 +324,104 @@ public class VisibilityModifierCheck
     private final List<String> immutableClassShortNames =
         getClassShortNames(DEFAULT_IMMUTABLE_TYPES);
 
     /** List of ignore annotations canonical names. */
     private List<String> ignoreAnnotationCanonicalNames =
         new ArrayList<>(DEFAULT_IGNORE_ANNOTATIONS);
 
     /** Whether protected members are allowed. */
     private boolean protectedAllowed;
 
     /** Whether package visible members are allowed. */
     private boolean packageAllowed;
 
     /** Allows immutable fields of final classes to be declared as public. */
     private boolean allowPublicImmutableFields;
 
     /** Allows final fields to be declared as public. */
     private boolean allowPublicFinalFields;
 
     /** List of immutable classes canonical names. */
     private List<String> immutableClassCanonicalNames = new ArrayList<>(DEFAULT_IMMUTABLE_TYPES);
 
     /**
      * Set the list of ignore annotations.
      * @param annotationNames array of ignore annotations canonical names.
      */
     public void setIgnoreAnnotationCanonicalNames(String... annotationNames) {
         ignoreAnnotationCanonicalNames = Arrays.asList(annotationNames);
     }
 
     /**
      * Set whether protected members are allowed.
      * @param protectedAllowed whether protected members are allowed
      */
     public void setProtectedAllowed(boolean protectedAllowed) {
         this.protectedAllowed = protectedAllowed;
     }
 
     /**
      * Set whether package visible members are allowed.
      * @param packageAllowed whether package visible members are allowed
      */
     public void setPackageAllowed(boolean packageAllowed) {
         this.packageAllowed = packageAllowed;
     }
 
     /**
      * Set the pattern for public members to ignore.
      * @param pattern
      *        pattern for public members to ignore.
-     * @throws org.apache.commons.beanutils.ConversionException
-     *         if unable to create Pattern object
      */
-    public void setPublicMemberPattern(String pattern) {
-        publicMemberPattern = CommonUtils.createPattern(pattern);
-        publicMemberFormat = pattern;
+    public void setPublicMemberPattern(Pattern pattern) {
+        publicMemberPattern = pattern;
+        publicMemberFormat = pattern.pattern();
     }
 
     /**
      * Sets whether public immutable fields are allowed.
      * @param allow user's value.
      */
     public void setAllowPublicImmutableFields(boolean allow) {
         allowPublicImmutableFields = allow;
     }
 
     /**
      * Sets whether public final fields are allowed.
      * @param allow user's value.
      */
     public void setAllowPublicFinalFields(boolean allow) {
         allowPublicFinalFields = allow;
     }
 
     /**
      * Set the list of immutable classes types names.
      * @param classNames array of immutable types canonical names.
      */
     public void setImmutableClassCanonicalNames(String... classNames) {
         immutableClassCanonicalNames = Arrays.asList(classNames);
     }
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.VARIABLE_DEF,
             TokenTypes.IMPORT,
         };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public void beginTree(DetailAST rootAst) {
         immutableClassShortNames.clear();
         final List<String> classShortNames =
                 getClassShortNames(immutableClassCanonicalNames);
         immutableClassShortNames.addAll(classShortNames);
