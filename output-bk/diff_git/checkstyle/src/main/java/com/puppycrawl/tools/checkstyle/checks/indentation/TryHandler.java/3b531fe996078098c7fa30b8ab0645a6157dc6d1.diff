diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/TryHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/TryHandler.java
index 1b91a5775..eb80609f5 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/TryHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/TryHandler.java
@@ -82,83 +82,83 @@ public class TryHandler extends BlockParentHandler {
         }
     }
 
     /**
      * Method to check the indentation of left paren or right paren.
      * This method itself checks whether either of these are on start of line. This method
      * takes care of line wrapping strict condition as well.
      *
      * @param parenAst      lparen or rparen ast to check
      * @param subType       name to be used in log message
      */
     private void checkTryResParen(final DetailAST parenAst,
                                     final String subType) {
         if (isOnStartOfLine(parenAst)) {
             final IndentLevel expectedIdent = new IndentLevel(getIndent(), 0,
                 getIndentCheck().getLineWrappingIndentation());
 
             checkChildIndentation(parenAst, subType, expectedIdent);
         }
     }
 
     /**
      * Method to check indentation of try resources children.
      * It takes into account forceStrictCondition value when logging errors.
      * Example of usage would include checking for try parenthesis and try resources.
      *
      * @param ast           AST to check.
      * @param subType       String representing child type.
      * @param expectedIdent Expected indent level.
      */
     private void checkChildIndentation(DetailAST ast, String subType, IndentLevel expectedIdent) {
         if (getIndentCheck().isForceStrictCondition()) {
             if (!expectedIdent.isAcceptable(expandedTabsColumnNo(ast))) {
                 logError(ast, subType, expandedTabsColumnNo(ast), expectedIdent);
             }
         }
         else {
             if (expandedTabsColumnNo(ast) < expectedIdent.getFirstIndentLevel()) {
                 logError(ast, subType, expandedTabsColumnNo(ast), expectedIdent);
             }
         }
     }
 
     /**
      * Checks indentation of resources parameters in try resources.
      *
      * @param resourcesSpecAst   Resource specification ast
      */
     private void checkTryResources(final DetailAST resourcesSpecAst) {
         final DetailAST resourcesAst = resourcesSpecAst.findFirstToken(TokenTypes.RESOURCES);
-        final int indetation = getIndent().getFirstIndentLevel()
+        final int indentation = getIndent().getFirstIndentLevel()
             + getIndentCheck().getLineWrappingIndentation();
-        final IndentLevel expectedResourceIndent = new IndentLevel(indetation);
+        final IndentLevel expectedResourceIndent = new IndentLevel(indentation);
 
         final String subType = "resource";
 
         DetailAST resourceAst = resourcesAst.getFirstChild();
         while (resourceAst != null) {
             if (resourceAst.getType() == TokenTypes.RESOURCE) {
                 final DetailAST nextSibling;
                 if (resourceAst.getNextSibling() == null) {
                     nextSibling = getTryResRparen();
                 }
                 else {
                     nextSibling = resourceAst.getNextSibling();
                 }
                 if (isOnStartOfLine(resourceAst)) {
                     checkChildIndentation(resourceAst, subType, expectedResourceIndent);
                     checkWrappingIndentation(
                         resourceAst,
                         nextSibling,
                         getIndentCheck().getLineWrappingIndentation(),
                         expectedResourceIndent.getFirstIndentLevel(),
                         true);
                 }
                 else {
                     checkWrappingIndentation(resourceAst, nextSibling);
                 }
             }
             resourceAst = resourceAst.getNextSibling();
         }
     }
 }
