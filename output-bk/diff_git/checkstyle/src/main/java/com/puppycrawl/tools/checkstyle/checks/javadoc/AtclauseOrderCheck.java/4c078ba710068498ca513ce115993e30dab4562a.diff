diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java
index 38b6ea326..bacebe9af 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java
@@ -120,62 +120,62 @@ public class AtclauseOrderCheck extends AbstractJavadocCheck {
         final String[] sOrder = order.split(",");
         for (int i = 0; i < sOrder.length; i++) {
             customOrder.add(sOrder[i].trim());
         }
         this.tagOrder = customOrder;
     }
 
     @Override
     public int[] getDefaultJavadocTokens() {
         return new int[] {
             JavadocTokenTypes.JAVADOC,
         };
     }
 
     @Override
     public void visitJavadocToken(DetailNode ast) {
         final int parentType = getParentType(getBlockCommentAst());
 
         if (target.contains(parentType)) {
             checkOrderInTagSection(ast);
         }
     }
 
     /**
      * Checks order of atclauses in tag section node.
      * @param javadoc Javadoc root node.
      */
     private void checkOrderInTagSection(DetailNode javadoc) {
         int indexOrderOfPreviousTag = 0;
         int indexOrderOfCurrentTag = 0;
 
         for (DetailNode node : javadoc.getChildren()) {
             if (node.getType() == JavadocTokenTypes.JAVADOC_TAG) {
                 final String tagText = JavadocUtils.getFirstChild(node).getText();
                 indexOrderOfCurrentTag = tagOrder.indexOf(tagText);
 
                 if (tagOrder.contains(tagText)
                         && indexOrderOfCurrentTag < indexOrderOfPreviousTag) {
                     log(node.getLineNumber(), MSG_KEY, tagOrder.toString());
                 }
                 indexOrderOfPreviousTag = indexOrderOfCurrentTag;
             }
         }
     }
 
     /**
      * Returns type of parent node.
      * @param commentBlock child node.
      * @return parent type.
      */
-    private int getParentType(DetailAST commentBlock) {
+    private static int getParentType(DetailAST commentBlock) {
         int type = 0;
         final DetailAST parentNode = commentBlock.getParent();
         if (parentNode != null) {
             type = parentNode.getType();
             if (type == TokenTypes.TYPE || type == TokenTypes.MODIFIERS) {
                 type = parentNode.getParent().getType();
             }
         }
         return type;
     }
 }
