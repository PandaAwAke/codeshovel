diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java b/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
index 2078a645a..f4266acd9 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
@@ -61,101 +61,87 @@ class PackageObjectFactory implements ModuleFactory
     void addPackage(String packageName)
     {
         packages.add(packageName);
     }
 
     /**
      * Creates a new instance of a class from a given name. If the name is
      * a classname, creates an instance of the named class. Otherwise, creates
      * an instance of a classname obtained by concatenating the given
      * to a package name from a given list of package names.
      * @param name the name of a class.
      * @return the <code>Object</code>
      * @throws CheckstyleException if an error occurs.
      */
     private Object doMakeObject(String name)
         throws CheckstyleException
     {
         //try name first
         try {
             return createObject(name);
         }
         catch (final CheckstyleException ex) {
             // keep looking
         }
 
         //now try packages
         for (String packageName : packages) {
 
             final String className = packageName + name;
             try {
                 return createObject(className);
             }
             catch (final CheckstyleException ex) {
                 // keep looking
             }
         }
 
         throw new CheckstyleException("Unable to instantiate " + name);
     }
 
     /**
      * Creates a new instance of a named class.
      * @param className the name of the class to instantiate.
      * @return the <code>Object</code> created by loader.
      * @throws CheckstyleException if an error occurs.
      */
     private Object createObject(String className)
         throws CheckstyleException
     {
         try {
-            final Class<?> clazz = Class.forName(className, true,
-                    moduleClassLoader);
+            final Class<?> clazz = Class.forName(className, true, moduleClassLoader);
             return clazz.newInstance();
         }
-        catch (final ClassNotFoundException e) {
-            throw new CheckstyleException(
-                "Unable to find class for " + className, e);
-        }
-        catch (final InstantiationException e) {
-            ///CLOVER:OFF
-            throw new CheckstyleException(
-                "Unable to instantiate " + className, e);
-            ///CLOVER:ON
-        }
-        catch (final IllegalAccessException e) {
-            ///CLOVER:OFF
-            throw new CheckstyleException(
-                "Unable to instantiate " + className, e);
-            ///CLOVER:ON
+        catch (final ClassNotFoundException | InstantiationException | IllegalAccessException e) {
+            throw new CheckstyleException("Unable to find class for " + className, e);
         }
     }
 
     /**
      * Creates a new instance of a class from a given name, or that name
      * concatenated with &quot;Check&quot;. If the name is
      * a classname, creates an instance of the named class. Otherwise, creates
      * an instance of a classname obtained by concatenating the given name
      * to a package name from a given list of package names.
      * @param name the name of a class.
      * @return the <code>Object</code> created by loader.
      * @throws CheckstyleException if an error occurs.
      */
     @Override
     public Object createModule(String name)
         throws CheckstyleException
     {
         try {
             return doMakeObject(name);
         }
         catch (final CheckstyleException ex) {
             //try again with suffix "Check"
             try {
                 return doMakeObject(name + "Check");
             }
             catch (final CheckstyleException ex2) {
                 throw new CheckstyleException(
                     "Unable to instantiate " + name, ex2);
             }
         }
     }
 }
