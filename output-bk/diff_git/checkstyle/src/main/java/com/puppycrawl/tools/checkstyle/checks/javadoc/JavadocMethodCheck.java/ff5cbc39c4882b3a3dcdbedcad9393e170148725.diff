diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
index 93bae49fd..741376049 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
@@ -139,101 +139,101 @@ public class JavadocMethodCheck extends AbstractTypeAwareCheck
      * Controls whether to ignore errors when there is no javadoc. Defaults to
      * false.
      */
     private boolean allowMissingJavadoc;
 
     /**
      * Controls whether to allow missing Javadoc on accessor methods for
      * properties (setters and getters).
      */
     private boolean allowMissingPropertyJavadoc;
 
     /** List of annotations that could allow missed documentation. */
     private List<String> allowedAnnotations = Arrays.asList("Override");
 
     /** Method names that match this pattern do not require javadoc blocks. */
     private Pattern ignoreMethodNamesRegex;
 
     /**
      * Set regex for matching method names to ignore.
      * @param regex regex for matching method names.
      */
     public void setIgnoreMethodNamesRegex(String regex)
     {
         ignoreMethodNamesRegex = Utils.createPattern(regex);
     }
 
     /**
      * Sets minimal amount of lines in method.
      * @param value user's value.
      */
     public void setMinLineCount(int value)
     {
         minLineCount = value;
     }
 
     /**
      * Allow validating throws tag.
      * @param value user's value.
      */
     public void setValidateThrows(boolean value)
     {
         validateThrows = value;
     }
 
     /**
      * Sets list of annotations.
      * @param userAnnotations user's value.
      */
     public void setAllowedAnnotations(String userAnnotations)
     {
-        final List<String> annotations = new ArrayList<String>();
+        final List<String> annotations = new ArrayList<>();
         Collections.addAll(annotations, userAnnotations.split(", "));
         allowedAnnotations = annotations;
     }
 
     /**
      * Set the scope.
      *
      * @param from a <code>String</code> value
      */
     public void setScope(String from)
     {
         scope = Scope.getInstance(from);
     }
 
     /**
      * Set the excludeScope.
      *
      * @param scope a <code>String</code> value
      */
     public void setExcludeScope(String scope)
     {
         excludeScope = Scope.getInstance(scope);
     }
 
     /**
      * controls whether to allow documented exceptions that are not declared if
      * they are a subclass of java.lang.RuntimeException.
      *
      * @param flag a <code>Boolean</code> value
      */
     public void setAllowUndeclaredRTE(boolean flag)
     {
         allowUndeclaredRTE = flag;
     }
 
     /**
      * controls whether to allow documented exception that are subclass of one
      * of declared exceptions.
      *
      * @param flag a <code>Boolean</code> value
      */
     public void setAllowThrowsTagsForSubclasses(boolean flag)
     {
         allowThrowsTagsForSubclasses = flag;
     }
 
     /**
      * controls whether to allow a method which has parameters to omit matching
      * param tags in the javadoc. Defaults to false.
      *
