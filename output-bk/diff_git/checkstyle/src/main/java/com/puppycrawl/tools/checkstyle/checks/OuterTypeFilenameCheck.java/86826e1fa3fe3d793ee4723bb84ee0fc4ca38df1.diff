diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheck.java
index 8e9ad80d4..0a1a99bc1 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheck.java
@@ -27,87 +27,87 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * Checks that the outer type name and the file name match.
  * @author Oliver Burn
  * @author maxvetrenko
  */
 public class OuterTypeFilenameCheck extends Check {
     /** indicates whether the first token has been seen in the file. */
     private boolean seenFirstToken;
 
     /** Current file name*/
     private String fileName;
 
     /** If file has public type*/
     private boolean hasPublic;
 
     /** If first type has has same name as file*/
     private boolean validFirst;
 
     /** Outer type with mismatched file name*/
     private DetailAST wrongType;
 
     @Override
     public int[] getDefaultTokens() {
         return new int[] {
             TokenTypes.CLASS_DEF, TokenTypes.INTERFACE_DEF,
             TokenTypes.ENUM_DEF, TokenTypes.ANNOTATION_DEF,
         };
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.CLASS_DEF, TokenTypes.INTERFACE_DEF,
             TokenTypes.ENUM_DEF, TokenTypes.ANNOTATION_DEF,
         };
     }
 
     @Override
     public void beginTree(DetailAST ast) {
         fileName = getFileName();
         seenFirstToken = false;
         validFirst = false;
         hasPublic = false;
         wrongType = null;
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final String outerTypeName = ast.findFirstToken(TokenTypes.IDENT).getText();
-        if (!seenFirstToken) {
+        if (seenFirstToken) {
+            final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
+            if (modifiers.findFirstToken(TokenTypes.LITERAL_PUBLIC) != null
+                    && ast.getParent() == null) {
+                hasPublic = true;
+            }
+        }
+        else {
 
             if (fileName.equals(outerTypeName)) {
                 validFirst = true;
             }
             else {
                 wrongType = ast;
             }
         }
-        else {
-            final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
-            if (modifiers.findFirstToken(TokenTypes.LITERAL_PUBLIC) != null
-                    && ast.getParent() == null) {
-                hasPublic = true;
-            }
-        }
         seenFirstToken = true;
     }
 
     @Override
     public void finishTree(DetailAST rootAST) {
         if (!validFirst && !hasPublic && wrongType != null) {
             log(wrongType.getLineNo(), "type.file.mismatch");
         }
     }
 
     /**
      * Get source file name.
      * @return source file name.
      */
     private String getFileName() {
         String fname = getFileContents().getFileName();
         fname = fname.substring(fname.lastIndexOf(File.separatorChar) + 1);
         fname = fname.replaceAll("\\.[^\\.]*$", "");
         return fname;
     }
 }
