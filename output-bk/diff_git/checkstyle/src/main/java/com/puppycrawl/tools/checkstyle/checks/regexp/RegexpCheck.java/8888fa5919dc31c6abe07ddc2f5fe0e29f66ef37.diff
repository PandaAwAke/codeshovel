diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheck.java
index f7cffad5c..4f702b3d0 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheck.java
@@ -119,105 +119,105 @@ public class RegexpCheck extends AbstractCheck {
 
     /**
      * Setter for message property.
      * @param message custom message which should be used in report.
      */
     public void setMessage(String message) {
         if (message == null) {
             this.message = "";
         }
         else {
             this.message = message;
         }
     }
 
     /**
      * Sets if matches within comments should be ignored.
      * @param ignoreComments True if comments should be ignored.
      */
     public void setIgnoreComments(boolean ignoreComments) {
         this.ignoreComments = ignoreComments;
     }
 
     /**
      * Sets if pattern is illegal, otherwise pattern is required.
      * @param illegalPattern True if pattern is not allowed.
      */
     public void setIllegalPattern(boolean illegalPattern) {
         this.illegalPattern = illegalPattern;
     }
 
     /**
      * Sets the limit on the number of errors to report.
      * @param errorLimit the number of errors to report.
      */
     public void setErrorLimit(int errorLimit) {
         this.errorLimit = errorLimit;
     }
 
     /**
      * Sets the maximum number of instances of required pattern allowed.
      * @param duplicateLimit negative values mean no duplicate checking,
      *     any positive value is used as the limit.
      */
     public void setDuplicateLimit(int duplicateLimit) {
         this.duplicateLimit = duplicateLimit;
         checkForDuplicates = duplicateLimit > DEFAULT_DUPLICATE_LIMIT;
     }
 
     /**
      * Set the format to the specified regular expression.
-     * @param format a {@code String} value
+     * @param pattern the new pattern
      * @throws org.apache.commons.beanutils.ConversionException unable to parse format
      */
-    public final void setFormat(String format) {
-        this.format = format;
+    public final void setFormat(Pattern pattern) {
+        format = pattern.pattern();
         regexp = CommonUtils.createPattern(format, Pattern.MULTILINE);
     }
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return CommonUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public int[] getRequiredTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public void beginTree(DetailAST rootAST) {
         matcher = regexp.matcher(getFileContents().getText().getFullText());
         matchCount = 0;
         errorCount = 0;
         findMatch();
     }
 
     /** Recursive method that finds the matches. */
     private void findMatch() {
 
         final boolean foundMatch = matcher.find();
         if (foundMatch) {
             final FileText text = getFileContents().getText();
             final LineColumn start = text.lineColumn(matcher.start());
             final int startLine = start.getLine();
 
             final boolean ignore = isIgnore(startLine, text, start);
 
             if (!ignore) {
                 matchCount++;
                 if (illegalPattern || checkForDuplicates
                         && matchCount - 1 > duplicateLimit) {
                     errorCount++;
                     logMessage(startLine);
                 }
             }
             if (canContinueValidation(ignore)) {
                 findMatch();
             }
         }
         else if (!illegalPattern && matchCount == 0) {
