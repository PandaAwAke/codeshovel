diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
index d9a77175d..f095ab10c 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
@@ -426,101 +426,101 @@ public class CheckstyleAntTask extends Task {
      * @throws BuildException if an error occurs
      */
     private Properties createOverridingProperties() {
         final Properties returnValue = new Properties();
 
         // Load the properties file if specified
         if (properties != null) {
             FileInputStream inStream = null;
             try {
                 inStream = new FileInputStream(properties);
                 returnValue.load(inStream);
             }
             catch (final IOException ex) {
                 throw new BuildException("Error loading Properties file '"
                         + properties + "'", ex, getLocation());
             }
             finally {
                 Closeables.closeQuietly(inStream);
             }
         }
 
         // override with Ant properties like ${basedir}
         final Map<String, Object> antProps = getProject().getProperties();
         for (Map.Entry<String, Object> entry : antProps.entrySet()) {
             final String value = String.valueOf(entry.getValue());
             returnValue.setProperty(entry.getKey(), value);
         }
 
         // override with properties specified in subelements
         for (Property p : overrideProps) {
             returnValue.setProperty(p.getKey(), p.getValue());
         }
 
         return returnValue;
     }
 
     /**
      * Return the list of listeners set in this task.
      * @return the list of listeners.
      */
     private AuditListener[] getListeners() {
         final int formatterCount = Math.max(1, formatters.size());
 
         final AuditListener[] listeners = new AuditListener[formatterCount];
 
         // formatters
         try {
             if (formatters.isEmpty()) {
                 final OutputStream debug = new LogOutputStream(this, Project.MSG_DEBUG);
                 final OutputStream err = new LogOutputStream(this, Project.MSG_ERR);
-                listeners[0] = new DefaultLogger(debug, true, err, true, true);
+                listeners[0] = new DefaultLogger(debug, true, err, true);
             }
             else {
                 for (int i = 0; i < formatterCount; i++) {
                     final Formatter formatter = formatters.get(i);
                     listeners[i] = formatter.createListener(this);
                 }
             }
         }
         catch (IOException ex) {
             throw new BuildException(String.format(Locale.ROOT, "Unable to create listeners: "
                     + "formatters {%s}.", formatters), ex);
         }
         return listeners;
     }
 
     /**
      * Returns the list of files (full path name) to process.
      * @return the list of files included via the filesets.
      */
     protected List<File> scanFileSets() {
         final List<File> list = Lists.newArrayList();
         if (fileName != null) {
             // oops we've got an additional one to process, don't
             // forget it. No sweat, it's fully resolved via the setter.
             log("Adding standalone file for audit", Project.MSG_VERBOSE);
             list.add(new File(fileName));
         }
         for (int i = 0; i < fileSets.size(); i++) {
             final FileSet fileSet = fileSets.get(i);
             final DirectoryScanner scanner = fileSet.getDirectoryScanner(getProject());
             scanner.scan();
 
             final String[] names = scanner.getIncludedFiles();
             log(i + ") Adding " + names.length + " files from directory "
                     + scanner.getBasedir(), Project.MSG_VERBOSE);
 
             for (String element : names) {
                 final String pathname = scanner.getBasedir() + File.separator
                         + element;
                 list.add(new File(pathname));
             }
         }
 
         return list;
     }
 
     /**
      * Poor mans enumeration for the formatter types.
      * @author Oliver Burn
      */
@@ -556,101 +556,101 @@ public class CheckstyleAntTask extends Task {
                 throw new BuildException("Invalid formatter type: " + val);
             }
 
             formatterType = type;
         }
 
         /**
          * Set the file to output to.
          * @param destination destination the file to output to
          */
         public void setTofile(File destination) {
             toFile = destination;
         }
 
         /**
          * Sets whether or not we write to a file if it is provided.
          * @param use whether not not to use provided file.
          */
         public void setUseFile(boolean use) {
             useFile = use;
         }
 
         /**
          * Creates a listener for the formatter.
          * @param task the task running
          * @return a listener
          * @throws IOException if an error occurs
          */
         public AuditListener createListener(Task task) throws IOException {
             if (formatterType != null
                     && E_XML.equals(formatterType.getValue())) {
                 return createXmlLogger(task);
             }
             return createDefaultLogger(task);
         }
 
         /**
          * Creates default logger.
          * @param task the task to possibly log to
          * @return a DefaultLogger instance
          * @throws IOException if an error occurs
          */
         private AuditListener createDefaultLogger(Task task)
             throws IOException {
             if (toFile == null || !useFile) {
                 return new DefaultLogger(
                     new LogOutputStream(task, Project.MSG_DEBUG),
                     true, new LogOutputStream(task, Project.MSG_ERR), true);
             }
             final FileOutputStream infoStream = new FileOutputStream(toFile);
-            return new DefaultLogger(infoStream, true, infoStream, false, true);
+            return new DefaultLogger(infoStream, true, infoStream, false);
         }
 
         /**
          * Creates XML logger.
          * @param task the task to possibly log to
          * @return an XMLLogger instance
          * @throws IOException if an error occurs
          */
         private AuditListener createXmlLogger(Task task) throws IOException {
             if (toFile == null || !useFile) {
                 return new XMLLogger(new LogOutputStream(task,
                         Project.MSG_INFO), true);
             }
             return new XMLLogger(new FileOutputStream(toFile), true);
         }
     }
 
     /**
      * Represents a property that consists of a key and value.
      */
     public static class Property {
         /** The property key. */
         private String key;
         /** The property value. */
         private String value;
 
         /**
          * Gets key.
          * @return the property key
          */
         public String getKey() {
             return key;
         }
 
         /**
          * Sets key.
          * @param key sets the property key
          */
         public void setKey(String key) {
             this.key = key;
         }
 
         /**
          * Gets value.
          * @return the property value
          */
         public String getValue() {
             return value;
         }
 
