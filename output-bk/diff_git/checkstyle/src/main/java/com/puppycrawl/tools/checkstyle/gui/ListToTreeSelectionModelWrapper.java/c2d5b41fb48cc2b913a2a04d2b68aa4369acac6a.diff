diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ListToTreeSelectionModelWrapper.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ListToTreeSelectionModelWrapper.java
index e373174cb..cfbebbb62 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ListToTreeSelectionModelWrapper.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ListToTreeSelectionModelWrapper.java
@@ -13,101 +13,101 @@
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.gui;
 
 import javax.swing.ListSelectionModel;
 import javax.swing.event.ListSelectionEvent;
 import javax.swing.event.ListSelectionListener;
 import javax.swing.tree.DefaultTreeSelectionModel;
 import javax.swing.tree.TreePath;
 
 /**
  * ListToTreeSelectionModelWrapper extends DefaultTreeSelectionModel
  * to listen for changes in the ListSelectionModel it maintains. Once
  * a change in the ListSelectionModel happens, the paths are updated
  * in the DefaultTreeSelectionModel.
  *
  * @author unknown
  */
 class ListToTreeSelectionModelWrapper extends DefaultTreeSelectionModel {
     private static final long serialVersionUID = 2267930983939339510L;
     /** JTreeTable to perform updates on. */
     private final JTreeTable treeTable;
     /** Set to true when we are updating the ListSelectionModel. */
     private boolean updatingListSelectionModel;
 
     /**
      * @param jTreeTable TreeTable to perform updates on.
      */
     ListToTreeSelectionModelWrapper(JTreeTable jTreeTable) {
         treeTable = jTreeTable;
         getListSelectionModel().addListSelectionListener(new ListSelectionListener() {
             @Override
             public void valueChanged(ListSelectionEvent event) {
                 updateSelectedPathsFromSelectedRows();
             }
         });
     }
 
     /**
      * Returns the list selection model. ListToTreeSelectionModelWrapper
      * listens for changes to this model and updates the selected paths
      * accordingly.
      *
      * @return the list selection model
      */
-    final ListSelectionModel getListSelectionModel() {
+    protected final ListSelectionModel getListSelectionModel() {
         return listSelectionModel;
     }
 
     /**
      * This is overridden to set {@code updatingListSelectionModel}
      * and message super. This is the only place DefaultTreeSelectionModel
      * alters the ListSelectionModel.
      */
     @Override
     public void resetRowSelection() {
         if (!updatingListSelectionModel) {
             updatingListSelectionModel = true;
             try {
                 super.resetRowSelection();
             }
             finally {
                 updatingListSelectionModel = false;
             }
         }
         // Notice how we don't message super if
         // updatingListSelectionModel is true. If
         // updatingListSelectionModel is true, it implies the
         // ListSelectionModel has already been updated and the
         // paths are the only thing that needs to be updated.
     }
 
     /**
      * If {@code updatingListSelectionModel} is false, this will
      * reset the selected paths from the selected rows in the list
      * selection model.
      */
     private void updateSelectedPathsFromSelectedRows() {
         if (!updatingListSelectionModel) {
             updatingListSelectionModel = true;
             try {
                 // This is way expensive, ListSelectionModel needs an
                 // enumerator for iterating.
                 final int min = listSelectionModel.getMinSelectionIndex();
                 final int max = listSelectionModel.getMaxSelectionIndex();
 
                 clearSelection();
                 if (min != -1 && max != -1) {
                     for (int counter = min; counter <= max; counter++) {
                         updateSelectedPathIfRowIsSelected(counter);
                     }
                 }
             }
             finally {
                 updatingListSelectionModel = false;
             }
