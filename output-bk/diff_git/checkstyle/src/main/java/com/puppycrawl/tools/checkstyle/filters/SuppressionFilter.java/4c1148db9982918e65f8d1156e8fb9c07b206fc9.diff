diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionFilter.java
index 38fd9cf7d..995e60dd3 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionFilter.java
@@ -17,59 +17,59 @@
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.filters;
 
 import java.util.Objects;
 
 import com.puppycrawl.tools.checkstyle.api.AuditEvent;
 import com.puppycrawl.tools.checkstyle.api.AutomaticBean;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Filter;
 import com.puppycrawl.tools.checkstyle.api.FilterSet;
 
 /**
  * <p>
  * This filter accepts AuditEvents according to file, check, line, and
  * column, as specified in a suppression file.
  * </p>
  * @author Rick Giles
  */
 public class SuppressionFilter
     extends AutomaticBean
     implements Filter {
     /** set of individual suppresses */
     private FilterSet filters = new FilterSet();
 
     /**
      * Loads the suppressions for a file.
      * @param fileName name of the suppressions file.
      * @throws CheckstyleException if there is an error.
      */
     public void setFile(String fileName)
         throws CheckstyleException {
         filters = SuppressionsLoader.loadSuppressions(fileName);
     }
 
     /** {@inheritDoc} */
     @Override
     public boolean accept(AuditEvent event) {
         return filters.accept(event);
     }
 
     @Override
     public boolean equals(Object obj) {
         if (this == obj) {
             return true;
         }
         if (obj == null || getClass() != obj.getClass()) {
             return false;
         }
-        final SuppressionFilter that = (SuppressionFilter) obj;
-        return Objects.equals(filters, that.filters);
+        final SuppressionFilter suppressionFilter = (SuppressionFilter) obj;
+        return Objects.equals(filters, suppressionFilter.filters);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(filters);
     }
 }
