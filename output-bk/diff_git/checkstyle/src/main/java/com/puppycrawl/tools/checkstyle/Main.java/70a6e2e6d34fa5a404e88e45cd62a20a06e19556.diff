diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
index 66af80e88..12f6c2227 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
@@ -295,101 +295,101 @@ public final class Main {
             throws CheckstyleException {
         final Properties properties = new Properties();
 
         FileInputStream fis = null;
         try {
             fis = new FileInputStream(file);
             properties.load(fis);
         }
         catch (final IOException ex) {
             throw new CheckstyleException(String.format(
                     "Unable to load properties from file '%s'.", file.getAbsolutePath()), ex);
         }
         finally {
             Closeables.closeQuietly(fis);
         }
 
         return properties;
     }
 
     /**
      * Creates the audit listener.
      *
      * @param format format of the audit listener
      * @param outputLocation the location of output
      * @return a fresh new {@code AuditListener}
      * @exception FileNotFoundException when provided output location is not found
      */
     private static AuditListener createListener(String format,
                                                 String outputLocation)
             throws FileNotFoundException {
 
         // setup the output stream
         OutputStream out;
         boolean closeOutputStream;
         if (outputLocation == null) {
             out = System.out;
             closeOutputStream = false;
         }
         else {
             out = new FileOutputStream(outputLocation);
             closeOutputStream = true;
         }
 
         // setup a listener
         AuditListener listener;
         if (XML_FORMAT_NAME.equals(format)) {
             listener = new XMLLogger(out, closeOutputStream);
 
         }
         else if (PLAIN_FORMAT_NAME.equals(format)) {
-            listener = new DefaultLogger(out, closeOutputStream, out, false, true);
+            listener = new DefaultLogger(out, closeOutputStream, out, false);
 
         }
         else {
             if (closeOutputStream) {
                 CommonUtils.close(out);
             }
             throw new IllegalStateException(String.format(
                     "Invalid output format. Found '%s' but expected '%s' or '%s'.",
                     format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));
         }
 
         return listener;
     }
 
     /**
      * Determines the files to process.
      * @param filesToProcess
      *        arguments that were not processed yet but shall be
      * @return list of files to process
      */
     private static List<File> getFilesToProcess(String... filesToProcess) {
         final List<File> files = Lists.newLinkedList();
         for (String element : filesToProcess) {
             files.addAll(listFiles(new File(element)));
         }
 
         return files;
     }
 
     /**
      * Traverses a specified node looking for files to check. Found files are added to a specified
      * list. Subdirectories are also traversed.
      * @param node
      *        the node to process
      * @return found files
      */
     private static List<File> listFiles(File node) {
         // could be replaced with org.apache.commons.io.FileUtils.list() method
         // if only we add commons-io library
         final List<File> result = Lists.newLinkedList();
 
         if (node.canRead()) {
             if (node.isDirectory()) {
                 final File[] files = node.listFiles();
                 // listFiles() can return null, so we need to check it
                 if (files != null) {
                     for (File element : files) {
                         result.addAll(listFiles(element));
                     }
                 }
