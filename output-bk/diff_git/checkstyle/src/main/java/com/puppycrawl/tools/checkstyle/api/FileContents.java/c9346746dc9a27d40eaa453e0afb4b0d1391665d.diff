diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java
index 9cfcf17cf..d4960b8c9 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java
@@ -243,82 +243,106 @@ public final class FileContents implements CommentListener {
      */
     public String getLine(int index) {
         return text.get(index);
     }
 
     /** @return the name of the file */
     public String getFileName() {
         return fileName;
     }
 
     /**
      * Getter.
      * @return the name of the file
      * @deprecated use {@link #getFileName} instead
      */
     @Deprecated
     public String getFilename() {
         return fileName;
     }
 
     /**
      * Checks if the specified line is blank.
      * @param lineNo the line number to check
      * @return if the specified line consists only of tabs and spaces.
      **/
     public boolean lineIsBlank(int lineNo) {
         // possible improvement: avoid garbage creation in trim()
         return line(lineNo).trim().isEmpty();
     }
 
     /**
      * Checks if the specified line is a single-line comment without code.
      * @param lineNo  the line number to check
      * @return if the specified line consists of only a single line comment
      *         without code.
      **/
     public boolean lineIsComment(int lineNo) {
         return MATCH_SINGLELINE_COMMENT.matcher(line(lineNo)).matches();
     }
 
     /**
      * Checks if the specified position intersects with a comment.
      * @param startLineNo the starting line number
      * @param startColNo the starting column number
      * @param endLineNo the ending line number
      * @param endColNo the ending column number
      * @return true if the positions intersects with a comment.
      **/
     public boolean hasIntersectionWithComment(int startLineNo,
             int startColNo, int endLineNo, int endColNo) {
+        return hasIntersectionWithCComment(startLineNo, startColNo, endLineNo, endColNo)
+                || hasIntersectionWithCppComment(startLineNo, startColNo, endLineNo, endColNo);
+    }
+
+    /**
+     * Checks if the current file is a package-info.java file.
+     * @return true if the package file.
+     */
+    public boolean inPackageInfo() {
+        return fileName.endsWith("package-info.java");
+    }
+
+    /**
+     * Checks if the specified position intersects with a C comment.
+     * @param startLineNo the starting line number
+     * @param startColNo the starting column number
+     * @param endLineNo the ending line number
+     * @param endColNo the ending column number
+     * @return true if the positions intersects with a C comment.
+     */
+    private boolean hasIntersectionWithCComment(int startLineNo, int startColNo,
+            int endLineNo, int endColNo) {
         // Check C comments (all comments should be checked)
         final Collection<List<TextBlock>> values = clangComments.values();
         for (final List<TextBlock> row : values) {
             for (final TextBlock comment : row) {
-                if (comment.intersects(startLineNo, startColNo, endLineNo,
-                        endColNo)) {
+                if (comment.intersects(startLineNo, startColNo, endLineNo, endColNo)) {
                     return true;
                 }
             }
         }
+        return false;
+    }
 
+    /**
+     * Checks if the specified position intersects with a CPP comment.
+     * @param startLineNo the starting line number
+     * @param startColNo the starting column number
+     * @param endLineNo the ending line number
+     * @param endColNo the ending column number
+     * @return true if the positions intersects with a CPP comment.
+     */
+    private boolean hasIntersectionWithCppComment(int startLineNo, int startColNo,
+            int endLineNo, int endColNo) {
         // Check CPP comments (line searching is possible)
         for (int lineNumber = startLineNo; lineNumber <= endLineNo;
              lineNumber++) {
             final TextBlock comment = cppComments.get(lineNumber);
-            if (comment != null
-                    && comment.intersects(startLineNo, startColNo,
-                            endLineNo, endColNo)) {
+            if (comment != null && comment.intersects(startLineNo, startColNo,
+                    endLineNo, endColNo)) {
                 return true;
             }
         }
         return false;
     }
-
-    /**
-     * Checks if the current file is a package-info.java file.
-     * @return true if the package file.
-     */
-    public boolean inPackageInfo() {
-        return fileName.endsWith("package-info.java");
-    }
 }
