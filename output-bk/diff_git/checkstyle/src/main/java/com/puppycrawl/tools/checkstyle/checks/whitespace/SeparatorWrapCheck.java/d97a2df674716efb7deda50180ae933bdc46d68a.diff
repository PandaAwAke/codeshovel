diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SeparatorWrapCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SeparatorWrapCheck.java
index 66e914ffc..d76d1424f 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SeparatorWrapCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SeparatorWrapCheck.java
@@ -67,76 +67,76 @@ import com.puppycrawl.tools.checkstyle.checks.AbstractOptionCheck;
  * </pre>
  * <p> An example of how to configure the check for comma at the
  * new line is:
  * </p>
  * <pre>
  * &lt;module name="SeparatorWrap"&gt;
  *     &lt;property name="tokens" value="COMMA"/&gt;
  *     &lt;property name="option" value="nl"/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * @author maxvetrenko
  */
 public class SeparatorWrapCheck
     extends AbstractOptionCheck<WrapOption>
 {
     /**
      * Sets the comma wrap option to end of the line.
      */
     public SeparatorWrapCheck()
     {
         super(WrapOption.EOL, WrapOption.class);
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.DOT,
             TokenTypes.COMMA,
         };
     }
 
     @Override
     public int[] getAcceptableTokens()
     {
         return new int[] {
             TokenTypes.DOT,
             TokenTypes.COMMA,
             TokenTypes.SEMI,
             TokenTypes.ELLIPSIS,
             TokenTypes.AT,
             TokenTypes.LPAREN,
             TokenTypes.RPAREN,
             TokenTypes.ARRAY_DECLARATOR,
             TokenTypes.RBRACK,
         };
     }
 
     @Override
-    public void visitToken(DetailAST aAST)
+    public void visitToken(DetailAST ast)
     {
         // TODO: It is a copy/paste from OperatorWrapCheck.
         //It should be fixed in another issue
-        final String text = aAST.getText();
-        final int colNo = aAST.getColumnNo();
-        final int lineNo = aAST.getLineNo();
+        final String text = ast.getText();
+        final int colNo = ast.getColumnNo();
+        final int lineNo = ast.getLineNo();
         final String currentLine = getLines()[lineNo - 1];
         final String substringAfterToken =
                 currentLine.substring(colNo + text.length()).trim();
         final String substringBeforeToken =
                 currentLine.substring(0, colNo).trim();
         final WrapOption wSp = getAbstractOption();
 
         if (wSp == WrapOption.EOL
                 && (substringBeforeToken.length() == 0))
         {
             log(lineNo, colNo, "line.previous", text);
         }
         else if (wSp == WrapOption.NL
                  && substringAfterToken.length() == 0)
         {
             log(lineNo, colNo, "line.new", text);
         }
     }
 }
