diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/HtmlTag.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/HtmlTag.java
index 4a8fbac6a..ec7ca74ad 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/HtmlTag.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/HtmlTag.java
@@ -70,56 +70,68 @@ class HtmlTag {
      * @return a String id.
      */
     public String getId() {
         return id;
     }
 
     /**
      * Indicates if this tag is a close (end) tag.
      * @return {@code true} is this is a close tag.
      */
     public boolean isCloseTag() {
         return position != text.length() - 1 && text.charAt(position + 1) == '/';
     }
 
     /**
      * Indicates if this tag is a self-closed XHTML style.
      * @return {@code true} is this is a self-closed tag.
      */
     public boolean isClosedTag() {
         return closedTag;
     }
 
     /**
      * Indicates if this tag is incomplete (has no close &gt;).
      * @return {@code true} if the tag is incomplete.
      */
     public boolean isIncompleteTag() {
         return incompleteTag;
     }
 
     /**
      * Returns the source line number where this tag was found.
      * Used for displaying a Checkstyle error.
      * @return an int line number.
      */
     public int getLineNo() {
         return lineNo;
     }
 
     /**
      * Returns the position with in the comment line where this tag
      * was found.  Used for displaying a Checkstyle error.
      * @return an int relative to zero.
      */
     public int getPosition() {
         return position;
     }
 
     @Override
     public String toString() {
+        return "HtmlTag[id='" + id + '\''
+                + ", lineNo=" + lineNo
+                + ", position=" + position
+                + ", text='" + text + '\''
+                + ", closedTag=" + closedTag
+                + ", incompleteTag=" + incompleteTag + ']';
+    }
+
+    /**
+     * Returns the comment line of text where this tag appears.
+     * @return text of the tag
+     */
+    public String getText() {
         final int startOfText = position;
-        final int endOfText =
-            Math.min(startOfText + MAX_TEXT_LEN, text.length());
+        final int endOfText = Math.min(startOfText + MAX_TEXT_LEN, text.length());
         return text.substring(startOfText, endOfText);
     }
 }
