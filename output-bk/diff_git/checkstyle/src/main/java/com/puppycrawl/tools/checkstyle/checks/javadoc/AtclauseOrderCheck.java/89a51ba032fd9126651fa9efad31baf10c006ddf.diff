diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java
index 3c4d8dff3..68340a595 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java
@@ -30,150 +30,150 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 /**
  * <p>
  * Checks the order of at-clauses.
  * </p>
  *
  * <p>
  * The check allows to configure itself by using the following properties:
  * </p>
  * <ul>
  * <li>
  * target - allows to specify targets to check at-clauses.
  * </li>
  * <li>
  * tagOrder - allows to specify the order by tags.
  * </li>
  * </ul>
  * <p>
  * Default configuration:
  * </p>
  * <pre>
  * &lt;module name=&quot;AtclauseOrderCheck&quot;&gt;
  *     &lt;property name=&quot;tagOrder&quot; value=&quot;&#64;author, &#64;version, &#64;param,
  *     &#64;return, &#64;throws, &#64;exception, &#64;see, &#64;since, &#64;serial,
  *     &#64;serialField, &#64;serialData, &#64;deprecated&quot;/&gt;
  *     &lt;property name=&quot;target&quot; value=&quot;CLASS_DEF, INTERFACE_DEF, ENUM_DEF,
  *     METHOD_DEF, CTOR_DEF, VARIABLE_DEF&quot;/&gt;
  * &lt;/module>
  * </pre>
  *
  * @author max
  *
  */
 public class AtclauseOrderCheck extends AbstractJavadocCheck
 {
 
     /**
      * Default order of atclauses.
      */
     private static final String[] DEFAULT_ORDER = {
         "@author", "@version",
         "@param", "@return",
         "@throws", "@exception",
         "@see", "@since",
         "@serial", "@serialField",
         "@serialData", "@deprecated",
     };
 
     /**
      * Default target of checking atclauses.
      */
-    private List<Integer> mTarget = Arrays.asList(
+    private List<Integer> target = Arrays.asList(
         TokenTypes.CLASS_DEF,
         TokenTypes.INTERFACE_DEF,
         TokenTypes.ENUM_DEF,
         TokenTypes.METHOD_DEF,
         TokenTypes.CTOR_DEF,
         TokenTypes.VARIABLE_DEF
     );
 
     /**
      * Order of atclauses.
      */
-    private List<String> mTagOrder = Arrays.asList(DEFAULT_ORDER);
+    private List<String> tagOrder = Arrays.asList(DEFAULT_ORDER);
 
     /**
      * Sets custom targets.
-     * @param aTarget user's targets.
+     * @param target user's targets.
      */
-    public void setTarget(String aTarget)
+    public void setTarget(String target)
     {
         final List<Integer> customTarget = new ArrayList<Integer>();
-        for (String type : aTarget.split(", ")) {
+        for (String type : target.split(", ")) {
             customTarget.add(TokenTypes.getTokenId(type));
         }
-        mTarget = customTarget;
+        this.target = customTarget;
     }
 
     /**
      * Sets custom order of atclauses.
-     * @param aOrder user's order.
+     * @param order user's order.
      */
-    public void setTagOrder(String aOrder)
+    public void setTagOrder(String order)
     {
         final List<String> customOrder = new ArrayList<String>();
-        for (String type : aOrder.split(", ")) {
+        for (String type : order.split(", ")) {
             customOrder.add(type);
         }
-        mTagOrder = customOrder;
+        tagOrder = customOrder;
     }
 
     @Override
     public int[] getDefaultJavadocTokens()
     {
         return new int[] {
             JavadocTokenTypes.JAVADOC,
         };
     }
 
     @Override
-    public void visitJavadocToken(DetailNode aAst)
+    public void visitJavadocToken(DetailNode ast)
     {
         final int parentType = getParentType(getBlockCommentAst());
 
-        if (mTarget.contains(parentType)) {
-            checkOrderInTagSection(aAst);
+        if (target.contains(parentType)) {
+            checkOrderInTagSection(ast);
         }
     }
 
     /**
      * Checks order of atclauses in tag section node.
-     * @param aJavadoc Javadoc root node.
+     * @param javadoc Javadoc root node.
      */
-    private void checkOrderInTagSection(DetailNode aJavadoc)
+    private void checkOrderInTagSection(DetailNode javadoc)
     {
         int indexOrderOfPreviousTag = 0;
         int indexOrderOfCurrentTag = 0;
 
-        for (DetailNode node : aJavadoc.getChildren()) {
+        for (DetailNode node : javadoc.getChildren()) {
             if (node.getType() == JavadocTokenTypes.JAVADOC_TAG) {
                 final String tagText = JavadocUtils.getFirstChild(node).getText();
-                indexOrderOfCurrentTag = mTagOrder.indexOf(tagText);
+                indexOrderOfCurrentTag = tagOrder.indexOf(tagText);
 
-                if (mTagOrder.contains(tagText)
+                if (tagOrder.contains(tagText)
                         && indexOrderOfCurrentTag < indexOrderOfPreviousTag)
                 {
-                    log(node.getLineNumber(), "at.clause.order", mTagOrder.toString());
+                    log(node.getLineNumber(), "at.clause.order", tagOrder.toString());
                 }
                 indexOrderOfPreviousTag = indexOrderOfCurrentTag;
             }
         }
     }
 
     /**
      * Returns type of parent node.
-     * @param aCommentBlock child node.
+     * @param commentBlock child node.
      * @return parent type.
      */
-    private int getParentType(DetailAST aCommentBlock)
+    private int getParentType(DetailAST commentBlock)
     {
         int type = 0;
-        final DetailAST parentNode = aCommentBlock.getParent();
+        final DetailAST parentNode = commentBlock.getParent();
         if (parentNode != null) {
             type = parentNode.getType();
             if (type == TokenTypes.TYPE || type == TokenTypes.MODIFIERS) {
                 type = parentNode.getParent().getType();
             }
         }
         return type;
     }
 }
