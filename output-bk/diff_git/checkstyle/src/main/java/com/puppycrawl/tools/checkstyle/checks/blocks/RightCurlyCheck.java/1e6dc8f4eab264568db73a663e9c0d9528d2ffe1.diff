diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java
index b18f63160..5fde8bf13 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java
@@ -31,100 +31,101 @@ import com.puppycrawl.tools.checkstyle.checks.CheckUtils;
 
 /**
  * <p>
  * Checks the placement of right curly braces.
  * The policy to verify is specified using the {@link RightCurlyOption} class
  * and defaults to {@link RightCurlyOption#SAME}.
  * </p>
  * <p> By default the check will check the following tokens:
  *  {@link TokenTypes#LITERAL_TRY LITERAL_TRY},
  *  {@link TokenTypes#LITERAL_CATCH LITERAL_CATCH},
  *  {@link TokenTypes#LITERAL_FINALLY LITERAL_FINALLY},
  *  {@link TokenTypes#LITERAL_IF LITERAL_IF},
  *  {@link TokenTypes#LITERAL_ELSE LITERAL_ELSE}.
  * Other acceptable tokens are:
  *  {@link TokenTypes#CLASS_DEF CLASS_DEF},
  *  {@link TokenTypes#METHOD_DEF METHOD_DEF},
  *  {@link TokenTypes#CTOR_DEF CTOR_DEF}.
  *  {@link TokenTypes#LITERAL_FOR LITERAL_FOR}.
  *  {@link TokenTypes#LITERAL_WHILE LITERAL_WHILE}.
  *  {@link TokenTypes#LITERAL_DO LITERAL_DO}.
  *  {@link TokenTypes#STATIC_INIT STATIC_INIT}.
  *  {@link TokenTypes#INSTANCE_INIT INSTANCE_INIT}.
  * </p>
  * <p>
  * <b>shouldStartLine</b> - does the check need to check
  * if right curly starts line. Default value is <b>true</b>
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="RightCurly"/&gt;
  * </pre>
  * <p>
  * An example of how to configure the check with policy
  * {@link RightCurlyOption#ALONE} for {@code else} and
  * {@code {@link TokenTypes#METHOD_DEF METHOD_DEF}}tokens is:
  * </p>
  * <pre>
  * &lt;module name="RightCurly"&gt;
  *     &lt;property name="tokens" value="LITERAL_ELSE"/&gt;
  *     &lt;property name="option" value="alone"/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * @author Oliver Burn
  * @author lkuehne
  * @author o_sukhodolsky
  * @author maxvetrenko
  * @author Andrei Selkin
+ * @author <a href="mailto:piotr.listkiewicz@gmail.com">liscju</a>
  */
 public class RightCurlyCheck extends AbstractOptionCheck<RightCurlyOption> {
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY_LINE_BREAK_BEFORE = "line.break.before";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY_LINE_ALONE = "line.alone";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY_LINE_SAME = "line.same";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY_LINE_NEW = "line.new";
 
     /** Do we need to check if right curly starts line. */
     private boolean shouldStartLine = true;
 
     /**
      * Sets the right curly option to same.
      */
     public RightCurlyCheck() {
         super(RightCurlyOption.SAME, RightCurlyOption.class);
     }
 
     /**
      * Does the check need to check if right curly starts line.
      * @param flag new value of this property.
      */
     public void setShouldStartLine(boolean flag) {
         shouldStartLine = flag;
     }
 
     @Override
     public int[] getDefaultTokens() {
         return new int[] {
             TokenTypes.LITERAL_TRY,
             TokenTypes.LITERAL_CATCH,
             TokenTypes.LITERAL_FINALLY,
@@ -152,101 +153,102 @@ public class RightCurlyCheck extends AbstractOptionCheck<RightCurlyOption> {
         };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return ArrayUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final Details details = getDetails(ast);
         final DetailAST rcurly = details.rcurly;
 
         if (rcurly == null || rcurly.getType() != TokenTypes.RCURLY) {
             // we need to have both tokens to perform the check
             return;
         }
 
         final String violation;
         if (shouldStartLine) {
             final String targetSourceLine = getLines()[rcurly.getLineNo() - 1];
             violation = validate(details, getAbstractOption(), true, targetSourceLine);
         }
         else {
             violation = validate(details, getAbstractOption(), false, "");
         }
 
         if (!violation.isEmpty()) {
             log(rcurly, violation, "}", rcurly.getColumnNo() + 1);
         }
     }
 
     /**
      * Does general validation.
      * @param details for validation.
      * @param bracePolicy for placing the right curly brace.
      * @param shouldStartLine do we need to check if right curly starts line.
      * @param targetSourceLine line that we need to check if shouldStartLine is true.
      * @return violation message or empty string
      * if there was not violation durning validation.
      */
     private static String validate(Details details, RightCurlyOption bracePolicy,
                                    boolean shouldStartLine, String targetSourceLine) {
         final DetailAST rcurly = details.rcurly;
         final DetailAST lcurly = details.lcurly;
         final DetailAST nextToken = details.nextToken;
         final boolean shouldCheckLastRcurly = details.shouldCheckLastRcurly;
         String violation = "";
 
         if (bracePolicy == RightCurlyOption.SAME
-                && !hasLineBreakBefore(rcurly)) {
+                && !hasLineBreakBefore(rcurly)
+                && lcurly.getLineNo() != rcurly.getLineNo()) {
             violation = MSG_KEY_LINE_BREAK_BEFORE;
         }
         else if (shouldCheckLastRcurly) {
             if (rcurly.getLineNo() == nextToken.getLineNo()) {
                 violation = MSG_KEY_LINE_ALONE;
             }
         }
         else if (bracePolicy == RightCurlyOption.SAME
                 && rcurly.getLineNo() != nextToken.getLineNo()) {
             violation = MSG_KEY_LINE_SAME;
         }
         else if (bracePolicy == RightCurlyOption.ALONE
                 && !isAloneOnLine(details)
                 && !isEmptyBody(lcurly)) {
             violation = MSG_KEY_LINE_ALONE;
         }
         else if (bracePolicy == RightCurlyOption.ALONE_OR_SINGLELINE
                 && !isAloneOnLine(details)
                 && !isSingleLineBlock(details)
                 && !isAnonInnerClassInit(lcurly)
                 && !isEmptyBody(lcurly)) {
             violation = MSG_KEY_LINE_ALONE;
         }
         else if (shouldStartLine) {
             final boolean startsLine =
                 Utils.whitespaceBefore(rcurly.getColumnNo(), targetSourceLine);
 
             if (!startsLine && lcurly.getLineNo() != rcurly.getLineNo()) {
                 violation = MSG_KEY_LINE_NEW;
             }
         }
         return violation;
     }
 
     /**
      * Checks whether right curly is alone on a line.
      * @param details for validation.
      * @return true if right curly is alone on a line.
      */
     private static boolean isAloneOnLine(Details details) {
         final DetailAST rcurly = details.rcurly;
         final DetailAST lcurly = details.lcurly;
         final DetailAST nextToken = details.nextToken;
         return rcurly.getLineNo() != lcurly.getLineNo()
             && rcurly.getLineNo() != nextToken.getLineNo();
     }
 
     /**
      * Checks whether block has a single-line format.
      * @param details for validation.
