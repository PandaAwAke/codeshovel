diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
index c7721511c..0805d0690 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
@@ -344,114 +344,114 @@ public class TranslationCheck
      * @param basenameSeparator the basename separator
      */
     public final void setBasenameSeparator(String basenameSeparator) {
         this.basenameSeparator = basenameSeparator;
     }
 
     /**
      * Arranges a set of property files by their prefix.
      * The method returns a Map object. The filename prefixes
      * work as keys each mapped to a set of files.
      * @param propFiles the set of property files
      * @param basenameSeparator the basename separator
      * @return a Map object which holds the arranged property file sets
      */
     private static SetMultimap<String, File> arrangePropertyFiles(
         List<File> propFiles, String basenameSeparator) {
         final SetMultimap<String, File> propFileMap = HashMultimap.create();
 
         for (final File file : propFiles) {
             final String identifier = extractPropertyIdentifier(file,
                 basenameSeparator);
 
             final Set<File> fileSet = propFileMap.get(identifier);
             fileSet.add(file);
         }
         return propFileMap;
     }
 
     /**
      * Loads the keys of the specified property file into a set.
      * @param file the property file
      * @return a Set object which holds the loaded keys
      */
     private Set<Object> loadKeys(File file) {
         final Set<Object> keys = Sets.newHashSet();
         InputStream inStream = null;
 
         try {
             // Load file and properties.
             inStream = new FileInputStream(file);
             final Properties props = new Properties();
             props.load(inStream);
 
             // Gather the keys and put them into a set
             final Enumeration<?> element = props.propertyNames();
             while (element.hasMoreElements()) {
                 keys.add(element.nextElement());
             }
         }
         catch (final IOException e) {
-            logIOException(e, file);
+            logIoException(e, file);
         }
         finally {
             Closeables.closeQuietly(inStream);
         }
         return keys;
     }
 
     /**
      * Helper method to log an io exception.
      * @param ex the exception that occurred
      * @param file the file that could not be processed
      */
-    private void logIOException(IOException ex, File file) {
+    private void logIoException(IOException ex, File file) {
         String[] args = null;
         String key = "general.fileNotFound";
         if (!(ex instanceof FileNotFoundException)) {
             args = new String[] {ex.getMessage()};
             key = "general.exception";
         }
         final LocalizedMessage message =
             new LocalizedMessage(
                 0,
                 Definitions.CHECKSTYLE_BUNDLE,
                 key,
                 args,
                 getId(),
                 getClass(), null);
         final SortedSet<LocalizedMessage> messages = Sets.newTreeSet();
         messages.add(message);
         getMessageDispatcher().fireErrors(file.getPath(), messages);
         LOG.debug("IOException occurred.", ex);
     }
 
     /**
      * Compares the key sets of the given property files (arranged in a map)
      * with the specified key set. All missing keys are reported.
      * @param keys the set of keys to compare with
      * @param fileMap a Map from property files to their key sets
      */
     private void compareKeySets(Set<Object> keys,
             SetMultimap<File, Object> fileMap) {
 
         for (File currentFile : fileMap.keySet()) {
             final MessageDispatcher dispatcher = getMessageDispatcher();
             final String path = currentFile.getPath();
             dispatcher.fireFileStarted(path);
             final Set<Object> currentKeys = fileMap.get(currentFile);
 
             // Clone the keys so that they are not lost
             final Set<Object> keysClone = Sets.newHashSet(keys);
             keysClone.removeAll(currentKeys);
 
             // Remaining elements in the key set are missing in the current file
             if (!keysClone.isEmpty()) {
                 for (Object key : keysClone) {
                     log(0, MSG_KEY, key);
                 }
             }
             fireErrors(path);
             dispatcher.fireFileFinished(path);
         }
     }
 
