diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java
index 1338b2a3a..51a3ea1e6 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java
@@ -67,107 +67,106 @@ import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
  * The check also does not support code like {@code @SuppressWarnings("un" + "used")},
  * {@code @SuppressWarnings((String) "unused")} or
  * {@code @SuppressWarnings({('u' + (char)'n') + (""+("used" + (String)"")),})}.
  * </p>
  *
  * <p>This check can be configured so that the "unchecked"
  * and "unused" warnings cannot be suppressed on
  * anything but variable and parameter declarations.
  * See below of an example.
  * </p>
  *
  * <pre>
  * &lt;module name=&quot;SuppressWarnings&quot;&gt;
  *    &lt;property name=&quot;format&quot;
  *        value=&quot;^unchecked$|^unused$&quot;/&gt;
  *    &lt;property name=&quot;tokens&quot;
  *        value=&quot;
  *        CLASS_DEF,INTERFACE_DEF,ENUM_DEF,
  *        ANNOTATION_DEF,ANNOTATION_FIELD_DEF,
  *        ENUM_CONSTANT_DEF,METHOD_DEF,CTOR_DEF
  *        &quot;/&gt;
  * &lt;/module&gt;
  * </pre>
  * @author Travis Schneeberger
  */
 public class SuppressWarningsCheck extends AbstractCheck {
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY_SUPPRESSED_WARNING_NOT_ALLOWED =
         "suppressed.warning.not.allowed";
 
     /** {@link SuppressWarnings SuppressWarnings} annotation name. */
     private static final String SUPPRESS_WARNINGS = "SuppressWarnings";
 
     /**
      * Fully-qualified {@link SuppressWarnings SuppressWarnings}
      * annotation name.
      */
     private static final String FQ_SUPPRESS_WARNINGS =
         "java.lang." + SUPPRESS_WARNINGS;
 
     /** The format string of the regexp. */
     private String format = "^$|^\\s+$";
 
     /** The regexp to match against. */
     private Pattern regexp = Pattern.compile(format);
 
     /**
-     * Set the format to the specified regular expression.
-     * @param format a {@code String} value
-     * @throws org.apache.commons.beanutils.ConversionException unable to parse format
+     * Set the format for the specified regular expression.
+     * @param pattern the new pattern
      */
-    public final void setFormat(String format) {
-        this.format = format;
-        regexp = CommonUtils.createPattern(format);
+    public final void setFormat(Pattern pattern) {
+        format = pattern.pattern();
+        regexp = pattern;
     }
 
     @Override
     public final int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public final int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.CLASS_DEF,
             TokenTypes.INTERFACE_DEF,
             TokenTypes.ENUM_DEF,
             TokenTypes.ANNOTATION_DEF,
             TokenTypes.ANNOTATION_FIELD_DEF,
             TokenTypes.ENUM_CONSTANT_DEF,
             TokenTypes.PARAMETER_DEF,
             TokenTypes.VARIABLE_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.CTOR_DEF,
         };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return CommonUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public void visitToken(final DetailAST ast) {
         final DetailAST annotation = getSuppressWarnings(ast);
 
         if (annotation != null) {
             final DetailAST warningHolder =
                 findWarningsHolder(annotation);
 
             final DetailAST token =
                     warningHolder.findFirstToken(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);
             DetailAST warning;
 
             if (token == null) {
                 warning = warningHolder.findFirstToken(TokenTypes.EXPR);
             }
             else {
                 // case like '@SuppressWarnings(value = UNUSED)'
                 warning = token.findFirstToken(TokenTypes.EXPR);
             }
 
             //rare case with empty array ex: @SuppressWarnings({})
             if (warning == null) {
