diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java
index df9dc2622..527054e20 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java
@@ -1,93 +1,93 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2014  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.regexp;
 
 import com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck;
 import java.io.File;
 import java.util.List;
 
 /**
  * Implementation of a check that looks for a single line in any file type.
  * @author Oliver Burn
  */
 public class RegexpSinglelineCheck extends AbstractFileSetCheck
 {
     /** The detection options to use. */
-    private DetectorOptions mOptions = new DetectorOptions(0, this);
+    private DetectorOptions options = new DetectorOptions(0, this);
     /** The detector to use. */
-    private SinglelineDetector mDetector;
+    private SinglelineDetector detector;
 
     @Override
-    public void beginProcessing(String aCharset)
+    public void beginProcessing(String charset)
     {
-        super.beginProcessing(aCharset);
-        mDetector = new SinglelineDetector(mOptions);
+        super.beginProcessing(charset);
+        detector = new SinglelineDetector(options);
     }
 
     @Override
-    protected void processFiltered(File aFile, List<String> aLines)
+    protected void processFiltered(File file, List<String> lines)
     {
-        mDetector.processLines(aLines);
+        detector.processLines(lines);
     }
 
     /**
      * Set the format of the regular expression to match.
-     * @param aFormat the format of the regular expression to match.
+     * @param format the format of the regular expression to match.
      */
-    public void setFormat(String aFormat)
+    public void setFormat(String format)
     {
-        mOptions.setFormat(aFormat);
+        options.setFormat(format);
     }
 
     /**
      * Set the message to report for a match.
-     * @param aMessage the message to report for a match.
+     * @param message the message to report for a match.
      */
-    public void setMessage(String aMessage)
+    public void setMessage(String message)
     {
-        mOptions.setMessage(aMessage);
+        options.setMessage(message);
     }
 
     /**
      * Set the minimum number of matches required per file.
-     * @param aMinimum the minimum number of matches required per file.
+     * @param minimum the minimum number of matches required per file.
      */
-    public void setMinimum(int aMinimum)
+    public void setMinimum(int minimum)
     {
-        mOptions.setMinimum(aMinimum);
+        options.setMinimum(minimum);
     }
 
     /**
      * Set the maximum number of matches required per file.
-     * @param aMaximum the maximum number of matches required per file.
+     * @param maximum the maximum number of matches required per file.
      */
-    public void setMaximum(int aMaximum)
+    public void setMaximum(int maximum)
     {
-        mOptions.setMaximum(aMaximum);
+        options.setMaximum(maximum);
     }
 
     /**
      * Set whether to ignore case when matching.
-     * @param aIgnore whether to ignore case when matching.
+     * @param ignore whether to ignore case when matching.
      */
-    public void setIgnoreCase(boolean aIgnore)
+    public void setIgnoreCase(boolean ignore)
     {
-        mOptions.setIgnoreCase(aIgnore);
+        options.setIgnoreCase(ignore);
     }
 }
