diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtils.java
index 7d63e6050..b744167cd 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtils.java
@@ -363,61 +363,61 @@ public final class JavadocUtils {
      */
     public static int getTokenId(String name) {
         final Integer id = TOKEN_NAME_TO_VALUE.get(name);
         if (id == null) {
             throw new IllegalArgumentException("Unknown javadoc token name. Given name " + name);
         }
         return id;
     }
 
     /**
      * Gets tag name from javadocTagSection.
      *
      * @param javadocTagSection to get tag name from.
      * @return name, of the javadocTagSection's tag.
      */
     public static String getTagName(DetailNode javadocTagSection) {
         final String javadocTagName;
         if (javadocTagSection.getType() == JavadocTokenTypes.JAVADOC_INLINE_TAG) {
             javadocTagName = getNextSibling(
                     getFirstChild(javadocTagSection)).getText();
         }
         else {
             javadocTagName = getFirstChild(javadocTagSection).getText();
         }
         return javadocTagName;
     }
 
     /**
      * Replace all control chars with escaped symbols.
      * @param text the String to process.
      * @return the processed String with all control chars escaped.
      */
     public static String escapeAllControlChars(String text) {
         final String textWithoutNewlines = NEWLINE.matcher(text).replaceAll("\\\\n");
         final String textWithoutReturns = RETURN.matcher(textWithoutNewlines).replaceAll("\\\\r");
         return TAB.matcher(textWithoutReturns).replaceAll("\\\\t");
     }
 
     /**
      * Checks Javadoc comment it's in right place.
      * From Javadoc util documentation:
      * "Placement of comments - Documentation comments are recognized only when placed
      * immediately before class, interface, constructor, method, or field
      * declarations -- see the class example, method example, and field example.
      * Documentation comments placed in the body of a method are ignored. Only one
      * documentation comment per declaration statement is recognized by the Javadoc tool."
      *
      * @param blockComment Block comment AST
      * @return true if Javadoc is in right place
      */
-    public static boolean isCorrectJavadocPosition(DetailAST blockComment) {
+    private static boolean isCorrectJavadocPosition(DetailAST blockComment) {
         return BlockCommentPosition.isOnClass(blockComment)
                 || BlockCommentPosition.isOnInterface(blockComment)
                 || BlockCommentPosition.isOnEnum(blockComment)
                 || BlockCommentPosition.isOnMethod(blockComment)
                 || BlockCommentPosition.isOnField(blockComment)
                 || BlockCommentPosition.isOnConstructor(blockComment)
                 || BlockCommentPosition.isOnEnumConstant(blockComment)
                 || BlockCommentPosition.isOnAnnotationDef(blockComment);
     }
 }
