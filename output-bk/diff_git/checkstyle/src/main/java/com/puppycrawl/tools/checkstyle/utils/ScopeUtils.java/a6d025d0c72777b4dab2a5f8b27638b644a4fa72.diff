diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtils.java
index f9c0eaa9c..05b902bad 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtils.java
@@ -216,75 +216,79 @@ public final class ScopeUtils {
         }
 
         return returnValue;
     }
 
     /**
      * Returns whether a node is contained in the outer most type block.
      *
      * @param node the node to check
      * @return a {@code boolean} value
      */
     public static boolean isOuterMostType(DetailAST node) {
         boolean returnValue = true;
         for (DetailAST parent = node.getParent();
              parent != null;
              parent = parent.getParent()) {
             if (parent.getType() == TokenTypes.CLASS_DEF
                 || parent.getType() == TokenTypes.INTERFACE_DEF
                 || parent.getType() == TokenTypes.ANNOTATION_DEF
                 || parent.getType() == TokenTypes.ENUM_DEF) {
                 returnValue = false;
                 break;
             }
         }
 
         return returnValue;
     }
 
     /**
      * Determines whether a node is a local variable definition.
      * I.e. if it is declared in a code block, a for initializer,
      * or a catch parameter.
      * @param node the node to check.
      * @return whether aAST is a local variable definition.
      */
     public static boolean isLocalVariableDef(DetailAST node) {
         boolean localVariableDef = false;
         // variable declaration?
         if (node.getType() == TokenTypes.VARIABLE_DEF) {
             final DetailAST parent = node.getParent();
             final int type = parent.getType();
             localVariableDef = type == TokenTypes.SLIST
                     || type == TokenTypes.FOR_INIT
                     || type == TokenTypes.FOR_EACH_CLAUSE;
         }
         // catch parameter?
         if (node.getType() == TokenTypes.PARAMETER_DEF) {
             final DetailAST parent = node.getParent();
             localVariableDef = parent.getType() == TokenTypes.LITERAL_CATCH;
         }
+
+        if (node.getType() == TokenTypes.RESOURCE) {
+            localVariableDef = true;
+        }
         return localVariableDef;
     }
 
     /**
      * Determines whether a node is a class field definition.
      * I.e. if a variable is not declared in a code block, a for initializer,
      * or a catch parameter.
      * @param node the node to check.
      * @return whether a node is a class field definition.
      */
     public static boolean isClassFieldDef(DetailAST node) {
         return node.getType() == TokenTypes.VARIABLE_DEF && !isLocalVariableDef(node);
     }
 
     /**
      * Checks whether ast node is in a specific scope.
      * @param ast the node to check.
      * @param scope a {@code Scope} value.
      * @return true if the ast node is in the scope.
      */
     public static boolean isInScope(DetailAST ast, Scope scope) {
         final Scope surroundingScopeOfAstToken = getSurroundingScope(ast);
         return surroundingScopeOfAstToken == scope;
     }
 }
