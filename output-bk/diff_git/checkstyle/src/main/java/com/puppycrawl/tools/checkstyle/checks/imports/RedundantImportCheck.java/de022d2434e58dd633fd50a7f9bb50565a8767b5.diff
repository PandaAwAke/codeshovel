diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java
index 12c1c8fea..d244afc55 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java
@@ -76,91 +76,85 @@ public class RedundantImportCheck
     /** Set of static imports. */
     private final Set<FullIdent> staticImports = Sets.newHashSet();
 
     /** Name of package in file. */
     private String pkgName;
 
     @Override
     public void beginTree(DetailAST aRootAST) {
         pkgName = null;
         imports.clear();
         staticImports.clear();
     }
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[]
         {TokenTypes.IMPORT,
          TokenTypes.STATIC_IMPORT,
          TokenTypes.PACKAGE_DEF, };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         if (ast.getType() == TokenTypes.PACKAGE_DEF) {
             pkgName = FullIdent.createFullIdent(
                     ast.getLastChild().getPreviousSibling()).getText();
         }
         else if (ast.getType() == TokenTypes.IMPORT) {
             final FullIdent imp = FullIdent.createFullIdentBelow(ast);
             if (isFromPackage(imp.getText(), "java.lang")) {
                 log(ast.getLineNo(), ast.getColumnNo(), MSG_LANG,
                     imp.getText());
             }
             // imports from unnamed package are not allowed,
             // so we are checking SAME rule only for named packages
             else if (pkgName != null && isFromPackage(imp.getText(), pkgName)) {
                 log(ast.getLineNo(), ast.getColumnNo(), MSG_SAME,
                     imp.getText());
             }
             // Check for a duplicate import
-            for (FullIdent full : imports) {
-                if (imp.getText().equals(full.getText())) {
-                    log(ast.getLineNo(), ast.getColumnNo(),
-                            MSG_DUPLICATE, full.getLineNo(),
-                            imp.getText());
-                }
-            }
+            imports.stream().filter(full -> imp.getText().equals(full.getText()))
+                .forEach(full -> log(ast.getLineNo(), ast.getColumnNo(),
+                    MSG_DUPLICATE, full.getLineNo(),
+                    imp.getText()));
 
             imports.add(imp);
         }
         else {
             // Check for a duplicate static import
             final FullIdent imp =
                 FullIdent.createFullIdent(
                     ast.getLastChild().getPreviousSibling());
-            for (FullIdent full : staticImports) {
-                if (imp.getText().equals(full.getText())) {
-                    log(ast.getLineNo(), ast.getColumnNo(),
-                        MSG_DUPLICATE, full.getLineNo(), imp.getText());
-                }
-            }
+            staticImports.stream().filter(full -> imp.getText().equals(full.getText()))
+                .forEach(full -> log(ast.getLineNo(), ast.getColumnNo(),
+                    MSG_DUPLICATE, full.getLineNo(), imp.getText()));
 
             staticImports.add(imp);
         }
     }
 
     /**
      * Determines if an import statement is for types from a specified package.
      * @param importName the import name
      * @param pkg the package name
      * @return whether from the package
      */
     private static boolean isFromPackage(String importName, String pkg) {
         // imports from unnamed package are not allowed:
         // http://docs.oracle.com/javase/specs/jls/se7/html/jls-7.html#jls-7.5
         // So '.' must be present in member name and we are not checking for it
         final int index = importName.lastIndexOf('.');
         final String front = importName.substring(0, index);
         return front.equals(pkg);
     }
 }
