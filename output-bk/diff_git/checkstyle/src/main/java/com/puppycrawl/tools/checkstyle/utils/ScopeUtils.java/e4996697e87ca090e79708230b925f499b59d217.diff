diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtils.java
index 632f50151..bc45ec5cd 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtils.java
@@ -146,117 +146,118 @@ public final class ScopeUtils {
                 break;
             }
 
         }
 
         return returnValue;
     }
 
     /**
      * Returns whether a node is directly contained within an interface or
      * annotation block.
      *
      * @param node the node to check if directly contained within an interface
      *     or annotation block.
      * @return a {@code boolean} value
      */
     public static boolean isInInterfaceOrAnnotationBlock(DetailAST node) {
         return isInInterfaceBlock(node) || isInAnnotationBlock(node);
     }
 
     /**
      * Returns whether a node is directly contained within an enum block.
      *
      * @param node the node to check if directly contained within an enum block.
      * @return a {@code boolean} value
      */
     public static boolean isInEnumBlock(DetailAST node) {
         boolean returnValue = false;
 
         // Loop up looking for a containing interface block
         for (DetailAST token = node.getParent();
              token != null && !returnValue;
              token = token.getParent()) {
             final int type = token.getType();
             if (type == TokenTypes.ENUM_DEF) {
                 returnValue = true;
             }
             else if (type == TokenTypes.INTERFACE_DEF
                 || type == TokenTypes.ANNOTATION_DEF
                 || type == TokenTypes.CLASS_DEF
                 || type == TokenTypes.LITERAL_NEW) {
                 break;
             }
         }
 
         return returnValue;
     }
 
     /**
      * Returns whether the scope of a node is restricted to a code block.
-     * A code block is a method or constructor body, or a initializer block.
+     * A code block is a method or constructor body, an initializer block, or lambda body.
      *
      * @param node the node to check
      * @return a {@code boolean} value
      */
     public static boolean isInCodeBlock(DetailAST node) {
         boolean returnValue = false;
 
         // Loop up looking for a containing code block
         for (DetailAST token = node.getParent();
              token != null;
              token = token.getParent()) {
             final int type = token.getType();
             if (type == TokenTypes.METHOD_DEF
-                || type == TokenTypes.CTOR_DEF
-                || type == TokenTypes.INSTANCE_INIT
-                || type == TokenTypes.STATIC_INIT) {
+                    || type == TokenTypes.CTOR_DEF
+                    || type == TokenTypes.INSTANCE_INIT
+                    || type == TokenTypes.STATIC_INIT
+                    || type == TokenTypes.LAMBDA) {
                 returnValue = true;
                 break;
             }
         }
 
         return returnValue;
     }
 
     /**
      * Returns whether a node is contained in the outer most type block.
      *
      * @param node the node to check
      * @return a {@code boolean} value
      */
     public static boolean isOuterMostType(DetailAST node) {
         boolean returnValue = true;
         for (DetailAST parent = node.getParent();
              parent != null;
              parent = parent.getParent()) {
             if (parent.getType() == TokenTypes.CLASS_DEF
                 || parent.getType() == TokenTypes.INTERFACE_DEF
                 || parent.getType() == TokenTypes.ANNOTATION_DEF
                 || parent.getType() == TokenTypes.ENUM_DEF) {
                 returnValue = false;
                 break;
             }
         }
 
         return returnValue;
     }
 
     /**
      * Determines whether a node is a local variable definition.
      * I.e. if it is declared in a code block, a for initializer,
      * or a catch parameter.
      * @param node the node to check.
      * @return whether aAST is a local variable definition.
      */
     public static boolean isLocalVariableDef(DetailAST node) {
         boolean localVariableDef = false;
         // variable declaration?
         if (node.getType() == TokenTypes.VARIABLE_DEF) {
             final DetailAST parent = node.getParent();
             final int type = parent.getType();
             localVariableDef = type == TokenTypes.SLIST
                     || type == TokenTypes.FOR_INIT
                     || type == TokenTypes.FOR_EACH_CLAUSE;
         }
         // catch parameter?
         if (node.getType() == TokenTypes.PARAMETER_DEF) {
