diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
index 65ca35eed..47314c4f9 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
@@ -78,101 +78,101 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 public class RedundantModifierCheck
     extends Check {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "redundantModifier";
 
     /**
      * An array of tokens for interface modifiers.
      */
     private static final int[] TOKENS_FOR_INTERFACE_MODIFIERS = {
         TokenTypes.LITERAL_STATIC,
         TokenTypes.ABSTRACT,
     };
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getRequiredTokens() {
         return ArrayUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.METHOD_DEF,
             TokenTypes.VARIABLE_DEF,
             TokenTypes.ANNOTATION_FIELD_DEF,
             TokenTypes.INTERFACE_DEF,
             TokenTypes.CTOR_DEF,
             TokenTypes.CLASS_DEF,
             TokenTypes.ENUM_DEF,
         };
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         if (ast.getType() == TokenTypes.INTERFACE_DEF) {
             checkInterfaceModifiers(ast);
         }
         else if (ast.getType() == TokenTypes.CTOR_DEF) {
             if (isEnumMember(ast)) {
                 checkEnumConstructorModifiers(ast);
             }
             else {
-                checkClassContructorModifiers(ast);
+                checkClassConstructorModifiers(ast);
             }
         }
         else if (isInterfaceOrAnnotationMember(ast)) {
             processInterfaceOrAnnotation(ast);
         }
         else if (ast.getType() == TokenTypes.METHOD_DEF) {
             processMethods(ast);
         }
     }
 
     /**
      * Checks if interface has proper modifiers
      * @param ast interface to check
      */
     private void checkInterfaceModifiers(DetailAST ast) {
         final DetailAST modifiers =
             ast.findFirstToken(TokenTypes.MODIFIERS);
 
         for (final int tokenType : TOKENS_FOR_INTERFACE_MODIFIERS) {
             final DetailAST modifier =
                     modifiers.findFirstToken(tokenType);
             if (modifier != null) {
                 log(modifier.getLineNo(), modifier.getColumnNo(),
                         MSG_KEY, modifier.getText());
             }
         }
     }
 
     /**
      * Check if enum constructor has proper modifiers
      * @param ast constructor of enum
      */
     private void checkEnumConstructorModifiers(DetailAST ast) {
         final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
         final DetailAST modifier = modifiers.getFirstChild();
         if (modifier != null) {
             log(modifier.getLineNo(), modifier.getColumnNo(),
                     MSG_KEY, modifier.getText());
         }
     }
 
     /**
      * Do validation of interface of annotation
      * @param ast token AST
      */
     private void processInterfaceOrAnnotation(DetailAST ast) {
         final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
         DetailAST modifier = modifiers.getFirstChild();
         while (modifier != null) {
 
@@ -188,101 +188,101 @@ public class RedundantModifierCheck
                 || type == TokenTypes.FINAL) {
                 log(modifier.getLineNo(), modifier.getColumnNo(),
                         MSG_KEY, modifier.getText());
                 break;
             }
 
             modifier = modifier.getNextSibling();
         }
     }
 
     /**
      * Process validation ofMethods
      * @param ast method AST
      */
     private void processMethods(DetailAST ast) {
         final DetailAST modifiers =
                         ast.findFirstToken(TokenTypes.MODIFIERS);
         // private method?
         boolean checkFinal =
             modifiers.branchContains(TokenTypes.LITERAL_PRIVATE);
         // declared in a final class?
         DetailAST parent = ast.getParent();
         while (parent != null) {
             if (parent.getType() == TokenTypes.CLASS_DEF) {
                 final DetailAST classModifiers =
                     parent.findFirstToken(TokenTypes.MODIFIERS);
                 checkFinal |=
                     classModifiers.branchContains(TokenTypes.FINAL);
                 break;
             }
             parent = parent.getParent();
         }
         if (checkFinal && !isAnnotatedWithSafeVarargs(ast)) {
             DetailAST modifier = modifiers.getFirstChild();
             while (modifier != null) {
                 final int type = modifier.getType();
                 if (type == TokenTypes.FINAL) {
                     log(modifier.getLineNo(), modifier.getColumnNo(),
                             MSG_KEY, modifier.getText());
                     break;
                 }
                 modifier = modifier.getNextSibling();
             }
         }
     }
 
     /**
      * Check if class constructor has proper modifiers
      * @param classCtorAst class constructor ast
      */
-    private void checkClassContructorModifiers(DetailAST classCtorAst) {
+    private void checkClassConstructorModifiers(DetailAST classCtorAst) {
         final DetailAST classDef = classCtorAst.getParent().getParent();
         if (!isClassPublic(classDef) && !isClassProtected(classDef)) {
             checkForRedundantPublicModifier(classCtorAst);
         }
     }
 
     /**
      * Checks if given ast has redundant public modifier
      * @param ast ast
      */
     private void checkForRedundantPublicModifier(DetailAST ast) {
         final DetailAST astModifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
         DetailAST astModifier = astModifiers.getFirstChild();
         while (astModifier != null) {
             if (astModifier.getType() == TokenTypes.LITERAL_PUBLIC) {
                 log(astModifier.getLineNo(), astModifier.getColumnNo(),
                         MSG_KEY, astModifier.getText());
             }
 
             astModifier = astModifier.getNextSibling();
         }
     }
 
     /**
      * Checks if given class ast has protected modifier
      * @param classDef class ast
      * @return true if class is protected, false otherwise
      */
     private static boolean isClassProtected(DetailAST classDef) {
         final DetailAST classModifiers =
                 classDef.findFirstToken(TokenTypes.MODIFIERS);
         return classModifiers.branchContains(TokenTypes.LITERAL_PROTECTED);
     }
 
     /**
      * Checks if given class ast has public modifier
      * @param classDef class ast
      * @return true if class is public, false otherwise
      */
     private static boolean isClassPublic(DetailAST classDef) {
         final DetailAST classModifiers =
                 classDef.findFirstToken(TokenTypes.MODIFIERS);
         return classModifiers.branchContains(TokenTypes.LITERAL_PUBLIC);
     }
 
     /**
      * Checks if current AST node is member of Enum
      * @param ast AST node
      * @return true if it is an enum member
      */
