diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java
index 333c7b5b8..155bc4bdd 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java
@@ -194,103 +194,101 @@ public class SuppressWithNearbyCommentFilter
 
     @Override
     public boolean accept(AuditEvent event) {
         boolean accepted = true;
 
         if (event.getLocalizedMessage() != null) {
             // Lazy update. If the first event for the current file, update file
             // contents and tag suppressions
             final FileContents currentContents = FileContentsHolder.getContents();
 
             if (currentContents != null) {
                 if (getFileContents() != currentContents) {
                     setFileContents(currentContents);
                     tagSuppressions();
                 }
                 if (matchesTag(event)) {
                     accepted = false;
                 }
             }
         }
         return accepted;
     }
 
     /**
      * Whether current event matches any tag from {@link #tags}.
      * @param event AuditEvent to test match on {@link #tags}.
      * @return true if event matches any tag from {@link #tags}, false otherwise.
      */
     private boolean matchesTag(AuditEvent event) {
         for (final Tag tag : tags) {
             if (tag.isMatch(event)) {
                 return true;
             }
         }
         return false;
     }
 
     /**
      * Collects all the suppression tags for all comments into a list and
      * sorts the list.
      */
     private void tagSuppressions() {
         tags.clear();
         final FileContents contents = getFileContents();
         if (checkCPP) {
             tagSuppressions(contents.getCppComments().values());
         }
         if (checkC) {
             final Collection<List<TextBlock>> cComments =
                 contents.getCComments().values();
-            for (final List<TextBlock> element : cComments) {
-                tagSuppressions(element);
-            }
+            cComments.forEach(this::tagSuppressions);
         }
         Collections.sort(tags);
     }
 
     /**
      * Appends the suppressions in a collection of comments to the full
      * set of suppression tags.
      * @param comments the set of comments.
      */
     private void tagSuppressions(Collection<TextBlock> comments) {
         for (final TextBlock comment : comments) {
             final int startLineNo = comment.getStartLineNo();
             final String[] text = comment.getText();
             tagCommentLine(text[0], startLineNo);
             for (int i = 1; i < text.length; i++) {
                 tagCommentLine(text[i], startLineNo + i);
             }
         }
     }
 
     /**
      * Tags a string if it matches the format for turning
      * checkstyle reporting on or the format for turning reporting off.
      * @param text the string to tag.
      * @param line the line number of text.
      */
     private void tagCommentLine(String text, int line) {
         final Matcher matcher = commentRegexp.matcher(text);
         if (matcher.find()) {
             addTag(matcher.group(0), line);
         }
     }
 
     /**
      * Adds a comment suppression {@code Tag} to the list of all tags.
      * @param text the text of the tag.
      * @param line the line number of the tag.
      */
     private void addTag(String text, int line) {
         final Tag tag = new Tag(text, line, this);
         tags.add(tag);
     }
 
     /**
      * A Tag holds a suppression comment and its location.
      */
     public static class Tag implements Comparable<Tag> {
         /** The text of the tag. */
         private final String text;
 
