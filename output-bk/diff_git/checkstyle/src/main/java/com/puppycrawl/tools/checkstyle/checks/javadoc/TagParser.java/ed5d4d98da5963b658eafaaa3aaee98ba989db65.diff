diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java
index a35a3413d..6b4d4bb52 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java
@@ -122,122 +122,123 @@ class TagParser {
         final boolean incompleteTag = endTag.getLineNo() >= nLines;
         // get tag id (one word)
         final String tagId;
 
         if (incompleteTag) {
             tagId = "";
         }
         else {
             tagId = getTagId(text, position);
         }
         // is this closed tag
         final boolean closedTag =
                 endTag.getLineNo() < nLines
                  && text[endTag.getLineNo()]
                  .charAt(endTag.getColumnNo() - 1) == '/';
         // add new tag
         add(new HtmlTag(tagId,
                         position.getLineNo() + lineNo,
                         position.getColumnNo(),
                         closedTag,
                         incompleteTag,
                         text[position.getLineNo()]));
         return endTag;
     }
 
     /**
      * Checks if the given position is start one for HTML tag.
      * @param javadocText text of javadoc comments.
      * @param pos position to check.
      * @return {@code true} some HTML tag starts from given position.
      */
     private static boolean isTag(String[] javadocText, Point pos) {
         final int column = pos.getColumnNo() + 1;
         final String text = javadocText[pos.getLineNo()];
 
         //Character.isJavaIdentifier... may not be a valid HTML
         //identifier but is valid for generics
         return column < text.length()
                 && (Character.isJavaIdentifierStart(text.charAt(column))
                     || text.charAt(column) == '/')
                 || column >= text.length();
     }
 
     /**
      * Parse tag id.
      * @param javadocText text of javadoc comments.
      * @param tagStart start position of the tag
      * @return id for given tag
      */
     private static String getTagId(String[] javadocText, Point tagStart) {
+        String tagId = "";
         int column = tagStart.getColumnNo() + 1;
         String text = javadocText[tagStart.getLineNo()];
-        if (column >= text.length()) {
-            return "";
-        }
+        if (column < text.length()) {
 
-        if (text.charAt(column) == '/') {
-            column++;
-        }
+            if (text.charAt(column) == '/') {
+                column++;
+            }
 
-        text = text.substring(column).trim();
-        int position = 0;
+            text = text.substring(column).trim();
+            int position = 0;
 
-        //Character.isJavaIdentifier... may not be a valid HTML
-        //identifier but is valid for generics
-        while (position < text.length()
-            && (Character.isJavaIdentifierStart(text.charAt(position))
-                || Character.isJavaIdentifierPart(text.charAt(position)))) {
-            position++;
-        }
+            //Character.isJavaIdentifier... may not be a valid HTML
+            //identifier but is valid for generics
+            while (position < text.length()
+                    && (Character.isJavaIdentifierStart(text.charAt(position))
+                        || Character.isJavaIdentifierPart(text.charAt(position)))) {
+                position++;
+            }
 
-        return text.substring(0, position);
+            tagId = text.substring(0, position);
+        }
+        return tagId;
     }
 
     /**
      * If this is a HTML-comments.
      * @param text text of javadoc comments
      * @param pos position to check
      * @return {@code true} if HTML-comments
      *         starts form given position.
      */
     private static boolean isCommentTag(String[] text, Point pos) {
         return text[pos.getLineNo()].startsWith("<!--", pos.getColumnNo());
     }
 
     /**
      * Skips HTML comments.
      * @param text text of javadoc comments.
      * @param fromPoint start position of HTML-comments
      * @return position after HTML-comments
      */
     private static Point skipHtmlComment(String[] text, Point fromPoint) {
         Point toPoint = fromPoint;
         toPoint = findChar(text, '>', toPoint);
         while (!text[toPoint.getLineNo()]
                .substring(0, toPoint.getColumnNo() + 1).endsWith("-->")) {
             toPoint = findChar(text, '>', getNextCharPos(text, toPoint));
         }
         return toPoint;
     }
 
     /**
      * Finds next occurrence of given character.
      * @param text text to search
      * @param character character to search
      * @param from position to start search
      * @return position of next occurrence of given character
      */
     private static Point findChar(String[] text, char character, Point from) {
         Point curr = new Point(from.getLineNo(), from.getColumnNo());
         while (curr.getLineNo() < text.length
                && text[curr.getLineNo()].charAt(curr.getColumnNo()) != character) {
             curr = getNextCharPos(text, curr);
         }
 
         return curr;
     }
 
     /**
      * Returns position of next comment character, skips
      * whitespaces and asterisks.
      * @param text to search.
