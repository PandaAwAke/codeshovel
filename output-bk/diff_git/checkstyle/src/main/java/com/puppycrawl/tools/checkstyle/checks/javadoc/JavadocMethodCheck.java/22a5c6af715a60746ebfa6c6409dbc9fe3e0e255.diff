diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
index 03766f4c1..776effc2d 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
@@ -678,102 +678,102 @@ public class JavadocMethodCheck extends AbstractTypeAwareCheck
                             tags.add(new JavadocTag(currentLine, col, p1));
                         }
                     }
                     remIndex++;
                 }
             }
         }
         return tags;
     }
 
     /**
      * Computes the parameter nodes for a method.
      *
      * @param ast the method node.
      * @return the list of parameter nodes for ast.
      */
     private List<DetailAST> getParameters(DetailAST ast)
     {
         final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);
         final List<DetailAST> retVal = Lists.newArrayList();
 
         DetailAST child = params.getFirstChild();
         while (child != null) {
             if (child.getType() == TokenTypes.PARAMETER_DEF) {
                 final DetailAST ident = child.findFirstToken(TokenTypes.IDENT);
                 retVal.add(ident);
             }
             child = child.getNextSibling();
         }
         return retVal;
     }
 
     /**
      * Computes the exception nodes for a method.
      *
      * @param ast the method node.
      * @return the list of exception nodes for ast.
      */
     private List<ExceptionInfo> getThrows(DetailAST ast)
     {
         final List<ExceptionInfo> retVal = Lists.newArrayList();
         final DetailAST throwsAST = ast
                 .findFirstToken(TokenTypes.LITERAL_THROWS);
         if (throwsAST != null) {
             DetailAST child = throwsAST.getFirstChild();
             while (child != null) {
                 if (child.getType() == TokenTypes.IDENT
                         || child.getType() == TokenTypes.DOT)
                 {
                     final FullIdent fi = FullIdent.createFullIdent(child);
-                    final ExceptionInfo ei = new ExceptionInfo(new Token(fi),
-                            getCurrentClassName());
+                    final ExceptionInfo ei = new ExceptionInfo(createClassInfo(new Token(fi),
+                            getCurrentClassName()));
                     retVal.add(ei);
                 }
                 child = child.getNextSibling();
             }
         }
         return retVal;
     }
 
     /**
      * Checks a set of tags for matching parameters.
      *
      * @param tags the tags to check
      * @param parent the node which takes the parameters
      * @param reportExpectedTags whether we should report if do not find
      *            expected tag
      */
     private void checkParamTags(final List<JavadocTag> tags,
             final DetailAST parent, boolean reportExpectedTags)
     {
         final List<DetailAST> params = getParameters(parent);
         final List<DetailAST> typeParams = CheckUtils
                 .getTypeParameters(parent);
 
         // Loop over the tags, checking to see they exist in the params.
         final ListIterator<JavadocTag> tagIt = tags.listIterator();
         while (tagIt.hasNext()) {
             final JavadocTag tag = tagIt.next();
 
             if (!tag.isParamTag()) {
                 continue;
             }
 
             tagIt.remove();
 
             boolean found = false;
 
             // Loop looking for matching param
             final Iterator<DetailAST> paramIt = params.iterator();
             while (paramIt.hasNext()) {
                 final DetailAST param = paramIt.next();
                 if (param.getText().equals(tag.getArg1())) {
                     found = true;
                     paramIt.remove();
                     break;
                 }
             }
 
             if (tag.getArg1().startsWith("<") && tag.getArg1().endsWith(">")) {
                 // Loop looking for matching type param
                 final Iterator<DetailAST> typeParamsIt = typeParams.iterator();
@@ -1029,93 +1029,92 @@ public class JavadocMethodCheck extends AbstractTypeAwareCheck
     {
         // Check have a method with exactly 7 children which are all that
         // is allowed in a proper getter method which does not throw any
         // exceptions.
         if (ast.getType() != TokenTypes.METHOD_DEF
                 || ast.getChildCount() != MAX_CHILDREN)
         {
             return false;
         }
 
         // Check the name matches format of getX or isX. Technically I should
         // check that the format isX is only used with a boolean type.
         final DetailAST type = ast.findFirstToken(TokenTypes.TYPE);
         final String name = type.getNextSibling().getText();
         if (!name.matches("^(is|get)[A-Z].*")) { // Depends on JDK 1.4
             return false;
         }
 
         // Check the return type is void
         if (type.getChildCount(TokenTypes.LITERAL_VOID) > 0) {
             return false;
         }
 
         // Check that is had only one parameter
         final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);
         if (params == null
                 || params.getChildCount(TokenTypes.PARAMETER_DEF) > 0)
         {
             return false;
         }
 
         // Now verify that the body consists of:
         // SLIST -> RETURN
         // RCURLY
         final DetailAST slist = ast.findFirstToken(TokenTypes.SLIST);
         if (slist == null || slist.getChildCount() != 2) {
             return false;
         }
 
         final AST expr = slist.getFirstChild();
         if (expr.getType() != TokenTypes.LITERAL_RETURN
                 || expr.getFirstChild().getType() != TokenTypes.EXPR)
         {
             return false;
         }
 
         return true;
     }
 
     /** Stores useful information about declared exception. */
-    private class ExceptionInfo
+    private static class ExceptionInfo
     {
         /** does the exception have throws tag associated with. */
         private boolean found;
         /** class information associated with this exception. */
         private final ClassInfo classInfo;
 
         /**
          * Creates new instance for <code>FullIdent</code>.
          *
-         * @param ident the exception
-         * @param currentClass name of current class.
+         * @param classInfo clas info
          */
-        ExceptionInfo(Token ident, String currentClass)
+        ExceptionInfo(ClassInfo classInfo)
         {
-            classInfo = createClassInfo(ident, currentClass);
+            this.classInfo = classInfo;
         }
 
         /** Mark that the exception has associated throws tag */
         final void setFound()
         {
             found = true;
         }
 
         /** @return whether the exception has throws tag associated with */
         final boolean isFound()
         {
             return found;
         }
 
         /** @return exception's name */
         final Token getName()
         {
             return classInfo.getName();
         }
 
         /** @return class for this exception */
         final Class<?> getClazz()
         {
             return classInfo.getClazz();
         }
     }
 }
