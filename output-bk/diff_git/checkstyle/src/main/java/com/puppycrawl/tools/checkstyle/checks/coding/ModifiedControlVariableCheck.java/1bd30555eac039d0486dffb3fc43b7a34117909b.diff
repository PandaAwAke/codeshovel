diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java
index a21971ad1..8afd4751d 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java
@@ -161,105 +161,105 @@ public final class ModifiedControlVariableCheck extends Check
                 break;
             case TokenTypes.OBJBLOCK:
                 exitBlock();
                 break;
             case TokenTypes.ASSIGN:
             case TokenTypes.PLUS_ASSIGN:
             case TokenTypes.MINUS_ASSIGN:
             case TokenTypes.STAR_ASSIGN:
             case TokenTypes.DIV_ASSIGN:
             case TokenTypes.MOD_ASSIGN:
             case TokenTypes.SR_ASSIGN:
             case TokenTypes.BSR_ASSIGN:
             case TokenTypes.SL_ASSIGN:
             case TokenTypes.BAND_ASSIGN:
             case TokenTypes.BXOR_ASSIGN:
             case TokenTypes.BOR_ASSIGN:
             case TokenTypes.INC:
             case TokenTypes.POST_INC:
             case TokenTypes.DEC:
             case TokenTypes.POST_DEC:
                 // Do nothing
                 break;
             default:
                 throw new IllegalStateException(ast.toString());
         }
     }
 
     /**
      * Enters an inner class, which requires a new variable set.
      */
     private void enterBlock()
     {
         variableStack.push(currentVariables);
         currentVariables = FastStack.newInstance();
 
     }
     /**
      * Leave an inner class, so restore variable set.
      */
     private void exitBlock()
     {
         currentVariables = variableStack.pop();
     }
 
     /**
      * Check if ident is parameter.
      * @param ast ident to check.
      */
     private void checkIdent(DetailAST ast)
     {
-        if ((currentVariables != null) && !currentVariables.isEmpty()) {
+        if (currentVariables != null && !currentVariables.isEmpty()) {
             final DetailAST identAST = ast.getFirstChild();
 
-            if ((identAST != null)
-                && (identAST.getType() == TokenTypes.IDENT)
+            if (identAST != null
+                && identAST.getType() == TokenTypes.IDENT
                 && currentVariables.contains(identAST.getText()))
             {
                 log(ast.getLineNo(), ast.getColumnNo(),
                     MSG_KEY, identAST.getText());
             }
         }
     }
 
     /**
      * Push current variables to the stack.
      * @param ast a for definition.
      */
     private void leaveForIter(DetailAST ast)
     {
         final DetailAST forInitAST = ast.findFirstToken(TokenTypes.FOR_INIT);
         DetailAST parameterDefAST =
             forInitAST.findFirstToken(TokenTypes.VARIABLE_DEF);
 
         for (; parameterDefAST != null;
              parameterDefAST = parameterDefAST.getNextSibling())
         {
             if (parameterDefAST.getType() == TokenTypes.VARIABLE_DEF) {
                 final DetailAST param =
                     parameterDefAST.findFirstToken(TokenTypes.IDENT);
                 currentVariables.push(param.getText());
             }
         }
     }
 
     /**
      * Push current variables to the stack.
      * @param forEach a for-each clause
      */
     private void leaveForEach(DetailAST forEach)
     {
         final DetailAST paramDef =
             forEach.findFirstToken(TokenTypes.VARIABLE_DEF);
         final DetailAST paramName = paramDef.findFirstToken(TokenTypes.IDENT);
         currentVariables.push(paramName.getText());
     }
 
     /**
      * Pops the variables from the stack.
      * @param ast a for definition.
      */
     private void leaveForDef(DetailAST ast)
     {
         final DetailAST forInitAST = ast.findFirstToken(TokenTypes.FOR_INIT);
         if (forInitAST != null) {
             DetailAST parameterDefAST =
