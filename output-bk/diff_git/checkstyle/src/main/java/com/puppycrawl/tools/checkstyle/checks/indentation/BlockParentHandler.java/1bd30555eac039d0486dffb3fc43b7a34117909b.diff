diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java
index c12c0c0cd..780a10259 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java
@@ -49,231 +49,231 @@ public class BlockParentHandler extends ExpressionHandler
         TokenTypes.VARIABLE_DEF,
         TokenTypes.EXPR,
         TokenTypes.OBJBLOCK,
         TokenTypes.LITERAL_BREAK,
         TokenTypes.LITERAL_RETURN,
         TokenTypes.LITERAL_THROW,
         TokenTypes.LITERAL_CONTINUE,
     };
 
     /**
      * Returns array of token types which should be checked among childrens.
      * @return array of token types to check.
      */
     protected int[] getCheckedChildren()
     {
         return CHECKED_CHILDREN;
     }
 
     /**
      * Construct an instance of this handler with the given indentation check,
      * name, abstract syntax tree, and parent handler.
      *
      * @param indentCheck   the indentation check
      * @param name          the name of the handler
      * @param ast           the abstract syntax tree
      * @param parent        the parent handler
      */
     public BlockParentHandler(IndentationCheck indentCheck,
         String name, DetailAST ast, ExpressionHandler parent)
     {
         super(indentCheck, name, ast, parent);
     }
 
     /**
      * Get the top level expression being managed by this handler.
      *
      * @return the top level expression
      */
     protected DetailAST getToplevelAST()
     {
         return getMainAst();
     }
 
     /**
      * Check the indent of the top level token.
      */
     protected void checkToplevelToken()
     {
         final DetailAST toplevel = getToplevelAST();
 
-        if ((toplevel == null)
+        if (toplevel == null
             || getLevel().accept(expandedTabsColumnNo(toplevel)) || hasLabelBefore())
         {
             return;
         }
         if (!toplevelMustStartLine() && !startsLine(toplevel)) {
             return;
         }
         logError(toplevel, "", expandedTabsColumnNo(toplevel));
     }
 
     /**
      * Check if the top level token has label before.
      * @return true if the top level token has label before.
      */
     protected boolean hasLabelBefore()
     {
         final DetailAST parent = getToplevelAST().getParent();
         return parent != null && parent.getType() == TokenTypes.LABELED_STAT
             && parent.getLineNo() == getToplevelAST().getLineNo();
     }
 
     /**
      * Determines if the top level token must start the line.
      *
      * @return true
      */
     protected boolean toplevelMustStartLine()
     {
         return true;
     }
 
     /**
      * Determines if this block expression has curly braces.
      *
      * @return true if curly braces are present, false otherwise
      */
     protected boolean hasCurlys()
     {
-        return (getLCurly() != null) && (getRCurly() != null);
+        return getLCurly() != null && getRCurly() != null;
     }
 
     /**
      * Get the left curly brace portion of the expression we are handling.
      *
      * @return the left curly brace expression
      */
     protected DetailAST getLCurly()
     {
         return getMainAst().findFirstToken(TokenTypes.SLIST);
     }
 
     /**
      * Get the right curly brace portion of the expression we are handling.
      *
      * @return the right curly brace expression
      */
     protected DetailAST getRCurly()
     {
         final DetailAST slist = getMainAst().findFirstToken(TokenTypes.SLIST);
         if (slist == null) {
             return null;
         }
 
         return slist.findFirstToken(TokenTypes.RCURLY);
     }
 
     /**
      * Check the indentation of the left curly brace.
      */
     protected void checkLCurly()
     {
         // the lcurly can either be at the correct indentation, or nested
         // with a previous expression
         final DetailAST lcurly = getLCurly();
         final int lcurlyPos = expandedTabsColumnNo(lcurly);
 
-        if ((lcurly == null)
+        if (lcurly == null
             || curlyLevel().accept(lcurlyPos)
             || !startsLine(lcurly))
         {
             return;
         }
 
         logError(lcurly, "lcurly", lcurlyPos);
     }
 
     /**
      * Get the expected indentation level for the curly braces.
      *
      * @return the curly brace indentation level
      */
     protected IndentLevel curlyLevel()
     {
         return new IndentLevel(getLevel(), getBraceAdjustement());
     }
 
     /**
      * Determines if the right curly brace must be at the start of the line.
      *
      * @return true
      */
     protected boolean rcurlyMustStart()
     {
         return true;
     }
 
     /**
      * Determines if child elements within the expression may be nested.
      *
      * @return false
      */
     protected boolean childrenMayNest()
     {
         return false;
     }
 
     /**
      * Check the indentation of the right curly brace.
      */
     protected void checkRCurly()
     {
         // the rcurly can either be at the correct indentation, or
         // on the same line as the lcurly
         final DetailAST lcurly = getLCurly();
         final DetailAST rcurly = getRCurly();
         final int rcurlyPos = expandedTabsColumnNo(rcurly);
 
-        if ((rcurly == null)
+        if (rcurly == null
             || curlyLevel().accept(rcurlyPos)
-            || (!rcurlyMustStart() && !startsLine(rcurly))
+            || !rcurlyMustStart() && !startsLine(rcurly)
             || areOnSameLine(rcurly, lcurly))
         {
             return;
         }
         logError(rcurly, "rcurly", rcurlyPos, curlyLevel());
     }
 
     /**
      * Get the child element that is not a list of statements.
      *
      * @return the non-list child element
      */
     protected DetailAST getNonlistChild()
     {
         return getMainAst().findFirstToken(TokenTypes.RPAREN).getNextSibling();
     }
 
     /**
      * Check the indentation level of a child that is not a list of statements.
      */
     private void checkNonlistChild()
     {
         final DetailAST nonlist = getNonlistChild();
         if (nonlist == null) {
             return;
         }
 
         final IndentLevel expected = new IndentLevel(getLevel(), getBasicOffset());
         checkExpressionSubtree(nonlist, expected, false, false);
     }
 
     /**
      * Get the child element representing the list of statements.
      *
      * @return the statement list child
      */
     protected DetailAST getListChild()
     {
         return getMainAst().findFirstToken(TokenTypes.SLIST);
     }
 
     /**
      * Get the right parenthesis portion of the expression we are handling.
      *
      * @return the right parenthis expression
      */
     protected DetailAST getRParen()
     {
         return getMainAst().findFirstToken(TokenTypes.RPAREN);
     }
