diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java
index b0d960c34..786c31c67 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java
@@ -38,103 +38,104 @@ public class HandlerFactory {
      * Registered handlers.
      */
     private final Map<Integer, Constructor<?>> typeHandlers =
         Maps.newHashMap();
 
     /** Cache for created method call handlers. */
     private final Map<DetailAST, AbstractExpressionHandler> createdHandlers =
         Maps.newHashMap();
 
     /** Creates a HandlerFactory. */
     public HandlerFactory() {
         register(TokenTypes.CASE_GROUP, CaseHandler.class);
         register(TokenTypes.LITERAL_SWITCH, SwitchHandler.class);
         register(TokenTypes.SLIST, SlistHandler.class);
         register(TokenTypes.PACKAGE_DEF, PackageDefHandler.class);
         register(TokenTypes.LITERAL_ELSE, ElseHandler.class);
         register(TokenTypes.LITERAL_IF, IfHandler.class);
         register(TokenTypes.LITERAL_TRY, TryHandler.class);
         register(TokenTypes.LITERAL_CATCH, CatchHandler.class);
         register(TokenTypes.LITERAL_FINALLY, FinallyHandler.class);
         register(TokenTypes.LITERAL_DO, DoWhileHandler.class);
         register(TokenTypes.LITERAL_WHILE, WhileHandler.class);
         register(TokenTypes.LITERAL_FOR, ForHandler.class);
         register(TokenTypes.METHOD_DEF, MethodDefHandler.class);
         register(TokenTypes.CTOR_DEF, MethodDefHandler.class);
         register(TokenTypes.CLASS_DEF, ClassDefHandler.class);
         register(TokenTypes.ENUM_DEF, ClassDefHandler.class);
         register(TokenTypes.OBJBLOCK, ObjectBlockHandler.class);
         register(TokenTypes.INTERFACE_DEF, ClassDefHandler.class);
         register(TokenTypes.IMPORT, ImportHandler.class);
         register(TokenTypes.ARRAY_INIT, ArrayInitHandler.class);
         register(TokenTypes.METHOD_CALL, MethodCallHandler.class);
         register(TokenTypes.CTOR_CALL, MethodCallHandler.class);
         register(TokenTypes.LABELED_STAT, LabelHandler.class);
         register(TokenTypes.STATIC_INIT, StaticInitHandler.class);
         register(TokenTypes.INSTANCE_INIT, SlistHandler.class);
         register(TokenTypes.VARIABLE_DEF, MemberDefHandler.class);
         register(TokenTypes.LITERAL_NEW, NewHandler.class);
         register(TokenTypes.INDEX_OP, IndexHandler.class);
         register(TokenTypes.LITERAL_SYNCHRONIZED, SynchronizedHandler.class);
         register(TokenTypes.LAMBDA, LambdaHandler.class);
     }
 
     /**
      * Registers a handler.
      *
      * @param type
      *                type from TokenTypes
      * @param handlerClass
      *                the handler to register
+     * @param <T> type of the handler class object.
      */
-    private void register(int type, Class<?> handlerClass) {
-        final Constructor<?> ctor = CommonUtils.getConstructor(handlerClass,
+    private <T> void register(int type, Class<T> handlerClass) {
+        final Constructor<T> ctor = CommonUtils.getConstructor(handlerClass,
                 IndentationCheck.class,
                 // current AST
                 DetailAST.class,
                 // parent
                 AbstractExpressionHandler.class
         );
         typeHandlers.put(type, ctor);
     }
 
     /**
      * Returns true if this type (form TokenTypes) is handled.
      *
      * @param type type from TokenTypes
      * @return true if handler is registered, false otherwise
      */
     public boolean isHandledType(int type) {
         final Set<Integer> typeSet = typeHandlers.keySet();
         return typeSet.contains(type);
     }
 
     /**
      * Gets list of registered handler types.
      *
      * @return int[] of TokenType types
      */
     public int[] getHandledTypes() {
         final Set<Integer> typeSet = typeHandlers.keySet();
         final int[] types = new int[typeSet.size()];
         int index = 0;
         for (final Integer val : typeSet) {
             types[index] = val;
             index++;
         }
 
         return types;
     }
 
     /**
      * Get the handler for an AST.
      *
      * @param indentCheck   the indentation check
      * @param ast           ast to handle
      * @param parent        the handler parent of this AST
      *
      * @return the ExpressionHandler for ast
      */
     public AbstractExpressionHandler getHandler(IndentationCheck indentCheck,
         DetailAST ast, AbstractExpressionHandler parent) {
         AbstractExpressionHandler resultHandler;
         final AbstractExpressionHandler handler =
