diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java b/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
index 1cef17906..1f8155fcd 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
@@ -385,126 +385,138 @@ public final class TreeWalker
     private void notifyBegin(DetailAST aRootAST, FileContents aContents
             , AstState aAstState)
     {
         Set<Check> checks;
 
         if (aAstState == AstState.WITH_COMMENTS) {
             checks = mCommentChecks;
         }
         else {
             checks = mOrdinaryChecks;
         }
 
         for (Check ch : checks) {
             ch.setFileContents(aContents);
             ch.beginTree(aRootAST);
         }
     }
 
     /**
      * Notify checks that we have finished walking a tree.
      * @param aRootAST the root of the tree.
      * @param aAstState state of AST.
      */
     private void notifyEnd(DetailAST aRootAST, AstState aAstState)
     {
         Set<Check> checks;
 
         if (aAstState == AstState.WITH_COMMENTS) {
             checks = mCommentChecks;
         }
         else {
             checks = mOrdinaryChecks;
         }
 
         for (Check ch : checks) {
             ch.finishTree(aRootAST);
         }
     }
 
     /**
      * Notify checks that visiting a node.
      * @param aAST the node to notify for.
      * @param aAstState state of AST.
      */
     private void notifyVisit(DetailAST aAST, AstState aAstState)
     {
         Collection<Check> visitors;
         final String tokenType = TokenTypes.getTokenName(aAST.getType());
 
         if (aAstState == AstState.WITH_COMMENTS) {
+            if (!mTokenToCommentChecks.containsKey(tokenType)) {
+                return;
+            }
             visitors = mTokenToCommentChecks.get(tokenType);
         }
         else {
+            if (!mTokenToOrdinaryChecks.containsKey(tokenType)) {
+                return;
+            }
             visitors = mTokenToOrdinaryChecks.get(tokenType);
         }
 
         for (Check c : visitors) {
             c.visitToken(aAST);
         }
     }
 
     /**
      * Notify checks that leaving a node.
      * @param aAST
      *        the node to notify for
      * @param aAstState state of AST.
      */
     private void notifyLeave(DetailAST aAST, AstState aAstState)
     {
         Collection<Check> visitors;
         final String tokenType = TokenTypes.getTokenName(aAST.getType());
 
         if (aAstState == AstState.WITH_COMMENTS) {
+            if (!mTokenToCommentChecks.containsKey(tokenType)) {
+                return;
+            }
             visitors = mTokenToCommentChecks.get(tokenType);
         }
         else {
+            if (!mTokenToOrdinaryChecks.containsKey(tokenType)) {
+                return;
+            }
             visitors = mTokenToOrdinaryChecks.get(tokenType);
         }
 
         for (Check ch : visitors) {
             ch.leaveToken(aAST);
         }
     }
 
     /**
      * Static helper method to parses a Java source file.
      *
      * @param aContents
      *                contains the contents of the file
      * @throws TokenStreamException
      *                 if lexing failed
      * @throws RecognitionException
      *                 if parsing failed
      * @return the root of the AST
      */
     public static DetailAST parse(FileContents aContents)
         throws RecognitionException, TokenStreamException
     {
         final String fullText = aContents.getText().getFullText().toString();
         final Reader sr = new StringReader(fullText);
         final GeneratedJavaLexer lexer = new GeneratedJavaLexer(sr);
         lexer.setFilename(aContents.getFilename());
         lexer.setCommentListener(aContents);
         lexer.setTreatAssertAsKeyword(true);
         lexer.setTreatEnumAsKeyword(true);
         lexer.setTokenObjectClass("antlr.CommonHiddenStreamToken");
 
         final TokenStreamHiddenTokenFilter filter =
                 new TokenStreamHiddenTokenFilter(lexer);
         filter.hide(TokenTypes.SINGLE_LINE_COMMENT);
         filter.hide(TokenTypes.BLOCK_COMMENT_BEGIN);
 
         final GeneratedJavaRecognizer parser =
             new GeneratedJavaRecognizer(filter);
         parser.setFilename(aContents.getFilename());
         parser.setASTNodeClass(DetailAST.class.getName());
         parser.compilationUnit();
 
         return (DetailAST) parser.getAST();
     }
 
     @Override
     public void destroy()
     {
         for (Check c : mOrdinaryChecks) {
             c.destroy();
