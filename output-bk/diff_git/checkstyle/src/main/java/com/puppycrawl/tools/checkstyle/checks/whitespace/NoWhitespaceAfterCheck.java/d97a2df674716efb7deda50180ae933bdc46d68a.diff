diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java
index db5fa2713..24b94d62f 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java
@@ -19,302 +19,302 @@
 
 package com.puppycrawl.tools.checkstyle.checks.whitespace;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * <p>
  * Checks that there is no whitespace after a token.
  * More specifically, it checks that it is not followed by whitespace,
  * or (if linebreaks are allowed) all characters on the line after are
  * whitespace. To forbid linebreaks afer a token, set property
  * allowLineBreaks to false.
  * </p>
   * <p> By default the check will check the following operators:
  *  {@link TokenTypes#ARRAY_INIT ARRAY_INIT},
  *  {@link TokenTypes#BNOT BNOT},
  *  {@link TokenTypes#DEC DEC},
  *  {@link TokenTypes#DOT DOT},
  *  {@link TokenTypes#INC INC},
  *  {@link TokenTypes#LNOT LNOT},
  *  {@link TokenTypes#UNARY_MINUS UNARY_MINUS},
  *  {@link TokenTypes#ARRAY_DECLARATOR ARRAY_DECLARATOR},
  *  {@link TokenTypes#UNARY_PLUS UNARY_PLUS}. It also supports the operator
  *  {@link TokenTypes#TYPECAST TYPECAST}.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="NoWhitespaceAfter"/&gt;
  * </pre>
  * <p> An example of how to configure the check to forbid linebreaks after
  * a {@link TokenTypes#DOT DOT} token is:
  * </p>
  * <pre>
  * &lt;module name="NoWhitespaceAfter"&gt;
  *     &lt;property name="tokens" value="DOT"/&gt;
  *     &lt;property name="allowLineBreaks" value="false"/&gt;
  * &lt;/module&gt;
  * </pre>
  * @author Rick Giles
  * @author lkuehne
  * @author <a href="mailto:nesterenko-aleksey@list.ru">Aleksey Nesterenko</a>
  * @version 1.0
  */
 public class NoWhitespaceAfterCheck extends Check
 {
     /** Whether whitespace is allowed if the AST is at a linebreak */
-    private boolean mAllowLineBreaks = true;
+    private boolean allowLineBreaks = true;
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.ARRAY_INIT,
             TokenTypes.INC,
             TokenTypes.DEC,
             TokenTypes.UNARY_MINUS,
             TokenTypes.UNARY_PLUS,
             TokenTypes.BNOT,
             TokenTypes.LNOT,
             TokenTypes.DOT,
             TokenTypes.ARRAY_DECLARATOR,
         };
     }
 
     @Override
     public int[] getAcceptableTokens()
     {
         return new int[] {
             TokenTypes.ARRAY_INIT,
             TokenTypes.INC,
             TokenTypes.DEC,
             TokenTypes.UNARY_MINUS,
             TokenTypes.UNARY_PLUS,
             TokenTypes.BNOT,
             TokenTypes.LNOT,
             TokenTypes.DOT,
             TokenTypes.TYPECAST,
             TokenTypes.ARRAY_DECLARATOR,
         };
     }
 
     @Override
-    public void visitToken(DetailAST aAST)
+    public void visitToken(DetailAST ast)
     {
-        DetailAST ast = aAST;
-        if (aAST.getType() == TokenTypes.ARRAY_DECLARATOR
-                 || aAST.getType() == TokenTypes.TYPECAST)
+        DetailAST astNode = ast;
+        if (ast.getType() == TokenTypes.ARRAY_DECLARATOR
+                 || ast.getType() == TokenTypes.TYPECAST)
         {
-            ast = getPreceded(aAST);
+            astNode = getPreceded(ast);
         }
 
-        final String line = getLine(aAST.getLineNo() - 1);
-        final int after = getPositionAfter(ast);
+        final String line = getLine(ast.getLineNo() - 1);
+        final int after = getPositionAfter(astNode);
 
         if ((after >= line.length() || Character.isWhitespace(line.charAt(after)))
                  && hasRedundantWhitespace(line, after))
         {
-            log(ast.getLineNo(), after,
-                "ws.followed", ast.getText());
+            log(astNode.getLineNo(), after,
+                "ws.followed", astNode.getText());
         }
     }
 
     /**
      * Gets possible place where redundant whitespace could be.
-     * @param aArrayOrTypeCast {@link TokenTypes#ARRAY_DECLARATOR ARRAY_DECLARATOR}
+     * @param arrayOrTypeCast {@link TokenTypes#ARRAY_DECLARATOR ARRAY_DECLARATOR}
      *  or {@link TokenTypes#TYPECAST TYPECAST}.
      * @return possible place of redundant whitespace.
      */
-    private static DetailAST getPreceded(DetailAST aArrayOrTypeCast)
+    private static DetailAST getPreceded(DetailAST arrayOrTypeCast)
     {
-        DetailAST preceded = aArrayOrTypeCast;
-        switch (aArrayOrTypeCast.getType()) {
+        DetailAST preceded = arrayOrTypeCast;
+        switch (arrayOrTypeCast.getType()) {
         case TokenTypes.TYPECAST:
-            preceded = aArrayOrTypeCast.findFirstToken(TokenTypes.RPAREN);
+            preceded = arrayOrTypeCast.findFirstToken(TokenTypes.RPAREN);
             break;
         case TokenTypes.ARRAY_DECLARATOR:
-            preceded = getArrayTypeOrIdentifier(aArrayOrTypeCast);
+            preceded = getArrayTypeOrIdentifier(arrayOrTypeCast);
             break;
         default:
-            throw new IllegalStateException(aArrayOrTypeCast.toString());
+            throw new IllegalStateException(arrayOrTypeCast.toString());
         }
         return preceded;
     }
 
     /**
      * Gets position after token (place of possible redundant whitespace).
-     * @param aAST Node representing token.
+     * @param ast Node representing token.
      * @return position after token.
      */
-    private static int getPositionAfter(DetailAST aAST)
+    private static int getPositionAfter(DetailAST ast)
     {
         int after;
         //If target of possible redundant whitespace is in method definition
-        if (aAST.getType() == TokenTypes.IDENT
-                && aAST.getNextSibling() != null
-                && aAST.getNextSibling().getType() == TokenTypes.LPAREN)
+        if (ast.getType() == TokenTypes.IDENT
+                && ast.getNextSibling() != null
+                && ast.getNextSibling().getType() == TokenTypes.LPAREN)
         {
-            final DetailAST methodDef = aAST.getParent();
+            final DetailAST methodDef = ast.getParent();
             final DetailAST endOfParams = methodDef.findFirstToken(TokenTypes.RPAREN);
             after = endOfParams.getColumnNo() + 1;
         }
         else {
-            after = aAST.getColumnNo() + aAST.getText().length();
+            after = ast.getColumnNo() + ast.getText().length();
         }
         return after;
     }
 
     /**
      * Gets target place of possible redundant whitespace (array's type or identifier)
      *  after which {@link TokenTypes#ARRAY_DECLARATOR ARRAY_DECLARATOR} is set.
-     * @param aArrayDeclarator {@link TokenTypes#ARRAY_DECLARATOR ARRAY_DECLARATOR}
+     * @param arrayDeclarator {@link TokenTypes#ARRAY_DECLARATOR ARRAY_DECLARATOR}
      * @return target place before possible redundant whitespace.
      */
-    private static DetailAST getArrayTypeOrIdentifier(DetailAST aArrayDeclarator)
+    private static DetailAST getArrayTypeOrIdentifier(DetailAST arrayDeclarator)
     {
-        DetailAST typeOrIdent = aArrayDeclarator;
-        if (isArrayInstantiation(aArrayDeclarator)) {
-            typeOrIdent = aArrayDeclarator.getParent().getFirstChild();
+        DetailAST typeOrIdent = arrayDeclarator;
+        if (isArrayInstantiation(arrayDeclarator)) {
+            typeOrIdent = arrayDeclarator.getParent().getFirstChild();
         }
-        else if (isMultiDimensionalArray(aArrayDeclarator)) {
-            if (isCstyleMultiDimensionalArrayDeclaration(aArrayDeclarator)) {
-                if (aArrayDeclarator.getParent().getType() != TokenTypes.ARRAY_DECLARATOR) {
-                    typeOrIdent = getArrayIdentifier(aArrayDeclarator);
+        else if (isMultiDimensionalArray(arrayDeclarator)) {
+            if (isCstyleMultiDimensionalArrayDeclaration(arrayDeclarator)) {
+                if (arrayDeclarator.getParent().getType() != TokenTypes.ARRAY_DECLARATOR) {
+                    typeOrIdent = getArrayIdentifier(arrayDeclarator);
                 }
             }
             else {
-                DetailAST arrayIdentifier = aArrayDeclarator.getFirstChild();
+                DetailAST arrayIdentifier = arrayDeclarator.getFirstChild();
                 while (arrayIdentifier != null) {
                     typeOrIdent = arrayIdentifier;
                     arrayIdentifier = arrayIdentifier.getFirstChild();
                 }
             }
         }
         else {
-            if (isCstyleArrayDeclaration(aArrayDeclarator)) {
-                typeOrIdent = getArrayIdentifier(aArrayDeclarator);
+            if (isCstyleArrayDeclaration(arrayDeclarator)) {
+                typeOrIdent = getArrayIdentifier(arrayDeclarator);
             }
             else {
-                typeOrIdent = aArrayDeclarator.getFirstChild();
+                typeOrIdent = arrayDeclarator.getFirstChild();
             }
         }
         return typeOrIdent;
     }
 
     /**
      * Gets array identifier, e.g.:
      * <p>
      * <code>
      * int[] someArray;
      * <code>
      * </p>
      * <p>
      * someArray is identifier.
      * </p>
-     * @param aArrayDeclarator {@link TokenTypes#ARRAY_DECLARATOR ARRAY_DECLARATOR}
+     * @param arrayDeclarator {@link TokenTypes#ARRAY_DECLARATOR ARRAY_DECLARATOR}
      * @return array identifier.
      */
-    private static DetailAST getArrayIdentifier(DetailAST aArrayDeclarator)
+    private static DetailAST getArrayIdentifier(DetailAST arrayDeclarator)
     {
-        return aArrayDeclarator.getParent().getNextSibling();
+        return arrayDeclarator.getParent().getNextSibling();
     }
 
     /**
      * Checks if current array is multidimensional.
-     * @param aArrayDeclaration {@link TokenTypes#ARRAY_DECLARATOR ARRAY_DECLARATOR}
+     * @param arrayDeclaration {@link TokenTypes#ARRAY_DECLARATOR ARRAY_DECLARATOR}
      * @return true if current array is multidimensional.
      */
-    private static boolean isMultiDimensionalArray(DetailAST aArrayDeclaration)
+    private static boolean isMultiDimensionalArray(DetailAST arrayDeclaration)
     {
-        return aArrayDeclaration.getParent().getType() == TokenTypes.ARRAY_DECLARATOR
-                || aArrayDeclaration.getFirstChild().getType() == TokenTypes.ARRAY_DECLARATOR;
+        return arrayDeclaration.getParent().getType() == TokenTypes.ARRAY_DECLARATOR
+                || arrayDeclaration.getFirstChild().getType() == TokenTypes.ARRAY_DECLARATOR;
     }
 
     /**
      * Checks if current array declaration is part of array instantiation.
-     * @param aArrayDeclaration {@link TokenTypes#ARRAY_DECLARATOR ARRAY_DECLARATOR}
+     * @param arrayDeclaration {@link TokenTypes#ARRAY_DECLARATOR ARRAY_DECLARATOR}
      * @return true if current array declaration is part of array instantiation.
      */
-    private static boolean isArrayInstantiation(DetailAST aArrayDeclaration)
+    private static boolean isArrayInstantiation(DetailAST arrayDeclaration)
     {
-        return aArrayDeclaration.getParent().getType() == TokenTypes.LITERAL_NEW;
+        return arrayDeclaration.getParent().getType() == TokenTypes.LITERAL_NEW;
     }
 
     /**
      * Control whether whitespace is flagged at linebreaks.
-     * @param aAllowLineBreaks whether whitespace should be
+     * @param allowLineBreaks whether whitespace should be
      * flagged at linebreaks.
      */
-    public void setAllowLineBreaks(boolean aAllowLineBreaks)
+    public void setAllowLineBreaks(boolean allowLineBreaks)
     {
-        mAllowLineBreaks = aAllowLineBreaks;
+        this.allowLineBreaks = allowLineBreaks;
     }
 
     /**
      * Checks if current array is declared in C style, e.g.:
      * <p>
      * <code>
      * int array[] = { ... }; //C style
      * </code>
      * </p>
      * <p>
      * <code>
      * int[] array = { ... }; //Java style
      * </code>
      * </p>
-     * @param aArrayDeclaration {@link TokenTypes#ARRAY_DECLARATOR ARRAY_DECLARATOR}
+     * @param arrayDeclaration {@link TokenTypes#ARRAY_DECLARATOR ARRAY_DECLARATOR}
      * @return true if array is declared in C style
      */
-    private static boolean isCstyleArrayDeclaration(DetailAST aArrayDeclaration)
+    private static boolean isCstyleArrayDeclaration(DetailAST arrayDeclaration)
     {
         boolean result = false;
-        final DetailAST identifier = getArrayIdentifier(aArrayDeclaration);
+        final DetailAST identifier = getArrayIdentifier(arrayDeclaration);
         if (identifier != null) {
-            final int arrayDeclarationStart = aArrayDeclaration.getColumnNo();
+            final int arrayDeclarationStart = arrayDeclaration.getColumnNo();
             final int identifierEnd = identifier.getColumnNo() + identifier.getText().length();
             result = arrayDeclarationStart == identifierEnd
                      || arrayDeclarationStart > identifierEnd;
         }
         return result;
     }
 
     /**
      * Works with multidimensional arrays.
-     * @param aArrayDeclaration {@link TokenTypes#ARRAY_DECLARATOR ARRAY_DECLARATOR}
+     * @param arrayDeclaration {@link TokenTypes#ARRAY_DECLARATOR ARRAY_DECLARATOR}
      * @return true if multidimensional array is declared in C style.
      */
-    private static boolean isCstyleMultiDimensionalArrayDeclaration(DetailAST aArrayDeclaration)
+    private static boolean isCstyleMultiDimensionalArrayDeclaration(DetailAST arrayDeclaration)
     {
         boolean result = false;
-        DetailAST parentArrayDeclaration = aArrayDeclaration;
+        DetailAST parentArrayDeclaration = arrayDeclaration;
         while (parentArrayDeclaration != null) {
             if (parentArrayDeclaration.getParent() != null
                     && parentArrayDeclaration.getParent().getType() == TokenTypes.TYPE)
             {
                 result = isCstyleArrayDeclaration(parentArrayDeclaration);
             }
             parentArrayDeclaration = parentArrayDeclaration.getParent();
         }
         return result;
     }
 
     /**
      * Checks if current line has redundant whitespace after specified index.
-     * @param aLine line of java source.
-     * @param aAfter specified index.
+     * @param line line of java source.
+     * @param after specified index.
      * @return true if line contains redundant whitespace.
      */
-    private boolean hasRedundantWhitespace(String aLine, int aAfter)
+    private boolean hasRedundantWhitespace(String line, int after)
     {
-        boolean result = !mAllowLineBreaks;
-        for (int i = aAfter + 1; !result && (i < aLine.length()); i++) {
-            if (!Character.isWhitespace(aLine.charAt(i))) {
+        boolean result = !allowLineBreaks;
+        for (int i = after + 1; !result && (i < line.length()); i++) {
+            if (!Character.isWhitespace(line.charAt(i))) {
                 result = true;
             }
         }
         return result;
     }
 }
