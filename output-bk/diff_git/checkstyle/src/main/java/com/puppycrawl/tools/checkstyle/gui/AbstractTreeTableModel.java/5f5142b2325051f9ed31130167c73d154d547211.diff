diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/AbstractTreeTableModel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/AbstractTreeTableModel.java
index 763615b98..e04161ef4 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/AbstractTreeTableModel.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/AbstractTreeTableModel.java
@@ -58,176 +58,176 @@ public abstract class AbstractTreeTableModel implements TreeTableModel {
     // Default implementations for methods in the TreeModel interface.
     //
 
     @Override
     public Object getRoot() {
         return root;
     }
 
     @Override
     public boolean isLeaf(Object node) {
         return getChildCount(node) == 0;
     }
 
     // This is not called in the JTree's default mode: use a naive implementation.
     @Override
     public int getIndexOfChild(Object parent, Object child) {
         for (int i = 0; i < getChildCount(parent); i++) {
             if (getChild(parent, i).equals(child)) {
                 return i;
             }
         }
         return -1;
     }
 
     @Override
     public void addTreeModelListener(TreeModelListener listener) {
         listenerList.add(TreeModelListener.class, listener);
     }
 
     @Override
     public void removeTreeModelListener(TreeModelListener listener) {
         listenerList.remove(TreeModelListener.class, listener);
     }
 
     /**
      * Notifies all listeners that have registered interest for
      * 'tree nodes changed' event.  The event instance
      * is lazily created using the parameters passed into
      * the fire method.
      * @param source The Object responsible for generating the event.
      * @param path An array of Object identifying the path to the parent of the modified items.
      * @param childIndices An array of int that specifies the index values of the removed items.
      * @param children An array of Object containing the inserted, removed, or changed objects.
      * @see EventListenerList
      */
     protected void fireTreeNodesChanged(Object source, Object[] path,
             int[] childIndices,
             Object... children) {
         // Guaranteed to return a non-null array
         final Object[] listeners = listenerList.getListenerList();
-        TreeModelEvent e = null;
+        TreeModelEvent event = null;
         // Process the listeners last to first, notifying
         // those that are interested in this event
         for (int i = listeners.length - 2; i >= 0; i -= 2) {
             if (listeners[i] == TreeModelListener.class) {
                 // Lazily create the event:
-                if (e == null) {
-                    e = new TreeModelEvent(source, path,
+                if (event == null) {
+                    event = new TreeModelEvent(source, path,
                             childIndices, children);
                 }
-                ((TreeModelListener) listeners[i + 1]).treeNodesChanged(e);
+                ((TreeModelListener) listeners[i + 1]).treeNodesChanged(event);
             }
         }
     }
 
     /**
      * Notify all listeners that have registered interest for
      * 'tree nodes inserted' event.  The event instance
      * is lazily created using the parameters passed into
      * the fire method.
      * @param source The Object responsible for generating the event.
      * @param path An array of Object identifying the path to the parent of the modified items.
      * @param childIndices An array of int that specifies the index values of the removed items.
      * @param children An array of Object containing the inserted, removed, or changed objects.
      * @see EventListenerList
      */
     protected void fireTreeNodesInserted(Object source, Object[] path,
             int[] childIndices,
             Object... children) {
         // Guaranteed to return a non-null array
         final Object[] listeners = listenerList.getListenerList();
-        TreeModelEvent e = null;
+        TreeModelEvent event = null;
         // Process the listeners last to first, notifying
         // those that are interested in this event
         for (int i = listeners.length - 2; i >= 0; i -= 2) {
             if (listeners[i] == TreeModelListener.class) {
                 // Lazily create the event:
-                if (e == null) {
-                    e = new TreeModelEvent(source, path,
+                if (event == null) {
+                    event = new TreeModelEvent(source, path,
                             childIndices, children);
                 }
-                ((TreeModelListener) listeners[i + 1]).treeNodesInserted(e);
+                ((TreeModelListener) listeners[i + 1]).treeNodesInserted(event);
             }
         }
     }
 
     /**
      * Notify all listeners that have registered interest for
      * 'tree nodes removed' event.  The event instance
      * is lazily created using the parameters passed into
      * the fire method.
      * @param source The Object responsible for generating the event.
      * @param path An array of Object identifying the path to the parent of the modified items.
      * @param childIndices An array of int that specifies the index values of the removed items.
      * @param children An array of Object containing the inserted, removed, or changed objects.
      * @see EventListenerList
      */
     protected void fireTreeNodesRemoved(Object source, Object[] path,
             int[] childIndices,
             Object... children) {
         // Guaranteed to return a non-null array
         final Object[] listeners = listenerList.getListenerList();
-        TreeModelEvent e = null;
+        TreeModelEvent event = null;
         // Process the listeners last to first, notifying
         // those that are interested in this event
         for (int i = listeners.length - 2; i >= 0; i -= 2) {
             if (listeners[i] == TreeModelListener.class) {
                 // Lazily create the event:
-                if (e == null) {
-                    e = new TreeModelEvent(source, path,
+                if (event == null) {
+                    event = new TreeModelEvent(source, path,
                             childIndices, children);
                 }
-                ((TreeModelListener) listeners[i + 1]).treeNodesRemoved(e);
+                ((TreeModelListener) listeners[i + 1]).treeNodesRemoved(event);
             }
         }
     }
 
     /**
      * Notify all listeners that have registered interest for
      * 'tree structure changed' event.  The event instance
      * is lazily created using the parameters passed into
      * the fire method.
      * @param source The Object responsible for generating the event.
      * @param path An array of Object identifying the path to the parent of the modified items.
      * @param childIndices An array of int that specifies the index values of the removed items.
      * @param children An array of Object containing the inserted, removed, or changed objects.
      * @see EventListenerList
      */
     void fireTreeStructureChanged(Object source, Object[] path,
             int[] childIndices,
             Object... children) {
         // Guaranteed to return a non-null array
         final Object[] listeners = listenerList.getListenerList();
-        TreeModelEvent e = null;
+        TreeModelEvent event = null;
         // Process the listeners last to first, notifying
         // those that are interested in this event
         for (int i = listeners.length - 2; i >= 0; i -= 2) {
             if (listeners[i] == TreeModelListener.class) {
                 // Lazily create the event:
-                if (e == null) {
-                    e = new TreeModelEvent(source, path,
+                if (event == null) {
+                    event = new TreeModelEvent(source, path,
                             childIndices, children);
                 }
-                ((TreeModelListener) listeners[i + 1]).treeStructureChanged(e);
+                ((TreeModelListener) listeners[i + 1]).treeStructureChanged(event);
             }
         }
     }
 
     //
     // Default implementations for methods in the TreeTableModel interface.
     //
 
     @Override
     public Class<?> getColumnClass(int column) {
         return Object.class;
     }
 
     /** By default, make the column with the Tree in it the only editable one.
      *  Making this column editable causes the JTable to forward mouse
      *  and keyboard events in the Tree column to the underlying JTree.
      */
     @Override
     public boolean isCellEditable(int column) {
         return getColumnClass(column) == TreeTableModel.class;
     }
 }
