diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java
index b550a76dd..d04c75b16 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java
@@ -125,124 +125,124 @@ public final class FileText {
 
         // Use the BufferedReader to break down the lines as this
         // is about 30% faster than using the
         // LINE_TERMINATOR.split(fullText, -1) method
         final ArrayList<String> textLines = new ArrayList<>();
         final BufferedReader reader = new BufferedReader(new StringReader(fullText));
         try {
             while (true) {
                 final String line = reader.readLine();
                 if (line == null) {
                     break;
                 }
                 textLines.add(line);
             }
             lines = textLines.toArray(new String[textLines.size()]);
         }
         finally {
             Closeables.closeQuietly(reader);
         }
     }
 
     /**
      * Copy constructor.
      * @param fileText to make copy of
      */
     public FileText(FileText fileText) {
         file = fileText.file;
         charset = fileText.charset;
         fullText = fileText.fullText;
         lines = fileText.lines.clone();
         if (fileText.lineBreaks == null) {
             lineBreaks = null;
         }
         else {
             lineBreaks = fileText.lineBreaks.clone();
         }
     }
 
     /**
      * Compatibility constructor.
      *
      * <p>This constructor reconstructs the text of the file by joining
      * lines with linefeed characters. This process does not restore
      * the original line terminators and should therefore be avoided.
      *
      * @param file the name of the file
      * @param lines the lines of the text, without terminators
      * @throws NullPointerException if the lines array is null
      */
     public FileText(File file, List<String> lines) {
-        final StringBuilder buf = new StringBuilder();
+        final StringBuilder buf = new StringBuilder(1024);
         for (final String line : lines) {
             buf.append(line).append('\n');
         }
 
         this.file = file;
         charset = null;
         fullText = buf.toString();
         this.lines = lines.toArray(new String[lines.size()]);
     }
 
     /**
      * Reads file using specific decoder and returns all its content as a String.
      * @param inputFile File to read
      * @param decoder Charset decoder
      * @return File's text
      * @throws IOException Unable to open or read the file
      */
     private static String readFile(final File inputFile, final CharsetDecoder decoder)
             throws IOException {
         if (!inputFile.exists()) {
             throw new FileNotFoundException(inputFile.getPath() + " (No such file or directory)");
         }
-        final StringBuilder buf = new StringBuilder();
+        final StringBuilder buf = new StringBuilder(1024);
         final FileInputStream stream = new FileInputStream(inputFile);
         final Reader reader = new InputStreamReader(stream, decoder);
         try {
             final char[] chars = new char[READ_BUFFER_SIZE];
             while (true) {
                 final int len = reader.read(chars);
                 if (len == -1) {
                     break;
                 }
                 buf.append(chars, 0, len);
             }
         }
         finally {
             Closeables.closeQuietly(reader);
         }
         return buf.toString();
     }
 
     /**
      * Get the name of the file.
      * @return an object containing the name of the file
      */
     public File getFile() {
         return file;
     }
 
     /**
      * Get the character set which was used to read the file.
      * Will be {@code null} for a file reconstructed from its lines.
      * @return the charset used when the file was read
      */
     public Charset getCharset() {
         return charset;
     }
 
     /**
      * Retrieve the full text of the file.
      * @return the full text of the file
      */
     public CharSequence getFullText() {
         return fullText;
     }
 
     /**
      * Returns an array of all lines.
      * {@code text.toLinesArray()} is equivalent to
      * {@code text.toArray(new String[text.size()])}.
      * @return an array of all lines of the text
      */
     public String[] toLinesArray() {
