diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtility.java b/src/main/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtility.java
index 72c99c871..bb673e99b 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtility.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtility.java
@@ -37,101 +37,101 @@ public final class AnnotationUtility {
 
     /**
      * Private utility constructor.
      * @throws UnsupportedOperationException if called
      */
     private AnnotationUtility() {
         throw new UnsupportedOperationException("do not instantiate.");
     }
 
     /**
      * Checks to see if the AST is annotated with
      * the passed in annotation.
      *
      * <p>
      * This method will not look for imports or package
      * statements to detect the passed in annotation.
      * </p>
      *
      * <p>
      * To check if an AST contains a passed in annotation
      * taking into account fully-qualified names
      * (ex: java.lang.Override, Override)
      * this method will need to be called twice. Once for each
      * name given.
      * </p>
      *
      * @param ast the current node
      * @param annotation the annotation name to check for
      * @return true if contains the annotation
      */
     public static boolean containsAnnotation(final DetailAST ast,
         String annotation) {
         if (ast == null) {
             throw new IllegalArgumentException(THE_AST_IS_NULL);
         }
         return getAnnotation(ast, annotation) != null;
     }
 
     /**
      * Checks to see if the AST is annotated with
      * any annotation.
      *
      * @param ast the current node
      * @return true if contains an annotation
      */
     public static boolean containsAnnotation(final DetailAST ast) {
         if (ast == null) {
             throw new IllegalArgumentException(THE_AST_IS_NULL);
         }
         final DetailAST holder = getAnnotationHolder(ast);
-        return holder != null && holder.branchContains(TokenTypes.ANNOTATION);
+        return holder != null && holder.findFirstToken(TokenTypes.ANNOTATION) != null;
     }
 
     /**
      * Gets the AST that holds a series of annotations for the
      * potentially annotated AST.  Returns {@code null}
      * the passed in AST is not have an Annotation Holder.
      *
      * @param ast the current node
      * @return the Annotation Holder
      */
     public static DetailAST getAnnotationHolder(DetailAST ast) {
         if (ast == null) {
             throw new IllegalArgumentException(THE_AST_IS_NULL);
         }
 
         final DetailAST annotationHolder;
 
         if (ast.getType() == TokenTypes.ENUM_CONSTANT_DEF
             || ast.getType() == TokenTypes.PACKAGE_DEF) {
             annotationHolder = ast.findFirstToken(TokenTypes.ANNOTATIONS);
         }
         else {
             annotationHolder = ast.findFirstToken(TokenTypes.MODIFIERS);
         }
 
         return annotationHolder;
     }
 
     /**
      * Checks to see if the AST is annotated with
      * the passed in annotation and return the AST
      * representing that annotation.
      *
      * <p>
      * This method will not look for imports or package
      * statements to detect the passed in annotation.
      * </p>
      *
      * <p>
      * To check if an AST contains a passed in annotation
      * taking into account fully-qualified names
      * (ex: java.lang.Override, Override)
      * this method will need to be called twice. Once for each
      * name given.
      * </p>
      *
      * @param ast the current node
      * @param annotation the annotation name to check for
      * @return the AST representing that annotation
      */
