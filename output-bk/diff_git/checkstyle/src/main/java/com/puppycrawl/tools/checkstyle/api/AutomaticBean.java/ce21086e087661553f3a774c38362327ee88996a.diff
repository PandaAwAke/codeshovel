diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
index 6ebd30ea4..2f505af3c 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
@@ -268,101 +268,101 @@ public class AutomaticBean
      * @see Configuration#getChildren
      */
     protected void setupChild(Configuration childConf)
             throws CheckstyleException {
         if (childConf != null) {
             throw new CheckstyleException(childConf.getName() + " is not allowed as a child in "
                     + getConfiguration().getName());
         }
     }
 
     /** A converter that converts strings to patterns. */
     private static class PatternConverter implements Converter {
         @SuppressWarnings({"unchecked", "rawtypes"})
         @Override
         public Object convert(Class type, Object value) {
             return CommonUtils.createPattern(value.toString());
         }
     }
 
     /** A converter that converts strings to severity level. */
     private static class ServerityLevelConverter implements Converter {
         @SuppressWarnings({"unchecked", "rawtypes"})
         @Override
         public Object convert(Class type, Object value) {
             return SeverityLevel.getInstance(value.toString());
         }
     }
 
     /** A converter that converts strings to scope. */
     private static class ScopeConverter implements Converter {
         @SuppressWarnings({"unchecked", "rawtypes"})
         @Override
         public Object convert(Class type, Object value) {
             return Scope.getInstance(value.toString());
         }
     }
 
     /** A converter that converts strings to uri. */
     private static class UriConverter implements Converter {
         @SuppressWarnings({"unchecked", "rawtypes"})
         @Override
         public Object convert(Class type, Object value) {
             final String url = value.toString();
             URI result = null;
 
             if (!CommonUtils.isBlank(url)) {
                 try {
                     result = CommonUtils.getUriByFilename(url);
                 }
                 catch (CheckstyleException ex) {
-                    throw new ConversionException(ex);
+                    throw new IllegalArgumentException(ex);
                 }
             }
 
             return result;
         }
     }
 
     /**
      * A converter that does not care whether the array elements contain String
      * characters like '*' or '_'. The normal ArrayConverter class has problems
      * with this characters.
      */
     private static class RelaxedStringArrayConverter implements Converter {
         @SuppressWarnings({"unchecked", "rawtypes"})
         @Override
         public Object convert(Class type, Object value) {
             // Convert to a String and trim it for the tokenizer.
             final StringTokenizer tokenizer = new StringTokenizer(
                 value.toString().trim(), COMMA_SEPARATOR);
             final List<String> result = new ArrayList<>();
 
             while (tokenizer.hasMoreTokens()) {
                 final String token = tokenizer.nextToken();
                 result.add(token.trim());
             }
 
             return result.toArray(new String[result.size()]);
         }
     }
 
     /**
      * A converter that converts strings to {@link AccessModifier}.
      * This implementation does not care whether the array elements contain characters like '_'.
      * The normal {@link ArrayConverter} class has problems with this character.
      */
     private static class RelaxedAccessModifierArrayConverter implements Converter {
 
         @SuppressWarnings({"unchecked", "rawtypes"})
         @Override
         public Object convert(Class type, Object value) {
             // Converts to a String and trims it for the tokenizer.
             final StringTokenizer tokenizer = new StringTokenizer(
                 value.toString().trim(), COMMA_SEPARATOR);
             final List<AccessModifier> result = new ArrayList<>();
 
             while (tokenizer.hasMoreTokens()) {
                 final String token = tokenizer.nextToken();
                 result.add(AccessModifier.getInstance(token.trim()));
             }
 
