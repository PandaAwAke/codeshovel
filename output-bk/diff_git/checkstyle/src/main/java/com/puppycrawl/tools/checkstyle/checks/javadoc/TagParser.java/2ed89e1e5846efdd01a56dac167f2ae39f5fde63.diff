diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java
index 73deacb1d..e3ba991d2 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java
@@ -162,101 +162,101 @@ class TagParser
     {
         int column = aTagStart.getColumnNo() + 1;
         String text = aText[aTagStart.getLineNo()];
         if (column >= text.length()) {
             return "";
         }
 
         if (text.charAt(column) == '/') {
             column++;
         }
 
         text = text.substring(column).trim();
         column = 0;
 
         //Character.isJavaIdentifier... may not be a valid HTML
         //identifier but is valid for generics
         while (column < text.length()
             && (Character.isJavaIdentifierStart(text.charAt(column))
                 || Character.isJavaIdentifierPart(text.charAt(column))))
         {
             column++;
         }
 
         return text.substring(0, column);
     }
 
     /**
      * If this is a HTML-comments.
      * @param aText text of javadoc comments
      * @param aPos position to check
      * @return <code>true</code> if HTML-comments
      *         starts form given position.
      */
     private boolean isCommentTag(String[] aText, Point aPos)
     {
         return aText[aPos.getLineNo()].startsWith("<!--", aPos.getColumnNo());
     }
 
     /**
      * Skips HTML comments.
      * @param aText text of javadoc comments.
      * @param aFrom start position of HTML-comments
      * @return position after HTML-comments
      */
     private Point skipHtmlComment(String[] aText, Point aFrom)
     {
         Point to = aFrom;
         to = findChar(aText, '>', to);
         while ((to.getLineNo() < aText.length)
                && !aText[to.getLineNo()]
-               .substring(0, to.getColumnNo()).endsWith("-->"))
+               .substring(0, to.getColumnNo() + 1).endsWith("-->"))
         {
             to = findChar(aText, '>', getNextCharPos(aText, to));
         }
         return to;
     }
 
     /**
      * Finds next occurrence of given character.
      * @param aText text to search
      * @param aChar character to search
      * @param aFrom position to start search
      * @return position of next occurrence of given character
      */
     private Point findChar(String[] aText, char aChar, Point aFrom)
     {
         Point curr = new Point(aFrom.getLineNo(), aFrom.getColumnNo());
         while ((curr.getLineNo() < aText.length)
                && (aText[curr.getLineNo()].charAt(curr.getColumnNo()) != aChar))
         {
             curr = getNextCharPos(aText, curr);
         }
 
         return curr;
     }
 
     /**
      * Returns position of next comment character, skips
      * whitespaces and asterisks.
      * @param aText to search.
      * @param aFrom location to search from
      * @return location of the next character.
      */
     private Point getNextCharPos(String[] aText, Point aFrom)
     {
         int line = aFrom.getLineNo();
         int column = aFrom.getColumnNo() + 1;
         while ((line < aText.length) && (column >= aText[line].length())) {
             // go to the next line
             line++;
             column = 0;
             if (line < aText.length) {
                 //skip beginning spaces and stars
                 final String currentLine = aText[line];
                 while ((column < currentLine.length())
                        && (Character.isWhitespace(currentLine.charAt(column))
                            || (currentLine.charAt(column) == '*')))
                 {
                     column++;
                     if ((column < currentLine.length())
                         && (currentLine.charAt(column - 1) == '*')
