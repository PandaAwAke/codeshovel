diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java
index 86a76ffa1..3ecde367c 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java
@@ -154,78 +154,75 @@ public class OperatorWrapCheck
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.QUESTION,          // '?'
             TokenTypes.COLON,             // ':' (not reported for a case)
             TokenTypes.EQUAL,             // "=="
             TokenTypes.NOT_EQUAL,         // "!="
             TokenTypes.DIV,               // '/'
             TokenTypes.PLUS,              //' +' (unary plus is UNARY_PLUS)
             TokenTypes.MINUS,             // '-' (unary minus is UNARY_MINUS)
             TokenTypes.STAR,              // '*'
             TokenTypes.MOD,               // '%'
             TokenTypes.SR,                // ">>"
             TokenTypes.BSR,               // ">>>"
             TokenTypes.GE,                // ">="
             TokenTypes.GT,                // ">"
             TokenTypes.SL,                // "<<"
             TokenTypes.LE,                // "<="
             TokenTypes.LT,                // '<'
             TokenTypes.BXOR,              // '^'
             TokenTypes.BOR,               // '|'
             TokenTypes.LOR,               // "||"
             TokenTypes.BAND,              // '&'
             TokenTypes.LAND,              // "&&"
             TokenTypes.LITERAL_INSTANCEOF,
             TokenTypes.TYPE_EXTENSION_AND,
             TokenTypes.ASSIGN,            // '='
             TokenTypes.DIV_ASSIGN,        // "/="
             TokenTypes.PLUS_ASSIGN,       // "+="
             TokenTypes.MINUS_ASSIGN,      //"-="
             TokenTypes.STAR_ASSIGN,       // "*="
             TokenTypes.MOD_ASSIGN,        // "%="
             TokenTypes.SR_ASSIGN,         // ">>="
             TokenTypes.BSR_ASSIGN,        // ">>>="
             TokenTypes.SL_ASSIGN,         // "<<="
             TokenTypes.BXOR_ASSIGN,       // "^="
             TokenTypes.BOR_ASSIGN,        // "|="
             TokenTypes.BAND_ASSIGN,       // "&="
 
         };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return CommonUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public void visitToken(DetailAST ast) {
-        if (ast.getType() == TokenTypes.COLON) {
-            final DetailAST parent = ast.getParent();
-            if (parent.getType() == TokenTypes.LITERAL_DEFAULT
-                || parent.getType() == TokenTypes.LITERAL_CASE) {
-                //we do not want to check colon for cases and defaults
-                return;
+        final DetailAST parent = ast.getParent();
+        //we do not want to check colon for cases and defaults
+        if (ast.getType() != TokenTypes.COLON
+                || parent.getType() != TokenTypes.LITERAL_DEFAULT
+                    && parent.getType() != TokenTypes.LITERAL_CASE) {
+            final String text = ast.getText();
+            final int colNo = ast.getColumnNo();
+            final int lineNo = ast.getLineNo();
+            final String currentLine = getLine(lineNo - 1);
+
+            // Check if rest of line is whitespace, and not just the operator
+            // by itself. This last bit is to handle the operator on a line by
+            // itself.
+            if (option == WrapOption.NL
+                    && !text.equals(currentLine.trim())
+                    && CommonUtils.isBlank(currentLine.substring(colNo + text.length()))) {
+                log(lineNo, colNo, MSG_LINE_NEW, text);
+            }
+            else if (option == WrapOption.EOL
+                    && CommonUtils.hasWhitespaceBefore(colNo - 1, currentLine)) {
+                log(lineNo, colNo, MSG_LINE_PREVIOUS, text);
             }
-        }
-
-        final String text = ast.getText();
-        final int colNo = ast.getColumnNo();
-        final int lineNo = ast.getLineNo();
-        final String currentLine = getLine(lineNo - 1);
-
-        // Check if rest of line is whitespace, and not just the operator
-        // by itself. This last bit is to handle the operator on a line by
-        // itself.
-        if (option == WrapOption.NL
-                && !text.equals(currentLine.trim())
-                && CommonUtils.isBlank(currentLine.substring(colNo + text.length()))) {
-            log(lineNo, colNo, MSG_LINE_NEW, text);
-        }
-        else if (option == WrapOption.EOL
-                && CommonUtils.hasWhitespaceBefore(colNo - 1, currentLine)) {
-            log(lineNo, colNo, MSG_LINE_PREVIOUS, text);
         }
     }
 }
