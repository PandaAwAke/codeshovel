diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java
index 4d719f6cd..312c3466a 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java
@@ -84,106 +84,106 @@ import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
  * endline comments just repeat the line of code, which hurts
  * more than it helps.&quot;
  * </li>
  * </ul>
  * His comments on being hard to maintain when the size of
  * the line changes are even more important in the age of
  * automated refactorings.
  *
  * <p>To configure the check so it enforces only comment on a line:
  * <pre>
  * &lt;module name=&quot;TrailingComment&quot;&gt;
  *    &lt;property name=&quot;format&quot; value=&quot;^\\s*$&quot;/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * @author o_sukhodolsky
  */
 @StatelessCheck
 public class TrailingCommentCheck extends AbstractCheck {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "trailing.comments";
 
     /** Pattern for legal trailing comment. */
     private Pattern legalComment;
 
     /** The regexp to match against. */
     private Pattern format = Pattern.compile("^[\\s});]*$");
 
     /**
      * Sets patter for legal trailing comments.
      * @param legalComment pattern to set.
      */
     public void setLegalComment(final Pattern legalComment) {
         this.legalComment = legalComment;
     }
 
     /**
      * Set the format for the specified regular expression.
      * @param pattern a pattern
      */
     public final void setFormat(Pattern pattern) {
         format = pattern;
     }
 
     @Override
     public int[] getDefaultTokens() {
-        return CommonUtils.EMPTY_INT_ARRAY;
+        return getRequiredTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
-        return CommonUtils.EMPTY_INT_ARRAY;
+        return getRequiredTokens();
     }
 
     @Override
     public int[] getRequiredTokens() {
         return CommonUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         throw new IllegalStateException("visitToken() shouldn't be called.");
     }
 
     @Override
     public void beginTree(DetailAST rootAST) {
         final Map<Integer, TextBlock> cppComments = getFileContents()
                 .getSingleLineComments();
         final Map<Integer, List<TextBlock>> cComments = getFileContents()
                 .getBlockComments();
         final Set<Integer> lines = new HashSet<>();
         lines.addAll(cppComments.keySet());
         lines.addAll(cComments.keySet());
 
         for (Integer lineNo : lines) {
             final String line = getLines()[lineNo - 1];
             final String lineBefore;
             final TextBlock comment;
             if (cppComments.containsKey(lineNo)) {
                 comment = cppComments.get(lineNo);
                 lineBefore = line.substring(0, comment.getStartColNo());
             }
             else {
                 final List<TextBlock> commentList = cComments.get(lineNo);
                 comment = commentList.get(commentList.size() - 1);
                 lineBefore = line.substring(0, comment.getStartColNo());
 
                 // do not check comment which doesn't end line
                 if (comment.getText().length == 1
                         && !CommonUtils.isBlank(line
                             .substring(comment.getEndColNo() + 1))) {
                     continue;
                 }
             }
             if (!format.matcher(lineBefore).find()
                 && !isLegalComment(comment)) {
                 log(lineNo, MSG_KEY);
             }
         }
     }
 
     /**
