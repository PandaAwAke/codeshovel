diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java b/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
index 49187e6eb..b85aaa60a 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
@@ -92,101 +92,100 @@ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe
     private ModuleFactory moduleFactory;
 
     /**
      * Creates a new {@code TreeWalker} instance.
      */
     public TreeWalker() {
         setFileExtensions("java");
     }
 
     /**
      * Sets tab width.
      * @param tabWidth the distance between tab stops
      */
     public void setTabWidth(int tabWidth) {
         this.tabWidth = tabWidth;
     }
 
     /**
      * Sets cache file.
      * @deprecated Use {@link Checker#setCacheFile} instead. It does not do anything now. We just
      *             keep the setter for transition period to the same option in Checker. The
      *             method will be completely removed in Checkstyle 8.0. See
      *             <a href="https://github.com/checkstyle/checkstyle/issues/2883">issue#2883</a>
      * @param fileName the cache file
      */
     @Deprecated
     public void setCacheFile(String fileName) {
         // Deprecated
     }
 
     /**
      * Sets classLoader to load class.
      * @param classLoader class loader to resolve classes with.
      */
     public void setClassLoader(ClassLoader classLoader) {
         this.classLoader = classLoader;
     }
 
     /**
      * Sets the module factory for creating child modules (Checks).
      * @param moduleFactory the factory
      */
     public void setModuleFactory(ModuleFactory moduleFactory) {
         this.moduleFactory = moduleFactory;
     }
 
     @Override
     public void finishLocalSetup() {
         final DefaultContext checkContext = new DefaultContext();
         checkContext.add("classLoader", classLoader);
-        checkContext.add("messages", getMessageCollector());
         checkContext.add("severity", getSeverity());
         checkContext.add("tabWidth", String.valueOf(tabWidth));
 
         childContext = checkContext;
     }
 
     @Override
     public void setupChild(Configuration childConf)
             throws CheckstyleException {
         final String name = childConf.getName();
         final Object module = moduleFactory.createModule(name);
         if (!(module instanceof AbstractCheck)) {
             throw new CheckstyleException(
                 "TreeWalker is not allowed as a parent of " + name
                         + " Please review 'Parent Module' section for this Check in web"
                         + " documentation if Check is standard.");
         }
         final AbstractCheck check = (AbstractCheck) module;
         check.contextualize(childContext);
         check.configure(childConf);
         check.init();
 
         registerCheck(check);
     }
 
     @Override
     protected void processFiltered(File file, List<String> lines) throws CheckstyleException {
         // check if already checked and passed the file
         if (CommonUtils.matchesFileExtension(file, getFileExtensions())) {
             final String msg = "%s occurred during the analysis of file %s.";
             final String fileName = file.getPath();
             try {
                 if (!ordinaryChecks.isEmpty()
                         || !commentChecks.isEmpty()) {
                     final FileText text = FileText.fromLines(file, lines);
                     final FileContents contents = new FileContents(text);
                     final DetailAST rootAST = parse(contents);
 
                     if (!ordinaryChecks.isEmpty()) {
                         walk(rootAST, contents, AstState.ORDINARY);
                     }
                     if (!commentChecks.isEmpty()) {
                         final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);
 
                         walk(astWithComments, contents, AstState.WITH_COMMENTS);
                     }
                 }
             }
             catch (final TokenStreamRecognitionException tre) {
                 final String exceptionMsg = String.format(Locale.ROOT, msg,
@@ -284,121 +283,123 @@ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe
         if (check.getRequiredTokens().length != 0) {
             final int[] defaultTokens = check.getDefaultTokens();
             Arrays.sort(defaultTokens);
             for (final int token : check.getRequiredTokens()) {
                 if (Arrays.binarySearch(defaultTokens, token) < 0) {
                     final String message = String.format(Locale.ROOT, "Token \"%s\" from required "
                             + "tokens was not found in default tokens list in check %s",
                             token, check.getClass().getName());
                     throw new CheckstyleException(message);
                 }
             }
         }
     }
 
     /**
      * Initiates the walk of an AST.
      * @param ast the root AST
      * @param contents the contents of the file the AST was generated from.
      * @param astState state of AST.
      */
     private void walk(DetailAST ast, FileContents contents,
             AstState astState) {
         notifyBegin(ast, contents, astState);
 
         // empty files are not flagged by javac, will yield ast == null
         if (ast != null) {
             processIter(ast, astState);
         }
         notifyEnd(ast, astState);
     }
 
     /**
      * Notify checks that we are about to begin walking a tree.
      * @param rootAST the root of the tree.
      * @param contents the contents of the file the AST was generated from.
      * @param astState state of AST.
      */
     private void notifyBegin(DetailAST rootAST, FileContents contents,
             AstState astState) {
         final Set<AbstractCheck> checks;
 
         if (astState == AstState.WITH_COMMENTS) {
             checks = commentChecks;
         }
         else {
             checks = ordinaryChecks;
         }
 
         for (AbstractCheck check : checks) {
             check.setFileContents(contents);
+            check.clearMessages();
             check.beginTree(rootAST);
         }
     }
 
     /**
      * Notify checks that we have finished walking a tree.
      * @param rootAST the root of the tree.
      * @param astState state of AST.
      */
     private void notifyEnd(DetailAST rootAST, AstState astState) {
         final Set<AbstractCheck> checks;
 
         if (astState == AstState.WITH_COMMENTS) {
             checks = commentChecks;
         }
         else {
             checks = ordinaryChecks;
         }
 
         for (AbstractCheck check : checks) {
             check.finishTree(rootAST);
+            addMessages(check.getMessages());
         }
     }
 
     /**
      * Notify checks that visiting a node.
      * @param ast the node to notify for.
      * @param astState state of AST.
      */
     private void notifyVisit(DetailAST ast, AstState astState) {
         final Collection<AbstractCheck> visitors = getListOfChecks(ast, astState);
 
         if (visitors != null) {
             for (AbstractCheck check : visitors) {
                 check.visitToken(ast);
             }
         }
     }
 
     /**
      * Notify checks that leaving a node.
      * @param ast
      *        the node to notify for
      * @param astState state of AST.
      */
     private void notifyLeave(DetailAST ast, AstState astState) {
         final Collection<AbstractCheck> visitors = getListOfChecks(ast, astState);
 
         if (visitors != null) {
             for (AbstractCheck check : visitors) {
                 check.leaveToken(ast);
             }
         }
     }
 
     /**
      * Method returns list of checks.
      *
      * @param ast
      *            the node to notify for
      * @param astState
      *            state of AST.
      * @return list of visitors
      */
     private Collection<AbstractCheck> getListOfChecks(DetailAST ast, AstState astState) {
         Collection<AbstractCheck> visitors = null;
         final String tokenType = TokenUtils.getTokenName(ast.getType());
 
         if (astState == AstState.WITH_COMMENTS) {
             if (tokenToCommentChecks.containsKey(tokenType)) {
                 visitors = tokenToCommentChecks.get(tokenType);
