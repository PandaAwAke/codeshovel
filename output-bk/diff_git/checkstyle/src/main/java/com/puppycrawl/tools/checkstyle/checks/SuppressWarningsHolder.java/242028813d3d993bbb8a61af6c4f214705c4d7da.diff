diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
index 6345e6d7a..8f1248ba8 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
@@ -170,105 +170,106 @@ public class SuppressWarningsHolder
     public int[] getDefaultTokens() {
         return new int[] {TokenTypes.ANNOTATION};
     }
 
     @Override
     public void beginTree(DetailAST rootAST) {
         ENTRIES.set(new LinkedList<Entry>());
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         // check whether annotation is SuppressWarnings
         // expected children: AT ( IDENT | DOT ) LPAREN <values> RPAREN
         String identifier = getIdentifier(getNthChild(ast, 1));
         if (identifier.startsWith(JAVA_LANG_PREFIX)) {
             identifier = identifier.substring(JAVA_LANG_PREFIX.length());
         }
         if ("SuppressWarnings".equals(identifier)) {
 
             final List<String> values = getAllAnnotationValues(ast);
             if (isAnnotationEmpty(values)) {
                 return;
             }
 
             final DetailAST targetAST = getAnnotationTarget(ast);
 
             if (targetAST == null) {
                 log(ast.getLineNo(), MSG_KEY);
                 return;
             }
 
             // get text range of target
             final int firstLine = targetAST.getLineNo();
             final int firstColumn = targetAST.getColumnNo();
             final DetailAST nextAST = targetAST.getNextSibling();
             final int lastLine;
             final int lastColumn;
             if (nextAST != null) {
                 lastLine = nextAST.getLineNo();
                 lastColumn = nextAST.getColumnNo() - 1;
             }
             else {
                 lastLine = Integer.MAX_VALUE;
                 lastColumn = Integer.MAX_VALUE;
             }
 
             // add suppression entries for listed checks
             final List<Entry> entries = ENTRIES.get();
             if (entries != null) {
                 for (String value : values) {
+                    String checkName = value;
                     // strip off the checkstyle-only prefix if present
                     if (value.startsWith(CHECKSTYLE_PREFIX)) {
-                        value = value.substring(CHECKSTYLE_PREFIX.length());
+                        checkName = checkName.substring(CHECKSTYLE_PREFIX.length());
                     }
-                    entries.add(new Entry(value, firstLine, firstColumn,
+                    entries.add(new Entry(checkName, firstLine, firstColumn,
                         lastLine, lastColumn));
                 }
             }
         }
     }
 
     /**
      * get all annotation values
      * @param ast annotation token
      * @return list values
      */
     private static List<String> getAllAnnotationValues(DetailAST ast) {
         // get values of annotation
         List<String> values = null;
         final DetailAST lparenAST = ast.findFirstToken(TokenTypes.LPAREN);
         if (lparenAST != null) {
             final DetailAST nextAST = lparenAST.getNextSibling();
             if (nextAST != null) {
                 final int nextType = nextAST.getType();
                 switch (nextType) {
                     case TokenTypes.EXPR:
                     case TokenTypes.ANNOTATION_ARRAY_INIT:
                         values = getAnnotationValues(nextAST);
                         break;
 
                     case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:
                         // expected children: IDENT ASSIGN ( EXPR |
                         // ANNOTATION_ARRAY_INIT )
                         values = getAnnotationValues(getNthChild(nextAST, 2));
                         break;
 
                     case TokenTypes.RPAREN:
                         // no value present (not valid Java)
                         break;
 
                     default:
                         // unknown annotation value type (new syntax?)
                 }
             }
         }
         return values;
     }
 
     /**
      * @param values list of values in the annotation
      * @return whether annotation is empty or contains some values
      */
     private static boolean isAnnotationEmpty(List<String> values) {
         return values == null;
     }
