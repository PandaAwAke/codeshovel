diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheck.java
index 560b28c10..65d4a1d60 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheck.java
@@ -1,233 +1,233 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2014  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.sizes;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FastStack;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * Restricts the number of executable statements to a specified limit
  * (default = 30).
  * @author Simon Harris
  */
 public final class ExecutableStatementCountCheck
     extends Check
 {
     /** default threshold */
     private static final int DEFAULT_MAX = 30;
 
     /** threshold to report error for */
-    private int mMax;
+    private int max;
 
     /** Stack of method contexts. */
-    private final FastStack<Context> mContextStack = FastStack.newInstance();
+    private final FastStack<Context> contextStack = FastStack.newInstance();
 
     /** Current method context. */
-    private Context mContext;
+    private Context context;
 
     /** Constructs a <code>ExecutableStatementCountCheck</code>. */
     public ExecutableStatementCountCheck()
     {
         setMax(DEFAULT_MAX);
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.CTOR_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.INSTANCE_INIT,
             TokenTypes.STATIC_INIT,
             TokenTypes.SLIST,
         };
     }
 
     @Override
     public int[] getRequiredTokens()
     {
         return new int[] {TokenTypes.SLIST};
     }
 
     /**
      * Gets the maximum threshold.
      * @return the maximum threshold.
      */
     public int getMax()
     {
-        return mMax;
+        return max;
     }
 
     /**
      * Sets the maximum threshold.
-     * @param aMax the maximum threshold.
+     * @param max the maximum threshold.
      */
-    public void setMax(int aMax)
+    public void setMax(int max)
     {
-        mMax = aMax;
+        this.max = max;
     }
 
     @Override
-    public void beginTree(DetailAST aRootAST)
+    public void beginTree(DetailAST rootAST)
     {
-        mContext = null;
-        mContextStack.clear();
+        context = null;
+        contextStack.clear();
     }
 
     @Override
-    public void visitToken(DetailAST aAST)
+    public void visitToken(DetailAST ast)
     {
-        switch (aAST.getType()) {
+        switch (ast.getType()) {
         case TokenTypes.CTOR_DEF:
         case TokenTypes.METHOD_DEF:
         case TokenTypes.INSTANCE_INIT:
         case TokenTypes.STATIC_INIT:
-            visitMemberDef(aAST);
+            visitMemberDef(ast);
             break;
         case TokenTypes.SLIST:
-            visitSlist(aAST);
+            visitSlist(ast);
             break;
         default:
-            throw new IllegalStateException(aAST.toString());
+            throw new IllegalStateException(ast.toString());
         }
     }
 
     @Override
-    public void leaveToken(DetailAST aAST)
+    public void leaveToken(DetailAST ast)
     {
-        switch (aAST.getType()) {
+        switch (ast.getType()) {
         case TokenTypes.CTOR_DEF:
         case TokenTypes.METHOD_DEF:
         case TokenTypes.INSTANCE_INIT:
         case TokenTypes.STATIC_INIT:
-            leaveMemberDef(aAST);
+            leaveMemberDef(ast);
             break;
         case TokenTypes.SLIST:
             // Do nothing
             break;
         default:
-            throw new IllegalStateException(aAST.toString());
+            throw new IllegalStateException(ast.toString());
         }
     }
 
     /**
      * Process the start of the member definition.
-     * @param aAST the token representing the member definition.
+     * @param ast the token representing the member definition.
      */
-    private void visitMemberDef(DetailAST aAST)
+    private void visitMemberDef(DetailAST ast)
     {
-        mContextStack.push(mContext);
-        mContext = new Context(aAST);
+        contextStack.push(context);
+        context = new Context(ast);
     }
 
     /**
      * Process the end of a member definition.
      *
-     * @param aAST the token representing the member definition.
+     * @param ast the token representing the member definition.
      */
-    private void leaveMemberDef(DetailAST aAST)
+    private void leaveMemberDef(DetailAST ast)
     {
-        final int count = mContext.getCount();
+        final int count = context.getCount();
         if (count > getMax()) {
-            log(aAST.getLineNo(), aAST.getColumnNo(),
+            log(ast.getLineNo(), ast.getColumnNo(),
                     "executableStatementCount", count, getMax());
         }
-        mContext = mContextStack.pop();
+        context = contextStack.pop();
     }
 
     /**
      * Process the end of a statement list.
      *
-     * @param aAST the token representing the statement list.
+     * @param ast the token representing the statement list.
      */
-    private void visitSlist(DetailAST aAST)
+    private void visitSlist(DetailAST ast)
     {
-        if (mContext != null) {
+        if (context != null) {
             // find member AST for the statement list
-            final DetailAST contextAST = mContext.getAST();
-            DetailAST parent = aAST.getParent();
+            final DetailAST contextAST = context.getAST();
+            DetailAST parent = ast.getParent();
             while (parent != null) {
                 final int type = parent.getType();
                 if ((type == TokenTypes.CTOR_DEF)
                     || (type == TokenTypes.METHOD_DEF)
                     || (type == TokenTypes.INSTANCE_INIT)
                     || (type == TokenTypes.STATIC_INIT))
                 {
                     if (parent == contextAST) {
-                        mContext.addCount(aAST.getChildCount() / 2);
+                        context.addCount(ast.getChildCount() / 2);
                     }
                     break;
                 }
                 parent = parent.getParent();
             }
         }
     }
 
     /**
      * Class to encapsulate counting information about one member.
      * @author Simon Harris
      */
     private static class Context
     {
         /** Member AST node. */
-        private final DetailAST mAST;
+        private final DetailAST ast;
 
         /** Counter for context elements. */
-        private int mCount;
+        private int count;
 
         /**
          * Creates new member context.
-         * @param aAST member AST node.
+         * @param ast member AST node.
          */
-        public Context(DetailAST aAST)
+        public Context(DetailAST ast)
         {
-            mAST = aAST;
-            mCount = 0;
+            this.ast = ast;
+            count = 0;
         }
 
         /**
          * Increase count.
-         * @param aCount the count increment.
+         * @param count the count increment.
          */
-        public void addCount(int aCount)
+        public void addCount(int count)
         {
-            mCount += aCount;
+            this.count += count;
         }
 
         /**
          * Gets the member AST node.
          * @return the member AST node.
          */
         public DetailAST getAST()
         {
-            return mAST;
+            return ast;
         }
 
         /**
          * Gets the count.
          * @return the count.
          */
         public int getCount()
         {
-            return mCount;
+            return count;
         }
     }
 }
