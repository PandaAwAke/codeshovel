diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
index 235b04712..224a903e1 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
@@ -147,125 +147,126 @@ public class NeedBracesCheck extends Check {
         };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return ArrayUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final DetailAST slistAST = ast.findFirstToken(TokenTypes.SLIST);
         boolean isElseIf = false;
         if (ast.getType() == TokenTypes.LITERAL_ELSE
             && ast.findFirstToken(TokenTypes.LITERAL_IF) != null) {
             isElseIf = true;
         }
 
         final boolean skipStatement = isSkipStatement(ast);
 
         if (slistAST == null && !isElseIf && !skipStatement) {
             log(ast.getLineNo(), MSG_KEY_NEED_BRACES, ast.getText());
         }
     }
 
     /**
      * Checks if current statement can be skipped by "need braces" warning.
      * @param statement if, for, while, do-while, lambda, else, case, default statements.
      * @return true if current statement can be skipped by Check.
      */
     private boolean isSkipStatement(DetailAST statement) {
         return allowSingleLineStatement && isSingleLineStatement(statement);
     }
 
     /**
      * Checks if current statement is single-line statement, e.g.:
      * <p>
      * {@code
      * if (obj.isValid()) return true;
      * }
      * </p>
      * <p>
      * {@code
      * while (obj.isValid()) return true;
      * }
      * </p>
      * @param statement if, for, while, do-while, lambda, else, case, default statements.
      * @return true if current statement is single-line statement.
      */
     private static boolean isSingleLineStatement(DetailAST statement) {
         boolean result;
-        final int type = statement.getType();
 
-        if (type == TokenTypes.LITERAL_IF) {
-            result = isSingleLineIf(statement);
-        }
-        else if (type == TokenTypes.LITERAL_FOR) {
-            result = isSingleLineFor(statement);
-        }
-        else if (type == TokenTypes.LITERAL_DO) {
-            result = isSingleLineDoWhile(statement);
-        }
-        else if (type == TokenTypes.LITERAL_WHILE) {
-            result = isSingleLineWhile(statement);
-        }
-        else if (type == TokenTypes.LAMBDA) {
-            result = isSingleLineLambda(statement);
-        }
-        else if (type == TokenTypes.LITERAL_CASE) {
-            result = isSingleLineCase(statement);
-        }
-        else if (type == TokenTypes.LITERAL_DEFAULT) {
-            result = isSingleLineDefault(statement);
-        }
-        else {
-            result = isSingleLineElse(statement);
+        switch (statement.getType()) {
+            case TokenTypes.LITERAL_IF:
+                result = isSingleLineIf(statement);
+                break;
+            case TokenTypes.LITERAL_FOR:
+                result = isSingleLineFor(statement);
+                break;
+            case TokenTypes.LITERAL_DO:
+                result = isSingleLineDoWhile(statement);
+                break;
+            case TokenTypes.LITERAL_WHILE:
+                result = isSingleLineWhile(statement);
+                break;
+            case TokenTypes.LAMBDA:
+                result = isSingleLineLambda(statement);
+                break;
+            case TokenTypes.LITERAL_CASE:
+                result = isSingleLineCase(statement);
+                break;
+            case TokenTypes.LITERAL_DEFAULT:
+                result = isSingleLineDefault(statement);
+                break;
+            default:
+                result = isSingleLineElse(statement);
+                break;
         }
 
         return result;
     }
 
     /**
      * Checks if current while statement is single-line statement, e.g.:
      * <p>
      * {@code
      * while (obj.isValid()) return true;
      * }
      * </p>
      * @param literalWhile {@link TokenTypes#LITERAL_WHILE while statement}.
      * @return true if current while statement is single-line statement.
      */
     private static boolean isSingleLineWhile(DetailAST literalWhile) {
         boolean result = false;
         if (literalWhile.getParent().getType() == TokenTypes.SLIST
                 && literalWhile.getLastChild().getType() != TokenTypes.SLIST) {
             final DetailAST block = literalWhile.getLastChild().getPreviousSibling();
             result = literalWhile.getLineNo() == block.getLineNo();
         }
         return result;
     }
 
     /**
      * Checks if current do-while statement is single-line statement, e.g.:
      * <p>
      * {@code
      * do this.notify(); while (o != null);
      * }
      * </p>
      * @param literalDo {@link TokenTypes#LITERAL_DO do-while statement}.
      * @return true if current do-while statement is single-line statement.
      */
     private static boolean isSingleLineDoWhile(DetailAST literalDo) {
         boolean result = false;
         if (literalDo.getParent().getType() == TokenTypes.SLIST
                 && literalDo.getFirstChild().getType() != TokenTypes.SLIST) {
             final DetailAST block = literalDo.getFirstChild();
             result = block.getLineNo() == literalDo.getLineNo();
         }
         return result;
     }
 
     /**
      * Checks if current for statement is single-line statement, e.g.:
      * <p>
      * {@code
      * for (int i = 0; ; ) this.notify();
