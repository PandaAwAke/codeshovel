diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java b/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
index 60d81a773..cf9b0fab6 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
@@ -707,64 +707,66 @@ public class PackageObjectFactory implements ModuleFactory {
         NAME_TO_FULL_MODULE_NAME.put("AvoidEscapedUnicodeCharactersCheck",
                 BASE_PACKAGE + ".checks.AvoidEscapedUnicodeCharactersCheck");
         NAME_TO_FULL_MODULE_NAME.put("DescendantTokenCheck",
                 BASE_PACKAGE + ".checks.DescendantTokenCheck");
         NAME_TO_FULL_MODULE_NAME.put("FinalParametersCheck",
                 BASE_PACKAGE + ".checks.FinalParametersCheck");
         NAME_TO_FULL_MODULE_NAME.put("NewlineAtEndOfFileCheck",
                 BASE_PACKAGE + ".checks.NewlineAtEndOfFileCheck");
         NAME_TO_FULL_MODULE_NAME.put("OuterTypeFilenameCheck",
                 BASE_PACKAGE + ".checks.OuterTypeFilenameCheck");
         NAME_TO_FULL_MODULE_NAME.put("SuppressWarningsHolder",
                 BASE_PACKAGE + ".checks.SuppressWarningsHolder");
         NAME_TO_FULL_MODULE_NAME.put("TodoCommentCheck",
                 BASE_PACKAGE + ".checks.TodoCommentCheck");
         NAME_TO_FULL_MODULE_NAME.put("TrailingCommentCheck",
                 BASE_PACKAGE + ".checks.TrailingCommentCheck");
         NAME_TO_FULL_MODULE_NAME.put("TranslationCheck",
                 BASE_PACKAGE + ".checks.TranslationCheck");
         NAME_TO_FULL_MODULE_NAME.put("UncommentedMainCheck",
                 BASE_PACKAGE + ".checks.UncommentedMainCheck");
         NAME_TO_FULL_MODULE_NAME.put("UniquePropertiesCheck",
                 BASE_PACKAGE + ".checks.UniquePropertiesCheck");
         NAME_TO_FULL_MODULE_NAME.put("UpperEllCheck",
                 BASE_PACKAGE + ".checks.UpperEllCheck");
     }
 
     /**
      * Fill short-to-full module names map with modules from filefilters package.
      */
     private static void fillModulesFromFilefiltersPackage() {
         NAME_TO_FULL_MODULE_NAME.put("BeforeExecutionExclusionFileFilter",
                 BASE_PACKAGE + ".filefilters.BeforeExecutionExclusionFileFilter");
     }
 
     /**
      * Fill short-to-full module names map with modules from filters package.
      */
     private static void fillModulesFromFiltersPackage() {
         NAME_TO_FULL_MODULE_NAME.put("CsvFilter",
                 BASE_PACKAGE + ".filters.CsvFilter");
         NAME_TO_FULL_MODULE_NAME.put("IntMatchFilter",
                 BASE_PACKAGE + ".filters.IntMatchFilter");
         NAME_TO_FULL_MODULE_NAME.put("IntRangeFilter",
                 BASE_PACKAGE + ".filters.IntRangeFilter");
         NAME_TO_FULL_MODULE_NAME.put("SeverityMatchFilter",
                 BASE_PACKAGE + ".filters.SeverityMatchFilter");
         NAME_TO_FULL_MODULE_NAME.put("SuppressionCommentFilter",
                 BASE_PACKAGE + ".filters.SuppressionCommentFilter");
         NAME_TO_FULL_MODULE_NAME.put("SuppressionFilter",
                 BASE_PACKAGE + ".filters.SuppressionFilter");
+        NAME_TO_FULL_MODULE_NAME.put("SuppressionXpathFilter",
+                BASE_PACKAGE + ".filters.SuppressionXpathFilter");
         NAME_TO_FULL_MODULE_NAME.put("SuppressWarningsFilter",
                 BASE_PACKAGE + ".filters.SuppressWarningsFilter");
         NAME_TO_FULL_MODULE_NAME.put("SuppressWithNearbyCommentFilter",
                 BASE_PACKAGE + ".filters.SuppressWithNearbyCommentFilter");
     }
 
     /**
      * Fill short-to-full module names map with modules from checkstyle package.
      */
     private static void fillModulesFromCheckstylePackage() {
         NAME_TO_FULL_MODULE_NAME.put("Checker", BASE_PACKAGE + ".Checker");
         NAME_TO_FULL_MODULE_NAME.put("TreeWalker", BASE_PACKAGE + ".TreeWalker");
     }
 }
