diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java b/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java
index 77f9a2047..35be71af7 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java
@@ -72,119 +72,119 @@ public class DefaultLogger
     /**
      * Creates a new <code>DefaultLogger</code> instance.
      * @param infoStream the {@code OutputStream} for info messages.
      * @param closeInfoAfterUse auditFinished should close infoStream.
      * @param errorStream the {@code OutputStream} for error messages.
      * @param closeErrorAfterUse auditFinished should close errorStream
      * @param printSeverity if severity level should be printed.
      */
     public DefaultLogger(OutputStream infoStream,
                          boolean closeInfoAfterUse,
                          OutputStream errorStream,
                          boolean closeErrorAfterUse,
                          boolean printSeverity) {
         this(infoStream, closeInfoAfterUse, errorStream, closeErrorAfterUse);
         this.printSeverity = printSeverity;
     }
 
     /**
      * Creates a new {@code DefaultLogger} instance.
      *
      * @param infoStream the {@code OutputStream} for info messages
      * @param closeInfoAfterUse auditFinished should close infoStream
      * @param errorStream the {@code OutputStream} for error messages
      * @param closeErrorAfterUse auditFinished should close errorStream
      */
     public DefaultLogger(OutputStream infoStream,
                          boolean closeInfoAfterUse,
                          OutputStream errorStream,
                          boolean closeErrorAfterUse) {
         closeInfo = closeInfoAfterUse;
         closeError = closeErrorAfterUse;
         final Writer infoStreamWriter = new OutputStreamWriter(infoStream, StandardCharsets.UTF_8);
         final Writer errorStreamWriter = new OutputStreamWriter(errorStream,
             StandardCharsets.UTF_8);
         infoWriter = new PrintWriter(infoStreamWriter);
 
         if (infoStream == errorStream) {
             errorWriter = infoWriter;
         }
         else {
             errorWriter = new PrintWriter(errorStreamWriter);
         }
     }
 
     /**
      * Print an Emacs compliant line on the error stream.
      * If the column number is non zero, then also display it.
      * @see AuditListener
      **/
     @Override
-    public void addError(AuditEvent evt) {
-        final SeverityLevel severityLevel = evt.getSeverityLevel();
+    public void addError(AuditEvent event) {
+        final SeverityLevel severityLevel = event.getSeverityLevel();
         if (severityLevel != SeverityLevel.IGNORE) {
 
-            final String fileName = evt.getFileName();
-            final String message = evt.getMessage();
+            final String fileName = event.getFileName();
+            final String message = event.getMessage();
 
             // avoid StringBuffer.expandCapacity
             final int bufLen = fileName.length() + message.length()
                 + BUFFER_CUSHION;
             final StringBuilder sb = new StringBuilder(bufLen);
 
-            sb.append(fileName).append(':').append(evt.getLine());
-            if (evt.getColumn() > 0) {
-                sb.append(':').append(evt.getColumn());
+            sb.append(fileName).append(':').append(event.getLine());
+            if (event.getColumn() > 0) {
+                sb.append(':').append(event.getColumn());
             }
             final String errorMessageSeparator = ": ";
             if (printSeverity) {
                 sb.append(errorMessageSeparator).append(severityLevel.getName());
             }
             sb.append(errorMessageSeparator).append(message);
             errorWriter.println(sb);
         }
     }
 
     @Override
-    public void addException(AuditEvent evt, Throwable throwable) {
+    public void addException(AuditEvent event, Throwable throwable) {
         synchronized (errorWriter) {
-            errorWriter.println("Error auditing " + evt.getFileName());
+            errorWriter.println("Error auditing " + event.getFileName());
             throwable.printStackTrace(errorWriter);
         }
     }
 
     @Override
-    public void auditStarted(AuditEvent evt) {
+    public void auditStarted(AuditEvent event) {
         infoWriter.println("Starting audit...");
     }
 
     @Override
-    public void fileFinished(AuditEvent evt) {
+    public void fileFinished(AuditEvent event) {
         // No need to implement this method in this class
     }
 
     @Override
-    public void fileStarted(AuditEvent evt) {
+    public void fileStarted(AuditEvent event) {
         // No need to implement this method in this class
     }
 
     @Override
-    public void auditFinished(AuditEvent evt) {
+    public void auditFinished(AuditEvent event) {
         infoWriter.println("Audit done.");
         closeStreams();
     }
 
     /**
      * Flushes the output streams and closes them if needed.
      */
     private void closeStreams() {
         infoWriter.flush();
         if (closeInfo) {
             infoWriter.close();
         }
 
         errorWriter.flush();
         if (closeError) {
             errorWriter.close();
         }
     }
 }
