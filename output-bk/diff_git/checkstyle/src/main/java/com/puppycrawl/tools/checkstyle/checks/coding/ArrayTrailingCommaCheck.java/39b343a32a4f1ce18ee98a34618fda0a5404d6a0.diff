diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ArrayTrailingCommaCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ArrayTrailingCommaCheck.java
index aea9aed8a..eef6173eb 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ArrayTrailingCommaCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ArrayTrailingCommaCheck.java
@@ -21,61 +21,59 @@ package com.puppycrawl.tools.checkstyle.checks.coding;
 
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * <p>
  * Checks if array initialization contains optional trailing comma.
  * </p>
  * <p>
  * Rationale: Putting this comma in make is easier to change the
  * order of the elements or add new elements on the end.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="ArrayTrailingComma"/&gt;
  * </pre>
  * @author o_sukhodolsky
  */
 public class ArrayTrailingCommaCheck extends AbstractCheck {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "array.trailing.comma";
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.ARRAY_INIT};
     }
 
     @Override
     public int[] getRequiredTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public void visitToken(DetailAST arrayInit) {
         final DetailAST rcurly = arrayInit.findFirstToken(TokenTypes.RCURLY);
 
         // if curlies are on the same line
         // or array is empty then check nothing
-        if (arrayInit.getLineNo() == rcurly.getLineNo()
-            || arrayInit.getChildCount() == 1) {
-            return;
-        }
-
-        final DetailAST prev = rcurly.getPreviousSibling();
-        if (prev.getType() != TokenTypes.COMMA) {
-            log(rcurly.getLineNo(), MSG_KEY);
+        if (arrayInit.getLineNo() != rcurly.getLineNo()
+            && arrayInit.getChildCount() != 1) {
+            final DetailAST prev = rcurly.getPreviousSibling();
+            if (prev.getType() != TokenTypes.COMMA) {
+                log(rcurly.getLineNo(), MSG_KEY);
+            }
         }
     }
 }
