diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java
index 7300f9e64..cf5df7ea7 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java
@@ -14,100 +14,107 @@
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.imports;
 
 import java.io.File;
 import java.net.URI;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FullIdent;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import org.apache.commons.beanutils.ConversionException;
 
 /**
  * Check that controls what packages can be imported in each package. Useful
  * for ensuring that application layering is not violated. Ideas on how the
  * check can be improved include support for:
  * <ul>
  * <li>
  * Change the default policy that if a package being checked does not
  * match any guards, then it is allowed. Currently defaults to disallowed.
  * </li>
  * </ul>
  *
  * @author Oliver Burn
  */
 public class ImportControlCheck extends Check
 {
     /** The root package controller. */
     private PkgControl root;
     /** The package doing the import. */
     private String inPkg;
 
     /**
      * The package controller for the current file. Used for performance
      * optimisation.
      */
     private PkgControl currentLeaf;
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.PACKAGE_DEF, TokenTypes.IMPORT,
                           TokenTypes.STATIC_IMPORT, };
     }
 
+    @Override
+    public int[] getAcceptableTokens()
+    {
+        return new int[] {TokenTypes.PACKAGE_DEF, TokenTypes.IMPORT,
+                          TokenTypes.STATIC_IMPORT, };
+    }
+
     @Override
     public void beginTree(final DetailAST rootAST)
     {
         currentLeaf = null;
     }
 
     @Override
     public void visitToken(final DetailAST ast)
     {
         if (ast.getType() == TokenTypes.PACKAGE_DEF) {
             final DetailAST nameAST = ast.getLastChild().getPreviousSibling();
             final FullIdent full = FullIdent.createFullIdent(nameAST);
             if (root == null) {
                 log(nameAST, "import.control.missing.file");
             }
             else {
                 inPkg = full.getText();
                 currentLeaf = root.locateFinest(inPkg);
                 if (currentLeaf == null) {
                     log(nameAST, "import.control.unknown.pkg");
                 }
             }
         }
         else if (currentLeaf != null) {
             final FullIdent imp;
             if (ast.getType() == TokenTypes.IMPORT) {
                 imp = FullIdent.createFullIdentBelow(ast);
             }
             else {
                 // know it is a static import
                 imp = FullIdent.createFullIdent(ast
                         .getFirstChild().getNextSibling());
             }
             final AccessResult access = currentLeaf.checkAccess(imp.getText(),
                     inPkg);
             if (!AccessResult.ALLOWED.equals(access)) {
                 log(ast, "import.control.disallowed", imp.getText());
             }
         }
     }
 
     /**
      * Set the parameter for the url containing the import control
      * configuration. It will cause the url to be loaded.
      * @param url the url of the file to load.
      * @throws ConversionException on error loading the file.
      */
     public void setUrl(final String url)
     {
         // Handle empty param
