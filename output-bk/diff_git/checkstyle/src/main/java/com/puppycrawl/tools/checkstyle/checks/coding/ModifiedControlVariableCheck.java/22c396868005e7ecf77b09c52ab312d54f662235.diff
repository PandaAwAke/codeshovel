diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java
index 56968960c..78b4726bf 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java
@@ -167,209 +167,197 @@ public final class ModifiedControlVariableCheck extends Check {
     }
 
     @Override
     public void beginTree(DetailAST rootAST) {
         // clear data
         variableStack.clear();
         variableStack.push(new ArrayDeque<String>());
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         switch (ast.getType()) {
             case TokenTypes.OBJBLOCK:
                 enterBlock();
                 break;
             case TokenTypes.LITERAL_FOR:
             case TokenTypes.FOR_ITERATOR:
             case TokenTypes.FOR_EACH_CLAUSE:
                 //we need that Tokens only at leaveToken()
                 break;
             case TokenTypes.ASSIGN:
             case TokenTypes.PLUS_ASSIGN:
             case TokenTypes.MINUS_ASSIGN:
             case TokenTypes.STAR_ASSIGN:
             case TokenTypes.DIV_ASSIGN:
             case TokenTypes.MOD_ASSIGN:
             case TokenTypes.SR_ASSIGN:
             case TokenTypes.BSR_ASSIGN:
             case TokenTypes.SL_ASSIGN:
             case TokenTypes.BAND_ASSIGN:
             case TokenTypes.BXOR_ASSIGN:
             case TokenTypes.BOR_ASSIGN:
             case TokenTypes.INC:
             case TokenTypes.POST_INC:
             case TokenTypes.DEC:
             case TokenTypes.POST_DEC:
                 checkIdent(ast);
                 break;
             default:
                 throw new IllegalStateException(ILLEGAL_TYPE_OF_TOKEN + ast.toString());
         }
     }
 
     @Override
     public void leaveToken(DetailAST ast) {
         switch (ast.getType()) {
             case TokenTypes.FOR_ITERATOR:
                 leaveForIter(ast.getParent());
                 break;
             case TokenTypes.FOR_EACH_CLAUSE:
-                final DetailAST paramDef =
-                    ast.findFirstToken(TokenTypes.VARIABLE_DEF);
-                if (shouldCheckEnhancedForLoopVariable(paramDef)) {
+                if (!skipEnhancedForLoopVariable) {
+                    final DetailAST paramDef = ast.findFirstToken(TokenTypes.VARIABLE_DEF);
                     leaveForEach(paramDef);
                 }
                 break;
             case TokenTypes.LITERAL_FOR:
                 if (!getCurrentVariables().isEmpty()) {
                     leaveForDef(ast);
                 }
                 break;
             case TokenTypes.OBJBLOCK:
                 exitBlock();
                 break;
             case TokenTypes.ASSIGN:
             case TokenTypes.PLUS_ASSIGN:
             case TokenTypes.MINUS_ASSIGN:
             case TokenTypes.STAR_ASSIGN:
             case TokenTypes.DIV_ASSIGN:
             case TokenTypes.MOD_ASSIGN:
             case TokenTypes.SR_ASSIGN:
             case TokenTypes.BSR_ASSIGN:
             case TokenTypes.SL_ASSIGN:
             case TokenTypes.BAND_ASSIGN:
             case TokenTypes.BXOR_ASSIGN:
             case TokenTypes.BOR_ASSIGN:
             case TokenTypes.INC:
             case TokenTypes.POST_INC:
             case TokenTypes.DEC:
             case TokenTypes.POST_DEC:
                 //we need that Tokens only at visitToken()
                 break;
             default:
                 throw new IllegalStateException(ILLEGAL_TYPE_OF_TOKEN + ast.toString());
         }
     }
 
     /**
      * Enters an inner class, which requires a new variable set.
      */
     private void enterBlock() {
         variableStack.push(new ArrayDeque<String>());
     }
     /**
      * Leave an inner class, so restore variable set.
      */
     private void exitBlock() {
         variableStack.pop();
     }
 
     /**
      * Get current variable stack
      * @return current variable stack
      */
     private Deque<String> getCurrentVariables() {
         return variableStack.peek();
     }
 
     /**
      * Check if ident is parameter.
      * @param ast ident to check.
      */
     private void checkIdent(DetailAST ast) {
         if (!getCurrentVariables().isEmpty()) {
             final DetailAST identAST = ast.getFirstChild();
 
-            if (identAST != null
-                && identAST.getType() == TokenTypes.IDENT
+            if (identAST.getType() == TokenTypes.IDENT
                 && getCurrentVariables().contains(identAST.getText())) {
                 log(ast.getLineNo(), ast.getColumnNo(),
                     MSG_KEY, identAST.getText());
             }
         }
     }
 
     /**
      * Push current variables to the stack.
      * @param ast a for definition.
      */
     private void leaveForIter(DetailAST ast) {
         final Set<String> variablesToPutInScope = getVariablesManagedByForLoop(ast);
         for (String variableName : variablesToPutInScope) {
             getCurrentVariables().push(variableName);
         }
     }
 
     /**
      * Determines which variable are specific to for loop and should not be
      * change by inner loop body.
      * @param ast For Loop
      * @return Set of Variable Name which are managed by for
      */
     private static Set<String> getVariablesManagedByForLoop(DetailAST ast) {
         final Set<String> initializedVariables = getForInitVariables(ast);
         final Set<String> iteratingVariables = getForIteratorVariables(ast);
 
         return Sets.intersection(initializedVariables, iteratingVariables);
     }
 
-    /**
-     * Determines whether enhanced for-loop variable should be checked or not.
-     * @param ast The ast to compare.
-     * @return true if enhanced for-loop variable should be checked.
-     */
-    private boolean shouldCheckEnhancedForLoopVariable(DetailAST ast) {
-        return !skipEnhancedForLoopVariable
-                || ast.getParent().getType() != TokenTypes.FOR_EACH_CLAUSE;
-    }
-
     /**
      * Push current variables to the stack.
      * @param paramDef a for-each clause variable
      */
     private void leaveForEach(DetailAST paramDef) {
         final DetailAST paramName = paramDef.findFirstToken(TokenTypes.IDENT);
         getCurrentVariables().push(paramName.getText());
     }
 
     /**
      * Pops the variables from the stack.
      * @param ast a for definition.
      */
     private void leaveForDef(DetailAST ast) {
         final DetailAST forInitAST = ast.findFirstToken(TokenTypes.FOR_INIT);
         if (forInitAST != null) {
             final Set<String> variablesManagedByForLoop = getVariablesManagedByForLoop(ast);
             popCurrentVariables(variablesManagedByForLoop.size());
         }
         else {
             // this is for-each loop, just pop veriables
             getCurrentVariables().pop();
         }
     }
 
     /**
      * Pops given number of variables from currentVariables
      * @param count Count of variables to be popped from currentVariables
      */
     private void popCurrentVariables(int count) {
         for (int i = 0; i < count; i++) {
             getCurrentVariables().pop();
         }
     }
 
     /**
      * Get all variables initialized In init part of for loop.
      * @param ast for loop iteral
      * @return set of variables initialized in for loop
      */
     private static Set<String> getForInitVariables(DetailAST ast) {
         final Set<String> initializedVariables = new HashSet<>();
         final DetailAST forInitAST = ast.findFirstToken(TokenTypes.FOR_INIT);
 
         for (DetailAST parameterDefAST = forInitAST.findFirstToken(TokenTypes.VARIABLE_DEF);
              parameterDefAST != null;
              parameterDefAST = parameterDefAST.getNextSibling()) {
             if (parameterDefAST.getType() == TokenTypes.VARIABLE_DEF) {
                 final DetailAST param =
                         parameterDefAST.findFirstToken(TokenTypes.IDENT);
