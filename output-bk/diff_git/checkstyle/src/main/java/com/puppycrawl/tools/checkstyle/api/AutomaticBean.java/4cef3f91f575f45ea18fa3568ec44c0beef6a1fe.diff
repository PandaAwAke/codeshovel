diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
index 3a703c630..91766f3e6 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
@@ -224,101 +224,102 @@ public class AutomaticBean
      */
     @Override
     public final void contextualize(Context context)
             throws CheckstyleException {
 
         final Collection<String> attributes = context.getAttributeNames();
 
         for (final String key : attributes) {
             final Object value = context.get(key);
 
             tryCopyProperty(getClass().getName(), key, value, false);
         }
     }
 
     /**
      * Returns the configuration that was used to configure this component.
      * @return the configuration that was used to configure this component.
      */
     protected final Configuration getConfiguration() {
         return configuration;
     }
 
     /**
      * Provides a hook to finish the part of this component's setup that
      * was not handled by the bean introspection.
      * <p>
      * The default implementation does nothing.
      * </p>
      * @throws CheckstyleException if there is a configuration error.
      */
     protected void finishLocalSetup() throws CheckstyleException {
         // No code by default, should be overridden only by demand at subclasses
     }
 
     /**
      * Called by configure() for every child of this component's Configuration.
      * <p>
      * The default implementation throws {@link CheckstyleException} if
      * {@code childConf} is {@code null} because it doesn't support children. It
      * must be overridden to validate and support children that are wanted.
      * </p>
      *
      * @param childConf a child of this component's Configuration
      * @throws CheckstyleException if there is a configuration error.
      * @see Configuration#getChildren
      */
     protected void setupChild(Configuration childConf)
             throws CheckstyleException {
         if (childConf != null) {
             throw new CheckstyleException(childConf.getName() + " is not allowed as a child in "
-                    + getConfiguration().getName());
+                    + getConfiguration().getName() + ". Please review 'Parent Module' section "
+                    + "for this Check in web documentation if Check is standard.");
         }
     }
 
     /** A converter that converts strings to patterns. */
     private static class PatternConverter implements Converter {
         @SuppressWarnings({"unchecked", "rawtypes"})
         @Override
         public Object convert(Class type, Object value) {
             return CommonUtils.createPattern(value.toString());
         }
     }
 
     /** A converter that converts strings to severity level. */
     private static class SeverityLevelConverter implements Converter {
         @SuppressWarnings({"unchecked", "rawtypes"})
         @Override
         public Object convert(Class type, Object value) {
             return SeverityLevel.getInstance(value.toString());
         }
     }
 
     /** A converter that converts strings to scope. */
     private static class ScopeConverter implements Converter {
         @SuppressWarnings({"unchecked", "rawtypes"})
         @Override
         public Object convert(Class type, Object value) {
             return Scope.getInstance(value.toString());
         }
     }
 
     /** A converter that converts strings to uri. */
     private static class UriConverter implements Converter {
         @SuppressWarnings({"unchecked", "rawtypes"})
         @Override
         public Object convert(Class type, Object value) {
             final String url = value.toString();
             URI result = null;
 
             if (!CommonUtils.isBlank(url)) {
                 try {
                     result = CommonUtils.getUriByFilename(url);
                 }
                 catch (CheckstyleException ex) {
                     throw new IllegalArgumentException(ex);
                 }
             }
 
             return result;
         }
     }
