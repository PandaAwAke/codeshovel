diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java
index 55e66f91f..42172677e 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java
@@ -101,98 +101,98 @@ public final class MissingOverrideCheck extends Check {
 
     /** @see #setJavaFiveCompatibility(boolean) */
     private boolean javaFiveCompatibility;
 
     /**
      * Sets Java 5 compatibility mode.
      *
      * <p>
      * In Java 5, this check could flag code that is not valid for the Override
      * annotation even though it is a proper override. See the class
      * documentation for more information.
      * </p>
      *
      * <p>
      * Set this to true to turn on Java 5 compatibility mode. Set this to
      * false to turn off Java 5 compatibility mode.
      * </p>
      *
      * @param compatibility compatibility or not
      */
     public void setJavaFiveCompatibility(final boolean compatibility) {
         this.javaFiveCompatibility = compatibility;
     }
 
     /** {@inheritDoc} */
     @Override
     public int[] getDefaultTokens() {
         return this.getRequiredTokens();
     }
 
     /** {@inheritDoc} */
     @Override
     public int[] getAcceptableTokens() {
         return this.getRequiredTokens();
     }
 
     /** {@inheritDoc} */
     @Override
     public int[] getRequiredTokens() {
         return new int[]
         {TokenTypes.METHOD_DEF, };
     }
 
     /** {@inheritDoc} */
     @Override
     public void visitToken(final DetailAST ast) {
         final TextBlock javadoc =
             this.getFileContents().getJavadocBefore(ast.getLineNo());
 
 
-        final boolean containastag = this.containsJavadocTag(javadoc);
+        final boolean containastag = containsJavadocTag(javadoc);
         if (containastag && !JavadocTagInfo.INHERIT_DOC.isValidOn(ast)) {
             this.log(ast.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,
                 JavadocTagInfo.INHERIT_DOC.getText());
             return;
         }
 
         if (this.javaFiveCompatibility) {
             final DetailAST defOrNew = ast.getParent().getParent();
 
             if (defOrNew.branchContains(TokenTypes.EXTENDS_CLAUSE)
                 || defOrNew.branchContains(TokenTypes.IMPLEMENTS_CLAUSE)
                 || defOrNew.getType() == TokenTypes.LITERAL_NEW) {
                 return;
             }
         }
 
         if (containastag
             && !AnnotationUtility.containsAnnotation(ast, OVERRIDE)
             && !AnnotationUtility.containsAnnotation(ast, FQ_OVERRIDE)) {
             this.log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);
         }
     }
 
     /**
      * Checks to see if the text block contains a inheritDoc tag.
      *
      * @param javadoc the javadoc of the AST
      * @return true if contains the tag
      */
-    private boolean containsJavadocTag(final TextBlock javadoc) {
+    private static boolean containsJavadocTag(final TextBlock javadoc) {
         if (javadoc == null) {
             return false;
         }
 
         final String[] lines = javadoc.getText();
 
         for (final String line : lines) {
             final Matcher matchInheritDoc =
                 MissingOverrideCheck.MATCH_INHERITDOC.matcher(line);
 
             if (matchInheritDoc.find()) {
                 return true;
             }
         }
         return false;
     }
 }
