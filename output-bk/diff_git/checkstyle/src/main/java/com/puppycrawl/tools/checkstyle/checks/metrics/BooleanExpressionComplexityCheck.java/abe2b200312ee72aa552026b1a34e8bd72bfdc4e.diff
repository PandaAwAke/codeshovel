diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheck.java
index ebc479088..12641b022 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheck.java
@@ -27,100 +27,115 @@ import com.puppycrawl.tools.checkstyle.checks.CheckUtils;
 /**
  * Restricts nested boolean operators (&amp;&amp;, ||, &amp;, | and ^) to
  * a specified depth (default = 3).
  *
  * @author <a href="mailto:simon@redhillconsulting.com.au">Simon Harris</a>
  * @author o_sukhodolsky
  */
 public final class BooleanExpressionComplexityCheck extends Check
 {
     /** Default allowed complexity. */
     private static final int DEFAULT_MAX = 3;
 
     /** Stack of contexts. */
     private final FastStack<Context> contextStack = FastStack.newInstance();
     /** Maximum allowed complexity. */
     private int max;
     /** Current context. */
     private Context context;
 
     /** Creates new instance of the check. */
     public BooleanExpressionComplexityCheck()
     {
         setMax(DEFAULT_MAX);
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.CTOR_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.EXPR,
             TokenTypes.LAND,
             TokenTypes.BAND,
             TokenTypes.LOR,
             TokenTypes.BOR,
             TokenTypes.BXOR,
         };
     }
 
     @Override
     public int[] getRequiredTokens()
     {
         return new int[] {
             TokenTypes.CTOR_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.EXPR,
         };
     }
 
+    @Override
+    public int[] getAcceptableTokens()
+    {
+        return new int[] {
+            TokenTypes.CTOR_DEF,
+            TokenTypes.METHOD_DEF,
+            TokenTypes.EXPR,
+            TokenTypes.LAND,
+            TokenTypes.BAND,
+            TokenTypes.LOR,
+            TokenTypes.BOR,
+            TokenTypes.BXOR,
+        };
+    }
+
     /**
      * Getter for maximum allowed complexity.
      * @return value of maximum allowed complexity.
      */
     public int getMax()
     {
         return max;
     }
 
     /**
      * Setter for maximum allowed complexity.
      * @param max new maximum allowed complexity.
      */
     public void setMax(int max)
     {
         this.max = max;
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
         switch (ast.getType()) {
             case TokenTypes.CTOR_DEF:
             case TokenTypes.METHOD_DEF:
                 visitMethodDef(ast);
                 break;
             case TokenTypes.EXPR:
                 visitExpr();
                 break;
             case TokenTypes.LAND:
             case TokenTypes.BAND:
             case TokenTypes.LOR:
             case TokenTypes.BOR:
             case TokenTypes.BXOR:
                 context.visitBooleanOperator();
                 break;
             default:
                 throw new IllegalStateException(ast.toString());
         }
     }
 
     @Override
     public void leaveToken(DetailAST ast)
     {
         switch (ast.getType()) {
             case TokenTypes.CTOR_DEF:
             case TokenTypes.METHOD_DEF:
                 leaveMethodDef();
                 break;
             case TokenTypes.EXPR:
