diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java
index bebce58e5..6becb4cd1 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java
@@ -23,153 +23,149 @@ import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.DetailNode;
 import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.utils.JavadocUtils;
 import com.puppycrawl.tools.checkstyle.utils.TokenUtils;
 
 /**
  * <p>
  * Checks the order of at-clauses.
  * </p>
  *
  * <p>
  * The check allows to configure itself by using the following properties:
  * </p>
  * <ul>
  * <li>
  * target - allows to specify targets to check at-clauses.
  * </li>
  * <li>
  * tagOrder - allows to specify the order by tags.
  * </li>
  * </ul>
  * <p>
  * Default configuration:
  * </p>
  * <pre>
  * &lt;module name=&quot;AtclauseOrderCheck&quot;&gt;
  *     &lt;property name=&quot;tagOrder&quot; value=&quot;&#64;author, &#64;version, &#64;param,
  *     &#64;return, &#64;throws, &#64;exception, &#64;see, &#64;since, &#64;serial,
  *     &#64;serialField, &#64;serialData, &#64;deprecated&quot;/&gt;
  *     &lt;property name=&quot;target&quot; value=&quot;CLASS_DEF, INTERFACE_DEF, ENUM_DEF,
  *     METHOD_DEF, CTOR_DEF, VARIABLE_DEF&quot;/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * @author max
  *
  */
 public class AtclauseOrderCheck extends AbstractJavadocCheck {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "at.clause.order";
 
-    /** Comma literal. */
-    private static final String COMMA_SEPARATOR = ",";
     /**
      * Default order of atclauses.
      */
     private static final String[] DEFAULT_ORDER = {
         "@author", "@version",
         "@param", "@return",
         "@throws", "@exception",
         "@see", "@since",
         "@serial", "@serialField",
         "@serialData", "@deprecated",
     };
 
     /**
      * Default target of checking atclauses.
      */
     private List<Integer> target = Arrays.asList(
         TokenTypes.CLASS_DEF,
         TokenTypes.INTERFACE_DEF,
         TokenTypes.ENUM_DEF,
         TokenTypes.METHOD_DEF,
         TokenTypes.CTOR_DEF,
         TokenTypes.VARIABLE_DEF
     );
 
     /**
      * Order of atclauses.
      */
     private List<String> tagOrder = Arrays.asList(DEFAULT_ORDER);
 
     /**
      * Sets custom targets.
-     * @param target user's targets.
+     * @param targets user's targets.
      */
-    public void setTarget(String target) {
+    public void setTarget(String... targets) {
         final List<Integer> customTarget = new ArrayList<>();
-        final String[] sTarget = target.split(COMMA_SEPARATOR);
-        for (String aSTarget : sTarget) {
-            customTarget.add(TokenUtils.getTokenId(aSTarget.trim()));
+        for (String temp : targets) {
+            customTarget.add(TokenUtils.getTokenId(temp.trim()));
         }
-        this.target = customTarget;
+        target = customTarget;
     }
 
     /**
      * Sets custom order of atclauses.
-     * @param order user's order.
+     * @param orders user's orders.
      */
-    public void setTagOrder(String order) {
+    public void setTagOrder(String... orders) {
         final List<String> customOrder = new ArrayList<>();
-        final String[] sOrder = order.split(COMMA_SEPARATOR);
-        for (String aSOrder : sOrder) {
-            customOrder.add(aSOrder.trim());
+        for (String order : orders) {
+            customOrder.add(order.trim());
         }
         tagOrder = customOrder;
     }
 
     @Override
     public int[] getDefaultJavadocTokens() {
         return new int[] {
             JavadocTokenTypes.JAVADOC,
         };
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.BLOCK_COMMENT_BEGIN};
     }
 
     @Override
     public int[] getRequiredTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public void visitJavadocToken(DetailNode ast) {
         final int parentType = getParentType(getBlockCommentAst());
 
         if (target.contains(parentType)) {
             checkOrderInTagSection(ast);
         }
     }
 
     /**
      * Checks order of atclauses in tag section node.
      * @param javadoc Javadoc root node.
      */
     private void checkOrderInTagSection(DetailNode javadoc) {
         int maxIndexOfPreviousTag = 0;
 
         for (DetailNode node : javadoc.getChildren()) {
             if (node.getType() == JavadocTokenTypes.JAVADOC_TAG) {
                 final String tagText = JavadocUtils.getFirstChild(node).getText();
                 final int indexOfCurrentTag = tagOrder.indexOf(tagText);
 
                 if (indexOfCurrentTag != -1) {
                     if (indexOfCurrentTag < maxIndexOfPreviousTag) {
                         log(node.getLineNumber(), MSG_KEY, tagOrder.toString());
                     }
                     else {
                         maxIndexOfPreviousTag = indexOfCurrentTag;
                     }
                 }
