diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/AbstractParenPadCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/AbstractParenPadCheck.java
index 7f488bf0e..593b1cfe3 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/AbstractParenPadCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/AbstractParenPadCheck.java
@@ -53,62 +53,62 @@ abstract class AbstractParenPadCheck
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String WS_NOT_PRECEDED = "ws.notPreceded";
 
     /** Open parenthesis literal. */
     private static final char OPEN_PARENTHESIS = '(';
 
     /** Close parenthesis literal. */
     private static final char CLOSE_PARENTHESIS = ')';
 
     /**
      * Sets the paren pad option to nospace.
      */
     AbstractParenPadCheck() {
         super(PadOption.NOSPACE, PadOption.class);
     }
 
     /**
      * Process a token representing a left parentheses.
      * @param ast the token representing a left parentheses
      */
     protected void processLeft(DetailAST ast) {
         final String line = getLines()[ast.getLineNo() - 1];
         final int after = ast.getColumnNo() + 1;
         if (after < line.length()) {
             if (getAbstractOption() == PadOption.NOSPACE
                 && Character.isWhitespace(line.charAt(after))) {
                 log(ast.getLineNo(), after, WS_FOLLOWED, OPEN_PARENTHESIS);
             }
             else if (getAbstractOption() == PadOption.SPACE
                      && !Character.isWhitespace(line.charAt(after))
                      && line.charAt(after) != CLOSE_PARENTHESIS) {
                 log(ast.getLineNo(), after, WS_NOT_FOLLOWED, OPEN_PARENTHESIS);
             }
         }
     }
 
     /**
      * Process a token representing a right parentheses.
      * @param ast the token representing a right parentheses
      */
     protected void processRight(DetailAST ast) {
         final String line = getLines()[ast.getLineNo() - 1];
         final int before = ast.getColumnNo() - 1;
         if (before >= 0) {
             if (getAbstractOption() == PadOption.NOSPACE
                 && Character.isWhitespace(line.charAt(before))
-                && !CommonUtils.whitespaceBefore(before, line)) {
+                && !CommonUtils.hasWhitespaceBefore(before, line)) {
                 log(ast.getLineNo(), before, WS_PRECEDED, CLOSE_PARENTHESIS);
             }
             else if (getAbstractOption() == PadOption.SPACE
                 && !Character.isWhitespace(line.charAt(before))
                 && line.charAt(before) != OPEN_PARENTHESIS) {
                 log(ast.getLineNo(), ast.getColumnNo(),
                     WS_NOT_PRECEDED, CLOSE_PARENTHESIS);
             }
         }
     }
 }
