diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/InnerTypeLastCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/InnerTypeLastCheck.java
index a9e77ab9c..7c20b5c28 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/InnerTypeLastCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/InnerTypeLastCheck.java
@@ -14,70 +14,70 @@
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks.design;
 
 import com.puppycrawl.tools.checkstyle.ScopeUtils;
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * <p>
  * Check nested (internal) classes/interfaces are declared at the bottom of the
  * class after all method and field declarations.
  * </p>
  *
  * @author <a href="mailto:ryly@mail.ru">Ruslan Dyachenko</a>
  */
 public class InnerTypeLastCheck extends Check {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "arrangement.members.before.inner";
 
     /** Meet a root class. */
     private boolean rootClass = true;
 
     @Override
     public int[] getDefaultTokens() {
         return new int[] {TokenTypes.CLASS_DEF, TokenTypes.INTERFACE_DEF};
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.CLASS_DEF, TokenTypes.INTERFACE_DEF};
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         /** First root class */
         if (rootClass) {
             rootClass = false;
         }
         else {
             DetailAST nextSibling = ast.getNextSibling();
-            while (null != nextSibling) {
+            while (nextSibling != null) {
                 if (!ScopeUtils.inCodeBlock(ast)
                     && (nextSibling.getType() == TokenTypes.VARIABLE_DEF
                         || nextSibling.getType() == TokenTypes.METHOD_DEF)) {
                     log(nextSibling.getLineNo(), nextSibling.getColumnNo(),
                         MSG_KEY);
                 }
                 nextSibling = nextSibling.getNextSibling();
             }
         }
     }
 
     @Override
     public void leaveToken(DetailAST ast) {
         /** Is this a root class */
-        if (null == ast.getParent()) {
+        if (ast.getParent() == null) {
             rootClass = true;
         }
     }
 }
