diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java
index d420bc4fa..07349c222 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java
@@ -106,110 +106,107 @@ public class UncommentedMainCheck
         }
     }
 
     @Override
     public void visitToken(DetailAST ast) {
 
         switch (ast.getType()) {
             case TokenTypes.PACKAGE_DEF:
                 visitPackageDef(ast);
                 break;
             case TokenTypes.CLASS_DEF:
                 visitClassDef(ast);
                 break;
             case TokenTypes.METHOD_DEF:
                 visitMethodDef(ast);
                 break;
             default:
                 throw new IllegalStateException(ast.toString());
         }
     }
 
     /**
      * Sets current package.
      * @param packageDef node for package definition
      */
     private void visitPackageDef(DetailAST packageDef) {
         packageName = FullIdent.createFullIdent(packageDef.getLastChild()
                 .getPreviousSibling());
     }
 
     /**
      * If not inner class then change current class name.
      * @param classDef node for class definition
      */
     private void visitClassDef(DetailAST classDef) {
         // we are not use inner classes because they can not
         // have static methods
         if (classDepth == 0) {
             final DetailAST ident = classDef.findFirstToken(TokenTypes.IDENT);
             currentClass = packageName.getText() + "." + ident.getText();
             classDepth++;
         }
     }
 
     /**
      * Checks method definition if this is
      * {@code public static void main(String[])}.
      * @param method method definition node
      */
     private void visitMethodDef(DetailAST method) {
-        if (classDepth != 1) {
-            // method in inner class or in interface definition
-            return;
-        }
-
-        if (checkClassName()
-            && checkName(method)
-            && checkModifiers(method)
-            && checkType(method)
-            && checkParams(method)) {
+        if (classDepth == 1
+                // method not in inner class or in interface definition
+                && checkClassName()
+                && checkName(method)
+                && checkModifiers(method)
+                && checkType(method)
+                && checkParams(method)) {
             log(method.getLineNo(), MSG_KEY);
         }
     }
 
     /**
      * Checks that current class is not excluded.
      * @return true if check passed, false otherwise
      */
     private boolean checkClassName() {
         return !excludedClassesPattern.matcher(currentClass).find();
     }
 
     /**
      * Checks that method name is @quot;main@quot;.
      * @param method the METHOD_DEF node
      * @return true if check passed, false otherwise
      */
     private static boolean checkName(DetailAST method) {
         final DetailAST ident = method.findFirstToken(TokenTypes.IDENT);
         return "main".equals(ident.getText());
     }
 
     /**
      * Checks that method has final and static modifiers.
      * @param method the METHOD_DEF node
      * @return true if check passed, false otherwise
      */
     private static boolean checkModifiers(DetailAST method) {
         final DetailAST modifiers =
             method.findFirstToken(TokenTypes.MODIFIERS);
 
         return modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)
             && modifiers.branchContains(TokenTypes.LITERAL_STATIC);
     }
 
     /**
      * Checks that return type is {@code void}.
      * @param method the METHOD_DEF node
      * @return true if check passed, false otherwise
      */
     private static boolean checkType(DetailAST method) {
         final DetailAST type =
             method.findFirstToken(TokenTypes.TYPE).getFirstChild();
         return type.getType() == TokenTypes.LITERAL_VOID;
     }
 
     /**
      * Checks that method has only {@code String[]} or only {@code String...} param.
      * @param method the METHOD_DEF node
      * @return true if check passed, false otherwise
