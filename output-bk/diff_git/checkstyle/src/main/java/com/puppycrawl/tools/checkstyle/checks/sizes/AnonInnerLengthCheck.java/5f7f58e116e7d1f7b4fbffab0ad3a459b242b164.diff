diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/AnonInnerLengthCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/AnonInnerLengthCheck.java
index 0dbb09b26..6f5ff98ed 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/AnonInnerLengthCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/AnonInnerLengthCheck.java
@@ -27,86 +27,86 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 /**
  * <p>
  * Checks for long anonymous inner classes.
  * </p>
  * <p>
  * Rationale: If an anonymous inner class becomes very long
  * it is hard to understand and to see the flow of the method
  * where the class is defined. Therefore long anonymous inner
  * classes should usually be refactored into a named inner class.
  * See also Bloch, Effective Java, p. 93.
  * </p>
  * <p>
  * The default maximum anonymous inner class length is 20 lines.
  * To change the maximum number of lines, set property max.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="AnonInnerLength"/&gt;
  * </pre>
  * <p>
  * An example of how to configure the check so that it accepts anonymous
  * inner classes with up to 60 lines is:
  * </p>
  * <pre>
  * &lt;module name="AnonInnerLength"&gt;
  *    &lt;property name="max" value="60"/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * @author Rob Worth
  */
 @StatelessCheck
 public class AnonInnerLengthCheck extends AbstractCheck {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "maxLen.anonInner";
 
     /** Default maximum number of lines. */
     private static final int DEFAULT_MAX = 20;
 
     /** Maximum number of lines. */
     private int max = DEFAULT_MAX;
 
     @Override
     public int[] getDefaultTokens() {
-        return getAcceptableTokens();
+        return getRequiredTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
-        return new int[] {TokenTypes.LITERAL_NEW};
+        return getRequiredTokens();
     }
 
     @Override
     public int[] getRequiredTokens() {
-        return getAcceptableTokens();
+        return new int[] {TokenTypes.LITERAL_NEW};
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final DetailAST openingBrace = ast.findFirstToken(TokenTypes.OBJBLOCK);
         if (openingBrace != null) {
             final DetailAST closingBrace =
                 openingBrace.findFirstToken(TokenTypes.RCURLY);
             final int length =
                 closingBrace.getLineNo() - openingBrace.getLineNo() + 1;
             if (length > max) {
                 log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY,
                         length, max);
             }
         }
     }
 
     /**
      * Sets maximum length of an anonymous inner class.
      * @param length the maximum length of an anonymous inner class.
      */
     public void setMax(int length) {
         max = length;
     }
 }
