diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
index 7941730ff..414550b94 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
@@ -85,88 +85,88 @@ public final class PackageNamesLoader
                              String localName,
                              String qName,
                              Attributes attributes) {
         if (PACKAGE_ELEMENT_NAME.equals(qName)) {
             //push package name, name is mandatory attribute with not empty value by DTD
             final String name = attributes.getValue("name");
             packageStack.push(name);
         }
     }
 
     /**
      * Creates a full package name from the package names on the stack.
      * @return the full name of the current package.
      */
     private String getPackageName() {
         final StringBuilder buf = new StringBuilder();
         final Iterator<String> iterator = packageStack.descendingIterator();
         while (iterator.hasNext()) {
             final String subPackage = iterator.next();
             buf.append(subPackage);
             if (!CommonUtils.endsWithChar(subPackage, '.')) {
                 buf.append('.');
             }
         }
         return buf.toString();
     }
 
     @Override
     public void endElement(String uri,
                            String localName,
                            String qName) {
         if (PACKAGE_ELEMENT_NAME.equals(qName)) {
 
             packageNames.add(getPackageName());
             packageStack.pop();
         }
     }
 
     /**
      * Returns the set of package names, compiled from all
      * checkstyle_packages.xml files found on the given class loaders
      * classpath.
      * @param classLoader the class loader for loading the
      *          checkstyle_packages.xml files.
      * @return the set of package names.
      * @throws CheckstyleException if an error occurs.
      */
     public static Set<String> getPackageNames(ClassLoader classLoader)
             throws CheckstyleException {
 
-        Set<String> result;
+        final Set<String> result;
         try {
             //create the loader outside the loop to prevent PackageObjectFactory
             //being created anew for each file
             final PackageNamesLoader namesLoader = new PackageNamesLoader();
 
             final Enumeration<URL> packageFiles = classLoader.getResources(CHECKSTYLE_PACKAGES);
 
             while (packageFiles.hasMoreElements()) {
                 final URL packageFile = packageFiles.nextElement();
                 InputStream stream = null;
 
                 try {
                     stream = new BufferedInputStream(packageFile.openStream());
                     final InputSource source = new InputSource(stream);
                     namesLoader.parseInputSource(source);
                 }
                 catch (IOException e) {
                     throw new CheckstyleException("unable to open " + packageFile, e);
                 }
                 finally {
                     Closeables.closeQuietly(stream);
                 }
             }
 
             result = namesLoader.packageNames;
 
         }
         catch (IOException e) {
             throw new CheckstyleException("unable to get package file resources", e);
         }
         catch (ParserConfigurationException | SAXException e) {
             throw new CheckstyleException("unable to open one of package files", e);
         }
 
         return result;
     }
 }
