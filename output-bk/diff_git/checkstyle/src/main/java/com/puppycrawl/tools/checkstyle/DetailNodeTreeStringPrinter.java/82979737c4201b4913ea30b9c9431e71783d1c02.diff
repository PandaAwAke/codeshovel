diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinter.java b/src/main/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinter.java
index d83e5fe8e..81d2a3d4c 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinter.java
@@ -121,87 +121,85 @@ public final class DetailNodeTreeStringPrinter {
                     .append(JavadocUtils.getTokenName(node.getType())).append(" -> ")
                     .append(JavadocUtils.escapeAllControlChars(node.getText())).append(" [")
                     .append(node.getLineNumber()).append(':').append(node.getColumnNumber())
                     .append(']').append(LINE_SEPARATOR)
                     .append(printTree(JavadocUtils.getFirstChild(node), rootPrefix, prefix));
             node = JavadocUtils.getNextSibling(node);
         }
         return messageBuilder.toString();
     }
 
     /**
      * Get indentation for a node.
      * @param node the DetailNode to get the indentation for.
      * @return the indentation in String format.
      */
     private static String getIndentation(DetailNode node) {
         final boolean isLastChild = JavadocUtils.getNextSibling(node) == null;
         DetailNode currentNode = node;
         final StringBuilder indentation = new StringBuilder();
         while (currentNode.getParent() != null) {
             currentNode = currentNode.getParent();
             if (currentNode.getParent() == null) {
                 if (isLastChild) {
                     // only ASCII symbols must be used due to
                     // problems with running tests on Windows
                     indentation.append("`--");
                 }
                 else {
                     indentation.append("|--");
                 }
             }
             else {
                 if (JavadocUtils.getNextSibling(currentNode) == null) {
                     indentation.insert(0, "    ");
                 }
                 else {
                     indentation.insert(0, "|   ");
                 }
             }
         }
         return indentation.toString();
     }
 
     /**
      * Parse a file and return the parse tree.
      * @param file the file to parse.
      * @return the root node of the parse tree.
      * @throws IOException if the file could not be read.
      */
     private static DetailNode parseFile(File file) throws IOException {
-        // Details: https://github.com/checkstyle/checkstyle/issues/3034
-        //noinspection MismatchedQueryAndUpdateOfCollection
         final FileText text = new FileText(file.getAbsoluteFile(),
             System.getProperty("file.encoding", "UTF-8"));
         return parseJavadocAsDetailNode(text.getFullText().toString());
     }
 
     /**
      * Creates DetailAST block comment to pass it to the Javadoc parser.
      * @param content comment content.
      * @return DetailAST block comment
      */
     private static DetailAST createFakeBlockComment(String content) {
         final DetailAST blockCommentBegin = new DetailAST();
         blockCommentBegin.setType(TokenTypes.BLOCK_COMMENT_BEGIN);
         blockCommentBegin.setText("/*");
         blockCommentBegin.setLineNo(0);
         blockCommentBegin.setColumnNo(-JAVADOC_START.length());
 
         final DetailAST commentContent = new DetailAST();
         commentContent.setType(TokenTypes.COMMENT_CONTENT);
         commentContent.setText("*" + content);
         commentContent.setLineNo(0);
         // javadoc should starts at 0 column, so COMMENT_CONTENT node
         // that contains javadoc identificator has -1 column
         commentContent.setColumnNo(-1);
 
         final DetailAST blockCommentEnd = new DetailAST();
         blockCommentEnd.setType(TokenTypes.BLOCK_COMMENT_END);
         blockCommentEnd.setText("*/");
 
         blockCommentBegin.setFirstChild(commentContent);
         commentContent.setNextSibling(blockCommentEnd);
         return blockCommentBegin;
     }
 
 }
