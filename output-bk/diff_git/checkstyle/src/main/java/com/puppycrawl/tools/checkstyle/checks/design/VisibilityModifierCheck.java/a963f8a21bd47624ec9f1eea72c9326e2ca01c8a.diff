diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java
index 8707a93c0..33f803b27 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java
@@ -257,171 +257,166 @@ public class VisibilityModifierCheck
             "java.lang.Boolean",
             "java.lang.Long",
             "java.lang.Double",
             "java.lang.Float",
             "java.lang.StackTraceElement",
             "java.math.BigInteger",
             "java.math.BigDecimal",
             "java.io.File",
             "java.util.Locale",
             "java.util.UUID",
             "java.net.URL",
             "java.net.URI",
             "java.net.Inet4Address",
             "java.net.Inet6Address",
             "java.net.InetSocketAddress"
         ).collect(Collectors.toList()));
 
     /** Default ignore annotations canonical names. */
     private static final List<String> DEFAULT_IGNORE_ANNOTATIONS = Collections.unmodifiableList(
         Stream.of(
             "org.junit.Rule",
             "org.junit.ClassRule",
             "com.google.common.annotations.VisibleForTesting"
         ).collect(Collectors.toList()));
 
     /** Name for 'public' access modifier. */
     private static final String PUBLIC_ACCESS_MODIFIER = "public";
 
     /** Name for 'private' access modifier. */
     private static final String PRIVATE_ACCESS_MODIFIER = "private";
 
     /** Name for 'protected' access modifier. */
     private static final String PROTECTED_ACCESS_MODIFIER = "protected";
 
     /** Name for implicit 'package' access modifier. */
     private static final String PACKAGE_ACCESS_MODIFIER = "package";
 
     /** Name for 'static' keyword. */
     private static final String STATIC_KEYWORD = "static";
 
     /** Name for 'final' keyword. */
     private static final String FINAL_KEYWORD = "final";
 
     /** Contains explicit access modifiers. */
     private static final String[] EXPLICIT_MODS = {
         PUBLIC_ACCESS_MODIFIER,
         PRIVATE_ACCESS_MODIFIER,
         PROTECTED_ACCESS_MODIFIER,
     };
 
-    /**
-     * Pattern for public members that should be ignored.  Note:
+    /** Regexp for public members that should be ignored. Note:
      * Earlier versions of checkstyle used ^f[A-Z][a-zA-Z0-9]*$ as the
      * default to allow CMP for EJB 1.1 with the default settings.
      * With EJB 2.0 it is not longer necessary to have public access
      * for persistent fields.
      */
-    private String publicMemberFormat = "^serialVersionUID$";
-
-    /** Regexp for public members that should be ignored. */
-    private Pattern publicMemberPattern = Pattern.compile(publicMemberFormat);
+    private Pattern publicMemberPattern = Pattern.compile("^serialVersionUID$");
 
     /** List of ignore annotations short names. */
     private final List<String> ignoreAnnotationShortNames =
             getClassShortNames(DEFAULT_IGNORE_ANNOTATIONS);
 
     /** List of immutable classes short names. */
     private final List<String> immutableClassShortNames =
         getClassShortNames(DEFAULT_IMMUTABLE_TYPES);
 
     /** List of ignore annotations canonical names. */
     private List<String> ignoreAnnotationCanonicalNames =
         new ArrayList<>(DEFAULT_IGNORE_ANNOTATIONS);
 
     /** Whether protected members are allowed. */
     private boolean protectedAllowed;
 
     /** Whether package visible members are allowed. */
     private boolean packageAllowed;
 
     /** Allows immutable fields of final classes to be declared as public. */
     private boolean allowPublicImmutableFields;
 
     /** Allows final fields to be declared as public. */
     private boolean allowPublicFinalFields;
 
     /** List of immutable classes canonical names. */
     private List<String> immutableClassCanonicalNames = new ArrayList<>(DEFAULT_IMMUTABLE_TYPES);
 
     /**
      * Set the list of ignore annotations.
      * @param annotationNames array of ignore annotations canonical names.
      */
     public void setIgnoreAnnotationCanonicalNames(String... annotationNames) {
         ignoreAnnotationCanonicalNames = Arrays.asList(annotationNames);
     }
 
     /**
      * Set whether protected members are allowed.
      * @param protectedAllowed whether protected members are allowed
      */
     public void setProtectedAllowed(boolean protectedAllowed) {
         this.protectedAllowed = protectedAllowed;
     }
 
     /**
      * Set whether package visible members are allowed.
      * @param packageAllowed whether package visible members are allowed
      */
     public void setPackageAllowed(boolean packageAllowed) {
         this.packageAllowed = packageAllowed;
     }
 
     /**
      * Set the pattern for public members to ignore.
      * @param pattern
      *        pattern for public members to ignore.
      */
     public void setPublicMemberPattern(Pattern pattern) {
         publicMemberPattern = pattern;
-        publicMemberFormat = pattern.pattern();
     }
 
     /**
      * Sets whether public immutable fields are allowed.
      * @param allow user's value.
      */
     public void setAllowPublicImmutableFields(boolean allow) {
         allowPublicImmutableFields = allow;
     }
 
     /**
      * Sets whether public final fields are allowed.
      * @param allow user's value.
      */
     public void setAllowPublicFinalFields(boolean allow) {
         allowPublicFinalFields = allow;
     }
 
     /**
      * Set the list of immutable classes types names.
      * @param classNames array of immutable types canonical names.
      */
     public void setImmutableClassCanonicalNames(String... classNames) {
         immutableClassCanonicalNames = Arrays.asList(classNames);
     }
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.VARIABLE_DEF,
             TokenTypes.IMPORT,
         };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public void beginTree(DetailAST rootAst) {
         immutableClassShortNames.clear();
         final List<String> classShortNames =
                 getClassShortNames(immutableClassCanonicalNames);
         immutableClassShortNames.addAll(classShortNames);
