diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForInitializerPadCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForInitializerPadCheck.java
index 93614de9c..5e866979f 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForInitializerPadCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForInitializerPadCheck.java
@@ -23,83 +23,86 @@ import com.puppycrawl.tools.checkstyle.Utils;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.checks.AbstractOptionCheck;
 
 /**
  * <p>Checks the padding of an empty for initializer; that is whether a
  * space is required at an empty for initializer, or such spaces are
  * forbidden. No check occurs if there is a line wrap at the initializer, as in
  * </p>
  * <pre class="body">
 for (
       ; i &lt; j; i++, j--)
    </pre>
  * <p>
  * The policy to verify is specified using the {@link PadOption} class and
  * defaults to {@link PadOption#NOSPACE}.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="EmptyForInitializerPad"/&gt;
  * </pre>
  *
  * @author lkuehne
  */
 public class EmptyForInitializerPadCheck
     extends AbstractOptionCheck<PadOption> {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_PRECEDED = "ws.preceded";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_NOT_PRECEDED = "ws.notPreceded";
 
     /**
      * Sets the paren pad otion to nospace.
      */
     public EmptyForInitializerPadCheck() {
         super(PadOption.NOSPACE, PadOption.class);
     }
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.FOR_INIT,
-        };
+        return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
-        return new int[] {TokenTypes.FOR_INIT,
-        };
+        return new int[] {TokenTypes.FOR_INIT};
+    }
+
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         if (ast.getChildCount() == 0) {
             //empty for initializer. test pad before semi.
             final DetailAST semi = ast.getNextSibling();
             final int semiLineIdx = semi.getLineNo() - 1;
             final String line = getLines()[semiLineIdx];
             final int before = semi.getColumnNo() - 1;
             //don't check if semi at beginning of line
             if (!Utils.whitespaceBefore(before, line)) {
                 final PadOption option = getAbstractOption();
                 if (option == PadOption.NOSPACE
                     && Character.isWhitespace(line.charAt(before))) {
                     log(semi.getLineNo(), before, MSG_PRECEDED, ";");
                 }
                 else if (option == PadOption.SPACE
                          && !Character.isWhitespace(line.charAt(before))) {
                     log(semi.getLineNo(), before, MSG_NOT_PRECEDED, ";");
                 }
             }
         }
     }
 }
