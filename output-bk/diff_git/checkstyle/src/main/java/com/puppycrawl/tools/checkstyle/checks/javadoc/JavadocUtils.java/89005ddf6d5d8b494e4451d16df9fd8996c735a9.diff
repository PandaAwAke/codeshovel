diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java
index 1f5b7fa50..e5ed83bc2 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java
@@ -69,124 +69,123 @@ public final class JavadocUtils
                 builder.put(name, tokenValue);
                 if (tokenValue > tempTokenValueToName.length - 1) {
                     final String[] temp = new String[tokenValue + 1];
                     System.arraycopy(tempTokenValueToName, 0, temp, 0, tempTokenValueToName.length);
                     tempTokenValueToName = temp;
                 }
                 if (tokenValue == -1) {
                     tempTokenValueToName[0] = name;
                 }
                 else {
                     tempTokenValueToName[tokenValue] = name;
                 }
             }
             catch (Exception e) {
                 throw new IllegalStateException("Failed to instantiate collection of Javadoc tokens"
                         , e);
             }
         }
 
         TOKEN_NAME_TO_VALUE = builder.build();
         TOKEN_VALUE_TO_NAME = tempTokenValueToName;
     }
 
     ///CLOVER:OFF
     /** prevent instantiation */
     private JavadocUtils()
     {
     }
 
     ///CLOVER:ON
 
     /**
      * Gets validTags from a given piece of Javadoc.
      * @param cmt
      *        the Javadoc comment to process.
      * @param tagType
      *        the type of validTags we're interested in
      * @return all standalone validTags from the given javadoc.
      */
     public static JavadocTags getJavadocTags(TextBlock cmt,
             JavadocTagType tagType)
     {
         final String[] text = cmt.getText();
         final List<JavadocTag> tags = Lists.newArrayList();
         final List<InvalidJavadocTag> invalidTags = Lists.newArrayList();
         Pattern blockTagPattern =
                 Utils.getPattern("/\\*{2,}\\s*@(\\p{Alpha}+)\\s");
         for (int i = 0; i < text.length; i++) {
             final String s = text[i];
             final Matcher blockTagMatcher = blockTagPattern.matcher(s);
-            if ((tagType.equals(JavadocTagType.ALL) || tagType
-                    .equals(JavadocTagType.BLOCK)) && blockTagMatcher.find())
+            if ((tagType == JavadocTagType.ALL || tagType == JavadocTagType.BLOCK)
+                    && blockTagMatcher.find())
             {
                 final String tagName = blockTagMatcher.group(1);
                 String content = s.substring(blockTagMatcher.end(1));
                 if (content.endsWith("*/")) {
                     content = content.substring(0, content.length() - 2);
                 }
                 final int line = cmt.getStartLineNo() + i;
                 int col = blockTagMatcher.start(1) - 1;
                 if (i == 0) {
                     col += cmt.getStartColNo();
                 }
                 if (JavadocTagInfo.isValidName(tagName)) {
                     tags.add(
                             new JavadocTag(line, col, tagName, content.trim()));
                 }
                 else {
                     invalidTags.add(new InvalidJavadocTag(line, col, tagName));
                 }
             }
             // No block tag, so look for inline validTags
-            else if (tagType.equals(JavadocTagType.ALL)
-                    || tagType.equals(JavadocTagType.INLINE))
+            else if (tagType == JavadocTagType.ALL || tagType == JavadocTagType.INLINE)
             {
                 // Match Javadoc text after comment characters
                 final Pattern commentPattern =
                         Utils.getPattern("^\\s*(?:/\\*{2,}|\\*+)\\s*(.*)");
                 final Matcher commentMatcher = commentPattern.matcher(s);
                 final String commentContents;
                 final int commentOffset; // offset including comment characters
                 if (!commentMatcher.find()) {
                     commentContents = s; // No leading asterisks, still valid
                     commentOffset = 0;
                 }
                 else {
                     commentContents = commentMatcher.group(1);
                     commentOffset = commentMatcher.start(1) - 1;
                 }
                 final Pattern tagPattern =
                         Utils.getPattern(".*?\\{@(\\p{Alpha}+)\\s+(.*?)\\}");
                 final Matcher tagMatcher = tagPattern.matcher(commentContents);
                 while (tagMatcher.find()) {
                     if (tagMatcher.groupCount() == 2) {
                         final String tagName = tagMatcher.group(1);
                         final String tagValue = tagMatcher.group(2).trim();
                         final int line = cmt.getStartLineNo() + i;
                         int col = commentOffset + (tagMatcher.start(1) - 1);
                         if (i == 0) {
                             col += cmt.getStartColNo();
                         }
                         if (JavadocTagInfo.isValidName(tagName)) {
                             tags.add(new JavadocTag(line, col, tagName,
                                     tagValue));
                         }
                         else {
                             invalidTags.add(new InvalidJavadocTag(line, col,
                                     tagName));
                         }
                     }
                     // else Error: Unexpected match count for inline Javadoc
                     // tag!
                 }
             }
             blockTagPattern =
                     Utils.getPattern("^\\s*\\**\\s*@(\\p{Alpha}+)\\s");
         }
         return new JavadocTags(tags, invalidTags);
     }
 
     /**
      * The type of Javadoc tag we want returned.
      */
     public enum JavadocTagType
