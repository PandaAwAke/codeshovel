diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtils.java
index aad1d5659..d9fd5a64a 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtils.java
@@ -144,76 +144,68 @@ public final class TokenUtils {
     public static int getTokenId(String name) {
         final Integer id = TOKEN_NAME_TO_VALUE.get(name);
         if (id == null) {
             throw new IllegalArgumentException(TOKEN_NAME_EXCEPTION_PREFIX + name);
         }
         return id;
     }
 
     /**
      * Returns the short description of a token for a given name.
      * @param name the name of the token ID to get
      * @return a short description
      */
     public static String getShortDescription(String name) {
         if (!TOKEN_NAME_TO_VALUE.containsKey(name)) {
             throw new IllegalArgumentException(TOKEN_NAME_EXCEPTION_PREFIX + name);
         }
 
         final String tokenTypes =
             "com.puppycrawl.tools.checkstyle.api.tokentypes";
         final ResourceBundle bundle = ResourceBundle.getBundle(tokenTypes, Locale.ROOT);
         return bundle.getString(name);
     }
 
     /**
      * Is argument comment-related type (SINGLE_LINE_COMMENT,
      * BLOCK_COMMENT_BEGIN, BLOCK_COMMENT_END, COMMENT_CONTENT).
      * @param type
      *        token type.
      * @return true if type is comment-related type.
      */
     public static boolean isCommentType(int type) {
         return type == TokenTypes.SINGLE_LINE_COMMENT
                 || type == TokenTypes.BLOCK_COMMENT_BEGIN
                 || type == TokenTypes.BLOCK_COMMENT_END
                 || type == TokenTypes.COMMENT_CONTENT;
     }
 
     /**
      * Is argument comment-related type name (SINGLE_LINE_COMMENT,
      * BLOCK_COMMENT_BEGIN, BLOCK_COMMENT_END, COMMENT_CONTENT).
      * @param type
      *        token type name.
      * @return true if type is comment-related type name.
      */
     public static boolean isCommentType(String type) {
         return isCommentType(getTokenId(type));
     }
 
     /**
-     * Finds the first node {@link Optional} of {@link DetailAST} which matches the predicate.
+     * Finds the first {@link Optional} child token of {@link DetailAST} root node
+     * which matches the given predicate.
      * @param root root node.
      * @param predicate predicate.
      * @return {@link Optional} of {@link DetailAST} node which matches the predicate.
      */
     public static Optional<DetailAST> findFirstTokenByPredicate(DetailAST root,
                                                                 Predicate<DetailAST> predicate) {
         Optional<DetailAST> result = Optional.empty();
-        DetailAST rootNode = root;
-        while (rootNode != null) {
-            DetailAST toVisit = rootNode.getFirstChild();
-            if (predicate.test(toVisit)) {
-                result = Optional.of(toVisit);
+        for (DetailAST ast = root.getFirstChild(); ast != null; ast = ast.getNextSibling()) {
+            if (predicate.test(ast)) {
+                result = Optional.of(ast);
                 break;
             }
-            while (rootNode != null && toVisit == null) {
-                toVisit = rootNode.getNextSibling();
-                if (toVisit == null) {
-                    rootNode = rootNode.getParent();
-                }
-            }
-            rootNode = toVisit;
         }
         return result;
     }
 }
