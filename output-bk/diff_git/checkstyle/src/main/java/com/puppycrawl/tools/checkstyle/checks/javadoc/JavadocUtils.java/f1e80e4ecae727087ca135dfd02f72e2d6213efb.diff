diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java
index b3f82d92d..3606618c8 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java
@@ -6,111 +6,111 @@
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks.javadoc;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
 import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Lists;
 import com.puppycrawl.tools.checkstyle.Utils;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.DetailNode;
 import com.puppycrawl.tools.checkstyle.api.JavadocTagInfo;
 import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;
 import com.puppycrawl.tools.checkstyle.api.TextBlock;
 
 /**
  * Contains utility methods for working with Javadoc.
  * @author Lyle Hanson
  */
 public final class JavadocUtils {
     /** maps from a token name to value */
     private static final ImmutableMap<String, Integer> TOKEN_NAME_TO_VALUE;
     /** maps from a token value to name */
     private static final String[] TOKEN_VALUE_TO_NAME;
 
     // Using reflection gets all token names and values from JavadocTokenTypes class
     // and saves to TOKEN_NAME_TO_VALUE and TOKEN_VALUE_TO_NAME collections.
     static {
         final ImmutableMap.Builder<String, Integer> builder = ImmutableMap.builder();
 
         final Field[] fields = JavadocTokenTypes.class.getDeclaredFields();
 
         String[] tempTokenValueToName = new String[0];
 
-        for (final Field f : fields) {
+        for (final Field field : fields) {
 
             // Only process public int fields.
-            if (!Modifier.isPublic(f.getModifiers())
-                    || f.getType() != Integer.TYPE) {
+            if (!Modifier.isPublic(field.getModifiers())
+                    || field.getType() != Integer.TYPE) {
                 continue;
             }
 
-            final String name = f.getName();
+            final String name = field.getName();
 
-            final int tokenValue = Utils.getIntFromField(f, name);
+            final int tokenValue = Utils.getIntFromField(field, name);
             builder.put(name, tokenValue);
             if (tokenValue > tempTokenValueToName.length - 1) {
                 final String[] temp = new String[tokenValue + 1];
                 System.arraycopy(tempTokenValueToName, 0, temp, 0, tempTokenValueToName.length);
                 tempTokenValueToName = temp;
             }
             if (tokenValue == -1) {
                 tempTokenValueToName[0] = name;
             }
             else {
                 tempTokenValueToName[tokenValue] = name;
             }
         }
 
         TOKEN_NAME_TO_VALUE = builder.build();
         TOKEN_VALUE_TO_NAME = tempTokenValueToName;
     }
 
     /** prevent instantiation */
     private JavadocUtils() {
     }
 
     /**
      * Gets validTags from a given piece of Javadoc.
      * @param cmt
      *        the Javadoc comment to process.
      * @param tagType
      *        the type of validTags we're interested in
      * @return all standalone validTags from the given javadoc.
      */
     public static JavadocTags getJavadocTags(TextBlock cmt,
             JavadocTagType tagType) {
         final String[] text = cmt.getText();
         final List<JavadocTag> tags = Lists.newArrayList();
         final List<InvalidJavadocTag> invalidTags = Lists.newArrayList();
         Pattern blockTagPattern = Pattern.compile("/\\*{2,}\\s*@(\\p{Alpha}+)\\s");
         for (int i = 0; i < text.length; i++) {
             final String s = text[i];
             final Matcher blockTagMatcher = blockTagPattern.matcher(s);
             if ((tagType == JavadocTagType.ALL || tagType == JavadocTagType.BLOCK)
                     && blockTagMatcher.find()) {
                 final String tagName = blockTagMatcher.group(1);
                 String content = s.substring(blockTagMatcher.end(1));
                 if (content.endsWith("*/")) {
                     content = content.substring(0, content.length() - 2);
                 }
                 final int line = cmt.getStartLineNo() + i;
                 int col = blockTagMatcher.start(1) - 1;
                 if (i == 0) {
                     col += cmt.getStartColNo();
@@ -184,113 +184,115 @@ public final class JavadocUtils {
      * @return true if commentContent starts with '*' javadoc comment
      *         identifier.
      */
     public static boolean isJavadocComment(String commentContent) {
         boolean result = false;
 
         if (!commentContent.isEmpty()) {
             final char docCommentIdentificator = commentContent.charAt(0);
             result = docCommentIdentificator == '*';
         }
 
         return result;
     }
 
     /**
      * Checks block comment content starts with '*' javadoc comment identifier.
      * @param blockCommentBegin
      *        block comment AST
      * @return true if block comment content starts with '*' javadoc comment
      *         identifier.
      */
     public static boolean isJavadocComment(DetailAST blockCommentBegin) {
         final String commentContent = getBlockCommentContent(blockCommentBegin);
         return isJavadocComment(commentContent);
     }
 
     /**
      * Gets content of block comment.
      * @param blockCommentBegin
      *        block comment AST.
      * @return content of block comment.
      */
     public static String getBlockCommentContent(DetailAST blockCommentBegin) {
         final DetailAST commentContent = blockCommentBegin.getFirstChild();
         return commentContent.getText();
     }
 
     /**
      * Get content of Javadoc comment.
      * @param javdocCommentBegin
      *        Javadoc comment AST
      * @return content of Javadoc comment.
      */
     public static String getJavadocCommentContent(DetailAST javdocCommentBegin) {
         final DetailAST commentContent = javdocCommentBegin.getFirstChild();
         return commentContent.getText().substring(1);
     }
 
     /**
      * Returns the first child token that has a specified type.
-     * @param node
+     * @param detailNode
      *        Javadoc AST node
      * @param type
      *        the token type to match
      * @return the matching token, or null if no match
      */
-    public static DetailNode findFirstToken(DetailNode node, int type) {
+    public static DetailNode findFirstToken(DetailNode detailNode, int type) {
         DetailNode retVal = null;
-        for (DetailNode i = getFirstChild(node); i != null; i = getNextSibling(i)) {
-            if (i.getType() == type) {
-                retVal = i;
+        DetailNode node = getFirstChild(detailNode);
+        while (node != null) {
+            if (node.getType() == type) {
+                retVal = node;
                 break;
             }
+            node = getNextSibling(node);
         }
         return retVal;
     }
 
     /**
      * Gets first child node of specified node.
      *
      * @param node DetailNode
      * @return first child
      */
     public static DetailNode getFirstChild(DetailNode node) {
         return node.getChildren().length > 0 ? node.getChildren()[0] : null;
     }
 
     /**
      * Checks whether node contains any node of specified type among children on any deep level.
      *
      * @param node DetailNode
      * @param type token type
      * @return true if node contains any node of type type among children on any deep level.
      */
     public static boolean branchContains(DetailNode node, int type) {
         DetailNode curNode = node;
         while (true) {
 
             if (type == curNode.getType()) {
                 return true;
             }
 
             DetailNode toVisit = getFirstChild(curNode);
             while (curNode != null && toVisit == null) {
                 toVisit = getNextSibling(curNode);
                 if (toVisit == null) {
                     curNode = curNode.getParent();
                 }
             }
 
             if (curNode == toVisit) {
                 break;
             }
 
             curNode = toVisit;
         }
 
         return false;
     }
 
     /**
      * Gets next sibling of specified node.
      *
