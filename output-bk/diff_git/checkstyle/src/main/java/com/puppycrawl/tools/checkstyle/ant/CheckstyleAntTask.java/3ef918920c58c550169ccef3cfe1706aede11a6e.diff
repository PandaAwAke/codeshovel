diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
index b22349758..e90695434 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
@@ -3,100 +3,101 @@
 // Copyright (C) 2001-2015 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.ant;
 
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.net.URL;
 import java.util.List;
 import java.util.Map;
 import java.util.Properties;
 import java.util.ResourceBundle;
 
 import org.apache.tools.ant.AntClassLoader;
 import org.apache.tools.ant.BuildException;
 import org.apache.tools.ant.DirectoryScanner;
 import org.apache.tools.ant.Project;
 import org.apache.tools.ant.Task;
 import org.apache.tools.ant.taskdefs.LogOutputStream;
 import org.apache.tools.ant.types.EnumeratedAttribute;
 import org.apache.tools.ant.types.FileSet;
 import org.apache.tools.ant.types.Path;
 import org.apache.tools.ant.types.Reference;
 
 import com.google.common.collect.Lists;
 import com.google.common.io.Closeables;
 import com.puppycrawl.tools.checkstyle.Checker;
 import com.puppycrawl.tools.checkstyle.ConfigurationLoader;
 import com.puppycrawl.tools.checkstyle.DefaultContext;
 import com.puppycrawl.tools.checkstyle.DefaultLogger;
 import com.puppycrawl.tools.checkstyle.PropertiesExpander;
 import com.puppycrawl.tools.checkstyle.XMLLogger;
 import com.puppycrawl.tools.checkstyle.api.AuditListener;
+import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
 import com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter;
 
 /**
  * An implementation of a ANT task for calling checkstyle. See the documentation
  * of the task for usage.
  * @author Oliver Burn
  */
 public class CheckstyleAntTask extends Task {
     /** Poor man's enum for an xml formatter */
     private static final String E_XML = "xml";
     /** Poor man's enum for an plain formatter */
     private static final String E_PLAIN = "plain";
 
     /** Suffix for time string. */
     private static final String TIME_SUFFIX = " ms.";
 
     /** Class path to locate class files */
     private Path classpath;
 
     /** Name of file to check */
     private String fileName;
 
     /** Config file containing configuration */
     private String configLocation;
 
     /** Whether to fail build on violations */
     private boolean failOnViolation = true;
 
     /** Property to set on violations */
     private String failureProperty;
 
     /** Contains the filesets to process */
     private final List<FileSet> fileSets = Lists.newArrayList();
 
     /** Contains the formatters to log to */
     private final List<Formatter> formatters = Lists.newArrayList();
 
     /** Contains the Properties to override */
     private final List<Property> overrideProps = Lists.newArrayList();
 
     /** The name of the properties file */
     private File properties;
 
     /** The maximum number of errors that are tolerated. */
     private int maxErrors;
 
     /** The maximum number of warnings that are tolerated. */
     private int maxWarnings = Integer.MAX_VALUE;
@@ -204,299 +205,299 @@ public class CheckstyleAntTask extends Task {
 
     /** @param file the configuration file to use */
     public void setConfig(File file) {
         setConfigLocation(file.getAbsolutePath());
     }
 
     /** @param url the URL of the configuration to use */
     public void setConfigURL(URL url) {
         setConfigLocation(url.toExternalForm());
     }
 
     /**
      * Sets the location of the configuration.
      * @param location the location, which is either a
      */
     private void setConfigLocation(String location) {
         if (configLocation != null) {
             throw new BuildException("Attributes 'config' and 'configURL' "
                     + "must not be set at the same time");
         }
         configLocation = location;
     }
 
     /** @param omit whether to omit ignored modules */
     public void setOmitIgnoredModules(boolean omit) {
         omitIgnoredModules = omit;
     }
 
     ////////////////////////////////////////////////////////////////////////////
     // Setters for Checker configuration attributes
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Sets a properties file for use instead
      * of individually setting them.
      * @param props the properties File to use
      */
     public void setProperties(File props) {
         properties = props;
     }
 
     ////////////////////////////////////////////////////////////////////////////
     // The doers
     ////////////////////////////////////////////////////////////////////////////
 
     @Override
     public void execute() {
         final long startTime = System.currentTimeMillis();
 
         try {
-            realExecute();
+            // output version info in debug mode
+            final ResourceBundle compilationProperties = ResourceBundle
+                    .getBundle("checkstylecompilation");
+            final String version = compilationProperties
+                    .getString("checkstyle.compile.version");
+            final String compileTimestamp = compilationProperties
+                    .getString("checkstyle.compile.timestamp");
+            log("checkstyle version " + version, Project.MSG_VERBOSE);
+            log("compiled on " + compileTimestamp, Project.MSG_VERBOSE);
+
+            // Check for no arguments
+            if (fileName == null && fileSets.isEmpty()) {
+                throw new BuildException(
+                        "Must specify at least one of 'file' or nested 'fileset'.",
+                        getLocation());
+            }
+            if (configLocation == null) {
+                throw new BuildException("Must specify 'config'.", getLocation());
+            }
+            realExecute(version);
         }
         finally {
             final long endTime = System.currentTimeMillis();
             log("Total execution took " + (endTime - startTime) + TIME_SUFFIX,
                 Project.MSG_VERBOSE);
         }
     }
 
     /**
      * Helper implementation to perform execution.
+     * @param checkstyleVersion Checkstyle compile version.
      */
-    private void realExecute() {
-        // output version info in debug mode
-        final ResourceBundle compilationProperties = ResourceBundle
-                .getBundle("checkstylecompilation");
-        final String version = compilationProperties
-                .getString("checkstyle.compile.version");
-        final String compileTimestamp = compilationProperties
-                .getString("checkstyle.compile.timestamp");
-        log("checkstyle version " + version, Project.MSG_VERBOSE);
-        log("compiled on " + compileTimestamp, Project.MSG_VERBOSE);
-
-        // Check for no arguments
-        if (fileName == null && fileSets.isEmpty()) {
-            throw new BuildException(
-                    "Must specify at least one of 'file' or nested 'fileset'.",
-                    getLocation());
-        }
-
-        if (configLocation == null) {
-            throw new BuildException("Must specify 'config'.", getLocation());
-        }
-
+    private void realExecute(String checkstyleVersion) {
         // Create the checker
         Checker checker = null;
         try {
             checker = createChecker();
 
+            // setup the listeners
+            final AuditListener[] listeners = getListeners();
+            for (AuditListener element : listeners) {
+                checker.addListener(element);
+            }
             final SeverityLevelCounter warningCounter =
                 new SeverityLevelCounter(SeverityLevel.WARNING);
             checker.addListener(warningCounter);
 
-            processFiles(checker, warningCounter, version);
+            processFiles(checker, warningCounter, checkstyleVersion);
         }
         finally {
             if (checker != null) {
                 checker.destroy();
             }
         }
     }
 
     /**
      * Scans and processes files by means given checker.
      * @param checker Checker to process files
      * @param warningCounter Checker's counter of warnings
      * @param checkstyleVersion Checkstyle compile version
      */
     private void processFiles(Checker checker, final SeverityLevelCounter warningCounter,
             final String checkstyleVersion) {
         final long startTime = System.currentTimeMillis();
         final List<File> files = scanFileSets();
         final long endTime = System.currentTimeMillis();
         log("To locate the files took " + (endTime - startTime) + TIME_SUFFIX,
             Project.MSG_VERBOSE);
 
         log("Running Checkstyle " + checkstyleVersion + " on " + files.size()
                 + " files", Project.MSG_INFO);
         log("Using configuration " + configLocation, Project.MSG_VERBOSE);
 
         final long processingStartTime = System.currentTimeMillis();
         final int numErrs = checker.process(files);
         final long processingEndTime = System.currentTimeMillis();
         log("To process the files took " + (processingEndTime - processingStartTime) + TIME_SUFFIX,
             Project.MSG_VERBOSE);
         final int numWarnings = warningCounter.getCount();
         final boolean ok = numErrs <= maxErrors
                 && numWarnings <= maxWarnings;
 
         // Handle the return status
         if (!ok) {
             final String failureMsg =
                     "Got " + numErrs + " errors and " + numWarnings
                             + " warnings.";
             if (failureProperty != null) {
                 getProject().setProperty(failureProperty, failureMsg);
             }
 
             if (failOnViolation) {
                 throw new BuildException(failureMsg, getLocation());
             }
         }
     }
 
     /**
      * Creates new instance of {@code Checker}.
      * @return new instance of {@code Checker}
      */
     private Checker createChecker() {
         Checker checker;
         try {
             final Properties props = createOverridingProperties();
             final Configuration config =
                 ConfigurationLoader.loadConfiguration(
                     configLocation,
                     new PropertiesExpander(props),
                     omitIgnoredModules);
 
             final DefaultContext context = new DefaultContext();
             final ClassLoader loader = new AntClassLoader(getProject(),
                     classpath);
             context.add("classloader", loader);
 
             final ClassLoader moduleClassLoader =
                 Checker.class.getClassLoader();
             context.add("moduleClassLoader", moduleClassLoader);
 
             checker = new Checker();
-
             checker.contextualize(context);
             checker.configure(config);
-
-            // setup the listeners
-            final AuditListener[] listeners = getListeners();
-            for (AuditListener element : listeners) {
-                checker.addListener(element);
-            }
         }
-        catch (final Exception e) {
-            throw new BuildException("Unable to create a Checker: "
-                    + e.getMessage(), e);
+        catch (final CheckstyleException e) {
+            throw new BuildException(String.format("Unable to create a Checker: "
+                    + "configLocation {%s}, classpath {%s}.", configLocation, classpath), e);
         }
-
         return checker;
     }
 
     /**
      * Create the Properties object based on the arguments specified
      * to the ANT task.
      * @return the properties for property expansion expansion
      * @throws BuildException if an error occurs
      */
     private Properties createOverridingProperties() {
         final Properties retVal = new Properties();
 
         // Load the properties file if specified
         if (properties != null) {
             FileInputStream inStream = null;
             try {
                 inStream = new FileInputStream(properties);
                 retVal.load(inStream);
             }
             catch (final IOException e) {
                 throw new BuildException("Error loading Properties file '"
                         + properties + "'", e, getLocation());
             }
             finally {
                 Closeables.closeQuietly(inStream);
             }
         }
 
         // override with Ant properties like ${basedir}
         final Map<String, Object> antProps = getProject().getProperties();
         for (Map.Entry<String, Object> entry : antProps.entrySet()) {
             final String value = String.valueOf(entry.getValue());
             retVal.setProperty(entry.getKey(), value);
         }
 
         // override with properties specified in subelements
         for (Property p : overrideProps) {
             retVal.setProperty(p.getKey(), p.getValue());
         }
 
         return retVal;
     }
 
     /**
      * Return the list of listeners set in this task.
      * @return the list of listeners.
-     * @throws IOException if an error occurs
      */
-    private AuditListener[] getListeners() throws IOException {
+    private AuditListener[] getListeners() {
         final int formatterCount = Math.max(1, formatters.size());
 
         final AuditListener[] listeners = new AuditListener[formatterCount];
 
         // formatters
-        if (formatters.isEmpty()) {
-            final OutputStream debug = new LogOutputStream(this,
-                    Project.MSG_DEBUG);
-            final OutputStream err = new LogOutputStream(this, Project.MSG_ERR);
-            listeners[0] = new DefaultLogger(debug, true, err, true);
-        }
-        else {
-            for (int i = 0; i < formatterCount; i++) {
-                final Formatter formatter = formatters.get(i);
-                listeners[i] = formatter.createListener(this);
+        try {
+            if (formatters.isEmpty()) {
+                final OutputStream debug = new LogOutputStream(this, Project.MSG_DEBUG);
+                final OutputStream err = new LogOutputStream(this, Project.MSG_ERR);
+                listeners[0] = new DefaultLogger(debug, true, err, true);
+            }
+            else {
+                for (int i = 0; i < formatterCount; i++) {
+                    final Formatter formatter = formatters.get(i);
+                    listeners[i] = formatter.createListener(this);
+                }
             }
         }
+        catch (IOException e) {
+            throw new BuildException(String.format("Unable to create listeners: "
+                    + "formatters {%s}.", formatters), e);
+        }
         return listeners;
     }
 
     /**
      * Returns the list of files (full path name) to process.
      * @return the list of files included via the filesets.
      */
     protected List<File> scanFileSets() {
         final List<File> list = Lists.newArrayList();
         if (fileName != null) {
             // oops we've got an additional one to process, don't
             // forget it. No sweat, it's fully resolved via the setter.
             log("Adding standalone file for audit", Project.MSG_VERBOSE);
             list.add(new File(fileName));
         }
         for (int i = 0; i < fileSets.size(); i++) {
             final FileSet fs = fileSets.get(i);
             final DirectoryScanner ds = fs.getDirectoryScanner(getProject());
             ds.scan();
 
             final String[] names = ds.getIncludedFiles();
             log(i + ") Adding " + names.length + " files from directory "
                     + ds.getBasedir(), Project.MSG_VERBOSE);
 
             for (String element : names) {
                 final String pathname = ds.getBasedir() + File.separator
                         + element;
                 list.add(new File(pathname));
             }
         }
 
         return list;
     }
 
     /**
      * Poor mans enumeration for the formatter types.
      * @author Oliver Burn
      */
     public static class FormatterType extends EnumeratedAttribute {
         /** My possible values */
         private static final String[] VALUES = {E_XML, E_PLAIN};
 
         @Override
         public String[] getValues() {
             return VALUES.clone();
         }
     }
 
     /**
      * Details about a formatter to be used.
