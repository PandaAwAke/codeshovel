diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheck.java
index 2372b13b5..4d023e625 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheck.java
@@ -40,57 +40,57 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  * </code></pre>
  *
  * <p>
  * To configure the check to force no line-wrapping
  * in package and import statements (default values):
  * </p>
  * <pre class="body">
  * &lt;module name=&quot;NoLineWrap&quot;/&gt;
  * </pre>
  *
  * <p>
  * To configure the check to force no line-wrapping only
  * in import statements:
  * </p>
  * <pre class="body">
  * &lt;module name=&quot;NoLineWrap&quot;&gt;
  *     &lt;property name="tokens" value="IMPORT"&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * Examples of not line-wrapped statements (good case):
  * <pre><code> import com.puppycrawl.tools.checkstyle.api.Check;
  * </code></pre>
  *
  * @author maxvetrenko
  */
 public class NoLineWrapCheck extends Check
 {
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.PACKAGE_DEF, TokenTypes.IMPORT};
     }
 
     @Override
     public int[] getAcceptableTokens()
     {
         return new int[] {
             TokenTypes.IMPORT,
             TokenTypes.PACKAGE_DEF,
             TokenTypes.CLASS_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.CTOR_DEF,
             TokenTypes.ENUM_DEF,
             TokenTypes.INTERFACE_DEF,
         };
     }
 
     @Override
-    public void visitToken(DetailAST aAST)
+    public void visitToken(DetailAST ast)
     {
-        if (aAST.getLineNo() != aAST.getLastChild().getLineNo()) {
-            log(aAST.getLineNo(), "no.line.wrap", aAST.getText());
+        if (ast.getLineNo() != ast.getLastChild().getLineNo()) {
+            log(ast.getLineNo(), "no.line.wrap", ast.getText());
         }
     }
 }
