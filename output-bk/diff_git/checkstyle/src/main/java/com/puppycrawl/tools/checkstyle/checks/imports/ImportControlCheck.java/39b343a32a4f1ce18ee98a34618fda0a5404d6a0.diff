diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java
index 59cad1e4f..30e5c42b1 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java
@@ -107,90 +107,87 @@ public class ImportControlCheck extends AbstractCheck implements ExternalResourc
         currentLeaf = null;
     }
 
     @Override
     public void visitToken(final DetailAST ast) {
         if (ast.getType() == TokenTypes.PACKAGE_DEF) {
             final DetailAST nameAST = ast.getLastChild().getPreviousSibling();
             final FullIdent full = FullIdent.createFullIdent(nameAST);
             if (root == null) {
                 log(nameAST, MSG_MISSING_FILE);
             }
             else {
                 inPkg = full.getText();
                 currentLeaf = root.locateFinest(inPkg);
                 if (currentLeaf == null) {
                     log(nameAST, MSG_UNKNOWN_PKG);
                 }
             }
         }
         else if (currentLeaf != null) {
             final FullIdent imp;
             if (ast.getType() == TokenTypes.IMPORT) {
                 imp = FullIdent.createFullIdentBelow(ast);
             }
             else {
                 // know it is a static import
                 imp = FullIdent.createFullIdent(ast
                         .getFirstChild().getNextSibling());
             }
             final AccessResult access = currentLeaf.checkAccess(imp.getText(),
                     inPkg);
             if (access != AccessResult.ALLOWED) {
                 log(ast, MSG_DISALLOWED, imp.getText());
             }
         }
     }
 
     @Override
     public Set<String> getExternalResourceLocations() {
         return ImmutableSet.of(fileLocation);
     }
 
     /**
      * Set the name for the file containing the import control
      * configuration. It will cause the file to be loaded.
      * @param name the name of the file to load.
      * @throws ConversionException on error loading the file.
      */
     public void setFile(final String name) {
         // Handle empty param
-        if (CommonUtils.isBlank(name)) {
-            return;
-        }
-
-        try {
-            root = ImportControlLoader.load(new File(name).toURI());
-            fileLocation = name;
-        }
-        catch (final CheckstyleException ex) {
-            throw new ConversionException(UNABLE_TO_LOAD + name, ex);
+        if (!CommonUtils.isBlank(name)) {
+            try {
+                root = ImportControlLoader.load(new File(name).toURI());
+                fileLocation = name;
+            }
+            catch (final CheckstyleException ex) {
+                throw new ConversionException(UNABLE_TO_LOAD + name, ex);
+            }
         }
     }
 
     /**
      * Set the parameter for the url containing the import control
      * configuration. It will cause the url to be loaded.
      * @param url the url of the file to load.
      * @throws ConversionException on error loading the file.
      */
     public void setUrl(final String url) {
         // Handle empty param
-        if (CommonUtils.isBlank(url)) {
-            return;
-        }
-        final URI uri;
-        try {
-            uri = URI.create(url);
-        }
-        catch (final IllegalArgumentException ex) {
-            throw new ConversionException("Syntax error in url " + url, ex);
-        }
-        try {
-            root = ImportControlLoader.load(uri);
-            fileLocation = url;
-        }
-        catch (final CheckstyleException ex) {
-            throw new ConversionException(UNABLE_TO_LOAD + url, ex);
+        if (!CommonUtils.isBlank(url)) {
+            final URI uri;
+            try {
+                uri = URI.create(url);
+            }
+            catch (final IllegalArgumentException ex) {
+                throw new ConversionException("Syntax error in url " + url, ex);
+            }
+            try {
+                root = ImportControlLoader.load(uri);
+                fileLocation = url;
+            }
+            catch (final CheckstyleException ex) {
+                throw new ConversionException(UNABLE_TO_LOAD + url, ex);
+            }
         }
     }
 }
