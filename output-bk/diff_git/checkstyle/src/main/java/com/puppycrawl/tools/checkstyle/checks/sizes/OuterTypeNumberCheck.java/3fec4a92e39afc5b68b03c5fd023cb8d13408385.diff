diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/OuterTypeNumberCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/OuterTypeNumberCheck.java
index 9fa6b3927..c2457bca9 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/OuterTypeNumberCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/OuterTypeNumberCheck.java
@@ -1,83 +1,83 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2014  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
-// License along with this library; if not, write to the Free Software
+// License tong with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.sizes;
 
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.api.Check;
 
 /**
  * Checks for the number of defined types at the "outer" level.
  * @author oliverb
  */
 public class OuterTypeNumberCheck extends Check
 {
     /** The maximum allowed number of outer types. */
-    private int mMax = 1;
+    private int max = 1;
     /** Tracks the current depth in types. */
-    private int mCurrentDepth;
+    private int currentDepth;
     /** Tracks the number of outer types found. */
-    private int mOuterNum;
+    private int outerNum;
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.CLASS_DEF, TokenTypes.INTERFACE_DEF,
             TokenTypes.ENUM_DEF, TokenTypes.ANNOTATION_DEF, };
     }
 
     @Override
-    public void beginTree(DetailAST aAst)
+    public void beginTree(DetailAST ast)
     {
-        mCurrentDepth = 0;
-        mOuterNum = 0;
+        currentDepth = 0;
+        outerNum = 0;
     }
 
     @Override
-    public void finishTree(DetailAST aAst)
+    public void finishTree(DetailAST ast)
     {
-        if (mMax < mOuterNum) {
-            log(aAst, "maxOuterTypes", mOuterNum, mMax);
+        if (max < outerNum) {
+            log(ast, "maxOuterTypes", outerNum, max);
         }
     }
 
     @Override
-    public void visitToken(DetailAST aAst)
+    public void visitToken(DetailAST ast)
     {
-        if (0 == mCurrentDepth) {
-            mOuterNum++;
+        if (0 == currentDepth) {
+            outerNum++;
         }
-        mCurrentDepth++;
+        currentDepth++;
     }
 
     @Override
-    public void leaveToken(DetailAST aAst)
+    public void leaveToken(DetailAST ast)
     {
-        mCurrentDepth--;
+        currentDepth--;
     }
 
     /**
      * Sets the maximum allowed number of outer types.
-     * @param aTo the new number.
+     * @param to the new number.
      */
-    public void setMax(int aTo)
+    public void setMax(int to)
     {
-        mMax = aTo;
+        max = to;
     }
 }
