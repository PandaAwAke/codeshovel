diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java
index 318a44342..8ea27cf51 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java
@@ -42,102 +42,101 @@ import com.puppycrawl.tools.checkstyle.api.DetailNode;
 import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocLexer;
 import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser;
 import com.puppycrawl.tools.checkstyle.utils.JavadocUtils;
 
 /**
  * Base class for Checks that process Javadoc comments.
  * @author Baratali Izmailov
  */
 public abstract class AbstractJavadocCheck extends Check {
     /**
      * Error message key for common javadoc errors.
      */
     public static final String PARSE_ERROR_MESSAGE_KEY = "javadoc.parse.error";
 
     /**
      * Unrecognized error from antlr parser.
      */
     public static final String UNRECOGNIZED_ANTLR_ERROR_MESSAGE_KEY =
             "javadoc.unrecognized.antlr.error";
     /**
      * Message key of error message. Missed close HTML tag breaks structure
      * of parse tree, so parser stops parsing and generates such error
      * message. This case is special because parser prints error like
      * {@code "no viable alternative at input 'b \n *\n'"} and it is not
      * clear that error is about missed close HTML tag.
      */
     static final String JAVADOC_MISSED_HTML_CLOSE = "javadoc.missed.html.close";
     /**
      * Message key of error message.
      */
     static final String JAVADOC_WRONG_SINGLETON_TAG =
         "javadoc.wrong.singleton.html.tag";
 
     /**
      * Key is "line:column". Value is {@link DetailNode} tree. Map is stored in {@link ThreadLocal}
      * to guarantee basic thread safety and avoid shared, mutable state when not necessary.
      */
     private static final ThreadLocal<Map<String, ParseStatus>> TREE_CACHE =
         new ThreadLocal<Map<String, ParseStatus>>() {
             @Override
             protected Map<String, ParseStatus> initialValue() {
                 return new HashMap<>();
             }
         };
 
     /**
      * Custom error listener.
      */
-    private final DescriptiveErrorListener errorListener =
-            new DescriptiveErrorListener();
+    private DescriptiveErrorListener errorListener;
 
     /**
      * DetailAST node of considered Javadoc comment that is just a block comment
      * in Java language syntax tree.
      */
     private DetailAST blockCommentAst;
 
     /**
      * Returns the default token types a check is interested in.
      * @return the default token types
      * @see JavadocTokenTypes
      */
     public abstract int[] getDefaultJavadocTokens();
 
     /**
      * Called before the starting to process a tree.
      * @param rootAst
      *        the root of the tree
      */
     public void beginJavadocTree(DetailNode rootAst) {
         // No code by default, should be overridden only by demand at subclasses
     }
 
     /**
      * Called after finished processing a tree.
      * @param rootAst
      *        the root of the tree
      */
     public void finishJavadocTree(DetailNode rootAst) {
         // No code by default, should be overridden only by demand at subclasses
     }
 
     /**
      * Called to process a Javadoc token.
      * @param ast
      *        the token to process
      */
     public abstract void visitJavadocToken(DetailNode ast);
 
     /**
      * Called after all the child nodes have been process.
      * @param ast
      *        the token leaving
      */
     public void leaveJavadocToken(DetailNode ast) {
         // No code by default, should be overridden only by demand at subclasses
     }
 
     /**
      * Defined final to not allow JavadocChecks to change default tokens.
@@ -169,100 +168,105 @@ public abstract class AbstractJavadocCheck extends Check {
 
     @Override
     public final void visitToken(DetailAST blockCommentNode) {
         if (JavadocUtils.isJavadocComment(blockCommentNode)) {
             // store as field, to share with child Checks
             blockCommentAst = blockCommentNode;
 
             final String treeCacheKey = blockCommentNode.getLineNo() + ":"
                     + blockCommentNode.getColumnNo();
 
             ParseStatus ps;
 
             if (TREE_CACHE.get().containsKey(treeCacheKey)) {
                 ps = TREE_CACHE.get().get(treeCacheKey);
             }
             else {
                 ps = parseJavadocAsDetailNode(blockCommentNode);
                 TREE_CACHE.get().put(treeCacheKey, ps);
             }
 
             if (ps.getParseErrorMessage() == null) {
                 processTree(ps.getTree());
             }
             else {
                 final ParseErrorMessage parseErrorMessage = ps.getParseErrorMessage();
                 log(parseErrorMessage.getLineNumber(),
                         parseErrorMessage.getMessageKey(),
                         parseErrorMessage.getMessageArguments());
             }
         }
 
     }
 
     /**
      * Getter for block comment in Java language syntax tree.
      * @return A block comment in the syntax tree.
      */
     protected DetailAST getBlockCommentAst() {
         return blockCommentAst;
     }
 
     /**
      * Parses Javadoc comment as DetailNode tree.
      * @param javadocCommentAst
      *        DetailAST of Javadoc comment
      * @return DetailNode tree of Javadoc comment
      */
     private ParseStatus parseJavadocAsDetailNode(DetailAST javadocCommentAst) {
         final String javadocComment = JavadocUtils.getJavadocCommentContent(javadocCommentAst);
 
+        // Use a new error listener each time to be able to use
+        // one check instance for multiple files to be checked
+        // without getting side effects.
+        errorListener = new DescriptiveErrorListener();
+
         // Log messages should have line number in scope of file,
         // not in scope of Javadoc comment.
         // Offset is line number of beginning of Javadoc comment.
         errorListener.setOffset(javadocCommentAst.getLineNo() - 1);
 
         final ParseStatus result = new ParseStatus();
 
         try {
             final ParseTree parseTree = parseJavadocAsParseTree(javadocComment);
 
             final DetailNode tree = convertParseTreeToDetailNode(parseTree);
             result.setTree(tree);
         }
         catch (ParseCancellationException e) {
             // If syntax error occurs then message is printed by error listener
             // and parser throws this runtime exception to stop parsing.
             // Just stop processing current Javadoc comment.
             ParseErrorMessage parseErrorMessage = errorListener.getErrorMessage();
 
             // There are cases when antlr error listener does not handle syntax error
             if (parseErrorMessage == null) {
                 parseErrorMessage = new ParseErrorMessage(javadocCommentAst.getLineNo(),
                         UNRECOGNIZED_ANTLR_ERROR_MESSAGE_KEY,
                         javadocCommentAst.getColumnNo(), e.getMessage());
             }
 
             result.setParseErrorMessage(parseErrorMessage);
         }
 
         return result;
     }
 
     /**
      * Converts ParseTree (that is generated by ANTLRv4) to DetailNode tree.
      *
      * @param parseTreeNode root node of ParseTree
      * @return root of DetailNode tree
      */
     private DetailNode convertParseTreeToDetailNode(ParseTree parseTreeNode) {
         final JavadocNodeImpl rootJavadocNode = createRootJavadocNode(parseTreeNode);
 
         JavadocNodeImpl currentJavadocParent = rootJavadocNode;
         ParseTree parseTreeParent = parseTreeNode;
 
         while (currentJavadocParent != null) {
             final JavadocNodeImpl[] children =
                     (JavadocNodeImpl[]) currentJavadocParent.getChildren();
 
             insertChildrenNodes(children, parseTreeParent);
 
