diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java
index afdede660..bac22a6e5 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java
@@ -56,100 +56,102 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  * </p>
  * <pre>
  * &lt;module name="NoWhitespaceAfter"&gt;
  *     &lt;property name="tokens" value="DOT"/&gt;
  *     &lt;property name="allowLineBreaks" value="false"/&gt;
  * &lt;/module&gt;
  * </pre>
  * @author Rick Giles
  * @author lkuehne
  * @author <a href="mailto:nesterenko-aleksey@list.ru">Aleksey Nesterenko</a>
  */
 public class NoWhitespaceAfterCheck extends Check {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "ws.followed";
 
     /** Whether whitespace is allowed if the AST is at a linebreak. */
     private boolean allowLineBreaks = true;
 
     @Override
     public int[] getDefaultTokens() {
         return new int[] {
             TokenTypes.ARRAY_INIT,
             TokenTypes.INC,
             TokenTypes.DEC,
             TokenTypes.UNARY_MINUS,
             TokenTypes.UNARY_PLUS,
             TokenTypes.BNOT,
             TokenTypes.LNOT,
             TokenTypes.DOT,
             TokenTypes.ARRAY_DECLARATOR,
         };
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.ARRAY_INIT,
             TokenTypes.INC,
             TokenTypes.DEC,
             TokenTypes.UNARY_MINUS,
             TokenTypes.UNARY_PLUS,
             TokenTypes.BNOT,
             TokenTypes.LNOT,
             TokenTypes.DOT,
             TokenTypes.TYPECAST,
             TokenTypes.ARRAY_DECLARATOR,
+            TokenTypes.GENERIC_START,
+            TokenTypes.GENERIC_END,
         };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return ArrayUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final DetailAST astNode = getPreceded(ast);
         final String line = getLine(ast.getLineNo() - 1);
         final int after = getPositionAfter(astNode);
 
         if ((after >= line.length() || Character.isWhitespace(line.charAt(after)))
                  && hasRedundantWhitespace(line, after)) {
             log(astNode.getLineNo(), after,
                 MSG_KEY, astNode.getText());
         }
     }
 
     /**
      * Gets possible place where redundant whitespace could be.
      * @param ast Node representing token.
      * @return possible place of redundant whitespace.
      */
     private static DetailAST getPreceded(DetailAST ast) {
         DetailAST preceded;
 
         switch (ast.getType()) {
             case TokenTypes.TYPECAST:
                 preceded = ast.findFirstToken(TokenTypes.RPAREN);
                 break;
             case TokenTypes.ARRAY_DECLARATOR:
                 preceded = getArrayTypeOrIdentifier(ast);
                 break;
             default:
                 preceded = ast;
         }
         return preceded;
     }
 
     /**
      * Gets position after token (place of possible redundant whitespace).
      * @param ast Node representing token.
      * @return position after token.
      */
     private static int getPositionAfter(DetailAST ast) {
         int after;
         //If target of possible redundant whitespace is in method definition
