diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtils.java
index 06e698069..0ff5936e2 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtils.java
@@ -68,110 +68,110 @@ public final class TokenUtils {
                 final String[] temp = new String[tokenValue + 1];
                 System.arraycopy(tempTokenValueToName, 0,
                         temp, 0, tempTokenValueToName.length);
                 tempTokenValueToName = temp;
             }
             tempTokenValueToName[tokenValue] = name;
         }
 
         TOKEN_NAME_TO_VALUE = builder.build();
         TOKEN_VALUE_TO_NAME = tempTokenValueToName;
         final ImmutableCollection<Integer> values = TOKEN_NAME_TO_VALUE.values();
         final Integer[] ids = values.toArray(new Integer[values.size()]);
         TOKEN_IDS = ArrayUtils.toPrimitive(ids);
     }
 
     /** Stop instances being created. **/
     private TokenUtils() {
     }
 
     /**
      * Gets the value of a static or instance field of type int or of another primitive type
      * convertible to type int via a widening conversion. Does not throw any checked exceptions.
      * @param field from which the int should be extracted
      * @param object to extract the int value from
      * @return the value of the field converted to type int
      * @throws IllegalStateException if this Field object is enforcing Java language access control
      *         and the underlying field is inaccessible
      * @see Field#getInt(Object)
      */
     public static int getIntFromField(Field field, Object object) {
         try {
             return field.getInt(object);
         }
         catch (final IllegalAccessException exception) {
             throw new IllegalStateException(exception);
         }
     }
 
     /**
      * Get all token IDs that are available in TokenTypes.
      * @return array of token IDs
      */
     public static int[] getAllTokenIds() {
         final int[] safeCopy = new int[TOKEN_IDS.length];
         System.arraycopy(TOKEN_IDS, 0, safeCopy, 0, TOKEN_IDS.length);
         return safeCopy;
     }
 
     /**
      * Returns the name of a token for a given ID.
-     * @param iD the ID of the token name to get
+     * @param id the ID of the token name to get
      * @return a token name
      */
-    public static String getTokenName(int iD) {
-        if (iD > TOKEN_VALUE_TO_NAME.length - 1) {
-            throw new IllegalArgumentException(TOKEN_ID_EXCEPTION_PREFIX + iD);
+    public static String getTokenName(int id) {
+        if (id > TOKEN_VALUE_TO_NAME.length - 1) {
+            throw new IllegalArgumentException(TOKEN_ID_EXCEPTION_PREFIX + id);
         }
-        final String name = TOKEN_VALUE_TO_NAME[iD];
+        final String name = TOKEN_VALUE_TO_NAME[id];
         if (name == null) {
-            throw new IllegalArgumentException(TOKEN_ID_EXCEPTION_PREFIX + iD);
+            throw new IllegalArgumentException(TOKEN_ID_EXCEPTION_PREFIX + id);
         }
         return name;
     }
 
     /**
      * Returns the ID of a token for a given name.
      * @param name the name of the token ID to get
      * @return a token ID
      */
     public static int getTokenId(String name) {
         final Integer id = TOKEN_NAME_TO_VALUE.get(name);
         if (id == null) {
             throw new IllegalArgumentException(TOKEN_NAME_EXCEPTION_PREFIX + name);
         }
         return id;
     }
 
     /**
      * Returns the short description of a token for a given name.
      * @param name the name of the token ID to get
      * @return a short description
      */
     public static String getShortDescription(String name) {
         if (!TOKEN_NAME_TO_VALUE.containsKey(name)) {
             throw new IllegalArgumentException(TOKEN_NAME_EXCEPTION_PREFIX + name);
         }
 
         final String tokenTypes =
             "com.puppycrawl.tools.checkstyle.api.tokentypes";
         final ResourceBundle bundle = ResourceBundle.getBundle(tokenTypes);
         return bundle.getString(name);
     }
 
     /**
      * Is argument comment-related type (SINGLE_LINE_COMMENT,
      * BLOCK_COMMENT_BEGIN, BLOCK_COMMENT_END, COMMENT_CONTENT).
      * @param type
      *        token type.
      * @return true if type is comment-related type.
      */
     public static boolean isCommentType(int type) {
         return type == TokenTypes.SINGLE_LINE_COMMENT
                 || type == TokenTypes.BLOCK_COMMENT_BEGIN
                 || type == TokenTypes.BLOCK_COMMENT_END
                 || type == TokenTypes.COMMENT_CONTENT;
     }
 
     /**
      * Is argument comment-related type name (SINGLE_LINE_COMMENT,
      * BLOCK_COMMENT_BEGIN, BLOCK_COMMENT_END, COMMENT_CONTENT).
