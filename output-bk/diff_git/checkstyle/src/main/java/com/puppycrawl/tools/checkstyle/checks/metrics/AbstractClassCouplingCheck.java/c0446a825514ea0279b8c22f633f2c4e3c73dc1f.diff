diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java
index 9a006f524..2cef1a102 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java
@@ -59,101 +59,101 @@ public abstract class AbstractClassCouplingCheck extends Check
                 .add("List", "ArrayList", "Deque", "Queue", "LinkedList")
                 .add("Set", "HashSet", "SortedSet", "TreeSet")
                 .add("Map", "HashMap", "SortedMap", "TreeMap")
                 .build();
     /** User-configured class names to ignore. */
     private Set<String> excludedClasses = DEFAULT_EXCLUDED_CLASSES;
     /** Allowed complexity. */
     private int max;
     /** package of the file we check. */
     private String packageName;
 
     /** Stack of contexts. */
     private final Deque<Context> contextStack = new ArrayDeque<>();
     /** Current context. */
     private Context context = new Context("", 0, 0);
 
     /**
      * Creates new instance of the check.
      * @param defaultMax default value for allowed complexity.
      */
     protected AbstractClassCouplingCheck(int defaultMax)
     {
         setMax(defaultMax);
     }
 
     @Override
     public final int[] getDefaultTokens()
     {
         return getRequiredTokens();
     }
 
     /** @return allowed complexity. */
     public final int getMax()
     {
         return max;
     }
 
     /**
      * Sets maximum allowed complexity.
      * @param max allowed complexity.
      */
     public final void setMax(int max)
     {
         this.max = max;
     }
 
     /**
      * Sets user-excluded classes to ignore.
      * @param excludedClasses the list of classes to ignore.
      */
-    public final void setExcludedClasses(String[] excludedClasses)
+    public final void setExcludedClasses(String... excludedClasses)
     {
         this.excludedClasses = ImmutableSet.copyOf(excludedClasses);
     }
 
     @Override
     public final void beginTree(DetailAST ast)
     {
         packageName = "";
     }
 
     /** @return message key we use for log violations. */
     protected abstract String getLogMessageId();
 
     @Override
     public void visitToken(DetailAST ast)
     {
         switch (ast.getType()) {
             case TokenTypes.PACKAGE_DEF:
                 visitPackageDef(ast);
                 break;
             case TokenTypes.CLASS_DEF:
             case TokenTypes.INTERFACE_DEF:
             case TokenTypes.ANNOTATION_DEF:
             case TokenTypes.ENUM_DEF:
                 visitClassDef(ast);
                 break;
             case TokenTypes.TYPE:
                 context.visitType(ast);
                 break;
             case TokenTypes.LITERAL_NEW:
                 context.visitLiteralNew(ast);
                 break;
             case TokenTypes.LITERAL_THROWS:
                 context.visitLiteralThrows(ast);
                 break;
             default:
                 throw new IllegalStateException(ast.toString());
         }
     }
 
     @Override
     public void leaveToken(DetailAST ast)
     {
         switch (ast.getType()) {
             case TokenTypes.CLASS_DEF:
             case TokenTypes.INTERFACE_DEF:
             case TokenTypes.ANNOTATION_DEF:
             case TokenTypes.ENUM_DEF:
                 leaveClassDef();
                 break;
