diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java
index af8176ec0..002c50755 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java
@@ -186,101 +186,101 @@ public class FinalClassCheck
             }
         }
     }
 
     /**
      * Get qualified class name from given class Ast.
      * @param classAst class to get qualified class name
      * @return qualified class name of a class
      */
     private String getQualifiedClassName(DetailAST classAst) {
         final String className = classAst.findFirstToken(TokenTypes.IDENT).getText();
         String outerClassQualifiedName = null;
         if (!classes.isEmpty()) {
             outerClassQualifiedName = classes.peek().getQualifiedName();
         }
         return getQualifiedClassName(packageName, outerClassQualifiedName, className);
     }
 
     /**
      * Calculate qualified class name(package + class name) laying inside given
      * outer class.
      * @param packageName package name, empty string on default package
      * @param outerClassQualifiedName qualified name(package + class) of outer class,
      *                           null if doesnt exist
      * @param className class name
      * @return qualified class name(package + class name)
      */
     private static String getQualifiedClassName(String packageName, String outerClassQualifiedName,
                                                 String className) {
         final String qualifiedClassName;
 
         if (outerClassQualifiedName == null) {
             if (packageName.isEmpty()) {
                 qualifiedClassName = className;
             }
             else {
                 qualifiedClassName = packageName + PACKAGE_SEPARATOR + className;
             }
         }
         else {
             qualifiedClassName = outerClassQualifiedName + PACKAGE_SEPARATOR + className;
         }
         return qualifiedClassName;
     }
 
     /**
      * Get super class name of given class.
      * @param classAst class
      * @return super class name or null if super class is not specified
      */
-    private String getSuperClassName(DetailAST classAst) {
+    private static String getSuperClassName(DetailAST classAst) {
         String superClassName = null;
         final DetailAST classExtend = classAst.findFirstToken(TokenTypes.EXTENDS_CLAUSE);
         if (classExtend != null) {
             superClassName = extractQualifiedName(classExtend);
         }
         return superClassName;
     }
 
     /**
      * Checks if given super class name in extend clause match super class qualified name.
      * @param superClassQualifiedName super class quaflieid name(with package)
      * @param superClassInExtendClause name in extend clause
      * @return true if given super class name in extend clause match super class qualified name,
      *         false otherwise
      */
     private static boolean doesNameInExtendMatchSuperClassName(String superClassQualifiedName,
                                                                String superClassInExtendClause) {
         String superClassNormalizedName = superClassQualifiedName;
         if (!superClassInExtendClause.contains(PACKAGE_SEPARATOR)) {
             superClassNormalizedName = getClassNameFromQualifiedName(superClassQualifiedName);
         }
         return superClassNormalizedName.equals(superClassInExtendClause);
     }
 
     /**
      * Get class name from qualified name.
      * @param qualifiedName qualified class name
      * @return class name
      */
     private static String getClassNameFromQualifiedName(String qualifiedName) {
         return qualifiedName.substring(qualifiedName.lastIndexOf(PACKAGE_SEPARATOR) + 1);
     }
 
     /** Maintains information about class' ctors. */
     private static final class ClassDesc {
         /** Qualified class name(with package). */
         private final String qualifiedName;
 
         /** Is class declared as final. */
         private final boolean declaredAsFinal;
 
         /** Is class declared as abstract. */
         private final boolean declaredAsAbstract;
 
         /** Does class have non-private ctors. */
         private boolean withNonPrivateCtor;
 
         /** Does class have private ctors. */
         private boolean withPrivateCtor;
 
