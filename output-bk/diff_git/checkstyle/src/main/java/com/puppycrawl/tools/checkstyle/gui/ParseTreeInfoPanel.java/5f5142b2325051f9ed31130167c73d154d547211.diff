diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
index ff6de9a35..3eb92c127 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
@@ -33,125 +33,125 @@ import java.util.TooManyListenersException;
 import javax.swing.AbstractAction;
 import javax.swing.Action;
 import javax.swing.JButton;
 import javax.swing.JFileChooser;
 import javax.swing.JOptionPane;
 import javax.swing.JPanel;
 import javax.swing.JScrollPane;
 import javax.swing.JTextArea;
 import javax.swing.SwingUtilities;
 import javax.swing.filechooser.FileFilter;
 
 import antlr.ANTLRException;
 
 import com.puppycrawl.tools.checkstyle.TreeWalker;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FileContents;
 import com.puppycrawl.tools.checkstyle.api.FileText;
 
 /**
  * Displays information about a parse tree.
  * The user can change the file that is parsed and displayed
  * through a JFileChooser.
  *
  * @author Lars KÃ¼hne
  */
 public class ParseTreeInfoPanel extends JPanel {
     /** For Serialisation that will never happen. */
     private static final long serialVersionUID = -4243405131202059043L;
 
     /** Parse tree model. */
     private final transient ParseTreeModel parseTreeModel;
     /** JTextArea component. */
     private final JTextArea textArea;
     /** Last directory. */
     private File lastDirectory;
     /** Current file. */
     private File currentFile;
     /** Reload action. */
     private final ReloadAction reloadAction;
     /** Lines to position map. */
     private final List<Integer> linesToPosition = new ArrayList<>();
 
     /**
      * Create a new ParseTreeInfoPanel instance.
      */
     public ParseTreeInfoPanel() {
         setLayout(new BorderLayout());
 
         parseTreeModel = new ParseTreeModel(null);
         final JTreeTable treeTable = new JTreeTable(parseTreeModel);
-        final JScrollPane sp = new JScrollPane(treeTable);
-        add(sp, BorderLayout.PAGE_START);
+        final JScrollPane scrollPane = new JScrollPane(treeTable);
+        add(scrollPane, BorderLayout.PAGE_START);
 
         final JButton fileSelectionButton =
             new JButton(new FileSelectionAction());
 
         reloadAction = new ReloadAction();
         reloadAction.setEnabled(false);
         final JButton reloadButton = new JButton(reloadAction);
 
         textArea = new JTextArea(20, 15);
         textArea.setEditable(false);
         treeTable.setEditor(textArea);
         treeTable.setLinePositionMap(linesToPosition);
 
         final JScrollPane sp2 = new JScrollPane(textArea);
         add(sp2, BorderLayout.CENTER);
 
-        final JPanel p = new JPanel(new GridLayout(1, 2));
-        add(p, BorderLayout.PAGE_END);
-        p.add(fileSelectionButton);
-        p.add(reloadButton);
+        final JPanel pane = new JPanel(new GridLayout(1, 2));
+        add(pane, BorderLayout.PAGE_END);
+        pane.add(fileSelectionButton);
+        pane.add(reloadButton);
 
         try {
-            new FileDrop(sp, new FileDropListener(sp));
+            new FileDrop(scrollPane, new FileDropListener(scrollPane));
         }
         catch (final TooManyListenersException ignored) {
             showErrorDialog(null, "Cannot initialize Drag and Drop support");
         }
 
     }
 
     /**
      * Opens the input parse tree ast.
      * @param parseTree DetailAST tree.
      */
     public void openAst(DetailAST parseTree) {
         parseTreeModel.setParseTree(parseTree);
         reloadAction.setEnabled(true);
 
         // clear for each new file
         clearLinesToPosition();
         // starts line counting at 1
         addLineToPosition(0);
         // insert the contents of the file to the text area
 
         // clean the text area before inserting the lines of the new file
         if (!textArea.getText().isEmpty()) {
             textArea.replaceRange("", 0, textArea.getText().length());
         }
 
         // move back to the top of the file
         textArea.moveCaretPosition(0);
     }
 
     /**
      * Opens file and loads it into text area.
      * @param file File to open.
      * @param parent Component for displaying errors if file can't be open.
      */
     public void openFile(File file, final Component parent) {
         if (file != null) {
             try {
                 Main.getFrame().setTitle("Checkstyle : " + file.getName());
                 final FileText text = new FileText(file.getAbsoluteFile(),
                                                    getEncoding());
                 final DetailAST parseTree = parseFile(text);
                 parseTreeModel.setParseTree(parseTree);
                 currentFile = file;
                 lastDirectory = file.getParentFile();
                 reloadAction.setEnabled(true);
 
                 final String[] sourceLines = text.toLinesArray();
 
                 // clear for each new file
@@ -246,109 +246,109 @@ public class ParseTreeInfoPanel extends JPanel {
          * @param msg Message to show.
          */
         FrameShower(Component parent, final String msg) {
             this.parent = parent;
             this.msg = msg;
         }
 
         /**
          * Display a frame.
          */
         @Override
         public void run() {
             JOptionPane.showMessageDialog(parent, msg);
         }
     }
 
     /**
      * Filter for Java files.
      */
     private static class JavaFileFilter extends FileFilter {
         @Override
         public boolean accept(File file) {
             if (file == null) {
                 return false;
             }
             return file.isDirectory() || file.getName().endsWith(".java");
         }
 
         @Override
         public String getDescription() {
             return "Java Source Code";
         }
     }
 
     /**
      * Handler for file selection action events.
      */
     private class FileSelectionAction extends AbstractAction {
         /**
          * Serial ID.
          */
         private static final long serialVersionUID = -1926935338069418119L;
 
         /** Default constructor to setup current action. */
         FileSelectionAction() {
             super("Select Java File");
             putValue(Action.MNEMONIC_KEY, KeyEvent.VK_S);
         }
 
         @Override
-        public void actionPerformed(ActionEvent e) {
-            final JFileChooser fc = new JFileChooser(lastDirectory);
+        public void actionPerformed(ActionEvent event) {
+            final JFileChooser chooser = new JFileChooser(lastDirectory);
             final FileFilter filter = new JavaFileFilter();
-            fc.setFileFilter(filter);
+            chooser.setFileFilter(filter);
             final Component parent =
                 SwingUtilities.getRoot(ParseTreeInfoPanel.this);
-            fc.showDialog(parent, "Open");
-            final File file = fc.getSelectedFile();
+            chooser.showDialog(parent, "Open");
+            final File file = chooser.getSelectedFile();
             openFile(file, parent);
 
         }
     }
 
     /**
      * Handler for reload action events.
      */
     private class ReloadAction extends AbstractAction {
         /**
          * Serial UID.
          */
         private static final long serialVersionUID = -1021880396046355863L;
 
         /** Default constructor to setup current action. */
         ReloadAction() {
             super("Reload Java File");
             putValue(Action.MNEMONIC_KEY, KeyEvent.VK_R);
         }
 
         @Override
-        public void actionPerformed(ActionEvent e) {
+        public void actionPerformed(ActionEvent event) {
             final Component parent =
                 SwingUtilities.getRoot(ParseTreeInfoPanel.this);
             openFile(currentFile, parent);
         }
     }
 
     /**
      * Listener and handler for file dropped events.
      */
     private class FileDropListener implements Listener {
         /** Scroll pane. */
         private final JScrollPane scrollPane;
 
         /**
          * @param scrollPane Scroll pane.
          */
         FileDropListener(JScrollPane scrollPane) {
             this.scrollPane = scrollPane;
         }
 
         @Override
         public void filesDropped(File... files) {
             if (files != null && files.length > 0) {
                 final File file = files[0];
                 openFile(file, scrollPane);
             }
         }
     }
 }
