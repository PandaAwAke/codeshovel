diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java
index 2ea219bac..7f680222b 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java
@@ -302,60 +302,60 @@ public class IllegalInstantiationCheck
      * @param className class name
      * @param illegal illegal value
      * @return true if type is standard
      */
     private boolean isStandardClass(String className, String illegal) {
         // class from java.lang
         if (illegal.length() - JAVA_LANG.length() == className.length()
             && illegal.endsWith(className)
             && illegal.startsWith(JAVA_LANG)) {
             // java.lang needs no import, but a class without import might
             // also come from the same file or be in the same package.
             // E.g. if a class defines an inner class "Boolean",
             // the expression "new Boolean()" refers to that class,
             // not to java.lang.Boolean
 
             final boolean isSameFile = classNames.contains(className);
             final boolean isSamePackage = isSamePackage(className);
 
             if (!(isSameFile || isSamePackage)) {
                 return true;
             }
         }
         return false;
     }
 
     /**
      * is class of the same package
      * @param className class name
      * @return true if same package class
      */
     private boolean isSamePackage(String className) {
         boolean isSamePackage = false;
         try {
             final ClassLoader classLoader = getClassLoader();
             if (classLoader != null) {
                 final String fqName = pkgName + "." + className;
                 classLoader.loadClass(fqName);
                 // no ClassNotFoundException, fqName is a known class
                 isSamePackage = true;
             }
         }
         catch (final ClassNotFoundException ignored) {
             // not a class from the same package
             isSamePackage = false;
         }
         return isSamePackage;
     }
 
     /**
      * Sets the classes that are illegal to instantiate.
-     * @param classNames a comma seperate list of class names
+     * @param names a comma seperate list of class names
      */
-    public void setClasses(String classNames) {
+    public void setClasses(String names) {
         illegalClasses.clear();
-        final StringTokenizer tok = new StringTokenizer(classNames, ",");
+        final StringTokenizer tok = new StringTokenizer(names, ",");
         while (tok.hasMoreTokens()) {
             illegalClasses.add(tok.nextToken());
         }
     }
 }
