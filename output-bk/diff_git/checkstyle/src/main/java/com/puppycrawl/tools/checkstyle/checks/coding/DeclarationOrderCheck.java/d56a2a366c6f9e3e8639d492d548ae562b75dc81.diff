diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java
index 93d28f4a2..ccb4ad938 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java
@@ -113,118 +113,118 @@ public class DeclarationOrderCheck extends Check {
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_METHOD = "declaration.order.method";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_STATIC = "declaration.order.static";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_INSTANCE = "declaration.order.instance";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_ACCESS = "declaration.order.access";
 
     /** State for the VARIABLE_DEF */
     private static final int STATE_STATIC_VARIABLE_DEF = 1;
 
     /** State for the VARIABLE_DEF */
     private static final int STATE_INSTANCE_VARIABLE_DEF = 2;
 
     /** State for the CTOR_DEF */
     private static final int STATE_CTOR_DEF = 3;
 
     /** State for the METHOD_DEF */
     private static final int STATE_METHOD_DEF = 4;
 
     /**
      * List of Declaration States. This is necessary due to
      * inner classes that have their own state
      */
     private final Deque<ScopeState> scopeStates = new ArrayDeque<>();
 
     /** If true, ignores the check to constructors. */
     private boolean ignoreConstructors;
     /** If true, ignore the check to methods. */
     private boolean ignoreMethods;
     /** If true, ignore the check to modifiers (fields, ...). */
     private boolean ignoreModifiers;
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {
-            TokenTypes.CTOR_DEF,
-            TokenTypes.METHOD_DEF,
-            TokenTypes.MODIFIERS,
-            TokenTypes.OBJBLOCK,
-        };
+        return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.CTOR_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.MODIFIERS,
             TokenTypes.OBJBLOCK,
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         final int parentType = ast.getParent().getType();
 
         switch (ast.getType()) {
             case TokenTypes.OBJBLOCK:
                 scopeStates.push(new ScopeState());
                 break;
 
             case TokenTypes.CTOR_DEF:
                 if (parentType != TokenTypes.OBJBLOCK) {
                     return;
                 }
 
                 processConstructor(ast);
                 break;
 
             case TokenTypes.METHOD_DEF:
 
                 if (parentType != TokenTypes.OBJBLOCK) {
                     return;
                 }
 
                 processMethod(ast);
                 break;
 
             case TokenTypes.MODIFIERS:
                 if (parentType != TokenTypes.VARIABLE_DEF
                         || ast.getParent().getParent().getType()
                         != TokenTypes.OBJBLOCK) {
                     return;
                 }
 
                 processModifiers(ast);
                 break;
 
             default:
                 break;
         }
     }
 
     /**
      * process constructor
      * @param ast constructor AST
      */
     private void processConstructor(DetailAST ast) {
 
         final ScopeState state = scopeStates.peek();
         if (state.currentScopeState > STATE_CTOR_DEF) {
             if (!ignoreConstructors) {
