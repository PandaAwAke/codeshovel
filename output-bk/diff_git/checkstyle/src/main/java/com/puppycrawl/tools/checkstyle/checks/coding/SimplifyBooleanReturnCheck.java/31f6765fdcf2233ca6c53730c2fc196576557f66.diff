diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java
index 9bfe92fef..99df09c7e 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java
@@ -43,115 +43,115 @@ public class SimplifyBooleanReturnCheck
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "simplify.boolReturn";
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.LITERAL_IF};
     }
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getRequiredTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         // LITERAL_IF has the following four or five children:
         // '('
         // condition
         // ')'
         // thenStatement
         // [ LITERAL_ELSE (with the elseStatement as a child) ]
 
         // don't bother if this is not if then else
         final AST elseLiteral =
             ast.findFirstToken(TokenTypes.LITERAL_ELSE);
         if (elseLiteral == null) {
             return;
         }
         final AST elseStatement = elseLiteral.getFirstChild();
 
         // skip '(' and ')'
         final AST condition = ast.getFirstChild().getNextSibling();
         final AST thenStatement = condition.getNextSibling().getNextSibling();
 
         if (canReturnOnlyBooleanLiteral(thenStatement)
             && canReturnOnlyBooleanLiteral(elseStatement)) {
             log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY);
         }
     }
 
     /**
-     * Returns if an AST is a return statment with a boolean literal
+     * Returns if an AST is a return statement with a boolean literal
      * or a compound statement that contains only such a return statement.
      *
      * <p>Returns {@code true} iff ast represents
      * <br/>
      * <pre>
      * return true/false;
      * </pre>
      * or
      * <br/>
      * <pre>
      * {
      *   return true/false;
      * }
      * </pre>
      *
-     * @param ast the sytax tree to check
-     * @return if ast is a return statment with a boolean literal.
+     * @param ast the syntax tree to check
+     * @return if ast is a return statement with a boolean literal.
      */
     private static boolean canReturnOnlyBooleanLiteral(AST ast) {
         if (isBooleanLiteralReturnStatement(ast)) {
             return true;
         }
 
-        final AST firstStmnt = ast.getFirstChild();
-        return isBooleanLiteralReturnStatement(firstStmnt);
+        final AST firstStatement = ast.getFirstChild();
+        return isBooleanLiteralReturnStatement(firstStatement);
     }
 
     /**
      * Returns if an AST is a return statement with a boolean literal.
      *
      * <p>Returns {@code true} iff ast represents
      * <br/>
      * <pre>
      * return true/false;
      * </pre>
      *
      * @param ast the syntax tree to check
      * @return if ast is a return statement with a boolean literal.
      */
     private static boolean isBooleanLiteralReturnStatement(AST ast) {
         boolean booleanReturnStatement = false;
 
         if (ast != null && ast.getType() == TokenTypes.LITERAL_RETURN) {
             final AST expr = ast.getFirstChild();
 
             if (expr.getType() != TokenTypes.SEMI) {
                 final AST value = expr.getFirstChild();
                 booleanReturnStatement = isBooleanLiteralType(value.getType());
             }
         }
         return booleanReturnStatement;
     }
 
     /**
      * Checks if a token type is a literal true or false.
      * @param tokenType the TokenType
      * @return true iff tokenType is LITERAL_TRUE or LITERAL_FALSE
      */
     private static boolean isBooleanLiteralType(final int tokenType) {
-        final boolean iastrue = tokenType == TokenTypes.LITERAL_TRUE;
+        final boolean isTrue = tokenType == TokenTypes.LITERAL_TRUE;
         final boolean isFalse = tokenType == TokenTypes.LITERAL_FALSE;
-        return iastrue || isFalse;
+        return isTrue || isFalse;
     }
 }
