diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntRangeFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntRangeFilter.java
index 3d4902813..48d26a384 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntRangeFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntRangeFilter.java
@@ -16,55 +16,55 @@
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.filters;
 
 import java.util.Objects;
 
 /**
  * This filter accepts an Integer in a range.
  * @author Rick Giles
  */
 class IntRangeFilter implements IntFilter {
     /** lower bound of the range */
     private final Integer lowerBound;
 
     /** upper bound of the range */
     private final Integer upperBound;
 
     /**
      * Constructs a <code>IntRangeFilter</code> with a
      * lower bound and an upper bound for the range.
      * @param lowerBound the lower bound of the range.
      * @param upperBound the upper bound of the range.
      */
     public IntRangeFilter(int lowerBound, int upperBound) {
         this.lowerBound = lowerBound;
         this.upperBound = upperBound;
     }
 
     /** {@inheritDoc} */
     @Override
     public boolean accept(int intValue) {
         return lowerBound.compareTo(intValue) <= 0
             && upperBound.compareTo(intValue) >= 0;
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(lowerBound, upperBound);
     }
 
     @Override
     public boolean equals(Object o) {
         if (this == o) {
             return true;
         }
         if (o == null || getClass() != o.getClass()) {
             return false;
         }
-        final IntRangeFilter that = (IntRangeFilter) o;
-        return Objects.equals(lowerBound, that.lowerBound)
-                && Objects.equals(upperBound, that.upperBound);
+        final IntRangeFilter intRangeFilter = (IntRangeFilter) o;
+        return Objects.equals(lowerBound, intRangeFilter.lowerBound)
+                && Objects.equals(upperBound, intRangeFilter.upperBound);
     }
 }
