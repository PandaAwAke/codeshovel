diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
index 24d359b0a..885185955 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
@@ -230,174 +230,174 @@ public class ImportOrderCheck
      */
     public void setCaseSensitive(boolean caseSensitive) {
         this.caseSensitive = caseSensitive;
     }
 
     /**
      * Sets whether static imports (when grouped using 'top' and 'bottom' option)
      * are sorted alphabetically or according to the package groupings.
      * @param sortAlphabetically true or false.
      */
     public void setSortStaticImportsAlphabetically(boolean sortAlphabetically) {
         this.sortStaticImportsAlphabetically = sortAlphabetically;
     }
 
     @Override
     public int[] getDefaultTokens() {
         return new int[] {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};
     }
 
     @Override
     public void beginTree(DetailAST rootAST) {
         lastGroup = Integer.MIN_VALUE;
         lastImportLine = Integer.MIN_VALUE;
         lastImport = "";
         lastImportStatic = false;
         beforeFirstImport = true;
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final FullIdent ident;
         final boolean isStatic;
 
         if (ast.getType() == TokenTypes.IMPORT) {
             ident = FullIdent.createFullIdentBelow(ast);
             isStatic = false;
         }
         else {
             ident = FullIdent.createFullIdent(ast.getFirstChild()
                     .getNextSibling());
             isStatic = true;
         }
 
         final boolean isStaticAndNotLastImport = isStatic && !lastImportStatic;
         final boolean isNotStaticAndLastImport = !isStatic && lastImportStatic;
-        switch (getAbstractOption()) {
+        final ImportOrderOption abstractOption = getAbstractOption();
+        switch (abstractOption) {
             case TOP:
                 if (isNotStaticAndLastImport) {
                     lastGroup = Integer.MIN_VALUE;
                     lastImport = "";
                 }
                 doVisitToken(ident, isStatic, isStaticAndNotLastImport);
                 break;
 
             case ABOVE:
                 // previous non-static but current is static
                 doVisitToken(ident, isStatic, isStaticAndNotLastImport);
                 break;
 
             case INFLOW:
                 // previous argument is useless here
                 doVisitToken(ident, isStatic, true);
                 break;
 
             case BOTTOM:
                 if (isStaticAndNotLastImport) {
                     lastGroup = Integer.MIN_VALUE;
                     lastImport = "";
                 }
                 doVisitToken(ident, isStatic, isNotStaticAndLastImport);
                 break;
 
             case UNDER:
-                // previous static but current is non-static
                 doVisitToken(ident, isStatic, isNotStaticAndLastImport);
                 break;
 
             default:
-                break;
+                throw new IllegalStateException(
+                        "Unexpected option for static imports: " + abstractOption.toString());
+
         }
 
         lastImportLine = ast.findFirstToken(TokenTypes.SEMI).getLineNo();
         lastImportStatic = isStatic;
         beforeFirstImport = false;
     }
 
     /**
      * Shares processing...
      *
      * @param ident the import to process.
      * @param isStatic whether the token is static or not.
      * @param previous previous non-static but current is static (above), or
      *                  previous static but current is non-static (under).
      */
     private void doVisitToken(FullIdent ident, boolean isStatic,
             boolean previous) {
-        if (ident != null) {
-            final String name = ident.getText();
-            final int groupIdx = getGroupNumber(name);
-            final int line = ident.getLineNo();
-
-            if (groupIdx > lastGroup) {
-                // This check should be made more robust to handle
-                // comments and imports that span more than one line.
-                if (!beforeFirstImport && separated && line - lastImportLine < 2) {
-                    log(line, MSG_SEPARATION, name);
-                }
-            }
-            else if (groupIdx == lastGroup || sortStaticImportsAlphabetically
-                     && isAlphabeticallySortableStaticImport(isStatic)) {
-                doVisitTokenInSameGroup(isStatic, previous, name, line);
-            }
-            else {
-                log(line, MSG_ORDERING, name);
+        final String name = ident.getText();
+        final int groupIdx = getGroupNumber(name);
+        final int line = ident.getLineNo();
+
+        if (groupIdx > lastGroup) {
+            // This check should be made more robust to handle
+            // comments and imports that span more than one line.
+            if (!beforeFirstImport && separated && line - lastImportLine < 2) {
+                log(line, MSG_SEPARATION, name);
             }
-
-            lastGroup = groupIdx;
-            lastImport = name;
         }
+        else if (groupIdx == lastGroup || sortStaticImportsAlphabetically
+                 && isAlphabeticallySortableStaticImport(isStatic)) {
+            doVisitTokenInSameGroup(isStatic, previous, name, line);
+        }
+        else {
+            log(line, MSG_ORDERING, name);
+        }
+
+        lastGroup = groupIdx;
+        lastImport = name;
     }
 
     /**
      * Checks whether static imports grouped by <b>top</b> or <b>bottom</b> option
      * are sorted alphabetically or not.
      * @param isStatic if current import is static.
      * @return true if static imports should be sorted alphabetically.
      */
     private boolean isAlphabeticallySortableStaticImport(boolean isStatic) {
         boolean result = false;
         if (isStatic && (getAbstractOption() == ImportOrderOption.TOP
                 || getAbstractOption() == ImportOrderOption.BOTTOM)) {
             result = true;
         }
         return result;
     }
 
     /**
      * Shares processing...
      *
      * @param isStatic whether the token is static or not.
      * @param previous previous non-static but current is static (above), or
      *    previous static but current is non-static (under).
      * @param name the name of the current import.
      * @param line the line of the current import.
      */
     private void doVisitTokenInSameGroup(boolean isStatic,
             boolean previous, String name, int line) {
         if (!ordered) {
             return;
         }
 
         if (getAbstractOption() == ImportOrderOption.INFLOW) {
             // out of lexicographic order
             if (compare(lastImport, name, caseSensitive) > 0) {
                 log(line, MSG_ORDERING, name);
             }
         }
         else {
             final boolean shouldFireError =
                 // current and previous static or current and
                 // previous non-static
                 !(lastImportStatic ^ isStatic)
                 &&
                 // and out of lexicographic order
                         compare(lastImport, name, caseSensitive) > 0
                 ||
                 // previous non-static but current is static (above)
                 // or
                 // previous static but current is non-static (under)
