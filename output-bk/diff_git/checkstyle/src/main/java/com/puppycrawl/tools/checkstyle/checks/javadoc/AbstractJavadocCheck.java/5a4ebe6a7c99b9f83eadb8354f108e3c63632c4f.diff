diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java
index 93908c9e4..faed34a18 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java
@@ -1,75 +1,75 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2016 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks.javadoc;
 
 import java.util.HashMap;
 import java.util.Map;
+import java.util.stream.IntStream;
 
-import com.google.common.primitives.Ints;
 import com.puppycrawl.tools.checkstyle.JavadocDetailNodeParser;
 import com.puppycrawl.tools.checkstyle.JavadocDetailNodeParser.ParseErrorMessage;
 import com.puppycrawl.tools.checkstyle.JavadocDetailNodeParser.ParseStatus;
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.DetailNode;
 import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.utils.BlockCommentPosition;
 import com.puppycrawl.tools.checkstyle.utils.JavadocUtils;
 
 /**
  * Base class for Checks that process Javadoc comments.
  * @author Baratali Izmailov
  */
 public abstract class AbstractJavadocCheck extends AbstractCheck {
 
     /**
      * Message key of error message. Missed close HTML tag breaks structure
      * of parse tree, so parser stops parsing and generates such error
      * message. This case is special because parser prints error like
      * {@code "no viable alternative at input 'b \n *\n'"} and it is not
      * clear that error is about missed close HTML tag.
      */
     public static final String MSG_JAVADOC_MISSED_HTML_CLOSE =
             JavadocDetailNodeParser.MSG_JAVADOC_MISSED_HTML_CLOSE;
 
     /**
      * Message key of error message.
      */
     public static final String MSG_JAVADOC_WRONG_SINGLETON_TAG =
             JavadocDetailNodeParser.MSG_JAVADOC_WRONG_SINGLETON_TAG;
 
     /**
      * Parse error while rule recognition.
      */
     public static final String MSG_JAVADOC_PARSE_RULE_ERROR =
             JavadocDetailNodeParser.MSG_JAVADOC_PARSE_RULE_ERROR;
 
     /**
      * Error message key for common javadoc errors.
      */
     public static final String MSG_KEY_PARSE_ERROR =
             JavadocDetailNodeParser.MSG_KEY_PARSE_ERROR;
     /**
      * Unrecognized error from antlr parser.
      */
     public static final String MSG_KEY_UNRECOGNIZED_ANTLR_ERROR =
             JavadocDetailNodeParser.MSG_KEY_UNRECOGNIZED_ANTLR_ERROR;
 
@@ -203,72 +203,82 @@ public abstract class AbstractJavadocCheck extends AbstractCheck {
      * @return A block comment in the syntax tree.
      */
     protected DetailAST getBlockCommentAst() {
         return blockCommentAst;
     }
 
     /**
      * Checks Javadoc comment it's in right place.
      * From Javadoc util documentation:
      * "Placement of comments - Documentation comments are recognized only when placed
      * immediately before class, interface, constructor, method, or field
      * declarations -- see the class example, method example, and field example.
      * Documentation comments placed in the body of a method are ignored. Only one
      * documentation comment per declaration statement is recognized by the Javadoc tool."
      *
      * @param blockComment Block comment AST
      * @return true if Javadoc is in right place
      */
     private static boolean isCorrectJavadocPosition(DetailAST blockComment) {
         return BlockCommentPosition.isOnClass(blockComment)
                 || BlockCommentPosition.isOnInterface(blockComment)
                 || BlockCommentPosition.isOnEnum(blockComment)
                 || BlockCommentPosition.isOnMethod(blockComment)
                 || BlockCommentPosition.isOnField(blockComment)
                 || BlockCommentPosition.isOnConstructor(blockComment)
                 || BlockCommentPosition.isOnEnumConstant(blockComment)
                 || BlockCommentPosition.isOnAnnotationDef(blockComment);
     }
 
     /**
      * Processes JavadocAST tree notifying Check.
      * @param root
      *        root of JavadocAST tree.
      */
     private void processTree(DetailNode root) {
         beginJavadocTree(root);
         walk(root);
         finishJavadocTree(root);
     }
 
     /**
      * Processes a node calling Check at interested nodes.
      * @param root
      *        the root of tree for process
      */
     private void walk(DetailNode root) {
         final int[] defaultTokenTypes = getDefaultJavadocTokens();
 
         DetailNode curNode = root;
         while (curNode != null) {
-            final boolean waitsFor = Ints.contains(defaultTokenTypes, curNode.getType());
+            final boolean waitsForProcessing = shouldBeProcessed(defaultTokenTypes, curNode);
 
-            if (waitsFor) {
+            if (waitsForProcessing) {
                 visitJavadocToken(curNode);
             }
             DetailNode toVisit = JavadocUtils.getFirstChild(curNode);
             while (curNode != null && toVisit == null) {
 
-                if (waitsFor) {
+                if (waitsForProcessing) {
                     leaveJavadocToken(curNode);
                 }
 
                 toVisit = JavadocUtils.getNextSibling(curNode);
                 if (toVisit == null) {
                     curNode = curNode.getParent();
                 }
             }
             curNode = toVisit;
         }
     }
 
+    /**
+     * Checks whether the current node should be processed by the check.
+     * @param defaultTokenTypes default token types.
+     * @param curNode current node.
+     * @return true if the current node should be processed by the check.
+     */
+    private boolean shouldBeProcessed(int[] defaultTokenTypes, DetailNode curNode) {
+        return IntStream.of(defaultTokenTypes).anyMatch(i -> i == curNode.getType());
+    }
+
 }
