diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java
index 290dc59be..5fc4fb8ce 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java
@@ -124,122 +124,121 @@ public class FinalLocalVariableCheck extends Check
             TokenTypes.PARAMETER_DEF,
         };
     }
 
     @Override
     public int[] getRequiredTokens()
     {
         return new int[] {
             TokenTypes.IDENT,
             TokenTypes.CTOR_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.INSTANCE_INIT,
             TokenTypes.STATIC_INIT,
             TokenTypes.LITERAL_FOR,
             TokenTypes.SLIST,
             TokenTypes.OBJBLOCK,
         };
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
         switch (ast.getType()) {
             case TokenTypes.OBJBLOCK:
             case TokenTypes.SLIST:
             case TokenTypes.LITERAL_FOR:
             case TokenTypes.METHOD_DEF:
             case TokenTypes.CTOR_DEF:
             case TokenTypes.STATIC_INIT:
             case TokenTypes.INSTANCE_INIT:
                 scopeStack.push(new HashMap<String, DetailAST>());
                 break;
 
             case TokenTypes.PARAMETER_DEF:
                 if (ScopeUtils.inInterfaceBlock(ast)
                     || inAbstractOrNativeMethod(ast))
                 {
                     break;
                 }
             case TokenTypes.VARIABLE_DEF:
                 if (ast.getParent().getType() != TokenTypes.OBJBLOCK
                     && shouldCheckEnhancedForLoopVariable(ast)
                     && isVariableInForInit(ast))
                 {
                     insertVariable(ast);
                 }
                 break;
 
             case TokenTypes.IDENT:
                 final int parentType = ast.getParent().getType();
-                if (TokenTypes.POST_DEC        == parentType
-                    || TokenTypes.DEC          == parentType
-                    || TokenTypes.POST_INC     == parentType
-                    || TokenTypes.INC          == parentType
-                    || TokenTypes.ASSIGN       == parentType
-                    || TokenTypes.PLUS_ASSIGN  == parentType
-                    || TokenTypes.MINUS_ASSIGN == parentType
-                    || TokenTypes.DIV_ASSIGN   == parentType
-                    || TokenTypes.STAR_ASSIGN  == parentType
-                    || TokenTypes.MOD_ASSIGN   == parentType
-                    || TokenTypes.SR_ASSIGN    == parentType
-                    || TokenTypes.BSR_ASSIGN   == parentType
-                    || TokenTypes.SL_ASSIGN    == parentType
-                    || TokenTypes.BXOR_ASSIGN  == parentType
-                    || TokenTypes.BOR_ASSIGN   == parentType
-                    || TokenTypes.BAND_ASSIGN  == parentType)
+                // TODO: is there better way to check is ast
+                // in left part of assignment?
+                if ((TokenTypes.POST_DEC == parentType
+                        || TokenTypes.DEC == parentType
+                        || TokenTypes.POST_INC == parentType
+                        || TokenTypes.INC == parentType
+                        || TokenTypes.ASSIGN == parentType
+                        || TokenTypes.PLUS_ASSIGN == parentType
+                        || TokenTypes.MINUS_ASSIGN == parentType
+                        || TokenTypes.DIV_ASSIGN == parentType
+                        || TokenTypes.STAR_ASSIGN == parentType
+                        || TokenTypes.MOD_ASSIGN == parentType
+                        || TokenTypes.SR_ASSIGN == parentType
+                        || TokenTypes.BSR_ASSIGN == parentType
+                        || TokenTypes.SL_ASSIGN == parentType
+                        || TokenTypes.BXOR_ASSIGN == parentType
+                        || TokenTypes.BOR_ASSIGN == parentType
+                        || TokenTypes.BAND_ASSIGN == parentType)
+                        && ast.getParent().getFirstChild() == ast)
                 {
-                    // TODO: is there better way to check is ast
-                    // in left part of assignment?
-                    if (ast.getParent().getFirstChild() == ast) {
-                        removeVariable(ast);
-                    }
+                    removeVariable(ast);
                 }
                 break;
 
             default:
         }
     }
 
     /**
      * Determines whether enhanced for-loop variable should be checked or not.
      * @param ast The ast to compare.
      * @return true if enhanced for-loop variable should be checked.
      */
     private boolean shouldCheckEnhancedForLoopVariable(DetailAST ast)
     {
         return validateEnhancedForLoopVariable
                 || ast.getParent().getType() != TokenTypes.FOR_EACH_CLAUSE;
     }
 
     /**
      * Checks if current variable is defined in
      *  {@link TokenTypes#FOR_INIT for-loop init}, e.g.:
      * <p>
      * <code>
      * for (int i = 0, j = 0; i < j; i++) { . . . }
      * </code>
      * </p>
      * <code>i, j</code> are defined in {@link TokenTypes#FOR_INIT for-loop init}
      * @param variableDef variable definition node.
      * @return true if variable is defined in {@link TokenTypes#FOR_INIT for-loop init}
      */
     private static boolean isVariableInForInit(DetailAST variableDef)
     {
         return variableDef.getParent().getType() != TokenTypes.FOR_INIT;
     }
 
     /**
      * Determines whether an AST is a descendant of an abstract or native method.
      * @param ast the AST to check.
      * @return true if ast is a descendant of an abstract or native method.
      */
     private static boolean inAbstractOrNativeMethod(DetailAST ast)
     {
         DetailAST parent = ast.getParent();
         while (parent != null) {
             if (parent.getType() == TokenTypes.METHOD_DEF) {
                 final DetailAST modifiers =
                     parent.findFirstToken(TokenTypes.MODIFIERS);
                 return modifiers.branchContains(TokenTypes.ABSTRACT)
                         || modifiers.branchContains(TokenTypes.LITERAL_NATIVE);
             }
