diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java
index ee8be2c4f..2fa8e2e0f 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java
@@ -95,141 +95,141 @@ public final class MissingDeprecatedCheck extends Check
     private static final String END_JAVADOC = "*/";
     /** Multiline finished at next Javadoc * */
     private static final String NEXT_TAG = "@";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY_ANNOTATION_MISSING_DEPRECATED =
         "annotation.missing.deprecated";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY_JAVADOC_DUPLICATE_TAG =
         "javadoc.duplicateTag";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY_JAVADOC_MISSING = "javadoc.missing";
 
     /** {@inheritDoc} */
     @Override
     public int[] getDefaultTokens()
     {
         return this.getAcceptableTokens();
     }
 
     /** {@inheritDoc} */
     @Override
     public int[] getAcceptableTokens()
     {
         return new int[] {
             TokenTypes.INTERFACE_DEF,
             TokenTypes.CLASS_DEF,
             TokenTypes.ANNOTATION_DEF,
             TokenTypes.ENUM_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.CTOR_DEF,
             TokenTypes.VARIABLE_DEF,
             TokenTypes.ENUM_CONSTANT_DEF,
             TokenTypes.ANNOTATION_FIELD_DEF,
         };
     }
 
     /** {@inheritDoc} */
     @Override
-    public void visitToken(final DetailAST aAST)
+    public void visitToken(final DetailAST ast)
     {
         final TextBlock javadoc =
-            this.getFileContents().getJavadocBefore(aAST.getLineNo());
+            this.getFileContents().getJavadocBefore(ast.getLineNo());
 
         final boolean containsAnnotation =
-            AnnotationUtility.containsAnnotation(aAST, DEPRECATED)
-            || AnnotationUtility.containsAnnotation(aAST, FQ_DEPRECATED);
+            AnnotationUtility.containsAnnotation(ast, DEPRECATED)
+            || AnnotationUtility.containsAnnotation(ast, FQ_DEPRECATED);
 
         final boolean containsJavadocTag = this.containsJavadocTag(javadoc);
 
         if (containsAnnotation ^ containsJavadocTag) {
-            this.log(aAST.getLineNo(), MSG_KEY_ANNOTATION_MISSING_DEPRECATED);
+            this.log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_DEPRECATED);
         }
     }
 
     /**
      * Checks to see if the text block contains a deprecated tag.
      *
-     * @param aJavadoc the javadoc of the AST
+     * @param javadoc the javadoc of the AST
      * @return true if contains the tag
      */
-    private boolean containsJavadocTag(final TextBlock aJavadoc)
+    private boolean containsJavadocTag(final TextBlock javadoc)
     {
-        if (aJavadoc == null) {
+        if (javadoc == null) {
             return false;
         }
 
-        final String[] lines = aJavadoc.getText();
+        final String[] lines = javadoc.getText();
 
         boolean found = false;
 
-        int currentLine = aJavadoc.getStartLineNo() - 1;
+        int currentLine = javadoc.getStartLineNo() - 1;
 
         for (int i = 0; i < lines.length; i++) {
             currentLine++;
             final String line = lines[i];
 
             final Matcher javadocNoargMatcher =
                 MissingDeprecatedCheck.MATCH_DEPRECATED.matcher(line);
             final Matcher noargMultilineStart =
                 MissingDeprecatedCheck.
                     MATCH_DEPRECATED_MULTILINE_START.matcher(line);
 
             if (javadocNoargMatcher.find()) {
                 if (found) {
                     this.log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,
                         JavadocTagInfo.DEPRECATED.getText());
                 }
                 found = true;
             }
             else if (noargMultilineStart.find()) {
                 // Look for the rest of the comment if all we saw was
                 // the tag and the name. Stop when we see '*/' (end of
                 // Javadoc), '@' (start of next tag), or anything that's
                 // not whitespace or '*' characters.
 
-                for (int remIndex = i + 1;
-                    remIndex < lines.length; remIndex++)
+                for (int reindex = i + 1;
+                    reindex < lines.length; reindex++)
                 {
                     final Matcher multilineCont =
                         MissingDeprecatedCheck.MATCH_DEPRECATED_MULTILINE_CONT
-                        .matcher(lines[remIndex]);
+                        .matcher(lines[reindex]);
 
                     if (multilineCont.find()) {
-                        remIndex = lines.length;
+                        reindex = lines.length;
                         final String lFin = multilineCont.group(1);
                         if (!lFin.equals(MissingDeprecatedCheck.NEXT_TAG)
                             && !lFin.equals(MissingDeprecatedCheck.END_JAVADOC))
                         {
                             if (found) {
                                 this.log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,
                                     JavadocTagInfo.DEPRECATED.getText());
                             }
                             found = true;
                         }
                         else {
                             this.log(currentLine, MSG_KEY_JAVADOC_MISSING);
                             if (found) {
                                 this.log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,
                                     JavadocTagInfo.DEPRECATED.getText());
                             }
                             found = true;
                         }
                     }
                 }
             }
         }
         return found;
     }
 }
