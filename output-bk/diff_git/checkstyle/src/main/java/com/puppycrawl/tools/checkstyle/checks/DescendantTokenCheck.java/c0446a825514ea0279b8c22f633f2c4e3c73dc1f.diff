diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java
index 0b547e255..8c7d89184 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java
@@ -272,101 +272,101 @@ public class DescendantTokenCheck extends Check
                             String.valueOf(tokenCount),
                             String.valueOf(maximumNumber),
                             name,
                             descendantName);
                 }
             }
         }
     }
 
     /**
      * Counts the number of occurrences of descendant tokens.
      * @param ast the root token for descendants.
      * @param depth the maximum depth of the counted descendants.
      */
     private void countTokens(AST ast, int depth)
     {
         if (depth <= maximumDepth) {
             //update count
             if (depth >= minimumDepth) {
                 final int type = ast.getType();
                 if (type <= counts.length) {
                     counts[type - 1]++;
                 }
             }
             AST child = ast.getFirstChild();
             final int nextDepth = depth + 1;
             while (child != null) {
                 countTokens(child, nextDepth);
                 child = child.getNextSibling();
             }
         }
     }
 
     @Override
     public int[] getAcceptableTokens()
     {
         // Any tokens set by property 'tokens' are acceptable
         final Set<String> tokenNames = getTokenNames();
         final int[] result = new int[tokenNames.size()];
         int i = 0;
         for (String name : tokenNames) {
             result[i++] = TokenTypes.getTokenId(name);
         }
         return result;
     }
 
     /**
      * Sets the tokens which occurance as descendant is limited.
      * @param limitedTokensParam - list of tokens to ignore.
      */
-    public void setLimitedTokens(String[] limitedTokensParam)
+    public void setLimitedTokens(String... limitedTokensParam)
     {
         limitedTokens = new int[limitedTokensParam.length];
 
         int maxToken = 0;
         for (int i = 0; i < limitedTokensParam.length; i++) {
             limitedTokens[i] = TokenTypes.getTokenId(limitedTokensParam[i]);
             if (limitedTokens[i] > maxToken) {
                 maxToken = limitedTokens[i];
             }
         }
         counts = new int[maxToken];
     }
 
     /**
      * Sets the minimum depth for descendant counts.
      * @param minimumDepth the minimum depth for descendant counts.
      */
     public void setMinimumDepth(int minimumDepth)
     {
         this.minimumDepth = minimumDepth;
     }
 
     /**
      * Sets the maximum depth for descendant counts.
      * @param maximumDepth the maximum depth for descendant counts.
      */
     public void setMaximumDepth(int maximumDepth)
     {
         this.maximumDepth = maximumDepth;
     }
 
    /**
     * Sets a minimum count for descendants.
     * @param minimumNumber the minimum count for descendants.
     */
     public void setMinimumNumber(int minimumNumber)
     {
         this.minimumNumber = minimumNumber;
     }
 
     /**
       * Sets a maximum count for descendants.
       * @param maximumNumber the maximum count for descendants.
       */
     public void setMaximumNumber(int maximumNumber)
     {
         this.maximumNumber = maximumNumber;
     }
 
     /**
