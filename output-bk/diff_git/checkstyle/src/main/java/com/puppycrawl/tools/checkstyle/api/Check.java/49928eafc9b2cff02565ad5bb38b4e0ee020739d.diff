diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/Check.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/Check.java
index e2438eb02..4a4c17b87 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/Check.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/Check.java
@@ -73,136 +73,142 @@ public abstract class Check extends AbstractViolationReporter {
      * unacceptable token set in the configuration file.
      * The default implementation returns the check's default tokens.
      * @return the token set this check is designed for.
      * @see TokenTypes
      */
     public int[] getAcceptableTokens() {
         final int[] defaultTokens = getDefaultTokens();
         final int[] copy = new int[defaultTokens.length];
         System.arraycopy(defaultTokens, 0, copy, 0, defaultTokens.length);
         return copy;
     }
 
     /**
      * The tokens that this check must be registered for.
      * @return the token set this must be registered for.
      * @see TokenTypes
      */
     public int[] getRequiredTokens() {
         return new int[] {};
     }
 
     /**
      * Adds a set of tokens the check is interested in.
      * @param strRep the string representation of the tokens interested in
      */
     public final void setTokens(String... strRep) {
         Collections.addAll(tokens, strRep);
     }
 
     /**
      * Returns the tokens registered for the check.
      * @return the set of token names
      */
     public final Set<String> getTokenNames() {
         return tokens;
     }
 
     /**
      * Set the global object used to collect messages.
      * @param messages the messages to log with
      */
     public final void setMessages(LocalizedMessages messages) {
         this.messages = messages;
     }
 
     /**
      * Initialise the check. This is the time to verify that the check has
      * everything required to perform it job.
      */
     public void init() {
+        // No code by default, should be overridden only by demand at subclasses
     }
 
     /**
      * Destroy the check. It is being retired from service.
      */
     public void destroy() {
+        // No code by default, should be overridden only by demand at subclasses
     }
 
     /**
      * Called before the starting to process a tree. Ideal place to initialise
      * information that is to be collected whilst processing a tree.
      * @param rootAST the root of the tree
      */
     public void beginTree(DetailAST rootAST) {
+        // No code by default, should be overridden only by demand at subclasses
     }
 
     /**
      * Called after finished processing a tree. Ideal place to report on
      * information collected whilst processing a tree.
      * @param rootAST the root of the tree
      */
     public void finishTree(DetailAST rootAST) {
+        // No code by default, should be overridden only by demand at subclasses
     }
 
     /**
      * Called to process a token.
      * @param ast the token to process
      */
     public void visitToken(DetailAST ast) {
+        // No code by default, should be overridden only by demand at subclasses
     }
 
     /**
      * Called after all the child nodes have been process.
      * @param ast the token leaving
      */
     public void leaveToken(DetailAST ast) {
+        // No code by default, should be overridden only by demand at subclasses
     }
 
     /**
      * Returns the lines associated with the tree.
      * @return the file contents
      */
     public final String[] getLines() {
         return getFileContents().getLines();
     }
 
     /**
      * Returns the line associated with the tree.
      * @param index index of the line
      * @return the line from the file contents
      */
     public final String getLine(int index) {
         return getFileContents().getLine(index);
     }
 
     /**
      * Set the file contents associated with the tree.
      * @param contents the manager
      */
     public final void setFileContents(FileContents contents) {
         fileContents = contents;
     }
 
     /**
      * Returns the file contents associated with the tree.
      * @return the file contents
      */
     public final FileContents getFileContents() {
         return fileContents;
     }
 
     /**
      * Set the class loader associated with the tree.
      * @param loader the class loader
      */
     public final void setClassLoader(ClassLoader loader) {
         this.loader = loader;
     }
 
     /**
      * Returns the class loader associated with the tree.
      * @return the class loader
      */
     public final ClassLoader getClassLoader() {
         return loader;
     }
