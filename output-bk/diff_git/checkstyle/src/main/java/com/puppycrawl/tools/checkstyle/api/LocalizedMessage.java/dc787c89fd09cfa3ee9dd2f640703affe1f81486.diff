diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
index b90320dff..128d05642 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
@@ -201,100 +201,108 @@ public final class LocalizedMessage
     /**
      * Creates a new <code>LocalizedMessage</code> instance.
      *
      * @param aLineNo line number associated with the message
      * @param aBundle resource bundle name
      * @param aKey the key to locate the translation
      * @param aArgs arguments for the translation
      * @param aSeverityLevel severity level for the message
      * @param aModuleId the id of the module the message is associated with
      * @param aSourceClass the source class for the message
      * @param aCustomMessage optional custom message overriding the default
      */
     public LocalizedMessage(int aLineNo,
                             String aBundle,
                             String aKey,
                             Object[] aArgs,
                             SeverityLevel aSeverityLevel,
                             String aModuleId,
                             Class<?> aSourceClass,
                             String aCustomMessage)
     {
         this(aLineNo, 0, aBundle, aKey, aArgs, aSeverityLevel, aModuleId,
                 aSourceClass, aCustomMessage);
     }
 
     /**
      * Creates a new <code>LocalizedMessage</code> instance. The column number
      * defaults to 0.
      *
      * @param aLineNo line number associated with the message
      * @param aBundle name of a resource bundle that contains error messages
      * @param aKey the key to locate the translation
      * @param aArgs arguments for the translation
      * @param aModuleId the id of the module the message is associated with
      * @param aSourceClass the name of the source for the message
      * @param aCustomMessage optional custom message overriding the default
      */
     public LocalizedMessage(
         int aLineNo,
         String aBundle,
         String aKey,
         Object[] aArgs,
         String aModuleId,
         Class<?> aSourceClass,
         String aCustomMessage)
     {
         this(aLineNo, 0, aBundle, aKey, aArgs, DEFAULT_SEVERITY, aModuleId,
                 aSourceClass, aCustomMessage);
     }
 
+    /** Clears the cache */
+    public static void clearCache()
+    {
+        synchronized (BUNDLE_CACHE) {
+            BUNDLE_CACHE.clear();
+        }
+    }
+
     /** @return the translated message **/
     public String getMessage()
     {
 
         final String customMessage = getCustomMessage();
         if (customMessage != null) {
             return customMessage;
         }
 
         try {
             // Important to use the default class loader, and not the one in
             // the GlobalProperties object. This is because the class loader in
             // the GlobalProperties is specified by the user for resolving
             // custom classes.
             final ResourceBundle bundle = getBundle(mBundle);
             final String pattern = bundle.getString(mKey);
             return MessageFormat.format(pattern, mArgs);
         }
         catch (final MissingResourceException ex) {
             // If the Check author didn't provide i18n resource bundles
             // and logs error messages directly, this will return
             // the author's original message
             return MessageFormat.format(mKey, mArgs);
         }
     }
 
     /**
      * Returns the formatted custom message if one is configured.
      * @return the formatted custom message or <code>null</code>
      *          if there is no custom message
      */
     private String getCustomMessage()
     {
 
         if (mCustomMessage == null) {
             return null;
         }
 
         return MessageFormat.format(mCustomMessage, mArgs);
     }
 
     /**
      * Find a ResourceBundle for a given bundle name. Uses the classloader
      * of the class emitting this message, to be sure to get the correct
      * bundle.
      * @param aBundleName the bundle name
      * @return a ResourceBundle
      */
     private ResourceBundle getBundle(String aBundleName)
     {
