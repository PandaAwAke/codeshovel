diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java
index 4dc8d32ea..10d80514a 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java
@@ -111,83 +111,86 @@ public class AtclauseOrderCheck extends AbstractJavadocCheck {
         for (String aSTarget : sTarget) {
             customTarget.add(TokenUtils.getTokenId(aSTarget.trim()));
         }
         this.target = customTarget;
     }
 
     /**
      * Sets custom order of atclauses.
      * @param order user's order.
      */
     public void setTagOrder(String order) {
         final List<String> customOrder = new ArrayList<>();
         final String[] sOrder = order.split(COMMA_SEPARATOR);
         for (String aSOrder : sOrder) {
             customOrder.add(aSOrder.trim());
         }
         tagOrder = customOrder;
     }
 
     @Override
     public int[] getDefaultJavadocTokens() {
         return new int[] {
             JavadocTokenTypes.JAVADOC,
         };
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.BLOCK_COMMENT_BEGIN};
     }
 
     @Override
     public int[] getRequiredTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public void visitJavadocToken(DetailNode ast) {
         final int parentType = getParentType(getBlockCommentAst());
 
         if (target.contains(parentType)) {
             checkOrderInTagSection(ast);
         }
     }
 
     /**
      * Checks order of atclauses in tag section node.
      * @param javadoc Javadoc root node.
      */
     private void checkOrderInTagSection(DetailNode javadoc) {
-        int indexOrderOfPreviousTag = 0;
+        int maxIndexOfPreviousTag = 0;
 
         for (DetailNode node : javadoc.getChildren()) {
             if (node.getType() == JavadocTokenTypes.JAVADOC_TAG) {
                 final String tagText = JavadocUtils.getFirstChild(node).getText();
-                final int indexOrderOfCurrentTag = tagOrder.indexOf(tagText);
-
-                if (tagOrder.contains(tagText)
-                        && indexOrderOfCurrentTag < indexOrderOfPreviousTag) {
-                    log(node.getLineNumber(), MSG_KEY, tagOrder.toString());
+                final int indexOfCurrentTag = tagOrder.indexOf(tagText);
+
+                if (indexOfCurrentTag != -1) {
+                    if (indexOfCurrentTag < maxIndexOfPreviousTag) {
+                        log(node.getLineNumber(), MSG_KEY, tagOrder.toString());
+                    }
+                    else {
+                        maxIndexOfPreviousTag = indexOfCurrentTag;
+                    }
                 }
-                indexOrderOfPreviousTag = indexOrderOfCurrentTag;
             }
         }
     }
 
     /**
      * Returns type of parent node.
      * @param commentBlock child node.
      * @return parent type.
      */
     private static int getParentType(DetailAST commentBlock) {
         int type = 0;
         final DetailAST parentNode = commentBlock.getParent();
         if (parentNode != null) {
             type = parentNode.getType();
             if (type == TokenTypes.TYPE || type == TokenTypes.MODIFIERS) {
                 type = parentNode.getParent().getType();
             }
         }
         return type;
     }
 }
