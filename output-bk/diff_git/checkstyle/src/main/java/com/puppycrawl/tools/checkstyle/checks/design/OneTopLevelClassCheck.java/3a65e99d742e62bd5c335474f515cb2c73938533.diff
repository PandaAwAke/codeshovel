diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/OneTopLevelClassCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/OneTopLevelClassCheck.java
index 9de786b31..c01b38c16 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/OneTopLevelClassCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/OneTopLevelClassCheck.java
@@ -57,112 +57,112 @@ import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
  * class Foo{ //top-level class
  *     //methods
  * }
  *
  * class Foo2{
  *     //methods
  * }
  * }</pre>
  * <p>
  * An example of check's configuration:
  * </p>
  * <pre>
  * &lt;module name="OneTopLevelClass"/&gt;
  * </pre>
  *
  * <p>
  * An example of code without violations:
  * </p>
  * <pre>{@code
  * public class Foo{
  *     //methods
  * }
  * }</pre>
  *
  * <p> ATTENTION: This Check does not support customization of validated tokens,
  *  so do not use the "tokens" property.
  * </p>
  *
  * @author maxvetrenko
  */
 @FileStatefulCheck
 public class OneTopLevelClassCheck extends AbstractCheck {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "one.top.level.class";
 
     /**
      * True if a java source file contains a type
      * with a public access level modifier.
      */
     private boolean publicTypeFound;
 
     /** Mapping between type names and line numbers of the type declarations.*/
     private final SortedMap<Integer, String> lineNumberTypeMap = new TreeMap<>();
 
     @Override
     public int[] getDefaultTokens() {
-        return getAcceptableTokens();
+        return getRequiredTokens();
     }
 
-    // ZERO tokens as Check do Traverse of Tree himself, he does not need to subscribed to Tokens
     @Override
     public int[] getAcceptableTokens() {
-        return CommonUtils.EMPTY_INT_ARRAY;
+        return getRequiredTokens();
     }
 
+    // ZERO tokens as Check do Traverse of Tree himself, he does not need to subscribed to Tokens
     @Override
     public int[] getRequiredTokens() {
-        return getAcceptableTokens();
+        return CommonUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public void beginTree(DetailAST rootAST) {
         publicTypeFound = false;
         lineNumberTypeMap.clear();
 
         DetailAST currentNode = rootAST;
         while (currentNode != null) {
             if (currentNode.getType() == TokenTypes.CLASS_DEF
                     || currentNode.getType() == TokenTypes.ENUM_DEF
                     || currentNode.getType() == TokenTypes.INTERFACE_DEF) {
                 if (isPublic(currentNode)) {
                     publicTypeFound = true;
                 }
                 else {
                     final String typeName = currentNode
                             .findFirstToken(TokenTypes.IDENT).getText();
                     lineNumberTypeMap.put(currentNode.getLineNo(), typeName);
                 }
             }
             currentNode = currentNode.getNextSibling();
         }
     }
 
     @Override
     public void finishTree(DetailAST rootAST) {
         if (!lineNumberTypeMap.isEmpty()) {
             if (!publicTypeFound) {
                 // skip first top-level type.
                 lineNumberTypeMap.remove(lineNumberTypeMap.firstKey());
             }
 
             for (Map.Entry<Integer, String> entry
                     : lineNumberTypeMap.entrySet()) {
                 log(entry.getKey(), MSG_KEY, entry.getValue());
             }
         }
     }
 
     /**
      * Checks if a type is public.
      * @param typeDef type definition node.
      * @return true if a type has a public access level modifier.
      */
     private static boolean isPublic(DetailAST typeDef) {
         final DetailAST modifiers =
                 typeDef.findFirstToken(TokenTypes.MODIFIERS);
         return modifiers.findFirstToken(TokenTypes.LITERAL_PUBLIC) != null;
     }
