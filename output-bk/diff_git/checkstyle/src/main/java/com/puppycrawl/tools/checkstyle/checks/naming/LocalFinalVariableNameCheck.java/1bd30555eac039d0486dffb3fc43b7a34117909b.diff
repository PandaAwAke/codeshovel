diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalFinalVariableNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalFinalVariableNameCheck.java
index f42c7ae39..4c8d659aa 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalFinalVariableNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalFinalVariableNameCheck.java
@@ -33,55 +33,55 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="LocalFinalVariableName"/&gt;
  * </pre>
  * <p>
  * An example of how to configure the check for names that are only upper case
  * letters and digits is:
  * </p>
  * <pre>
  * &lt;module name="LocalFinalVariableName"&gt;
  *    &lt;property name="format" value="^[A-Z][A-Z0-9]*$"/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * @author Rick Giles
  */
 public class LocalFinalVariableNameCheck
     extends AbstractNameCheck
 {
     /** Creates a new <code>LocalFinalVariableNameCheck</code> instance. */
     public LocalFinalVariableNameCheck()
     {
         super("^[a-z][a-zA-Z0-9]*$");
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.VARIABLE_DEF,
             TokenTypes.PARAMETER_DEF,
         };
     }
 
     @Override
     public int[] getAcceptableTokens()
     {
         return new int[] {
             TokenTypes.VARIABLE_DEF,
             TokenTypes.PARAMETER_DEF,
         };
     }
 
     @Override
     protected final boolean mustCheckName(DetailAST ast)
     {
         final DetailAST modifiersAST =
             ast.findFirstToken(TokenTypes.MODIFIERS);
-        final boolean isFinal = (modifiersAST != null)
+        final boolean isFinal = modifiersAST != null
             && modifiersAST.branchContains(TokenTypes.FINAL);
-        return (isFinal && ScopeUtils.isLocalVariableDef(ast));
+        return isFinal && ScopeUtils.isLocalVariableDef(ast);
     }
 }
