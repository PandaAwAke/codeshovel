diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
index 63cc685f3..5df05bfaf 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
@@ -530,102 +530,100 @@ public class CheckstyleAntTask extends Task {
 
         return allFiles;
     }
 
     /**
      * Scans the given path and retrieves all files for the given path.
      *
      * @param path      A path to scan.
      * @param pathIndex The index of the given path. Used in log messages only.
      * @return A list of files, extracted from the given path.
      */
     private List<File> scanPath(Path path, int pathIndex) {
         final String[] resources = path.list();
         log(pathIndex + ") Scanning path " + path, Project.MSG_VERBOSE);
         final List<File> allFiles = new ArrayList<>();
         int concreteFilesCount = 0;
 
         for (String resource : resources) {
             final File file = new File(resource);
             if (file.isFile()) {
                 concreteFilesCount++;
                 allFiles.add(file);
             }
             else {
                 final DirectoryScanner scanner = new DirectoryScanner();
                 scanner.setBasedir(file);
                 scanner.scan();
                 final List<File> scannedFiles = retrieveAllScannedFiles(scanner, pathIndex);
                 allFiles.addAll(scannedFiles);
             }
         }
 
         if (concreteFilesCount > 0) {
             log(String.format(Locale.ROOT, "%d) Adding %d files from path %s",
                 pathIndex, concreteFilesCount, path), Project.MSG_VERBOSE);
         }
 
         return allFiles;
     }
 
     /**
      * Returns the list of files (full path name) to process.
      * @return the list of files included via the filesets.
      */
     protected List<File> scanFileSets() {
         final List<File> allFiles = new ArrayList<>();
 
         for (int i = 0; i < fileSets.size(); i++) {
             final FileSet fileSet = fileSets.get(i);
             final DirectoryScanner scanner = fileSet.getDirectoryScanner(getProject());
-            scanner.scan();
-
             final List<File> scannedFiles = retrieveAllScannedFiles(scanner, i);
             allFiles.addAll(scannedFiles);
         }
 
         return allFiles;
     }
 
     /**
      * Retrieves all matched files from the given scanner.
      *
      * @param scanner  A directory scanner. Note, that {@link DirectoryScanner#scan()}
      *                 must be called before calling this method.
      * @param logIndex A log entry index. Used only for log messages.
      * @return A list of files, retrieved from the given scanner.
      */
     private List<File> retrieveAllScannedFiles(DirectoryScanner scanner, int logIndex) {
         final String[] fileNames = scanner.getIncludedFiles();
         log(String.format(Locale.ROOT, "%d) Adding %d files from directory %s",
             logIndex, fileNames.length, scanner.getBasedir()), Project.MSG_VERBOSE);
 
         return Arrays.stream(fileNames)
             .map(name -> scanner.getBasedir() + File.separator + name)
             .map(File::new)
             .collect(Collectors.toList());
     }
 
     /**
      * Poor mans enumeration for the formatter types.
      * @author Oliver Burn
      */
     public static class FormatterType extends EnumeratedAttribute {
         /** My possible values. */
         private static final String[] VALUES = {E_XML, E_PLAIN};
 
         @Override
         public String[] getValues() {
             return VALUES.clone();
         }
     }
 
     /**
      * Details about a formatter to be used.
      * @author Oliver Burn
      */
     public static class Formatter {
         /** The formatter type. */
         private FormatterType type;
         /** The file to output to. */
         private File toFile;
         /** Whether or not the write to the named file. */
