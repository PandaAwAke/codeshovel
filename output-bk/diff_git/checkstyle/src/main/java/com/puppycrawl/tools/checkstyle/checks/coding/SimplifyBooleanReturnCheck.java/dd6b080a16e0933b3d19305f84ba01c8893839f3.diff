diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java
index a1157deb8..ddd7dc099 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java
@@ -32,101 +32,100 @@ import com.puppycrawl.tools.checkstyle.api.DetailAST;
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="SimplifyBooleanReturn"/&gt;
  * </pre>
  * @author Lars KÃ¼hne
  */
 public class SimplifyBooleanReturnCheck
     extends Check
 {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "simplify.boolreturn";
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.LITERAL_IF};
     }
 
     @Override
     public int[] getAcceptableTokens()
     {
         return new int[] {TokenTypes.LITERAL_IF};
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
         // LITERAL_IF has the following four or five children:
         // '('
         // condition
         // ')'
         // thenStatement
         // [ LITERAL_ELSE (with the elseStatement as a child) ]
 
         // don't bother if this is not if then else
         final AST elseLiteral =
             ast.findFirstToken(TokenTypes.LITERAL_ELSE);
         if (elseLiteral == null) {
             return;
         }
         final AST elseStatement = elseLiteral.getFirstChild();
 
         // skip '(' and ')'
-        // TODO: Introduce helpers in DetailAST
         final AST condition = ast.getFirstChild().getNextSibling();
         final AST thenStatement = condition.getNextSibling().getNextSibling();
 
         if (returnsOnlyBooleanLiteral(thenStatement)
             && returnsOnlyBooleanLiteral(elseStatement))
         {
             log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY);
         }
     }
 
     /**
      * Returns if an AST is a return statment with a boolean literal
      * or a compound statement that contains only such a return statement.
      *
      * Returns <code>true</code> iff ast represents
      * <br/>
      * <pre>
      * return true/false;
      * </pre>
      * or
      * <br/>
      * <pre>
      * {
      *   return true/false;
      * }
      * </pre>
      *
      * @param ast the sytax tree to check
      * @return if ast is a return statment with a boolean literal.
      */
     private static boolean returnsOnlyBooleanLiteral(AST ast)
     {
         if (isBooleanLiteralReturnStatement(ast)) {
             return true;
         }
 
         final AST firstStmnt = ast.getFirstChild();
         return isBooleanLiteralReturnStatement(firstStmnt);
     }
 
     /**
      * Returns if an AST is a return statment with a boolean literal.
      *
      * Returns <code>true</code> iff ast represents
      * <br/>
      * <pre>
      * return true/false;
      * </pre>
      *
      * @param ast the sytax tree to check
