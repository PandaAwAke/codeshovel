diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java
index 55d012a70..fd0c2134b 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java
@@ -1,78 +1,80 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2016 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.utils;
 
 import java.util.ArrayList;
 import java.util.List;
 import java.util.regex.Pattern;
 
+import antlr.collections.AST;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FullIdent;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifier;
 
 /**
  * Contains utility methods for the checks.
  *
  * @author Oliver Burn
  * @author <a href="mailto:simon@redhillconsulting.com.au">Simon Harris</a>
  * @author o_sukhodolsky
  */
 public final class CheckUtils {
     // constants for parseDouble()
     /** Octal radix. */
     private static final int BASE_8 = 8;
 
     /** Decimal radix. */
     private static final int BASE_10 = 10;
 
     /** Hex radix. */
     private static final int BASE_16 = 16;
 
     /** Maximum children allowed in setter/getter. */
     private static final int SETTER_GETTER_MAX_CHILDREN = 7;
 
     /** Maximum nodes allowed in a body of setter. */
     private static final int SETTER_BODY_SIZE = 3;
 
     /** Maximum nodes allowed in a body of getter. */
     private static final int GETTER_BODY_SIZE = 2;
 
     /** Pattern matching underscore characters ('_'). */
     private static final Pattern UNDERSCORE_PATTERN = Pattern.compile("_");
 
     /** Pattern matching names of setter methods. */
     private static final Pattern SETTER_PATTERN = Pattern.compile("^set[A-Z].*");
 
     /** Pattern matching names of getter methods. */
     private static final Pattern GETTER_PATTERN = Pattern.compile("^(is|get)[A-Z].*");
 
     /** Prevent instances. */
     private CheckUtils() {
     }
 
     /**
      * Creates {@code FullIdent} for given type node.
      * @param typeAST a type node.
      * @return {@code FullIdent} for given type.
      */
     public static FullIdent createFullType(DetailAST typeAST) {
         final DetailAST arrayDeclaratorAST =
             typeAST.findFirstToken(TokenTypes.ARRAY_DECLARATOR);
         final FullIdent fullType;
@@ -378,51 +380,81 @@ public final class CheckUtils {
 
             final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);
             final boolean noParams = params.getChildCount(TokenTypes.PARAMETER_DEF) == 0;
 
             if (matchesGetterFormat && noVoidReturnType && noParams) {
                 // Now verify that the body consists of:
                 // SLIST -> RETURN
                 // RCURLY
                 final DetailAST slist = ast.findFirstToken(TokenTypes.SLIST);
 
                 if (slist != null && slist.getChildCount() == GETTER_BODY_SIZE) {
                     final DetailAST expr = slist.getFirstChild();
                     getterMethod = expr.getType() == TokenTypes.LITERAL_RETURN;
                 }
             }
         }
         return getterMethod;
     }
 
     /**
      * Checks whether a method is a not void one.
      *
      * @param methodDefAst the method node.
      * @return true if method is a not void one.
      */
     public static boolean isNonVoidMethod(DetailAST methodDefAst) {
         boolean returnValue = false;
         if (methodDefAst.getType() == TokenTypes.METHOD_DEF) {
             final DetailAST typeAST = methodDefAst.findFirstToken(TokenTypes.TYPE);
             if (typeAST.findFirstToken(TokenTypes.LITERAL_VOID) == null) {
                 returnValue = true;
             }
         }
         return returnValue;
     }
 
     /**
      * Checks whether a parameter is a receiver.
      *
      * @param parameterDefAst the parameter node.
      * @return true if the parameter is a receiver.
      */
     public static boolean isReceiverParameter(DetailAST parameterDefAst) {
         boolean returnValue = false;
         if (parameterDefAst.getType() == TokenTypes.PARAMETER_DEF
                 && parameterDefAst.findFirstToken(TokenTypes.IDENT) == null) {
             returnValue = parameterDefAst.branchContains(TokenTypes.LITERAL_THIS);
         }
         return returnValue;
     }
+
+    /**
+     * Returns {@link AccessModifier} based on the information about access modifier
+     * taken from the given token of type {@link TokenTypes#MODIFIERS}.
+     * @param modifiersToken token of type {@link TokenTypes#MODIFIERS}.
+     * @return {@link AccessModifier}.
+     */
+    public static AccessModifier getAccessModifierFromModifiersToken(DetailAST modifiersToken) {
+        if (modifiersToken == null || modifiersToken.getType() != TokenTypes.MODIFIERS) {
+            throw new IllegalArgumentException("expected non-null AST-token with type 'MODIFIERS'");
+        }
+
+        // default access modifier
+        AccessModifier accessModifier = AccessModifier.PACKAGE;
+        for (AST token = modifiersToken.getFirstChild(); token != null;
+             token = token.getNextSibling()) {
+
+            final int tokenType = token.getType();
+            if (tokenType == TokenTypes.LITERAL_PUBLIC) {
+                accessModifier = AccessModifier.PUBLIC;
+            }
+            else if (tokenType == TokenTypes.LITERAL_PROTECTED) {
+                accessModifier = AccessModifier.PROTECTED;
+            }
+            else if (tokenType == TokenTypes.LITERAL_PRIVATE) {
+                accessModifier = AccessModifier.PRIVATE;
+            }
+        }
+        return accessModifier;
+    }
 }
