diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceBeforeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceBeforeCheck.java
index 1bac8b2da..cb919fffd 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceBeforeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceBeforeCheck.java
@@ -15,115 +15,115 @@
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks.whitespace;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * <p>
  * Checks that there is no whitespace before a token.
  * More specifically, it checks that it is not preceded with whitespace,
  * or (if linebreaks are allowed) all characters on the line before are
  * whitespace. To allow linebreaks before a token, set property
  * allowLineBreaks to true.
  * </p>
  * <p> By default the check will check the following operators:
  *  {@link TokenTypes#SEMI SEMI},
  *  {@link TokenTypes#POST_DEC POST_DEC},
  *  {@link TokenTypes#POST_INC POST_INC}.
  * {@link TokenTypes#DOT DOT} is also an acceptable token in a configuration
  * of this check.
  * </p>
  *
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="NoWhitespaceBefore"/&gt;
  * </pre>
  * <p> An example of how to configure the check to allow linebreaks before
  * a {@link TokenTypes#DOT DOT} token is:
  * </p>
  * <pre>
  * &lt;module name="NoWhitespaceBefore"&gt;
  *     &lt;property name="tokens" value="DOT"/&gt;
  *     &lt;property name="allowLineBreaks" value="true"/&gt;
  * &lt;/module&gt;
  * </pre>
  * @author Rick Giles
  * @author lkuehne
  * @version 1.0
  */
 public class NoWhitespaceBeforeCheck
     extends Check
 {
     /** Whether whitespace is allowed if the AST is at a linebreak */
-    private boolean mAllowLineBreaks;
+    private boolean allowLineBreaks;
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.SEMI,
             TokenTypes.POST_INC,
             TokenTypes.POST_DEC,
         };
     }
 
     @Override
     public int[] getAcceptableTokens()
     {
         return new int[] {
             TokenTypes.SEMI,
             TokenTypes.POST_INC,
             TokenTypes.POST_DEC,
             TokenTypes.DOT,
         };
     }
 
     @Override
-    public void visitToken(DetailAST aAST)
+    public void visitToken(DetailAST ast)
     {
-        final String line = getLine(aAST.getLineNo() - 1);
-        final int before = aAST.getColumnNo() - 1;
+        final String line = getLine(ast.getLineNo() - 1);
+        final int before = ast.getColumnNo() - 1;
 
         if ((before < 0) || Character.isWhitespace(line.charAt(before))) {
 
             // empty FOR initializer?
-            if (aAST.getType() == TokenTypes.SEMI) {
-                final DetailAST sibling = aAST.getPreviousSibling();
+            if (ast.getType() == TokenTypes.SEMI) {
+                final DetailAST sibling = ast.getPreviousSibling();
                 if ((sibling != null)
                         && (sibling.getType() == TokenTypes.FOR_INIT)
                         && (sibling.getChildCount() == 0))
                 {
                     return;
                 }
             }
 
-            boolean flag = !mAllowLineBreaks;
+            boolean flag = !allowLineBreaks;
             // verify all characters before '.' are whitespace
             for (int i = 0; !flag && (i < before); i++) {
                 if (!Character.isWhitespace(line.charAt(i))) {
                     flag = true;
                 }
             }
             if (flag) {
-                log(aAST.getLineNo(), before, "ws.preceded", aAST.getText());
+                log(ast.getLineNo(), before, "ws.preceded", ast.getText());
             }
         }
     }
 
     /**
      * Control whether whitespace is flagged at linebreaks.
-     * @param aAllowLineBreaks whether whitespace should be
+     * @param allowLineBreaks whether whitespace should be
      * flagged at linebreaks.
      */
-    public void setAllowLineBreaks(boolean aAllowLineBreaks)
+    public void setAllowLineBreaks(boolean allowLineBreaks)
     {
-        mAllowLineBreaks = aAllowLineBreaks;
+        this.allowLineBreaks = allowLineBreaks;
     }
 }
