diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java
index 80c4257da..f221ef5a2 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java
@@ -166,111 +166,111 @@ public class AvoidEscapedUnicodeCharactersCheck
     private Map<Integer, TextBlock> singlelineComments;
     /** C style comments. */
     private Map<Integer, List<TextBlock>> blockComments;
 
     /** Allow use escapes for non-printable(control) characters.  */
     private boolean allowEscapesForControlCharacters;
 
     /** Allow use escapes if trail comment is present. */
     private boolean allowByTailComment;
 
     /** Allow if all characters in literal are escaped. */
     private boolean allowIfAllCharactersEscaped;
 
     /** Allow escapes for space literals. */
     private boolean allowNonPrintableEscapes;
 
     /**
      * Set allowIfAllCharactersEscaped.
      * @param allow user's value.
      */
     public final void setAllowEscapesForControlCharacters(boolean allow) {
         allowEscapesForControlCharacters = allow;
     }
 
     /**
      * Set allowByTailComment.
      * @param allow user's value.
      */
     public final void setAllowByTailComment(boolean allow) {
         allowByTailComment = allow;
     }
 
     /**
      * Set allowIfAllCharactersEscaped.
      * @param allow user's value.
      */
     public final void setAllowIfAllCharactersEscaped(boolean allow) {
         allowIfAllCharactersEscaped = allow;
     }
 
     /**
      * Set allowSpaceEscapes.
      * @param allow user's value.
      */
     public final void setAllowNonPrintableEscapes(boolean allow) {
         allowNonPrintableEscapes = allow;
     }
 
     @Override
     public int[] getDefaultTokens() {
-        return getAcceptableTokens();
+        return getRequiredTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
-        return new int[] {TokenTypes.STRING_LITERAL, TokenTypes.CHAR_LITERAL};
+        return getRequiredTokens();
     }
 
     @Override
     public int[] getRequiredTokens() {
-        return getAcceptableTokens();
+        return new int[] {TokenTypes.STRING_LITERAL, TokenTypes.CHAR_LITERAL};
     }
 
     @Override
     public void beginTree(DetailAST rootAST) {
         singlelineComments = getFileContents().getSingleLineComments();
         blockComments = getFileContents().getBlockComments();
     }
 
     @Override
     public void visitToken(DetailAST ast) {
 
         final String literal = ast.getText();
 
         if (hasUnicodeChar(literal) && !(allowByTailComment && hasTrailComment(ast)
                 || isAllCharactersEscaped(literal)
                 || allowEscapesForControlCharacters
                         && isOnlyUnicodeValidChars(literal, UNICODE_CONTROL)
                 || allowNonPrintableEscapes
                         && isOnlyUnicodeValidChars(literal, NON_PRINTABLE_CHARS))) {
             log(ast.getLineNo(), MSG_KEY);
         }
     }
 
     /**
      * Checks if literal has Unicode chars.
      * @param literal String literal.
      * @return true if literal has Unicode chars.
      */
     private static boolean hasUnicodeChar(String literal) {
         final String literalWithoutEscapedBackslashes =
                 ESCAPED_BACKSLASH.matcher(literal).replaceAll("");
         return UNICODE_REGEXP.matcher(literalWithoutEscapedBackslashes).find();
     }
 
     /**
      * Check if String literal contains Unicode control chars.
      * @param literal String literal.
      * @param pattern RegExp for valid characters.
      * @return true, if String literal contains Unicode control chars.
      */
     private static boolean isOnlyUnicodeValidChars(String literal, Pattern pattern) {
         final int unicodeMatchesCounter =
                 countMatches(UNICODE_REGEXP, literal);
         final int unicodeValidMatchesCounter =
                 countMatches(pattern, literal);
         return unicodeMatchesCounter - unicodeValidMatchesCounter == 0;
     }
 
     /**
      * Check if trail comment is present after ast token.
