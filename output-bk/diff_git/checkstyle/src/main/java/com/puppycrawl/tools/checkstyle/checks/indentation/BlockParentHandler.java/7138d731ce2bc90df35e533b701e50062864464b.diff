diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java
index 780a10259..b3e273a15 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java
@@ -126,153 +126,149 @@ public class BlockParentHandler extends ExpressionHandler
     protected boolean toplevelMustStartLine()
     {
         return true;
     }
 
     /**
      * Determines if this block expression has curly braces.
      *
      * @return true if curly braces are present, false otherwise
      */
     protected boolean hasCurlys()
     {
         return getLCurly() != null && getRCurly() != null;
     }
 
     /**
      * Get the left curly brace portion of the expression we are handling.
      *
      * @return the left curly brace expression
      */
     protected DetailAST getLCurly()
     {
         return getMainAst().findFirstToken(TokenTypes.SLIST);
     }
 
     /**
      * Get the right curly brace portion of the expression we are handling.
      *
      * @return the right curly brace expression
      */
     protected DetailAST getRCurly()
     {
         final DetailAST slist = getMainAst().findFirstToken(TokenTypes.SLIST);
         if (slist == null) {
             return null;
         }
 
         return slist.findFirstToken(TokenTypes.RCURLY);
     }
 
     /**
      * Check the indentation of the left curly brace.
      */
     protected void checkLCurly()
     {
         // the lcurly can either be at the correct indentation, or nested
         // with a previous expression
         final DetailAST lcurly = getLCurly();
         final int lcurlyPos = expandedTabsColumnNo(lcurly);
 
-        if (lcurly == null
-            || curlyLevel().accept(lcurlyPos)
-            || !startsLine(lcurly))
-        {
+        if (curlyLevel().accept(lcurlyPos) || !startsLine(lcurly)) {
             return;
         }
 
         logError(lcurly, "lcurly", lcurlyPos);
     }
 
     /**
      * Get the expected indentation level for the curly braces.
      *
      * @return the curly brace indentation level
      */
     protected IndentLevel curlyLevel()
     {
         return new IndentLevel(getLevel(), getBraceAdjustement());
     }
 
     /**
      * Determines if the right curly brace must be at the start of the line.
      *
      * @return true
      */
     protected boolean rcurlyMustStart()
     {
         return true;
     }
 
     /**
      * Determines if child elements within the expression may be nested.
      *
      * @return false
      */
     protected boolean childrenMayNest()
     {
         return false;
     }
 
     /**
      * Check the indentation of the right curly brace.
      */
     protected void checkRCurly()
     {
         // the rcurly can either be at the correct indentation, or
         // on the same line as the lcurly
         final DetailAST lcurly = getLCurly();
         final DetailAST rcurly = getRCurly();
         final int rcurlyPos = expandedTabsColumnNo(rcurly);
 
-        if (rcurly == null
-            || curlyLevel().accept(rcurlyPos)
+        if (curlyLevel().accept(rcurlyPos)
             || !rcurlyMustStart() && !startsLine(rcurly)
             || areOnSameLine(rcurly, lcurly))
         {
             return;
         }
         logError(rcurly, "rcurly", rcurlyPos, curlyLevel());
     }
 
     /**
      * Get the child element that is not a list of statements.
      *
      * @return the non-list child element
      */
     protected DetailAST getNonlistChild()
     {
         return getMainAst().findFirstToken(TokenTypes.RPAREN).getNextSibling();
     }
 
     /**
      * Check the indentation level of a child that is not a list of statements.
      */
     private void checkNonlistChild()
     {
         final DetailAST nonlist = getNonlistChild();
         if (nonlist == null) {
             return;
         }
 
         final IndentLevel expected = new IndentLevel(getLevel(), getBasicOffset());
         checkExpressionSubtree(nonlist, expected, false, false);
     }
 
     /**
      * Get the child element representing the list of statements.
      *
      * @return the statement list child
      */
     protected DetailAST getListChild()
     {
         return getMainAst().findFirstToken(TokenTypes.SLIST);
     }
 
     /**
      * Get the right parenthesis portion of the expression we are handling.
      *
      * @return the right parenthis expression
      */
     protected DetailAST getRParen()
     {
         return getMainAst().findFirstToken(TokenTypes.RPAREN);
