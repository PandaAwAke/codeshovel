diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java
index f30e745c8..d73ee30ae 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java
@@ -1,80 +1,82 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2015 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.coding;
 
 import com.google.common.base.Objects;
 import com.google.common.collect.Sets;
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.ScopeUtils;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.Utils;
 
+import java.util.Locale;
 import java.util.Set;
 import java.util.regex.Pattern;
+
 import org.apache.commons.beanutils.ConversionException;
 
 /**
  * <p>Checks that a local variable or a parameter does not shadow
  * a field that is defined in the same class.
  * <p>
  * An example of how to configure the check is:
  * <pre>
  * &lt;module name="HiddenField"/&gt;
  * </pre>
  * <p>
  * An example of how to configure the check so that it checks variables but not
  * parameters is:
  * <pre>
  * &lt;module name="HiddenField"&gt;
  *    &lt;property name="tokens" value="VARIABLE_DEF"/&gt;
  * &lt;/module&gt;
  * </pre>
  * <p>
  * An example of how to configure the check so that it ignores the parameter of
  * a setter method is:
  * <pre>
  * &lt;module name="HiddenField"&gt;
  *    &lt;property name="ignoreSetter" value="true"/&gt;
  * &lt;/module&gt;
  * </pre>
  * <p>
  * A method is recognized as a setter if it is in the following form
  * <pre>
  * ${returnType} set${Name}(${anyType} ${name}) { ... }
  * </pre>
  * where ${anyType} is any primitive type, class or interface name;
  * ${name} is name of the variable that is being set and ${Name} its
  * capitalized form that appears in the method name. By default it is expected
  * that setter returns void, i.e. ${returnType} is 'void'. For example
  * <pre>
  * void setTime(long time) { ... }
  * </pre>
  * Any other return types will not let method match a setter pattern. However,
  * by setting <em>setterCanReturnItsClass</em> property to <em>true</em>
  * definition of a setter is expanded, so that setter return type can also be
  * a class in which setter is declared. For example
  * <pre>
  * class PageBuilder {
  *   PageBuilder setName(String name) { ... }
  * }
  * </pre>
  * Such methods are known as chain-setters and a common when Builder-pattern
  * is used. Property <em>setterCanReturnItsClass</em> has effect only if
  * <em>ignoreSetter</em> is set to true.
@@ -367,101 +369,101 @@ public class HiddenFieldCheck
      * @return true of false indicating of method is a setter or not.
      */
     private boolean isSetterMethod(DetailAST aMethodAST, String aName)
     {
         final String methodName =
             aMethodAST.findFirstToken(TokenTypes.IDENT).getText();
         boolean isSetterMethod = false;
 
         if (methodName.equals("set" + capitalize(aName))) {
             // method name did match set${Name}(${anyType} ${aName})
             // where ${Name} is capitalized version of ${aName}
             // therefore this method is potentially a setter
             final DetailAST typeAST = aMethodAST.findFirstToken(TokenTypes.TYPE);
             final String returnType = typeAST.getFirstChild().getText();
             if (typeAST.branchContains(TokenTypes.LITERAL_VOID)
                 || setterCanReturnItsClass && currentFrame.embeddedIn(returnType))
             {
                 // this method has signature
                 //
                 //     void set${Name}(${anyType} ${name})
                 //
                 // and therefore considered to be a setter
                 //
                 // or
                 //
                 // return type is not void, but it is the same as the class
                 // where method is declared and and mSetterCanReturnItsClass
                 // is set to true
                 isSetterMethod = true;
             }
         }
 
         return isSetterMethod;
     }
 
     /**
      * Capitalizes a given property name the way we expect to see it in
      * a setter name.
      * @param name a property name
      * @return capitalized property name
      */
     private static String capitalize(final String name)
     {
         String setterName = name;
         // we should not capitalize the first character if the second
         // one is a capital one, since according to JavBeans spec
         // setXYzz() is a setter for XYzz property, not for xYzz one.
         if (name != null && (name.length() == 1
                 || name.length() > 1 && !Character.isUpperCase(name.charAt(1))))
         {
-            setterName = name.substring(0, 1).toUpperCase() + name.substring(1);
+            setterName = name.substring(0, 1).toUpperCase(Locale.ENGLISH) + name.substring(1);
         }
         return setterName;
     }
 
     /**
      * Decides whether to ignore an AST node that is the parameter of a
      * constructor.
      * @param ast the AST to check.
      * @return true if ast should be ignored because check property
      * ignoreConstructorParameter is true and ast is a constructor parameter.
      */
     private boolean isIgnoredConstructorParam(DetailAST ast)
     {
         boolean result = false;
         if (ast.getType() == TokenTypes.PARAMETER_DEF
             && ignoreConstructorParameter)
         {
             final DetailAST parametersAST = ast.getParent();
             final DetailAST constructorAST = parametersAST.getParent();
             result = constructorAST.getType() == TokenTypes.CTOR_DEF;
         }
         return result;
     }
 
     /**
      * Decides whether to ignore an AST node that is the parameter of an
      * abstract method.
      * @param ast the AST to check.
      * @return true if ast should be ignored because check property
      * ignoreAbstactMethods is true and ast is a parameter of abstract
      * methods.
      */
     private boolean isIgnoredParamOfAbstractMethod(DetailAST ast)
     {
         boolean result = false;
         if (ast.getType() == TokenTypes.PARAMETER_DEF
             && ignoreAbstractMethods)
         {
             final DetailAST method = ast.getParent().getParent();
             if (method.getType() == TokenTypes.METHOD_DEF) {
                 final DetailAST mods = method.findFirstToken(TokenTypes.MODIFIERS);
                 result = mods != null && mods.branchContains(TokenTypes.ABSTRACT);
             }
         }
         return result;
     }
 
     /**
      * Set the ignore format to the specified regular expression.
      * @param format a <code>String</code> value
