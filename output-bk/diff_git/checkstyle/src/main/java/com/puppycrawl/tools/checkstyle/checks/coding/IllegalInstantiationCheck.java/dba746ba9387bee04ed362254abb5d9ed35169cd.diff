diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java
index 26306ff22..0852da77a 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java
@@ -22,100 +22,103 @@ package com.puppycrawl.tools.checkstyle.checks.coding;
 import antlr.collections.AST;
 import com.google.common.collect.Sets;
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FullIdent;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.Utils;
 import java.util.Set;
 import java.util.StringTokenizer;
 
 /**
  * <p>
  * Checks for illegal instantiations where a factory method is preferred.
  * </p>
  * <p>
  * Rationale: Depending on the project, for some classes it might be
  * preferable to create instances through factory methods rather than
  * calling the constructor.
  * </p>
  * <p>
  * A simple example is the java.lang.Boolean class, to save memory and CPU
  * cycles it is preferable to use the predeifined constants TRUE and FALSE.
  * Constructor invocations should be replaced by calls to Boolean.valueOf().
  * </p>
  * <p>
  * Some extremely performance sensitive projects may require the use of factory
  * methods for other classes as well, to enforce the usage of number caches or
  * object pools.
  * </p>
  * <p>
  * Limitations: It is currently not possible to specify array classes.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="IllegalInstantiation"/&gt;
  * </pre>
  * @author lkuehne
  */
 public class IllegalInstantiationCheck
     extends Check
 {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "instantiation.avoid";
 
+    /** {@link java.lang} package as string */
+    private static final String JAVA_LANG = "java.lang.";
+
     /** Set of fully qualified classnames. E.g. "java.lang.Boolean" */
     private final Set<String> illegalClasses = Sets.newHashSet();
 
     /** name of the package */
     private String pkgName;
 
     /** the imports for the file */
     private final Set<FullIdent> imports = Sets.newHashSet();
 
     /** the class names defined in the file */
     private final Set<String> classNames = Sets.newHashSet();
 
     /** the instantiations in the file */
     private final Set<DetailAST> instantiations = Sets.newHashSet();
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.IMPORT,
             TokenTypes.LITERAL_NEW,
             TokenTypes.PACKAGE_DEF,
             TokenTypes.CLASS_DEF,
         };
     }
 
     @Override
     public int[] getAcceptableTokens()
     {
         // Return an empty array to not allow user to change configuration.
         return new int[] {};
     }
 
     @Override
     public int[] getRequiredTokens()
     {
         return new int[] {
             TokenTypes.IMPORT,
             TokenTypes.LITERAL_NEW,
             TokenTypes.PACKAGE_DEF,
         };
     }
 
     @Override
     public void beginTree(DetailAST rootAST)
     {
         super.beginTree(rootAST);
         pkgName = null;
         imports.clear();
         instantiations.clear();
@@ -188,116 +191,114 @@ public class IllegalInstantiationCheck
                 FullIdent.createFullIdent(packageNameAST);
         pkgName = packageIdent.getText();
     }
 
     /**
      * Collects a "new" token.
      * @param ast the "new" token
      */
     private void processLiteralNew(DetailAST ast)
     {
         if (ast.getParent().getType() == TokenTypes.METHOD_REF) {
             return;
         }
         instantiations.add(ast);
     }
 
     /**
      * Processes one of the collected "new" tokens when treewalking
      * has finished.
      * @param ast the "new" token.
      */
     private void postprocessLiteralNew(DetailAST ast)
     {
         final DetailAST typeNameAST = ast.getFirstChild();
         final AST nameSibling = typeNameAST.getNextSibling();
         if (nameSibling != null
                 && nameSibling.getType() == TokenTypes.ARRAY_DECLARATOR)
         {
             // ast == "new Boolean[]"
             return;
         }
 
         final FullIdent typeIdent = FullIdent.createFullIdent(typeNameAST);
         final String typeName = typeIdent.getText();
         final int lineNo = ast.getLineNo();
         final int colNo = ast.getColumnNo();
         final String fqClassName = getIllegalInstantiation(typeName);
         if (fqClassName != null) {
             log(lineNo, colNo, MSG_KEY, fqClassName);
         }
     }
 
     /**
      * Checks illegal instantiations.
      * @param className instantiated class, may or may not be qualified
      * @return the fully qualified class name of className
      * or null if instantiation of className is OK
      */
     private String getIllegalInstantiation(String className)
     {
-        final String javlang = "java.lang.";
-
         if (illegalClasses.contains(className)) {
             return className;
         }
 
         final int clsNameLen = className.length();
         final int pkgNameLen = pkgName == null ? 0 : pkgName.length();
 
         for (String illegal : illegalClasses) {
             final int illegalLen = illegal.length();
 
             // class from java.lang
-            if (illegalLen - javlang.length() == clsNameLen
+            if (illegalLen - JAVA_LANG.length() == clsNameLen
                 && illegal.endsWith(className)
-                && illegal.startsWith(javlang))
+                && illegal.startsWith(JAVA_LANG))
             {
                 // java.lang needs no import, but a class without import might
                 // also come from the same file or be in the same package.
                 // E.g. if a class defines an inner class "Boolean",
                 // the expression "new Boolean()" refers to that class,
                 // not to java.lang.Boolean
 
                 final boolean isSameFile = classNames.contains(className);
 
                 boolean isSamePackage = false;
                 try {
                     final ClassLoader classLoader = getClassLoader();
                     if (classLoader != null) {
                         final String fqName = pkgName + "." + className;
                         classLoader.loadClass(fqName);
                         // no ClassNotFoundException, fqName is a known class
                         isSamePackage = true;
                     }
                 }
                 catch (final ClassNotFoundException ex) {
                     // not a class from the same package
                     isSamePackage = false;
                 }
 
                 if (!(isSameFile || isSamePackage)) {
                     return illegal;
                 }
             }
 
             // class from same package
 
             // the toplevel package (pkgName == null) is covered by the
             // "illegalInsts.contains(className)" check above
 
             // the test is the "no garbage" version of
             // illegal.equals(pkgName + "." + className)
             if (pkgName != null
                 && clsNameLen == illegalLen - pkgNameLen - 1
                 && illegal.charAt(pkgNameLen) == '.'
                 && illegal.endsWith(className)
                 && illegal.startsWith(pkgName))
             {
                 return illegal;
             }
             // import statements
             for (FullIdent importLineText : imports) {
                 final String importArg = importLineText.getText();
                 if (importArg.endsWith(".*")) {
                     final String fqClass =
                         importArg.substring(0, importArg.length() - 1)
