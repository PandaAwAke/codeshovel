diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filefilters/BeforeExecutionExclusionFileFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filefilters/BeforeExecutionExclusionFileFilter.java
index 39dea8fb9..77fe7c4cd 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filefilters/BeforeExecutionExclusionFileFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filefilters/BeforeExecutionExclusionFileFilter.java
@@ -35,55 +35,60 @@ import com.puppycrawl.tools.checkstyle.api.BeforeExecutionFileFilter;
  * checked for violations. Users could have files that are in these sub-directories that shouldn't
  * be processed with their checkstyle configuration for various reasons, one of which is a valid
  * Java file that won't pass Checkstyle's parser. When Checkstyle tries to parse a Java file and
  * fails, it will throw an {@code Exception} and halt parsing any more files for violations.
  * An example of a valid Java file Checkstyle can't parse is JDK 9's {@code module-info.java}.
  * This file filter will exclude these problem files from being parsed, allowing the rest of the
  * files to run normal and be validated.
  * </p>
  *
  * <p>
  * <b>Note:</b> When a file is excluded from the utility, it is excluded from all Checks and no
  * testing for violations will be performed on them.
  * </p>
  *
  * <p>
  * Check have following options:
  * </p>
  * <ul>
  * <li>
  * fileNamePattern - Regular expression to match the file name against. Default value is null.</li>
  * </ul>
  * <br>
  *
  * <p>
  * To configure the filter to exclude all 'module-info.java' files:
  * </p>
  *
  * <pre>
  * &lt;module name=&quot;BeforeExecutionExclusionFileFilter&quot;&gt;
  *   &lt;property name=&quot;fileNamePattern&quot; value=&quot;module\-info\.java$&quot;/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * @author Richard Veach
  */
 public final class BeforeExecutionExclusionFileFilter extends AutomaticBean
         implements BeforeExecutionFileFilter {
 
     /** Filename of exclusion. */
     private Pattern fileNamePattern;
 
     /**
      * Sets regular expression of the file to exclude.
      *
      * @param fileNamePattern regular expression of the excluded file.
      */
     public void setFileNamePattern(Pattern fileNamePattern) {
         this.fileNamePattern = fileNamePattern;
     }
 
+    @Override
+    protected void finishLocalSetup() {
+        // No code by default
+    }
+
     @Override
     public boolean accept(String uri) {
         return fileNamePattern == null || !fileNamePattern.matcher(uri).find();
     }
 }
