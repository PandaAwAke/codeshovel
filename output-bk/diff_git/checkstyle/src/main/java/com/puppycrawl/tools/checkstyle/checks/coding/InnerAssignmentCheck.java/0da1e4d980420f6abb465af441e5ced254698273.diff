diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java
index 57498efd8..6aec0b2b7 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java
@@ -86,113 +86,105 @@ public class InnerAssignmentCheck
     private static final int[][] ALLOWED_ASSIGMENT_IN_COMPARISON_CONTEXT = {
         {TokenTypes.EXPR, TokenTypes.LITERAL_WHILE, },
     };
 
     /**
      * The token types that identify comparison operators.
      */
     private static final int[] COMPARISON_TYPES = {
         TokenTypes.EQUAL,
         TokenTypes.GE,
         TokenTypes.GT,
         TokenTypes.LE,
         TokenTypes.LT,
         TokenTypes.NOT_EQUAL,
     };
 
     static {
         Arrays.sort(COMPARISON_TYPES);
     }
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.ASSIGN,            // '='
             TokenTypes.DIV_ASSIGN,        // "/="
             TokenTypes.PLUS_ASSIGN,       // "+="
             TokenTypes.MINUS_ASSIGN,      //"-="
             TokenTypes.STAR_ASSIGN,       // "*="
             TokenTypes.MOD_ASSIGN,        // "%="
             TokenTypes.SR_ASSIGN,         // ">>="
             TokenTypes.BSR_ASSIGN,        // ">>>="
             TokenTypes.SL_ASSIGN,         // "<<="
             TokenTypes.BXOR_ASSIGN,       // "^="
             TokenTypes.BOR_ASSIGN,        // "|="
             TokenTypes.BAND_ASSIGN,       // "&="
         };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public void visitToken(DetailAST ast) {
-        if (isInContext(ast, ALLOWED_ASSIGMENT_CONTEXT)) {
-            return;
+        if (!isInContext(ast, ALLOWED_ASSIGMENT_CONTEXT)
+                && !isInNoBraceControlStatement(ast)
+                && !isInWhileIdiom(ast)) {
+            log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY);
         }
-
-        if (isInNoBraceControlStatement(ast)) {
-            return;
-        }
-
-        if (isInWhileIdiom(ast)) {
-            return;
-        }
-
-        log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY);
     }
 
     /**
      * Determines if ast is in the body of a flow control statement without
      * braces. An example of such a statement would be
      * <p>
      * <pre>
      * if (y < 0)
      *     x = y;
      * </pre>
      * </p>
      * <p>
      * This leads to the following AST structure:
      * </p>
      * <p>
      * <pre>
      * LITERAL_IF
      *     LPAREN
      *     EXPR // test
      *     RPAREN
      *     EXPR // body
      *     SEMI
      * </pre>
      * </p>
      * <p>
      * We need to ensure that ast is in the body and not in the test.
      * </p>
      *
      * @param ast an assignment operator AST
      * @return whether ast is in the body of a flow control statement
      */
     private static boolean isInNoBraceControlStatement(DetailAST ast) {
         if (!isInContext(ast, CONTROL_CONTEXT)) {
             return false;
         }
         final DetailAST expr = ast.getParent();
         final AST exprNext = expr.getNextSibling();
         return exprNext.getType() == TokenTypes.SEMI;
     }
 
     /**
      * Tests whether the given AST is used in the "assignment in while test"
      * idiom.
      * <p>
      * <pre>
      * while ((b = is.read()) != -1) {
      *   // work with b
      * }
      * </pre>
      * </p>
