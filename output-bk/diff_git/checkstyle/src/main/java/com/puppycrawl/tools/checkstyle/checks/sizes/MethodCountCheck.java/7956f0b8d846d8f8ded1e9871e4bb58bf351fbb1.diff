diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java
index 1c9b1d56f..95cedf59a 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java
@@ -50,100 +50,101 @@ public final class MethodCountCheck extends AbstractCheck {
      */
     public static final String MSG_PACKAGE_METHODS = "too.many.packageMethods";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_PROTECTED_METHODS = "too.many.protectedMethods";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_PUBLIC_METHODS = "too.many.publicMethods";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_MANY_METHODS = "too.many.methods";
 
     /** Default maximum number of methods. */
     private static final int DEFAULT_MAX_METHODS = 100;
 
     /** Maintains stack of counters, to support inner types. */
     private final Deque<MethodCounter> counters = new ArrayDeque<>();
 
     /** Maximum private methods. */
     private int maxPrivate = DEFAULT_MAX_METHODS;
     /** Maximum package methods. */
     private int maxPackage = DEFAULT_MAX_METHODS;
     /** Maximum protected methods. */
     private int maxProtected = DEFAULT_MAX_METHODS;
     /** Maximum public methods. */
     private int maxPublic = DEFAULT_MAX_METHODS;
     /** Maximum total number of methods. */
     private int maxTotal = DEFAULT_MAX_METHODS;
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.CLASS_DEF,
             TokenTypes.ENUM_CONSTANT_DEF,
             TokenTypes.ENUM_DEF,
             TokenTypes.INTERFACE_DEF,
+            TokenTypes.ANNOTATION_DEF,
             TokenTypes.METHOD_DEF,
         };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return new int[] {TokenTypes.METHOD_DEF};
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         if (ast.getType() == TokenTypes.METHOD_DEF) {
             raiseCounter(ast);
         }
         else {
             final boolean inInterface = ast.getType() == TokenTypes.INTERFACE_DEF;
             counters.push(new MethodCounter(inInterface));
         }
     }
 
     @Override
     public void leaveToken(DetailAST ast) {
         if (ast.getType() == TokenTypes.CLASS_DEF
             || ast.getType() == TokenTypes.INTERFACE_DEF
             || ast.getType() == TokenTypes.ENUM_CONSTANT_DEF
             || ast.getType() == TokenTypes.ENUM_DEF) {
             final MethodCounter counter = counters.pop();
             checkCounters(counter, ast);
         }
     }
 
     /**
      * Determine the visibility modifier and raise the corresponding counter.
      * @param method
      *            The method-subtree from the AbstractSyntaxTree.
      */
     private void raiseCounter(DetailAST method) {
         final MethodCounter actualCounter = counters.peek();
         final DetailAST temp = method.findFirstToken(TokenTypes.MODIFIERS);
         final Scope scope = ScopeUtils.getScopeFromMods(temp);
         actualCounter.increment(scope);
     }
 
     /**
      * Check the counters and report violations.
      * @param counter the method counters to check
      * @param ast to report errors against.
      */
     private void checkCounters(MethodCounter counter, DetailAST ast) {
         checkMax(maxPrivate, counter.value(Scope.PRIVATE),
