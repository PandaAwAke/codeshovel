diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
index 51988066d..df2e0d2b7 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
@@ -179,105 +179,108 @@ public final class Main {
     public static void main(String... args) throws IOException {
         int errorCounter = 0;
         boolean cliViolations = false;
         // provide proper exit code based on results.
         final int exitWithCliViolation = -1;
         int exitStatus = 0;
 
         try {
             //parse CLI arguments
             final CommandLine commandLine = parseCli(args);
 
             // show version and exit if it is requested
             if (commandLine.hasOption(OPTION_V_NAME)) {
                 System.out.println("Checkstyle version: "
                         + Main.class.getPackage().getImplementationVersion());
                 exitStatus = 0;
             }
             else {
                 final List<File> filesToProcess = getFilesToProcess(getExclusions(commandLine),
                         commandLine.getArgs());
 
                 // return error if something is wrong in arguments
                 final List<String> messages = validateCli(commandLine, filesToProcess);
                 cliViolations = !messages.isEmpty();
                 if (cliViolations) {
                     exitStatus = exitWithCliViolation;
                     errorCounter = 1;
                     messages.forEach(System.out::println);
                 }
                 else {
                     errorCounter = runCli(commandLine, filesToProcess);
                     exitStatus = errorCounter;
                 }
             }
         }
         catch (ParseException pex) {
             // something wrong with arguments - print error and manual
             cliViolations = true;
             exitStatus = exitWithCliViolation;
             errorCounter = 1;
             System.out.println(pex.getMessage());
             printUsage();
         }
         catch (CheckstyleException ex) {
             exitStatus = EXIT_WITH_CHECKSTYLE_EXCEPTION_CODE;
             errorCounter = 1;
             ex.printStackTrace();
         }
         finally {
             // return exit code base on validation of Checker
-            if (errorCounter != 0 && !cliViolations) {
-                final LocalizedMessage errorCounterMessage = new LocalizedMessage(0,
-                        Definitions.CHECKSTYLE_BUNDLE, ERROR_COUNTER,
-                        new String[] {String.valueOf(errorCounter)}, null, Main.class, null);
-                System.out.println(errorCounterMessage.getMessage());
+            // two ifs exist till https://github.com/hcoles/pitest/issues/377
+            if (errorCounter != 0) {
+                if (!cliViolations) {
+                    final LocalizedMessage errorCounterMessage = new LocalizedMessage(0,
+                            Definitions.CHECKSTYLE_BUNDLE, ERROR_COUNTER,
+                            new String[] {String.valueOf(errorCounter)}, null, Main.class, null);
+                    System.out.println(errorCounterMessage.getMessage());
+                }
             }
             if (exitStatus != 0) {
                 System.exit(exitStatus);
             }
         }
     }
 
     /**
      * Parses and executes Checkstyle based on passed arguments.
      * @param args
      *        command line parameters
      * @return parsed information about passed parameters
      * @throws ParseException
      *         when passed arguments are not valid
      */
     private static CommandLine parseCli(String... args)
             throws ParseException {
         // parse the parameters
         final CommandLineParser clp = new DefaultParser();
         // always returns not null value
         return clp.parse(buildOptions(), args);
     }
 
     /**
      * Gets the list of exclusions provided through the command line argument.
      * @param commandLine command line object
      * @return List of exclusion patterns.
      */
     private static List<Pattern> getExclusions(CommandLine commandLine) {
         final List<Pattern> result = new ArrayList<>();
 
         if (commandLine.hasOption(OPTION_E_NAME)) {
             for (String value : commandLine.getOptionValues(OPTION_E_NAME)) {
                 result.add(Pattern.compile("^" + Pattern.quote(new File(value).getAbsolutePath())
                         + "$"));
             }
         }
         if (commandLine.hasOption(OPTION_X_NAME)) {
             for (String value : commandLine.getOptionValues(OPTION_X_NAME)) {
                 result.add(Pattern.compile(value));
             }
         }
 
         return result;
     }
 
     /**
      * Do validation of Command line options.
      * @param cmdLine command line object
      * @param filesToProcess List of files to process found from the command line.
