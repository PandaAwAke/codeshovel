diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
index 59d749f1c..5628025dc 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
@@ -7,127 +7,131 @@
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.api;
 
 import java.io.File;
 import java.util.Arrays;
 import java.util.List;
 import java.util.SortedSet;
 
 import com.puppycrawl.tools.checkstyle.Utils;
 
 /**
  * Provides common functionality for many FileSetChecks.
  *
  * @author lkuehne
  * @author oliver
  */
 public abstract class AbstractFileSetCheck
     extends AbstractViolationReporter
     implements FileSetCheck {
     /** The dispatcher errors are fired to. */
     private MessageDispatcher dispatcher;
 
     /** the file extensions that are accepted by this filter */
     private String[] fileExtensions = {};
 
     /** collects the error messages */
     private final LocalizedMessages messages = new LocalizedMessages();
 
     /**
      * Called to process a file that matches the specified file extensions.
      * @param file the file to be processed
      * @param lines an immutable list of the contents of the file.
      */
     protected abstract void processFiltered(File file, List<String> lines);
 
     /** {@inheritDoc} */
     @Override
     public void init() {
+        // No code by default, should be overridden only by demand at subclasses
     }
 
     /** {@inheritDoc} */
     @Override
     public void destroy() {
+        // No code by default, should be overridden only by demand at subclasses
     }
 
     /** {@inheritDoc} */
     @Override
     public void beginProcessing(String charset) {
+        // No code by default, should be overridden only by demand at subclasses
     }
 
     /** {@inheritDoc} */
     @Override
     public final SortedSet<LocalizedMessage> process(File file,
                                                    List<String> lines) {
         getMessageCollector().reset();
         // Process only what interested in
         if (Utils.fileExtensionMatches(file, fileExtensions)) {
             processFiltered(file, lines);
         }
         return getMessageCollector().getMessages();
     }
 
     /** {@inheritDoc} */
     @Override
     public void finishProcessing() {
+        // No code by default, should be overridden only by demand at subclasses
     }
 
     /** {@inheritDoc} */
     @Override
     public final void setMessageDispatcher(MessageDispatcher dispatcher) {
         this.dispatcher = dispatcher;
     }
 
     /**
      * A message dispatcher is used to fire violation messages to
      * interested audit listeners.
      *
      * @return the current MessageDispatcher.
      */
     protected final MessageDispatcher getMessageDispatcher() {
         return dispatcher;
     }
 
     /**
      * @return file extensions that identify the files that pass the
      * filter of this FileSetCheck.
      */
     public String[] getFileExtensions() {
         return Arrays.copyOf(fileExtensions, fileExtensions.length);
     }
 
     /**
      * Sets the file extensions that identify the files that pass the
      * filter of this FileSetCheck.
      * @param extensions the set of file extensions. A missing
      * initial '.' character of an extension is automatically added.
      */
     public final void setFileExtensions(String... extensions) {
         if (extensions == null) {
             fileExtensions = null;
             return;
         }
 
         fileExtensions = new String[extensions.length];
         for (int i = 0; i < extensions.length; i++) {
             final String extension = extensions[i];
             if (Utils.startsWithChar(extension, '.')) {
                 fileExtensions[i] = extension;
             }
             else {
                 fileExtensions[i] = "." + extension;
             }
         }
     }
 
