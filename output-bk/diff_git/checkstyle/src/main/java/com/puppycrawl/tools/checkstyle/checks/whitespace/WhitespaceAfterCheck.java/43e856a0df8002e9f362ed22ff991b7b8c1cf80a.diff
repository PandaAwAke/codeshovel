diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAfterCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAfterCheck.java
index d91a73d92..586a771f6 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAfterCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAfterCheck.java
@@ -55,69 +55,79 @@ import com.puppycrawl.tools.checkstyle.api.DetailAST;
 public class WhitespaceAfterCheck
     extends Check {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String WS_NOT_FOLLOWED = "ws.notFollowed";
 
     @Override
     public int[] getDefaultTokens() {
         return new int[] {
             TokenTypes.COMMA,
             TokenTypes.SEMI,
             TokenTypes.TYPECAST,
         };
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.COMMA,
             TokenTypes.SEMI,
             TokenTypes.TYPECAST,
         };
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final Object[] message;
         final DetailAST targetAST;
         if (ast.getType() == TokenTypes.TYPECAST) {
             targetAST = ast.findFirstToken(TokenTypes.RPAREN);
             message = new Object[]{"cast"};
         }
         else {
             targetAST = ast;
             message = new Object[]{ast.getText()};
         }
         final String line = getLine(targetAST.getLineNo() - 1);
         final int after =
             targetAST.getColumnNo() + targetAST.getText().length();
 
         if (after < line.length()) {
 
             final char charAfter = line.charAt(after);
             if (targetAST.getType() == TokenTypes.SEMI
                 && (charAfter == ';' || charAfter == ')')) {
                 return;
             }
-            if (!Character.isWhitespace(charAfter)) {
-                //empty FOR_ITERATOR?
-                if (targetAST.getType() == TokenTypes.SEMI) {
-                    final DetailAST sibling =
-                        targetAST.getNextSibling();
-                    if (sibling != null
-                        && sibling.getType() == TokenTypes.FOR_ITERATOR
-                        && sibling.getChildCount() == 0) {
-                        return;
-                    }
-                }
+            if (!Character.isWhitespace(charAfter) && !isEmptyForIterator(targetAST)) {
+
                 log(targetAST.getLineNo(),
-                    targetAST.getColumnNo() + targetAST.getText().length(),
-                    WS_NOT_FOLLOWED,
-                    message);
+                        targetAST.getColumnNo() + targetAST.getText().length(),
+                        WS_NOT_FOLLOWED,
+                        message);
+            }
+        }
+    }
+
+    /**
+     * check for empty FOR_ITERATOR
+     * @param targetAST Ast token
+     * @return true if iterator is empty
+     */
+    private boolean isEmptyForIterator(DetailAST targetAST) {
+
+        if (targetAST.getType() == TokenTypes.SEMI) {
+            final DetailAST sibling =
+                targetAST.getNextSibling();
+            if (sibling != null
+                && sibling.getType() == TokenTypes.FOR_ITERATOR
+                && sibling.getChildCount() == 0) {
+                return true;
             }
         }
+        return false;
     }
 }
