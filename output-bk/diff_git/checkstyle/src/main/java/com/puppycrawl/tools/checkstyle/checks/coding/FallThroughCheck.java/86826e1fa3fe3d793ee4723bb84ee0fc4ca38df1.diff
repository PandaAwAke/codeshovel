diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
index 30f41890b..f64dad15e 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
@@ -95,105 +95,105 @@ public class FallThroughCheck extends Check {
         return new int[]{TokenTypes.CASE_GROUP};
     }
 
     @Override
     public int[] getRequiredTokens() {
         return getDefaultTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[]{TokenTypes.CASE_GROUP};
     }
 
     /**
      * Set the relief pattern.
      *
      * @param pattern
      *            The regular expression pattern.
      */
     public void setReliefPattern(String pattern) {
         reliefPattern = pattern;
     }
 
     /**
      * Configures whether we need to check last case group or not.
      * @param value new value of the property.
      */
     public void setCheckLastCaseGroup(boolean value) {
         checkLastGroup = value;
     }
 
     @Override
     public void init() {
         super.init();
         regExp = Pattern.compile(reliefPattern);
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final DetailAST nextGroup = ast.getNextSibling();
         final boolean isLastGroup = nextGroup.getType() != TokenTypes.CASE_GROUP;
         if (isLastGroup && !checkLastGroup) {
             // we do not need to check last group
             return;
         }
 
         final DetailAST slist = ast.findFirstToken(TokenTypes.SLIST);
 
         if (slist != null && !isTerminated(slist, true, true)
             && !hasFallTruComment(ast, nextGroup)) {
-            if (!isLastGroup) {
-                log(nextGroup, MSG_FALL_THROUGH);
+            if (isLastGroup) {
+                log(ast, MSG_FALL_THROUGH_LAST);
             }
             else {
-                log(ast, MSG_FALL_THROUGH_LAST);
+                log(nextGroup, MSG_FALL_THROUGH);
             }
         }
     }
 
     /**
      * Checks if a given subtree terminated by return, throw or,
      * if allowed break, continue.
      * @param ast root of given subtree
      * @param useBreak should we consider break as terminator.
      * @param useContinue should we consider continue as terminator.
      * @return true if the subtree is terminated.
      */
     private boolean isTerminated(final DetailAST ast, boolean useBreak,
                                  boolean useContinue) {
         switch (ast.getType()) {
             case TokenTypes.LITERAL_RETURN:
             case TokenTypes.LITERAL_THROW:
                 return true;
             case TokenTypes.LITERAL_BREAK:
                 return useBreak;
             case TokenTypes.LITERAL_CONTINUE:
                 return useContinue;
             case TokenTypes.SLIST:
                 return checkSlist(ast, useBreak, useContinue);
             case TokenTypes.LITERAL_IF:
                 return checkIf(ast, useBreak, useContinue);
             case TokenTypes.LITERAL_FOR:
             case TokenTypes.LITERAL_WHILE:
             case TokenTypes.LITERAL_DO:
                 return checkLoop(ast);
             case TokenTypes.LITERAL_TRY:
                 return checkTry(ast, useBreak, useContinue);
             case TokenTypes.LITERAL_SWITCH:
                 return checkSwitch(ast, useContinue);
             default:
                 return false;
         }
     }
 
     /**
      * Checks if a given SLIST terminated by return, throw or,
      * if allowed break, continue.
      * @param slistAst SLIST to check
      * @param useBreak should we consider break as terminator.
      * @param useContinue should we consider continue as terminator.
      * @return true if SLIST is terminated.
      */
     private boolean checkSlist(final DetailAST slistAst, boolean useBreak,
                                boolean useContinue) {
         DetailAST lastStmt = slistAst.getLastChild();
