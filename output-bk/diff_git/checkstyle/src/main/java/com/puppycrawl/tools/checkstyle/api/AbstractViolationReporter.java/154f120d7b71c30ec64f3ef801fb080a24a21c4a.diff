diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporter.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporter.java
index ca17abe10..8b8dc5cff 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporter.java
@@ -72,99 +72,103 @@ public abstract class AbstractViolationReporter
      */
     public final String getId() {
         return id;
     }
 
     /**
      * Sets the identifier of the reporter. Can be null.
      * @param id the id
      */
     public final void setId(final String id) {
         this.id = id;
     }
 
     /**
      * Returns an unmodifiable map instance containing the custom messages
      * for this configuration.
      * @return unmodifiable map containing custom messages
      */
     protected Map<String, String> getCustomMessages() {
         return getConfiguration().getMessages();
     }
 
     /**
      * Returns the message bundle name resource bundle that contains the messages
      * used by this module.
      * <p>
      * The default implementation expects the resource files to be named
      * messages.properties, messages_de.properties, etc. The file must
      * be placed in the same package as the module implementation.
      * </p>
      * <p>
      * Example: If you write com/foo/MyCoolCheck, create resource files
      * com/foo/messages.properties, com/foo/messages_de.properties, etc.
      * </p>
      *
      * @return name of a resource bundle that contains the messages
      *     used by this module.
      */
     protected String getMessageBundle() {
         final String className = getClass().getName();
         return getMessageBundle(className);
     }
 
     /**
      * For unit tests, especially with a class with no package name.
      * @param className class name of the module.
      * @return name of a resource bundle that contains the messages
      *     used by the module.
      */
     private static String getMessageBundle(final String className) {
+        final String messageBundle;
         final int endIndex = className.lastIndexOf('.');
         final String messages = "messages";
         if (endIndex < 0) {
-            return messages;
+            messageBundle = messages;
         }
-        final String packageName = className.substring(0, endIndex);
-        return packageName + "." + messages;
+        else {
+            final String packageName = className.substring(0, endIndex);
+            messageBundle = packageName + "." + messages;
+        }
+        return messageBundle;
     }
 
     /**
      * Helper method to log a LocalizedMessage.
      *
      * @param ast a node to get line id column numbers associated
      *             with the message
      * @param key key to locale message format
      * @param args arguments to format
      */
     protected final void log(DetailAST ast, String key, Object... args) {
         log(ast.getLineNo(), ast.getColumnNo(), key, args);
     }
 
     /**
      * Log a message that has no column information.
      *
      * @param line the line number where the error was found
      * @param key the message that describes the error
      * @param args the details of the message
      *
      * @see java.text.MessageFormat
      */
     // -@cs[CustomDeclarationOrder] CustomDeclarationOrder does not treat groups of
     // overloaded methods. See https://github.com/sevntu-checkstyle/sevntu.checkstyle/issues/414
     public abstract void log(int line, String key, Object... args);
 
     /**
      * Log a message that has column information.
      *
      * @param line the line number where the error was found
      * @param col the column number where the error was found
      * @param key the message that describes the error
      * @param args the details of the message
      *
      * @see java.text.MessageFormat
      */
     // -@cs[CustomDeclarationOrder] CustomDeclarationOrder does not treat groups of
     // overloaded methods. See https://github.com/sevntu-checkstyle/sevntu.checkstyle/issues/414
     public abstract void log(int line, int col, String key,
             Object... args);
 }
