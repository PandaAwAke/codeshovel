diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
index 7153886df..3b46850c3 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
@@ -291,101 +291,101 @@ public final class DetailAST extends CommonASTWithHiddenTokens {
      * @return Column number if non-comment node exists, -1 otherwise.
      */
     private static int findColumnNo(DetailAST ast) {
         int resultNo = -1;
         DetailAST node = ast;
         while (node != null) {
             // comment node can't be start of any java statement/definition
             if (TokenUtils.isCommentType(node.getType())) {
                 node = node.getNextSibling();
             }
             else {
                 resultNo = node.getColumnNo();
                 break;
             }
         }
         return resultNo;
     }
 
     /**
      * Finds line number in the first non-comment node.
      *
      * @param ast DetailAST node.
      * @return Line number if non-comment node exists, -1 otherwise.
      */
     private static int findLineNo(DetailAST ast) {
         int resultNo = -1;
         DetailAST node = ast;
         while (node != null) {
             // comment node can't be start of any java statement/definition
             if (TokenUtils.isCommentType(node.getType())) {
                 node = node.getNextSibling();
             }
             else {
                 resultNo = node.getLineNo();
                 break;
             }
         }
         return resultNo;
     }
 
     /**
      * @return the token types that occur in the branch as a sorted set.
      */
     private BitSet getBranchTokenTypes() {
         // lazy init
         if (branchTokenTypes == null) {
 
             branchTokenTypes = new BitSet();
             branchTokenTypes.set(getType());
 
-            // add union of all childs
+            // add union of all children
             DetailAST child = getFirstChild();
             while (child != null) {
                 final BitSet childTypes = child.getBranchTokenTypes();
                 branchTokenTypes.or(childTypes);
 
                 child = child.getNextSibling();
             }
         }
         return branchTokenTypes;
     }
 
     /**
      * Checks if this branch of the parse tree contains a token
      * of the provided type.
      * @param type a TokenType
      * @return true if and only if this branch (including this node)
      *     contains a token of type {@code type}.
      */
     public boolean branchContains(int type) {
         return getBranchTokenTypes().get(type);
     }
 
     /**
      * Returns the previous sibling or null if no such sibling exists.
      * @return the previous sibling or null if no such sibling exists.
      */
     public DetailAST getPreviousSibling() {
         return previousSibling;
     }
 
     /**
      * Returns the first child token that makes a specified type.
      * @param type the token type to match
      * @return the matching token, or null if no match
      */
     public DetailAST findFirstToken(int type) {
         DetailAST retVal = null;
         for (DetailAST ast = getFirstChild(); ast != null; ast = ast.getNextSibling()) {
             if (ast.getType() == type) {
                 retVal = ast;
                 break;
             }
         }
         return retVal;
     }
 
     @Override
     public String toString() {
         return super.toString() + "[" + getLineNo() + "x" + getColumnNo() + "]";
     }
