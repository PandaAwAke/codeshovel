diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java
index adb61b416..cc9cebde6 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java
@@ -72,173 +72,173 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  *
  * @author Travis Schneeberger
  */
 public final class MissingDeprecatedCheck extends Check {
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY_ANNOTATION_MISSING_DEPRECATED =
             "annotation.missing.deprecated";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY_JAVADOC_DUPLICATE_TAG =
             "javadoc.duplicateTag";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY_JAVADOC_MISSING = "javadoc.missing";
 
     /** {@link Deprecated Deprecated} annotation name */
     private static final String DEPRECATED = "Deprecated";
 
     /** fully-qualified {@link Deprecated Deprecated} annotation name */
     private static final String FQ_DEPRECATED = "java.lang." + DEPRECATED;
 
     /** compiled regexp to match Javadoc tag with no argument * */
     private static final Pattern MATCH_DEPRECATED =
         Utils.createPattern("@(deprecated)\\s+\\S");
 
     /** compiled regexp to match first part of multilineJavadoc tags * */
     private static final Pattern MATCH_DEPRECATED_MULTILINE_START =
         Utils.createPattern("@(deprecated)\\s*$");
 
     /** compiled regexp to look for a continuation of the comment * */
     private static final Pattern MATCH_DEPRECATED_MULTILINE_CONT =
         Utils.createPattern("(\\*/|@|[^\\s\\*])");
 
     /** Multiline finished at end of comment * */
     private static final String END_JAVADOC = "*/";
     /** Multiline finished at next Javadoc * */
     private static final String NEXT_TAG = "@";
 
     /** {@inheritDoc} */
     @Override
     public int[] getDefaultTokens() {
-        return this.getAcceptableTokens();
+        return getAcceptableTokens();
     }
 
     /** {@inheritDoc} */
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.INTERFACE_DEF,
             TokenTypes.CLASS_DEF,
             TokenTypes.ANNOTATION_DEF,
             TokenTypes.ENUM_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.CTOR_DEF,
             TokenTypes.VARIABLE_DEF,
             TokenTypes.ENUM_CONSTANT_DEF,
             TokenTypes.ANNOTATION_FIELD_DEF,
         };
     }
 
     /** {@inheritDoc} */
     @Override
     public void visitToken(final DetailAST ast) {
         final TextBlock javadoc =
-            this.getFileContents().getJavadocBefore(ast.getLineNo());
+            getFileContents().getJavadocBefore(ast.getLineNo());
 
         final boolean containsAnnotation =
             AnnotationUtility.containsAnnotation(ast, DEPRECATED)
             || AnnotationUtility.containsAnnotation(ast, FQ_DEPRECATED);
 
-        final boolean containsJavadocTag = this.containsJavadocTag(javadoc);
+        final boolean containsJavadocTag = containsJavadocTag(javadoc);
 
         if (containsAnnotation ^ containsJavadocTag) {
-            this.log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_DEPRECATED);
+            log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_DEPRECATED);
         }
     }
 
     /**
      * Checks to see if the text block contains a deprecated tag.
      *
      * @param javadoc the javadoc of the AST
      * @return true if contains the tag
      */
     private boolean containsJavadocTag(final TextBlock javadoc) {
         if (javadoc == null) {
             return false;
         }
 
         final String[] lines = javadoc.getText();
 
         boolean found = false;
 
         int currentLine = javadoc.getStartLineNo() - 1;
 
         for (int i = 0; i < lines.length; i++) {
             currentLine++;
             final String line = lines[i];
 
             final Matcher javadocNoargMatcher =
                 MissingDeprecatedCheck.MATCH_DEPRECATED.matcher(line);
             final Matcher noargMultilineStart =
                 MissingDeprecatedCheck
                     .MATCH_DEPRECATED_MULTILINE_START.matcher(line);
 
             if (javadocNoargMatcher.find()) {
                 if (found) {
-                    this.log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,
+                    log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,
                         JavadocTagInfo.DEPRECATED.getText());
                 }
                 found = true;
             }
             else if (noargMultilineStart.find()) {
                 found = validateTagAtTheRestOfComment(lines, found, currentLine, i);
 
             }
         }
         return found;
     }
 
     /**
      * Look for the rest of the comment if all we saw was
      * the tag and the name. Stop when we see '*' (end of
      * Javadoc), '{@literal @}' (start of next tag), or anything that's
      *  not whitespace or '*' characters.
      * @param lines all lines
      * @param foundBefore flag from parent method
      * @param currentLine current line
      * @param i som index
      * @return true if Tag is found
      */
     private boolean validateTagAtTheRestOfComment(String[] lines, boolean foundBefore,
                                                   int currentLine, int i) {
 
         boolean found = false;
         for (int reindex = i + 1;
             reindex < lines.length; reindex++) {
             final Matcher multilineCont =
                 MissingDeprecatedCheck.MATCH_DEPRECATED_MULTILINE_CONT
                 .matcher(lines[reindex]);
 
             if (multilineCont.find()) {
                 reindex = lines.length;
                 final String lFin = multilineCont.group(1);
                 if (!lFin.equals(MissingDeprecatedCheck.NEXT_TAG)
                     && !lFin.equals(MissingDeprecatedCheck.END_JAVADOC)) {
                     if (foundBefore) {
-                        this.log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,
+                        log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,
                             JavadocTagInfo.DEPRECATED.getText());
                     }
                     found = true;
                 }
                 else {
-                    this.log(currentLine, MSG_KEY_JAVADOC_MISSING);
+                    log(currentLine, MSG_KEY_JAVADOC_MISSING);
                     if (foundBefore) {
-                        this.log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,
+                        log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,
                             JavadocTagInfo.DEPRECATED.getText());
                     }
                     found = true;
                 }
             }
         }
         return found;
     }
 }
