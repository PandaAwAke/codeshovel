diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java b/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
index c2f9fe17a..8ad076262 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
@@ -476,115 +476,137 @@ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe
      *                contains the contents of the file
      * @return the root of the AST
      * @throws TokenStreamException
      *                 if lexing failed
      * @throws RecognitionException
      *                 if parsing failed
      */
     public static DetailAST parse(FileContents contents)
             throws RecognitionException, TokenStreamException {
         final String fullText = contents.getText().getFullText().toString();
         final Reader reader = new StringReader(fullText);
         final GeneratedJavaLexer lexer = new GeneratedJavaLexer(reader);
         lexer.setCommentListener(contents);
         lexer.setTokenObjectClass("antlr.CommonHiddenStreamToken");
 
         final TokenStreamHiddenTokenFilter filter =
                 new TokenStreamHiddenTokenFilter(lexer);
         filter.hide(TokenTypes.SINGLE_LINE_COMMENT);
         filter.hide(TokenTypes.BLOCK_COMMENT_BEGIN);
 
         final GeneratedJavaRecognizer parser =
             new GeneratedJavaRecognizer(filter);
         parser.setFilename(contents.getFileName());
         parser.setASTNodeClass(DetailAST.class.getName());
         parser.compilationUnit();
 
         return (DetailAST) parser.getAST();
     }
 
     /**
      * Parses Java source file. Result AST contains comment nodes.
      * @param contents source file content
      * @return DetailAST tree
      * @throws RecognitionException if parser failed
      * @throws TokenStreamException if lexer failed
      */
     public static DetailAST parseWithComments(FileContents contents)
             throws RecognitionException, TokenStreamException {
         return appendHiddenCommentNodes(parse(contents));
     }
 
     @Override
     public void destroy() {
         ordinaryChecks.forEach(AbstractCheck::destroy);
         commentChecks.forEach(AbstractCheck::destroy);
         super.destroy();
     }
 
     @Override
     public Set<String> getExternalResourceLocations() {
-        final Set<String> ordinaryChecksResources = getExternalResourceLocations(ordinaryChecks);
-        final Set<String> commentChecksResources = getExternalResourceLocations(commentChecks);
-        final int resultListSize = commentChecksResources.size() + ordinaryChecksResources.size();
+        final Set<String> ordinaryChecksResources =
+                getExternalResourceLocationsOfChecks(ordinaryChecks);
+        final Set<String> commentChecksResources =
+                getExternalResourceLocationsOfChecks(commentChecks);
+        final Set<String> filtersResources =
+                getExternalResourceLocationsOfFilters();
+        final int resultListSize = commentChecksResources.size()
+                + ordinaryChecksResources.size()
+                + filtersResources.size();
         final Set<String> resourceLocations = new HashSet<>(resultListSize);
         resourceLocations.addAll(ordinaryChecksResources);
         resourceLocations.addAll(commentChecksResources);
+        resourceLocations.addAll(filtersResources);
         return resourceLocations;
     }
 
+    /**
+     * Returns a set of external configuration resource locations which are used by the filters set.
+     * @return a set of external configuration resource locations which are used by the filters set.
+     */
+    private Set<String> getExternalResourceLocationsOfFilters() {
+        final Set<String> externalConfigurationResources = new HashSet<>();
+        filters.stream().filter(filter -> filter instanceof ExternalResourceHolder)
+                .forEach(filter -> {
+                    final Set<String> checkExternalResources =
+                        ((ExternalResourceHolder) filter).getExternalResourceLocations();
+                    externalConfigurationResources.addAll(checkExternalResources);
+                });
+        return externalConfigurationResources;
+    }
+
     /**
      * Returns a set of external configuration resource locations which are used by the checks set.
      * @param checks a set of checks.
      * @return a set of external configuration resource locations which are used by the checks set.
      */
-    private static Set<String> getExternalResourceLocations(Set<AbstractCheck> checks) {
+    private static Set<String> getExternalResourceLocationsOfChecks(Set<AbstractCheck> checks) {
         final Set<String> externalConfigurationResources = new HashSet<>();
         checks.stream().filter(check -> check instanceof ExternalResourceHolder).forEach(check -> {
             final Set<String> checkExternalResources =
                 ((ExternalResourceHolder) check).getExternalResourceLocations();
             externalConfigurationResources.addAll(checkExternalResources);
         });
         return externalConfigurationResources;
     }
 
     /**
      * Processes a node calling interested checks at each node.
      * Uses iterative algorithm.
      * @param root the root of tree for process
      * @param astState state of AST.
      */
     private void processIter(DetailAST root, AstState astState) {
         DetailAST curNode = root;
         while (curNode != null) {
             notifyVisit(curNode, astState);
             DetailAST toVisit = curNode.getFirstChild();
             while (curNode != null && toVisit == null) {
                 notifyLeave(curNode, astState);
                 toVisit = curNode.getNextSibling();
                 if (toVisit == null) {
                     curNode = curNode.getParent();
                 }
             }
             curNode = toVisit;
         }
     }
 
     /**
      * Appends comment nodes to existing AST.
      * It traverses each node in AST, looks for hidden comment tokens
      * and appends found comment tokens as nodes in AST.
      * @param root
      *        root of AST.
      * @return root of AST with comment nodes.
      */
     private static DetailAST appendHiddenCommentNodes(DetailAST root) {
         DetailAST result = root;
         DetailAST curNode = root;
         DetailAST lastNode = root;
 
         while (curNode != null) {
             if (isPositionGreater(curNode, lastNode)) {
                 lastNode = curNode;
             }
 
             CommonHiddenStreamToken tokenBefore = curNode.getHiddenBefore();
