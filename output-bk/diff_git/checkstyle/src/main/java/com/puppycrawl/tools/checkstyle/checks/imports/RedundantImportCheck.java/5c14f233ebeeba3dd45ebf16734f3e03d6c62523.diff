diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java
index f3bb2b46e..f0f960583 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java
@@ -104,57 +104,57 @@ public class RedundantImportCheck
         return getAcceptableTokens();
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         if (ast.getType() == TokenTypes.PACKAGE_DEF) {
             pkgName = FullIdent.createFullIdent(
                     ast.getLastChild().getPreviousSibling()).getText();
         }
         else if (ast.getType() == TokenTypes.IMPORT) {
             final FullIdent imp = FullIdent.createFullIdentBelow(ast);
             if (isFromPackage(imp.getText(), "java.lang")) {
                 log(ast.getLineNo(), ast.getColumnNo(), MSG_LANG,
                     imp.getText());
             }
             // imports from unnamed package are not allowed,
             // so we are checking SAME rule only for named packages
             else if (pkgName != null && isFromPackage(imp.getText(), pkgName)) {
                 log(ast.getLineNo(), ast.getColumnNo(), MSG_SAME,
                     imp.getText());
             }
             // Check for a duplicate import
             imports.stream().filter(full -> imp.getText().equals(full.getText()))
                 .forEach(full -> log(ast.getLineNo(), ast.getColumnNo(),
                     MSG_DUPLICATE, full.getLineNo(),
                     imp.getText()));
 
             imports.add(imp);
         }
         else {
             // Check for a duplicate static import
             final FullIdent imp =
                 FullIdent.createFullIdent(
                     ast.getLastChild().getPreviousSibling());
             staticImports.stream().filter(full -> imp.getText().equals(full.getText()))
                 .forEach(full -> log(ast.getLineNo(), ast.getColumnNo(),
                     MSG_DUPLICATE, full.getLineNo(), imp.getText()));
 
             staticImports.add(imp);
         }
     }
 
     /**
      * Determines if an import statement is for types from a specified package.
      * @param importName the import name
      * @param pkg the package name
      * @return whether from the package
      */
     private static boolean isFromPackage(String importName, String pkg) {
         // imports from unnamed package are not allowed:
-        // http://docs.oracle.com/javase/specs/jls/se7/html/jls-7.html#jls-7.5
+        // https://docs.oracle.com/javase/specs/jls/se7/html/jls-7.html#jls-7.5
         // So '.' must be present in member name and we are not checking for it
         final int index = importName.lastIndexOf('.');
         final String front = importName.substring(0, index);
         return front.equals(pkg);
     }
 }
