diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractLoader.java
index 4b5c80a62..a414492f3 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractLoader.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractLoader.java
@@ -60,73 +60,77 @@ public abstract class AbstractLoader
     /** Parser to read XML files. **/
     private final XMLReader parser;
 
     /**
      * Creates a new instance.
      * @param publicId the public ID for the DTD to resolve
      * @param dtdResourceName the resource for the DTD
      * @throws SAXException if an error occurs
      * @throws ParserConfigurationException if an error occurs
      */
     protected AbstractLoader(String publicId, String dtdResourceName)
             throws SAXException, ParserConfigurationException {
         this(new HashMap<>(1));
         publicIdToResourceNameMap.put(publicId, dtdResourceName);
     }
 
     /**
      * Creates a new instance.
      * @param publicIdToResourceNameMap maps public IDs to DTD resource names
      * @throws SAXException if an error occurs
      * @throws ParserConfigurationException if an error occurs
      */
     protected AbstractLoader(Map<String, String> publicIdToResourceNameMap)
             throws SAXException, ParserConfigurationException {
         this.publicIdToResourceNameMap = new HashMap<>(publicIdToResourceNameMap);
         final SAXParserFactory factory = SAXParserFactory.newInstance();
         factory.setFeature(LOAD_EXTERNAL_DTD, true);
         factory.setFeature(EXTERNAL_GENERAL_ENTITIES, true);
         factory.setValidating(true);
         factory.setNamespaceAware(true);
         parser = factory.newSAXParser().getXMLReader();
         parser.setContentHandler(this);
         parser.setEntityResolver(this);
         parser.setErrorHandler(this);
     }
 
     /**
      * Parses the specified input source.
      * @param inputSource the input source to parse.
      * @throws IOException if an error occurs
      * @throws SAXException in an error occurs
      */
     public void parseInputSource(InputSource inputSource)
             throws IOException, SAXException {
         parser.parse(inputSource);
     }
 
     @Override
     public InputSource resolveEntity(String publicId, String systemId)
             throws SAXException, IOException {
+        final InputSource inputSource;
         if (publicIdToResourceNameMap.keySet().contains(publicId)) {
             final String dtdResourceName =
                     publicIdToResourceNameMap.get(publicId);
             final ClassLoader loader =
                 getClass().getClassLoader();
             final InputStream dtdIs =
                 loader.getResourceAsStream(dtdResourceName);
 
-            return new InputSource(dtdIs);
+            inputSource = new InputSource(dtdIs);
         }
-        return super.resolveEntity(publicId, systemId);
+        else {
+            inputSource = super.resolveEntity(publicId, systemId);
+        }
+        return inputSource;
     }
 
     @Override
     public void error(SAXParseException exception) throws SAXException {
         throw exception;
     }
 
     @Override
     public void fatalError(SAXParseException exception) throws SAXException {
         throw exception;
     }
 }
