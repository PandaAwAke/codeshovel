diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java b/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
index 482c39b36..856735e7c 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
@@ -399,102 +399,102 @@ public final class TreeWalker
     private void notifyLeave(DetailAST ast, AstState astState) {
         final Collection<Check> visitors = getListOfChecks(ast, astState);
 
         if (visitors != null) {
             for (Check check : visitors) {
                 check.leaveToken(ast);
             }
         }
     }
 
     /**
      * Method returns list of checks
      *
      * @param ast
      *            the node to notify for
      * @param astState
      *            state of AST.
      * @return list of visitors
      */
     private Collection<Check> getListOfChecks(DetailAST ast, AstState astState) {
         Collection<Check> visitors = null;
         final String tokenType = TokenUtils.getTokenName(ast.getType());
 
         if (astState == AstState.WITH_COMMENTS) {
             if (tokenToCommentChecks.containsKey(tokenType)) {
                 visitors = tokenToCommentChecks.get(tokenType);
             }
         }
         else {
             if (tokenToOrdinaryChecks.containsKey(tokenType)) {
                 visitors = tokenToOrdinaryChecks.get(tokenType);
             }
         }
         return visitors;
     }
 
     /**
      * Static helper method to parses a Java source file.
      *
      * @param contents
      *                contains the contents of the file
      * @return the root of the AST
      * @throws TokenStreamException
      *                 if lexing failed
      * @throws RecognitionException
      *                 if parsing failed
      */
     public static DetailAST parse(FileContents contents)
         throws RecognitionException, TokenStreamException {
         final String fullText = contents.getText().getFullText().toString();
-        final Reader sr = new StringReader(fullText);
-        final GeneratedJavaLexer lexer = new GeneratedJavaLexer(sr);
+        final Reader reader = new StringReader(fullText);
+        final GeneratedJavaLexer lexer = new GeneratedJavaLexer(reader);
         lexer.setFilename(contents.getFileName());
         lexer.setCommentListener(contents);
         lexer.setTreatAssertAsKeyword(true);
         lexer.setTreatEnumAsKeyword(true);
         lexer.setTokenObjectClass("antlr.CommonHiddenStreamToken");
 
         final TokenStreamHiddenTokenFilter filter =
                 new TokenStreamHiddenTokenFilter(lexer);
         filter.hide(TokenTypes.SINGLE_LINE_COMMENT);
         filter.hide(TokenTypes.BLOCK_COMMENT_BEGIN);
 
         final GeneratedJavaRecognizer parser =
             new GeneratedJavaRecognizer(filter);
         parser.setFilename(contents.getFileName());
         parser.setASTNodeClass(DetailAST.class.getName());
         parser.compilationUnit();
 
         return (DetailAST) parser.getAST();
     }
 
     @Override
     public void destroy() {
         for (Check check : ordinaryChecks) {
             check.destroy();
         }
         for (Check check : commentChecks) {
             check.destroy();
         }
         if (cache != null) {
             try {
                 cache.persist();
             }
             catch (IOException e) {
                 throw new IllegalStateException("Unable to persist cache file", e);
             }
         }
         super.destroy();
     }
 
     /**
      * Processes a node calling interested checks at each node.
      * Uses iterative algorithm.
      * @param root the root of tree for process
      * @param astState state of AST.
      */
     private void processIter(DetailAST root, AstState astState) {
         DetailAST curNode = root;
         while (curNode != null) {
             notifyVisit(curNode, astState);
             DetailAST toVisit = curNode.getFirstChild();
