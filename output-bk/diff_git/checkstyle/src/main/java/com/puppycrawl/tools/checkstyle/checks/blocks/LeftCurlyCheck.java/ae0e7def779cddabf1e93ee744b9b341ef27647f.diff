diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
index ce9f7f7f8..9c7394ec8 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
@@ -268,94 +268,108 @@ public class LeftCurlyCheck
      * @param modifiers <code>DetailAST</code>.
      * @return <code>DetailAST</code> or null if there are no annotations.
      */
     private DetailAST findLastAnnotation(DetailAST modifiers) {
         DetailAST annot = modifiers.findFirstToken(TokenTypes.ANNOTATION);
         while (annot != null && annot.getNextSibling() != null
                && annot.getNextSibling().getType() == TokenTypes.ANNOTATION) {
             annot = annot.getNextSibling();
         }
         return annot;
     }
 
     /**
      * Verifies that a specified left curly brace is placed correctly
      * according to policy.
      * @param brace token for left curly brace
      * @param startToken token for start of expression
      */
     private void verifyBrace(final DetailAST brace,
                              final DetailAST startToken) {
         final String braceLine = getLine(brace.getLineNo() - 1);
 
         // calculate the previous line length without trailing whitespace. Need
         // to handle the case where there is no previous line, cause the line
         // being check is the first line in the file.
         final int prevLineLen = brace.getLineNo() == 1
             ? maxLineLength
             : Utils.lengthMinusTrailingWhitespace(getLine(brace.getLineNo() - 2));
 
         // Check for being told to ignore, or have '{}' which is a special case
         if (braceLine.length() <= brace.getColumnNo() + 1
                 || braceLine.charAt(brace.getColumnNo() + 1) != '}') {
             if (getAbstractOption() == LeftCurlyOption.NL) {
                 if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {
                     log(brace.getLineNo(), brace.getColumnNo(),
                         MSG_KEY_LINE_NEW, "{");
                 }
             }
             else if (getAbstractOption() == LeftCurlyOption.EOL) {
                 if (Utils.whitespaceBefore(brace.getColumnNo(), braceLine)
                     && prevLineLen + 2 <= maxLineLength) {
                     log(brace.getLineNo(), brace.getColumnNo(),
                         MSG_KEY_LINE_PREVIOUS, "{");
                 }
                 if (!hasLineBreakAfter(brace)) {
                     log(brace.getLineNo(), brace.getColumnNo(), MSG_KEY_LINE_BREAK_AFTER);
                 }
             }
             else if (getAbstractOption() == LeftCurlyOption.NLOW
                     && startToken.getLineNo() != brace.getLineNo()) {
-                // not on the same line
-                if (startToken.getLineNo() + 1 == brace.getLineNo()) {
-                    if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {
-                        log(brace.getLineNo(), brace.getColumnNo(),
-                                MSG_KEY_LINE_NEW, "{");
-                    }
-                    else if (prevLineLen + 2 <= maxLineLength) {
-                        log(brace.getLineNo(), brace.getColumnNo(),
-                                MSG_KEY_LINE_PREVIOUS, "{");
-                    }
-                }
-                else if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {
-                    log(brace.getLineNo(), brace.getColumnNo(),
-                            MSG_KEY_LINE_NEW, "{");
-                }
+
+                validateNewLinePosion(brace, startToken, braceLine, prevLineLen);
+
             }
         }
     }
 
+    /**
+     * validate token on new Line position
+     * @param brace brace AST
+     * @param startToken start Token
+     * @param braceLine content of line with Brace
+     * @param prevLineLen previous Line length
+     */
+    private void validateNewLinePosion(DetailAST brace, DetailAST startToken,
+                                       String braceLine, int prevLineLen) {
+        // not on the same line
+        if (startToken.getLineNo() + 1 == brace.getLineNo()) {
+            if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {
+                log(brace.getLineNo(), brace.getColumnNo(),
+                        MSG_KEY_LINE_NEW, "{");
+            }
+            else if (prevLineLen + 2 <= maxLineLength) {
+                log(brace.getLineNo(), brace.getColumnNo(),
+                        MSG_KEY_LINE_PREVIOUS, "{");
+            }
+        }
+        else if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {
+            log(brace.getLineNo(), brace.getColumnNo(),
+                    MSG_KEY_LINE_NEW, "{");
+        }
+    }
+
     /**
      * Checks if left curly has line break after.
      * @param leftCurly
      *        Left curly token.
      * @return
      *        True, left curly has line break after.
      */
     private boolean hasLineBreakAfter(DetailAST leftCurly) {
         DetailAST nextToken = null;
         if (leftCurly.getType() == TokenTypes.SLIST) {
             nextToken = leftCurly.getFirstChild();
         }
         else {
             if (leftCurly.getParent().getParent().getType() == TokenTypes.ENUM_DEF
                     && !ignoreEnums) {
                 nextToken = leftCurly.getNextSibling();
             }
         }
         if (nextToken != null && nextToken.getType() != TokenTypes.RCURLY
                 && leftCurly.getLineNo() == nextToken.getLineNo()) {
             return false;
         }
         return true;
     }
 }
