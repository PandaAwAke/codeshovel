diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java
index b6754f1de..fb2e9f1d3 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java
@@ -600,122 +600,122 @@ public class VariableDeclarationUsageDistanceCheck extends Check {
 
                 // Checking variable usage inside IF block.
                 if (isChild(previousNode, variable)) {
                     variableUsageExpressions.add(previousNode);
                 }
 
                 // Looking into ELSE block, get its first child and analyze it.
                 currentNode = currentNode.getFirstChild();
 
                 if (currentNode.getType() == TokenTypes.LITERAL_IF) {
                     currentNode = currentNode.getLastChild();
                 }
                 else if (isChild(currentNode, variable)) {
                     variableUsageExpressions.add(currentNode);
                     currentNode = null;
                 }
             }
 
             // If IF block doesn't include ELSE than analyze variable usage
             // only inside IF block.
             if (currentNode != null
                     && isChild(currentNode, variable)) {
                 variableUsageExpressions.add(currentNode);
             }
 
             // If variable usage exists in several related blocks, then
             // firstNodeInsideBlock = null, otherwise if variable usage exists
             // only inside one block, then get node from
             // variableUsageExpressions.
             if (variableUsageExpressions.size() == 1) {
                 firstNodeInsideBlock = variableUsageExpressions.get(0);
             }
         }
 
         return firstNodeInsideBlock;
     }
 
     /**
      * Gets first Ast node inside SWITCH block if variable usage is met
      * only inside the block (not in its declaration!).
      * @param block
      *        Ast node represents SWITCH block.
      * @param variable
      *        Variable which is checked for content in block.
      * @return If variable usage is met only inside the block
      *         (not in its declaration!) than return the first Ast node
      *         of this block, otherwise - null.
      */
     private static DetailAST getFirstNodeInsideSwitchBlock(
             DetailAST block, DetailAST variable) {
-        DetailAST firstNodeInsideBlock = null;
 
         DetailAST currentNode = block
                 .findFirstToken(TokenTypes.CASE_GROUP);
         final List<DetailAST> variableUsageExpressions =
                 new ArrayList<>();
 
         // Checking variable usage inside all CASE blocks.
         while (currentNode.getType() == TokenTypes.CASE_GROUP) {
             final DetailAST lastNodeInCaseGroup =
                     currentNode.getLastChild();
 
             if (isChild(lastNodeInCaseGroup, variable)) {
                 variableUsageExpressions.add(lastNodeInCaseGroup);
             }
             currentNode = currentNode.getNextSibling();
         }
 
         // If variable usage exists in several related blocks, then
         // firstNodeInsideBlock = null, otherwise if variable usage exists
         // only inside one block, then get node from
         // variableUsageExpressions.
+        DetailAST firstNodeInsideBlock = null;
         if (variableUsageExpressions.size() == 1) {
             firstNodeInsideBlock = variableUsageExpressions.get(0);
         }
 
         return firstNodeInsideBlock;
     }
 
     /**
      * Gets first Ast node inside TRY-CATCH-FINALLY blocks if variable usage is
      * met only inside the block (not in its declaration!).
      * @param block
      *        Ast node represents TRY-CATCH-FINALLY block.
      * @param variable
      *        Variable which is checked for content in block.
      * @return If variable usage is met only inside the block
      *         (not in its declaration!) than return the first Ast node
      *         of this block, otherwise - null.
      */
     private static DetailAST getFirstNodeInsideTryCatchFinallyBlocks(
             DetailAST block, DetailAST variable) {
         DetailAST currentNode = block.getFirstChild();
         final List<DetailAST> variableUsageExpressions =
                 new ArrayList<>();
 
         // Checking variable usage inside TRY block.
         if (isChild(currentNode, variable)) {
             variableUsageExpressions.add(currentNode);
         }
 
         // Switch on CATCH block.
         currentNode = currentNode.getNextSibling();
 
         // Checking variable usage inside all CATCH blocks.
         while (currentNode != null
                 && currentNode.getType() == TokenTypes.LITERAL_CATCH) {
             final DetailAST catchBlock = currentNode.getLastChild();
 
             if (isChild(catchBlock, variable)) {
                 variableUsageExpressions.add(catchBlock);
             }
             currentNode = currentNode.getNextSibling();
         }
 
         // Checking variable usage inside FINALLY block.
         if (currentNode != null) {
             final DetailAST finalBlock = currentNode.getLastChild();
 
             if (isChild(finalBlock, variable)) {
                 variableUsageExpressions.add(finalBlock);
             }
