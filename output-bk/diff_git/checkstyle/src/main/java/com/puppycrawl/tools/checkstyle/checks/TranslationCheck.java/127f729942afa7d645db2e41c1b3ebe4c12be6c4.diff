diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
index 859cd7009..56303a33b 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
@@ -78,156 +78,157 @@ import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
  * </pre>
  * <p>To configure the check to check only files which have '.properties' and '.translations'
  * extensions:
  * </p>
  * <pre>
  * &lt;module name="Translation"&gt;
  *     &lt;property name="fileExtensions" value="properties, translations"/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * <p><b>requiredTranslations</b> which allows to specify language codes of required translations
  * which must exist in project. Language code is composed of the lowercase, two-letter codes as
  * defined by <a href="https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes">ISO 639-1</a>.
  * Default value is <b>empty String Set</b> which means that only the existence of
  * default translation is checked. Note, if you specify language codes (or just one language
  * code) of required translations the check will also check for existence of default translation
  * files in project. ATTENTION: the check will perform the validation of ISO codes if the option
  * is used. So, if you specify, for example, "mm" for language code, TranslationCheck will rise
  * violation that the language code is incorrect.
  * <br>
  *
  * @author Alexandra Bunge
  * @author lkuehne
  * @author Andrei Selkin
  */
 public class TranslationCheck extends AbstractFileSetCheck {
 
     /**
      * A key is pointing to the warning message text for missing key
      * in "messages.properties" file.
      */
     public static final String MSG_KEY = "translation.missingKey";
 
     /**
      * A key is pointing to the warning message text for missing translation file
      * in "messages.properties" file.
      */
     public static final String MSG_KEY_MISSING_TRANSLATION_FILE =
         "translation.missingTranslationFile";
 
     /** Resource bundle which contains messages for TranslationCheck. */
     private static final String TRANSLATION_BUNDLE =
         "com.puppycrawl.tools.checkstyle.checks.messages";
 
     /**
      * A key is pointing to the warning message text for wrong language code
      * in "messages.properties" file.
      */
     private static final String WRONG_LANGUAGE_CODE_KEY = "translation.wrongLanguageCode";
 
-    /** Logger for TranslationCheck. */
-    private static final Log LOG = LogFactory.getLog(TranslationCheck.class);
-
     /**
      * Regexp string for default translation files.
      * For example, messages.properties.
      */
     private static final String DEFAULT_TRANSLATION_REGEXP = "^.+\\..+$";
 
     /**
      * Regexp pattern for bundles names wich end with language code, followed by country code and
      * variant suffix. For example, messages_es_ES_UNIX.properties.
      */
     private static final Pattern LANGUAGE_COUNTRY_VARIANT_PATTERN =
         CommonUtils.createPattern("^.+\\_[a-z]{2}\\_[A-Z]{2}\\_[A-Za-z]+\\..+$");
     /**
      * Regexp pattern for bundles names wich end with language code, followed by country code
      * suffix. For example, messages_es_ES.properties.
      */
     private static final Pattern LANGUAGE_COUNTRY_PATTERN =
         CommonUtils.createPattern("^.+\\_[a-z]{2}\\_[A-Z]{2}\\..+$");
     /**
      * Regexp pattern for bundles names wich end with language code suffix.
      * For example, messages_es.properties.
      */
     private static final Pattern LANGUAGE_PATTERN =
         CommonUtils.createPattern("^.+\\_[a-z]{2}\\..+$");
 
     /** File name format for default translation. */
     private static final String DEFAULT_TRANSLATION_FILE_NAME_FORMATTER = "%s.%s";
     /** File name format with language code. */
     private static final String FILE_NAME_WITH_LANGUAGE_CODE_FORMATTER = "%s_%s.%s";
 
     /** Formatting string to form regexp to validate required translations file names. */
     private static final String REGEXP_FORMAT_TO_CHECK_REQUIRED_TRANSLATIONS =
         "^%1$s\\_%2$s(\\_[A-Z]{2})?\\.%3$s$|^%1$s\\_%2$s\\_[A-Z]{2}\\_[A-Za-z]+\\.%3$s$";
     /** Formatting string to form regexp to validate default translations file names. */
     private static final String REGEXP_FORMAT_TO_CHECK_DEFAULT_TRANSLATIONS = "^%s\\.%s$";
 
+    /** Logger for TranslationCheck. */
+    private final Log log;
+
     /** The files to process. */
     private final Set<File> filesToProcess = new HashSet<>();
 
     /** The base name regexp pattern. */
     private Pattern baseName;
 
     /**
      * Language codes of required translations for the check (de, pt, ja, etc).
      */
     private Set<String> requiredTranslations = new HashSet<>();
 
     /**
      * Creates a new {@code TranslationCheck} instance.
      */
     public TranslationCheck() {
         setFileExtensions("properties");
         baseName = CommonUtils.createPattern("^messages.*$");
+        log = LogFactory.getLog(TranslationCheck.class);
     }
 
     /**
      * Sets the base name regexp pattern.
      * @param baseName base name regexp.
      */
     public void setBaseName(Pattern baseName) {
         this.baseName = baseName;
     }
 
     /**
      * Sets language codes of required translations for the check.
      * @param translationCodes a comma separated list of language codes.
      */
     public void setRequiredTranslations(String... translationCodes) {
         requiredTranslations = Arrays.stream(translationCodes).collect(Collectors.toSet());
         validateUserSpecifiedLanguageCodes(requiredTranslations);
     }
 
     /**
      * Validates the correctness of user specified language codes for the check.
      * @param languageCodes user specified language codes for the check.
      */
     private void validateUserSpecifiedLanguageCodes(Set<String> languageCodes) {
         for (String code : languageCodes) {
             if (!isValidLanguageCode(code)) {
                 final LocalizedMessage msg = new LocalizedMessage(0, TRANSLATION_BUNDLE,
                         WRONG_LANGUAGE_CODE_KEY, new Object[] {code}, getId(), getClass(), null);
                 final String exceptionMessage = String.format(Locale.ROOT,
                         "%s [%s]", msg.getMessage(), TranslationCheck.class.getSimpleName());
                 throw new IllegalArgumentException(exceptionMessage);
             }
         }
     }
 
     /**
      * Checks whether user specified language code is correct (is contained in available locales).
      * @param userSpecifiedLanguageCode user specified language code.
      * @return true if user specified language code is correct.
      */
     private static boolean isValidLanguageCode(final String userSpecifiedLanguageCode) {
         boolean valid = false;
         final Locale[] locales = Locale.getAvailableLocales();
         for (Locale locale : locales) {
             if (userSpecifiedLanguageCode.equals(locale.toString())) {
                 valid = true;
                 break;
             }
         }
         return valid;
@@ -466,101 +467,101 @@ public class TranslationCheck extends AbstractFileSetCheck {
             getMessageDispatcher().fireFileFinished(path);
         }
     }
 
     /**
      * Loads the keys from the specified translation file into a set.
      * @param file translation file.
      * @return a Set object which holds the loaded keys.
      */
     private Set<String> getTranslationKeys(File file) {
         Set<String> keys = new HashSet<>();
         InputStream inStream = null;
         try {
             inStream = new FileInputStream(file);
             final Properties translations = new Properties();
             translations.load(inStream);
             keys = translations.stringPropertyNames();
         }
         catch (final IOException ex) {
             logIoException(ex, file);
         }
         finally {
             Closeables.closeQuietly(inStream);
         }
         return keys;
     }
 
     /**
      * Helper method to log an io exception.
      * @param exception the exception that occurred
      * @param file the file that could not be processed
      */
     private void logIoException(IOException exception, File file) {
         String[] args = null;
         String key = "general.fileNotFound";
         if (!(exception instanceof FileNotFoundException)) {
             args = new String[] {exception.getMessage()};
             key = "general.exception";
         }
         final LocalizedMessage message =
             new LocalizedMessage(
                 0,
                 Definitions.CHECKSTYLE_BUNDLE,
                 key,
                 args,
                 getId(),
                 getClass(), null);
         final SortedSet<LocalizedMessage> messages = new TreeSet<>();
         messages.add(message);
         getMessageDispatcher().fireErrors(file.getPath(), messages);
-        LOG.debug("IOException occurred.", exception);
+        log.debug("IOException occurred.", exception);
     }
 
     /** Class which represents a resource bundle. */
     private static class ResourceBundle {
         /** Bundle base name. */
         private final String baseName;
         /** Common extension of files which are included in the resource bundle. */
         private final String extension;
         /** Common path of files which are included in the resource bundle. */
         private final String path;
         /** Set of files which are included in the resource bundle. */
         private final Set<File> files;
 
         /**
          * Creates a ResourceBundle object with specific base name, common files extension.
          * @param baseName bundle base name.
          * @param path common path of files which are included in the resource bundle.
          * @param extension common extension of files which are included in the resource bundle.
          */
         ResourceBundle(String baseName, String path, String extension) {
             this.baseName = baseName;
             this.path = path;
             this.extension = extension;
             files = new HashSet<>();
         }
 
         public String getBaseName() {
             return baseName;
         }
 
         public String getPath() {
             return path;
         }
 
         public String getExtension() {
             return extension;
         }
 
         public Set<File> getFiles() {
             return Collections.unmodifiableSet(files);
         }
 
         /**
          * Adds a file into resource bundle.
          * @param file file which should be added into resource bundle.
          */
         public void addFile(File file) {
             files.add(file);
         }
 
