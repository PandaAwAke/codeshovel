diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeModel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeModel.java
index 9b3000972..0329e82bf 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeModel.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeModel.java
@@ -86,70 +86,70 @@ public class ParseTreeModel extends AbstractTreeTableModel {
 
         switch (column) {
             case 0:
                 columnClass = TreeTableModel.class;
                 break;
             case 1:
                 columnClass = String.class;
                 break;
             case 2:
                 columnClass = Integer.class;
                 break;
             case 3:
                 columnClass = Integer.class;
                 break;
             case 4:
                 columnClass = String.class;
                 break;
             default:
                 columnClass = Object.class;
         }
         return columnClass;
     }
 
     @Override
     public Object getValueAt(Object node, int column) {
         final DetailAST ast = (DetailAST) node;
         Object value;
 
         switch (column) {
             case 1:
                 value = TokenUtils.getTokenName(ast.getType());
                 break;
             case 2:
                 value = ast.getLineNo();
                 break;
             case 3:
                 value = ast.getColumnNo();
                 break;
             case 4:
                 value = ast.getText();
                 break;
             default:
                 value = null;
         }
         return value;
     }
 
     @Override
     public Object getChild(Object parent, int index) {
         final DetailAST ast = (DetailAST) parent;
-        int i = 0;
+        int indx = 0;
         AST child = ast.getFirstChild();
-        while (i < index) {
+        while (indx < index) {
             child = child.getNextSibling();
-            i++;
+            indx++;
         }
         return child;
     }
 
     @Override
     public int getChildCount(Object parent) {
         final DetailAST ast = (DetailAST) parent;
         return ast.getChildCount();
     }
 
     @Override
     public void valueForPathChanged(TreePath path, Object newValue) {
         //No Code, as tree is read-only
     }
 }
