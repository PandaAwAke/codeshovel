diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheck.java
index c7876e2e2..b82985bbd 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheck.java
@@ -15,109 +15,109 @@
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks.regexp;
 
 import com.puppycrawl.tools.checkstyle.StatelessCheck;
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 
 /**
  * Implementation of a check that looks for a single line in Java files.
  * Supports ignoring comments for matches.
  * @author Oliver Burn
  */
 @StatelessCheck
 public class RegexpSinglelineJavaCheck extends AbstractCheck {
 
     /** The format of the regular expression to match. */
     private String format = "$.";
     /** The message to report for a match. */
     private String message;
     /** The minimum number of matches required per file. */
     private int minimum;
     /** The maximum number of matches required per file. */
     private int maximum;
     /** Whether to ignore case when matching. */
     private boolean ignoreCase;
     /** Suppress comments. **/
     private boolean ignoreComments;
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return CommonUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public int[] getRequiredTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public void beginTree(DetailAST rootAST) {
-        MatchSuppressor supressor = null;
+        MatchSuppressor suppressor = null;
         if (ignoreComments) {
-            supressor = new CommentSuppressor(getFileContents());
+            suppressor = new CommentSuppressor(getFileContents());
         }
 
         final DetectorOptions options = DetectorOptions.newBuilder()
             .reporter(this)
             .compileFlags(0)
-            .suppressor(supressor)
+            .suppressor(suppressor)
             .format(format)
             .message(message)
             .minimum(minimum)
             .maximum(maximum)
             .ignoreCase(ignoreCase)
             .build();
         final SinglelineDetector detector = new SinglelineDetector(options);
         detector.processLines(getFileContents().getText());
     }
 
     /**
      * Set the format of the regular expression to match.
      * @param format the format of the regular expression to match.
      */
     public void setFormat(String format) {
         this.format = format;
     }
 
     /**
      * Set the message to report for a match.
      * @param message the message to report for a match.
      */
     public void setMessage(String message) {
         this.message = message;
     }
 
     /**
      * Set the minimum number of matches required per file.
      * @param minimum the minimum number of matches required per file.
      */
     public void setMinimum(int minimum) {
         this.minimum = minimum;
     }
 
     /**
      * Set the maximum number of matches required per file.
      * @param maximum the maximum number of matches required per file.
      */
     public void setMaximum(int maximum) {
         this.maximum = maximum;
     }
 
     /**
      * Set whether to ignore case when matching.
      * @param ignoreCase whether to ignore case when matching.
      */
     public void setIgnoreCase(boolean ignoreCase) {
         this.ignoreCase = ignoreCase;
     }
 
