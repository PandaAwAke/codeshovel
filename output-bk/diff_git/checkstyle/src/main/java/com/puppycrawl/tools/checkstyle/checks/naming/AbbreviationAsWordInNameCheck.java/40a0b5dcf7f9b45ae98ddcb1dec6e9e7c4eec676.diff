diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java
index fd09865e2..275232f1a 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java
@@ -1,80 +1,81 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2016 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks.naming;
 
 import java.util.HashSet;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Set;
 
 import com.google.common.collect.Sets;
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
+import com.puppycrawl.tools.checkstyle.utils.CheckUtils;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 
 /**
  * <p>
  * The Check validate abbreviations(consecutive capital letters) length in
  * identifier name, it also allows to enforce camel case naming. Please read more at
  * <a href="http://checkstyle.sourceforge.net/reports/google-java-style.html#s5.3-camel-case">
  * Google Style Guide</a> to get to know how to avoid long abbreviations in names.
  * </p>
  * <p>
  * Option {@code allowedAbbreviationLength} indicates on the allowed amount of capital
  * letters in abbreviations in the classes, interfaces,
  * variables and methods names. Default value is '3'.
  * </p>
  * <p>
  * Option {@code allowedAbbreviations} - list of abbreviations that
  * must be skipped for checking. Abbreviations should be separated by comma,
  * no spaces are allowed.
  * </p>
  * <p>
  * Option {@code ignoreFinal} allow to skip variables with {@code final} modifier.
  * Default value is {@code true}.
  * </p>
  * <p>
  * Option {@code ignoreStatic} allow to skip variables with {@code static} modifier.
  * Default value is {@code true}.
  * </p>
  * <p>
  * Option {@code ignoreOverriddenMethod} - Allows to
  * ignore methods tagged with {@code @Override} annotation
  * (that usually mean inherited name). Default value is {@code true}.
  * </p>
  * Default configuration
  * <pre>
  * &lt;module name="AbbreviationAsWordInName" /&gt;
  * </pre>
  * <p>
  * To configure to check variables and classes identifiers, do not ignore
  * variables with static modifier
  * and allow no abbreviations (enforce camel case phrase) but allow XML and URL abbreviations.
  * </p>
  * <pre>
  * &lt;module name="AbbreviationAsWordInName"&gt;
  *     &lt;property name="tokens" value="VARIABLE_DEF,CLASS_DEF"/&gt;
  *     &lt;property name="ignoreStatic" value="false"/&gt;
  *     &lt;property name="allowedAbbreviationLength" value="1"/&gt;
  *     &lt;property name="allowedAbbreviations" value="XML,URL"/&gt;
  * &lt;/module&gt;
  * </pre>
  *
@@ -173,118 +174,121 @@ public class AbbreviationAsWordInNameCheck extends AbstractCheck {
             TokenTypes.PARAMETER_DEF,
             TokenTypes.VARIABLE_DEF,
             TokenTypes.METHOD_DEF,
         };
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.CLASS_DEF,
             TokenTypes.INTERFACE_DEF,
             TokenTypes.ENUM_DEF,
             TokenTypes.ANNOTATION_DEF,
             TokenTypes.ANNOTATION_FIELD_DEF,
             TokenTypes.PARAMETER_DEF,
             TokenTypes.VARIABLE_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.ENUM_CONSTANT_DEF,
         };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return CommonUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public void visitToken(DetailAST ast) {
 
         if (!isIgnoreSituation(ast)) {
 
             final DetailAST nameAst = ast.findFirstToken(TokenTypes.IDENT);
             final String typeName = nameAst.getText();
 
             final String abbr = getDisallowedAbbreviation(typeName);
             if (abbr != null) {
                 log(nameAst.getLineNo(), MSG_KEY, typeName, allowedAbbreviationLength);
             }
         }
     }
 
     /**
      * Checks if it is an ignore situation.
      * @param ast input DetailAST node.
      * @return true if it is an ignore situation found for given input DetailAST
      *         node.
      */
     private boolean isIgnoreSituation(DetailAST ast) {
         final DetailAST modifiers = ast.getFirstChild();
 
-        boolean result = false;
+        final boolean result;
         if (ast.getType() == TokenTypes.VARIABLE_DEF) {
             if ((ignoreFinal || ignoreStatic)
                     && isInterfaceDeclaration(ast)) {
                 // field declarations in interface are static/final
                 result = true;
             }
             else {
                 result = ignoreFinal
                           && modifiers.branchContains(TokenTypes.FINAL)
                     || ignoreStatic
                         && modifiers.branchContains(TokenTypes.LITERAL_STATIC);
             }
         }
         else if (ast.getType() == TokenTypes.METHOD_DEF) {
             result = ignoreOverriddenMethods
                     && hasOverrideAnnotation(modifiers);
         }
+        else {
+            result = CheckUtils.isReceiverParameter(ast);
+        }
         return result;
     }
 
     /**
      * Check that variable definition in interface or @interface definition.
      * @param variableDefAst variable definition.
      * @return true if variable definition(variableDefAst) is in interface
      *     or @interface definition.
      */
     private static boolean isInterfaceDeclaration(DetailAST variableDefAst) {
         boolean result = false;
         final DetailAST astBlock = variableDefAst.getParent();
         final DetailAST astParent2 = astBlock.getParent();
 
         if (astParent2.getType() == TokenTypes.INTERFACE_DEF
                 || astParent2.getType() == TokenTypes.ANNOTATION_DEF) {
             result = true;
         }
         return result;
     }
 
     /**
      * Checks that the method has "@Override" annotation.
      * @param methodModifiersAST
      *        A DetailAST nod is related to the given method modifiers
      *        (MODIFIERS type).
      * @return true if method has "@Override" annotation.
      */
     private static boolean hasOverrideAnnotation(DetailAST methodModifiersAST) {
         boolean result = false;
         for (DetailAST child : getChildren(methodModifiersAST)) {
             if (child.getType() == TokenTypes.ANNOTATION) {
                 final DetailAST annotationIdent = child.findFirstToken(TokenTypes.IDENT);
 
                 if (annotationIdent != null && "Override".equals(annotationIdent.getText())) {
                     result = true;
                     break;
                 }
             }
         }
         return result;
     }
 
     /**
      * Gets the disallowed abbreviation contained in given String.
      * @param str
      *        the given String.
      * @return the disallowed abbreviation contained in given String as a
      *         separate String.
      */
