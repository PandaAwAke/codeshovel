diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java
index 590a0068c..57a5d9b33 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java
@@ -129,93 +129,93 @@ public class HideUtilityClassConstructorCheck extends Check {
          * */
         Details(DetailAST ast) {
             this.ast = ast;
         }
 
         /**
          * Getter
          * @return boolean
          */
         public boolean isHasMethodOrField() {
             return hasMethodOrField;
         }
 
         /**
          * Getter
          * @return boolean
          */
         public boolean isHasNonStaticMethodOrField() {
             return hasNonStaticMethodOrField;
         }
 
         /**
          * Getter
          * @return boolean
          */
         public boolean isHasNonPrivateStaticMethodOrField() {
             return hasNonPrivateStaticMethodOrField;
         }
 
         /**
          * Getter
          * @return boolean
          */
         public boolean isHasDefaultCtor() {
             return hasDefaultCtor;
         }
 
         /**
          * Getter
          * @return boolean
          */
         public boolean isHasPublicCtor() {
             return hasPublicCtor;
         }
 
         /**
          *  Main method to gather statistics
          */
         public void invoke() {
             final DetailAST objBlock = ast.findFirstToken(TokenTypes.OBJBLOCK);
-            DetailAST child = objBlock.getFirstChild();
             hasMethodOrField = false;
             hasNonStaticMethodOrField = false;
             hasNonPrivateStaticMethodOrField = false;
             hasDefaultCtor = true;
             hasPublicCtor = false;
+            DetailAST child = objBlock.getFirstChild();
 
             while (child != null) {
                 final int type = child.getType();
                 if (type == TokenTypes.METHOD_DEF
                         || type == TokenTypes.VARIABLE_DEF) {
                     hasMethodOrField = true;
                     final DetailAST modifiers =
                         child.findFirstToken(TokenTypes.MODIFIERS);
                     final boolean isStatic =
                         modifiers.branchContains(TokenTypes.LITERAL_STATIC);
                     final boolean isPrivate =
                         modifiers.branchContains(TokenTypes.LITERAL_PRIVATE);
 
                     if (!isStatic) {
                         hasNonStaticMethodOrField = true;
                     }
                     if (isStatic && !isPrivate) {
                         hasNonPrivateStaticMethodOrField = true;
                     }
                 }
                 if (type == TokenTypes.CTOR_DEF) {
                     hasDefaultCtor = false;
                     final DetailAST modifiers =
                         child.findFirstToken(TokenTypes.MODIFIERS);
                     if (!modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)
                         && !modifiers.branchContains(TokenTypes.LITERAL_PROTECTED)) {
                         // treat package visible as public
                         // for the purpose of this Check
                         hasPublicCtor = true;
                     }
 
                 }
                 child = child.getNextSibling();
             }
         }
     }
 }
