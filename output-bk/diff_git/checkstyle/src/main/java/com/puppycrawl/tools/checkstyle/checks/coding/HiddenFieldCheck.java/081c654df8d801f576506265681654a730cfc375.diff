diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java
index 38b801b66..00a083291 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java
@@ -1,77 +1,75 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2015 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks.coding;
 
 import java.util.Locale;
 import java.util.Set;
 import java.util.regex.Pattern;
 
-import org.apache.commons.beanutils.ConversionException;
-
 import com.google.common.base.Objects;
 import com.google.common.collect.Sets;
 import com.puppycrawl.tools.checkstyle.ScopeUtils;
 import com.puppycrawl.tools.checkstyle.Utils;
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * <p>Checks that a local variable or a parameter does not shadow
  * a field that is defined in the same class.
  * <p>
  * An example of how to configure the check is:
  * <pre>
  * &lt;module name="HiddenField"/&gt;
  * </pre>
  * <p>
  * An example of how to configure the check so that it checks variables but not
  * parameters is:
  * <pre>
  * &lt;module name="HiddenField"&gt;
  *    &lt;property name="tokens" value="VARIABLE_DEF"/&gt;
  * &lt;/module&gt;
  * </pre>
  * <p>
  * An example of how to configure the check so that it ignores the parameter of
  * a setter method is:
  * <pre>
  * &lt;module name="HiddenField"&gt;
  *    &lt;property name="ignoreSetter" value="true"/&gt;
  * &lt;/module&gt;
  * </pre>
  * <p>
  * A method is recognized as a setter if it is in the following form
  * <pre>
  * ${returnType} set${Name}(${anyType} ${name}) { ... }
  * </pre>
  * where ${anyType} is any primitive type, class or interface name;
  * ${name} is name of the variable that is being set and ${Name} its
  * capitalized form that appears in the method name. By default it is expected
  * that setter returns void, i.e. ${returnType} is 'void'. For example
  * <pre>
  * void setTime(long time) { ... }
  * </pre>
  * Any other return types will not let method match a setter pattern. However,
  * by setting <em>setterCanReturnItsClass</em> property to <em>true</em>
  * definition of a setter is expanded, so that setter return type can also be
  * a class in which setter is declared. For example
  * <pre>
  * class PageBuilder {
@@ -415,104 +413,102 @@ public class HiddenFieldCheck
         // one is a capital one, since according to JavBeans spec
         // setXYzz() is a setter for XYzz property, not for xYzz one.
         if (name.length() == 1 || !Character.isUpperCase(name.charAt(1))) {
             setterName = name.substring(0, 1).toUpperCase(Locale.ENGLISH) + name.substring(1);
         }
         return setterName;
     }
 
     /**
      * Decides whether to ignore an AST node that is the parameter of a
      * constructor.
      * @param ast the AST to check.
      * @return true if ast should be ignored because check property
      * ignoreConstructorParameter is true and ast is a constructor parameter.
      */
     private boolean isIgnoredConstructorParam(DetailAST ast) {
         boolean result = false;
         if (ast.getType() == TokenTypes.PARAMETER_DEF
             && ignoreConstructorParameter) {
             final DetailAST parametersAST = ast.getParent();
             final DetailAST constructorAST = parametersAST.getParent();
             result = constructorAST.getType() == TokenTypes.CTOR_DEF;
         }
         return result;
     }
 
     /**
      * Decides whether to ignore an AST node that is the parameter of an
      * abstract method.
      * @param ast the AST to check.
      * @return true if ast should be ignored because check property
      * ignoreAbstactMethods is true and ast is a parameter of abstract
      * methods.
      */
     private boolean isIgnoredParamOfAbstractMethod(DetailAST ast) {
         boolean result = false;
         if (ast.getType() == TokenTypes.PARAMETER_DEF
             && ignoreAbstractMethods) {
             final DetailAST method = ast.getParent().getParent();
             if (method.getType() == TokenTypes.METHOD_DEF) {
                 final DetailAST mods = method.findFirstToken(TokenTypes.MODIFIERS);
                 result = mods.branchContains(TokenTypes.ABSTRACT);
             }
         }
         return result;
     }
 
     /**
      * Set the ignore format to the specified regular expression.
      * @param format a <code>String</code> value
-     * @throws ConversionException if unable to create Pattern object
      */
-    public void setIgnoreFormat(String format)
-        throws ConversionException {
+    public void setIgnoreFormat(String format) {
         regexp = Utils.createPattern(format);
     }
 
     /**
      * Set whether to ignore the parameter of a property setter method.
      * @param ignoreSetter decide whether to ignore the parameter of
      * a property setter method.
      */
     public void setIgnoreSetter(boolean ignoreSetter) {
         this.ignoreSetter = ignoreSetter;
     }
 
     /**
      * Controls if setter can return only void (default behavior) or it
      * can also return class in which it is declared.
      *
      * @param aSetterCanReturnItsClass if true then setter can return
      *        either void or class in which it is declared. If false then
      *        in order to be recognized as setter method (otherwise
      *        already recognized as a setter) must return void.  Later is
      *        the default behavior.
      */
     public void setSetterCanReturnItsClass(
         boolean aSetterCanReturnItsClass) {
         setterCanReturnItsClass = aSetterCanReturnItsClass;
     }
 
     /**
      * Set whether to ignore constructor parameters.
      * @param ignoreConstructorParameter decide whether to ignore
      * constructor parameters.
      */
     public void setIgnoreConstructorParameter(
         boolean ignoreConstructorParameter) {
         this.ignoreConstructorParameter = ignoreConstructorParameter;
     }
 
     /**
      * Set whether to ignore parameters of abstract methods.
      * @param ignoreAbstractMethods decide whether to ignore
      * parameters of abstract methods.
      */
     public void setIgnoreAbstractMethods(
         boolean ignoreAbstractMethods) {
         this.ignoreAbstractMethods = ignoreAbstractMethods;
     }
 
     /**
      * Holds the names of static and instance fields of a type.
      * @author Rick Giles
