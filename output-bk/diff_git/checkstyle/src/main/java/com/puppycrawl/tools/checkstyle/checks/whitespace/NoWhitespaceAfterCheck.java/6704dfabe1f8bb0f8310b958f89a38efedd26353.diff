diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java
index 44a3118fc..4d9562015 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java
@@ -343,93 +343,97 @@ public class NoWhitespaceAfterCheck extends AbstractCheck {
         return parent;
     }
 
     /**
      * Searches parameter node for a type node.
      * Returns it or its last node if it has an extended structure.
      * @param ast
      *        , subject node.
      * @return type node.
      */
     private static DetailAST getTypeLastNode(DetailAST ast) {
         DetailAST result = ast.findFirstToken(TokenTypes.TYPE_ARGUMENTS);
         if (result == null) {
             result = getIdentLastToken(ast);
             if (result == null) {
                 //primitive literal expected
                 result = ast.getFirstChild();
             }
         }
         else {
             result = result.findFirstToken(TokenTypes.GENERIC_END);
         }
         return result;
     }
 
     /**
      * Finds previous node by text order for an array declarator,
      * which parent type is {@link TokenTypes#TYPE TYPE}.
      * @param ast
      *        , array declarator node.
      * @param parent
      *        , its parent node.
      * @return previous node by text order.
      */
     private static DetailAST getPreviousNodeWithParentOfTypeAst(DetailAST ast, DetailAST parent) {
         final DetailAST previousElement;
         final DetailAST ident = getIdentLastToken(parent.getParent());
         final DetailAST lastTypeNode = getTypeLastNode(ast);
         // sometimes there are ident-less sentences
         // i.e. "(Object[]) null", but in casual case should be
         // checked whether ident or lastTypeNode has preceding position
         // determining if it is java style or C style
         if (ident == null || ident.getLineNo() > ast.getLineNo()) {
             previousElement = lastTypeNode;
         }
         else if (ident.getLineNo() < ast.getLineNo()) {
             previousElement = ident;
         }
         //ident and lastTypeNode lay on one line
         else {
-            if (ident.getColumnNo() >= ast.getColumnNo() + 1
-                || lastTypeNode.getColumnNo() > ident.getColumnNo()) {
+            final int instanceOfSize = 13;
+            // +2 because ast has `[]` after the ident
+            if (ident.getColumnNo() >= ast.getColumnNo() + 2
+                // +13 because ident (at most 1 character) is followed by
+                // ' instanceof ' (12 characters)
+                || lastTypeNode.getColumnNo() >= ident.getColumnNo() + instanceOfSize) {
                 previousElement = lastTypeNode;
             }
             else {
                 previousElement = ident;
             }
         }
         return previousElement;
     }
 
     /**
      * Gets leftmost token of identifier.
      * @param ast
      *        , token possibly possessing an identifier.
      * @return leftmost token of identifier.
      */
     private static DetailAST getIdentLastToken(DetailAST ast) {
         // single identifier token as a name is the most common case
         DetailAST result = ast.findFirstToken(TokenTypes.IDENT);
         if (result == null) {
             final DetailAST dot = ast.findFirstToken(TokenTypes.DOT);
             // method call case
             if (dot == null) {
                 final DetailAST methodCall = ast.findFirstToken(TokenTypes.METHOD_CALL);
                 if (methodCall != null) {
                     result = methodCall.findFirstToken(TokenTypes.RPAREN);
                 }
             }
             // qualified name case
             else {
                 if (dot.findFirstToken(TokenTypes.DOT) == null) {
                     result = dot.getFirstChild().getNextSibling();
                 }
                 else {
                     result = dot.findFirstToken(TokenTypes.IDENT);
                 }
             }
         }
         return result;
     }
 
 }
