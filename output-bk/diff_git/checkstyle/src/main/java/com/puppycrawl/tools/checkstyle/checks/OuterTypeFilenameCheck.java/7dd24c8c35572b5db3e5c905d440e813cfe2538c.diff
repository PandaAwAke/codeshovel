diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheck.java
index 0f7eb2866..80b611c3f 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheck.java
@@ -64,56 +64,56 @@ public class OuterTypeFilenameCheck extends Check
     }
 
     @Override
     public void beginTree(DetailAST ast)
     {
         fileName = getFileName();
         seenFirstToken = false;
         validFirst = false;
         hasPublic = false;
         wrongType = null;
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
         final String outerTypeName = ast.findFirstToken(TokenTypes.IDENT).getText();
         if (!seenFirstToken) {
 
             if (fileName.equals(outerTypeName)) {
                 validFirst = true;
             }
             else {
                 wrongType = ast;
             }
         }
         else {
             final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
             if (modifiers.findFirstToken(TokenTypes.LITERAL_PUBLIC) != null
                     && ast.getParent() == null)
             {
                 hasPublic = true;
             }
         }
         seenFirstToken = true;
     }
 
     @Override
     public void finishTree(DetailAST rootAST)
     {
         if (!(validFirst || hasPublic) && wrongType != null) {
             log(wrongType.getLineNo(), "type.file.mismatch");
         }
     }
 
     /**
      * Get source file name.
      * @return source file name.
      */
     private String getFileName()
     {
-        String fname = getFileContents().getFilename();
+        String fname = getFileContents().getFileName();
         fname = fname.substring(fname.lastIndexOf(File.separatorChar) + 1);
         fname = fname.replaceAll("\\.[^\\.]*$", "");
         return fname;
     }
 }
