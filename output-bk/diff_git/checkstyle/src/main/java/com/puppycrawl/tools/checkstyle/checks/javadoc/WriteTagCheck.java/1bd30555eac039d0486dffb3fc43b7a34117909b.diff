diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java
index 3c31b5989..7d454bfc3 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java
@@ -165,86 +165,86 @@ public class WriteTagCheck
                           TokenTypes.ENUM_CONSTANT_DEF,
                           TokenTypes.ANNOTATION_FIELD_DEF,
         };
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
         final FileContents contents = getFileContents();
         final int lineNo = ast.getLineNo();
         final TextBlock cmt =
             contents.getJavadocBefore(lineNo);
         if (cmt == null) {
             log(lineNo, MISSING_TAG, tag);
         }
         else {
             checkTag(lineNo, cmt.getText(), tag, tagRE, tagFormatRE,
                 tagFormat);
         }
     }
 
     /**
      * Verifies that a type definition has a required tag.
      * @param lineNo the line number for the type definition.
      * @param comment the Javadoc comment for the type definition.
      * @param tag the required tag name.
      * @param tagRE regexp for the full tag.
      * @param formatRE regexp for the tag value.
      * @param format pattern for the tag value.
      */
     private void checkTag(
             int lineNo,
             String[] comment,
             String tag,
             Pattern tagRE,
             Pattern formatRE,
             String format)
     {
         if (tagRE == null) {
             return;
         }
 
         int tagCount = 0;
         for (int i = 0; i < comment.length; i++) {
             final String s = comment[i];
             final Matcher matcher = tagRE.matcher(s);
             if (matcher.find()) {
                 tagCount += 1;
                 final int contentStart = matcher.start(1);
                 final String content = s.substring(contentStart);
-                if ((formatRE != null) && !formatRE.matcher(content).find()) {
+                if (formatRE != null && !formatRE.matcher(content).find()) {
                     log(lineNo + i - comment.length, TAG_FORMAT, tag,
                         format);
                 }
                 else {
                     logTag(lineNo + i - comment.length, tag, content);
                 }
 
             }
         }
         if (tagCount == 0) {
             log(lineNo, MISSING_TAG, tag);
         }
 
     }
 
 
     /**
      * Log a message.
      *
      * @param line the line number where the error was found
      * @param tag the javadoc tag to be logged
      * @param tagValue the contents of the tag
      *
      * @see java.text.MessageFormat
      */
     protected final void logTag(int line, String tag, String tagValue)
     {
         final String originalSeverity = getSeverity();
         setSeverity(tagSeverityLevel.getName());
 
         log(line, WRITE_TAG, tag, tagValue);
 
         setSeverity(originalSeverity);
     }
 }
