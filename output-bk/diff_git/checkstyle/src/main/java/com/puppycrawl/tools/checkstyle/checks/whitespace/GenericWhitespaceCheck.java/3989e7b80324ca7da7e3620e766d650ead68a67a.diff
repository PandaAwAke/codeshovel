diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java
index f017a4112..1e5125e8c 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java
@@ -168,139 +168,148 @@ public class GenericWhitespaceCheck extends Check {
     }
 
     /**
      * Process Nested generics.
      * @param ast token
      * @param line line content
      * @param after position after
      */
     private void processNestedGenerics(DetailAST ast, String line, int after) {
         // In a nested Generic type, so can only be a '>' or ',' or '&'
 
         // In case of several extends definitions:
         //
         //   class IntEnumValueType<E extends Enum<E> & IntEnum>
         //                                          ^
         //   should be whitespace if followed by & -+
         //
         final int indexOfAmp = line.indexOf('&', after);
         if (indexOfAmp >= 0
             && containsWhitespaceBetween(after, indexOfAmp, line)) {
             if (indexOfAmp - after == 0) {
                 log(ast.getLineNo(), after, WS_NOT_PRECEDED, "&");
             }
             else if (indexOfAmp - after != 1) {
                 log(ast.getLineNo(), after, WS_FOLLOWED, CLOSE_ANGLE_BRACKET);
             }
         }
         else if (line.charAt(after) == ' ') {
             log(ast.getLineNo(), after, WS_FOLLOWED, CLOSE_ANGLE_BRACKET);
         }
     }
 
     /**
      * Process Single-generic.
      * @param ast token
      * @param line line content
      * @param after position after
      */
     private void processSingleGeneric(DetailAST ast, String line, int after) {
         final char charAfter = line.charAt(after);
 
         // Need to handle a number of cases. First is:
         //    Collections.<Object>emptySet();
         //                        ^
         //                        +--- whitespace not allowed
         if (isGenericBeforeMethod(ast)) {
             if (Character.isWhitespace(charAfter)) {
                 log(ast.getLineNo(), after, WS_FOLLOWED, CLOSE_ANGLE_BRACKET);
             }
         }
-        else if (!Character.isWhitespace(charAfter)
-            && charAfter != '(' && charAfter != ')'
-            && charAfter != ',' && charAfter != '['
-            && charAfter != '.' && charAfter != ':') {
+        else if (!isCharacterValidAfterGenericEnd(charAfter)) {
             log(ast.getLineNo(), after, WS_ILLEGAL_FOLLOW, CLOSE_ANGLE_BRACKET);
         }
     }
 
     /**
      * Is generic before method reference.
      * @param ast ast
      * @return true if generic before a method ref
      */
     private static boolean isGenericBeforeMethod(DetailAST ast) {
         return ast.getParent().getType() == TokenTypes.TYPE_ARGUMENTS
                 && ast.getParent().getParent().getType() == TokenTypes.DOT
                 && ast.getParent().getParent().getParent().getType() == TokenTypes.METHOD_CALL
                 || isAfterMethodReference(ast);
     }
 
     /**
      * Checks if current generic end ('>') is located after
      * {@link TokenTypes#METHOD_REF method reference operator}.
      * @param genericEnd {@link TokenTypes#GENERIC_END}
      * @return true if '>' follows after method reference.
      */
     private static boolean isAfterMethodReference(DetailAST genericEnd) {
         return genericEnd.getParent().getParent().getType() == TokenTypes.METHOD_REF;
     }
 
     /**
      * Checks the token for the start of Generics.
      * @param ast the token to check
      */
     private void processStart(DetailAST ast) {
         final String line = getLine(ast.getLineNo() - 1);
         final int before = ast.getColumnNo() - 1;
         final int after = ast.getColumnNo() + 1;
 
         // Need to handle two cases as in:
         //
         //   public static <T> Callable<T> callable(Runnable task, T result)
         //                 ^           ^
         //      ws reqd ---+           +--- whitespace NOT required
         //
         if (before >= 0) {
             // Detect if the first case
             final DetailAST parent = ast.getParent();
             final DetailAST grandparent = parent.getParent();
             if (parent.getType() == TokenTypes.TYPE_PARAMETERS
                 && (grandparent.getType() == TokenTypes.CTOR_DEF
                     || grandparent.getType() == TokenTypes.METHOD_DEF)) {
                 // Require whitespace
                 if (!Character.isWhitespace(line.charAt(before))) {
                     log(ast.getLineNo(), before, WS_NOT_PRECEDED, OPEN_ANGLE_BRACKET);
                 }
             }
             // Whitespace not required
             else if (Character.isWhitespace(line.charAt(before))
                 && !CommonUtils.hasWhitespaceBefore(before, line)) {
                 log(ast.getLineNo(), before, WS_PRECEDED, OPEN_ANGLE_BRACKET);
             }
         }
 
         if (after < line.length()
                 && Character.isWhitespace(line.charAt(after))) {
             log(ast.getLineNo(), after, WS_FOLLOWED, OPEN_ANGLE_BRACKET);
         }
     }
 
     /**
      * Returns whether the specified string contains only whitespace between
      * specified indices.
      *
      * @param fromIndex the index to start the search from. Inclusive
      * @param toIndex the index to finish the search. Exclusive
      * @param line the line to check
      * @return whether there are only whitespaces (or nothing)
      */
     private static boolean containsWhitespaceBetween(
             int fromIndex, int toIndex, String line) {
         for (int i = fromIndex; i < toIndex; i++) {
             if (!Character.isWhitespace(line.charAt(i))) {
                 return false;
             }
         }
         return true;
     }
+
+    /**
+     * Checks whether given character is valid to be right after generic ends
+     * @param charAfter character to check
+     * @return checks if given character is valid
+     */
+    private static boolean isCharacterValidAfterGenericEnd(char charAfter) {
+        return Character.isWhitespace(charAfter)
+                || charAfter == '(' || charAfter == ')'
+                || charAfter == ',' || charAfter == '['
+                || charAfter == '.' || charAfter == ':';
+    }
 }
