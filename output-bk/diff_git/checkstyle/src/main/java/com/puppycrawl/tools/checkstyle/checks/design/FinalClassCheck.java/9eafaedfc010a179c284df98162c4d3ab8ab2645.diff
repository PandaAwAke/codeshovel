diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java
index 002c50755..a09ae7035 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java
@@ -1,78 +1,76 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2016 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks.design;
 
 import java.util.ArrayDeque;
 import java.util.Deque;
 import java.util.LinkedList;
 import java.util.List;
 
-import com.google.common.base.Joiner;
-
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.utils.ScopeUtils;
 
 /**
  * <p>
  * Checks that class which has only private ctors
  * is declared as final. Doesn't check for classes nested in interfaces
  * or annotations, as they are always <code>final</code> there.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="FinalClass"/&gt;
  * </pre>
  * @author o_sukhodolsky
  */
 public class FinalClassCheck
     extends AbstractCheck {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "final.class";
 
     /**
      * Character separate package names in qualified name of java class.
      */
     public static final String PACKAGE_SEPARATOR = ".";
 
     /** Keeps ClassDesc objects for stack of declared classes. */
     private Deque<ClassDesc> classes;
 
     /** Full qualified name of the package. */
     private String packageName;
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.CLASS_DEF, TokenTypes.CTOR_DEF, TokenTypes.PACKAGE_DEF};
     }
 
     @Override
@@ -112,101 +110,101 @@ public class FinalClassCheck
                     if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)) {
                         desc.registerPrivateCtor();
                     }
                     else {
                         desc.registerNonPrivateCtor();
                     }
                 }
                 break;
 
             default:
                 throw new IllegalStateException(ast.toString());
         }
     }
 
     @Override
     public void leaveToken(DetailAST ast) {
         if (ast.getType() == TokenTypes.CLASS_DEF) {
             final ClassDesc desc = classes.pop();
             if (desc.isWithPrivateCtor()
                 && !desc.isDeclaredAsAbstract()
                 && !desc.isDeclaredAsFinal()
                 && !desc.isWithNonPrivateCtor()
                 && !desc.isWithNestedSubclass()
                 && !ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {
                 final String qualifiedName = desc.getQualifiedName();
                 final String className = getClassNameFromQualifiedName(qualifiedName);
                 log(ast.getLineNo(), MSG_KEY, className);
             }
         }
     }
 
     /**
      * Get name of class(with qualified package if specified) in extend clause.
      * @param classExtend extend clause to extract class name
      * @return super class name
      */
     private static String extractQualifiedName(DetailAST classExtend) {
         final String className;
 
         if (classExtend.findFirstToken(TokenTypes.IDENT) == null) {
             // Name specified with packages, have to traverse DOT
             final DetailAST firstChild = classExtend.findFirstToken(TokenTypes.DOT);
             final List<String> qualifiedNameParts = new LinkedList<>();
 
             qualifiedNameParts.add(0, firstChild.findFirstToken(TokenTypes.IDENT).getText());
             DetailAST traverse = firstChild.findFirstToken(TokenTypes.DOT);
             while (traverse != null) {
                 qualifiedNameParts.add(0, traverse.findFirstToken(TokenTypes.IDENT).getText());
                 traverse = traverse.findFirstToken(TokenTypes.DOT);
             }
-            className = Joiner.on(PACKAGE_SEPARATOR).join(qualifiedNameParts);
+            className = String.join(PACKAGE_SEPARATOR, qualifiedNameParts);
         }
         else {
             className = classExtend.findFirstToken(TokenTypes.IDENT).getText();
         }
 
         return className;
     }
 
     /**
      * Register to outer super classes of given classAst that
      * given classAst is extending them.
      * @param classAst class which outer super classes will be
      *                 informed about nesting subclass
      */
     private void registerNestedSubclassToOuterSuperClasses(DetailAST classAst) {
         final String currentAstSuperClassName = getSuperClassName(classAst);
         if (currentAstSuperClassName != null) {
             for (ClassDesc classDesc : classes) {
                 final String classDescQualifiedName = classDesc.getQualifiedName();
                 if (doesNameInExtendMatchSuperClassName(classDescQualifiedName,
                         currentAstSuperClassName)) {
                     classDesc.registerNestedSubclass();
                 }
             }
         }
     }
 
     /**
      * Get qualified class name from given class Ast.
      * @param classAst class to get qualified class name
      * @return qualified class name of a class
      */
     private String getQualifiedClassName(DetailAST classAst) {
         final String className = classAst.findFirstToken(TokenTypes.IDENT).getText();
         String outerClassQualifiedName = null;
         if (!classes.isEmpty()) {
             outerClassQualifiedName = classes.peek().getQualifiedName();
         }
         return getQualifiedClassName(packageName, outerClassQualifiedName, className);
     }
 
     /**
      * Calculate qualified class name(package + class name) laying inside given
      * outer class.
      * @param packageName package name, empty string on default package
      * @param outerClassQualifiedName qualified name(package + class) of outer class,
      *                           null if doesnt exist
      * @param className class name
      * @return qualified class name(package + class name)
      */
