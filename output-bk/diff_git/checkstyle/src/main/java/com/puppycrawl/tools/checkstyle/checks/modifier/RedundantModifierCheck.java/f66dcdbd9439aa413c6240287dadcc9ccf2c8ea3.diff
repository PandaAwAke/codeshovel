diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
index f513f8b57..af06aa17e 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
@@ -1,219 +1,242 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2015 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks.modifier;
 
 import java.util.ArrayList;
 import java.util.List;
 
 import org.apache.commons.lang3.ArrayUtils;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * Checks for redundant modifiers in interface and annotation definitions.
  * Checks for non public class constructor and enum constructor redundant modifier.
- * Also checks for redundant final modifiers on methods of final classes
+ * Checks for redundant final modifiers on methods of final classes.
+ * Checks for redundant static modifiers on nested enums.
  *
  * <p>Examples:</p>
  *
  * <pre>
  * {@code
  * public class PublicClass {
  *     public PublicClass() {} // OK
  * }
  *
  * class PackagePrivateClass {
  *     public PackagePrivateClass() {} // violation expected
  * }
  * }
  * </pre>
  *
  * <pre>
  * {@code
  * package a;
  * public class ClassWithProtectedInnerClass {
  *     protected class ProtectedClass {
  *         public ProtectedClass () {} // OK
  *     }
  * }
  * }
  * </pre>
  * <p>
  * in this example is no violation because removing public from
  * ProtectedClass constructor modifier will make this example
  * not compiling:
  * </p>
  * <pre>
  * {@code
  * package b;
  * import a.ClassWithProtectedInnerClass;
  * public class ClassExtending extends ClassWithProtectedInnerClass {
  *     ProtectedClass pc = new ProtectedClass();
  * }
  * }
  * </pre>
  *
  * @author lkuehne
  * @author <a href="mailto:piotr.listkiewicz@gmail.com">liscju</a>
+ * @author Vladislav Lisetskiy
  */
 public class RedundantModifierCheck
     extends Check {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "redundantModifier";
 
     /**
      * An array of tokens for interface modifiers.
      */
     private static final int[] TOKENS_FOR_INTERFACE_MODIFIERS = {
         TokenTypes.LITERAL_STATIC,
         TokenTypes.ABSTRACT,
     };
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getRequiredTokens() {
         return ArrayUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.METHOD_DEF,
             TokenTypes.VARIABLE_DEF,
             TokenTypes.ANNOTATION_FIELD_DEF,
             TokenTypes.INTERFACE_DEF,
             TokenTypes.CTOR_DEF,
             TokenTypes.CLASS_DEF,
             TokenTypes.ENUM_DEF,
         };
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         if (ast.getType() == TokenTypes.INTERFACE_DEF) {
             checkInterfaceModifiers(ast);
         }
         else if (ast.getType() == TokenTypes.CTOR_DEF) {
             if (isEnumMember(ast)) {
                 checkEnumConstructorModifiers(ast);
             }
             else {
                 checkClassConstructorModifiers(ast);
             }
         }
+        else if (ast.getType() == TokenTypes.ENUM_DEF) {
+            checkEnumDef(ast);
+        }
         else if (isInterfaceOrAnnotationMember(ast)) {
             processInterfaceOrAnnotation(ast);
         }
         else if (ast.getType() == TokenTypes.METHOD_DEF) {
             processMethods(ast);
         }
     }
 
     /**
      * Checks if interface has proper modifiers.
      * @param ast interface to check
      */
     private void checkInterfaceModifiers(DetailAST ast) {
         final DetailAST modifiers =
             ast.findFirstToken(TokenTypes.MODIFIERS);
 
         for (final int tokenType : TOKENS_FOR_INTERFACE_MODIFIERS) {
             final DetailAST modifier =
                     modifiers.findFirstToken(tokenType);
             if (modifier != null) {
                 log(modifier.getLineNo(), modifier.getColumnNo(),
                         MSG_KEY, modifier.getText());
             }
         }
     }
 
     /**
      * Check if enum constructor has proper modifiers.
      * @param ast constructor of enum
      */
     private void checkEnumConstructorModifiers(DetailAST ast) {
         final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
         final DetailAST modifier = modifiers.getFirstChild();
         if (modifier != null) {
             log(modifier.getLineNo(), modifier.getColumnNo(),
                     MSG_KEY, modifier.getText());
         }
     }
 
+    /**
+     * Checks whether enum has proper modifiers.
+     * @param ast enum definition.
+     */
+    private void checkEnumDef(DetailAST ast) {
+        if (isInterfaceOrAnnotationMember(ast)) {
+            processInterfaceOrAnnotation(ast);
+        }
+        else if (ast.getParent() != null) {
+            final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
+            final DetailAST staticModifier = modifiers.findFirstToken(TokenTypes.LITERAL_STATIC);
+            if (staticModifier != null) {
+                log(staticModifier.getLineNo(), staticModifier.getColumnNo(),
+                        MSG_KEY, staticModifier.getText());
+            }
+        }
+    }
+
     /**
      * Do validation of interface of annotation.
      * @param ast token AST
      */
     private void processInterfaceOrAnnotation(DetailAST ast) {
         final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
         DetailAST modifier = modifiers.getFirstChild();
         while (modifier != null) {
 
             // javac does not allow final or static in interface methods
             // order annotation fields hence no need to check that this
             // is not a method or annotation field
 
             final int type = modifier.getType();
             if (type == TokenTypes.LITERAL_PUBLIC
                 || type == TokenTypes.LITERAL_STATIC
                         && ast.getType() != TokenTypes.METHOD_DEF
                 || type == TokenTypes.ABSTRACT
                 || type == TokenTypes.FINAL) {
                 log(modifier.getLineNo(), modifier.getColumnNo(),
                         MSG_KEY, modifier.getText());
                 break;
             }
 
             modifier = modifier.getNextSibling();
         }
     }
 
     /**
      * Process validation ofMethods.
      * @param ast method AST
      */
     private void processMethods(DetailAST ast) {
         final DetailAST modifiers =
                         ast.findFirstToken(TokenTypes.MODIFIERS);
         // private method?
         boolean checkFinal =
             modifiers.branchContains(TokenTypes.LITERAL_PRIVATE);
         // declared in a final class?
         DetailAST parent = ast.getParent();
         while (parent != null) {
             if (parent.getType() == TokenTypes.CLASS_DEF) {
                 final DetailAST classModifiers =
                     parent.findFirstToken(TokenTypes.MODIFIERS);
                 checkFinal |=
                     classModifiers.branchContains(TokenTypes.FINAL);
                 break;
             }
             parent = parent.getParent();
         }
