diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java
index 81a8e22dd..6bdba7f49 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java
@@ -185,134 +185,188 @@ public class IllegalInstantiationCheck
     /**
      * Collects a "new" token.
      * @param ast the "new" token
      */
     private void processLiteralNew(DetailAST ast) {
         if (ast.getParent().getType() == TokenTypes.METHOD_REF) {
             return;
         }
         instantiations.add(ast);
     }
 
     /**
      * Processes one of the collected "new" tokens when treewalking
      * has finished.
      * @param ast the "new" token.
      */
     private void postprocessLiteralNew(DetailAST ast) {
         final DetailAST typeNameAST = ast.getFirstChild();
         final AST nameSibling = typeNameAST.getNextSibling();
         if (nameSibling != null
                 && nameSibling.getType() == TokenTypes.ARRAY_DECLARATOR) {
             // ast == "new Boolean[]"
             return;
         }
 
         final FullIdent typeIdent = FullIdent.createFullIdent(typeNameAST);
         final String typeName = typeIdent.getText();
         final int lineNo = ast.getLineNo();
         final int colNo = ast.getColumnNo();
         final String fqClassName = getIllegalInstantiation(typeName);
         if (fqClassName != null) {
             log(lineNo, colNo, MSG_KEY, fqClassName);
         }
     }
 
     /**
      * Checks illegal instantiations.
      * @param className instantiated class, may or may not be qualified
      * @return the fully qualified class name of className
      * or null if instantiation of className is OK
      */
     private String getIllegalInstantiation(String className) {
         if (illegalClasses.contains(className)) {
             return className;
         }
 
         final int clsNameLen = className.length();
         final int pkgNameLen = pkgName == null ? 0 : pkgName.length();
 
         for (String illegal : illegalClasses) {
+
             final int illegalLen = illegal.length();
+            if (isStandardClass(className, clsNameLen, illegal, illegalLen)) {
+                return illegal;
+            }
+            if (isSamePackage(className, clsNameLen, pkgNameLen, illegal, illegalLen)) {
+                return illegal;
+            }
+            final String importArg = checkImportStatements(className);
+            if (importArg != null) {
+                return importArg;
+            }
+        }
+        return null;
+    }
 
-            // class from java.lang
-            if (illegalLen - JAVA_LANG.length() == clsNameLen
-                && illegal.endsWith(className)
-                && illegal.startsWith(JAVA_LANG)) {
-                // java.lang needs no import, but a class without import might
-                // also come from the same file or be in the same package.
-                // E.g. if a class defines an inner class "Boolean",
-                // the expression "new Boolean()" refers to that class,
-                // not to java.lang.Boolean
-
-                final boolean isSameFile = classNames.contains(className);
-
-                boolean isSamePackage = false;
-                try {
-                    final ClassLoader classLoader = getClassLoader();
-                    if (classLoader != null) {
-                        final String fqName = pkgName + "." + className;
-                        classLoader.loadClass(fqName);
-                        // no ClassNotFoundException, fqName is a known class
-                        isSamePackage = true;
-                    }
-                }
-                catch (final ClassNotFoundException ex) {
-                    // not a class from the same package
-                    isSamePackage = false;
+    /**
+     * check import statements
+     * @param className name of the class
+     * @return value of illegal instatiated type
+     */
+    private String checkImportStatements(String className) {
+        // import statements
+        for (FullIdent importLineText : imports) {
+            final String importArg = importLineText.getText();
+            if (importArg.endsWith(".*")) {
+                final String fqClass =
+                    importArg.substring(0, importArg.length() - 1)
+                    + className;
+                // assume that illegalInsts only contain existing classes
+                // or else we might create a false alarm here
+                if (illegalClasses.contains(fqClass)) {
+                    return fqClass;
                 }
-
-                if (!(isSameFile || isSamePackage)) {
-                    return illegal;
+            }
+            else {
+                if (Utils.baseClassname(importArg).equals(className)
+                    && illegalClasses.contains(importArg)) {
+                    return importArg;
                 }
             }
+        }
+        return null;
+    }
 
-            // class from same package
-
-            // the toplevel package (pkgName == null) is covered by the
-            // "illegalInsts.contains(className)" check above
+    /**
+     * check that type is of the sme package
+     * @param className class name
+     * @param clsNameLen lengh of class name
+     * @param pkgNameLen package name
+     * @param illegal illegal value
+     * @param illegalLen illegal value length
+     * @return true if type of the same package
+     */
+    private boolean isSamePackage(String className, int clsNameLen, int pkgNameLen,
+                                  String illegal, int illegalLen) {
+        // class from same package
+
+        // the toplevel package (pkgName == null) is covered by the
+        // "illegalInsts.contains(className)" check above
+
+        // the test is the "no garbage" version of
+        // illegal.equals(pkgName + "." + className)
+        if (pkgName != null
+            && clsNameLen == illegalLen - pkgNameLen - 1
+            && illegal.charAt(pkgNameLen) == '.'
+            && illegal.endsWith(className)
+            && illegal.startsWith(pkgName)) {
+            return true;
+        }
+        return false;
+    }
 
-            // the test is the "no garbage" version of
-            // illegal.equals(pkgName + "." + className)
-            if (pkgName != null
-                && clsNameLen == illegalLen - pkgNameLen - 1
-                && illegal.charAt(pkgNameLen) == '.'
-                && illegal.endsWith(className)
-                && illegal.startsWith(pkgName)) {
-                return illegal;
+    /**
+     * is Standard Class
+     * @param className class name
+     * @param clsNameLen class name length
+     * @param illegal illegal value
+     * @param illegalLen illegal value length
+     * @return true if type is standard
+     */
+    private boolean isStandardClass(String className, int clsNameLen, String illegal,
+                                    int illegalLen) {
+        // class from java.lang
+        if (illegalLen - JAVA_LANG.length() == clsNameLen
+            && illegal.endsWith(className)
+            && illegal.startsWith(JAVA_LANG)) {
+            // java.lang needs no import, but a class without import might
+            // also come from the same file or be in the same package.
+            // E.g. if a class defines an inner class "Boolean",
+            // the expression "new Boolean()" refers to that class,
+            // not to java.lang.Boolean
+
+            final boolean isSameFile = classNames.contains(className);
+            final boolean isSamePackage = isSamePackage(className);
+
+            if (!(isSameFile || isSamePackage)) {
+                return true;
             }
-            // import statements
-            for (FullIdent importLineText : imports) {
-                final String importArg = importLineText.getText();
-                if (importArg.endsWith(".*")) {
-                    final String fqClass =
-                        importArg.substring(0, importArg.length() - 1)
-                        + className;
-                    // assume that illegalInsts only contain existing classes
-                    // or else we might create a false alarm here
-                    if (illegalClasses.contains(fqClass)) {
-                        return fqClass;
-                    }
-                }
-                else {
-                    if (Utils.baseClassname(importArg).equals(className)
-                        && illegalClasses.contains(importArg)) {
-                        return importArg;
-                    }
-                }
+        }
+        return false;
+    }
+
+    /**
+     * is class of the same package
+     * @param className class name
+     * @return true if same package class
+     */
+    private boolean isSamePackage(String className) {
+        boolean isSamePackage = false;
+        try {
+            final ClassLoader classLoader = getClassLoader();
+            if (classLoader != null) {
+                final String fqName = pkgName + "." + className;
+                classLoader.loadClass(fqName);
+                // no ClassNotFoundException, fqName is a known class
+                isSamePackage = true;
             }
         }
-        return null;
+        catch (final ClassNotFoundException ex) {
+            // not a class from the same package
+            isSamePackage = false;
+        }
+        return isSamePackage;
     }
 
     /**
      * Sets the classes that are illegal to instantiate.
      * @param classNames a comma seperate list of class names
      */
     public void setClasses(String classNames) {
         illegalClasses.clear();
         final StringTokenizer tok = new StringTokenizer(classNames, ",");
         while (tok.hasMoreTokens()) {
             illegalClasses.add(tok.nextToken());
         }
     }
 }
