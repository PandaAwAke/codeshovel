diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
index 851360188..6f3eb51d7 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
@@ -265,101 +265,101 @@ public abstract class AbstractExpressionHandler {
 
     /**
      * Check the indentation for a set of lines.
      *
      * @param lines              the set of lines to check
      * @param indentLevel        the indentation level
      * @param firstLineMatches   whether or not the first line has to match
      * @param firstLine          firstline of whole expression
      */
     private void checkLinesIndent(LineSet lines,
                                   IndentLevel indentLevel,
                                   boolean firstLineMatches,
                                   int firstLine) {
         if (lines.isEmpty()) {
             return;
         }
 
         // check first line
         final int startLine = lines.firstLine();
         final int endLine = lines.lastLine();
         final int startCol = lines.firstLineCol();
 
         final int realStartCol =
             getLineStart(indentCheck.getLine(startLine - 1));
 
         if (realStartCol == startCol) {
             checkSingleLine(startLine, startCol, indentLevel,
                 firstLineMatches);
         }
 
         // if first line starts the line, following lines are indented
         // one level; but if the first line of this expression is
         // nested with the previous expression (which is assumed if it
         // doesn't start the line) then don't indent more, the first
         // indentation is absorbed by the nesting
 
         IndentLevel theLevel = indentLevel;
         if (firstLineMatches
             || firstLine > mainAst.getLineNo() && shouldIncreaseIndent()) {
             theLevel = new IndentLevel(indentLevel, getBasicOffset());
         }
 
         // check following lines
         for (int i = startLine + 1; i <= endLine; i++) {
             final Integer col = lines.getStartColumn(i);
             // startCol could be null if this line didn't have an
             // expression that was required to be checked (it could be
             // checked by a child expression)
 
             if (col != null) {
-                checkSingleLine(i, col.intValue(), theLevel, false);
+                checkSingleLine(i, col, theLevel, false);
             }
         }
     }
 
     /**
      * Check the indent level for a single line.
      *
      * @param lineNum       the line number to check
      * @param indentLevel   the required indent level
      */
     private void checkSingleLine(int lineNum, IndentLevel indentLevel) {
         final String line = indentCheck.getLine(lineNum - 1);
         final int start = getLineStart(line);
         if (indentLevel.greaterThan(start)) {
             logChildError(lineNum, start, indentLevel);
         }
     }
 
     /**
      * Check the indentation for a single line.
      *
      * @param lineNum       the number of the line to check
      * @param colNum        the column number we are starting at
      * @param indentLevel   the indentation level
      * @param mustMatch     whether or not the indentation level must match
      */
 
     private void checkSingleLine(int lineNum, int colNum,
         IndentLevel indentLevel, boolean mustMatch) {
         final String line = indentCheck.getLine(lineNum - 1);
         final int start = getLineStart(line);
         // if must match is set, it is an error if the line start is not
         // at the correct indention level; otherwise, it is an only an
         // error if this statement starts the line and it is less than
         // the correct indentation level
         if (mustMatch ? !indentLevel.accept(start)
             : colNum == start && indentLevel.greaterThan(start)) {
             logChildError(lineNum, start, indentLevel);
         }
     }
 
     /**
      * Get the start of the specified line.
      *
      * @param line   the specified line number
      *
      * @return the start of the specified line
      */
     protected final int getLineStart(String line) {
         int index = 0;
@@ -432,101 +432,101 @@ public abstract class AbstractExpressionHandler {
     protected final int getFirstLine(int startLine, DetailAST tree) {
         int realStart = startLine;
         final int currLine = tree.getLineNo();
         if (currLine < realStart) {
             realStart = currLine;
         }
 
         // check children
         for (DetailAST node = tree.getFirstChild();
             node != null;
             node = node.getNextSibling()) {
             realStart = getFirstLine(realStart, node);
         }
 
         return realStart;
     }
 
     /**
      * Get the column number for the start of a given expression, expanding
      * tabs out into spaces in the process.
      *
      * @param ast   the expression to find the start of
      *
      * @return the column number for the start of the expression
      */
     protected final int expandedTabsColumnNo(DetailAST ast) {
         final String line =
             indentCheck.getLine(ast.getLineNo() - 1);
 
         return Utils.lengthExpandedTabs(line, ast.getColumnNo(),
             indentCheck.getIndentationTabWidth());
     }
 
     /**
      * Find the set of lines for a given subtree.
      *
      * @param lines          the set of lines to add to
      * @param tree           the subtree to examine
      * @param allowNesting   whether or not to allow nested subtrees
      */
     protected final void findSubtreeLines(LineSet lines, DetailAST tree,
         boolean allowNesting) {
         if (getIndentCheck().getHandlerFactory().isHandledType(tree.getType())) {
             return;
         }
 
         final int lineNum = tree.getLineNo();
         final Integer colNum = lines.getStartColumn(lineNum);
 
         final int thisLineColumn = expandedTabsColumnNo(tree);
-        if (colNum == null || thisLineColumn < colNum.intValue()) {
+        if (colNum == null || thisLineColumn < colNum) {
             lines.addLineAndCol(lineNum, thisLineColumn);
         }
 
         // check children
         for (DetailAST node = tree.getFirstChild();
             node != null;
             node = node.getNextSibling()) {
             findSubtreeLines(lines, node, allowNesting);
         }
     }
 
     /**
      * Check the indentation level of modifiers.
      */
     protected void checkModifiers() {
         final DetailAST modifiers =
             mainAst.findFirstToken(TokenTypes.MODIFIERS);
         for (DetailAST modifier = modifiers.getFirstChild();
              modifier != null;
              modifier = modifier.getNextSibling()) {
             if (startsLine(modifier)
                 && !getLevel().accept(expandedTabsColumnNo(modifier))) {
                 logError(modifier, "modifier",
                     expandedTabsColumnNo(modifier));
             }
         }
     }
 
     /**
      * Check the indentation of the expression we are handling.
      */
     public abstract void checkIndentation();
 
     /**
      * Accessor for the IndentCheck attribute.
      *
      * @return the IndentCheck attribute
      */
     protected final IndentationCheck getIndentCheck() {
         return indentCheck;
     }
 
     /**
      * Accessor for the MainAst attribute.
      *
      * @return the MainAst attribute
      */
     protected final DetailAST getMainAst() {
         return mainAst;
     }
