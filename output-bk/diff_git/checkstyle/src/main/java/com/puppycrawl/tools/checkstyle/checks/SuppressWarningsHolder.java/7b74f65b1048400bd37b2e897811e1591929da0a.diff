diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
index d627c4a26..1f2d3572a 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
@@ -216,143 +216,150 @@ public class SuppressWarningsHolder
     }
 
     @Override
     public int[] getDefaultTokens() {
         return new int[] {TokenTypes.ANNOTATION};
     }
 
     @Override
     public void beginTree(DetailAST rootAST) {
         ENTRIES.set(new LinkedList<Entry>());
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         // check whether annotation is SuppressWarnings
         // expected children: AT ( IDENT | DOT ) LPAREN <values> RPAREN
         String identifier = getIdentifier(getNthChild(ast, 1));
         if (identifier.startsWith(JAVA_LANG_PREFIX)) {
             identifier = identifier.substring(JAVA_LANG_PREFIX.length());
         }
         if ("SuppressWarnings".equals(identifier)) {
 
             // get values of annotation
             List<String> values = null;
             final DetailAST lparenAST = ast.findFirstToken(TokenTypes.LPAREN);
             if (lparenAST != null) {
                 final DetailAST nextAST = lparenAST.getNextSibling();
                 if (nextAST != null) {
                     final int nextType = nextAST.getType();
                     switch (nextType) {
                         case TokenTypes.EXPR:
                         case TokenTypes.ANNOTATION_ARRAY_INIT:
                             values = getAnnotationValues(nextAST);
                             break;
 
                         case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:
                             // expected children: IDENT ASSIGN ( EXPR |
                             // ANNOTATION_ARRAY_INIT )
                             values = getAnnotationValues(getNthChild(nextAST, 2));
                             break;
 
                         case TokenTypes.RPAREN:
                             // no value present (not valid Java)
                             break;
 
                         default:
                             // unknown annotation value type (new syntax?)
                     }
                 }
             }
-            if (values == null) {
-                log(ast, "suppress.warnings.missing.value");
+            if (isAnnotationEmpty(values)) {
                 return;
             }
 
             final DetailAST targetAST = getAnnotationTarget(ast);
 
 
             if (targetAST == null) {
                 log(ast, "suppress.warnings.invalid.target");
                 return;
             }
 
             // get text range of target
             final int firstLine = targetAST.getLineNo();
             final int firstColumn = targetAST.getColumnNo();
             final DetailAST nextAST = targetAST.getNextSibling();
             final int lastLine;
             final int lastColumn;
             if (nextAST != null) {
                 lastLine = nextAST.getLineNo();
                 lastColumn = nextAST.getColumnNo() - 1;
             }
             else {
                 lastLine = Integer.MAX_VALUE;
                 lastColumn = Integer.MAX_VALUE;
             }
 
             // add suppression entries for listed checks
             final List<Entry> entries = ENTRIES.get();
             if (entries != null) {
                 for (String value : values) {
                     // strip off the checkstyle-only prefix if present
                     if (value.startsWith(CHECKSTYLE_PREFIX)) {
                         value = value.substring(CHECKSTYLE_PREFIX.length());
                     }
                     entries.add(new Entry(value, firstLine, firstColumn,
                         lastLine, lastColumn));
                 }
             }
         }
     }
 
+    /**
+     * @param values list of values in the annotation
+     * @return whether annotation is empty or contains some values
+     */
+    private boolean isAnnotationEmpty(List<String> values) {
+        return values == null;
+    }
+
     /**
      * get target of annotation
      * @param ast the AST node to get the child of
      * @return get target of annotation
      */
     private DetailAST getAnnotationTarget(DetailAST ast) {
         DetailAST targetAST = null;
         DetailAST parentAST = ast.getParent();
         if (parentAST != null) {
             switch (parentAST.getType()) {
                 case TokenTypes.MODIFIERS:
                 case TokenTypes.ANNOTATIONS:
                     parentAST = parentAST.getParent();
                     if (parentAST != null) {
                         switch (parentAST.getType()) {
                             case TokenTypes.ANNOTATION_DEF:
                             case TokenTypes.PACKAGE_DEF:
                             case TokenTypes.CLASS_DEF:
                             case TokenTypes.INTERFACE_DEF:
                             case TokenTypes.ENUM_DEF:
                             case TokenTypes.ENUM_CONSTANT_DEF:
                             case TokenTypes.CTOR_DEF:
                             case TokenTypes.METHOD_DEF:
                             case TokenTypes.PARAMETER_DEF:
                             case TokenTypes.VARIABLE_DEF:
                                 targetAST = parentAST;
                                 break;
 
                             default:
                                 // unexpected target type
                         }
                     }
                     break;
 
                 default:
                     // unexpected container type
             }
         }
         return targetAST;
     }
 
     /**
      * Returns the n'th child of an AST node.
      * @param ast the AST node to get the child of
      * @param index the index of the child to get
      * @return the n'th child of the given AST node, or {@code null} if none
      */
     private static DetailAST getNthChild(DetailAST ast, int index) {
         DetailAST child = ast.getFirstChild();
         if (child != null) {
