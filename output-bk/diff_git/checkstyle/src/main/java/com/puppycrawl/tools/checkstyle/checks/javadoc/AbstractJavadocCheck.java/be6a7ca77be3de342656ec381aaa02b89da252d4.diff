diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java
index ade34d7e2..228194ea9 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java
@@ -7,271 +7,306 @@
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.javadoc;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.nio.charset.Charset;
 import java.util.HashMap;
 import java.util.Map;
 
 import org.antlr.v4.runtime.ANTLRInputStream;
 import org.antlr.v4.runtime.BailErrorStrategy;
 import org.antlr.v4.runtime.BaseErrorListener;
 import org.antlr.v4.runtime.CommonTokenStream;
 import org.antlr.v4.runtime.ParserRuleContext;
 import org.antlr.v4.runtime.RecognitionException;
 import org.antlr.v4.runtime.Recognizer;
 import org.antlr.v4.runtime.RuleContext;
 import org.antlr.v4.runtime.Token;
 import org.antlr.v4.runtime.misc.ParseCancellationException;
 import org.antlr.v4.runtime.tree.ParseTree;
 import org.antlr.v4.runtime.tree.TerminalNode;
 
 import com.google.common.base.CaseFormat;
 import com.google.common.primitives.Ints;
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.DetailNode;
 import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocLexer;
 import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser;
 
 /**
  * Base class for Checks that process Javadoc comments.
  * @author Baratali Izmailov
  */
 public abstract class AbstractJavadocCheck extends Check
 {
+    /**
+     * Error message key for common javadoc errors.
+     */
+    private static final String PARSE_ERROR_MESSAGE_KEY = "javadoc.parse.error";
+
+    /**
+     * Unrecognized error from antlr parser
+     */
+    private static final String UNRECOGNIZED_ANTLR_ERROR_MESSAGE_KEY =
+            "javadoc.unrecognized.antlr.error";
+
     /**
      * key is "line:column"
      * value is DetailNode tree
      */
     private static final Map<String, ParseStatus> TREE_CACHE = new HashMap<String, ParseStatus>();
 
     /**
      * Custom error listener.
      */
     private final DescriptiveErrorListener mErrorListener =
             new DescriptiveErrorListener();
 
     /**
      * DetailAST node of considered Javadoc comment that is just a block comment
      * in Java language syntax tree.
      */
     private DetailAST mBlockCommentAst;
 
     /**
      * Returns the default token types a check is interested in.
      * @return the default token types
      * @see JavadocTokenTypes
      */
     public abstract int[] getDefaultJavadocTokens();
 
     /**
      * Called before the starting to process a tree.
      * @param aRootAst
      *        the root of the tree
      */
     public void beginJavadocTree(DetailNode aRootAst)
     {
     }
 
     /**
      * Called after finished processing a tree.
      * @param aRootAst
      *        the root of the tree
      */
     public void finishJavadocTree(DetailNode aRootAst)
     {
     }
 
     /**
      * Called to process a Javadoc token.
      * @param aAst
      *        the token to process
      */
     public void visitJavadocToken(DetailNode aAst)
     {
     }
 
     /**
      * Called after all the child nodes have been process.
      * @param aAst
      *        the token leaving
      */
     public void leaveJavadocToken(DetailNode aAst)
     {
     }
 
+    /**
+     * Defined final to not allow JavadocChecks to change default tokens.
+     * @return default tokens
+     */
     @Override
     public final int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.BLOCK_COMMENT_BEGIN };
     }
 
+    /**
+     * Defined final to not allow JavadocChecks to change acceptable tokens.
+     * @return acceptable tokens
+     */
     @Override
     public final int[] getAcceptableTokens()
     {
         return super.getAcceptableTokens();
     }
 
+    /**
+     * Defined final to not allow JavadocChecks to change required tokens.
+     * @return required tokens
+     */
     @Override
     public final int[] getRequiredTokens()
     {
         return super.getRequiredTokens();
     }
 
+    /**
+     * Defined final because all JavadocChecks require comment nodes.
+     * @return true
+     */
     @Override
     public final boolean isCommentNodesRequired()
     {
         return true;
     }
 
     @Override
     public final void beginTree(DetailAST aRootAST)
     {
+        TREE_CACHE.clear();
     }
 
     @Override
     public final void finishTree(DetailAST aRootAST)
     {
         TREE_CACHE.clear();
     }
 
     @Override
     public final void leaveToken(DetailAST aAST)
     {
     }
 
     @Override
     public final void visitToken(DetailAST aBlockCommentAst)
     {
         if (JavadocUtils.isJavadocComment(aBlockCommentAst)) {
             mBlockCommentAst = aBlockCommentAst;
 
             final String treeCacheKey = aBlockCommentAst.getLineNo() + ":"
                     + aBlockCommentAst.getColumnNo();
 
             ParseStatus ps;
 
             if (TREE_CACHE.containsKey(treeCacheKey)) {
                 ps = TREE_CACHE.get(treeCacheKey);
             }
             else {
                 ps = parseJavadocAsDetailNode(aBlockCommentAst);
                 TREE_CACHE.put(treeCacheKey, ps);
             }
 
             if (ps.getParseErrorMessage() == null) {
                 processTree(ps.getTree());
             }
             else {
                 final ParseErrorMessage parseErrorMessage = ps.getParseErrorMessage();
                 log(parseErrorMessage.getLineNumber(),
                         parseErrorMessage.getMessageKey(),
                         parseErrorMessage.getMessageArguments());
             }
         }
 
     }
 
     protected DetailAST getBlockCommentAst()
     {
         return mBlockCommentAst;
     }
 
     /**
      * Parses Javadoc comment as DetailNode tree.
      * @param aJavadocCommentAst
      *        DetailAST of Javadoc comment
      * @return DetailNode tree of Javadoc comment
      */
     private ParseStatus parseJavadocAsDetailNode(DetailAST aJavadocCommentAst)
     {
         final String javadocComment = JavadocUtils.getJavadocCommentContent(aJavadocCommentAst);
 
         // Log messages should have line number in scope of file,
         // not in scope of Javadoc comment.
         // Offset is line number of beginning of Javadoc comment.
         mErrorListener.setOffset(aJavadocCommentAst.getLineNo() - 1);
 
         final ParseStatus result = new ParseStatus();
         ParseTree parseTree = null;
         ParseErrorMessage parseErrorMessage = null;
 
         try {
             parseTree = parseJavadocAsParseTree(javadocComment);
         }
         catch (IOException e) {
             // Antlr can not initiate its ANTLRInputStream
             parseErrorMessage = new ParseErrorMessage(aJavadocCommentAst.getLineNo(),
-                    "javadoc.parse.error",
+                    PARSE_ERROR_MESSAGE_KEY,
                     aJavadocCommentAst.getColumnNo(), e.getMessage());
         }
         catch (ParseCancellationException e) {
             // If syntax error occurs then message is printed by error listener
             // and parser throws this runtime exception to stop parsing.
             // Just stop processing current Javadoc comment.
             parseErrorMessage = mErrorListener.getErrorMessage();
+
+            // There are cases when antlr error listener does not handle syntax error
+            if (parseErrorMessage == null) {
+                parseErrorMessage = new ParseErrorMessage(aJavadocCommentAst.getLineNo(),
+                        UNRECOGNIZED_ANTLR_ERROR_MESSAGE_KEY,
+                        aJavadocCommentAst.getColumnNo(), e.getMessage());
+            }
         }
 
         if (parseErrorMessage == null) {
             final DetailNode tree = convertParseTree2DetailNode(parseTree);
             result.setTree(tree);
         }
         else {
             result.setParseErrorMessage(parseErrorMessage);
         }
 
         return result;
     }
 
     /**
      * Converts ParseTree (that is generated by ANTLRv4) to DetailNode tree.
      *
      * @param aRootParseTree root node of ParseTree
      * @return root of DetailNode tree
      */
     private DetailNode convertParseTree2DetailNode(ParseTree aRootParseTree)
     {
         final ParseTree currentParseTreeNode = aRootParseTree;
         final JavadocNodeImpl rootJavadocNode = createJavadocNode(currentParseTreeNode, null, -1);
 
         int childCount = currentParseTreeNode.getChildCount();
         JavadocNodeImpl[] children = (JavadocNodeImpl[]) rootJavadocNode.getChildren();
 
         for (int i = 0; i < childCount; i++) {
             final JavadocNodeImpl child = createJavadocNode(currentParseTreeNode.getChild(i)
                     , rootJavadocNode, i);
             children[i] = child;
         }
 
         JavadocNodeImpl currentJavadocParent = rootJavadocNode;
         ParseTree currentParseTreeParent = currentParseTreeNode;
 
         while (currentJavadocParent != null) {
             children = (JavadocNodeImpl[]) currentJavadocParent.getChildren();
             childCount = children.length;
 
             for (int i = 0; i < childCount; i++) {
                 final JavadocNodeImpl currentJavadocNode = children[i];
                 final ParseTree currentParseTreeNodeChild = currentParseTreeParent.getChild(i);
 
                 final JavadocNodeImpl[] subChildren = (JavadocNodeImpl[]) currentJavadocNode
                         .getChildren();
 
                 for (int j = 0; j < subChildren.length; j++) {
                     final JavadocNodeImpl child =
                             createJavadocNode(currentParseTreeNodeChild.getChild(j)
