diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MemberDefHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MemberDefHandler.java
index 90c50b87b..83e59404b 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MemberDefHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MemberDefHandler.java
@@ -42,69 +42,69 @@ public class MemberDefHandler extends AbstractExpressionHandler {
     }
 
     @Override
     public void checkIndentation() {
         final DetailAST modifiersNode = getMainAst().findFirstToken(TokenTypes.MODIFIERS);
         if (modifiersNode.getChildCount() != 0) {
             checkModifiers();
         }
         else {
             checkType();
         }
         final LineWrappingHandler lineWrap =
             new LineWrappingHandler(getIndentCheck(), getMainAst(),
                 getVarDefStatementSemicolon(getMainAst()));
         if (lineWrap.getLastNode() != null && !isArrayDeclaration(getMainAst())) {
             lineWrap.checkIndentation();
         }
     }
 
     @Override
     public IndentLevel suggestedChildLevel(AbstractExpressionHandler child) {
         return getLevel();
     }
 
     @Override
     protected void checkModifiers() {
         final DetailAST modifier = getMainAst().findFirstToken(TokenTypes.MODIFIERS);
         if (startsLine(modifier)
             && !getLevel().accept(expandedTabsColumnNo(modifier))) {
             logError(modifier, "modifier", expandedTabsColumnNo(modifier));
         }
     }
 
     /**
      * Check the indentation of the method type.
      */
     private void checkType() {
         final DetailAST type = getMainAst().findFirstToken(TokenTypes.TYPE);
         final DetailAST ident = AbstractExpressionHandler.getFirstToken(type);
         final int columnNo = expandedTabsColumnNo(ident);
         if (startsLine(ident) && !getLevel().accept(columnNo)) {
             logError(ident, "type", columnNo);
         }
     }
 
     /**
      * Checks if variable_def node is array declaration.
      * @param variableDef current variable_def.
      * @return true if variable_def node is array declaration.
      */
-    private boolean isArrayDeclaration(DetailAST variableDef) {
+    private static boolean isArrayDeclaration(DetailAST variableDef) {
         return variableDef.findFirstToken(TokenTypes.TYPE)
             .findFirstToken(TokenTypes.ARRAY_DECLARATOR) != null;
     }
 
     /**
      * Returns semicolon for variable definition statement.
      * @param variableDef
      *          ast node of type TokenTypes.VARIABLE_DEF
      * @return ast node of type TokenTypes.SEMI
      */
     private static DetailAST getVarDefStatementSemicolon(DetailAST variableDef) {
         DetailAST lastNode = variableDef.getLastChild();
         if (lastNode.getType() != TokenTypes.SEMI) {
             lastNode = variableDef.getNextSibling();
         }
         return lastNode;
     }
 }
