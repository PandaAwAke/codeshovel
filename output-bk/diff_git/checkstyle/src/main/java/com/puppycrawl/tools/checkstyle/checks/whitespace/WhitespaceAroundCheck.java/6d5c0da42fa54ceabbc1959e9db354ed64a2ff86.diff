diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java
index 5cb1be9e6..755422b17 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java
@@ -398,101 +398,101 @@ public class WhitespaceAroundCheck extends Check {
         if (currentType == TokenTypes.STAR
             && parentType == TokenTypes.DOT) {
             return true;
         }
 
         // Check for an SLIST that has a parent CASE_GROUP. It is not a '{'.
         if (currentType == TokenTypes.SLIST
             && parentType == TokenTypes.CASE_GROUP) {
             return true;
         }
 
         if (isColonOfCaseOrDefault(currentType, parentType)) {
             return true;
         }
 
         // Checks if empty methods, ctors or loops are allowed.
         if (isEmptyBlock(ast, parentType)) {
             return true;
         }
 
         // Checks if empty classes, interfaces or enums are allowed
         return allowEmptyTypes && isEmptyType(ast, parentType);
     }
 
     /**
      * is empty block
      * @param ast ast
      * @param parentType parent
      * @return true is block is empty
      */
     private boolean isEmptyBlock(DetailAST ast, int parentType) {
         return isEmptyMethodBlock(ast, parentType)
                 || isEmptyCtorBlock(ast, parentType)
                 || isEmptyLoop(ast, parentType);
     }
 
     /**
      * we do not want to check colon for cases and defaults
      * @param currentType current
      * @param parentType parent
      * @return true is cur token in colon of case or default tokens
      */
     private boolean isColonOfCaseOrDefault(int currentType, int parentType) {
         if (currentType == TokenTypes.COLON) {
             //we do not want to check colon for cases and defaults
             if (parentType == TokenTypes.LITERAL_DEFAULT
                 || parentType == TokenTypes.LITERAL_CASE) {
                 return true;
             }
             else if (parentType == TokenTypes.FOR_EACH_CLAUSE
-                && this.ignoreEnhancedForColon) {
+                && ignoreEnhancedForColon) {
                 return true;
             }
         }
         return false;
     }
 
     /**
      * is array initialization
      * @param currentType curret token
      * @param parentType parent token
      * @return true is current token inside array initialization
      */
     private static boolean isArrayInitialization(int currentType, int parentType) {
         return (currentType == TokenTypes.RCURLY
                 || currentType == TokenTypes.LCURLY)
             && (parentType == TokenTypes.ARRAY_INIT
                 || parentType == TokenTypes.ANNOTATION_ARRAY_INIT);
     }
 
     /**
      * Test if the given <code>DetailAST</code> is part of an allowed empty
      * method block.
      * @param ast the <code>DetailAST</code> to test.
      * @param parentType the token type of <code>ast</code>'s parent.
      * @return <code>true</code> if <code>ast</code> makes up part of an
      *         allowed empty method block.
      */
     private boolean isEmptyMethodBlock(DetailAST ast, int parentType) {
         return allowEmptyMethods
             && isEmptyBlock(ast, parentType, TokenTypes.METHOD_DEF);
     }
 
     /**
      * Test if the given <code>DetailAST</code> is part of an allowed empty
      * constructor (ctor) block.
      * @param ast the <code>DetailAST</code> to test.
      * @param parentType the token type of <code>ast</code>'s parent.
      * @return <code>true</code> if <code>ast</code> makes up part of an
      *         allowed empty constructor block.
      */
     private boolean isEmptyCtorBlock(DetailAST ast, int parentType) {
         return allowEmptyCtors
             && isEmptyBlock(ast, parentType, TokenTypes.CTOR_DEF);
     }
 
     /**
      *
      * @param ast ast the <code>DetailAST</code> to test.
      * @param parentType the token type of <code>ast</code>'s parent.
      * @return <code>true</code> if <code>ast</code> makes up part of an
