diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalVariableNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalVariableNameCheck.java
index 4b617e72a..69bd5fa7a 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalVariableNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalVariableNameCheck.java
@@ -69,72 +69,72 @@ import com.puppycrawl.tools.checkstyle.api.Utils;
  * <p>
  *
  * @author Rick Giles
  * @author maxvetrenko
  */
 public class LocalVariableNameCheck
     extends AbstractNameCheck
 {
     /**
      * Allow one character name for initialization expression in FOR loop.
      */
     private boolean allowOneCharVarInForLoop;
 
     /** Regexp for one-char loop variables. */
     private static Pattern sSingleChar = Utils.getPattern("^[a-z]$");
 
     /** Creates a new <code>LocalVariableNameCheck</code> instance. */
     public LocalVariableNameCheck()
     {
         super("^[a-z][a-zA-Z0-9]*$");
     }
 
     public final void setAllowOneCharVarInForLoop(boolean allow)
     {
         allowOneCharVarInForLoop = allow;
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.VARIABLE_DEF,
             TokenTypes.PARAMETER_DEF,
         };
     }
 
     @Override
     public int[] getAcceptableTokens()
     {
         return new int[] {
             TokenTypes.VARIABLE_DEF,
             TokenTypes.PARAMETER_DEF,
         };
     }
 
     @Override
     protected final boolean mustCheckName(DetailAST ast)
     {
         final DetailAST modifiersAST =
             ast.findFirstToken(TokenTypes.MODIFIERS);
-        final boolean isFinal = (modifiersAST != null)
+        final boolean isFinal = modifiersAST != null
             && modifiersAST.branchContains(TokenTypes.FINAL);
         if (allowOneCharVarInForLoop && isForLoopVariable(ast)) {
             final String variableName =
                     ast.findFirstToken(TokenTypes.IDENT).getText();
             return !sSingleChar.matcher(variableName).find();
         }
-        return (!isFinal && ScopeUtils.isLocalVariableDef(ast));
+        return !isFinal && ScopeUtils.isLocalVariableDef(ast);
     }
 
     /**
      * Checks if a variable is the loop's one.
      * @param variableDef variable definition.
      * @return true if a variable is the loop's one.
      */
     private boolean isForLoopVariable(DetailAST variableDef)
     {
         final int parentType = variableDef.getParent().getType();
         return parentType == TokenTypes.FOR_INIT
                 || parentType == TokenTypes.FOR_EACH_CLAUSE;
     }
 }
