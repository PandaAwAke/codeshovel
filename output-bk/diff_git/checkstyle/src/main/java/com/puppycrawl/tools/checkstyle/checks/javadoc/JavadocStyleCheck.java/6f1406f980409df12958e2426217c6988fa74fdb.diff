diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
index d0935d2bc..b8b80dcbb 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
@@ -130,119 +130,119 @@ public class JavadocStyleCheck
         };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         if (shouldCheck(ast)) {
             final FileContents contents = getFileContents();
             // Need to start searching for the comment before the annotations
             // that may exist. Even if annotations are not defined on the
             // package, the ANNOTATIONS AST is defined.
             final TextBlock cmt =
                 contents.getJavadocBefore(ast.getFirstChild().getLineNo());
 
             checkComment(ast, cmt);
         }
     }
 
     /**
      * Whether we should check this node.
      * @param ast a given node.
      * @return whether we should check a given node.
      */
     private boolean shouldCheck(final DetailAST ast) {
         boolean check = false;
 
         if (ast.getType() == TokenTypes.PACKAGE_DEF) {
             check = getFileContents().inPackageInfo();
         }
         else if (!ScopeUtils.isInCodeBlock(ast)) {
             final Scope customScope;
 
             if (ScopeUtils.isInInterfaceOrAnnotationBlock(ast)
                     || ast.getType() == TokenTypes.ENUM_CONSTANT_DEF) {
                 customScope = Scope.PUBLIC;
             }
             else {
                 customScope = ScopeUtils.getScopeFromMods(ast.findFirstToken(TokenTypes.MODIFIERS));
             }
             final Scope surroundingScope = ScopeUtils.getSurroundingScope(ast);
 
             check = customScope.isIn(scope)
                     && (surroundingScope == null || surroundingScope.isIn(scope))
                     && (excludeScope == null
                         || !customScope.isIn(excludeScope)
                         || surroundingScope != null
-                        && !surroundingScope.isIn(excludeScope));
+                            && !surroundingScope.isIn(excludeScope));
         }
         return check;
     }
 
     /**
      * Performs the various checks against the Javadoc comment.
      *
      * @param ast the AST of the element being documented
      * @param comment the source lines that make up the Javadoc comment.
      *
      * @see #checkFirstSentenceEnding(DetailAST, TextBlock)
      * @see #checkHtmlTags(DetailAST, TextBlock)
      */
     private void checkComment(final DetailAST ast, final TextBlock comment) {
         if (comment == null) {
             /*checking for missing docs in JavadocStyleCheck is not consistent
             with the rest of CheckStyle...  Even though, I didn't think it
-            made sense to make another csheck just to ensure that the
+            made sense to make another check just to ensure that the
             package-info.java file actually contains package Javadocs.*/
             if (getFileContents().inPackageInfo()) {
                 log(ast.getLineNo(), JAVADOC_MISSING);
             }
             return;
         }
 
         if (checkFirstSentence) {
             checkFirstSentenceEnding(ast, comment);
         }
 
         if (checkHtml) {
             checkHtmlTags(ast, comment);
         }
 
         if (checkEmptyJavadoc) {
             checkJavadocIsNotEmpty(comment);
         }
     }
 
     /**
      * Checks that the first sentence ends with proper punctuation.  This method
      * uses a regular expression that checks for the presence of a period,
      * question mark, or exclamation mark followed either by whitespace, an
      * HTML element, or the end of string. This method ignores {_AT_inheritDoc}
      * comments for TokenTypes that are valid for {_AT_inheritDoc}.
      *
      * @param ast the current node
      * @param comment the source lines that make up the Javadoc comment.
      */
     private void checkFirstSentenceEnding(final DetailAST ast, TextBlock comment) {
         final String commentText = getCommentText(comment.getText());
 
         if (!commentText.isEmpty()
             && !getEndOfSentencePattern().matcher(commentText).find()
             && !("{@inheritDoc}".equals(commentText)
             && JavadocTagInfo.INHERIT_DOC.isValidOn(ast))) {
             log(comment.getStartLineNo(), NO_PERIOD);
         }
     }
 
     /**
      * Checks that the Javadoc is not empty.
      *
      * @param comment the source lines that make up the Javadoc comment.
      */
     private void checkJavadocIsNotEmpty(TextBlock comment) {
         final String commentText = getCommentText(comment.getText());
 
         if (commentText.isEmpty()) {
@@ -265,101 +265,102 @@ public class JavadocStyleCheck
                     //we have found the tag section
                     break;
                 }
                 builder.append(line.substring(textStart));
                 trimTail(builder);
                 builder.append('\n');
             }
         }
 
         return builder.toString().trim();
     }
 
     /**
      * Finds the index of the first non-whitespace character ignoring the
      * Javadoc comment start and end strings (&#47** and *&#47) as well as any
      * leading asterisk.
      * @param line the Javadoc comment line of text to scan.
      * @return the int index relative to 0 for the start of text
      *         or -1 if not found.
      */
     private static int findTextStart(String line) {
         int textStart = -1;
         for (int i = 0; i < line.length();) {
             if (!Character.isWhitespace(line.charAt(i))) {
                 if (line.regionMatches(i, "/**", 0, "/**".length())) {
                     i += 2;
                 }
                 else if (line.regionMatches(i, "*/", 0, 2)) {
                     i++;
                 }
                 else if (line.charAt(i) != '*') {
                     textStart = i;
                     break;
                 }
             }
             i++;
         }
         return textStart;
     }
 
     /**
      * Trims any trailing whitespace or the end of Javadoc comment string.
      * @param builder the StringBuilder to trim.
      */
     private static void trimTail(StringBuilder builder) {
         int i = builder.length() - 1;
         while (true) {
             if (Character.isWhitespace(builder.charAt(i))) {
                 builder.deleteCharAt(i);
             }
-            else if (builder.charAt(i - 1) == '*') {
+            else if (builder.charAt(i) == '/'
+                    && builder.charAt(i - 1) == '*') {
                 builder.deleteCharAt(i);
                 builder.deleteCharAt(i - 1);
                 i--;
                 while (builder.charAt(i - 1) == '*') {
                     builder.deleteCharAt(i - 1);
                     i--;
                 }
             }
             else {
                 break;
             }
             i--;
         }
     }
 
     /**
      * Checks the comment for HTML tags that do not have a corresponding close
      * tag or a close tag that has no previous open tag.  This code was
      * primarily copied from the DocCheck checkHtml method.
      *
      * @param ast the node with the Javadoc
      * @param comment the {@code TextBlock} which represents
      *                 the Javadoc comment.
      */
     private void checkHtmlTags(final DetailAST ast, final TextBlock comment) {
         final int lineno = comment.getStartLineNo();
         final Deque<HtmlTag> htmlStack = new ArrayDeque<>();
         final String[] text = comment.getText();
 
         final TagParser parser = new TagParser(text, lineno);
 
         while (parser.hasNextTag()) {
             final HtmlTag tag = parser.nextTag();
 
             if (tag.isIncompleteTag()) {
                 log(tag.getLineNo(), INCOMPLETE_TAG,
                     text[tag.getLineNo() - lineno]);
                 return;
             }
             if (tag.isClosedTag()) {
                 //do nothing
                 continue;
             }
             if (tag.isCloseTag()) {
                 // We have found a close tag.
                 if (isExtraHtml(tag.getId(), htmlStack)) {
                     // No corresponding open tag was found on the stack.
                     log(tag.getLineNo(),
                         tag.getPosition(),
                         EXTRA_HTML,
