diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java
index 163913a2d..9724f1b4b 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java
@@ -52,117 +52,117 @@ import com.puppycrawl.tools.checkstyle.utils.ScopeUtils;
  * means that subclasses can't forget to call their super
  * method.
  * </p>
  *
  * @author lkuehne
  */
 public class DesignForExtensionCheck extends Check {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "design.forExtension";
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.METHOD_DEF};
     }
 
     @Override
     public int[] getRequiredTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         // nothing to do for Interfaces
         if (!ScopeUtils.isInInterfaceOrAnnotationBlock(ast)
                 && !isPrivateOrFinalOrAbstract(ast)
                 && ScopeUtils.getSurroundingScope(ast).isIn(Scope.PROTECTED)) {
 
             // method is ok if it is implementation can verified to be empty
             // Note: native methods don't have impl in java code, so
             // implementation can be null even if method not abstract
             final DetailAST implementation = ast.findFirstToken(TokenTypes.SLIST);
             final boolean nonEmptyImplementation = implementation == null
                     || implementation.getFirstChild().getType() != TokenTypes.RCURLY;
 
             final DetailAST classDef = findContainingClass(ast);
             final DetailAST classMods = classDef.findFirstToken(TokenTypes.MODIFIERS);
             // check if the containing class can be subclassed
             final boolean classCanBeSubclassed = classDef.getType() != TokenTypes.ENUM_DEF
                     && !classMods.branchContains(TokenTypes.FINAL);
 
             if (nonEmptyImplementation && classCanBeSubclassed
-                    && hasDefaultOrExplNonPrivateCtor(classDef)) {
+                    && hasDefaultOrExplicitNonPrivateCtor(classDef)) {
 
                 final String name = ast.findFirstToken(TokenTypes.IDENT).getText();
                 log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY, name);
             }
         }
     }
 
     /**
      * Check for modifiers.
      * @param ast modifier ast
      * @return tru in modifier is in checked ones
      */
     private static boolean isPrivateOrFinalOrAbstract(DetailAST ast) {
         // method is ok if it is private or abstract or final
         final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
         return modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)
                 || modifiers.branchContains(TokenTypes.ABSTRACT)
                 || modifiers.branchContains(TokenTypes.FINAL)
                 || modifiers.branchContains(TokenTypes.LITERAL_STATIC);
     }
 
     /**
-     * Has Default Or Expl Non Private Ctor.
+     * Has Default Or Explicit Non Private Ctor.
      * @param classDef class ast
      * @return true if Check should make a violation
      */
-    private static boolean hasDefaultOrExplNonPrivateCtor(DetailAST classDef) {
+    private static boolean hasDefaultOrExplicitNonPrivateCtor(DetailAST classDef) {
         // check if subclassing is prevented by having only private ctors
         final DetailAST objBlock = classDef.findFirstToken(TokenTypes.OBJBLOCK);
 
         boolean hasDefaultConstructor = true;
-        boolean hasExplNonPrivateCtor = false;
+        boolean hasExplicitNonPrivateCtor = false;
 
         DetailAST candidate = objBlock.getFirstChild();
 
         while (candidate != null) {
             if (candidate.getType() == TokenTypes.CTOR_DEF) {
                 hasDefaultConstructor = false;
 
                 final DetailAST ctorMods =
                         candidate.findFirstToken(TokenTypes.MODIFIERS);
                 if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {
-                    hasExplNonPrivateCtor = true;
+                    hasExplicitNonPrivateCtor = true;
                     break;
                 }
             }
             candidate = candidate.getNextSibling();
         }
 
-        return hasDefaultConstructor || hasExplNonPrivateCtor;
+        return hasDefaultConstructor || hasExplicitNonPrivateCtor;
     }
 
     /**
      * Searches the tree towards the root until it finds a CLASS_DEF node.
      * @param ast the start node for searching
      * @return the CLASS_DEF node.
      */
     private static DetailAST findContainingClass(DetailAST ast) {
         DetailAST searchAST = ast;
         while (searchAST.getType() != TokenTypes.CLASS_DEF
                && searchAST.getType() != TokenTypes.ENUM_DEF) {
             searchAST = searchAST.getParent();
         }
         return searchAST;
     }
 }
