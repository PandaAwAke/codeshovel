diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractCheck.java
index 72f98391b..a608d7507 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractCheck.java
@@ -187,82 +187,94 @@ public abstract class AbstractCheck extends AbstractViolationReporter {
     }
 
     /**
      * Set the file contents associated with the tree.
      * @param contents the manager
      */
     public final void setFileContents(FileContents contents) {
         fileContents = contents;
     }
 
     /**
      * Returns the file contents associated with the tree.
      * @return the file contents
      */
     public final FileContents getFileContents() {
         return fileContents;
     }
 
     /**
      * Set the class loader associated with the tree.
      * @param classLoader the class loader
      */
     public final void setClassLoader(ClassLoader classLoader) {
         this.classLoader = classLoader;
     }
 
     /**
      * Returns the class loader associated with the tree.
      * @return the class loader
      */
     public final ClassLoader getClassLoader() {
         return classLoader;
     }
 
     /**
      * Get tab width to report errors with.
      * @return the tab width to report errors with
      */
     protected final int getTabWidth() {
         return tabWidth;
     }
 
     /**
      * Set the tab width to report errors with.
      * @param tabWidth an {@code int} value
      */
     public final void setTabWidth(int tabWidth) {
         this.tabWidth = tabWidth;
     }
 
+    /**
+     * Helper method to log a LocalizedMessage.
+     *
+     * @param ast a node to get line id column numbers associated
+     *             with the message
+     * @param key key to locale message format
+     * @param args arguments to format
+     */
+    public final void log(DetailAST ast, String key, Object... args) {
+        log(ast.getLineNo(), ast.getColumnNo(), key, args);
+    }
+
     @Override
     public final void log(int line, String key, Object... args) {
         messages.add(
             new LocalizedMessage(
                 line,
                 getMessageBundle(),
                 key,
                 args,
                 getSeverityLevel(),
                 getId(),
                 getClass(),
                 getCustomMessages().get(key)));
     }
 
     @Override
     public final void log(int lineNo, int colNo, String key,
             Object... args) {
         final int col = 1 + CommonUtils.lengthExpandedTabs(
             getLines()[lineNo - 1], colNo, tabWidth);
         messages.add(
             new LocalizedMessage(
                 lineNo,
                 col,
                 getMessageBundle(),
                 key,
                 args,
                 getSeverityLevel(),
                 getId(),
                 getClass(),
                 getCustomMessages().get(key)));
     }
 }
