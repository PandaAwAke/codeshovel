diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java
index 03544de6a..b32081901 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java
@@ -103,119 +103,119 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  * <pre>
  * &lt;module name="EmptyLineSeparator"&gt;
  *    &lt;property name="allowNoEmptyLineBetweenFields" value="true"/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * @author maxvetrenko
  *
  */
 public class EmptyLineSeparatorCheck extends Check
 {
     /** */
     private boolean allowNoEmptyLineBetweenFields;
 
     /**
      * Allow no empty line between fields.
      * @param allow
      *        User's value.
      */
     public final void setAllowNoEmptyLineBetweenFields(boolean allow)
     {
         allowNoEmptyLineBetweenFields = allow;
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.PACKAGE_DEF,
             TokenTypes.IMPORT,
             TokenTypes.CLASS_DEF,
             TokenTypes.INTERFACE_DEF,
             TokenTypes.ENUM_DEF,
             TokenTypes.STATIC_INIT,
             TokenTypes.INSTANCE_INIT,
             TokenTypes.METHOD_DEF,
             TokenTypes.CTOR_DEF,
             TokenTypes.VARIABLE_DEF,
         };
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
         final DetailAST nextToken = ast.getNextSibling();
 
         if (nextToken != null && nextToken.getType() != TokenTypes.RCURLY) {
             final int astType = ast.getType();
             switch (astType) {
             case TokenTypes.VARIABLE_DEF:
-                if (iastypeField(ast) && !hasEmptyLineAfter(ast)) {
+                if (isTypeField(ast) && !hasEmptyLineAfter(ast)) {
                     if (allowNoEmptyLineBetweenFields
                             && nextToken.getType() != TokenTypes.VARIABLE_DEF)
                     {
                         log(nextToken.getLineNo(), "empty.line.separator", nextToken.getText());
                     }
                     else if (!allowNoEmptyLineBetweenFields) {
                         log(nextToken.getLineNo(), "empty.line.separator", nextToken.getText());
                     }
                 }
                 break;
             case TokenTypes.IMPORT:
                 if (astType != nextToken.getType() && !hasEmptyLineAfter(ast)
                     || (ast.getLineNo() > 1 && !hasEmptyLineBefore(ast)
                             && ast.getPreviousSibling() == null))
                 {
                     log(nextToken.getLineNo(), "empty.line.separator", nextToken.getText());
                 }
                 break;
             case TokenTypes.PACKAGE_DEF:
                 if (ast.getLineNo() > 1 && !hasEmptyLineBefore(ast)) {
                     log(ast.getLineNo(), "empty.line.separator", ast.getText());
                 }
             default:
                 if (!hasEmptyLineAfter(ast)) {
                     log(nextToken.getLineNo(), "empty.line.separator", nextToken.getText());
                 }
             }
         }
     }
 
     /**
      * Checks if token have empty line after.
      * @param token token.
      * @return true if token have empty line after.
      */
     private boolean hasEmptyLineAfter(DetailAST token)
     {
         DetailAST lastToken = token.getLastChild().getLastChild();
         if (null == lastToken) {
             lastToken = token.getLastChild();
         }
         return token.getNextSibling().getLineNo() - lastToken.getLineNo() > 1;
     }
 
     /**
      * Checks if a token has a empty line before.
      * @param token token.
      * @return true, if token have empty line before.
      */
     private boolean hasEmptyLineBefore(DetailAST token)
     {
         final int lineNo = token.getLineNo();
         //  [lineNo - 2] is the number of the previous line because the numbering starts from zero.
         final String lineBefore = getLines()[lineNo - 2];
         return lineBefore.trim().isEmpty();
     }
 
     /**
      * If variable definition is a type field.
      * @param variableDef variable definition.
      * @return true variable definition is a type field.
      */
-    private boolean iastypeField(DetailAST variableDef)
+    private boolean isTypeField(DetailAST variableDef)
     {
         final int parentType = variableDef.getParent().getParent().getType();
         return parentType == TokenTypes.CLASS_DEF;
     }
 }
