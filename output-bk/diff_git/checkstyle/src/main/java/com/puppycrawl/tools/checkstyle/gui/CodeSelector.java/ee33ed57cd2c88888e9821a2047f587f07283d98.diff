diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/CodeSelector.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/CodeSelector.java
index 7d3d04240..66082780c 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/CodeSelector.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/CodeSelector.java
@@ -25,68 +25,67 @@ import java.util.List;
 import javax.swing.JTextArea;
 
 import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.utils.TokenUtils;
 
 /**
  * Helper class to select a code.
  * @author unknown
  */
 public class CodeSelector {
     /** DetailAST node. */
     private final DetailAST ast;
     /** Editor. */
     private final JTextArea editor;
     /** Mapping. */
     private final List<Integer> lines2position;
 
     /**
      * Constructor.
      * @param ast ast node.
      * @param editor text area editor.
      * @param lines2position list to map lines.
      */
     public CodeSelector(final DetailAST ast, final JTextArea editor,
                         final List<Integer> lines2position) {
         this.ast = ast;
         this.editor = editor;
         this.lines2position = ImmutableList.copyOf(lines2position);
     }
 
     /**
      * Set a selection position from AST line and Column.
      */
     public void select() {
         final int start = lines2position.get(ast.getLineNo()) + ast.getColumnNo();
         final int end;
 
         if (ast.getChildCount() == 0
             && TokenUtils.getTokenName(ast.getType()).equals(ast.getText())) {
             end = start;
         }
         else {
             end = findLastPosition(ast);
         }
 
         editor.setSelectedTextColor(Color.blue);
         editor.requestFocusInWindow();
         editor.setCaretPosition(start);
         editor.moveCaretPosition(end);
-        editor.transferFocusBackward();
     }
 
     /**
      * Finds the last position of node without children.
      * @param astNode DetailAST node.
      * @return Last position of node without children.
      */
     private int findLastPosition(final DetailAST astNode) {
         if (astNode.getChildCount() == 0) {
             return lines2position.get(astNode.getLineNo()) + astNode.getColumnNo()
                 + astNode.getText().length();
         }
         else {
             return findLastPosition(astNode.getLastChild());
         }
     }
 }
