diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java
index ec1124c50..2525dd0be 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java
@@ -173,159 +173,159 @@ public class AvoidEscapedUnicodeCharactersCheck
     public final void setAllowByTailComment(boolean allow) {
         allowByTailComment = allow;
     }
 
     /**
      * Set allowIfAllCharactersEscaped.
      * @param allow user's value.
      */
     public final void setAllowIfAllCharactersEscaped(boolean allow) {
         allowIfAllCharactersEscaped = allow;
     }
 
     /**
      * Set allowSpaceEscapes.
      * @param allow user's value.
      */
     public final void setAllowNonPrintableEscapes(boolean allow) {
         allowNonPrintableEscapes = allow;
     }
 
     @Override
     public int[] getDefaultTokens() {
         return new int[] {TokenTypes.STRING_LITERAL, TokenTypes.CHAR_LITERAL};
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.STRING_LITERAL, TokenTypes.CHAR_LITERAL};
     }
 
     @Override
     public void visitToken(DetailAST ast) {
 
         final String literal = ast.getText();
 
         if (hasUnicodeChar(literal) && !(allowByTailComment && hasTrailComment(ast)
                 || isAllCharactersEscaped(literal)
                 || allowEscapesForControlCharacters
                         && isOnlyUnicodeValidChars(literal, sUnicodeControl)
                 || allowNonPrintableEscapes
                         && isOnlyUnicodeValidChars(literal, sNonPrintableChars))) {
             log(ast.getLineNo(), "forbid.escaped.unicode.char");
         }
     }
 
     /**
      * Checks if literal has Unicode chars.
      * @param literal String literal.
      * @return true if literal has Unicode chars.
      */
-    private boolean hasUnicodeChar(String literal) {
+    private static boolean hasUnicodeChar(String literal) {
         return sUnicodeRegexp.matcher(literal).find();
     }
 
     /**
      * Check if String literal contains Unicode control chars.
      * @param literal String llteral.
      * @param pattern RegExp for valid characters.
      * @return true, if String literal contains Unicode control chars.
      */
-    private boolean isOnlyUnicodeValidChars(String literal, Pattern pattern) {
+    private static boolean isOnlyUnicodeValidChars(String literal, Pattern pattern) {
         final int unicodeMatchesCounter =
                 countMatches(sUnicodeRegexp, literal);
         final int unicodeValidMatchesCouter =
                 countMatches(pattern, literal);
         return unicodeMatchesCounter - unicodeValidMatchesCouter == 0;
     }
 
     /**
      * Check if trail comment is present after ast token.
      * @param ast current token.
      * @return true if trail comment is present after ast token.
      */
     private boolean hasTrailComment(DetailAST ast) {
         boolean result = false;
         final DetailAST variableDef = getVariableDef(ast);
         DetailAST semi;
 
         if (variableDef != null) {
 
             semi = variableDef.getNextSibling();
 
             if (semi.getType() != TokenTypes.SEMI) {
                 semi = variableDef.getLastChild();
             }
         }
         else {
             semi = getSemi(ast);
         }
 
         if (semi != null) {
             final int lineNo = semi.getLineNo();
             final String currentLine = getLine(lineNo - 1);
 
             if (currentLine != null && sCommentRegexp.matcher(currentLine).find()) {
                 result = true;
             }
         }
 
         return result;
     }
 
     /**
      * Count regexp matchers into String literal.
      * @param pattern pattern.
      * @param target String literal.
      * @return count of regexp matchers.
      */
-    private int countMatches(Pattern pattern, String target) {
+    private static int countMatches(Pattern pattern, String target) {
         int matcherCounter = 0;
         final Matcher matcher = pattern.matcher(target);
         while (matcher.find()) {
             matcherCounter++;
         }
         return matcherCounter;
     }
 
     /**
      * Get variable definition.
      * @param ast current token.
      * @return variable definition.
      */
-    private DetailAST getVariableDef(DetailAST ast) {
+    private static DetailAST getVariableDef(DetailAST ast) {
         DetailAST result = ast.getParent();
         while (result != null
                 && result.getType() != TokenTypes.VARIABLE_DEF) {
             result = result.getParent();
         }
         return result;
     }
 
     /**
      * Get semi token.
      * @param ast current token.
      * @return semi token or null.
      */
-    private DetailAST getSemi(DetailAST ast) {
+    private static DetailAST getSemi(DetailAST ast) {
         DetailAST result = ast.getParent();
         while (result != null
                 && result.getLastChild().getType() != TokenTypes.SEMI) {
             result = result.getParent();
         }
         if (result != null) {
             result = result.getLastChild();
         }
         return result;
     }
 
     /**
      * Checks if all characters in String literal is escaped.
      * @param literal current literal.
      * @return true if all characters in String literal is escaped.
      */
     private boolean isAllCharactersEscaped(String literal) {
         return allowIfAllCharactersEscaped
                 && sAllEscapedChars.matcher(literal.substring(1,
                         literal.length() - 1)).find();
     }
 }
