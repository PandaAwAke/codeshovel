diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
index afc60056f..85f6835f9 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
@@ -42,102 +42,101 @@ import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 
 /**
  * Loads a list of package names from a package name XML file.
  * @author Rick Giles
  */
 public final class PackageNamesLoader
     extends AbstractLoader {
     /** the public ID for the configuration dtd */
     private static final String DTD_PUBLIC_ID =
         "-//Puppy Crawl//DTD Package Names 1.0//EN";
 
     /** the resource for the configuration dtd */
     private static final String DTD_RESOURCE_NAME =
         "com/puppycrawl/tools/checkstyle/packages_1_0.dtd";
 
     /** Name of default checkstyle package names resource file.
      * The file must be in the classpath.
      */
     private static final String CHECKSTYLE_PACKAGES =
         "checkstyle_packages.xml";
 
     /** The temporary stack of package name parts */
     private final Deque<String> packageStack = new ArrayDeque<>();
 
     /** The fully qualified package names. */
     private final Set<String> packageNames = Sets.newLinkedHashSet();
 
     /**
      * Creates a new {@code PackageNamesLoader} instance.
      * @throws ParserConfigurationException if an error occurs
      * @throws SAXException if an error occurs
      */
     private PackageNamesLoader()
         throws ParserConfigurationException, SAXException {
         super(DTD_PUBLIC_ID, DTD_RESOURCE_NAME);
     }
 
     /**
      * Returns the set of fully qualified package names this
      * this loader processed.
      * @return the set of package names
      */
     private Set<String> getPackageNames() {
         return packageNames;
     }
 
     @Override
     public void startElement(String namespaceURI,
                              String localName,
                              String qName,
-                             Attributes atts)
-        throws SAXException {
+                             Attributes atts) {
         if ("package".equals(qName)) {
             //push package name, name is mandatory attribute with not empty value by DTD
             final String name = atts.getValue("name");
             packageStack.push(name);
         }
     }
 
     /**
      * Creates a full package name from the package names on the stack.
      * @return the full name of the current package.
      */
     private String getPackageName() {
         final StringBuilder buf = new StringBuilder();
         final Iterator<String> iterator = packageStack.descendingIterator();
         while (iterator.hasNext()) {
             final String subPackage = iterator.next();
             buf.append(subPackage);
             if (!Utils.endsWithChar(subPackage, '.')) {
                 buf.append('.');
             }
         }
         return buf.toString();
     }
 
     @Override
     public void endElement(String namespaceURI,
                            String localName,
                            String qName) {
         if ("package".equals(qName)) {
 
             packageNames.add(getPackageName());
             packageStack.pop();
         }
     }
 
     /**
      * Returns the set of package names, compiled from all
      * checkstyle_packages.xml files found on the given classloaders
      * classpath.
      * @param classLoader the class loader for loading the
      *          checkstyle_packages.xml files.
      * @return the set of package names.
      * @throws CheckstyleException if an error occurs.
      */
     public static Set<String> getPackageNames(ClassLoader classLoader)
             throws CheckstyleException {
 
         Set<String> result;
         try {
             //create the loader outside the loop to prevent PackageObjectFactory
