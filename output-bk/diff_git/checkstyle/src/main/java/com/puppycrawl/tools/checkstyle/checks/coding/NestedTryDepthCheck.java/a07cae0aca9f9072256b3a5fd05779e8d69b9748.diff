diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedTryDepthCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedTryDepthCheck.java
index 27594290c..caa33edfb 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedTryDepthCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedTryDepthCheck.java
@@ -6,82 +6,60 @@
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks.coding;
 
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * Restricts nested try-catch-finally blocks to a specified depth (default = 1).
  * @author <a href="mailto:simon@redhillconsulting.com.au">Simon Harris</a>
  */
 public final class NestedTryDepthCheck extends AbstractNestedDepthCheck {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "nested.try.depth";
 
     /** default allowed nesting depth */
     private static final int DEFAULT_MAX = 1;
 
     /** Creates new check instance with default allowed nesting depth. */
     public NestedTryDepthCheck() {
         super(DEFAULT_MAX);
     }
 
     @Override
     public int[] getDefaultTokens() {
         return new int[] {TokenTypes.LITERAL_TRY};
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.LITERAL_TRY};
     }
 
     @Override
-    public void visitToken(DetailAST ast) {
-        if (ast.getType() == TokenTypes.LITERAL_TRY) {
-            visitLiteralTry(ast);
-        }
-        else {
-            throw new IllegalStateException(ast.toString());
-        }
-    }
-
-    @Override
-    public void leaveToken(DetailAST ast) {
-        if (ast.getType() == TokenTypes.LITERAL_TRY) {
-            leaveLiteralTry();
-        }
-        else {
-            throw new IllegalStateException(ast.toString());
-        }
-    }
-
-    /**
-     * Increases current nesting depth.
-     * @param literalTry node for try.
-     */
-    private void visitLiteralTry(DetailAST literalTry) {
+    public void visitToken(DetailAST literalTry) {
         nestIn(literalTry, MSG_KEY);
     }
 
-    /** Decreases current nesting depth */
-    private void leaveLiteralTry() {
+    @Override
+    public void leaveToken(DetailAST literalTry) {
         nestOut();
     }
+
 }
