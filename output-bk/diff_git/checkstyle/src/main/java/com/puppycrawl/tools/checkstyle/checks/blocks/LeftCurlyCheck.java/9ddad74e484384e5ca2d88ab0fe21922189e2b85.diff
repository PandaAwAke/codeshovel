diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
index 1bce0d945..328dab21b 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
@@ -186,127 +186,132 @@ public class LeftCurlyCheck
                 }
                 break;
             case TokenTypes.LITERAL_WHILE:
             case TokenTypes.LITERAL_CATCH:
             case TokenTypes.LITERAL_SYNCHRONIZED:
             case TokenTypes.LITERAL_FOR:
             case TokenTypes.LITERAL_TRY:
             case TokenTypes.LITERAL_FINALLY:
             case TokenTypes.LITERAL_DO:
             case TokenTypes.LITERAL_IF:
             case TokenTypes.STATIC_INIT:
                 startToken = ast;
                 brace = ast.findFirstToken(TokenTypes.SLIST);
                 break;
             case TokenTypes.LITERAL_ELSE:
                 startToken = ast;
                 final DetailAST candidate = ast.getFirstChild();
                 brace = null;
 
                 if (candidate.getType() == TokenTypes.SLIST) {
                     brace = candidate;
                 }
                 break;
             default:
                 // ATTENTION! We have default here, but we expect case TokenTypes.METHOD_DEF,
                 // TokenTypes.LITERAL_FOR, TokenTypes.LITERAL_WHILE, TokenTypes.LITERAL_DO only.
                 // It has been done to improve coverage to 100%. I couldn't replace it with
                 // if-else-if block because code was ugly and didn't pass pmd check.
 
                 startToken = ast;
                 brace = ast.findFirstToken(TokenTypes.LCURLY);
                 break;
         }
 
         if (brace != null) {
             verifyBrace(brace, startToken);
         }
     }
 
     /**
      * Skip lines that only contain {@code TokenTypes.ANNOTATION}s.
      * If the received {@code DetailAST}
      * has annotations within its modifiers then first token on the line
      * of the first token after all annotations is return. This might be
      * an annotation.
      * Otherwise, the received {@code DetailAST} is returned.
      * @param ast {@code DetailAST}.
      * @return {@code DetailAST}.
      */
     private static DetailAST skipAnnotationOnlyLines(DetailAST ast) {
+        DetailAST resultNode = ast;
         final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
-        if (modifiers == null) {
-            return ast;
-        }
-        DetailAST lastAnnotation = findLastAnnotation(modifiers);
-        if (lastAnnotation == null) {
-            // There are no annotations.
-            return ast;
-        }
-        final DetailAST tokenAfterLast;
 
-        if (lastAnnotation.getNextSibling() == null) {
-            tokenAfterLast = modifiers.getNextSibling();
-        }
-        else {
-            tokenAfterLast = lastAnnotation.getNextSibling();
-        }
+        if (modifiers != null) {
+            DetailAST lastAnnotation = findLastAnnotation(modifiers);
 
-        if (tokenAfterLast.getLineNo() > lastAnnotation.getLineNo()) {
-            return tokenAfterLast;
-        }
-        final int lastAnnotationLineNumber = lastAnnotation.getLineNo();
-        while (lastAnnotation.getPreviousSibling() != null
-               && lastAnnotation.getPreviousSibling().getLineNo() == lastAnnotationLineNumber) {
-            lastAnnotation = lastAnnotation.getPreviousSibling();
+            if (lastAnnotation != null) {
+                final DetailAST tokenAfterLast;
+
+                if (lastAnnotation.getNextSibling() == null) {
+                    tokenAfterLast = modifiers.getNextSibling();
+                }
+                else {
+                    tokenAfterLast = lastAnnotation.getNextSibling();
+                }
+
+                if (tokenAfterLast.getLineNo() > lastAnnotation.getLineNo()) {
+                    resultNode = tokenAfterLast;
+                }
+                else {
+                    final int lastAnnotationLineNumber = lastAnnotation.getLineNo();
+                    while (lastAnnotation.getPreviousSibling() != null
+                           && lastAnnotation.getPreviousSibling().getLineNo()
+                               == lastAnnotationLineNumber) {
+
+                        lastAnnotation = lastAnnotation.getPreviousSibling();
+                    }
+                    resultNode = lastAnnotation;
+                }
+            }
         }
-        return lastAnnotation;
+        return resultNode;
     }
 
     /**
      * Find the last token of type {@code TokenTypes.ANNOTATION}
      * under the given set of modifiers.
      * @param modifiers {@code DetailAST}.
      * @return {@code DetailAST} or null if there are no annotations.
      */
     private static DetailAST findLastAnnotation(DetailAST modifiers) {
         DetailAST annot = modifiers.findFirstToken(TokenTypes.ANNOTATION);
         while (annot != null && annot.getNextSibling() != null
                && annot.getNextSibling().getType() == TokenTypes.ANNOTATION) {
             annot = annot.getNextSibling();
         }
         return annot;
     }
 
     /**
      * Verifies that a specified left curly brace is placed correctly
      * according to policy.
      * @param brace token for left curly brace
      * @param startToken token for start of expression
      */
     private void verifyBrace(final DetailAST brace,
                              final DetailAST startToken) {
         final String braceLine = getLine(brace.getLineNo() - 1);
 
         // Check for being told to ignore, or have '{}' which is a special case
         if (braceLine.length() <= brace.getColumnNo() + 1
                 || braceLine.charAt(brace.getColumnNo() + 1) != '}') {
             if (getAbstractOption() == LeftCurlyOption.NL) {
                 if (!CommonUtils.whitespaceBefore(brace.getColumnNo(), braceLine)) {
                     log(brace, MSG_KEY_LINE_NEW, OPEN_CURLY_BRACE, brace.getColumnNo() + 1);
                 }
             }
             else if (getAbstractOption() == LeftCurlyOption.EOL) {
 
                 validateEol(brace, braceLine);
             }
             else if (startToken.getLineNo() != brace.getLineNo()) {
 
                 validateNewLinePosition(brace, startToken, braceLine);
 
             }
         }
     }
 
     /**
      * Validate EOL case
      * @param brace brace AST
