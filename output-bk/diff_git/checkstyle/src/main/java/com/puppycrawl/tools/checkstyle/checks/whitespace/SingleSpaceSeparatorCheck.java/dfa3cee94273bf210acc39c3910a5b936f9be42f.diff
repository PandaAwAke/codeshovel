diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SingleSpaceSeparatorCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SingleSpaceSeparatorCheck.java
index bf285d5f5..23d492df7 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SingleSpaceSeparatorCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SingleSpaceSeparatorCheck.java
@@ -60,100 +60,110 @@ import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
  * <ul>
  * <li>validateComments - Boolean when set to {@code true}, whitespaces
  * surrounding comments will be ignored. Default value is {@code false}.</li>
  * </ul>
  *
  * <p>
  * To configure the check:
  * </p>
  *
  * <pre>
  * &lt;module name=&quot;SingleSpaceSeparator&quot;/&gt;
  * </pre>
  *
  * <p>
  * To configure the check so that it validates comments:
  * </p>
  *
  * <pre>
  * &lt;module name=&quot;SingleSpaceSeparator&quot;&gt;
  * &lt;property name=&quot;validateComments&quot; value=&quot;true&quot;/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * @author Robert Whitebit
  * @author Richard Veach
  */
 public class SingleSpaceSeparatorCheck extends AbstractCheck {
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "single.space.separator";
 
     /** Indicates if whitespaces surrounding comments will be ignored. */
     private boolean validateComments;
 
     /**
      * Sets whether or not to validate surrounding whitespaces at comments.
      *
      * @param validateComments {@code true} to validate surrounding whitespaces at comments.
      */
     public void setValidateComments(boolean validateComments) {
         this.validateComments = validateComments;
     }
 
     @Override
     public int[] getDefaultTokens() {
         return CommonUtils.EMPTY_INT_ARRAY;
     }
 
+    @Override
+    public int[] getAcceptableTokens() {
+        return getDefaultTokens();
+    }
+
+    @Override
+    public int[] getRequiredTokens() {
+        return getDefaultTokens();
+    }
+
     // -@cs[SimpleAccessorNameNotation] Overrides method from base class.
     // Issue: https://github.com/sevntu-checkstyle/sevntu.checkstyle/issues/166
     @Override
     public boolean isCommentNodesRequired() {
         return validateComments;
     }
 
     @Override
     public void beginTree(DetailAST rootAST) {
         visitEachToken(rootAST);
     }
 
     /**
      * Examines every sibling and child of {@code node} for violations.
      *
      * @param node The node to start examining.
      */
     private void visitEachToken(DetailAST node) {
         DetailAST sibling = node;
 
         while (sibling != null) {
             final int columnNo = sibling.getColumnNo() - 1;
 
             if (columnNo >= 0
                     && !isTextSeparatedCorrectlyFromPrevious(getLine(sibling.getLineNo() - 1),
                             columnNo)) {
                 log(sibling.getLineNo(), columnNo, MSG_KEY);
             }
             if (sibling.getChildCount() > 0) {
                 visitEachToken(sibling.getFirstChild());
             }
 
             sibling = sibling.getNextSibling();
         }
     }
 
     /**
      * Checks if characters in {@code line} at and around {@code columnNo} has
      * the correct number of spaces. to return {@code true} the following
      * conditions must be met:<br />
      * - the character at {@code columnNo} is the first in the line.<br />
      * - the character at {@code columnNo} is not separated by whitespaces from
      * the previous non-whitespace character. <br />
      * - the character at {@code columnNo} is separated by only one whitespace
      * from the previous non-whitespace character.<br />
      * - {@link #validateComments} is disabled and the previous text is the
      * end of a block comment.
      *
      * @param line The line in the file to examine.
      * @param columnNo The column position in the {@code line} to examine.
