diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java
index fedecc8f0..f23e0e784 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java
@@ -46,132 +46,132 @@ import com.puppycrawl.tools.checkstyle.checks.CheckUtils;
  * values.
  * </p>
  *
  * @author o_sukhodolsky
  */
 public class ExplicitInitializationCheck extends Check
 {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "explicit.init";
 
     @Override
     public final int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.VARIABLE_DEF};
     }
 
     @Override
     public final int[] getRequiredTokens()
     {
         return getDefaultTokens();
     }
 
     @Override
     public final int[] getAcceptableTokens()
     {
         return new int[] {TokenTypes.VARIABLE_DEF};
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
         // do not check local variables and
         // fields declared in interface/annotations
         if (ScopeUtils.isLocalVariableDef(ast)
             || ScopeUtils.inInterfaceOrAnnotationBlock(ast))
         {
             return;
         }
 
         final DetailAST assign = ast.findFirstToken(TokenTypes.ASSIGN);
         if (assign == null) {
             // no assign - no check
             return;
         }
 
         final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
-        if ((modifiers != null)
+        if (modifiers != null
             && modifiers.branchContains(TokenTypes.FINAL))
         {
             // do not check final variables
             return;
         }
 
         final DetailAST type = ast.findFirstToken(TokenTypes.TYPE);
         final DetailAST ident = ast.findFirstToken(TokenTypes.IDENT);
         final DetailAST exprStart =
             assign.getFirstChild().getFirstChild();
         if (isObjectType(type)
-            && (exprStart.getType() == TokenTypes.LITERAL_NULL))
+            && exprStart.getType() == TokenTypes.LITERAL_NULL)
         {
             log(ident, MSG_KEY, ident.getText(), "null");
         }
 
         final int primitiveType = type.getFirstChild().getType();
-        if ((primitiveType == TokenTypes.LITERAL_BOOLEAN)
-            && (exprStart.getType() == TokenTypes.LITERAL_FALSE))
+        if (primitiveType == TokenTypes.LITERAL_BOOLEAN
+            && exprStart.getType() == TokenTypes.LITERAL_FALSE)
         {
             log(ident, MSG_KEY, ident.getText(), "false");
         }
         if (isNumericType(primitiveType) && isZero(exprStart)) {
             log(ident, MSG_KEY, ident.getText(), "0");
         }
-        if ((primitiveType == TokenTypes.LITERAL_CHAR)
+        if (primitiveType == TokenTypes.LITERAL_CHAR
             && (isZero(exprStart)
-                || ((exprStart.getType() == TokenTypes.CHAR_LITERAL)
-                && "'\\0'".equals(exprStart.getText()))))
+                || exprStart.getType() == TokenTypes.CHAR_LITERAL
+                && "'\\0'".equals(exprStart.getText())))
         {
             log(ident, MSG_KEY, ident.getText(), "\\0");
         }
     }
 
     /**
      * Determines if a giiven type is an object type.
      * @param type type to check.
      * @return true if it is an object type.
      */
     private boolean isObjectType(DetailAST type)
     {
         final int objectType = type.getFirstChild().getType();
-        return ((objectType == TokenTypes.IDENT) || (objectType == TokenTypes.DOT)
-                || (objectType == TokenTypes.ARRAY_DECLARATOR));
+        return objectType == TokenTypes.IDENT || objectType == TokenTypes.DOT
+                || objectType == TokenTypes.ARRAY_DECLARATOR;
     }
 
     /**
      * Determine if a given type is a numeric type.
      * @param type code of the type for check.
      * @return true if it's a numeric type.
      * @see TokenTypes
      */
     private boolean isNumericType(int type)
     {
-        return ((type == TokenTypes.LITERAL_BYTE)
-                || (type == TokenTypes.LITERAL_SHORT)
-                || (type == TokenTypes.LITERAL_INT)
-                || (type == TokenTypes.LITERAL_FLOAT)
-                || (type == TokenTypes.LITERAL_LONG)
-                || (type == TokenTypes.LITERAL_DOUBLE));
+        return type == TokenTypes.LITERAL_BYTE
+                || type == TokenTypes.LITERAL_SHORT
+                || type == TokenTypes.LITERAL_INT
+                || type == TokenTypes.LITERAL_FLOAT
+                || type == TokenTypes.LITERAL_LONG
+                || type == TokenTypes.LITERAL_DOUBLE;
     }
 
     /**
      * @param expr node to check.
      * @return true if given node contains numeric constant for zero.
      */
     private boolean isZero(DetailAST expr)
     {
         final int type = expr.getType();
         switch (type) {
             case TokenTypes.NUM_FLOAT:
             case TokenTypes.NUM_DOUBLE:
             case TokenTypes.NUM_INT:
             case TokenTypes.NUM_LONG:
                 final String text = expr.getText();
-                return (0 == CheckUtils.parseFloat(text, type));
+                return 0 == CheckUtils.parseFloat(text, type);
             default:
                 return false;
         }
     }
 }
