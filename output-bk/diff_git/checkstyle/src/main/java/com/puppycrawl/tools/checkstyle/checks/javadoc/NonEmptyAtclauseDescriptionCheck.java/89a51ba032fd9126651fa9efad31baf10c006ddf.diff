diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/NonEmptyAtclauseDescriptionCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/NonEmptyAtclauseDescriptionCheck.java
index 161d15f86..5f9bad143 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/NonEmptyAtclauseDescriptionCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/NonEmptyAtclauseDescriptionCheck.java
@@ -10,69 +10,69 @@
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.javadoc;
 
 import com.puppycrawl.tools.checkstyle.api.DetailNode;
 import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;
 
 /**
  * Checks that the at-clause tag is followed by description .
  * Default configuration that will check <code>@param</code>, <code>@return</code>,
  * <code>@throws</code>, <code>@deprecated</code> to:
  * <pre>
  * &lt;module name=&quot;NonEmptyAtclauseDescription&quot;/&gt;
  * </pre>
  * <p>
  * To check non-empty at-clause description for tags <code>@throws</code>,
  * <code>@deprecated</code>, use following configuration:
  * </p>
  * <pre>
  * &lt;module name=&quot;NonEmptyAtclauseDescription&quot;&gt;
  *     &lt;property name=&quot;target&quot; value=&quot;JAVADOC_TAG_THROWS_LITERAL,
  *     JAVADOC_TAG_DEPRECATED_LITERAL&quot;/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * @author maxvetrenko
  *
  */
 public class NonEmptyAtclauseDescriptionCheck extends AbstractJavadocCheck
 {
 
     @Override
     public int[] getDefaultJavadocTokens()
     {
         return new int[] {
             JavadocTokenTypes.PARAM_LITERAL,
             JavadocTokenTypes.RETURN_LITERAL,
             JavadocTokenTypes.THROWS_LITERAL,
             JavadocTokenTypes.DEPRECATED_LITERAL,
         };
     }
 
     @Override
-    public void visitJavadocToken(DetailNode aAst)
+    public void visitJavadocToken(DetailNode ast)
     {
-        if (isEmptyTag(aAst.getParent())) {
-            log(aAst.getLineNumber(), "non.empty.atclause", aAst.getText());
+        if (isEmptyTag(ast.getParent())) {
+            log(ast.getLineNumber(), "non.empty.atclause", ast.getText());
         }
     }
 
     /**
      * Tests if at-clause tag is empty.
-     * @param aTagNode at-clause tag.
+     * @param tagNode at-clause tag.
      * @return true, if at-clause tag is empty.
      */
-    private boolean isEmptyTag(DetailNode aTagNode)
+    private boolean isEmptyTag(DetailNode tagNode)
     {
         final DetailNode tagDescription =
-                JavadocUtils.findFirstToken(aTagNode, JavadocTokenTypes.DESCRIPTION);
+                JavadocUtils.findFirstToken(tagNode, JavadocTokenTypes.DESCRIPTION);
         return tagDescription == null;
     }
 }
