diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java
index 1ed6254e9..6285b9994 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java
@@ -224,101 +224,101 @@ public class AvoidEscapedUnicodeCharactersCheck
     /**
      * Checks if literal has Unicode chars.
      * @param aLiteral String literal.
      * @return true if literal has Unicode chars.
      */
     private boolean hasUnicodeChar(String aLiteral)
     {
         return sUnicodeRegexp.matcher(aLiteral).find();
     }
 
     /**
      * Check if String literal contains Unicode control chars.
      * @param aLiteral String llteral.
      * @param aPattern RegExp for valid characters.
      * @return true, if String literal contains Unicode control chars.
      */
     private boolean isOnlyUnicodeValidChars(String aLiteral, Pattern aPattern)
     {
         final int unicodeMatchesCounter =
                 countMatches(sUnicodeRegexp, aLiteral);
         final int unicodeValidMatchesCouter =
                 countMatches(aPattern, aLiteral);
         return unicodeMatchesCounter - unicodeValidMatchesCouter == 0;
     }
 
     /**
      * Check if trail comment is present after aAst token.
      * @param aAst current token.
      * @return true if trail comment is present after aAst token.
      */
     private boolean hasTrailComment(DetailAST aAst)
     {
         boolean result = false;
         final DetailAST variableDef = getVariableDef(aAst);
         DetailAST semi;
 
         if (variableDef != null) {
 
             semi = variableDef.getNextSibling();
 
             if (semi.getType() != TokenTypes.SEMI) {
                 semi = variableDef.getLastChild();
             }
         }
         else {
             semi = getSemi(aAst);
         }
 
         if (semi != null) {
             final int lineNo = semi.getLineNo();
-            final String currentLine = getLines()[lineNo - 1];
+            final String currentLine = getLine(lineNo - 1);
 
             if (currentLine != null && sCommentRegexp.matcher(currentLine).find()) {
                 result = true;
             }
         }
 
         return result;
     }
 
     /**
      * Count regexp matchers into String literal.
      * @param aPattern pattern.
      * @param aTarget String literal.
      * @return count of regexp matchers.
      */
     private int countMatches(Pattern aPattern, String aTarget)
     {
         int matcherCounter = 0;
         final Matcher matcher = aPattern.matcher(aTarget);
         while (matcher.find()) {
             matcherCounter++;
         }
         return matcherCounter;
     }
 
     /**
      * Get variable definition.
      * @param aAst current token.
      * @return variable definition.
      */
     private DetailAST getVariableDef(DetailAST aAst)
     {
         DetailAST result = aAst.getParent();
         while (result != null
                 && result.getType() != TokenTypes.VARIABLE_DEF)
         {
             result = result.getParent();
         }
         return result;
     }
 
     /**
      * Get semi token.
      * @param aAst current token.
      * @return semi token or null.
      */
     private DetailAST getSemi(DetailAST aAst)
     {
         DetailAST result = aAst.getParent();
         while (result != null
