diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
index e2b3b6465..c3c376989 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
@@ -1,108 +1,83 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2016 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks.indentation;
 
 import java.util.Arrays;
 
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 
 /**
  * Abstract base class for all handlers.
  *
  * @author jrichard
  */
 public abstract class AbstractExpressionHandler {
-
-    /**
-     * A key is pointing to the warning message text in "messages.properties"
-     * file.
-     */
-    public static final String MSG_ERROR = "indentation.error";
-
-    /**
-     * A key is pointing to the warning message text in "messages.properties"
-     * file.
-     */
-    public static final String MSG_ERROR_MULTI = "indentation.error.multi";
-
-    /**
-     * A key is pointing to the warning message text in "messages.properties"
-     * file.
-     */
-    public static final String MSG_CHILD_ERROR = "indentation.child.error";
-
-    /**
-     * A key is pointing to the warning message text in "messages.properties"
-     * file.
-     */
-    public static final String MSG_CHILD_ERROR_MULTI = "indentation.child.error.multi";
-
     /**
      * The instance of {@code IndentationCheck} using this handler.
      */
     private final IndentationCheck indentCheck;
 
     /** The AST which is handled by this handler. */
     private final DetailAST mainAst;
 
     /** Name used during output to user. */
     private final String typeName;
 
     /** Containing AST handler. */
     private final AbstractExpressionHandler parent;
 
     /** Indentation amount for this handler. */
     private IndentLevel indent;
 
     /**
      * Construct an instance of this handler with the given indentation check,
      * name, abstract syntax tree, and parent handler.
      *
      * @param indentCheck   the indentation check
      * @param typeName      the name of the handler
      * @param expr          the abstract syntax tree
      * @param parent        the parent handler
      */
     protected AbstractExpressionHandler(IndentationCheck indentCheck, String typeName,
             DetailAST expr, AbstractExpressionHandler parent) {
         this.indentCheck = indentCheck;
         this.typeName = typeName;
         mainAst = expr;
         this.parent = parent;
     }
 
     /**
      * Check the indentation of the expression we are handling.
      */
     public abstract void checkIndentation();
 
     /**
      * Get the indentation amount for this handler. For performance reasons,
      * this value is cached. The first time this method is called, the
      * indentation amount is computed and stored. On further calls, the stored
      * value is returned.
      *
      * @return the expected indentation amount
      */
     public final IndentLevel getIndent() {
         if (indent == null) {
             indent = getIndentImpl();
@@ -115,121 +90,121 @@ public abstract class AbstractExpressionHandler {
      *
      * @return the expected indentation amount
      */
     protected IndentLevel getIndentImpl() {
         return parent.getSuggestedChildIndent(this);
     }
 
     /**
      * Indentation level suggested for a child element. Children don't have
      * to respect this, but most do.
      *
      * @param child  child AST (so suggestion level can differ based on child
      *                  type)
      *
      * @return suggested indentation for child
      */
     public IndentLevel getSuggestedChildIndent(AbstractExpressionHandler child) {
         return new IndentLevel(getIndent(), getBasicOffset());
     }
 
     /**
      * Log an indentation error.
      *
      * @param ast           the expression that caused the error
      * @param subtypeName   the type of the expression
      * @param actualIndent  the actual indent level of the expression
      */
     protected final void logError(DetailAST ast, String subtypeName,
                                   int actualIndent) {
         logError(ast, subtypeName, actualIndent, getIndent());
     }
 
     /**
      * Log an indentation error.
      *
      * @param ast            the expression that caused the error
      * @param subtypeName    the type of the expression
      * @param actualIndent   the actual indent level of the expression
      * @param expectedIndent the expected indent level of the expression
      */
     protected final void logError(DetailAST ast, String subtypeName,
                                   int actualIndent, IndentLevel expectedIndent) {
         final String typeStr;
 
         if (subtypeName.isEmpty()) {
             typeStr = "";
         }
         else {
             typeStr = " " + subtypeName;
         }
-        String messageKey = MSG_ERROR;
+        String messageKey = IndentationCheck.MSG_ERROR;
         if (expectedIndent.isMultiLevel()) {
-            messageKey = MSG_ERROR_MULTI;
+            messageKey = IndentationCheck.MSG_ERROR_MULTI;
         }
         indentCheck.indentationLog(ast.getLineNo(), messageKey,
             typeName + typeStr, actualIndent, expectedIndent);
     }
 
     /**
      * Log child indentation error.
      *
      * @param line           the expression that caused the error
      * @param actualIndent   the actual indent level of the expression
      * @param expectedIndent the expected indent level of the expression
      */
     private void logChildError(int line,
                                int actualIndent,
                                IndentLevel expectedIndent) {
-        String messageKey = MSG_CHILD_ERROR;
+        String messageKey = IndentationCheck.MSG_CHILD_ERROR;
         if (expectedIndent.isMultiLevel()) {
-            messageKey = MSG_CHILD_ERROR_MULTI;
+            messageKey = IndentationCheck.MSG_CHILD_ERROR_MULTI;
         }
         indentCheck.indentationLog(line, messageKey,
             typeName, actualIndent, expectedIndent);
     }
 
     /**
      * Determines if the given expression is at the start of a line.
      *
      * @param ast   the expression to check
      *
      * @return true if it is, false otherwise
      */
     protected final boolean isOnStartOfLine(DetailAST ast) {
         return getLineStart(ast) == expandedTabsColumnNo(ast);
     }
 
     /**
      * Determines if two expressions are on the same line.
      *
      * @param ast1   the first expression
      * @param ast2   the second expression
      *
      * @return true if they are, false otherwise
      */
     static boolean areOnSameLine(DetailAST ast1, DetailAST ast2) {
         return ast1.getLineNo() == ast2.getLineNo();
     }
 
     /**
      * Searches in given sub-tree (including given node) for the token
      * which represents first symbol for this sub-tree in file.
      * @param ast a root of sub-tree in which the search should be performed.
      * @return a token which occurs first in the file.
      */
     static DetailAST getFirstToken(DetailAST ast) {
         DetailAST first = ast;
         DetailAST child = ast.getFirstChild();
 
         while (child != null) {
             final DetailAST toTest = getFirstToken(child);
             if (toTest.getColumnNo() < first.getColumnNo()) {
                 first = toTest;
             }
             child = child.getNextSibling();
         }
 
         return first;
     }
 
     /**
