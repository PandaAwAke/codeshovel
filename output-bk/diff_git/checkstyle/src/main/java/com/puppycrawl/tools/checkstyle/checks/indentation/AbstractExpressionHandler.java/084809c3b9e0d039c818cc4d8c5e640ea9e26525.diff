diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
index 6f3eb51d7..e4f47b6b2 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
@@ -103,101 +103,101 @@ public abstract class AbstractExpressionHandler {
             level = getLevelImpl();
         }
         return level;
     }
 
     /**
      * Compute the indentation amount for this handler.
      *
      * @return the expected indentation amount
      */
     protected IndentLevel getLevelImpl() {
         return parent.suggestedChildLevel(this);
     }
 
     /**
      * Indentation level suggested for a child element. Children don't have
      * to respect this, but most do.
      *
      * @param child  child AST (so suggestion level can differ based on child
      *                  type)
      *
      * @return suggested indentation for child
      */
     public IndentLevel suggestedChildLevel(AbstractExpressionHandler child) {
         return new IndentLevel(getLevel(), getBasicOffset());
     }
 
     /**
      * Log an indentation error.
      *
      * @param ast           the expression that caused the error
      * @param subtypeName   the type of the expression
      * @param actualLevel    the actual indent level of the expression
      */
     protected final void logError(DetailAST ast, String subtypeName,
                                   int actualLevel) {
         logError(ast, subtypeName, actualLevel, getLevel());
     }
 
     /**
      * Log an indentation error.
      *
      * @param ast           the expression that caused the error
      * @param subtypeName   the type of the expression
      * @param actualLevel   the actual indent level of the expression
      * @param expectedLevel the expected indent level of the expression
      */
     protected final void logError(DetailAST ast, String subtypeName,
                                   int actualLevel, IndentLevel expectedLevel) {
         final String typeStr =
-                "".equals(subtypeName) ? "" : " " + subtypeName;
+            subtypeName.isEmpty() ? "" : " " + subtypeName;
         String messageKey = MSG_ERROR;
         if (expectedLevel.isMultiLevel()) {
             messageKey = MSG_ERROR_MULTI;
         }
         indentCheck.indentationLog(ast.getLineNo(), messageKey,
             typeName + typeStr, actualLevel, expectedLevel);
     }
 
     /**
      * Log child indentation error.
      *
      * @param line           the expression that caused the error
      * @param actualLevel   the actual indent level of the expression
      * @param expectedLevel the expected indent level of the expression
      */
     private void logChildError(int line,
                                int actualLevel,
                                IndentLevel expectedLevel) {
         String messageKey = MSG_CHILD_ERROR;
         if (expectedLevel.isMultiLevel()) {
             messageKey = MSG_CHILD_ERROR_MULTI;
         }
         indentCheck.indentationLog(line, messageKey,
             typeName, actualLevel, expectedLevel);
     }
 
     /**
      * Determines if the given expression is at the start of a line.
      *
      * @param ast   the expression to check
      *
      * @return true if it is, false otherwise
      */
     protected final boolean startsLine(DetailAST ast) {
         return getLineStart(ast) == expandedTabsColumnNo(ast);
     }
 
     /**
      * Determines if two expressions are on the same line.
      *
      * @param ast1   the first expression
      * @param ast2   the second expression
      *
      * @return true if they are, false otherwise
      */
     static boolean areOnSameLine(DetailAST ast1, DetailAST ast2) {
         return ast1.getLineNo() == ast2.getLineNo();
     }
 
     /**
