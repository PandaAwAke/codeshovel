diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java
index 5c4f71a95..d2f65f1a1 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java
@@ -256,109 +256,107 @@ public class AbbreviationAsWordInNameCheck extends Check {
 
         if (astParent2.getType() == TokenTypes.INTERFACE_DEF) {
             result = true;
         }
         return result;
     }
 
     /**
      * Checks that the method has "@Override" annotation.
      * @param methodModifiersAST
      *        A DetailAST nod is related to the given method modifiers
      *        (MODIFIERS type).
      * @return true if method has "@Override" annotation.
      */
     private static boolean hasOverrideAnnotation(DetailAST methodModifiersAST) {
         boolean result = false;
         for (DetailAST child : getChildren(methodModifiersAST)) {
             if (child.getType() == TokenTypes.ANNOTATION) {
                 final DetailAST annotationIdent = child.findFirstToken(TokenTypes.IDENT);
 
                 if (annotationIdent != null && "Override".equals(annotationIdent.getText())) {
                     result = true;
                     break;
                 }
             }
         }
         return result;
     }
 
     /**
      * Gets the disallowed abbreviation contained in given String.
      * @param str
      *        the given String.
      * @return the disallowed abbreviation contained in given String as a
      *         separate String.
      */
     private String getDisallowedAbbreviation(String str) {
         int beginIndex = 0;
         boolean abbrStarted = false;
         String result = null;
 
         for (int index = 0; index < str.length(); index++) {
             final char symbol = str.charAt(index);
 
             if (Character.isUpperCase(symbol)) {
                 if (!abbrStarted) {
                     abbrStarted = true;
                     beginIndex = index;
                 }
             }
-            else {
-                if (abbrStarted) {
-                    abbrStarted = false;
-
-                    final int endIndex = index - 1;
-                    // -1 as a first capital is usually beginning of next word
-                    result = getAbbreviationIfIllegal(str, beginIndex, endIndex);
-                    if (result != null) {
-                        break;
-                    }
-                    beginIndex = -1;
+            else if (abbrStarted) {
+                abbrStarted = false;
+
+                final int endIndex = index - 1;
+                // -1 as a first capital is usually beginning of next word
+                result = getAbbreviationIfIllegal(str, beginIndex, endIndex);
+                if (result != null) {
+                    break;
                 }
+                beginIndex = -1;
             }
         }
         // if abbreviation at the end of name and it is not single character (example: scaleX)
         if (abbrStarted && beginIndex != str.length() - 1) {
             final int endIndex = str.length();
             result = getAbbreviationIfIllegal(str, beginIndex, endIndex);
         }
         return result;
     }
 
     /**
      * Get Abbreviation if it is illegal.
      * @param str name
      * @param beginIndex begin index
      * @param endIndex end index
      * @return true is abbreviation is bigger that required and not in ignore list
      */
     private String getAbbreviationIfIllegal(String str, int beginIndex, int endIndex) {
         String result = null;
         final int abbrLength = endIndex - beginIndex;
         if (abbrLength > allowedAbbreviationLength) {
             final String abbr = str.substring(beginIndex, endIndex);
             if (!allowedAbbreviations.contains(abbr)) {
                 result = abbr;
             }
         }
         return result;
     }
 
     /**
      * Gets all the children which are one level below on the current DetailAST
      * parent node.
      * @param node
      *        Current parent node.
      * @return The list of children one level below on the current parent node.
      */
     private static List<DetailAST> getChildren(final DetailAST node) {
         final List<DetailAST> result = new LinkedList<>();
         DetailAST curNode = node.getFirstChild();
         while (curNode != null) {
             result.add(curNode);
             curNode = curNode.getNextSibling();
         }
         return result;
     }
 
 }
