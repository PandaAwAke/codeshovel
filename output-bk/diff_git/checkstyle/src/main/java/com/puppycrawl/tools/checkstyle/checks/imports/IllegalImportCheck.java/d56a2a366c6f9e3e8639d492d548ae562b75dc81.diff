diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java
index 420d2c442..d2be9072b 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java
@@ -39,90 +39,95 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="IllegalImport"/&gt;
  * </pre>
  * <p>
  * An example of how to configure the check so that it rejects packages
  * {@code java.io.*} and {@code java.sql.*} is
  * </p>
  * <pre>
  * &lt;module name="IllegalImport"&gt;
  *    &lt;property name="illegalPkgs" value="java.io, java.sql"/&gt;
  * &lt;/module&gt;
  *
  * Compatible with Java 1.5 source.
  *
  * </pre>
  * @author Oliver Burn
  * @author Lars KÃ¼hne
  */
 public class IllegalImportCheck
     extends Check {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "import.illegal";
 
     /** list of illegal packages */
     private String[] illegalPkgs;
 
     /**
      * Creates a new {@code IllegalImportCheck} instance.
      */
     public IllegalImportCheck() {
         setIllegalPkgs("sun");
     }
 
     /**
      * Set the list of illegal packages.
      * @param from array of illegal packages
      */
     public final void setIllegalPkgs(String... from) {
         illegalPkgs = from.clone();
     }
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};
+        return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         final FullIdent imp;
         if (ast.getType() == TokenTypes.IMPORT) {
             imp = FullIdent.createFullIdentBelow(ast);
         }
         else {
             imp = FullIdent.createFullIdent(
                 ast.getFirstChild().getNextSibling());
         }
         if (isIllegalImport(imp.getText())) {
             log(ast.getLineNo(),
                 ast.getColumnNo(),
                 MSG_KEY,
                 imp.getText());
         }
     }
 
     /**
      * Checks if an import is from a package that must not be used.
      * @param importText the argument of the import keyword
      * @return if {@code importText} contains an illegal package prefix
      */
     private boolean isIllegalImport(String importText) {
         for (String element : illegalPkgs) {
             if (importText.startsWith(element + ".")) {
                 return true;
             }
         }
         return false;
     }
 }
