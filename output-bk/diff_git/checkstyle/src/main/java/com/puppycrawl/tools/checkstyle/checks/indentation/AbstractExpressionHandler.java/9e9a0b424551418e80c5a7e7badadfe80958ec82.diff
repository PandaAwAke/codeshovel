diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
index fa9628a2f..9c01cf811 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
@@ -168,102 +168,112 @@ public abstract class AbstractExpressionHandler {
      *
      * @param ast   the expression to check
      *
      * @return true if it is, false otherwise
      */
     protected final boolean isOnStartOfLine(DetailAST ast) {
         return getLineStart(ast) == expandedTabsColumnNo(ast);
     }
 
     /**
      * Determines if two expressions are on the same line.
      *
      * @param ast1   the first expression
      * @param ast2   the second expression
      *
      * @return true if they are, false otherwise
      */
     public static boolean areOnSameLine(DetailAST ast1, DetailAST ast2) {
         return ast1.getLineNo() == ast2.getLineNo();
     }
 
     /**
      * Searches in given sub-tree (including given node) for the token
      * which represents first symbol for this sub-tree in file.
      * @param ast a root of sub-tree in which the search should be performed.
      * @return a token which occurs first in the file.
      */
     public static DetailAST getFirstToken(DetailAST ast) {
         DetailAST first = ast;
         DetailAST child = ast.getFirstChild();
 
         while (child != null) {
             final DetailAST toTest = getFirstToken(child);
             if (toTest.getColumnNo() < first.getColumnNo()) {
                 first = toTest;
             }
             child = child.getNextSibling();
         }
 
         return first;
     }
 
     /**
      * Get the start of the line for the given expression.
      *
      * @param ast   the expression to find the start of the line for
      *
      * @return the start of the line for the given expression
      */
     protected final int getLineStart(DetailAST ast) {
-        final String line = indentCheck.getLine(ast.getLineNo() - 1);
-        return getLineStart(line);
+        return getLineStart(ast.getLineNo());
+    }
+
+    /**
+     * Get the start of the line for the given line number.
+     *
+     * @param lineNo   the line number to find the start for
+     *
+     * @return the start of the line for the given expression
+     */
+    protected final int getLineStart(int lineNo) {
+        return getLineStart(indentCheck.getLine(lineNo - 1));
     }
 
     /**
      * Get the start of the specified line.
      *
      * @param line   the specified line number
      *
      * @return the start of the specified line
      */
     protected final int getLineStart(String line) {
         int index = 0;
         while (index < line.length() && Character.isWhitespace(line.charAt(index))) {
             index++;
         }
         return CommonUtils.lengthExpandedTabs(
             line, index, indentCheck.getIndentationTabWidth());
     }
 
     /**
      * Checks that indentation should be increased after first line in checkLinesIndent().
      * @return true if indentation should be increased after
      *              first line in checkLinesIndent()
      *         false otherwise
      */
     protected boolean shouldIncreaseIndent() {
         return true;
     }
 
     /**
      * Check the indentation of consecutive lines for the expression we are
      * handling.
      *
      * @param startLine     the first line to check
      * @param endLine       the last line to check
      * @param indentLevel   the required indent level
      */
     protected final void checkLinesIndent(int startLine, int endLine,
         IndentLevel indentLevel) {
         // check first line
         checkLineIndent(startLine, indentLevel);
 
         // check following lines
         final IndentLevel offsetLevel =
             new IndentLevel(indentLevel, getBasicOffset());
         for (int i = startLine + 1; i <= endLine; i++) {
             checkLineIndent(i, offsetLevel);
         }
     }
 
     /**
@@ -322,100 +332,116 @@ public abstract class AbstractExpressionHandler {
 
     /**
      * Check the indent level for a single line.
      *
      * @param lineNum       the line number to check
      * @param indentLevel   the required indent level
      */
     private void checkLineIndent(int lineNum, IndentLevel indentLevel) {
         final String line = indentCheck.getLine(lineNum - 1);
         if (!line.isEmpty()) {
             final int start = getLineStart(line);
             if (indentLevel.isGreaterThan(start)) {
                 logChildError(lineNum, start, indentLevel);
             }
         }
     }
 
     /**
      * Check the indentation for a single line.
      *
      * @param lineNum       the number of the line to check
      * @param colNum        the column number we are starting at
      * @param indentLevel   the indentation level
      * @param mustMatch     whether or not the indentation level must match
      */
     private void checkLineIndent(int lineNum, int colNum,
         IndentLevel indentLevel, boolean mustMatch) {
         final String line = indentCheck.getLine(lineNum - 1);
         final int start = getLineStart(line);
         // if must match is set, it is an error if the line start is not
         // at the correct indention level; otherwise, it is an only an
         // error if this statement starts the line and it is less than
         // the correct indentation level
         if (mustMatch && !indentLevel.isAcceptable(start)
                 || !mustMatch && colNum == start && indentLevel.isGreaterThan(start)) {
             logChildError(lineNum, start, indentLevel);
         }
     }
 
     /**
      * Checks indentation on wrapped lines between and including
      * {@code firstNode} and {@code lastNode}.
      *
      * @param firstNode First node to start examining.
      * @param lastNode Last node to examine inclusively.
      */
     protected void checkWrappingIndentation(DetailAST firstNode, DetailAST lastNode) {
         indentCheck.getLineWrappingHandler().checkIndentation(firstNode, lastNode);
     }
 
+    /**
+     * Checks indentation on wrapped lines between and including
+     * {@code firstNode} and {@code lastNode}.
+     *
+     * @param firstNode First node to start examining.
+     * @param lastNode Last node to examine inclusively.
+     * @param wrappedIndentLevel Indentation all wrapped lines should use.
+     * @param startIndent Indentation first line before wrapped lines used.
+     * @param ignoreFirstLine Test if first line's indentation should be checked or not.
+     */
+    protected void checkWrappingIndentation(DetailAST firstNode, DetailAST lastNode,
+            int wrappedIndentLevel, int startIndent, boolean ignoreFirstLine) {
+        indentCheck.getLineWrappingHandler().checkIndentation(firstNode, lastNode,
+                wrappedIndentLevel, startIndent, ignoreFirstLine);
+    }
+
     /**
      * Check the indent level of the children of the specified parent
      * expression.
      *
      * @param parentNode         the parent whose children we are checking
      * @param tokenTypes         the token types to check
      * @param startIndent        the starting indent level
      * @param firstLineMatches   whether or not the first line needs to match
      * @param allowNesting       whether or not nested children are allowed
      */
     protected final void checkChildren(DetailAST parentNode,
                                        int[] tokenTypes,
                                        IndentLevel startIndent,
                                        boolean firstLineMatches,
                                        boolean allowNesting) {
         Arrays.sort(tokenTypes);
         for (DetailAST child = parentNode.getFirstChild();
                 child != null;
                 child = child.getNextSibling()) {
             if (Arrays.binarySearch(tokenTypes, child.getType()) >= 0) {
                 checkExpressionSubtree(child, startIndent,
                     firstLineMatches, allowNesting);
             }
         }
     }
 
     /**
      * Check the indentation level for an expression subtree.
      *
      * @param tree               the expression subtree to check
      * @param indentLevel        the indentation level
      * @param firstLineMatches   whether or not the first line has to match
      * @param allowNesting       whether or not subtree nesting is allowed
      */
     protected final void checkExpressionSubtree(
         DetailAST tree,
         IndentLevel indentLevel,
         boolean firstLineMatches,
         boolean allowNesting
     ) {
         final LineSet subtreeLines = new LineSet();
         final int firstLine = getFirstLine(Integer.MAX_VALUE, tree);
         if (firstLineMatches && !allowNesting) {
             subtreeLines.addLineAndCol(firstLine,
                 getLineStart(indentCheck.getLine(firstLine - 1)));
         }
         findSubtreeLines(subtreeLines, tree, allowNesting);
 
         checkLinesIndent(subtreeLines, indentLevel, firstLineMatches, firstLine);
     }
