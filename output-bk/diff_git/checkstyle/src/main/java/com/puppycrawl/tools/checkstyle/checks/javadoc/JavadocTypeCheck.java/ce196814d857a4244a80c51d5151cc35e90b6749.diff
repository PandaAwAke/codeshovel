diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
index 47f57e7e8..a9471af6c 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
@@ -138,163 +138,163 @@ public class JavadocTypeCheck
      * @param format a {@code String} value
      */
     public void setVersionFormat(String format) {
         versionFormat = format;
         versionFormatPattern = CommonUtils.createPattern(format);
     }
 
     /**
      * Controls whether to allow a type which has type parameters to
      * omit matching param tags in the javadoc. Defaults to false.
      *
      * @param flag a {@code Boolean} value
      */
     public void setAllowMissingParamTags(boolean flag) {
         allowMissingParamTags = flag;
     }
 
     /**
      * Controls whether to flag errors for unknown tags. Defaults to false.
      * @param flag a {@code Boolean} value
      */
     public void setAllowUnknownTags(boolean flag) {
         allowUnknownTags = flag;
     }
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.INTERFACE_DEF,
             TokenTypes.CLASS_DEF,
             TokenTypes.ENUM_DEF,
             TokenTypes.ANNOTATION_DEF,
         };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         if (shouldCheck(ast)) {
             final FileContents contents = getFileContents();
             final int lineNo = ast.getLineNo();
-            final TextBlock cmt = contents.getJavadocBefore(lineNo);
-            if (cmt == null) {
+            final TextBlock textBlock = contents.getJavadocBefore(lineNo);
+            if (textBlock == null) {
                 log(lineNo, JAVADOC_MISSING);
             }
             else {
-                final List<JavadocTag> tags = getJavadocTags(cmt);
+                final List<JavadocTag> tags = getJavadocTags(textBlock);
                 if (ScopeUtils.isOuterMostType(ast)) {
                     // don't check author/version for inner classes
                     checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),
                             authorFormatPattern, authorFormat);
                     checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),
                             versionFormatPattern, versionFormat);
                 }
 
                 final List<String> typeParamNames =
                     CheckUtils.getTypeParameterNames(ast);
 
                 if (!allowMissingParamTags) {
                     //Check type parameters that should exist, do
                     for (final String typeParamName : typeParamNames) {
                         checkTypeParamTag(
                             lineNo, tags, typeParamName);
                     }
                 }
 
                 checkUnusedTypeParamTags(tags, typeParamNames);
             }
         }
     }
 
     /**
      * Whether we should check this node.
      * @param ast a given node.
      * @return whether we should check a given node.
      */
     private boolean shouldCheck(final DetailAST ast) {
         final DetailAST mods = ast.findFirstToken(TokenTypes.MODIFIERS);
         final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);
         final Scope customScope;
 
         if (ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {
             customScope = Scope.PUBLIC;
         }
         else {
             customScope = declaredScope;
         }
         final Scope surroundingScope = ScopeUtils.getSurroundingScope(ast);
 
         return customScope.isIn(scope)
             && (surroundingScope == null || surroundingScope.isIn(scope))
             && (excludeScope == null
                 || !customScope.isIn(excludeScope)
                 || surroundingScope != null
                 && !surroundingScope.isIn(excludeScope));
     }
 
     /**
      * Gets all standalone tags from a given javadoc.
-     * @param cmt the Javadoc comment to process.
+     * @param textBlock the Javadoc comment to process.
      * @return all standalone tags from the given javadoc.
      */
-    private List<JavadocTag> getJavadocTags(TextBlock cmt) {
-        final JavadocTags tags = JavadocUtils.getJavadocTags(cmt,
+    private List<JavadocTag> getJavadocTags(TextBlock textBlock) {
+        final JavadocTags tags = JavadocUtils.getJavadocTags(textBlock,
             JavadocUtils.JavadocTagType.BLOCK);
         if (!allowUnknownTags) {
             for (final InvalidJavadocTag tag : tags.getInvalidTags()) {
                 log(tag.getLine(), tag.getCol(), UNKNOWN_TAG,
                     tag.getName());
             }
         }
         return tags.getValidTags();
     }
 
     /**
      * Verifies that a type definition has a required tag.
      * @param lineNo the line number for the type definition.
      * @param tags tags from the Javadoc comment for the type definition.
      * @param tagName the required tag name.
      * @param formatPattern regexp for the tag value.
      * @param format pattern for the tag value.
      */
     private void checkTag(int lineNo, List<JavadocTag> tags, String tagName,
                           Pattern formatPattern, String format) {
         if (formatPattern == null) {
             return;
         }
 
         int tagCount = 0;
         final String tagPrefix = "@";
         for (int i = tags.size() - 1; i >= 0; i--) {
             final JavadocTag tag = tags.get(i);
             if (tag.getTagName().equals(tagName)) {
                 tagCount++;
                 if (!formatPattern.matcher(tag.getFirstArg()).find()) {
                     log(lineNo, TAG_FORMAT, tagPrefix + tagName, format);
                 }
             }
         }
         if (tagCount == 0) {
             log(lineNo, MISSING_TAG, tagPrefix + tagName);
         }
     }
 
     /**
      * Verifies that a type definition has the specified param tag for
      * the specified type parameter name.
      * @param lineNo the line number for the type definition.
      * @param tags tags from the Javadoc comment for the type definition.
      * @param typeParamName the name of the type parameter
      */
     private void checkTypeParamTag(final int lineNo,
             final List<JavadocTag> tags, final String typeParamName) {
         boolean found = false;
