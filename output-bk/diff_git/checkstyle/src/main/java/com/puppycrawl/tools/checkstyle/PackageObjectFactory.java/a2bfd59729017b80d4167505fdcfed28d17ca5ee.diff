diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java b/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
index 62d73eeb7..2356e9000 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
@@ -65,85 +65,85 @@ class PackageObjectFactory implements ModuleFactory {
      * @param packageName the package name
      */
     void addPackage(String packageName) {
         packages.add(packageName);
     }
 
     /**
      * Creates a new instance of a class from a given name. If the name is
      * a classname, creates an instance of the named class. Otherwise, creates
      * an instance of a classname obtained by concatenating the given
      * to a package name from a given list of package names.
      * @param name the name of a class.
      * @return the <code>Object</code>
      * @throws CheckstyleException if an error occurs.
      */
     private Object doMakeObject(String name)
         throws CheckstyleException {
         //try name first
         try {
             return createObject(name);
         }
         catch (final CheckstyleException ex) {
             LOG.debug("Keep looking, ignoring exception", ex);
         }
 
         //now try packages
         for (String packageName : packages) {
 
             final String className = packageName + name;
             try {
                 return createObject(className);
             }
             catch (final CheckstyleException ex) {
                 LOG.debug("Keep looking, ignoring exception", ex);
             }
         }
 
         throw new CheckstyleException("Unable to instantiate " + name);
     }
 
     /**
      * Creates a new instance of a named class.
      * @param className the name of the class to instantiate.
      * @return the <code>Object</code> created by loader.
      * @throws CheckstyleException if an error occurs.
      */
     private Object createObject(String className)
         throws CheckstyleException {
         try {
             final Class<?> clazz = Class.forName(className, true, moduleClassLoader);
-            return clazz.newInstance();
+            return clazz.getDeclaredConstructor().newInstance();
         }
-        catch (final ClassNotFoundException | InstantiationException | IllegalAccessException e) {
-            throw new CheckstyleException("Unable to find class for " + className, e);
+        catch (final ReflectiveOperationException exception) {
+            throw new CheckstyleException("Unable to find class for " + className, exception);
         }
     }
 
     /**
      * Creates a new instance of a class from a given name, or that name
      * concatenated with &quot;Check&quot;. If the name is
      * a classname, creates an instance of the named class. Otherwise, creates
      * an instance of a classname obtained by concatenating the given name
      * to a package name from a given list of package names.
      * @param name the name of a class.
      * @return the <code>Object</code> created by loader.
      * @throws CheckstyleException if an error occurs.
      */
     @Override
     public Object createModule(String name)
         throws CheckstyleException {
         try {
             return doMakeObject(name);
         }
         catch (final CheckstyleException ex) {
             //try again with suffix "Check"
             try {
                 return doMakeObject(name + "Check");
             }
             catch (final CheckstyleException ex2) {
                 throw new CheckstyleException(
                     "Unable to instantiate " + name, ex2);
             }
         }
     }
 }
