diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
index df6fd9cf4..ce414c64f 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
@@ -11,181 +11,181 @@
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.gui;
 
 import java.awt.BorderLayout;
 import java.awt.Component;
 import java.awt.GridLayout;
 import java.awt.event.ActionEvent;
 import java.awt.event.KeyEvent;
 import java.io.File;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 
 import javax.swing.AbstractAction;
 import javax.swing.Action;
 import javax.swing.JButton;
 import javax.swing.JFileChooser;
 import javax.swing.JOptionPane;
 import javax.swing.JPanel;
 import javax.swing.JScrollPane;
 import javax.swing.JTextArea;
 import javax.swing.SwingUtilities;
 import javax.swing.filechooser.FileFilter;
 
 import antlr.ANTLRException;
 
 import com.puppycrawl.tools.checkstyle.TreeWalker;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FileContents;
 import com.puppycrawl.tools.checkstyle.api.FileText;
 
 /**
  * Displays information about a parse tree.
  * The user can change the file that is parsed and displayed
  * through a JFileChooser.
  *
  * @author Lars KÃ¼hne
  */
 public class ParseTreeInfoPanel extends JPanel {
     private static final long serialVersionUID = -4243405131202059043L;
 
     /** Parse tree model. */
-    private final transient ParseTreeModel parseTreeModel;
+    private final transient ParseTreeTableModel parseTreeTableModel;
     /** JTextArea component. */
     private final JTextArea textArea;
     /** Last directory. */
     private File lastDirectory;
     /** Current file. */
     private File currentFile;
     /** Reload action. */
     private final ReloadAction reloadAction;
     /** Lines to position map. */
     private final List<Integer> linesToPosition = new ArrayList<>();
 
     /**
      * Create a new ParseTreeInfoPanel instance.
      */
     public ParseTreeInfoPanel() {
         setLayout(new BorderLayout());
 
-        parseTreeModel = new ParseTreeModel(null);
-        final JTreeTable treeTable = new JTreeTable(parseTreeModel);
+        parseTreeTableModel = new ParseTreeTableModel(null);
+        final JTreeTable treeTable = new JTreeTable(parseTreeTableModel);
         final JScrollPane scrollPane = new JScrollPane(treeTable);
         add(scrollPane, BorderLayout.PAGE_START);
 
         final JButton fileSelectionButton =
             new JButton(new FileSelectionAction());
 
         reloadAction = new ReloadAction();
         reloadAction.setEnabled(false);
         final JButton reloadButton = new JButton(reloadAction);
 
         textArea = new JTextArea(20, 15);
         textArea.setEditable(false);
         treeTable.setEditor(textArea);
         treeTable.setLinePositionMap(linesToPosition);
 
         final JScrollPane sp2 = new JScrollPane(textArea);
         add(sp2, BorderLayout.CENTER);
 
         final JPanel pane = new JPanel(new GridLayout(1, 2));
         add(pane, BorderLayout.PAGE_END);
         pane.add(fileSelectionButton);
         pane.add(reloadButton);
 
     }
 
     /**
      * Opens the input parse tree ast.
      * @param parseTree DetailAST tree.
      */
     public void openAst(DetailAST parseTree) {
-        parseTreeModel.setParseTree(parseTree);
+        parseTreeTableModel.setParseTree(parseTree);
         reloadAction.setEnabled(true);
 
         // clear for each new file
         clearLinesToPosition();
         // starts line counting at 1
         addLineToPosition(0);
         // insert the contents of the file to the text area
 
         // clean the text area before inserting the lines of the new file
         if (!textArea.getText().isEmpty()) {
             textArea.replaceRange("", 0, textArea.getText().length());
         }
 
         // move back to the top of the file
         textArea.moveCaretPosition(0);
     }
 
     /**
      * Opens file and loads it into text area.
      * @param file File to open.
      * @param parent Component for displaying errors if file can't be open.
      */
     public void openFile(File file, final Component parent) {
         if (file != null) {
             try {
                 Main.getFrame().setTitle("Checkstyle : " + file.getName());
                 final FileText text = new FileText(file.getAbsoluteFile(),
                                                    getEncoding());
                 final DetailAST parseTree = parseFile(text);
-                parseTreeModel.setParseTree(parseTree);
+                parseTreeTableModel.setParseTree(parseTree);
                 currentFile = file;
                 lastDirectory = file.getParentFile();
                 reloadAction.setEnabled(true);
 
                 final String[] sourceLines = text.toLinesArray();
 
                 // clear for each new file
                 clearLinesToPosition();
                 // starts line counting at 1
                 addLineToPosition(0);
 
                 //clean the text area before inserting the lines of the new file
                 if (!textArea.getText().isEmpty()) {
                     textArea.replaceRange("", 0, textArea.getText()
                             .length());
                 }
 
                 // insert the contents of the file to the text area
                 for (final String element : sourceLines) {
                     addLineToPosition(textArea.getText().length());
                     textArea.append(element + System.lineSeparator());
                 }
 
                 // move back to the top of the file
                 textArea.moveCaretPosition(0);
             }
             catch (final IOException | ANTLRException ex) {
                 showErrorDialog(
                         parent,
                         "Could not parse" + file + ": " + ex.getMessage());
             }
         }
     }
 
     /**
      * Parses a file and returns the parse tree.
      * @param text the file to parse
      * @return the root node of the parse tree
      * @throws ANTLRException if the file is not a Java source
      */
     private static DetailAST parseFile(FileText text)
         throws ANTLRException {
         final FileContents contents = new FileContents(text);
         return TreeWalker.parse(contents);
     }
 
     /**
      * Returns the configured file encoding.
      * This can be set using the {@code file.encoding} system property.
      * It defaults to UTF-8.
