diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java b/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
index 7afc57d03..b6ddfe314 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
@@ -262,115 +262,108 @@ public final class TreeWalker
         }
         catch (final TokenStreamException te) {
             final String exceptionMsg = String.format(msg,
                     "TokenStreamException", fileName);
             Utils.getExceptionLogger().error(exceptionMsg);
             getMessageCollector().add(
                 new LocalizedMessage(
                     0,
                     Defn.CHECKSTYLE_BUNDLE,
                     "general.exception",
                     new String[] {te.getMessage()},
                     getId(),
                     this.getClass(), null));
         }
         catch (final Throwable err) {
             final String exceptionMsg = String.format(msg, "Exception", fileName);
             Utils.getExceptionLogger().error(exceptionMsg);
             err.printStackTrace();
             getMessageCollector().add(
                 new LocalizedMessage(
                     0,
                     Defn.CHECKSTYLE_BUNDLE,
                     "general.exception",
                     new String[] {"" + err},
                     getId(),
                     this.getClass(), null));
         }
 
         if (getMessageCollector().size() == 0) {
             cache.checkedOk(fileName, timestamp);
         }
     }
 
     /**
      * Register a check for a given configuration.
      * @param check the check to register
      * @throws CheckstyleException if an error occurs
      */
     private void registerCheck(Check check)
         throws CheckstyleException
     {
         final int[] tokens;
         final Set<String> checkTokens = check.getTokenNames();
         if (!checkTokens.isEmpty()) {
             tokens = check.getRequiredTokens();
 
             //register configured tokens
             final int[] acceptableTokens = check.getAcceptableTokens();
             Arrays.sort(acceptableTokens);
             for (String token : checkTokens) {
-                try {
-                    final int tokenId = TokenTypes.getTokenId(token);
-                    if (Arrays.binarySearch(acceptableTokens, tokenId) >= 0) {
-                        registerCheck(token, check);
-                    }
-                    else {
-                        throw new IllegalArgumentException("Token \""
-                            + token + "\" was not found in Acceptable tokens list"
-                                    + " in check " + check);
-                    }
+                final int tokenId = TokenTypes.getTokenId(token);
+                if (Arrays.binarySearch(acceptableTokens, tokenId) >= 0) {
+                    registerCheck(token, check);
                 }
-                catch (final IllegalArgumentException ex) {
+                else {
                     throw new CheckstyleException("Token \""
                         + token + "\" was not found in Acceptable tokens list"
-                                + " in check " + check, ex);
+                                + " in check " + check);
                 }
             }
         }
         else {
             tokens = check.getDefaultTokens();
         }
         for (int element : tokens) {
             registerCheck(element, check);
         }
         if (check.isCommentNodesRequired()) {
             commentChecks.add(check);
         }
         else {
             ordinaryChecks.add(check);
         }
     }
 
     /**
      * Register a check for a specified token id.
      * @param tokenID the id of the token
      * @param check the check to register
      */
     private void registerCheck(int tokenID, Check check)
     {
         registerCheck(TokenTypes.getTokenName(tokenID), check);
     }
 
     /**
      * Register a check for a specified token name
      * @param token the name of the token
      * @param check the check to register
      */
     private void registerCheck(String token, Check check)
     {
         if (check.isCommentNodesRequired()) {
             tokenToCommentChecks.put(token, check);
         }
         else if (TokenTypes.isCommentType(token)) {
             LOG.warn("Check '"
                     + check.getClass().getName()
                     + "' waits for comment type token ('"
                     + token
                     + "') and should override 'isCommentNodesRequred()'"
                     + " method to return 'true'");
         }
         else {
             tokenToOrdinaryChecks.put(token, check);
         }
     }
 
