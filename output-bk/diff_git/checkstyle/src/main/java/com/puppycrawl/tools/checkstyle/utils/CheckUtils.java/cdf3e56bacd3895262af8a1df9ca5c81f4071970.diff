diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java
index a554f053f..6a710b102 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java
@@ -138,101 +138,101 @@ public final class CheckUtils {
      */
     public static FullIdent createFullType(DetailAST typeAST) {
         final DetailAST arrayDeclAST =
             typeAST.findFirstToken(TokenTypes.ARRAY_DECLARATOR);
         final FullIdent fullType;
 
         if (arrayDeclAST == null) {
             fullType = createFullTypeNoArrays(typeAST);
         }
         else {
             fullType = createFullTypeNoArrays(arrayDeclAST);
         }
         return fullType;
     }
 
     /**
      * @param typeAST a type node (no array)
      * @return {@code FullIdent} for given type.
      */
     private static FullIdent createFullTypeNoArrays(DetailAST typeAST) {
         return FullIdent.createFullIdent(typeAST.getFirstChild());
     }
 
     /**
      * Returns the value represented by the specified string of the specified
      * type. Returns 0 for types other than float, double, int, and long.
      * @param text the string to be parsed.
      * @param type the token type of the text. Should be a constant of
      * {@link TokenTypes}.
      * @return the double value represented by the string argument.
      */
     public static double parseDouble(String text, int type) {
         String txt = UNDERSCORE_PATTERN.matcher(text).replaceAll("");
         double result = 0;
         switch (type) {
             case TokenTypes.NUM_FLOAT:
             case TokenTypes.NUM_DOUBLE:
                 result = Double.parseDouble(txt);
                 break;
             case TokenTypes.NUM_INT:
             case TokenTypes.NUM_LONG:
                 int radix = BASE_10;
                 if (txt.startsWith("0x") || txt.startsWith("0X")) {
                     radix = BASE_16;
                     txt = txt.substring(2);
                 }
                 else if (txt.charAt(0) == '0') {
                     radix = BASE_8;
                     txt = txt.substring(1);
                 }
-                if (Utils.endsWithChar(txt, 'L') || Utils.endsWithChar(txt, 'l')) {
+                if (CommonUtils.endsWithChar(txt, 'L') || CommonUtils.endsWithChar(txt, 'l')) {
                     txt = txt.substring(0, txt.length() - 1);
                 }
                 if (!txt.isEmpty()) {
                     if (type == TokenTypes.NUM_INT) {
                         result = parseInt(txt, radix);
                     }
                     else {
                         result = parseLong(txt, radix);
                     }
                 }
                 break;
             default:
                 break;
         }
         return result;
     }
 
     /**
      * Parses the string argument as a signed integer in the radix specified by
      * the second argument. The characters in the string must all be digits of
      * the specified radix. Handles negative values, which method
      * java.lang.Integer.parseInt(String, int) does not.
      * @param text the String containing the integer representation to be
      * parsed. Precondition: text contains a parsable int.
      * @param radix the radix to be used while parsing text.
      * @return the integer represented by the string argument in the specified
      * radix.
      */
     public static int parseInt(String text, int radix) {
         int result = 0;
         final int max = text.length();
         for (int i = 0; i < max; i++) {
             final int digit = Character.digit(text.charAt(i), radix);
             result *= radix;
             result += digit;
         }
         return result;
     }
 
     /**
      * Parses the string argument as a signed long in the radix specified by
      * the second argument. The characters in the string must all be digits of
      * the specified radix. Handles negative values, which method
      * java.lang.Integer.parseInt(String, int) does not.
      * @param text the String containing the integer representation to be
      * parsed. Precondition: text contains a parsable int.
      * @param radix the radix to be used while parsing text.
      * @return the long represented by the string argument in the specified
      * radix.
      */
