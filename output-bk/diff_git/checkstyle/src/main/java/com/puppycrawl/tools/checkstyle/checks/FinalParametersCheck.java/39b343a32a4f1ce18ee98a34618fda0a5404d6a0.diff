diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/FinalParametersCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/FinalParametersCheck.java
index fbe4f6888..18bf7320a 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/FinalParametersCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/FinalParametersCheck.java
@@ -68,142 +68,136 @@ public class FinalParametersCheck extends AbstractCheck {
     private final Set<Integer> primitiveDataTypes = ImmutableSet.of(
             TokenTypes.LITERAL_BYTE,
             TokenTypes.LITERAL_SHORT,
             TokenTypes.LITERAL_INT,
             TokenTypes.LITERAL_LONG,
             TokenTypes.LITERAL_FLOAT,
             TokenTypes.LITERAL_DOUBLE,
             TokenTypes.LITERAL_BOOLEAN,
             TokenTypes.LITERAL_CHAR);
 
     /**
      * Option to ignore primitive types as params.
      */
     private boolean ignorePrimitiveTypes;
 
     /**
      * Sets ignoring primitive types as params.
      * @param ignorePrimitiveTypes true or false.
      */
     public void setIgnorePrimitiveTypes(boolean ignorePrimitiveTypes) {
         this.ignorePrimitiveTypes = ignorePrimitiveTypes;
     }
 
     @Override
     public int[] getDefaultTokens() {
         return new int[] {
             TokenTypes.METHOD_DEF,
             TokenTypes.CTOR_DEF,
         };
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.METHOD_DEF,
             TokenTypes.CTOR_DEF,
             TokenTypes.LITERAL_CATCH,
             TokenTypes.FOR_EACH_CLAUSE,
         };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return CommonUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         // don't flag interfaces
         final DetailAST container = ast.getParent().getParent();
-        if (container.getType() == TokenTypes.INTERFACE_DEF) {
-            return;
-        }
-
-        if (ast.getType() == TokenTypes.LITERAL_CATCH) {
-            visitCatch(ast);
-        }
-        else if (ast.getType() == TokenTypes.FOR_EACH_CLAUSE) {
-            visitForEachClause(ast);
-        }
-        else {
-            visitMethod(ast);
+        if (container.getType() != TokenTypes.INTERFACE_DEF) {
+            if (ast.getType() == TokenTypes.LITERAL_CATCH) {
+                visitCatch(ast);
+            }
+            else if (ast.getType() == TokenTypes.FOR_EACH_CLAUSE) {
+                visitForEachClause(ast);
+            }
+            else {
+                visitMethod(ast);
+            }
         }
     }
 
     /**
      * Checks parameters of the method or ctor.
      * @param method method or ctor to check.
      */
     private void visitMethod(final DetailAST method) {
-        // exit on fast lane if there is nothing to check here
-        if (!method.branchContains(TokenTypes.PARAMETER_DEF)) {
-            return;
-        }
-
-        // ignore abstract and native methods
         final DetailAST modifiers =
             method.findFirstToken(TokenTypes.MODIFIERS);
-        if (modifiers.branchContains(TokenTypes.ABSTRACT)
-                || modifiers.branchContains(TokenTypes.LITERAL_NATIVE)) {
-            return;
-        }
+        // exit on fast lane if there is nothing to check here
 
-        // we can now be sure that there is at least one parameter
-        final DetailAST parameters =
-            method.findFirstToken(TokenTypes.PARAMETERS);
-        DetailAST child = parameters.getFirstChild();
-        while (child != null) {
-            // children are PARAMETER_DEF and COMMA
-            if (child.getType() == TokenTypes.PARAMETER_DEF) {
-                checkParam(child);
+        if (method.branchContains(TokenTypes.PARAMETER_DEF)
+                // ignore abstract and native methods
+                && !modifiers.branchContains(TokenTypes.ABSTRACT)
+                && !modifiers.branchContains(TokenTypes.LITERAL_NATIVE)) {
+            // we can now be sure that there is at least one parameter
+            final DetailAST parameters =
+                method.findFirstToken(TokenTypes.PARAMETERS);
+            DetailAST child = parameters.getFirstChild();
+            while (child != null) {
+                // children are PARAMETER_DEF and COMMA
+                if (child.getType() == TokenTypes.PARAMETER_DEF) {
+                    checkParam(child);
+                }
+                child = child.getNextSibling();
             }
-            child = child.getNextSibling();
         }
     }
 
     /**
      * Checks parameter of the catch block.
      * @param catchClause catch block to check.
      */
     private void visitCatch(final DetailAST catchClause) {
         checkParam(catchClause.findFirstToken(TokenTypes.PARAMETER_DEF));
     }
 
     /**
      * Checks parameter of the for each clause.
      * @param forEachClause for each clause to check.
      */
     private void visitForEachClause(final DetailAST forEachClause) {
         checkParam(forEachClause.findFirstToken(TokenTypes.VARIABLE_DEF));
     }
 
     /**
      * Checks if the given parameter is final.
      * @param param parameter to check.
      */
     private void checkParam(final DetailAST param) {
         if (!param.branchContains(TokenTypes.FINAL) && !isIgnoredParam(param)) {
             final DetailAST paramName = param.findFirstToken(TokenTypes.IDENT);
             final DetailAST firstNode = CheckUtils.getFirstNode(param);
             log(firstNode.getLineNo(), firstNode.getColumnNo(),
                 MSG_KEY, paramName.getText());
         }
     }
 
     /**
      * Checks for skip current param due to <b>ignorePrimitiveTypes</b> option.
      * @param paramDef {@link TokenTypes#PARAMETER_DEF PARAMETER_DEF}
      * @return true if param has to be skipped.
      */
     private boolean isIgnoredParam(DetailAST paramDef) {
         boolean result = false;
         if (ignorePrimitiveTypes) {
             final DetailAST parameterType = paramDef
                 .findFirstToken(TokenTypes.TYPE).getFirstChild();
             if (primitiveDataTypes.contains(parameterType.getType())) {
                 result = true;
             }
         }
         return result;
     }
 }
