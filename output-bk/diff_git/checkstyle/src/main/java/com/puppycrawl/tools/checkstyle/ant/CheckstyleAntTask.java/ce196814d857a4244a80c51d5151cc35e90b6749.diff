diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
index 9078f205e..08ef8b950 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
@@ -369,131 +369,131 @@ public class CheckstyleAntTask extends Task {
                 getProject().setProperty(failureProperty, failureMsg);
             }
 
             if (failOnViolation) {
                 throw new BuildException(failureMsg, getLocation());
             }
         }
     }
 
     /**
      * Creates new instance of {@code Checker}.
      * @return new instance of {@code Checker}
      */
     private Checker createChecker() {
         Checker checker;
         try {
             final Properties props = createOverridingProperties();
             final Configuration config =
                 ConfigurationLoader.loadConfiguration(
                     configLocation,
                     new PropertiesExpander(props),
                     omitIgnoredModules);
 
             final DefaultContext context = new DefaultContext();
             final ClassLoader loader = new AntClassLoader(getProject(),
                     classpath);
             context.add("classloader", loader);
 
             final ClassLoader moduleClassLoader =
                 Checker.class.getClassLoader();
             context.add("moduleClassLoader", moduleClassLoader);
 
             checker = new Checker();
             checker.contextualize(context);
             checker.configure(config);
         }
         catch (final CheckstyleException e) {
             throw new BuildException(String.format(Locale.ROOT, "Unable to create a Checker: "
                     + "configLocation {%s}, classpath {%s}.", configLocation, classpath), e);
         }
         return checker;
     }
 
     /**
      * Create the Properties object based on the arguments specified
      * to the ANT task.
      * @return the properties for property expansion expansion
      * @throws BuildException if an error occurs
      */
     private Properties createOverridingProperties() {
-        final Properties retVal = new Properties();
+        final Properties returnValue = new Properties();
 
         // Load the properties file if specified
         if (properties != null) {
             FileInputStream inStream = null;
             try {
                 inStream = new FileInputStream(properties);
-                retVal.load(inStream);
+                returnValue.load(inStream);
             }
             catch (final IOException e) {
                 throw new BuildException("Error loading Properties file '"
                         + properties + "'", e, getLocation());
             }
             finally {
                 Closeables.closeQuietly(inStream);
             }
         }
 
         // override with Ant properties like ${basedir}
         final Map<String, Object> antProps = getProject().getProperties();
         for (Map.Entry<String, Object> entry : antProps.entrySet()) {
             final String value = String.valueOf(entry.getValue());
-            retVal.setProperty(entry.getKey(), value);
+            returnValue.setProperty(entry.getKey(), value);
         }
 
         // override with properties specified in subelements
         for (Property p : overrideProps) {
-            retVal.setProperty(p.getKey(), p.getValue());
+            returnValue.setProperty(p.getKey(), p.getValue());
         }
 
-        return retVal;
+        return returnValue;
     }
 
     /**
      * Return the list of listeners set in this task.
      * @return the list of listeners.
      */
     private AuditListener[] getListeners() {
         final int formatterCount = Math.max(1, formatters.size());
 
         final AuditListener[] listeners = new AuditListener[formatterCount];
 
         // formatters
         try {
             if (formatters.isEmpty()) {
                 final OutputStream debug = new LogOutputStream(this, Project.MSG_DEBUG);
                 final OutputStream err = new LogOutputStream(this, Project.MSG_ERR);
                 listeners[0] = new DefaultLogger(debug, true, err, true, true);
             }
             else {
                 for (int i = 0; i < formatterCount; i++) {
                     final Formatter formatter = formatters.get(i);
                     listeners[i] = formatter.createListener(this);
                 }
             }
         }
         catch (IOException e) {
             throw new BuildException(String.format(Locale.ROOT, "Unable to create listeners: "
                     + "formatters {%s}.", formatters), e);
         }
         return listeners;
     }
 
     /**
      * Returns the list of files (full path name) to process.
      * @return the list of files included via the filesets.
      */
     protected List<File> scanFileSets() {
         final List<File> list = Lists.newArrayList();
         if (fileName != null) {
             // oops we've got an additional one to process, don't
             // forget it. No sweat, it's fully resolved via the setter.
             log("Adding standalone file for audit", Project.MSG_VERBOSE);
             list.add(new File(fileName));
         }
         for (int i = 0; i < fileSets.size(); i++) {
             final FileSet fileSet = fileSets.get(i);
             final DirectoryScanner scanner = fileSet.getDirectoryScanner(getProject());
             scanner.scan();
 
             final String[] names = scanner.getIncludedFiles();
