diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheck.java
index 6b1ba7a1a..09690af1c 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheck.java
@@ -77,101 +77,106 @@ public class RegexpCheck extends AbstractFormatCheck {
     /** Default duplicate limit */
     private static final int DEFAULT_DUPLICATE_LIMIT = -1;
 
     /** Default error report limit */
     private static final int DEFAULT_ERROR_LIMIT = 100;
 
     /** Error count exceeded message */
     private static final String ERROR_LIMIT_EXCEEDED_MESSAGE =
         "The error limit has been exceeded, "
         + "the check is aborting, there may be more unreported errors.";
 
     /** Custom message for report. */
     private String message = "";
 
     /** Ignore matches within comments? **/
     private boolean ignoreComments;
 
     /** Pattern illegal? */
     private boolean illegalPattern;
 
     /** Error report limit */
     private int errorLimit = DEFAULT_ERROR_LIMIT;
 
     /** Disallow more than x duplicates? */
     private int duplicateLimit;
 
     /** Boolean to say if we should check for duplicates. */
     private boolean checkForDuplicates;
 
     /** Tracks number of matches made */
     private int matchCount;
 
     /** Tracks number of errors */
     private int errorCount;
 
     /** The matcher */
     private Matcher matcher;
 
     /**
      * Instantiates an new RegexpCheck.
      */
     public RegexpCheck() {
         super("$^", Pattern.MULTILINE); // the empty language
     }
 
     /**
      * Setter for message property.
      * @param message custom message which should be used in report.
      */
     public void setMessage(String message) {
-        this.message = message == null ? "" : message;
+        if (message == null) {
+            this.message = "";
+        }
+        else {
+            this.message = message;
+        }
     }
 
     /**
      * Getter for message property.
      * I'm not sure if this gets used by anything outside,
      * I just included it because GenericIllegalRegexp had it,
      * it's being used in logMessage() so it's covered in EMMA.
      * @return custom message to be used in report.
      */
     public String getMessage() {
         return message;
     }
 
     /**
      * Sets if matches within comments should be ignored.
      * @param ignoreComments True if comments should be ignored.
      */
     public void setIgnoreComments(boolean ignoreComments) {
         this.ignoreComments = ignoreComments;
     }
 
     /**
      * Sets if pattern is illegal, otherwise pattern is required.
      * @param illegalPattern True if pattern is not allowed.
      */
     public void setIllegalPattern(boolean illegalPattern) {
         this.illegalPattern = illegalPattern;
     }
 
     /**
      * Sets the limit on the number of errors to report.
      * @param errorLimit the number of errors to report.
      */
     public void setErrorLimit(int errorLimit) {
         this.errorLimit = errorLimit;
     }
 
     /**
      * Sets the maximum number of instances of required pattern allowed.
      * @param duplicateLimit negative values mean no duplicate checking,
      * any positive value is used as the limit.
      */
     public void setDuplicateLimit(int duplicateLimit) {
         this.duplicateLimit = duplicateLimit;
         checkForDuplicates = duplicateLimit > DEFAULT_DUPLICATE_LIMIT;
     }
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
@@ -220,67 +225,76 @@ public class RegexpCheck extends AbstractFormatCheck {
             }
         }
         else if (!illegalPattern && matchCount == 0) {
             logMessage(0);
         }
 
     }
 
     /**
      * check if we can stop valiation
      * @param ignore flag
      * @return true is we can continue
      */
     private boolean canContinueValidation(boolean ignore) {
         return errorCount < errorLimit
                 && (ignore || illegalPattern || checkForDuplicates);
     }
 
     /**
      * detect ignore situation
      * @param startLine position of line
      * @param text file text
      * @param start line colun
      * @return true is that need to be ignored
      */
     private boolean isIgnore(int startLine, FileText text, LineColumn start) {
         final LineColumn end;
         if (matcher.end() == 0) {
             end = text.lineColumn(0);
         }
         else {
             end = text.lineColumn(matcher.end() - 1);
         }
         final int startColumn = start.getColumn();
         final int endLine = end.getLine();
         final int endColumn = end.getColumn();
         boolean ignore = false;
         if (ignoreComments) {
             final FileContents theFileContents = getFileContents();
             ignore = theFileContents.hasIntersectionWithComment(startLine,
                 startColumn, endLine, endColumn);
         }
         return ignore;
     }
 
     /**
      * Displays the right message.
      * @param lineNumber the line number the message relates to.
      */
     private void logMessage(int lineNumber) {
-        String msg = getMessage().isEmpty() ? getFormat() : message;
+        String msg;
+
+        if (getMessage().isEmpty()) {
+            msg = getFormat();
+        }
+        else {
+            msg = message;
+        }
+
         if (errorCount >= errorLimit) {
             msg = ERROR_LIMIT_EXCEEDED_MESSAGE + msg;
         }
+
         if (illegalPattern) {
             log(lineNumber, MSG_ILLEGAL_REGEXP, msg);
         }
         else {
             if (lineNumber > 0) {
                 log(lineNumber, MSG_DUPLICATE_REGEXP, msg);
             }
             else {
                 log(lineNumber, MSG_REQUIRED_REGEXP, msg);
             }
         }
     }
 }
