diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
index 1274ad750..1d89232d3 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
@@ -1,130 +1,130 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2016 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.ant;
 
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.net.URL;
+import java.util.ArrayList;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Properties;
 import java.util.ResourceBundle;
 
 import org.apache.tools.ant.AntClassLoader;
 import org.apache.tools.ant.BuildException;
 import org.apache.tools.ant.DirectoryScanner;
 import org.apache.tools.ant.Project;
 import org.apache.tools.ant.Task;
 import org.apache.tools.ant.taskdefs.LogOutputStream;
 import org.apache.tools.ant.types.EnumeratedAttribute;
 import org.apache.tools.ant.types.FileSet;
 import org.apache.tools.ant.types.Path;
 import org.apache.tools.ant.types.Reference;
 
-import com.google.common.collect.Lists;
 import com.google.common.io.Closeables;
 import com.puppycrawl.tools.checkstyle.Checker;
 import com.puppycrawl.tools.checkstyle.ConfigurationLoader;
 import com.puppycrawl.tools.checkstyle.DefaultContext;
 import com.puppycrawl.tools.checkstyle.DefaultLogger;
 import com.puppycrawl.tools.checkstyle.PropertiesExpander;
 import com.puppycrawl.tools.checkstyle.XMLLogger;
 import com.puppycrawl.tools.checkstyle.api.AuditListener;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
 import com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter;
 
 /**
  * An implementation of a ANT task for calling checkstyle. See the documentation
  * of the task for usage.
  * @author Oliver Burn
  */
 public class CheckstyleAntTask extends Task {
     /** Poor man's enum for an xml formatter. */
     private static final String E_XML = "xml";
     /** Poor man's enum for an plain formatter. */
     private static final String E_PLAIN = "plain";
 
     /** Suffix for time string. */
     private static final String TIME_SUFFIX = " ms.";
 
     /** Contains the filesets to process. */
-    private final List<FileSet> fileSets = Lists.newArrayList();
+    private final List<FileSet> fileSets = new ArrayList<>();
 
     /** Contains the formatters to log to. */
-    private final List<Formatter> formatters = Lists.newArrayList();
+    private final List<Formatter> formatters = new ArrayList<>();
 
     /** Contains the Properties to override. */
-    private final List<Property> overrideProps = Lists.newArrayList();
+    private final List<Property> overrideProps = new ArrayList<>();
 
     /** Class path to locate class files. */
     private Path classpath;
 
     /** Name of file to check. */
     private String fileName;
 
     /** Config file containing configuration. */
     private String configLocation;
 
     /** Whether to fail build on violations. */
     private boolean failOnViolation = true;
 
     /** Property to set on violations. */
     private String failureProperty;
 
     /** The name of the properties file. */
     private File properties;
 
     /** The maximum number of errors that are tolerated. */
     private int maxErrors;
 
     /** The maximum number of warnings that are tolerated. */
     private int maxWarnings = Integer.MAX_VALUE;
 
     /**
      * Whether to omit ignored modules - some modules may log tove
      * their severity depending on their configuration (e.g. WriteTag) so
      * need to be included
      */
     private boolean omitIgnoredModules = true;
 
     ////////////////////////////////////////////////////////////////////////////
     // Setters for ANT specific attributes
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Tells this task to write failure message to the named property when there
      * is a violation.
      * @param propertyName the name of the property to set
      *                      in the event of an failure.
      */
     public void setFailureProperty(String propertyName) {
         failureProperty = propertyName;
     }
 
     /**
      * Sets flag - whether to fail if a violation is found.
      * @param fail whether to fail if a violation is found
      */
@@ -458,101 +458,101 @@ public class CheckstyleAntTask extends Task {
         // override with Ant properties like ${basedir}
         final Map<String, Object> antProps = getProject().getProperties();
         for (Map.Entry<String, Object> entry : antProps.entrySet()) {
             final String value = String.valueOf(entry.getValue());
             returnValue.setProperty(entry.getKey(), value);
         }
 
         // override with properties specified in subelements
         for (Property p : overrideProps) {
             returnValue.setProperty(p.getKey(), p.getValue());
         }
 
         return returnValue;
     }
 
     /**
      * Return the list of listeners set in this task.
      * @return the list of listeners.
      */
     private AuditListener[] getListeners() {
         final int formatterCount = Math.max(1, formatters.size());
 
         final AuditListener[] listeners = new AuditListener[formatterCount];
 
         // formatters
         try {
             if (formatters.isEmpty()) {
                 final OutputStream debug = new LogOutputStream(this, Project.MSG_DEBUG);
                 final OutputStream err = new LogOutputStream(this, Project.MSG_ERR);
                 listeners[0] = new DefaultLogger(debug, true, err, true);
             }
             else {
                 for (int i = 0; i < formatterCount; i++) {
                     final Formatter formatter = formatters.get(i);
                     listeners[i] = formatter.createListener(this);
                 }
             }
         }
         catch (IOException ex) {
             throw new BuildException(String.format(Locale.ROOT, "Unable to create listeners: "
                     + "formatters {%s}.", formatters), ex);
         }
         return listeners;
     }
 
     /**
      * Returns the list of files (full path name) to process.
      * @return the list of files included via the filesets.
      */
     protected List<File> scanFileSets() {
-        final List<File> list = Lists.newArrayList();
+        final List<File> list = new ArrayList<>();
         if (fileName != null) {
             // oops we've got an additional one to process, don't
             // forget it. No sweat, it's fully resolved via the setter.
             log("Adding standalone file for audit", Project.MSG_VERBOSE);
             list.add(new File(fileName));
         }
         for (int i = 0; i < fileSets.size(); i++) {
             final FileSet fileSet = fileSets.get(i);
             final DirectoryScanner scanner = fileSet.getDirectoryScanner(getProject());
             scanner.scan();
 
             final String[] names = scanner.getIncludedFiles();
             log(i + ") Adding " + names.length + " files from directory "
                     + scanner.getBasedir(), Project.MSG_VERBOSE);
 
             for (String element : names) {
                 final String pathname = scanner.getBasedir() + File.separator
                         + element;
                 list.add(new File(pathname));
             }
         }
 
         return list;
     }
 
     /**
      * Poor mans enumeration for the formatter types.
      * @author Oliver Burn
      */
     public static class FormatterType extends EnumeratedAttribute {
         /** My possible values. */
         private static final String[] VALUES = {E_XML, E_PLAIN};
 
         @Override
         public String[] getValues() {
             return VALUES.clone();
         }
     }
 
     /**
      * Details about a formatter to be used.
      * @author Oliver Burn
      */
     public static class Formatter {
         /** The formatter type. */
         private FormatterType type;
         /** The file to output to. */
         private File toFile;
         /** Whether or not the write to the named file. */
         private boolean useFile = true;
