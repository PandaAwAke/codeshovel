diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java b/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
index b3bda025e..3a8fc0563 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
@@ -22,171 +22,171 @@ package com.puppycrawl.tools.checkstyle;
 import java.io.File;
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
 import java.nio.charset.Charset;
 import java.util.List;
 import java.util.Locale;
 import java.util.Set;
 import java.util.SortedSet;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import com.puppycrawl.tools.checkstyle.api.AuditEvent;
 import com.puppycrawl.tools.checkstyle.api.AuditListener;
 import com.puppycrawl.tools.checkstyle.api.AutomaticBean;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.api.Context;
 import com.puppycrawl.tools.checkstyle.api.FileSetCheck;
 import com.puppycrawl.tools.checkstyle.api.FileText;
 import com.puppycrawl.tools.checkstyle.api.Filter;
 import com.puppycrawl.tools.checkstyle.api.FilterSet;
 import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
 import com.puppycrawl.tools.checkstyle.api.MessageDispatcher;
 import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
 import com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter;
 
 /**
  * This class provides the functionality to check a set of files.
  * @author Oliver Burn
  * @author <a href="mailto:stephane.bailliez@wanadoo.fr">Stephane Bailliez</a>
  * @author lkuehne
  */
 public class Checker extends AutomaticBean implements MessageDispatcher {
     /** Logger for Checker */
     private static final Log LOG = LogFactory.getLog(Checker.class);
 
     /** maintains error count */
     private final SeverityLevelCounter counter = new SeverityLevelCounter(
             SeverityLevel.ERROR);
 
     /** vector of listeners */
     private final List<AuditListener> listeners = Lists.newArrayList();
 
     /** vector of fileset checks */
     private final List<FileSetCheck> fileSetChecks = Lists.newArrayList();
 
     /** class loader to resolve classes with. **/
-    private ClassLoader loader = Thread.currentThread()
+    private ClassLoader classLoader = Thread.currentThread()
             .getContextClassLoader();
 
     /** the basedir to strip off in filenames */
     private String basedir;
 
     /** locale country to report messages  **/
     private String localeCountry = Locale.getDefault().getCountry();
     /** locale language to report messages  **/
     private String localeLanguage = Locale.getDefault().getLanguage();
 
     /** The factory for instantiating submodules */
     private ModuleFactory moduleFactory;
 
     /** The classloader used for loading Checkstyle module classes. */
     private ClassLoader moduleClassLoader;
 
     /** the context of all child components */
     private Context childContext;
 
     /** The audit event filters */
     private final FilterSet filters = new FilterSet();
 
     /** the file extensions that are accepted */
     private String[] fileExtensions = {};
 
     /**
      * The severity level of any violations found by submodules.
      * The value of this property is passed to submodules via
      * contextualize().
      *
      * Note: Since the Checker is merely a container for modules
      * it does not make sense to implement logging functionality
      * here. Consequently Checker does not extend AbstractViolationReporter,
      * leading to a bit of duplicated code for severity level setting.
      */
     private SeverityLevel severityLevel = SeverityLevel.ERROR;
 
     /** Name of a charset */
     private String charset = System.getProperty("file.encoding", "UTF-8");
 
     /**
      * Creates a new {@code Checker} instance.
      * The instance needs to be contextualized and configured.
      */
     public Checker() {
         addListener(counter);
     }
 
     @Override
     public void finishLocalSetup() throws CheckstyleException {
         final Locale locale = new Locale(localeLanguage, localeCountry);
         LocalizedMessage.setLocale(locale);
 
         if (moduleFactory == null) {
 
             if (moduleClassLoader == null) {
                 throw new CheckstyleException(
                         "if no custom moduleFactory is set, "
                                 + "moduleClassLoader must be specified");
             }
 
             final Set<String> packageNames = PackageNamesLoader
                     .getPackageNames(moduleClassLoader);
             moduleFactory = new PackageObjectFactory(packageNames,
                     moduleClassLoader);
         }
 
         final DefaultContext context = new DefaultContext();
         context.add("charset", charset);
-        context.add("classLoader", loader);
+        context.add("classLoader", classLoader);
         context.add("moduleFactory", moduleFactory);
         context.add("severity", severityLevel.getName());
         context.add("basedir", basedir);
         childContext = context;
     }
 
     @Override
     protected void setupChild(Configuration childConf)
         throws CheckstyleException {
         final String name = childConf.getName();
         try {
             final Object child = moduleFactory.createModule(name);
             if (child instanceof AutomaticBean) {
                 final AutomaticBean bean = (AutomaticBean) child;
                 bean.contextualize(childContext);
                 bean.configure(childConf);
             }
             if (child instanceof FileSetCheck) {
                 final FileSetCheck fsc = (FileSetCheck) child;
                 fsc.init();
                 addFileSetCheck(fsc);
             }
             else if (child instanceof Filter) {
                 final Filter filter = (Filter) child;
                 addFilter(filter);
             }
             else if (child instanceof AuditListener) {
                 final AuditListener listener = (AuditListener) child;
                 addListener(listener);
             }
             else {
                 throw new CheckstyleException(name
                         + " is not allowed as a child in Checker");
             }
         }
         catch (final Exception ex) {
             throw new CheckstyleException("cannot initialize module " + name
                     + " - " + ex.getMessage(), ex);
         }
     }
 
     /**
      * Adds a FileSetCheck to the list of FileSetChecks
      * that is executed in process().
      * @param fileSetCheck the additional FileSetCheck
      */
     public void addFileSetCheck(FileSetCheck fileSetCheck) {
         fileSetCheck.setMessageDispatcher(this);
         fileSetChecks.add(fileSetCheck);
     }
@@ -368,94 +368,94 @@ public class Checker extends AutomaticBean implements MessageDispatcher {
             return;
         }
 
         fileExtensions = new String[extensions.length];
         for (int i = 0; i < extensions.length; i++) {
             final String extension = extensions[i];
             if (Utils.startsWithChar(extension, '.')) {
                 fileExtensions[i] = extension;
             }
             else {
                 fileExtensions[i] = "." + extension;
             }
         }
     }
 
     /**
      * Sets the factory for creating submodules.
      *
      * @param moduleFactory the factory for creating FileSetChecks
      */
     public void setModuleFactory(ModuleFactory moduleFactory) {
         this.moduleFactory = moduleFactory;
     }
 
     /** @param localeCountry the country to report messages  **/
     public void setLocaleCountry(String localeCountry) {
         this.localeCountry = localeCountry;
     }
 
     /** @param localeLanguage the language to report messages  **/
     public void setLocaleLanguage(String localeLanguage) {
         this.localeLanguage = localeLanguage;
     }
 
     /**
      * Sets the severity level.  The string should be one of the names
      * defined in the {@code SeverityLevel} class.
      *
      * @param severity  The new severity level
      * @see SeverityLevel
      */
     public final void setSeverity(String severity) {
         severityLevel = SeverityLevel.getInstance(severity);
     }
 
     /**
      * Sets the classloader that is used to contextualize filesetchecks.
      * Some Check implementations will use that classloader to improve the
      * quality of their reports, e.g. to load a class and then analyze it via
      * reflection.
-     * @param loader the new classloader
+     * @param classLoader the new classloader
      */
-    public final void setClassLoader(ClassLoader loader) {
-        this.loader = loader;
+    public final void setClassLoader(ClassLoader classLoader) {
+        this.classLoader = classLoader;
     }
 
     /**
      * Sets the classloader that is used to contextualize filesetchecks.
      * Some Check implementations will use that classloader to improve the
      * quality of their reports, e.g. to load a class and then analyze it via
      * reflection.
      * @param loader the new classloader
      * @deprecated use {@link #setClassLoader(ClassLoader loader)} instead.
      */
     @Deprecated
     public final void setClassloader(ClassLoader loader) {
         setClassLoader(loader);
     }
 
     /**
      * Sets the classloader used to load Checkstyle core and custom module
      * classes when the module tree is being built up.
      * If no custom ModuleFactory is being set for the Checker module then
      * this module classloader must be specified.
      * @param moduleClassLoader the classloader used to load module classes
      */
     public final void setModuleClassLoader(ClassLoader moduleClassLoader) {
         this.moduleClassLoader = moduleClassLoader;
     }
 
     /**
      * Sets a named charset.
      * @param charset the name of a charset
      * @throws UnsupportedEncodingException if charset is unsupported.
      */
     public void setCharset(String charset)
         throws UnsupportedEncodingException {
         if (!Charset.isSupported(charset)) {
             final String message = "unsupported charset: '" + charset + "'";
             throw new UnsupportedEncodingException(message);
         }
         this.charset = charset;
     }
 }
