diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheck.java
index b6e19f358..872246262 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheck.java
@@ -31,106 +31,106 @@ import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;
  * contain at-clauses. Javadoc comment that contains at least one at-clause
  * should be formatted in a few lines.<br>
  * All inline at-clauses are ignored by default.
  *
  * <p>
  * The Check has the following properties:
  * <br><b>ignoredTags</b> - allows to specify a list of at-clauses
  * (including custom at-clauses) to be ignored by the check.
  * <br><b>ignoreInlineTags</b> - whether inline at-clauses must be ignored.
  * </p>
  *
  * Default configuration:
  * <pre>
  * &lt;module name=&quot;SingleLineJavadoc&quot;/&gt;
  * </pre>
  * To specify a list of ignored at-clauses and make inline at-clauses not ignored in general:
  * <pre>
  * &lt;module name=&quot;SingleLineJavadoc&quot;&gt;
  *     &lt;property name=&quot;ignoredTags&quot; value=&quot;&#64;inheritDoc, &#64;link&quot;/&gt;
  *     &lt;property name=&quot;ignoreInlineTags&quot; value=&quot;false&quot;/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * @author baratali
  * @author maxvetrenko
  * @author vladlis
  *
  */
 public class SingleLineJavadocCheck extends AbstractJavadocCheck {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "singleline.javadoc";
 
     /**
      * allows to specify a list of tags to be ignored by check.
      */
     private List<String> ignoredTags = new ArrayList<>();
 
     /** whether inline tags must be ignored **/
     private boolean ignoreInlineTags = true;
 
     /**
      * Sets a list of tags to be ignored by check.
      *
      * @param tags to be ignored by check.
      */
     public void setIgnoredTags(String tags) {
-        final List<String> ignoredTags = new ArrayList<>();
+        final List<String> tagList = new ArrayList<>();
         final String[] sTags = tags.split(",");
         for (String sTag : sTags) {
-            ignoredTags.add(sTag.trim());
+            tagList.add(sTag.trim());
         }
-        this.ignoredTags = ignoredTags;
+        this.ignoredTags = tagList;
     }
 
     /**
      * Sets whether inline tags must be ignored.
      *
      * @param ignoreInlineTags whether inline tags must be ignored.
      */
     public void setIgnoreInlineTags(boolean ignoreInlineTags) {
         this.ignoreInlineTags = ignoreInlineTags;
     }
 
     @Override
     public int[] getDefaultJavadocTokens() {
         return new int[] {
             JavadocTokenTypes.JAVADOC,
         };
     }
 
     @Override
     public void visitJavadocToken(DetailNode ast) {
         if (isSingleLineJavadoc(getBlockCommentAst())
                 && (hasJavadocTags(ast) || !ignoreInlineTags && hasJavadocInlineTags(ast))) {
             log(ast.getLineNumber(), "singleline.javadoc");
         }
     }
 
     /**
      * Checks if comment is single line comment.
      *
      * @param blockCommentStart the AST tree in which a block comment starts
      * @return true, if comment is single line comment.
      */
     private static boolean isSingleLineJavadoc(DetailAST blockCommentStart) {
         final DetailAST blockCommentEnd = blockCommentStart.getLastChild();
         return blockCommentStart.getLineNo() == blockCommentEnd.getLineNo();
     }
 
     /**
      * Checks if comment has javadoc tags which are not ignored. Also works
      * on custom tags. As block tags can be interpreted only at the beginning of a line,
      * only the first instance is checked.
      *
      * @param javadocRoot javadoc root node.
      * @return true, if comment has javadoc tags which are not ignored.
      * @see <a href=
      * http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#blockandinlinetags>
      * Block and inline tags</a>
      */
     private boolean hasJavadocTags(DetailNode javadocRoot) {
         final DetailNode javadocTagSection =
