diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java
index 5c45ae6c5..e430f202e 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java
@@ -180,103 +180,102 @@ public final class JavadocUtils
                     // tag!
                 }
             }
             blockTagPattern =
                     Utils.getPattern("^\\s*\\**\\s*@(\\p{Alpha}+)\\s");
         }
         return new JavadocTags(tags, invalidTags);
     }
 
     /**
      * The type of Javadoc tag we want returned.
      */
     public enum JavadocTagType
     {
         /** block type. */
         BLOCK,
         /** inline type. */
         INLINE,
         /** all validTags. */
         ALL;
     }
 
     /**
      * Checks that aCommentContent starts with '*' javadoc comment identifier.
      * @param aCommentContent
      *        content of block comment
      * @return true if aCommentContent starts with '*' javadoc comment
      *         identifier.
      */
     public static boolean isJavadocComment(String aCommentContent)
     {
         boolean result = false;
 
         if (!aCommentContent.isEmpty()) {
             final char docCommentIdentificator = aCommentContent.charAt(0);
             result = docCommentIdentificator == '*';
         }
 
         return result;
     }
 
     /**
      * Checks block comment content starts with '*' javadoc comment identifier.
      * @param aBlockCommentBegin
      *        block comment AST
      * @return true if block comment content starts with '*' javadoc comment
      *         identifier.
      */
     public static boolean isJavadocComment(DetailAST aBlockCommentBegin)
     {
-        final char docCommentIdentificator = getBlockCommentContent(
-                aBlockCommentBegin).charAt(0);
-        return docCommentIdentificator == '*';
+        final String commentContent = getBlockCommentContent(aBlockCommentBegin);
+        return isJavadocComment(commentContent);
     }
 
     /**
      * Gets content of block comment.
      * @param aBlockCommentBegin
      *        block comment AST.
      * @return content of block comment.
      */
     public static String getBlockCommentContent(DetailAST aBlockCommentBegin)
     {
         final DetailAST commentContent = aBlockCommentBegin.getFirstChild();
         return commentContent.getText();
     }
 
     /**
      * Get content of Javadoc comment.
      * @param aJavadocCommentBegin
      *        Javadoc comment AST
      * @return content of Javadoc comment.
      */
     public static String getJavadocCommentContent(DetailAST aJavadocCommentBegin)
     {
         final DetailAST commentContent = aJavadocCommentBegin.getFirstChild();
         return commentContent.getText().substring(1);
     }
 
     /**
      * Returns the first child token that has a specified type.
      * @param aNode
      *        Javadoc AST node
      * @param aType
      *        the token type to match
      * @return the matching token, or null if no match
      */
     public static DetailNode findFirstToken(DetailNode aNode, int aType)
     {
         DetailNode retVal = null;
         for (DetailNode i = getFirstChild(aNode); i != null; i = getNextSibling(i)) {
             if (i.getType() == aType) {
                 retVal = i;
                 break;
             }
         }
         return retVal;
     }
 
     /**
      * Gets first child node of specified node.
      *
      * @param aNode DetailNode
