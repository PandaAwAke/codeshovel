diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/MainFrameModel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/MainFrameModel.java
index a33a61b06..cf7d881f7 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/MainFrameModel.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/MainFrameModel.java
@@ -1,73 +1,74 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2017 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.gui;
 
 import java.io.File;
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Locale;
 
 import antlr.ANTLRException;
 import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.TreeWalker;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FileContents;
 import com.puppycrawl.tools.checkstyle.api.FileText;
 
 /**
  * Model for checkstyle frame.
  * @author Vladislav Lisetskiy
  */
 public class MainFrameModel {
 
     /**
      * Parsing modes which available in GUI.
      */
     public enum ParseMode {
 
         /** Only Java tokens without comments. */
         PLAIN_JAVA("Plain Java"),
 
         /** Java tokens and comment nodes (singleline comments and block comments). */
         JAVA_WITH_COMMENTS("Java with comments"),
 
         /**
          * Java tokens, comments and Javadoc comments nodes
          * (which are parsed from block comments).
          */
         JAVA_WITH_JAVADOC_AND_COMMENTS("Java with comments and Javadocs");
 
         /**
          * Mode's short description.
          */
         private final String description;
 
         /**
          * Provides description.
          * @param descr description
          */
         ParseMode(String descr) {
             description = descr;
         }
 
         @Override
         public String toString() {
@@ -220,53 +221,53 @@ public class MainFrameModel {
                 for (final String element : sourceLines) {
                     linesToPositionTemp.add(sb.length());
                     sb.append(element).append(System.lineSeparator());
                 }
                 linesToPosition = ImmutableList.copyOf(linesToPositionTemp);
                 text = sb.toString();
             }
             catch (IOException | ANTLRException ex) {
                 final String exceptionMsg = String.format(Locale.ROOT,
                     "%s occurred while opening file %s.",
                     ex.getClass().getSimpleName(), file.getPath());
                 throw new CheckstyleException(exceptionMsg, ex);
             }
         }
     }
 
     /**
      * Parse a file and return the parse tree.
      * @param file the file to parse.
      * @return the root node of the parse tree.
      * @throws IOException if the file could not be read.
      * @throws ANTLRException if the file is not a Java source.
      */
     private static DetailAST parseFile(File file) throws IOException, ANTLRException {
         final FileText fileText = getFileText(file);
         final FileContents contents = new FileContents(fileText);
         return TreeWalker.parse(contents);
     }
 
     /**
      * Parse a file and return the parse tree with comment nodes.
      * @param file the file to parse.
      * @return the root node of the parse tree.
      * @throws IOException if the file could not be read.
      * @throws ANTLRException if the file is not a Java source.
      */
     private static DetailAST parseFileWithComments(File file) throws IOException, ANTLRException {
         final FileText fileText = getFileText(file);
         final FileContents contents = new FileContents(fileText);
         return TreeWalker.parseWithComments(contents);
     }
 
     /**
      * Get FileText from a file.
      * @param file the file to get the FileText from.
      * @return the FileText.
      * @throws IOException if the file could not be read.
      */
     private static FileText getFileText(File file) throws IOException {
         return new FileText(file.getAbsoluteFile(),
-                System.getProperty("file.encoding", "UTF-8"));
+                System.getProperty("file.encoding", StandardCharsets.UTF_8.name()));
     }
 }
