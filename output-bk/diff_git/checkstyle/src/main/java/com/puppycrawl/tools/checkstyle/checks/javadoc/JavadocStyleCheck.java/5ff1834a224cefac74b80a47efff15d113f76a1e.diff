diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
index 284107903..5c14f0f1f 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
@@ -52,111 +52,111 @@ public class JavadocStyleCheck
     public static final String JAVADOC_MISSING = "javadoc.missing";
 
     /** Message property key for the Unclosed HTML message. */
     public static final String EMPTY = "javadoc.empty";
 
     /** Message property key for the Unclosed HTML message. */
     public static final String NO_PERIOD = "javadoc.noperiod";
 
     /** Message property key for the Unclosed HTML message. */
     public static final String INCOMPLETE_TAG = "javadoc.incompleteTag";
 
     /** Message property key for the Unclosed HTML message. */
     public static final String UNCLOSED_HTML = "javadoc.unclosedhtml";
 
     /** Message property key for the Extra HTML message. */
     public static final String EXTRA_HTML = "javadoc.extrahtml";
 
     /** HTML tags that do not require a close tag. */
     private static final Set<String> SINGLE_TAGS = ImmutableSortedSet.of(
             "br", "li", "dt", "dd", "hr", "img", "p", "td", "tr", "th");
 
     /** HTML tags that are allowed in java docs.
      * From http://www.w3schools.com/tags/default.asp
      * The froms and structure tags are not allowed
      */
     private static final Set<String> ALLOWED_TAGS = ImmutableSortedSet.of(
             "a", "abbr", "acronym", "address", "area", "b", "bdo", "big",
             "blockquote", "br", "caption", "cite", "code", "colgroup", "dd",
             "del", "div", "dfn", "dl", "dt", "em", "fieldset", "font", "h1",
             "h2", "h3", "h4", "h5", "h6", "hr", "i", "img", "ins", "kbd",
             "li", "ol", "p", "pre", "q", "samp", "small", "span", "strong",
             "style", "sub", "sup", "table", "tbody", "td", "tfoot", "th",
             "thead", "tr", "tt", "u", "ul");
 
     /** The scope to check. */
     private Scope scope = Scope.PRIVATE;
 
     /** the visibility scope where Javadoc comments shouldn't be checked **/
     private Scope excludeScope;
 
     /** Format for matching the end of a sentence. */
     private String endOfSentenceFormat = "([.?!][ \t\n\r\f<])|([.?!]$)";
 
     /** Regular expression for matching the end of a sentence. */
     private Pattern endOfSentencePattern;
 
     /**
      * Indicates if the first sentence should be checked for proper end of
      * sentence punctuation.
      */
-    private boolean checkFirstSentence = true;
+    private boolean checkingFirstSentence = true;
 
     /**
      * Indicates if the HTML within the comment should be checked.
      */
-    private boolean checkHtml = true;
+    private boolean checkingHtml = true;
 
     /**
      * Indicates if empty javadoc statements should be checked.
      */
-    private boolean checkEmptyJavadoc;
+    private boolean checkingEmptyJavadoc;
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.INTERFACE_DEF,
             TokenTypes.CLASS_DEF,
             TokenTypes.ANNOTATION_DEF,
             TokenTypes.ENUM_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.CTOR_DEF,
             TokenTypes.VARIABLE_DEF,
             TokenTypes.ENUM_CONSTANT_DEF,
             TokenTypes.ANNOTATION_FIELD_DEF,
             TokenTypes.PACKAGE_DEF,
         };
     }
 
     @Override
     public int[] getAcceptableTokens()
     {
         return new int[] {
             TokenTypes.INTERFACE_DEF,
             TokenTypes.CLASS_DEF,
             TokenTypes.ANNOTATION_DEF,
             TokenTypes.ENUM_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.CTOR_DEF,
             TokenTypes.VARIABLE_DEF,
             TokenTypes.ENUM_CONSTANT_DEF,
             TokenTypes.ANNOTATION_FIELD_DEF,
             TokenTypes.PACKAGE_DEF,
         };
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
         if (shouldCheck(ast)) {
             final FileContents contents = getFileContents();
             // Need to start searching for the comment before the annotations
             // that may exist. Even if annotations are not defined on the
             // package, the ANNOTATIONS AST is defined.
             final TextBlock cmt =
                 contents.getJavadocBefore(ast.getFirstChild().getLineNo());
 
             checkComment(ast, cmt);
         }
     }
 
@@ -172,109 +172,109 @@ public class JavadocStyleCheck
         }
 
         if (ScopeUtils.inCodeBlock(ast)) {
             return false;
         }
 
         final Scope declaredScope;
         if (ast.getType() == TokenTypes.ENUM_CONSTANT_DEF) {
             declaredScope = Scope.PUBLIC;
         }
         else {
             declaredScope = ScopeUtils.getScopeFromMods(
                 ast.findFirstToken(TokenTypes.MODIFIERS));
         }
 
         final Scope scope =
             ScopeUtils.inInterfaceOrAnnotationBlock(ast)
             ? Scope.PUBLIC : declaredScope;
         final Scope surroundingScope = ScopeUtils.getSurroundingScope(ast);
 
         return scope.isIn(this.scope)
             && (surroundingScope == null || surroundingScope.isIn(this.scope))
             && (excludeScope == null
                 || !scope.isIn(excludeScope)
                 || surroundingScope != null
                 && !surroundingScope.isIn(excludeScope));
     }
 
     /**
      * Performs the various checks agains the Javadoc comment.
      *
      * @param ast the AST of the element being documented
      * @param comment the source lines that make up the Javadoc comment.
      *
      * @see #checkFirstSentence(DetailAST, TextBlock)
      * @see #checkHtml(DetailAST, TextBlock)
      */
     private void checkComment(final DetailAST ast, final TextBlock comment)
     {
         if (comment == null) {
             /*checking for missing docs in JavadocStyleCheck is not consistent
             with the rest of CheckStyle...  Even though, I didn't think it
             made sense to make another csheck just to ensure that the
             package-info.java file actually contains package Javadocs.*/
             if (getFileContents().inPackageInfo()) {
                 log(ast.getLineNo(), JAVADOC_MISSING);
             }
             return;
         }
 
-        if (checkFirstSentence) {
+        if (checkingFirstSentence) {
             checkFirstSentence(ast, comment);
         }
 
-        if (checkHtml) {
+        if (checkingHtml) {
             checkHtml(ast, comment);
         }
 
-        if (checkEmptyJavadoc) {
+        if (checkingEmptyJavadoc) {
             checkEmptyJavadoc(comment);
         }
     }
 
     /**
      * Checks that the first sentence ends with proper punctuation.  This method
      * uses a regular expression that checks for the presence of a period,
      * question mark, or exclamation mark followed either by whitespace, an
      * HTML element, or the end of string. This method ignores {_AT_inheritDoc}
      * comments for TokenTypes that are valid for {_AT_inheritDoc}.
      *
      * @param ast the current node
      * @param comment the source lines that make up the Javadoc comment.
      */
     private void checkFirstSentence(final DetailAST ast, TextBlock comment)
     {
         final String commentText = getCommentText(comment.getText());
 
         if (commentText.length() != 0
             && !getEndOfSentencePattern().matcher(commentText).find()
             && !("{@inheritDoc}".equals(commentText)
             && JavadocTagInfo.INHERIT_DOC.isValidOn(ast)))
         {
             log(comment.getStartLineNo(), NO_PERIOD);
         }
     }
 
     /**
      * Checks that the Javadoc is not empty.
      *
      * @param comment the source lines that make up the Javadoc comment.
      */
     private void checkEmptyJavadoc(TextBlock comment)
     {
         final String commentText = getCommentText(comment.getText());
 
         if (commentText.length() == 0) {
             log(comment.getStartLineNo(), EMPTY);
         }
     }
 
     /**
      * Returns the comment text from the Javadoc.
      * @param comments the lines of Javadoc.
      * @return a comment text String.
      */
     private String getCommentText(String... comments)
     {
         final StringBuffer buffer = new StringBuffer();
         for (final String line : comments) {
@@ -510,71 +510,71 @@ public class JavadocStyleCheck
         return isExtra;
     }
 
     /**
      * Sets the scope to check.
      * @param from string to get the scope from
      */
     public void setScope(String from)
     {
         scope = Scope.getInstance(from);
     }
 
     /**
      * Set the excludeScope.
      * @param scope a <code>String</code> value
      */
     public void setExcludeScope(String scope)
     {
         excludeScope = Scope.getInstance(scope);
     }
 
     /**
      * Set the format for matching the end of a sentence.
      * @param format format for matching the end of a sentence.
      */
     public void setEndOfSentenceFormat(String format)
     {
         endOfSentenceFormat = format;
     }
 
     /**
      * Returns a regular expression for matching the end of a sentence.
      *
      * @return a regular expression for matching the end of a sentence.
      */
     private Pattern getEndOfSentencePattern()
     {
         if (endOfSentencePattern == null) {
             endOfSentencePattern = Pattern.compile(endOfSentenceFormat);
         }
         return endOfSentencePattern;
     }
 
     /**
      * Sets the flag that determines if the first sentence is checked for
      * proper end of sentence punctuation.
      * @param flag <code>true</code> if the first sentence is to be checked
      */
     public void setCheckFirstSentence(boolean flag)
     {
-        checkFirstSentence = flag;
+        checkingFirstSentence = flag;
     }
 
     /**
      * Sets the flag that determines if HTML checking is to be performed.
      * @param flag <code>true</code> if HTML checking is to be performed.
      */
     public void setCheckHtml(boolean flag)
     {
-        checkHtml = flag;
+        checkingHtml = flag;
     }
 
     /**
      * Sets the flag that determines if empty Javadoc checking should be done.
      * @param flag <code>true</code> if empty Javadoc checking should be done.
      */
     public void setCheckEmptyJavadoc(boolean flag)
     {
-        checkEmptyJavadoc = flag;
+        checkingEmptyJavadoc = flag;
     }
 }
