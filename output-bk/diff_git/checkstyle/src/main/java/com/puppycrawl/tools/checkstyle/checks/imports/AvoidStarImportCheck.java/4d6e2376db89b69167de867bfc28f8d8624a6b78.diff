diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java
index 8a5f2a528..fd5465e97 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java
@@ -89,76 +89,76 @@ public class AvoidStarImportCheck
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};
     }
 
     @Override
     public int[] getRequiredTokens() {
         // original implementation checks both IMPORT and STATIC_IMPORT tokens to avoid ".*" imports
         // however user can allow using "import" or "import static"
         // by configuring allowClassImports and allowStaticMemberImports
         // To avoid potential confusion when user specifies conflicting options on configuration
         // (see example below) we are adding both tokens to Required list
         //   <module name="AvoidStarImport">
         //      <property name="tokens" value="IMPORT"/>
         //      <property name="allowStaticMemberImports" value="false"/>
         //   </module>
         return new int[] {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};
     }
 
     /**
      * Sets the list of packages or classes to be exempt from the check.
      * The excludes can contain a .* or not.
      * @param excludesParam a list of package names/fully-qualifies class names
      * where star imports are ok
      */
     public void setExcludes(String... excludesParam) {
         excludes.clear();
         for (final String exclude : excludesParam) {
             excludes.add(exclude.endsWith(".*") ? exclude : exclude + ".*");
         }
     }
 
     /**
      * Sets whether or not to allow all non-static class imports.
      * @param allow true to allow false to disallow
      */
     public void setAllowClassImports(boolean allow) {
         allowClassImports = allow;
     }
 
     /**
      * Sets whether or not to allow all static member imports.
      * @param allow true to allow false to disallow
      */
     public void setAllowStaticMemberImports(boolean allow) {
         allowStaticMemberImports = allow;
     }
 
     @Override
     public void visitToken(final DetailAST ast) {
-        if (!allowClassImports && TokenTypes.IMPORT == ast.getType()) {
+        if (!allowClassImports && ast.getType() == TokenTypes.IMPORT) {
             final DetailAST startingDot = ast.getFirstChild();
             logsStarredImportViolation(startingDot);
         }
         else if (!allowStaticMemberImports
-            && TokenTypes.STATIC_IMPORT == ast.getType()) {
+            && ast.getType() == TokenTypes.STATIC_IMPORT) {
             // must navigate past the static keyword
             final DetailAST startingDot = ast.getFirstChild().getNextSibling();
             logsStarredImportViolation(startingDot);
         }
     }
 
     /**
      * Gets the full import identifier.  If the import is a starred import and
      * it's not excluded then a violation is logged.
      * @param startingDot the starting dot for the import statement
      */
     private void logsStarredImportViolation(DetailAST startingDot) {
         final FullIdent name = FullIdent.createFullIdent(startingDot);
         final String importText = name.getText();
         if (importText.endsWith(".*") && !excludes.contains(importText)) {
             log(startingDot.getLineNo(), MSG_KEY, importText);
         }
     }
 
 }
