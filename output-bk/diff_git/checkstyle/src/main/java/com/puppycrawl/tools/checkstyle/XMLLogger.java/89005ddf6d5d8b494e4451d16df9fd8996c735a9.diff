diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java b/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java
index 6c1544129..57b6be69d 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java
@@ -84,101 +84,101 @@ public class XMLLogger
             // unlikely to happen...
             throw new ExceptionInInitializerError(e);
         }
     }
 
     /** {@inheritDoc} */
     @Override
     public void auditStarted(AuditEvent evt)
     {
         writer.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
 
         final ResourceBundle compilationProperties =
             ResourceBundle.getBundle("checkstylecompilation");
         final String version =
             compilationProperties.getString("checkstyle.compile.version");
 
         writer.println("<checkstyle version=\"" + version + "\">");
     }
 
     /** {@inheritDoc} */
     @Override
     public void auditFinished(AuditEvent evt)
     {
         writer.println("</checkstyle>");
         if (closeStream) {
             writer.close();
         }
         else {
             writer.flush();
         }
     }
 
     /** {@inheritDoc} */
     @Override
     public void fileStarted(AuditEvent evt)
     {
         writer.println("<file name=\"" + encode(evt.getFileName()) + "\">");
     }
 
     /** {@inheritDoc} */
     @Override
     public void fileFinished(AuditEvent evt)
     {
         writer.println("</file>");
     }
 
     /** {@inheritDoc} */
     @Override
     public void addError(AuditEvent evt)
     {
-        if (!SeverityLevel.IGNORE.equals(evt.getSeverityLevel())) {
+        if (SeverityLevel.IGNORE != evt.getSeverityLevel()) {
             writer.print("<error" + " line=\"" + evt.getLine() + "\"");
             if (evt.getColumn() > 0) {
                 writer.print(" column=\"" + evt.getColumn() + "\"");
             }
             writer.print(" severity=\""
                 + evt.getSeverityLevel().getName()
                 + "\"");
             writer.print(" message=\""
                 + encode(evt.getMessage())
                 + "\"");
             writer.println(" source=\""
                 + encode(evt.getSourceName())
                 + "\"/>");
         }
     }
 
     /** {@inheritDoc} */
     @Override
     public void addException(AuditEvent evt, Throwable throwable)
     {
         final StringWriter sw = new StringWriter();
         final PrintWriter pw = new PrintWriter(sw);
         pw.println("<exception>");
         pw.println("<![CDATA[");
         throwable.printStackTrace(pw);
         pw.println("]]>");
         pw.println("</exception>");
         pw.flush();
         writer.println(encode(sw.toString()));
     }
 
     /**
      * Escape &lt;, &gt; &amp; &#39; and &quot; as their entities.
      * @param value the value to escape.
      * @return the escaped value if necessary.
      */
     public String encode(String value)
     {
         final StringBuilder sb = new StringBuilder();
         for (int i = 0; i < value.length(); i++) {
             final char c = value.charAt(i);
             switch (c) {
                 case '<':
                     sb.append("&lt;");
                     break;
                 case '>':
                     sb.append("&gt;");
                     break;
                 case '\'':
                     sb.append("&apos;");
