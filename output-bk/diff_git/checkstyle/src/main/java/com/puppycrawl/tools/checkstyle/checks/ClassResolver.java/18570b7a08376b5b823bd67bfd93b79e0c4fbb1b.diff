diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java
index 7b5865e16..13818f1f7 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java
@@ -112,99 +112,100 @@ public class ClassResolver {
 
     /**
      * see if inner class of this class
      * @param name name of the search Class to search
      * @param currentClass class where search in
      * @return class if found , or null if not resolved
      * @throws ClassNotFoundException  if an error occurs
      */
     private Class<?> resolveInnerClass(String name, String currentClass)
             throws ClassNotFoundException {
         Class<?> clazz = null;
         if (!"".equals(currentClass)) {
             final String innerClass = (!"".equals(pkg) ? pkg + "." : "")
                 + currentClass + "$" + name;
             if (isLoadable(innerClass)) {
                 clazz = safeLoad(innerClass);
             }
         }
         return clazz;
     }
 
     /**
      * try star imports
      * @param name name of the Class to search
      * @return  class if found , or null if not resolved
      */
     private Class<?> resolveByStarImports(String name) {
         Class<?> clazz = null;
         for (String imp : imports) {
             if (imp.endsWith(".*")) {
                 final String fqn = imp.substring(0, imp.lastIndexOf('.') + 1)
                     + name;
                 clazz = resolveQualifiedName(fqn);
                 if (clazz != null) {
                     break;
                 }
             }
         }
         return clazz;
     }
 
     /**
      * @param name name of the class to check
      * @return whether a specified class is loadable with safeLoad().
      */
     public boolean isLoadable(String name) {
         try {
             safeLoad(name);
             return true;
         }
-        catch (final ClassNotFoundException e) {
+        catch (final ClassNotFoundException | NoClassDefFoundError e) {
             return false;
         }
     }
 
     /**
      * Will load a specified class is such a way that it will NOT be
      * initialised.
      * @param name name of the class to load
      * @return the <code>Class</code> for the specified class
      * @throws ClassNotFoundException if an error occurs
+     * @throws NoClassDefFoundError if an error occurs
      */
     public Class<?> safeLoad(String name)
-        throws ClassNotFoundException {
+        throws ClassNotFoundException, NoClassDefFoundError {
         // The next line will load the class using the specified class
         // loader. The magic is having the "false" parameter. This means the
         // class will not be initialised. Very, very important.
         return Class.forName(name, false, loader);
     }
 
     /**
      * Tries to resolve a class for fully-specified name.
      * @param name a given name of class.
      * @return Class object for the given name or null.
      */
     private Class<?> resolveQualifiedName(final String name) {
         try {
             if (isLoadable(name)) {
                 return safeLoad(name);
             }
             //Perhaps it's fully-qualified inner class
             final int dot = name.lastIndexOf('.');
             if (dot != -1) {
                 final String innerName =
                     name.substring(0, dot) + "$" + name.substring(dot + 1);
                 if (isLoadable(innerName)) {
                     return safeLoad(innerName);
                 }
             }
         }
         catch (final ClassNotFoundException ex) {
             // we shouldn't get this exception here,
             // so this is unexpected runtime exception
             throw new RuntimeException(ex);
         }
 
         return null;
     }
 }
