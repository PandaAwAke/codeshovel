diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java
index 71008c6ad..9cdf8c370 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java
@@ -331,135 +331,135 @@ public class CustomImportOrderCheck extends Check
             TokenTypes.PACKAGE_DEF,
         };
     }
 
     @Override
     public int[] getAcceptableTokens()
     {
         return new int[] {
             TokenTypes.IMPORT,
             TokenTypes.STATIC_IMPORT,
             TokenTypes.PACKAGE_DEF,
         };
     }
 
     @Override
     public void beginTree(DetailAST rootAST)
     {
         importToGroupList.clear();
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
         if (ast.getType() == TokenTypes.PACKAGE_DEF) {
             if (customImportOrderRules.contains(SAME_PACKAGE_RULE_GROUP)
                     && samePackageMatchingDepth != -1)
             {
                 samePackageDomainsRegExp = createSamePackageRegexp(
                         samePackageMatchingDepth, ast);
             }
         }
         else {
             final String importFullPath = getFullImportIdent(ast);
             final int lineNo = ast.getLineNo();
             final boolean isStatic = ast.getType() == TokenTypes.STATIC_IMPORT;
             importToGroupList.add(new ImportDetails(importFullPath,
                     lineNo, getImportGroup(isStatic, importFullPath),
                     isStatic));
         }
     }
 
     @Override
     public void finishTree(DetailAST rootAST)
     {
 
         if (importToGroupList.isEmpty()) {
             return;
         }
 
         final ImportDetails firstImport = importToGroupList.get(0);
-        String currentGroup = getImportGroup(firstImport.isStatic(),
+        String currentGroup = getImportGroup(firstImport.isStaticImport(),
                 firstImport.getImportFullPath());
         int groupNumber = customImportOrderRules.indexOf(currentGroup);
         String previousImport = null;
 
         for (ImportDetails importObject : importToGroupList) {
             final String importGroup = importObject.getImportGroup();
             final String fullImportIdent = importObject.importFullPath;
 
             if (!importGroup.equals(currentGroup)) {
                 if (customImportOrderRules.size() > groupNumber + 1) {
                     final String nextGroup = getNextImportGroup(groupNumber + 1);
                     if (importGroup.equals(nextGroup)) {
                         if (separateLineBetweenGroups && previousImport != null
                                 && !hasEmptyLineBefore(importObject.getLineNumber()))
                         {
                             log(importObject.getLineNumber(), MSG_LINE_SEPARATOR,
                                     fullImportIdent);
                         }
                         currentGroup = nextGroup;
                         groupNumber = customImportOrderRules.indexOf(nextGroup);
                     }
                     else {
                         logWrongImportGroupOrder(importObject.getLineNumber(),
                                 importGroup);
                     }
                 }
                 else {
                     logWrongImportGroupOrder(importObject.getLineNumber(),
                             importGroup);
                 }
             }
             else if (sortImportsInGroupAlphabetically
                     && previousImport != null
-                    && matchesImportGroup(importObject.isStatic(),
+                    && matchesImportGroup(importObject.isStaticImport(),
                             fullImportIdent, currentGroup)
                     && compareImports(fullImportIdent, previousImport) < 0)
             {
                 log(importObject.getLineNumber(), MSG_LEX, fullImportIdent);
             }
             previousImport = fullImportIdent;
         }
     }
 
     /**
      * Log wrong import group order.
      * @param currentImportLine
      *        line number of current import current import.
      * @param importGroup
      *        import group.
      */
     private void logWrongImportGroupOrder(int currentImportLine, String importGroup)
     {
         if (NON_GROUP_RULE_GROUP.equals(importGroup)) {
             log(currentImportLine, MSG_NONGROUP_IMPORT);
         }
         else {
             log(currentImportLine, MSG_ORDER, importGroup);
         }
     }
 
     /**
      * Get next import group.
      * @param currentGroupNumber
      *        current group number.
      * @return
      *        next import group.
      */
     private String getNextImportGroup(int currentGroupNumber)
     {
         int nextGroupNumber = currentGroupNumber;
 
         while (customImportOrderRules.size() > nextGroupNumber + 1) {
             if (hasAnyImportInCurrentGroup(customImportOrderRules.get(nextGroupNumber)))
             {
                 break;
             }
             nextGroupNumber++;
         }
         return customImportOrderRules.get(nextGroupNumber);
     }
 
     /**
      * Checks if current group contains any import.
      * @param currentGroup
@@ -679,148 +679,148 @@ public class CustomImportOrderCheck extends Check
                 samePackageDomainsRegExp = rule;
             }
             customImportOrderRules.add(SAME_PACKAGE_RULE_GROUP);
 
         }
         else {
             throw new RuntimeException("Unexpected rule: " + ruleStr);
         }
     }
 
     /**
      * Creates samePackageDomainsRegExp of the first package domains.
      * @param firstPackageDomainsCount
      *        number of first package domains.
      * @param packageNode
      *        package node.
      * @return same package regexp.
      */
     private static String createSamePackageRegexp(int firstPackageDomainsCount,
              DetailAST packageNode)
     {
         final StringBuilder builder = new StringBuilder();
         final String packageFullPath = getFullImportIdent(packageNode);
         final StringTokenizer tokens = new StringTokenizer(packageFullPath, ".");
         int count = firstPackageDomainsCount;
 
         while (tokens.hasMoreTokens() && count > 0) {
             builder.append(tokens.nextToken()).append('.');
             count--;
         }
         return builder.append("*").toString();
     }
 
     /**
      * Contains import attributes as line number, import full path, import
      * group.
      * @author max
      */
     static class ImportDetails
     {
         /** Import full path */
         private String importFullPath;
 
         /** Import line number */
         private int lineNumber;
 
         /** Import group */
         private String importGroup;
 
         /** Is static import */
-        private boolean isStatic;
+        private boolean staticImport;
 
         /**
          * @param importFullPath
          *        import full path.
          * @param lineNumber
          *        import line number.
          * @param importGroup
          *        import group.
-         * @param isStatic
+         * @param staticImport
          *        if import is static.
          */
         public ImportDetails(String importFullPath,
-                int lineNumber, String importGroup, boolean isStatic)
+                int lineNumber, String importGroup, boolean staticImport)
         {
             setImportFullPath(importFullPath);
             setLineNumber(lineNumber);
             setImportGroup(importGroup);
-            setStatic(isStatic);
+            setStaticImport(staticImport);
         }
 
         /**
          * Get import full path variable.
          * @return import full path variable.
          */
         public String getImportFullPath()
         {
             return importFullPath;
         }
 
         /**
          * Set import full path variable.
          * @param importFullPath
          *        import full path variable.
          */
         public void setImportFullPath(String importFullPath)
         {
             this.importFullPath = importFullPath;
         }
 
         /**
          * Get import line number.
          * @return import line.
          */
         public int getLineNumber()
         {
             return lineNumber;
         }
 
         /**
          * Set import line number.
          * @param lineNumber
          *        import line number.
          */
         public void setLineNumber(int lineNumber)
         {
             this.lineNumber = lineNumber;
         }
 
         /**
          * Get import group.
          * @return import group.
          */
         public String getImportGroup()
         {
             return importGroup;
         }
 
         /**
          * Set import group.
          * @param importGroup
          *        import group.
          */
         public void setImportGroup(String importGroup)
         {
             this.importGroup = importGroup;
         }
 
         /**
          * Checks if import is static.
          * @return true, if import is static.
          */
-        public boolean isStatic()
+        public boolean isStaticImport()
         {
-            return isStatic;
+            return staticImport;
         }
 
         /**
          * Set true, if import is static
          * @param isStatic
          *        if import is static.
          */
-        public void setStatic(boolean isStatic)
+        public void setStaticImport(boolean isStatic)
         {
-            this.isStatic = isStatic;
+            this.staticImport = isStatic;
         }
     }
 }
