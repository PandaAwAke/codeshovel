diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
index b02776111..e98392380 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
@@ -1,79 +1,80 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2002  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.gui;
 
 import java.awt.BorderLayout;
 import java.awt.Component;
 import java.awt.GridLayout;
 import java.awt.event.ActionEvent;
 import java.awt.event.KeyEvent;
 import java.io.File;
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 import java.util.TooManyListenersException;
 
 import javax.swing.AbstractAction;
 import javax.swing.Action;
 import javax.swing.JButton;
 import javax.swing.JFileChooser;
 import javax.swing.JOptionPane;
 import javax.swing.JPanel;
 import javax.swing.JScrollPane;
 import javax.swing.JTextArea;
 import javax.swing.SwingUtilities;
 import javax.swing.filechooser.FileFilter;
 
 import antlr.ANTLRException;
 
 import com.puppycrawl.tools.checkstyle.TreeWalker;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FileContents;
 import com.puppycrawl.tools.checkstyle.api.FileText;
 
 /**
  * Displays information about a parse tree.
  * The user can change the file that is parsed and displayed
  * through a JFileChooser.
  *
  * @author Lars KÃ¼hne
  */
 public class ParseTreeInfoPanel extends JPanel {
     /** For Serialisation that will never happen. */
     private static final long serialVersionUID = -4243405131202059043L;
 
     private final transient ParseTreeModel parseTreeModel;
     private final JTextArea jTextArea;
     private File lastDirectory;
     private File currentFile;
     private final Action reloadAction;
     private final List<Integer>   lines2position  = new ArrayList<>();
 
     /**
      * Create a new ParseTreeInfoPanel instance.
      */
     public ParseTreeInfoPanel() {
         setLayout(new BorderLayout());
 
         parseTreeModel = new ParseTreeModel(null);
         final JTreeTable treeTable = new JTreeTable(parseTreeModel);
         final JScrollPane sp = new JScrollPane(treeTable);
         add(sp, BorderLayout.NORTH);
 
@@ -166,101 +167,101 @@ public class ParseTreeInfoPanel extends JPanel {
             catch (final IOException | ANTLRException ex) {
                 showErrorDialog(
                         parent,
                         "Could not parse" + file + ": " + ex.getMessage());
             }
         }
     }
 
     /**
      * Parses a file and returns the parse tree.
      * @param fileName the file to parse
      * @return the root node of the parse tree
      * @throws IOException if the file cannot be opened
      * @throws ANTLRException if the file is not a Java source
      * @deprecated Use {@link #parseFile(FileText)} instead
      */
     @Deprecated
     public static DetailAST parseFile(String fileName)
         throws IOException, ANTLRException {
         return parseFile(new FileText(new File(fileName), getEncoding()));
     }
 
     /**
      * Parses a file and returns the parse tree.
      * @param text the file to parse
      * @return the root node of the parse tree
      * @throws ANTLRException if the file is not a Java source
      */
     public static DetailAST parseFile(FileText text)
         throws ANTLRException {
         final FileContents contents = new FileContents(text);
         return TreeWalker.parse(contents);
     }
 
     /**
      * Returns the configured file encoding.
      * This can be set using the {@code file.encoding} system property.
      * It defaults to UTF-8.
      * @return the configured file encoding
      */
     private static String getEncoding() {
         return System.getProperty("file.encoding", "UTF-8");
     }
 
     private static void showErrorDialog(final Component parent, final String msg) {
         final Runnable showError = new FrameShower(parent, msg);
         SwingUtilities.invokeLater(showError);
     }
 
     public List<Integer> getLines2position() {
-        return lines2position;
+        return Collections.unmodifiableList(lines2position);
     }
 
     /**
      * http://findbugs.sourceforge.net/bugDescriptions.html#SW_SWING_METHODS_INVOKED_IN_SWING_THREAD
      */
     private static class FrameShower implements Runnable {
         /**
          * frame
          */
         private final Component parent;
 
         /**
          * frame
          */
         private final String msg;
 
         /**
          * contstructor
          */
         public FrameShower(Component parent, final String msg) {
             this.parent = parent;
             this.msg = msg;
         }
 
         /**
          * display a frame
          */
         @Override
         public void run() {
             JOptionPane.showMessageDialog(parent, msg);
         }
     }
 
     private static class JavaFileFilter extends FileFilter {
         @Override
         public boolean accept(File file) {
             if (file == null) {
                 return false;
             }
             return file.isDirectory() || file.getName().endsWith(".java");
         }
 
         @Override
         public String getDescription() {
             return "Java Source Code";
         }
     }
 
     private class FileSelectionAction extends AbstractAction {
         /**
