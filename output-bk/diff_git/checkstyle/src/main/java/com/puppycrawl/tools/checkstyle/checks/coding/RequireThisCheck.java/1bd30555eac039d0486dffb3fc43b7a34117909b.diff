diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java
index 8e099f92e..8352bbf3f 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java
@@ -141,81 +141,81 @@ public class RequireThisCheck extends DeclarationCollector
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
         super.visitToken(ast);
         if (ast.getType() == TokenTypes.IDENT) {
             processIDENT(ast);
         }
     }
 
     /**
      * Checks if a given IDENT is method call or field name which
      * require explicit <code>this</code> qualifier.
      *
      * @param ast IDENT to check.
      */
     private void processIDENT(DetailAST ast)
     {
         final int parentType = ast.getParent().getType();
 
         if (parentType == TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR
             || parentType == TokenTypes.ANNOTATION
             || parentType == TokenTypes.ANNOTATION_FIELD_DEF)
         {
             //cannot refer to 'this' from annotations
             return;
         }
 
         // let's check method calls
         if (parentType == TokenTypes.METHOD_CALL) {
             if (checkMethods && isClassMethod(ast.getText())) {
                 log(ast, "require.this.method", ast.getText());
             }
             return;
         }
 
         // let's check fields
         if (!checkFields) {
             // we shouldn't check fields
             return;
         }
 
         if (ScopeUtils.getSurroundingScope(ast) == null) {
             // it is not a class or interface it's
             // either import or package
             // we shouldn't checks this
             return;
         }
 
-        if ((parentType == TokenTypes.DOT)
-            && (ast.getPreviousSibling() != null))
+        if (parentType == TokenTypes.DOT
+            && ast.getPreviousSibling() != null)
         {
             // it's the method name in a method call; no problem
             return;
         }
-        if ((parentType == TokenTypes.TYPE)
-            || (parentType == TokenTypes.LITERAL_NEW))
+        if (parentType == TokenTypes.TYPE
+            || parentType == TokenTypes.LITERAL_NEW)
         {
             // it's a type name; no problem
             return;
         }
-        if ((parentType == TokenTypes.VARIABLE_DEF)
-            || (parentType == TokenTypes.CTOR_DEF)
-            || (parentType == TokenTypes.METHOD_DEF)
-            || (parentType == TokenTypes.CLASS_DEF)
-            || (parentType == TokenTypes.ENUM_DEF)
-            || (parentType == TokenTypes.INTERFACE_DEF)
-            || (parentType == TokenTypes.PARAMETER_DEF)
-            || (parentType == TokenTypes.TYPE_ARGUMENT))
+        if (parentType == TokenTypes.VARIABLE_DEF
+            || parentType == TokenTypes.CTOR_DEF
+            || parentType == TokenTypes.METHOD_DEF
+            || parentType == TokenTypes.CLASS_DEF
+            || parentType == TokenTypes.ENUM_DEF
+            || parentType == TokenTypes.INTERFACE_DEF
+            || parentType == TokenTypes.PARAMETER_DEF
+            || parentType == TokenTypes.TYPE_ARGUMENT)
         {
             // it's being declared; no problem
             return;
         }
 
         final String name = ast.getText();
         if (isClassField(name)) {
             log(ast, "require.this.variable", name);
         }
     }
 }
