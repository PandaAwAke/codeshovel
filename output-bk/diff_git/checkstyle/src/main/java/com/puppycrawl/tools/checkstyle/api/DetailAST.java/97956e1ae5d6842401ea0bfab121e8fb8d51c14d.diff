diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
index cb6637380..cfaaccc1c 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
@@ -51,193 +51,185 @@ public final class DetailAST extends CommonASTWithHiddenTokens {
     /** Number of children */
     private int childCount = NOT_INITIALIZED;
     /** The parent token */
     private DetailAST parent;
     /** Previous sibling */
     private DetailAST previousSibling;
 
     /**
      * All token types in this branch.
      * Token 'x' (where x is an int) is in this branch
      * if branchTokenTypes.get(x) is true.
      */
     private BitSet branchTokenTypes;
 
     @Override
     public void initialize(Token tok) {
         super.initialize(tok);
         lineNo = tok.getLine();
 
         // expect columns to start @ 0
         columnNo = tok.getColumn() - 1;
     }
 
     @Override
     public void initialize(AST ast) {
         final DetailAST da = (DetailAST) ast;
         setText(da.getText());
         setType(da.getType());
         lineNo = da.getLineNo();
         columnNo = da.getColumnNo();
         hiddenAfter = da.getHiddenAfter();
         hiddenBefore = da.getHiddenBefore();
     }
 
     @Override
     public void setFirstChild(AST ast) {
         childCount = NOT_INITIALIZED;
         super.setFirstChild(ast);
         if (ast != null) {
             ((DetailAST) ast).setParent(this);
         }
     }
 
     @Override
     public void setNextSibling(AST ast) {
         super.setNextSibling(ast);
         if (ast != null && parent != null) {
             ((DetailAST) ast).setParent(parent);
         }
         if (ast != null) {
-            ((DetailAST) ast).setPreviousSibling(this);
+            ((DetailAST) ast).previousSibling = this;
         }
     }
 
     /**
      * Add previous sibling.
      * @param ast
      *        DetailAST object.
      */
     public void addPreviousSibling(DetailAST ast) {
         if (ast != null) {
             ast.setParent(parent);
             final DetailAST previousSiblingNode = getPreviousSibling();
 
             if (previousSiblingNode != null) {
-                ast.setPreviousSibling(previousSiblingNode);
+                ast.previousSibling = previousSiblingNode;
                 previousSiblingNode.setNextSibling(ast);
             }
             else if (parent != null) {
                 parent.setFirstChild(ast);
             }
 
             ast.setNextSibling(this);
-            setPreviousSibling(ast);
+            previousSibling = ast;
         }
     }
 
     /**
      * Add next sibling.
      * @param ast
      *        DetailAST object.
      */
     public void addNextSibling(DetailAST ast) {
         if (ast != null) {
             ast.setParent(parent);
             final DetailAST nextSibling = getNextSibling();
 
             if (nextSibling != null) {
                 ast.setNextSibling(nextSibling);
-                nextSibling.setPreviousSibling(ast);
+                nextSibling.previousSibling = ast;
             }
 
-            ast.setPreviousSibling(this);
+            ast.previousSibling = this;
             setNextSibling(ast);
         }
     }
 
-    /**
-     * Sets previous sibling.
-     * @param ast a previous sibling
-     */
-    void setPreviousSibling(DetailAST ast) {
-        previousSibling = ast;
-    }
-
     @Override
     public void addChild(AST ast) {
         super.addChild(ast);
         if (ast != null) {
             ((DetailAST) ast).setParent(this);
             getFirstChild().setParent(this);
         }
     }
 
     /**
      * Returns the number of child nodes one level below this node. That is is
      * does not recurse down the tree.
      * @return the number of child nodes
      */
     public int getChildCount() {
         // lazy init
         if (childCount == NOT_INITIALIZED) {
             childCount = 0;
             AST child = getFirstChild();
 
             while (child != null) {
                 childCount += 1;
                 child = child.getNextSibling();
             }
         }
         return childCount;
     }
 
     /**
      * Set the parent token.
      * @param parent the parent token
      */
     void setParent(DetailAST parent) {
         this.parent = parent;
         final DetailAST nextSibling = getNextSibling();
         if (nextSibling != null) {
             nextSibling.setParent(parent);
-            nextSibling.setPreviousSibling(this);
+            nextSibling.previousSibling = this;
         }
     }
 
     /**
      * Returns the parent token.
      * @return the parent token
      */
     public DetailAST getParent() {
         return parent;
     }
 
     /** @return the line number **/
     public int getLineNo() {
         if (lineNo == NOT_INITIALIZED) {
             // an inner AST that has been initialized
             // with initialize(String text)
             DetailAST child = getFirstChild();
             while (child != null) {
                 // comment node can't be start of any java statement/definition
                 if (Utils.isCommentType(child.getType())) {
                     child = child.getNextSibling();
                 }
                 else {
                     return child.getLineNo();
                 }
             }
 
             DetailAST sibling = getNextSibling();
             while (sibling != null) {
                 // comment node can't be start of any java statement/definition
                 if (Utils.isCommentType(sibling.getType())) {
                     sibling = sibling.getNextSibling();
                 }
                 else {
                     return sibling.getLineNo();
                 }
             }
         }
         return lineNo;
     }
 
     /**
      * Set line number.
      * @param lineNo
      *        line number.
      */
     public void setLineNo(int lineNo) {
         this.lineNo = lineNo;
     }
 
