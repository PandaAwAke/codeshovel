diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
index e2c96318d..4c5cf4efd 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
@@ -50,101 +50,101 @@ public final class PackageNamesLoader
     /** The public ID for the configuration dtd. */
     private static final String DTD_PUBLIC_ID =
         "-//Puppy Crawl//DTD Package Names 1.0//EN";
 
     /** The resource for the configuration dtd. */
     private static final String DTD_RESOURCE_NAME =
         "com/puppycrawl/tools/checkstyle/packages_1_0.dtd";
 
     /** Name of default checkstyle package names resource file.
      * The file must be in the classpath.
      */
     private static final String CHECKSTYLE_PACKAGES =
         "checkstyle_packages.xml";
 
     /** Qualified name for element 'package'. */
     private static final String PACKAGE_ELEMENT_NAME = "package";
 
     /** The temporary stack of package name parts. */
     private final Deque<String> packageStack = new ArrayDeque<>();
 
     /** The fully qualified package names. */
     private final Set<String> packageNames = new LinkedHashSet<>();
 
     /**
      * Creates a new {@code PackageNamesLoader} instance.
      * @throws ParserConfigurationException if an error occurs
      * @throws SAXException if an error occurs
      */
     private PackageNamesLoader()
             throws ParserConfigurationException, SAXException {
         super(DTD_PUBLIC_ID, DTD_RESOURCE_NAME);
     }
 
     @Override
     public void startElement(String uri,
                              String localName,
                              String qName,
                              Attributes attributes) {
         if (PACKAGE_ELEMENT_NAME.equals(qName)) {
             //push package name, name is mandatory attribute with not empty value by DTD
             final String name = attributes.getValue("name");
             packageStack.push(name);
         }
     }
 
     /**
      * Creates a full package name from the package names on the stack.
      * @return the full name of the current package.
      */
     private String getPackageName() {
-        final StringBuilder buf = new StringBuilder();
+        final StringBuilder buf = new StringBuilder(256);
         final Iterator<String> iterator = packageStack.descendingIterator();
         while (iterator.hasNext()) {
             final String subPackage = iterator.next();
             buf.append(subPackage);
             if (!CommonUtils.endsWithChar(subPackage, '.') && iterator.hasNext()) {
                 buf.append('.');
             }
         }
         return buf.toString();
     }
 
     @Override
     public void endElement(String uri,
                            String localName,
                            String qName) {
         if (PACKAGE_ELEMENT_NAME.equals(qName)) {
 
             packageNames.add(getPackageName());
             packageStack.pop();
         }
     }
 
     /**
      * Returns the set of package names, compiled from all
      * checkstyle_packages.xml files found on the given class loaders
      * classpath.
      * @param classLoader the class loader for loading the
      *          checkstyle_packages.xml files.
      * @return the set of package names.
      * @throws CheckstyleException if an error occurs.
      */
     public static Set<String> getPackageNames(ClassLoader classLoader)
             throws CheckstyleException {
 
         final Set<String> result;
         try {
             //create the loader outside the loop to prevent PackageObjectFactory
             //being created anew for each file
             final PackageNamesLoader namesLoader = new PackageNamesLoader();
 
             final Enumeration<URL> packageFiles = classLoader.getResources(CHECKSTYLE_PACKAGES);
 
             while (packageFiles.hasMoreElements()) {
                 processFile(packageFiles.nextElement(), namesLoader);
             }
 
             result = namesLoader.packageNames;
         }
         catch (IOException ex) {
             throw new CheckstyleException("unable to get package file resources", ex);
