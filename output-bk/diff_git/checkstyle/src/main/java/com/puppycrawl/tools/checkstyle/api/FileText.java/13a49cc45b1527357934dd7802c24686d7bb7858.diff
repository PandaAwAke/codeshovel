diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java
index 26c49fcff..a9c91aeac 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java
@@ -143,101 +143,101 @@ public final class FileText extends AbstractList<String> {
                 break;
             }
             textLines.add(line);
         }
         lines = textLines.toArray(new String[textLines.size()]);
     }
 
     /**
      * Compatibility constructor.
      *
      * This constructor reconstructs the text of the file by joining
      * lines with linefeed characters. This process does not restore
      * the original line terminators and should therefore be avoided.
      *
      * @param file the name of the file
      * @param lines the lines of the text, without terminators
      * @throws NullPointerException if the lines array is null
      */
     private FileText(File file, List<String> lines) {
         final StringBuilder buf = new StringBuilder();
         for (final String line : lines) {
             buf.append(line).append('\n');
         }
         buf.trimToSize();
 
         this.file = file;
         charset = null;
         fullText = buf.toString();
         this.lines = lines.toArray(new String[lines.size()]);
     }
 
     /**
      * Copy constructor.
      * @param fileText to make copy of
      */
     public FileText(FileText fileText) {
         file = fileText.file;
         charset = fileText.charset;
         fullText = fileText.fullText;
         lines = fileText.lines.clone();
         lineBreaks = ArrayUtils.clone(fileText.lineBreaks);
     }
 
     /**
      * Reads file using specific decoder and returns all its content as a String.
      * @param inputFile File to read
      * @param decoder Charset decoder
      * @return File's text
      * @throws IOException Unable to open or read the file
      */
-    private String readFile(final File inputFile, final CharsetDecoder decoder)
+    private static String readFile(final File inputFile, final CharsetDecoder decoder)
             throws IOException {
         final StringBuilder buf = new StringBuilder();
         final FileInputStream stream = new FileInputStream(inputFile);
         final Reader reader = new InputStreamReader(stream, decoder);
         try {
             final char[] chars = new char[READ_BUFFER_SIZE];
             while (true) {
                 final int len = reader.read(chars);
                 if (len < 0) {
                     break;
                 }
                 buf.append(chars, 0, len);
             }
         }
         finally {
             Closeables.closeQuietly(reader);
         }
         return buf.toString();
     }
 
     /**
      * Compatibility conversion.
      *
      * This method can be used to convert the arguments passed to
      * {@link FileSetCheck#process(File,List)} to a FileText
      * object. If the list of lines already is a FileText, it is
      * returned as is. Otherwise, a new FileText is constructed by
      * joining the lines using line feed characters.
      *
      * @param file the name of the file
      * @param lines the lines of the text, without terminators
      * @return an object representing the denoted text file
      */
     public static FileText fromLines(File file, List<String> lines) {
         if (lines instanceof FileText) {
             return (FileText) lines;
         }
         else {
             return new FileText(file, lines);
         }
     }
 
     /**
      * Get the name of the file.
      * @return an object containing the name of the file
      */
     public File getFile() {
         return file;
     }
 
