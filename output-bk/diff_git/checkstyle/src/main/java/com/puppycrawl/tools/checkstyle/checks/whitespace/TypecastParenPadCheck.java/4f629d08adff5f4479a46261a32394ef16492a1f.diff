diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/TypecastParenPadCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/TypecastParenPadCheck.java
index 6b0deea71..e8f7c75ed 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/TypecastParenPadCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/TypecastParenPadCheck.java
@@ -24,58 +24,57 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * <p>Checks the padding of parentheses for typecasts. That is whether a space
  * is required after a left parenthesis and before a right parenthesis, or such
  * spaces are forbidden.
  * </p>
  * <p>
  * The policy to verify is specified using the {@link PadOption} class and
  * defaults to {@link PadOption#NOSPACE}.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="TypecastParenPad"/&gt;
  * </pre>
  * <p>
  * An example of how to configure the check to require spaces for the
  * parentheses of constructor, method, and super constructor invocations is:
  * </p>
  * <pre>
  * &lt;module name="TypecastParenPad"&gt;
  *     &lt;property name="option" value="space"/&gt;
  * &lt;/module&gt;
  * </pre>
  * @author Oliver Burn
  */
 public class TypecastParenPadCheck extends AbstractParenPadCheck {
     @Override
     public int[] getRequiredTokens() {
         return new int[] {TokenTypes.RPAREN, TokenTypes.TYPECAST};
     }
 
     @Override
     public int[] getDefaultTokens() {
         return getRequiredTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.RPAREN, TokenTypes.TYPECAST};
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         // Strange logic in this method to guard against checking RPAREN tokens
         // that are not associated with a TYPECAST token.
         if (ast.getType() == TokenTypes.TYPECAST) {
             processLeft(ast);
         }
-        else if (ast.getParent() != null
-                 && ast.getParent().getType() == TokenTypes.TYPECAST
+        else if (ast.getParent().getType() == TokenTypes.TYPECAST
                  && ast.getParent().findFirstToken(TokenTypes.RPAREN)
                      == ast) {
             processRight(ast);
         }
     }
 }
