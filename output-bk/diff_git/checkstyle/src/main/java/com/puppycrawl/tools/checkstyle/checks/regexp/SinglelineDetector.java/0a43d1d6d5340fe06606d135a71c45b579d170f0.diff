diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java
index 4257163bf..be551fedc 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java
@@ -61,70 +61,67 @@ class SinglelineDetector {
         resetState();
         int lineNo = 0;
         for (int index = 0; index < fileText.size(); index++) {
             final String line = fileText.get(index);
             lineNo++;
             checkLine(lineNo, line, options.getPattern().matcher(line), 0);
         }
         finish();
     }
 
     /** Perform processing at the end of a set of lines. */
     private void finish() {
         if (currentMatches < options.getMinimum()) {
             if (options.getMessage().isEmpty()) {
                 options.getReporter().log(0, MSG_REGEXP_MINIMUM,
                         options.getMinimum(), options.getFormat());
             }
             else {
                 options.getReporter().log(0, options.getMessage());
             }
         }
     }
 
     /**
      * Reset the state of the detector.
      */
     private void resetState() {
         currentMatches = 0;
     }
 
     /**
      * Check a line for matches.
      * @param lineNo the line number of the line to check
      * @param line the line to check
      * @param matcher the matcher to use
      * @param startPosition the position to start searching from.
      */
     private void checkLine(int lineNo, String line, Matcher matcher,
             int startPosition) {
         final boolean foundMatch = matcher.find(startPosition);
         if (foundMatch) {
             // match is found, check for intersection with comment
             final int startCol = matcher.start(0);
             final int endCol = matcher.end(0);
             // Note that Matcher.end(int) returns the offset AFTER the
             // last matched character, but shouldSuppress()
             // needs column number of the last character.
             // So we need to use (endCol - 1) here.
             if (options.getSuppressor()
                     .shouldSuppress(lineNo, startCol, lineNo, endCol - 1)) {
-                if (endCol < line.length()) {
-                    // check if the expression is on the rest of the line
-                    checkLine(lineNo, line, matcher, endCol);
-                }
+                checkLine(lineNo, line, matcher, endCol);
             }
             else {
                 currentMatches++;
                 if (currentMatches > options.getMaximum()) {
                     if (options.getMessage().isEmpty()) {
                         options.getReporter().log(lineNo, MSG_REGEXP_EXCEEDED,
                                 matcher.pattern().toString());
                     }
                     else {
                         options.getReporter().log(lineNo, options.getMessage());
                     }
                 }
             }
         }
     }
 }
