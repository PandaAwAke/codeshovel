diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
index 0cb8724d8..6ca2f03ab 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
@@ -103,104 +103,104 @@ public class CheckstyleAntTask extends Task {
     private int maxWarnings = Integer.MAX_VALUE;
 
     /**
      * Whether to omit ignored modules - some modules may log tove
      * their severity depending on their configuration (e.g. WriteTag) so
      * need to be included
      */
     private boolean omitIgnoredModules = true;
 
     ////////////////////////////////////////////////////////////////////////////
     // Setters for ANT specific attributes
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Tells this task to set the named property to "true" when there
      * is a violation.
      * @param propertyName the name of the property to set
      *                      in the event of an failure.
      */
     public void setFailureProperty(String propertyName) {
         failureProperty = propertyName;
     }
 
     /**
      * Sets flag - whether to fail if a violation is found.
      * @param fail whether to fail if a violation is found
      */
     public void setFailOnViolation(boolean fail) {
         failOnViolation = fail;
     }
 
     /**
      * Sets the maximum number of errors allowed. Default is 0.
      * @param maxErrors the maximum number of errors allowed.
      */
     public void setMaxErrors(int maxErrors) {
         this.maxErrors = maxErrors;
     }
 
     /**
      * Sets the maximum number of warnings allowed. Default is
      * {@link Integer#MAX_VALUE}.
      * @param maxWarnings the maximum number of warnings allowed.
      */
     public void setMaxWarnings(int maxWarnings) {
         this.maxWarnings = maxWarnings;
     }
 
     /**
      * Adds set of files (nested fileset attribute).
-     * @param fS the file set to add
+     * @param fileSet the file set to add
      */
-    public void addFileset(FileSet fS) {
-        fileSets.add(fS);
+    public void addFileset(FileSet fileSet) {
+        fileSets.add(fileSet);
     }
 
     /**
      * Add a formatter.
      * @param formatter the formatter to add for logging.
      */
     public void addFormatter(Formatter formatter) {
         formatters.add(formatter);
     }
 
     /**
      * Add an override property.
      * @param property the property to add
      */
     public void addProperty(Property property) {
         overrideProps.add(property);
     }
 
     /**
      * Set the class path.
      * @param classpath the path to locate classes
      */
     public void setClasspath(Path classpath) {
         if (this.classpath == null) {
             this.classpath = classpath;
         }
         else {
             this.classpath.append(classpath);
         }
     }
 
     /**
      * Set the class path from a reference defined elsewhere.
      * @param classpathRef the reference to an instance defining the classpath
      */
     public void setClasspathRef(Reference classpathRef) {
         createClasspath().setRefid(classpathRef);
     }
 
     /**
      * Creates classpath.
      * @return a created path for locating classes
      */
     public Path createClasspath() {
         if (classpath == null) {
             classpath = new Path(getProject());
         }
         return classpath.createPath();
     }
 
@@ -310,104 +310,104 @@ public class CheckstyleAntTask extends Task {
 
             // setup the listeners
             final AuditListener[] listeners = getListeners();
             for (AuditListener element : listeners) {
                 checker.addListener(element);
             }
             final SeverityLevelCounter warningCounter =
                 new SeverityLevelCounter(SeverityLevel.WARNING);
             checker.addListener(warningCounter);
 
             processFiles(checker, warningCounter, checkstyleVersion);
         }
         finally {
             if (checker != null) {
                 checker.destroy();
             }
         }
     }
 
     /**
      * Scans and processes files by means given checker.
      * @param checker Checker to process files
      * @param warningCounter Checker's counter of warnings
      * @param checkstyleVersion Checkstyle compile version
      */
     private void processFiles(Checker checker, final SeverityLevelCounter warningCounter,
             final String checkstyleVersion) {
         final long startTime = System.currentTimeMillis();
         final List<File> files = scanFileSets();
         final long endTime = System.currentTimeMillis();
         log("To locate the files took " + (endTime - startTime) + TIME_SUFFIX,
             Project.MSG_VERBOSE);
 
         log("Running Checkstyle " + checkstyleVersion + " on " + files.size()
                 + " files", Project.MSG_INFO);
         log("Using configuration " + configLocation, Project.MSG_VERBOSE);
 
         int numErrs;
 
         try {
             final long processingStartTime = System.currentTimeMillis();
             numErrs = checker.process(files);
             final long processingEndTime = System.currentTimeMillis();
             log("To process the files took " + (processingEndTime - processingStartTime)
                 + TIME_SUFFIX, Project.MSG_VERBOSE);
         }
         catch (CheckstyleException e) {
             throw new BuildException("Unable to process files: " + files, e);
         }
         final int numWarnings = warningCounter.getCount();
-        final boolean ok = numErrs <= maxErrors && numWarnings <= maxWarnings;
+        final boolean okStatus = numErrs <= maxErrors && numWarnings <= maxWarnings;
 
         // Handle the return status
-        if (!ok) {
+        if (!okStatus) {
             final String failureMsg =
                     "Got " + numErrs + " errors and " + numWarnings
                             + " warnings.";
             if (failureProperty != null) {
                 getProject().setProperty(failureProperty, failureMsg);
             }
 
             if (failOnViolation) {
                 throw new BuildException(failureMsg, getLocation());
             }
         }
     }
 
     /**
      * Creates new instance of {@code Checker}.
      * @return new instance of {@code Checker}
      */
     private Checker createChecker() {
         Checker checker;
         try {
             final Properties props = createOverridingProperties();
             final Configuration config =
                 ConfigurationLoader.loadConfiguration(
                     configLocation,
                     new PropertiesExpander(props),
                     omitIgnoredModules);
 
             final DefaultContext context = new DefaultContext();
             final ClassLoader loader = new AntClassLoader(getProject(),
                     classpath);
             context.add("classloader", loader);
 
             final ClassLoader moduleClassLoader =
                 Checker.class.getClassLoader();
             context.add("moduleClassLoader", moduleClassLoader);
 
             checker = new Checker();
             checker.contextualize(context);
             checker.configure(config);
         }
         catch (final CheckstyleException e) {
             throw new BuildException(String.format("Unable to create a Checker: "
                     + "configLocation {%s}, classpath {%s}.", configLocation, classpath), e);
         }
         return checker;
     }
 
     /**
      * Create the Properties object based on the arguments specified
      * to the ANT task.
@@ -444,163 +444,163 @@ public class CheckstyleAntTask extends Task {
         for (Property p : overrideProps) {
             retVal.setProperty(p.getKey(), p.getValue());
         }
 
         return retVal;
     }
 
     /**
      * Return the list of listeners set in this task.
      * @return the list of listeners.
      */
     private AuditListener[] getListeners() {
         final int formatterCount = Math.max(1, formatters.size());
 
         final AuditListener[] listeners = new AuditListener[formatterCount];
 
         // formatters
         try {
             if (formatters.isEmpty()) {
                 final OutputStream debug = new LogOutputStream(this, Project.MSG_DEBUG);
                 final OutputStream err = new LogOutputStream(this, Project.MSG_ERR);
                 listeners[0] = new DefaultLogger(debug, true, err, true, true);
             }
             else {
                 for (int i = 0; i < formatterCount; i++) {
                     final Formatter formatter = formatters.get(i);
                     listeners[i] = formatter.createListener(this);
                 }
             }
         }
         catch (IOException e) {
             throw new BuildException(String.format("Unable to create listeners: "
                     + "formatters {%s}.", formatters), e);
         }
         return listeners;
     }
 
     /**
      * Returns the list of files (full path name) to process.
      * @return the list of files included via the filesets.
      */
     protected List<File> scanFileSets() {
         final List<File> list = Lists.newArrayList();
         if (fileName != null) {
             // oops we've got an additional one to process, don't
             // forget it. No sweat, it's fully resolved via the setter.
             log("Adding standalone file for audit", Project.MSG_VERBOSE);
             list.add(new File(fileName));
         }
         for (int i = 0; i < fileSets.size(); i++) {
-            final FileSet fs = fileSets.get(i);
-            final DirectoryScanner ds = fs.getDirectoryScanner(getProject());
-            ds.scan();
+            final FileSet fileSet = fileSets.get(i);
+            final DirectoryScanner scanner = fileSet.getDirectoryScanner(getProject());
+            scanner.scan();
 
-            final String[] names = ds.getIncludedFiles();
+            final String[] names = scanner.getIncludedFiles();
             log(i + ") Adding " + names.length + " files from directory "
-                    + ds.getBasedir(), Project.MSG_VERBOSE);
+                    + scanner.getBasedir(), Project.MSG_VERBOSE);
 
             for (String element : names) {
-                final String pathname = ds.getBasedir() + File.separator
+                final String pathname = scanner.getBasedir() + File.separator
                         + element;
                 list.add(new File(pathname));
             }
         }
 
         return list;
     }
 
     /**
      * Poor mans enumeration for the formatter types.
      * @author Oliver Burn
      */
     public static class FormatterType extends EnumeratedAttribute {
         /** My possible values. */
         private static final String[] VALUES = {E_XML, E_PLAIN};
 
         @Override
         public String[] getValues() {
             return VALUES.clone();
         }
     }
 
     /**
      * Details about a formatter to be used.
      * @author Oliver Burn
      */
     public static class Formatter {
         /** The formatter type. */
         private FormatterType formatterType;
         /** The file to output to. */
         private File toFile;
         /** Whether or not the write to the named file. */
         private boolean useFile = true;
 
         /**
          * Set the type of the formatter.
          * @param type the type
          */
         public void setType(FormatterType type) {
             final String val = type.getValue();
             if (!E_XML.equals(val) && !E_PLAIN.equals(val)) {
                 throw new BuildException("Invalid formatter type: " + val);
             }
 
             formatterType = type;
         }
 
         /**
          * Set the file to output to.
-         * @param to the file to output to
+         * @TreeWalker:262param destination the file to output to
          */
-        public void setTofile(File to) {
-            toFile = to;
+        public void setTofile(File destination) {
+            toFile = destination;
         }
 
         /**
          * Sets whether or not we write to a file if it is provided.
          * @param use whether not not to use provided file.
          */
         public void setUseFile(boolean use) {
             useFile = use;
         }
 
         /**
          * Creates a listener for the formatter.
          * @param task the task running
          * @return a listener
          * @throws IOException if an error occurs
          */
         public AuditListener createListener(Task task) throws IOException {
             if (formatterType != null
                     && E_XML.equals(formatterType.getValue())) {
                 return createXMLLogger(task);
             }
             return createDefaultLogger(task);
         }
 
         /**
          * Creates default logger.
          * @param task the task to possibly log to
          * @return a DefaultLogger instance
          * @throws IOException if an error occurs
          */
         private AuditListener createDefaultLogger(Task task)
             throws IOException {
             if (toFile == null || !useFile) {
                 return new DefaultLogger(
                     new LogOutputStream(task, Project.MSG_DEBUG),
                     true, new LogOutputStream(task, Project.MSG_ERR), true);
             }
             final FileOutputStream infoStream = new FileOutputStream(toFile);
             return new DefaultLogger(infoStream, true, infoStream, false, true);
         }
 
         /**
          * Creates XML logger.
          * @param task the task to possibly log to
          * @return an XMLLogger instance
          * @throws IOException if an error occurs
          */
         private AuditListener createXMLLogger(Task task) throws IOException {
             if (toFile == null || !useFile) {
                 return new XMLLogger(new LogOutputStream(task,
