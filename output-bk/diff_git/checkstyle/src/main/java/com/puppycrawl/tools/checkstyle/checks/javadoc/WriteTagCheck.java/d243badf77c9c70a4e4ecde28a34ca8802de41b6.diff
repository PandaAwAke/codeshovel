diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java
index 2502e0382..05af77090 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java
@@ -153,59 +153,59 @@ public class WriteTagCheck
         final FileContents contents = getFileContents();
         final int lineNo = ast.getLineNo();
         final TextBlock cmt =
             contents.getJavadocBefore(lineNo);
         if (cmt == null) {
             log(lineNo, MSG_MISSING_TAG, tag);
         }
         else {
             checkTag(lineNo, cmt.getText());
         }
     }
 
     /**
      * Verifies that a type definition has a required tag.
      * @param lineNo the line number for the type definition.
      * @param comment the Javadoc comment for the type definition.
      */
     private void checkTag(int lineNo, String... comment) {
         if (tagRegExp != null) {
             int tagCount = 0;
             for (int i = 0; i < comment.length; i++) {
                 final String commentValue = comment[i];
                 final Matcher matcher = tagRegExp.matcher(commentValue);
                 if (matcher.find()) {
                     tagCount += 1;
                     final int contentStart = matcher.start(1);
                     final String content = commentValue.substring(contentStart);
                     if (tagFormat == null || tagFormat.matcher(content).find()) {
                         logTag(lineNo + i - comment.length, tag, content);
                     }
                     else {
                         log(lineNo + i - comment.length, MSG_TAG_FORMAT, tag, tagFormat.pattern());
                     }
                 }
             }
             if (tagCount == 0) {
                 log(lineNo, MSG_MISSING_TAG, tag);
             }
         }
     }
 
     /**
      * Log a message.
      *
      * @param line the line number where the error was found
      * @param tagName the javadoc tag to be logged
      * @param tagValue the contents of the tag
      *
      * @see java.text.MessageFormat
      */
-    protected final void logTag(int line, String tagName, String tagValue) {
+    private void logTag(int line, String tagName, String tagValue) {
         final String originalSeverity = getSeverity();
         setSeverity(tagSeverity.getName());
 
         log(line, MSG_WRITE_TAG, tagName, tagValue);
 
         setSeverity(originalSeverity);
     }
 }
