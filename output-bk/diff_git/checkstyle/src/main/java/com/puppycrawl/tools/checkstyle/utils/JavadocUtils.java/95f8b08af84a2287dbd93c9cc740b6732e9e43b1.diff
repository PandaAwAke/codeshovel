diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtils.java
index 61351f223..9065b08db 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtils.java
@@ -189,101 +189,101 @@ public final class JavadocUtils {
     }
 
     /**
      * The type of Javadoc tag we want returned.
      */
     public enum JavadocTagType {
         /** Block type. */
         BLOCK,
         /** Inline type. */
         INLINE,
         /** All validTags. */
         ALL
     }
 
     /**
      * Checks that commentContent starts with '*' javadoc comment identifier.
      * @param commentContent
      *        content of block comment
      * @return true if commentContent starts with '*' javadoc comment
      *         identifier.
      */
     public static boolean isJavadocComment(String commentContent) {
         boolean result = false;
 
         if (!commentContent.isEmpty()) {
             final char docCommentIdentificator = commentContent.charAt(0);
             result = docCommentIdentificator == '*';
         }
 
         return result;
     }
 
     /**
      * Checks block comment content starts with '*' javadoc comment identifier.
      * @param blockCommentBegin
      *        block comment AST
      * @return true if block comment content starts with '*' javadoc comment
      *         identifier.
      */
     public static boolean isJavadocComment(DetailAST blockCommentBegin) {
         final String commentContent = getBlockCommentContent(blockCommentBegin);
         return isJavadocComment(commentContent);
     }
 
     /**
      * Gets content of block comment.
      * @param blockCommentBegin
      *        block comment AST.
      * @return content of block comment.
      */
-    public static String getBlockCommentContent(DetailAST blockCommentBegin) {
+    private static String getBlockCommentContent(DetailAST blockCommentBegin) {
         final DetailAST commentContent = blockCommentBegin.getFirstChild();
         return commentContent.getText();
     }
 
     /**
      * Get content of Javadoc comment.
      * @param javadocCommentBegin
      *        Javadoc comment AST
      * @return content of Javadoc comment.
      */
     public static String getJavadocCommentContent(DetailAST javadocCommentBegin) {
         final DetailAST commentContent = javadocCommentBegin.getFirstChild();
         return commentContent.getText().substring(1);
     }
 
     /**
      * Returns the first child token that has a specified type.
      * @param detailNode
      *        Javadoc AST node
      * @param type
      *        the token type to match
      * @return the matching token, or null if no match
      */
     public static DetailNode findFirstToken(DetailNode detailNode, int type) {
         DetailNode retVal = null;
         DetailNode node = getFirstChild(detailNode);
         while (node != null) {
             if (node.getType() == type) {
                 retVal = node;
                 break;
             }
             node = getNextSibling(node);
         }
         return retVal;
     }
 
     /**
      * Gets first child node of specified node.
      *
      * @param node DetailNode
      * @return first child
      */
     public static DetailNode getFirstChild(DetailNode node) {
         DetailNode resultNode = null;
 
         if (node.getChildren().length > 0) {
             resultNode = node.getChildren()[0];
         }
         return resultNode;
     }
