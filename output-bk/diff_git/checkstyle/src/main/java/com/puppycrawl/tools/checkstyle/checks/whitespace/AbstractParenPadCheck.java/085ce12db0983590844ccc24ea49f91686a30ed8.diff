diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/AbstractParenPadCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/AbstractParenPadCheck.java
index 0a5949a65..d198456f8 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/AbstractParenPadCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/AbstractParenPadCheck.java
@@ -10,99 +10,105 @@
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks.whitespace;
 
 import com.puppycrawl.tools.checkstyle.Utils;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.checks.AbstractOptionCheck;
 
 /**
  * <p>Abstract class for checking the padding of parentheses. That is whether a
  * space is required after a left parenthesis and before a right parenthesis,
  * or such spaces are forbidden.
  * </p>
  * @author Oliver Burn
  */
 abstract class AbstractParenPadCheck
     extends AbstractOptionCheck<PadOption> {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String WS_FOLLOWED = "ws.followed";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String WS_NOT_FOLLOWED = "ws.notFollowed";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String WS_PRECEDED = "ws.preceded";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String WS_NOT_PRECEDED = "ws.notPreceded";
 
+    /** Open parenthesis literal. */
+    private static final char OPEN_PARENTHESIS = '(';
+
+    /** Close parenthesis literal. */
+    private static final char CLOSE_PARENTHESIS = ')';
+
     /**
      * Sets the paren pad option to nospace.
      */
     AbstractParenPadCheck() {
         super(PadOption.NOSPACE, PadOption.class);
     }
 
     /**
      * Process a token representing a left parentheses.
      * @param ast the token representing a left parentheses
      */
     protected void processLeft(DetailAST ast) {
         final String line = getLines()[ast.getLineNo() - 1];
         final int after = ast.getColumnNo() + 1;
         if (after < line.length()) {
             if (getAbstractOption() == PadOption.NOSPACE
                 && Character.isWhitespace(line.charAt(after))) {
-                log(ast.getLineNo(), after, WS_FOLLOWED, "(");
+                log(ast.getLineNo(), after, WS_FOLLOWED, OPEN_PARENTHESIS);
             }
             else if (getAbstractOption() == PadOption.SPACE
                      && !Character.isWhitespace(line.charAt(after))
-                     && line.charAt(after) != ')') {
-                log(ast.getLineNo(), after, WS_NOT_FOLLOWED, "(");
+                     && line.charAt(after) != CLOSE_PARENTHESIS) {
+                log(ast.getLineNo(), after, WS_NOT_FOLLOWED, OPEN_PARENTHESIS);
             }
         }
     }
 
     /**
      * Process a token representing a right parentheses.
      * @param ast the token representing a right parentheses
      */
     protected void processRight(DetailAST ast) {
         final String line = getLines()[ast.getLineNo() - 1];
         final int before = ast.getColumnNo() - 1;
         if (before >= 0) {
             if (getAbstractOption() == PadOption.NOSPACE
                 && Character.isWhitespace(line.charAt(before))
                 && !Utils.whitespaceBefore(before, line)) {
-                log(ast.getLineNo(), before, WS_PRECEDED, ")");
+                log(ast.getLineNo(), before, WS_PRECEDED, CLOSE_PARENTHESIS);
             }
             else if (getAbstractOption() == PadOption.SPACE
                 && !Character.isWhitespace(line.charAt(before))
-                && line.charAt(before) != '(') {
+                && line.charAt(before) != OPEN_PARENTHESIS) {
                 log(ast.getLineNo(), ast.getColumnNo(),
-                    WS_NOT_PRECEDED, ")");
+                    WS_NOT_PRECEDED, CLOSE_PARENTHESIS);
             }
         }
     }
 }
