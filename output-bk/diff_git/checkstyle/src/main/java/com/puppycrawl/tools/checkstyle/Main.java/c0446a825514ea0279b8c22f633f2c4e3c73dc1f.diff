diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
index bf30aa4da..21d6a0e1e 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
@@ -5,134 +5,134 @@
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle;
 
 import com.google.common.collect.Lists;
 import com.puppycrawl.tools.checkstyle.api.AuditListener;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.UnsupportedEncodingException;
 import java.util.List;
 import java.util.Properties;
 
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.CommandLineParser;
 import org.apache.commons.cli.HelpFormatter;
 import org.apache.commons.cli.Options;
 import org.apache.commons.cli.ParseException;
 import org.apache.commons.cli.PosixParser;
 
 /**
  * Wrapper command line program for the Checker.
  * @author Damian Szczepanik (damianszczepanik@github)
  **/
 public final class Main
 {
     /**
      * Loops over the files specified checking them for errors. The exit code
      * is the number of errors found in all the files.
      * @param args the command line arguments
      * @exception UnsupportedEncodingException if there is a problem to use UTF-8
      **/
-    public static void main(String[] args) throws UnsupportedEncodingException
+    public static void main(String... args) throws UnsupportedEncodingException
     {
         boolean parseResult = false;
         try {
             processCommandLine(parseCli(args));
             parseResult = true;
         }
         catch (final ParseException e) {
             System.err.println("Could not parse parameters: " + e.getMessage());
             e.printStackTrace();
         }
         catch (final Exception e) {
             System.err.println("Could not execute Checkstyle: " + e.getMessage());
             e.printStackTrace();
         }
         finally {
             if (!parseResult) {
                 usage();
             }
             // provide proper exit code based on results.
             System.exit(parseResult ? 0 : 1);
         }
     }
 
     /**
      * Parses and executes Checkstyle based on passed arguments.
      * @param args
      *        command line parameters
      * @return parsed information about passed parameters
      * @throws ParseException
      *         when passed arguments are not valid
      * @exception CheckstyleException when provided parameters are not supported
      */
-    private static CommandLine parseCli(String[] args)
+    private static CommandLine parseCli(String... args)
             throws ParseException
     {
         // parse the parameters
         final CommandLineParser clp = new PosixParser();
         // always returns not null value
         return clp.parse(buildOptions(), args);
     }
 
     /**
      * Executes required Checkstyle actions based on passed parameters.
      * @param line
      *        list of actions to execute
      * @throws CheckstyleException
      *         when could not create checker
      * @throws UnsupportedEncodingException
      *         if there is problem to use UTf-8
      */
     private static void processCommandLine(CommandLine line)
             throws CheckstyleException, UnsupportedEncodingException
     {
         // show version and exit
         if (line.hasOption("v")) {
             System.out.println("Checkstyle version: "
                     + Main.class.getPackage().getImplementationVersion());
             return;
         }
 
         // ensure a configuration file is specified
         if (!line.hasOption("c")) {
             System.out.println("Must specify a config XML file.");
             return;
         }
 
         // setup the properties
         final Properties props =
                 line.hasOption("p")
                         ? loadProperties(new File(line.getOptionValue("p")))
                         : System.getProperties();
         final String configFormat = line.getOptionValue("c");
         final Configuration config = loadConfig(configFormat, props);
 
         // setup the output stream
         OutputStream out = null;
         boolean closeOut = false;
         if (line.hasOption("o")) {
             final String fname = line.getOptionValue("o");
             try {
                 out = new FileOutputStream(fname);
                 closeOut = true;
             }
@@ -151,101 +151,101 @@ public final class Main
         final List<File> files = getFilesToProcess(line.getArgs());
         if (files.isEmpty()) {
             throw new CheckstyleException("Must specify files to process, found 0.");
         }
 
         final Checker checker = createChecker(config, listener);
         final int errorCounter = checker.process(files);
         checker.destroy();
         if (errorCounter != 0) {
             throw new CheckstyleException(String.format(
                     "Checkstyle ends with %d errors.", errorCounter));
         }
     }
 
     /** Don't create instance of this class, use {@link #main(String[])} method instead. */
     private Main()
     {
     }
 
     /**
      * Creates the Checker object.
      * @param config
      *        the configuration to use
      * @param auditListener
      *        the sticky beak to track what happens
      * @return a nice new fresh Checker
      * @throws CheckstyleException when could not create checker
      */
     private static Checker createChecker(Configuration config,
             AuditListener auditListener)
             throws CheckstyleException
     {
         final Checker checker = new Checker();
 
         final ClassLoader moduleClassLoader = Checker.class.getClassLoader();
         checker.setModuleClassLoader(moduleClassLoader);
         checker.configure(config);
         checker.addListener(auditListener);
 
         return checker;
     }
 
     /**
      * Determines the files to process.
      * @param filesToProcess
      *        arguments that were not processed yet but shall be
      * @return list of files to process
      * @throws CheckstyleException
      *         when there is no file to process
      */
-    private static List<File> getFilesToProcess(String[] filesToProcess)
+    private static List<File> getFilesToProcess(String... filesToProcess)
             throws CheckstyleException
     {
         final List<File> files = Lists.newLinkedList();
         for (String element : filesToProcess) {
             files.addAll(listFiles(new File(element)));
         }
 
         return files;
     }
 
     /**
      * Creates the audit listener.
      *
      * @param format format of the auditt listener
      * @param out the stream to log to
      * @param closeOut whether the stream should be closed
      * @return a fresh new <code>AuditListener</code>
      * @exception UnsupportedEncodingException if there is problem to use UTf-8
      * @exception CheckstyleException when provided parameters are not supported
      */
     private static AuditListener createListener(String format,
                                                 OutputStream out,
                                                 boolean closeOut)
             throws UnsupportedEncodingException, CheckstyleException
     {
         AuditListener listener = null;
         switch (format) {
             case "xml":
                 listener = new XMLLogger(out, closeOut);
                 break;
 
             case "plain":
                 listener = new DefaultLogger(out, closeOut);
                 break;
 
             default:
                 throw new CheckstyleException("Invalid output format. Found '" + format
                         + "' but expected 'plain' or 'xml'.");
         }
 
         return listener;
     }
 
     /**
      * Loads the configuration file. Will exit if unable to load.
      *
      * @param format
      *            specifies the location of the configuration
      * @param props
      *            the properties to resolve with the configuration
