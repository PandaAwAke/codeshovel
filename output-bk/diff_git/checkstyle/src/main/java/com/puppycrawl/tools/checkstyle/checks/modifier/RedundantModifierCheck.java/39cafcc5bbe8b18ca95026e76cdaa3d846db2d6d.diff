diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
index ce18e3325..33b21aa15 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
@@ -231,101 +231,102 @@ public class RedundantModifierCheck
 
     /**
      * Do validation of interface of annotation.
      * @param ast token AST
      */
     private void processInterfaceOrAnnotation(DetailAST ast) {
         final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
         DetailAST modifier = modifiers.getFirstChild();
         while (modifier != null) {
 
             // javac does not allow final or static in interface methods
             // order annotation fields hence no need to check that this
             // is not a method or annotation field
 
             final int type = modifier.getType();
             if (type == TokenTypes.LITERAL_PUBLIC
                 || type == TokenTypes.LITERAL_STATIC
                         && ast.getType() != TokenTypes.METHOD_DEF
                 || type == TokenTypes.ABSTRACT
                         && ast.getType() != TokenTypes.CLASS_DEF
                 || type == TokenTypes.FINAL
                         && ast.getType() != TokenTypes.CLASS_DEF) {
                 log(modifier.getLineNo(), modifier.getColumnNo(),
                         MSG_KEY, modifier.getText());
                 break;
             }
 
             modifier = modifier.getNextSibling();
         }
     }
 
     /**
      * Process validation of Methods.
      * @param ast method AST
      */
     private void processMethods(DetailAST ast) {
         final DetailAST modifiers =
                         ast.findFirstToken(TokenTypes.MODIFIERS);
         // private method?
         boolean checkFinal =
             modifiers.branchContains(TokenTypes.LITERAL_PRIVATE);
         // declared in a final class?
         DetailAST parent = ast.getParent();
         while (parent != null) {
             if (parent.getType() == TokenTypes.CLASS_DEF) {
                 final DetailAST classModifiers =
                     parent.findFirstToken(TokenTypes.MODIFIERS);
                 checkFinal = checkFinal || classModifiers.branchContains(TokenTypes.FINAL);
                 parent = null;
             }
-            else if (parent.getType() == TokenTypes.LITERAL_NEW) {
+            else if (parent.getType() == TokenTypes.LITERAL_NEW
+                    || parent.getType() == TokenTypes.ENUM_CONSTANT_DEF) {
                 checkFinal = true;
                 parent = null;
             }
             else {
                 parent = parent.getParent();
             }
         }
         if (checkFinal && !isAnnotatedWithSafeVarargs(ast)) {
             checkForRedundantModifier(ast, TokenTypes.FINAL);
         }
 
         if (!ast.branchContains(TokenTypes.SLIST)) {
             processAbstractMethodParameters(ast);
         }
     }
 
     /**
      * Process validation of parameters for Methods with no definition.
      * @param ast method AST
      */
     private void processAbstractMethodParameters(DetailAST ast) {
         final DetailAST parameters = ast.findFirstToken(TokenTypes.PARAMETERS);
 
         for (DetailAST child = parameters.getFirstChild(); child != null; child = child
                 .getNextSibling()) {
             if (child.getType() == TokenTypes.PARAMETER_DEF) {
                 checkForRedundantModifier(child, TokenTypes.FINAL);
             }
         }
     }
 
     /**
      * Check if class constructor has proper modifiers.
      * @param classCtorAst class constructor ast
      */
     private void checkClassConstructorModifiers(DetailAST classCtorAst) {
         final DetailAST classDef = classCtorAst.getParent().getParent();
         if (!isClassPublic(classDef) && !isClassProtected(classDef)) {
             checkForRedundantModifier(classCtorAst, TokenTypes.LITERAL_PUBLIC);
         }
     }
 
     /**
      * Checks if given resource has redundant modifiers.
      * @param ast ast
      */
     private void processResources(DetailAST ast) {
         checkForRedundantModifier(ast, TokenTypes.FINAL);
     }
 
