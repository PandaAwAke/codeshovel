diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanExpressionCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanExpressionCheck.java
index 35b20cec5..4ac7b48cf 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanExpressionCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanExpressionCheck.java
@@ -16,67 +16,67 @@
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.coding;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 
 /**
  * <p>
  * Checks for overly complicated boolean expressions. Currently finds code like
  * <code>if (b == true)</code>, <code>b || true</code>, <code>!false</code>,
  * etc.
  * </p>
  * <p>
  * Rationale: Complex boolean logic makes code hard to understand and maintain.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="SimplifyBooleanExpression"/&gt;
  * </pre>
  * @author lkuehne
  */
 public class SimplifyBooleanExpressionCheck
         extends Check
 {
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.LITERAL_TRUE, TokenTypes.LITERAL_FALSE};
     }
 
     @Override
     public int[] getAcceptableTokens()
     {
         // Return empty list to prevent user changing tokens in the
         // configuration.
         return new int[] {};
     }
 
     @Override
     public int[] getRequiredTokens()
     {
         return new int[] {TokenTypes.LITERAL_TRUE, TokenTypes.LITERAL_FALSE};
     }
 
     @Override
-    public void visitToken(DetailAST aAST)
+    public void visitToken(DetailAST ast)
     {
-        final DetailAST parent = aAST.getParent();
+        final DetailAST parent = ast.getParent();
         switch (parent.getType()) {
         case TokenTypes.NOT_EQUAL:
         case TokenTypes.EQUAL:
         case TokenTypes.LNOT:
         case TokenTypes.LOR:
         case TokenTypes.LAND:
             log(parent.getLineNo(), parent.getColumnNo(),
                 "simplify.expression");
             break;
         default:
             break;
         }
     }
 }
