diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java
index d3b0271df..b1b5b0a92 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java
@@ -121,81 +121,87 @@ public abstract class AbstractHeaderCheck extends AbstractFileSetCheck
         finally {
             Closeables.closeQuietly(headerReader);
         }
     }
 
     /**
      * Called before initializing the header.
      * @throws IllegalArgumentException if header has already been set
      */
     private void checkHeaderNotInitialized() {
         if (!readerLines.isEmpty()) {
             throw new IllegalArgumentException(
                     "header has already been set - "
                     + "set either header or headerFile, not both");
         }
     }
 
     /**
      * Set the header to check against. Individual lines in the header
      * must be separated by '\n' characters.
      * @param header header content to check against.
      * @throws IllegalArgumentException if the header cannot be interpreted
      */
     public void setHeader(String header) {
         if (!CommonUtils.isBlank(header)) {
             checkHeaderNotInitialized();
 
             final String headerExpandedNewLines = ESCAPED_LINE_FEED_PATTERN
                     .matcher(header).replaceAll("\n");
 
             final Reader headerReader = new StringReader(headerExpandedNewLines);
             try {
                 loadHeader(headerReader);
             }
             catch (final IOException ex) {
                 throw new IllegalArgumentException("unable to load header", ex);
             }
             finally {
                 Closeables.closeQuietly(headerReader);
             }
         }
     }
 
     /**
      * Load header to check against from a Reader into readerLines.
      * @param headerReader delivers the header to check against
      * @throws IOException if
      */
     private void loadHeader(final Reader headerReader) throws IOException {
         final LineNumberReader lnr = new LineNumberReader(headerReader);
-        while (true) {
-            final String line = lnr.readLine();
-            if (line == null) {
-                break;
+        try {
+            while (true) {
+                final String line = lnr.readLine();
+                if (line == null) {
+                    break;
+                }
+                readerLines.add(line);
             }
-            readerLines.add(line);
+            postProcessHeaderLines();
+        }
+        finally {
+            Closeables.closeQuietly(lnr);
         }
-        postProcessHeaderLines();
+
     }
 
     @Override
     protected final void finishLocalSetup() throws CheckstyleException {
         if (headerFile != null) {
             loadHeaderFile();
         }
     }
 
     @Override
     public Set<String> getExternalResourceLocations() {
         final Set<String> result;
 
         if (headerFile == null) {
             result = Collections.emptySet();
         }
         else {
             result = Collections.singleton(headerFile.toString());
         }
 
         return result;
     }
 }
