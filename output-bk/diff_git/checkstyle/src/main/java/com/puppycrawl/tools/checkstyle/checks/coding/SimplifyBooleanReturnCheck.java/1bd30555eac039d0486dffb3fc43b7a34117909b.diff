diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java
index abe54ce62..a1157deb8 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java
@@ -87,76 +87,76 @@ public class SimplifyBooleanReturnCheck
             && returnsOnlyBooleanLiteral(elseStatement))
         {
             log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY);
         }
     }
 
     /**
      * Returns if an AST is a return statment with a boolean literal
      * or a compound statement that contains only such a return statement.
      *
      * Returns <code>true</code> iff ast represents
      * <br/>
      * <pre>
      * return true/false;
      * </pre>
      * or
      * <br/>
      * <pre>
      * {
      *   return true/false;
      * }
      * </pre>
      *
      * @param ast the sytax tree to check
      * @return if ast is a return statment with a boolean literal.
      */
     private static boolean returnsOnlyBooleanLiteral(AST ast)
     {
         if (isBooleanLiteralReturnStatement(ast)) {
             return true;
         }
 
         final AST firstStmnt = ast.getFirstChild();
         return isBooleanLiteralReturnStatement(firstStmnt);
     }
 
     /**
      * Returns if an AST is a return statment with a boolean literal.
      *
      * Returns <code>true</code> iff ast represents
      * <br/>
      * <pre>
      * return true/false;
      * </pre>
      *
      * @param ast the sytax tree to check
      * @return if ast is a return statment with a boolean literal.
      */
     private static boolean isBooleanLiteralReturnStatement(AST ast)
     {
-        if ((ast == null) || (ast.getType() != TokenTypes.LITERAL_RETURN)) {
+        if (ast == null || ast.getType() != TokenTypes.LITERAL_RETURN) {
             return false;
         }
 
         final AST expr = ast.getFirstChild();
 
-        if ((expr == null) || (expr.getType() == TokenTypes.SEMI)) {
+        if (expr == null || expr.getType() == TokenTypes.SEMI) {
             return false;
         }
 
         final AST value = expr.getFirstChild();
         return isBooleanLiteralType(value.getType());
     }
 
     /**
      * Checks if a token type is a literal true or false.
      * @param tokenType the TokenType
      * @return true iff tokenType is LITERAL_TRUE or LITERAL_FALSE
      */
     private static boolean isBooleanLiteralType(final int tokenType)
     {
-        final boolean iastrue = (tokenType == TokenTypes.LITERAL_TRUE);
-        final boolean isFalse = (tokenType == TokenTypes.LITERAL_FALSE);
+        final boolean iastrue = tokenType == TokenTypes.LITERAL_TRUE;
+        final boolean isFalse = tokenType == TokenTypes.LITERAL_FALSE;
         return iastrue || isFalse;
     }
 }
