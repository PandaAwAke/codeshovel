diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java
index ee6dd0f73..a1717a4ab 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java
@@ -86,97 +86,95 @@ public class SuppressElement
      * Set the check class pattern.
      * @param checks regular expression for filtered check classes.
      * @throws ConversionException if unable to create Pattern object
      */
     public void setChecks(final String checks)
         throws ConversionException {
         checkPattern = checks;
         checkRegexp = Utils.createPattern(checks);
     }
 
     /**
      * Set the module id for filtering. Cannot be null.
      * @param moduleId the id
      */
     public void setModuleId(final String moduleId) {
         this.moduleId = moduleId;
     }
     /**
      * Sets the CSV values and ranges for line number filtering.
      * E.g. "1,7-15,18".
      * @param lines CSV values and ranges for line number filtering.
      */
     public void setLines(String lines) {
         linesCSV = lines;
         if (lines != null) {
             lineFilter = new CSVFilter(lines);
         }
         else {
             lineFilter = null;
         }
     }
 
     /**
      * Sets the CSV values and ranges for column number filtering.
      *  E.g. "1,7-15,18".
      * @param columns CSV values and ranges for column number filtering.
      */
     public void setColumns(String columns) {
         columnsCSV = columns;
         if (columns != null) {
             columnFilter = new CSVFilter(columns);
         }
         else {
             columnFilter = null;
         }
     }
 
     /** {@inheritDoc} */
     @Override
     public boolean accept(AuditEvent event) {
-        // file and check match?
-        if (isFileNameAndModuleMatching(event)) {
+        // reject if file or check module mismatch?
+        if (isFileNameAndModuleNotMatching(event)) {
             return true;
         }
 
         // reject if no line/column matching
         return (lineFilter != null || columnFilter != null)
                 && (lineFilter == null || !lineFilter.accept(event.getLine()))
                 && (columnFilter == null || !columnFilter.accept(event.getColumn()));
     }
 
     /**
      * is matching by file name and Check name
      * @param event event
      * @return true is matching
      */
-    private boolean isFileNameAndModuleMatching(AuditEvent event) {
+    private boolean isFileNameAndModuleNotMatching(AuditEvent event) {
         return event.getFileName() == null
                 || !fileRegexp.matcher(event.getFileName()).find()
                 || event.getLocalizedMessage() == null
-                || moduleId != null && !moduleId.equals(event
-                        .getModuleId())
-                || checkRegexp != null && !checkRegexp.matcher(
-                        event.getSourceName()).find();
+                || moduleId != null && !moduleId.equals(event.getModuleId())
+                || checkRegexp != null && !checkRegexp.matcher(event.getSourceName()).find();
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(filePattern, checkPattern, moduleId, linesCSV, columnsCSV);
     }
 
     @Override
     public boolean equals(Object o) {
         if (this == o) {
             return true;
         }
         if (o == null || getClass() != o.getClass()) {
             return false;
         }
         final SuppressElement that = (SuppressElement) o;
         return Objects.equals(filePattern, that.filePattern)
                 && Objects.equals(checkPattern, that.checkPattern)
                 && Objects.equals(moduleId, that.moduleId)
                 && Objects.equals(linesCSV, that.linesCSV)
                 && Objects.equals(columnsCSV, that.columnsCSV);
     }
 }
