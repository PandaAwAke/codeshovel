diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java b/src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java
index ad29a2bed..3fb7720b8 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java
@@ -1,226 +1,214 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2017 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle;
 
 import org.antlr.v4.runtime.ANTLRInputStream;
 import org.antlr.v4.runtime.BailErrorStrategy;
 import org.antlr.v4.runtime.BaseErrorListener;
 import org.antlr.v4.runtime.CommonTokenStream;
+import org.antlr.v4.runtime.InputMismatchException;
+import org.antlr.v4.runtime.Parser;
 import org.antlr.v4.runtime.ParserRuleContext;
 import org.antlr.v4.runtime.RecognitionException;
 import org.antlr.v4.runtime.Recognizer;
 import org.antlr.v4.runtime.Token;
 import org.antlr.v4.runtime.misc.ParseCancellationException;
 import org.antlr.v4.runtime.tree.ParseTree;
 import org.antlr.v4.runtime.tree.TerminalNode;
 
 import com.google.common.base.CaseFormat;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.DetailNode;
 import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;
 import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocNodeImpl;
 import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocLexer;
 import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser;
 import com.puppycrawl.tools.checkstyle.utils.JavadocUtils;
 
 /**
  * Used for parsing Javadoc comment as DetailNode tree.
  * @author bizmailov
  *
  */
 public class JavadocDetailNodeParser {
 
     /**
      * Message key of error message. Missed close HTML tag breaks structure
      * of parse tree, so parser stops parsing and generates such error
      * message. This case is special because parser prints error like
      * {@code "no viable alternative at input 'b \n *\n'"} and it is not
      * clear that error is about missed close HTML tag.
      */
     public static final String MSG_JAVADOC_MISSED_HTML_CLOSE = "javadoc.missed.html.close";
 
     /**
      * Message key of error message.
      */
     public static final String MSG_JAVADOC_WRONG_SINGLETON_TAG =
         "javadoc.wrong.singleton.html.tag";
 
     /**
      * Parse error while rule recognition.
      */
     public static final String MSG_JAVADOC_PARSE_RULE_ERROR = "javadoc.parse.rule.error";
 
     /**
      * Error message key for common javadoc errors.
      */
     public static final String MSG_KEY_PARSE_ERROR = "javadoc.parse.error";
 
-    /**
-     * Unrecognized error from antlr parser.
-     */
-    public static final String MSG_KEY_UNRECOGNIZED_ANTLR_ERROR =
-            "javadoc.unrecognized.antlr.error";
-
     /** Symbols with which javadoc starts. */
     private static final String JAVADOC_START = "/**";
 
     /**
      * Line number of the Block comment AST that is being parsed.
      */
     private int blockCommentLineNumber;
 
     /**
      * Custom error listener.
      */
     private DescriptiveErrorListener errorListener;
 
     /**
      * Parses Javadoc comment as DetailNode tree.
      * @param javadocCommentAst
      *        DetailAST of Javadoc comment
      * @return DetailNode tree of Javadoc comment
      */
     public ParseStatus parseJavadocAsDetailNode(DetailAST javadocCommentAst) {
         blockCommentLineNumber = javadocCommentAst.getLineNo();
 
         final String javadocComment = JavadocUtils.getJavadocCommentContent(javadocCommentAst);
 
         // Use a new error listener each time to be able to use
         // one check instance for multiple files to be checked
         // without getting side effects.
         errorListener = new DescriptiveErrorListener();
 
         // Log messages should have line number in scope of file,
         // not in scope of Javadoc comment.
         // Offset is line number of beginning of Javadoc comment.
         errorListener.setOffset(javadocCommentAst.getLineNo() - 1);
 
         final ParseStatus result = new ParseStatus();
 
         try {
             final ParseTree parseTree = parseJavadocAsParseTree(javadocComment);
 
             final DetailNode tree = convertParseTreeToDetailNode(parseTree);
             // adjust first line to indent of /**
             adjustFirstLineToJavadocIndent(tree,
                         javadocCommentAst.getColumnNo()
                                 + JAVADOC_START.length());
             result.setTree(tree);
         }
-        catch (ParseCancellationException | IllegalArgumentException ex) {
+        catch (ParseCancellationException | IllegalArgumentException ignored) {
             // If syntax error occurs then message is printed by error listener
             // and parser throws this runtime exception to stop parsing.
             // Just stop processing current Javadoc comment.
-            ParseErrorMessage parseErrorMessage = errorListener.getErrorMessage();
-
-            // There are cases when antlr error listener does not handle syntax error
-            if (parseErrorMessage == null) {
-                parseErrorMessage = new ParseErrorMessage(javadocCommentAst.getLineNo(),
-                        MSG_KEY_UNRECOGNIZED_ANTLR_ERROR,
-                        javadocCommentAst.getColumnNo(), ex.getMessage());
-            }
-
+            final ParseErrorMessage parseErrorMessage = errorListener.getErrorMessage();
             result.setParseErrorMessage(parseErrorMessage);
         }
 
         return result;
     }
 
     /**
      * Parses block comment content as javadoc comment.
      * @param blockComment
      *        block comment content.
      * @return parse tree
      * @noinspection deprecation
      */
     private ParseTree parseJavadocAsParseTree(String blockComment) {
         final ANTLRInputStream input = new ANTLRInputStream(blockComment);
 
         final JavadocLexer lexer = new JavadocLexer(input);
 
         // remove default error listeners
         lexer.removeErrorListeners();
 
         // add custom error listener that logs parsing errors
         lexer.addErrorListener(errorListener);
 
         final CommonTokenStream tokens = new CommonTokenStream(lexer);
 
         final JavadocParser parser = new JavadocParser(tokens);
 
         // remove default error listeners
         parser.removeErrorListeners();
 
         // add custom error listener that logs syntax errors
         parser.addErrorListener(errorListener);
 
         // This strategy stops parsing when parser error occurs.
         // By default it uses Error Recover Strategy which is slow and useless.
-        parser.setErrorHandler(new BailErrorStrategy());
+        parser.setErrorHandler(new JavadocParserErrorStrategy());
 
         return parser.javadoc();
     }
 
     /**
      * Converts ParseTree (that is generated by ANTLRv4) to DetailNode tree.
      *
      * @param parseTreeNode root node of ParseTree
      * @return root of DetailNode tree
      * @noinspection SuspiciousArrayCast
      */
     private DetailNode convertParseTreeToDetailNode(ParseTree parseTreeNode) {
         final JavadocNodeImpl rootJavadocNode = createRootJavadocNode(parseTreeNode);
 
         JavadocNodeImpl currentJavadocParent = rootJavadocNode;
         ParseTree parseTreeParent = parseTreeNode;
 
         while (currentJavadocParent != null) {
             // remove unnecessary children tokens
             if (currentJavadocParent.getType() == JavadocTokenTypes.TEXT) {
                 currentJavadocParent
                         .setChildren((DetailNode[]) JavadocNodeImpl.EMPTY_DETAIL_NODE_ARRAY);
             }
 
             final JavadocNodeImpl[] children =
                     (JavadocNodeImpl[]) currentJavadocParent.getChildren();
 
             insertChildrenNodes(children, parseTreeParent);
 
             if (children.length > 0) {
                 currentJavadocParent = children[0];
                 parseTreeParent = parseTreeParent.getChild(0);
             }
             else {
                 JavadocNodeImpl nextJavadocSibling = (JavadocNodeImpl) JavadocUtils
                         .getNextSibling(currentJavadocParent);
 
                 ParseTree nextParseTreeSibling = getNextSibling(parseTreeParent);
 
                 if (nextJavadocSibling == null) {
                     JavadocNodeImpl tempJavadocParent =
                             (JavadocNodeImpl) currentJavadocParent.getParent();
 
                     ParseTree tempParseTreeParent = parseTreeParent.getParent();
 
                     while (nextJavadocSibling == null && tempJavadocParent != null) {
 
                         nextJavadocSibling = (JavadocNodeImpl) JavadocUtils
                                 .getNextSibling(tempJavadocParent);
 
@@ -581,51 +569,69 @@ public class JavadocDetailNodeParser {
         private final int lineNumber;
 
         /**
          * Key for error message.
          */
         private final String messageKey;
 
         /**
          * Error message arguments.
          */
         private final Object[] messageArguments;
 
         /**
          * Initializes parse error message.
          *
          * @param lineNumber line number
          * @param messageKey message key
          * @param messageArguments message arguments
          */
         ParseErrorMessage(int lineNumber, String messageKey, Object... messageArguments) {
             this.lineNumber = lineNumber;
             this.messageKey = messageKey;
             this.messageArguments = messageArguments.clone();
         }
 
         /**
          * Getter for line number where parse error occurred.
          * @return Line number where parse error occurred.
          */
         public int getLineNumber() {
             return lineNumber;
         }
 
         /**
          * Getter for key for error message.
          * @return Key for error message.
          */
         public String getMessageKey() {
             return messageKey;
         }
 
         /**
          * Getter for error message arguments.
          * @return Array of error message arguments.
          */
         public Object[] getMessageArguments() {
             return messageArguments.clone();
         }
     }
 
+    /**
+     * <a href="http://www.antlr.org/api/Java/org/antlr/v4/runtime/BailErrorStrategy.html">
+     * BailErrorStrategy</a> is used to make ANTLR generated parser bail out on the first error
+     * in parser and not attempt any recovery methods but it doesn't report error to the
+     * listeners. This class is to ensure proper error reporting.
+     *
+     * @see DescriptiveErrorListener
+     * @see <a href="http://www.antlr.org/api/Java/org/antlr/v4/runtime/ANTLRErrorStrategy.html">
+     *     ANTLRErrorStrategy</a>
+     */
+    private static class JavadocParserErrorStrategy extends BailErrorStrategy {
+        @Override
+        public Token recoverInline(Parser recognizer) {
+            reportError(recognizer, new InputMismatchException(recognizer));
+            return super.recoverInline(recognizer);
+        }
+    }
+
 }
