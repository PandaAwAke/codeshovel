diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java
index 79f1e009e..a842ba35f 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java
@@ -58,86 +58,87 @@ public class ArrayInitHandler extends BlockParentHandler
             return getParent().getLevel();
         }
     }
 
     @Override
     protected DetailAST getToplevelAST()
     {
         return null;
     }
 
     @Override
     protected DetailAST getLCurly()
     {
         return getMainAst();
     }
 
     @Override
     protected DetailAST getRCurly()
     {
         return getMainAst().findFirstToken(TokenTypes.RCURLY);
     }
 
     @Override
     protected boolean rcurlyMustStart()
     {
         return false;
     }
 
     @Override
     protected boolean childrenMayNest()
     {
         return true;
     }
 
     @Override
     protected DetailAST getListChild()
     {
         return getMainAst();
     }
 
     @Override
     protected IndentLevel getChildrenExpectedLevel()
     {
         // now we accept
         // new int[] {1,
         //            2};
         // and
         // new int[] {1, 2,
         //     3};
 
-        final IndentLevel expectedIndent = super.getChildrenExpectedLevel();
+        final IndentLevel expectedIndent =
+            new IndentLevel(getLevel(), getIndentCheck().getArrayInitIndent());
 
         final int firstLine = getFirstLine(Integer.MAX_VALUE, getListChild());
         if (hasCurlys() && (firstLine == getLCurly().getLineNo())) {
             final int lcurlyPos = expandedTabsColumnNo(getLCurly());
             final int firstChildPos =
                 getNextFirstNonblankOnLineAfter(firstLine, lcurlyPos);
             if (firstChildPos >= 0) {
                 expectedIndent.addAcceptedIndent(firstChildPos);
             }
         }
         return expectedIndent;
     }
 
     /**
      * @param aLineNo   number of line on which we search
      * @param aColumnNo number of column after which we search
      *
      * @return column number of first non-blank char after
      *         specified column on specified line or -1 if
      *         such char doesn't exist.
      */
     private int getNextFirstNonblankOnLineAfter(int aLineNo, int aColumnNo)
     {
         int columnNo = aColumnNo + 1;
         final String line = getIndentCheck().getLines()[aLineNo - 1];
         final int lineLength = line.length();
         while ((columnNo < lineLength)
                && Character.isWhitespace(line.charAt(columnNo)))
         {
             columnNo++;
         }
 
         return (columnNo == lineLength) ? -1 : columnNo;
     }
 }
