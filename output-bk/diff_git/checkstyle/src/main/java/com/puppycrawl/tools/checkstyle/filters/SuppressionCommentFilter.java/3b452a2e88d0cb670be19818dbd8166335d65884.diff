diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java
index cbf2fc135..81648fb69 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java
@@ -325,105 +325,100 @@ public class SuppressionCommentFilter
          * @throws ConversionException if unable to parse expanded text.
          * on.
          */
         public Tag(int line, int column, String text, boolean on, SuppressionCommentFilter filter) {
             this.line = line;
             this.column = column;
             this.text = text;
             this.on = on;
 
             //Expand regexp for check and message
             //Does not intern Patterns with Utils.getPattern()
             String format = "";
             try {
                 if (on) {
                     format =
                         expandFromCoont(text, filter.checkFormat, filter.onRegexp);
                     tagCheckRegexp = Pattern.compile(format);
                     if (filter.messageFormat != null) {
                         format =
                             expandFromCoont(text, filter.messageFormat, filter.onRegexp);
                         tagMessageRegexp = Pattern.compile(format);
                     }
                     else {
                         tagMessageRegexp = null;
                     }
                 }
                 else {
                     format =
                         expandFromCoont(text, filter.checkFormat, filter.offRegexp);
                     tagCheckRegexp = Pattern.compile(format);
                     if (filter.messageFormat != null) {
                         format =
                             expandFromCoont(
                                 text,
                                 filter.messageFormat,
                                 filter.offRegexp);
                         tagMessageRegexp = Pattern.compile(format);
                     }
                     else {
                         tagMessageRegexp = null;
                     }
                 }
             }
             catch (final PatternSyntaxException e) {
                 throw new ConversionException(
                     "unable to parse expanded comment " + format,
                     e);
             }
         }
 
-        /** @return the text of the tag. */
-        public String getText() {
-            return text;
-        }
-
         /** @return the line number of the tag in the source file. */
         public int getLine() {
             return line;
         }
 
         /**
          * Determines the column number of the tag in the source file.
          * Will be 0 for all lines of multiline comment, except the
          * first line.
          * @return the column number of the tag in the source file.
          */
         public int getColumn() {
             return column;
         }
 
         /**
          * Determines whether the suppression turns checkstyle reporting on or
          * off.
          * @return {@code true}if the suppression turns reporting on.
          */
         public boolean isOn() {
             return on;
         }
 
         /**
          * Compares the position of this tag in the file
          * with the position of another tag.
          * @param object the tag to compare with this one.
          * @return a negative number if this tag is before the other tag,
          * 0 if they are at the same position, and a positive number if this
          * tag is after the other tag.
          */
         @Override
         public int compareTo(Tag object) {
             if (line == object.line) {
                 return Integer.compare(column, object.column);
             }
 
             return Integer.compare(line, object.line);
         }
 
         @Override
         public boolean equals(Object o) {
             if (this == o) {
                 return true;
             }
             if (o == null || getClass() != o.getClass()) {
                 return false;
             }
             final Tag tag = (Tag) o;
@@ -437,55 +432,55 @@ public class SuppressionCommentFilter
         public int hashCode() {
             return Objects.hash(text, line, column, on);
         }
 
         /**
          * Determines whether the source of an audit event
          * matches the text of this tag.
          * @param event the {@code AuditEvent} to check.
          * @return true if the source of event matches the text of this tag.
          */
         public boolean isMatch(AuditEvent event) {
             final Matcher tagMatcher =
                 tagCheckRegexp.matcher(event.getSourceName());
             if (tagMatcher.find()) {
                 if (tagMessageRegexp != null) {
                     final Matcher messageMatcher =
                             tagMessageRegexp.matcher(event.getMessage());
                     return messageMatcher.find();
                 }
                 return true;
             }
             return false;
         }
 
         /**
          * Expand based on a matching comment.
          * @param comment the comment.
          * @param stringToExpand the string to expand.
          * @param regexp the parsed expander.
          * @return the expanded string
          */
         private static String expandFromCoont(
             String comment,
             String stringToExpand,
             Pattern regexp) {
             final Matcher matcher = regexp.matcher(comment);
             // Match primarily for effect.
             if (!matcher.find()) {
                 return stringToExpand;
             }
             String result = stringToExpand;
             for (int i = 0; i <= matcher.groupCount(); i++) {
                 // $n expands comment match like in Pattern.subst().
                 result = result.replaceAll("\\$" + i, matcher.group(i));
             }
             return result;
         }
 
         @Override
         public final String toString() {
-            return "Tag[line=" + getLine() + "; col=" + getColumn()
-                + "; on=" + isOn() + "; text='" + getText() + "']";
+            return "Tag[line=" + line + "; col=" + column
+                + "; on=" + on + "; text='" + text + "']";
         }
     }
 }
