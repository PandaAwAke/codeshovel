diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java b/src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java
index 82711b677..8ba390496 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java
@@ -122,106 +122,100 @@ public class JavadocDetailNodeParser {
             final ParseTree parseTree = parseJavadocAsParseTree(javadocComment);
 
             final DetailNode tree = convertParseTreeToDetailNode(parseTree);
             // adjust first line to indent of /**
             adjustFirstLineToJavadocIndent(tree,
                         javadocCommentAst.getColumnNo()
                                 + JAVADOC_START.length());
             result.setTree(tree);
         }
         catch (ParseCancellationException | IllegalArgumentException ex) {
             ParseErrorMessage parseErrorMessage = null;
 
             if (ex.getCause() instanceof FailedPredicateException
                     || ex.getCause() instanceof NoViableAltException) {
                 final RecognitionException recognitionEx = (RecognitionException) ex.getCause();
                 if (recognitionEx.getCtx() instanceof JavadocParser.HtmlTagContext) {
                     final Token htmlTagNameStart = getMissedHtmlTag(recognitionEx);
                     parseErrorMessage = new ParseErrorMessage(
                             errorListener.offset + htmlTagNameStart.getLine(),
                             MSG_JAVADOC_MISSED_HTML_CLOSE,
                             htmlTagNameStart.getCharPositionInLine(),
                             htmlTagNameStart.getText());
                 }
             }
 
             if (parseErrorMessage == null) {
                 // If syntax error occurs then message is printed by error listener
                 // and parser throws this runtime exception to stop parsing.
                 // Just stop processing current Javadoc comment.
                 parseErrorMessage = errorListener.getErrorMessage();
             }
 
             result.setParseErrorMessage(parseErrorMessage);
         }
 
         return result;
     }
 
     /**
      * Parses block comment content as javadoc comment.
      * @param blockComment
      *        block comment content.
      * @return parse tree
      * @noinspection deprecation
      */
     private ParseTree parseJavadocAsParseTree(String blockComment) {
         final ANTLRInputStream input = new ANTLRInputStream(blockComment);
 
         final JavadocLexer lexer = new JavadocLexer(input);
 
-        // remove default error listeners
-        lexer.removeErrorListeners();
-
-        // add custom error listener that logs parsing errors
-        lexer.addErrorListener(errorListener);
-
         final CommonTokenStream tokens = new CommonTokenStream(lexer);
 
         final JavadocParser parser = new JavadocParser(tokens);
 
         // remove default error listeners
         parser.removeErrorListeners();
 
         // add custom error listener that logs syntax errors
         parser.addErrorListener(errorListener);
 
         // This strategy stops parsing when parser error occurs.
         // By default it uses Error Recover Strategy which is slow and useless.
         parser.setErrorHandler(new JavadocParserErrorStrategy());
 
         return parser.javadoc();
     }
 
     /**
      * Converts ParseTree (that is generated by ANTLRv4) to DetailNode tree.
      *
      * @param parseTreeNode root node of ParseTree
      * @return root of DetailNode tree
      * @noinspection SuspiciousArrayCast
      */
     private DetailNode convertParseTreeToDetailNode(ParseTree parseTreeNode) {
         final JavadocNodeImpl rootJavadocNode = createRootJavadocNode(parseTreeNode);
 
         JavadocNodeImpl currentJavadocParent = rootJavadocNode;
         ParseTree parseTreeParent = parseTreeNode;
 
         while (currentJavadocParent != null) {
             // remove unnecessary children tokens
             if (currentJavadocParent.getType() == JavadocTokenTypes.TEXT) {
                 currentJavadocParent
                         .setChildren((DetailNode[]) JavadocNodeImpl.EMPTY_DETAIL_NODE_ARRAY);
             }
 
             final JavadocNodeImpl[] children =
                     (JavadocNodeImpl[]) currentJavadocParent.getChildren();
 
             insertChildrenNodes(children, parseTreeParent);
 
             if (children.length > 0) {
                 currentJavadocParent = children[0];
                 parseTreeParent = parseTreeParent.getChild(0);
             }
             else {
                 JavadocNodeImpl nextJavadocSibling = (JavadocNodeImpl) JavadocUtils
                         .getNextSibling(currentJavadocParent);
 
@@ -249,207 +243,203 @@ public class JavadocDetailNodeParser {
             }
         }
 
         return rootJavadocNode;
     }
 
     /**
      * Creates child nodes for each node from 'nodes' array.
      * @param parseTreeParent original ParseTree parent node
      * @param nodes array of JavadocNodeImpl nodes
      */
     private void insertChildrenNodes(final JavadocNodeImpl[] nodes, ParseTree parseTreeParent) {
         for (int i = 0; i < nodes.length; i++) {
             final JavadocNodeImpl currentJavadocNode = nodes[i];
             final ParseTree currentParseTreeNodeChild = parseTreeParent.getChild(i);
             final JavadocNodeImpl[] subChildren =
                     createChildrenNodes(currentJavadocNode, currentParseTreeNodeChild);
             currentJavadocNode.setChildren((DetailNode[]) subChildren);
         }
     }
 
     /**
      * Creates children Javadoc nodes base on ParseTree node's children.
      * @param parentJavadocNode node that will be parent for created children
      * @param parseTreeNode original ParseTree node
      * @return array of Javadoc nodes
      */
     private JavadocNodeImpl[]
             createChildrenNodes(JavadocNodeImpl parentJavadocNode, ParseTree parseTreeNode) {
         final JavadocNodeImpl[] children =
                 new JavadocNodeImpl[parseTreeNode.getChildCount()];
 
         for (int j = 0; j < children.length; j++) {
             final JavadocNodeImpl child =
                     createJavadocNode(parseTreeNode.getChild(j), parentJavadocNode, j);
 
             children[j] = child;
         }
         return children;
     }
 
     /**
      * Creates root JavadocNodeImpl node base on ParseTree root node.
      * @param parseTreeNode ParseTree root node
      * @return root Javadoc node
      */
     private JavadocNodeImpl createRootJavadocNode(ParseTree parseTreeNode) {
         final JavadocNodeImpl rootJavadocNode = createJavadocNode(parseTreeNode, null, -1);
 
         final int childCount = parseTreeNode.getChildCount();
-        final JavadocNodeImpl[] children = new JavadocNodeImpl[childCount];
+        final DetailNode[] children = rootJavadocNode.getChildren();
 
         for (int i = 0; i < childCount; i++) {
             final JavadocNodeImpl child = createJavadocNode(parseTreeNode.getChild(i),
                     rootJavadocNode, i);
             children[i] = child;
         }
-        rootJavadocNode.setChildren((DetailNode[]) children);
+        rootJavadocNode.setChildren(children);
         return rootJavadocNode;
     }
 
     /**
      * Creates JavadocNodeImpl node on base of ParseTree node.
      *
      * @param parseTree ParseTree node
      * @param parent DetailNode that will be parent of new node
      * @param index child index that has new node
      * @return JavadocNodeImpl node on base of ParseTree node.
      */
     private JavadocNodeImpl createJavadocNode(ParseTree parseTree, DetailNode parent, int index) {
         final JavadocNodeImpl node = new JavadocNodeImpl();
         if (parseTree.getChildCount() == 0
                 || "Text".equals(getNodeClassNameWithoutContext(parseTree))) {
             node.setText(parseTree.getText());
         }
         else {
             node.setText(getFormattedNodeClassNameWithoutContext(parseTree));
         }
         node.setColumnNumber(getColumn(parseTree));
         node.setLineNumber(getLine(parseTree) + blockCommentLineNumber);
         node.setIndex(index);
         node.setType(getTokenType(parseTree));
         node.setParent(parent);
         node.setChildren((DetailNode[]) new JavadocNodeImpl[parseTree.getChildCount()]);
         return node;
     }
 
     /**
      * Adjust first line nodes to javadoc indent.
      * @param tree DetailNode tree root
      * @param javadocColumnNumber javadoc indent
      */
     private void adjustFirstLineToJavadocIndent(DetailNode tree, int javadocColumnNumber) {
         if (tree.getLineNumber() == blockCommentLineNumber) {
             ((JavadocNodeImpl) tree).setColumnNumber(tree.getColumnNumber() + javadocColumnNumber);
             final DetailNode[] children = tree.getChildren();
             for (DetailNode child : children) {
                 adjustFirstLineToJavadocIndent(child, javadocColumnNumber);
             }
         }
     }
 
     /**
      * Gets line number from ParseTree node.
      * @param tree
      *        ParseTree node
      * @return line number
      */
     private static int getLine(ParseTree tree) {
         final int line;
         if (tree instanceof TerminalNode) {
             line = ((TerminalNode) tree).getSymbol().getLine() - 1;
         }
         else {
             final ParserRuleContext rule = (ParserRuleContext) tree;
             line = rule.start.getLine() - 1;
         }
         return line;
     }
 
     /**
      * Gets column number from ParseTree node.
      * @param tree
      *        ParseTree node
      * @return column number
      */
     private static int getColumn(ParseTree tree) {
         final int column;
         if (tree instanceof TerminalNode) {
             column = ((TerminalNode) tree).getSymbol().getCharPositionInLine();
         }
         else {
             final ParserRuleContext rule = (ParserRuleContext) tree;
             column = rule.start.getCharPositionInLine();
         }
         return column;
     }
 
     /**
      * Gets next sibling of ParseTree node.
      * @param node ParseTree node
      * @return next sibling of ParseTree node.
      */
     private static ParseTree getNextSibling(ParseTree node) {
         ParseTree nextSibling = null;
 
         if (node.getParent() != null) {
             final ParseTree parent = node.getParent();
-            final int childCount = parent.getChildCount();
-
             int index = 0;
             while (true) {
                 final ParseTree currentNode = parent.getChild(index);
                 if (currentNode.equals(node)) {
-                    if (index != childCount - 1) {
-                        nextSibling = parent.getChild(index + 1);
-                    }
+                    nextSibling = parent.getChild(index + 1);
                     break;
                 }
                 index++;
             }
         }
         return nextSibling;
     }
 
     /**
      * Gets token type of ParseTree node from JavadocTokenTypes class.
      * @param node ParseTree node.
      * @return token type from JavadocTokenTypes
      */
     private static int getTokenType(ParseTree node) {
         final int tokenType;
 
         if (node.getChildCount() == 0) {
             tokenType = ((TerminalNode) node).getSymbol().getType();
         }
         else {
             final String className = getNodeClassNameWithoutContext(node);
             final String typeName =
                     CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, className);
             tokenType = JavadocUtils.getTokenId(typeName);
         }
 
         return tokenType;
     }
 
     /**
      * Gets class name of ParseTree node and removes 'Context' postfix at the
      * end and formats it.
      * @param node {@code ParseTree} node whose class name is to be formatted and returned
      * @return uppercased class name without the word 'Context' and with appropriately
      *     inserted underscores
      */
     private static String getFormattedNodeClassNameWithoutContext(ParseTree node) {
         final String classNameWithoutContext = getNodeClassNameWithoutContext(node);
         return CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, classNameWithoutContext);
     }
 
     /**
      * Gets class name of ParseTree node and removes 'Context' postfix at the
      * end.
      * @param node
      *        ParseTree node.
      * @return class name without 'Context'
      */
     private static String getNodeClassNameWithoutContext(ParseTree node) {
         final String className = node.getClass().getSimpleName();
