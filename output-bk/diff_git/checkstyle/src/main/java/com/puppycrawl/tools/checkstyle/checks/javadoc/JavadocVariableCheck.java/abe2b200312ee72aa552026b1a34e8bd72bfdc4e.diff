diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java
index dd608312b..619b7ac68 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java
@@ -53,100 +53,109 @@ public class JavadocVariableCheck
      * Sets the scope to check.
      * @param from string to get the scope from
      */
     public void setScope(String from)
     {
         scope = Scope.getInstance(from);
     }
 
     /**
      * Set the excludeScope.
      * @param scope a <code>String</code> value
      */
     public void setExcludeScope(String scope)
     {
         excludeScope = Scope.getInstance(scope);
     }
 
     /**
      * Sets the variable names to ignore in the check.
      * @param regexp regexp to define variable names to ignore.
      */
     public void setIgnoreNamePattern(String regexp)
     {
         ignoreNameRegexp = regexp;
         if (!(regexp == null || regexp.length() == 0)) {
             ignoreNamePattern = Pattern.compile(regexp);
         }
         else {
             ignoreNamePattern = null;
         }
     }
 
     /**
      * Gets the variable names to ignore in the check.
      * @return true regexp string to define variable names to ignore.
      */
     public String getIgnoreNamePattern()
     {
         return ignoreNameRegexp;
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.VARIABLE_DEF,
             TokenTypes.ENUM_CONSTANT_DEF,
         };
     }
 
+    @Override
+    public int[] getAcceptableTokens()
+    {
+        return new int[] {
+            TokenTypes.VARIABLE_DEF,
+            TokenTypes.ENUM_CONSTANT_DEF,
+        };
+    }
+
     @Override
     public void visitToken(DetailAST ast)
     {
         if (shouldCheck(ast)) {
             final FileContents contents = getFileContents();
             final TextBlock cmt =
                 contents.getJavadocBefore(ast.getLineNo());
 
             if (cmt == null) {
                 log(ast, "javadoc.missing");
             }
         }
     }
 
     /**
      * Decides whether the variable name of an AST is in the ignore list.
      * @param ast the AST to check
      * @return true if the variable name of ast is in the ignore list.
      */
     private boolean isIgnored(DetailAST ast)
     {
         final String name = ast.findFirstToken(TokenTypes.IDENT).getText();
         return ignoreNamePattern != null
                 && ignoreNamePattern.matcher(name).matches();
     }
 
     /**
      * Whether we should check this node.
      * @param ast a given node.
      * @return whether we should check a given node.
      */
     private boolean shouldCheck(final DetailAST ast)
     {
         if (ScopeUtils.inCodeBlock(ast) || isIgnored(ast)) {
             return false;
         }
 
         final Scope scope;
         if (ast.getType() == TokenTypes.ENUM_CONSTANT_DEF) {
             scope = Scope.PUBLIC;
         }
         else {
             final DetailAST mods = ast.findFirstToken(TokenTypes.MODIFIERS);
             final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);
             scope =
                 ScopeUtils.inInterfaceOrAnnotationBlock(ast)
                     ? Scope.PUBLIC : declaredScope;
         }
 
         final Scope surroundingScope = ScopeUtils.getSurroundingScope(ast);
