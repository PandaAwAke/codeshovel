diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheck.java
index 4b810689b..71604f355 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheck.java
@@ -17,68 +17,68 @@
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * Checks the style of array type definitions.
  * Some like Java-style: <code>public static void main(String[] args)</code>
  * and some like C-style: public static void main(String args[])
  *
  * By default the Check enforces Java style.
  * @author lkuehne
  */
 public class ArrayTypeStyleCheck extends Check
 {
     /** controls whether to use Java or C style */
     private boolean javaStyle = true;
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.ARRAY_DECLARATOR};
     }
 
     @Override
     public int[] getAcceptableTokens()
     {
         return new int[] {TokenTypes.ARRAY_DECLARATOR};
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
         final DetailAST typeAST = ast.getParent();
         if (typeAST.getType() != TokenTypes.TYPE) {
             return;
         }
         final DetailAST declAST = typeAST.getParent();
         if (declAST.getType() == TokenTypes.METHOD_DEF) {
             // Do not check method's return type.
             // We have no alternatives here.
             return;
         }
 
         final DetailAST variableAST = typeAST.getNextSibling();
         if (variableAST != null) {
             final boolean isJavaStyle =
-                (variableAST.getLineNo() > ast.getLineNo())
-                || (variableAST.getColumnNo() > ast.getColumnNo());
+                variableAST.getLineNo() > ast.getLineNo()
+                || variableAST.getColumnNo() > ast.getColumnNo();
 
             if (isJavaStyle != javaStyle) {
                 log(ast.getLineNo(), ast.getColumnNo(), "array.type.style");
             }
         }
     }
 
     /**
      * Controls whether to check for Java or C style.
      * @param javaStyle true if Java style should be used.
      */
     public void setJavaStyle(boolean javaStyle)
     {
         this.javaStyle = javaStyle;
     }
 }
