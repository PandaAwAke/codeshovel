diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java
index ba4f2fc23..29977f0c0 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java
@@ -54,157 +54,155 @@ public abstract class AbstractSuperCheck
      */
     protected abstract String getMethodName();
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.METHOD_DEF,
             TokenTypes.LITERAL_SUPER,
         };
     }
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getRequiredTokens() {
         return getDefaultTokens();
     }
 
     @Override
     public void beginTree(DetailAST rootAST) {
         methodStack.clear();
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         if (isOverridingMethod(ast)) {
             methodStack.add(new MethodNode(ast));
         }
         else if (isSuperCall(ast)) {
             final MethodNode methodNode = methodStack.getLast();
             methodNode.setCallingSuper();
         }
     }
 
     /**
      * Determines whether a 'super' literal is a call to the super method
      * for this check.
      * @param literalSuperAst the AST node of a 'super' literal.
      * @return true if ast is a call to the super method for this check.
      */
     private boolean isSuperCall(DetailAST literalSuperAst) {
         boolean superCall = false;
 
         if (literalSuperAst.getType() == TokenTypes.LITERAL_SUPER) {
             // dot operator?
             final DetailAST dotAst = literalSuperAst.getParent();
 
-            if (dotAst.getType() == TokenTypes.DOT
-                && !isSameNameMethod(literalSuperAst)
+            if (!isSameNameMethod(literalSuperAst)
                 && !hasArguments(dotAst)) {
                 superCall = isSuperCallInOverridingMethod(dotAst);
             }
         }
         return superCall;
     }
 
     /**
      * Determines whether a super call in overriding method.
      *
      * @param ast The AST node of a 'dot operator' in 'super' call.
      * @return true if super call in overriding method.
      */
     private boolean isSuperCallInOverridingMethod(DetailAST ast) {
         boolean inOverridingMethod = false;
         DetailAST dotAst = ast;
 
-        while (dotAst != null
-                && dotAst.getType() != TokenTypes.CTOR_DEF
+        while (dotAst.getType() != TokenTypes.CTOR_DEF
                 && dotAst.getType() != TokenTypes.INSTANCE_INIT) {
 
             if (dotAst.getType() == TokenTypes.METHOD_DEF) {
                 inOverridingMethod = isOverridingMethod(dotAst);
                 break;
             }
             dotAst = dotAst.getParent();
 
         }
         return inOverridingMethod;
     }
 
     /**
      * Does method have any arguments.
      * @param methodCallDotAst DOT DetailAST
      * @return true if any parameters found
      */
     private static boolean hasArguments(DetailAST methodCallDotAst) {
         final DetailAST argumentsList = methodCallDotAst.getNextSibling();
         return argumentsList.getChildCount() > 0;
     }
 
     /**
      * Is same name of method.
      * @param ast method AST
      * @return true if method name is the same
      */
     private boolean isSameNameMethod(DetailAST ast) {
 
         AST sibling = ast.getNextSibling();
         // ignore type parameters
         if (sibling != null
             && sibling.getType() == TokenTypes.TYPE_ARGUMENTS) {
             sibling = sibling.getNextSibling();
         }
-        if (sibling == null || sibling.getType() != TokenTypes.IDENT) {
+        if (sibling == null) {
             return true;
         }
         final String name = sibling.getText();
         return !getMethodName().equals(name);
     }
 
     @Override
     public void leaveToken(DetailAST ast) {
         if (isOverridingMethod(ast)) {
             final MethodNode methodNode =
                 methodStack.removeLast();
             if (!methodNode.isCallingSuper()) {
                 final DetailAST methodAST = methodNode.getMethod();
                 final DetailAST nameAST =
                     methodAST.findFirstToken(TokenTypes.IDENT);
                 log(nameAST.getLineNo(), nameAST.getColumnNo(),
                     MSG_KEY, nameAST.getText());
             }
         }
     }
 
     /**
      * Determines whether an AST is a method definition for this check,
      * with 0 parameters.
      * @param ast the method definition AST.
      * @return true if the method of ast is a method for this check.
      */
     private boolean isOverridingMethod(DetailAST ast) {
         boolean overridingMethod = false;
 
         if (ast.getType() == TokenTypes.METHOD_DEF
                 && !ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {
             final DetailAST nameAST = ast.findFirstToken(TokenTypes.IDENT);
             final String name = nameAST.getText();
             final DetailAST modifiersAST = ast.findFirstToken(TokenTypes.MODIFIERS);
 
             if (getMethodName().equals(name)
                     && !modifiersAST.branchContains(TokenTypes.LITERAL_NATIVE)) {
                 final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);
                 overridingMethod = params.getChildCount() == 0;
             }
         }
         return overridingMethod;
     }
 
     /**
      * Stack node for a method definition and a record of
      * whether the method has a call to the super method.
      * @author Rick Giles
      */
