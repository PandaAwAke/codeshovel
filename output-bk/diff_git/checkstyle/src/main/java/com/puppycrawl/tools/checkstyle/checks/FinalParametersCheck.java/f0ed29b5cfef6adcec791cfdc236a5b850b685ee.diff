diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/FinalParametersCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/FinalParametersCheck.java
index 3a2474778..308565a87 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/FinalParametersCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/FinalParametersCheck.java
@@ -96,101 +96,102 @@ public class FinalParametersCheck extends AbstractCheck {
 
     @Override
     public int[] getDefaultTokens() {
         return new int[] {
             TokenTypes.METHOD_DEF,
             TokenTypes.CTOR_DEF,
         };
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.METHOD_DEF,
             TokenTypes.CTOR_DEF,
             TokenTypes.LITERAL_CATCH,
             TokenTypes.FOR_EACH_CLAUSE,
         };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return CommonUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         // don't flag interfaces
         final DetailAST container = ast.getParent().getParent();
         if (container.getType() != TokenTypes.INTERFACE_DEF) {
             if (ast.getType() == TokenTypes.LITERAL_CATCH) {
                 visitCatch(ast);
             }
             else if (ast.getType() == TokenTypes.FOR_EACH_CLAUSE) {
                 visitForEachClause(ast);
             }
             else {
                 visitMethod(ast);
             }
         }
     }
 
     /**
      * Checks parameters of the method or ctor.
      * @param method method or ctor to check.
      */
     private void visitMethod(final DetailAST method) {
         final DetailAST modifiers =
             method.findFirstToken(TokenTypes.MODIFIERS);
         // exit on fast lane if there is nothing to check here
 
-        if (method.branchContains(TokenTypes.PARAMETER_DEF)
+        if (method.findFirstToken(TokenTypes.PARAMETERS)
+                .findFirstToken(TokenTypes.PARAMETER_DEF) != null
                 // ignore abstract and native methods
                 && modifiers.findFirstToken(TokenTypes.ABSTRACT) == null
                 && modifiers.findFirstToken(TokenTypes.LITERAL_NATIVE) == null) {
             // we can now be sure that there is at least one parameter
             final DetailAST parameters =
                 method.findFirstToken(TokenTypes.PARAMETERS);
             DetailAST child = parameters.getFirstChild();
             while (child != null) {
                 // children are PARAMETER_DEF and COMMA
                 if (child.getType() == TokenTypes.PARAMETER_DEF) {
                     checkParam(child);
                 }
                 child = child.getNextSibling();
             }
         }
     }
 
     /**
      * Checks parameter of the catch block.
      * @param catchClause catch block to check.
      */
     private void visitCatch(final DetailAST catchClause) {
         checkParam(catchClause.findFirstToken(TokenTypes.PARAMETER_DEF));
     }
 
     /**
      * Checks parameter of the for each clause.
      * @param forEachClause for each clause to check.
      */
     private void visitForEachClause(final DetailAST forEachClause) {
         checkParam(forEachClause.findFirstToken(TokenTypes.VARIABLE_DEF));
     }
 
     /**
      * Checks if the given parameter is final.
      * @param param parameter to check.
      */
     private void checkParam(final DetailAST param) {
         if (!param.branchContains(TokenTypes.FINAL) && !isIgnoredParam(param)
                 && !CheckUtils.isReceiverParameter(param)) {
             final DetailAST paramName = param.findFirstToken(TokenTypes.IDENT);
             final DetailAST firstNode = CheckUtils.getFirstNode(param);
             log(firstNode.getLineNo(), firstNode.getColumnNo(),
                 MSG_KEY, paramName.getText());
         }
     }
 
     /**
      * Checks for skip current param due to <b>ignorePrimitiveTypes</b> option.
      * @param paramDef {@link TokenTypes#PARAMETER_DEF PARAMETER_DEF}
