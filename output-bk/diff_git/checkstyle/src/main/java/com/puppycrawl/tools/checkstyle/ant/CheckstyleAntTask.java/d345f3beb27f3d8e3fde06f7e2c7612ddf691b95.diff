diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
index 868def572..37776e226 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
@@ -86,154 +86,154 @@ public class CheckstyleAntTask extends Task {
     /** Contains the formatters to log to */
     private final List<Formatter> formatters = Lists.newArrayList();
 
     /** Contains the Properties to override */
     private final List<Property> overrideProps = Lists.newArrayList();
 
     /** The name of the properties file */
     private File properties;
 
     /** The maximum number of errors that are tolerated. */
     private int maxErrors;
 
     /** The maximum number of warnings that are tolerated. */
     private int maxWarnings = Integer.MAX_VALUE;
 
     /**
      * Whether to omit ignored modules - some modules may log tove
      * their severity depending on their configuration (e.g. WriteTag) so
      * need to be included
      */
     private boolean omitIgnoredModules = true;
 
     ////////////////////////////////////////////////////////////////////////////
     // Setters for ANT specific attributes
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Tells this task to set the named property to "true" when there
      * is a violation.
      * @param propertyName the name of the property to set
      *                      in the event of an failure.
      */
     public void setFailureProperty(String propertyName) {
         failureProperty = propertyName;
     }
 
     /** @param fail whether to fail if a violation is found */
     public void setFailOnViolation(boolean fail) {
         failOnViolation = fail;
     }
 
     /**
      * Sets the maximum number of errors allowed. Default is 0.
      * @param maxErrors the maximum number of errors allowed.
      */
     public void setMaxErrors(int maxErrors) {
         this.maxErrors = maxErrors;
     }
 
     /**
-     * Sets the maximum number of warings allowed. Default is
+     * Sets the maximum number of warnings allowed. Default is
      * {@link Integer#MAX_VALUE}.
      * @param maxWarnings the maximum number of warnings allowed.
      */
     public void setMaxWarnings(int maxWarnings) {
         this.maxWarnings = maxWarnings;
     }
 
     /**
-     * Adds uset of files (nested fileset attribute).
+     * Adds set of files (nested fileset attribute).
      * @param fS the file set to add
      */
     public void addFileset(FileSet fS) {
         fileSets.add(fS);
     }
 
     /**
      * Add a formatter.
      * @param formatter the formatter to add for logging.
      */
     public void addFormatter(Formatter formatter) {
         formatters.add(formatter);
     }
 
     /**
      * Add an override property.
      * @param property the property to add
      */
     public void addProperty(Property property) {
         overrideProps.add(property);
     }
 
     /**
      * Set the class path.
-     * @param classpath the path to locate cluses
+     * @param classpath the path to locate classes
      */
     public void setClasspath(Path classpath) {
         if (this.classpath == null) {
             this.classpath = classpath;
         }
         else {
             this.classpath.append(classpath);
         }
     }
 
     /**
      * Set the class path from a reference defined elsewhere.
      * @param classpathRef the reference to an instance defining the classpath
      */
     public void setClasspathRef(Reference classpathRef) {
         createClasspath().setRefid(classpathRef);
     }
 
-    /** @return a created path for locating cluses */
+    /** @return a created path for locating classes */
     public Path createClasspath() {
         if (classpath == null) {
             classpath = new Path(getProject());
         }
         return classpath.createPath();
     }
 
     /** @param file the file to be checked */
     public void setFile(File file) {
         fileName = file.getAbsolutePath();
     }
 
     /** @param file the configuration file to use */
     public void setConfig(File file) {
         setConfigLocation(file.getAbsolutePath());
     }
 
     /** @param url the URL of the configuration to use */
     public void setConfigURL(URL url) {
         setConfigLocation(url.toExternalForm());
     }
 
     /**
      * Sets the location of the configuration.
      * @param location the location, which is either a
      */
     private void setConfigLocation(String location) {
         if (configLocation != null) {
             throw new BuildException("Attributes 'config' and 'configURL' "
                     + "must not be set at the same time");
         }
         configLocation = location;
     }
 
     /** @param omit whether to omit ignored modules */
     public void setOmitIgnoredModules(boolean omit) {
         omitIgnoredModules = omit;
     }
 
     ////////////////////////////////////////////////////////////////////////////
     // Setters for Checker configuration attributes
     ////////////////////////////////////////////////////////////////////////////
 
     /**
      * Sets a properties file for use instead
      * of individually setting them.
      * @param props the properties File to use
      */
     public void setProperties(File props) {
         properties = props;
@@ -559,64 +559,64 @@ public class CheckstyleAntTask extends Task {
          * @param task the task to possibly log to
          * @return an XMLLogger instance
          * @throws IOException if an error occurs
          */
         private AuditListener createXMLLogger(Task task) throws IOException {
             if (toFile == null || !useFile) {
                 return new XMLLogger(new LogOutputStream(task,
                         Project.MSG_INFO), true);
             }
             return new XMLLogger(new FileOutputStream(toFile), true);
         }
     }
 
     /**
      * Represents a property that consists of a key and value.
      */
     public static class Property {
         /** The property key */
         private String key;
         /** The property value */
         private String value;
 
         /** @return the property key */
         public String getKey() {
             return key;
         }
 
         /** @param key sets the property key */
         public void setKey(String key) {
             this.key = key;
         }
 
         /** @return the property value */
         public String getValue() {
             return value;
         }
 
         /** @param value set the property value */
         public void setValue(String value) {
             this.value = value;
         }
 
         /** @param file set the property value from a File */
         public void setFile(File file) {
             value = file.getAbsolutePath();
         }
     }
 
     /** Represents a custom listener. */
     public static class Listener {
-        /** Classname of the listener class */
-        private String classname;
+        /** Class name of the listener class */
+        private String className;
 
-        /** @return the classname */
+        /** @return the class name */
         public String getClassname() {
-            return classname;
+            return className;
         }
 
-        /** @param classname set the classname */
-        public void setClassname(String classname) {
-            this.classname = classname;
+        /** @param name set the class name */
+        public void setClassname(String name) {
+            className = name;
         }
     }
 }
