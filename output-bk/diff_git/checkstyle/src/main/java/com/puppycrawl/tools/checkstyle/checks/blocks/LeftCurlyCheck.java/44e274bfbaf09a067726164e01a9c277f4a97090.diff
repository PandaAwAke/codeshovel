diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
index ccace3235..f7feb429d 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
@@ -260,119 +260,119 @@ public class LeftCurlyCheck
         }
         final int lastAnnotLineNumber = lastAnnot.getLineNo();
         while (lastAnnot.getPreviousSibling() != null
                && lastAnnot.getPreviousSibling().getLineNo()
                     == lastAnnotLineNumber)
         {
             lastAnnot = lastAnnot.getPreviousSibling();
         }
         return lastAnnot;
     }
 
     /**
      * Find the last token of type <code>TokenTypes.ANNOTATION</code>
      * under the given set of modifiers.
      * @param modifiers <code>DetailAST</code>.
      * @return <code>DetailAST</code> or null if there are no annotations.
      */
     private DetailAST findLastAnnotation(DetailAST modifiers)
     {
         DetailAST annot = modifiers.findFirstToken(TokenTypes.ANNOTATION);
         while (annot != null && annot.getNextSibling() != null
                && annot.getNextSibling().getType() == TokenTypes.ANNOTATION)
         {
             annot = annot.getNextSibling();
         }
         return annot;
     }
 
     /**
      * Verifies that a specified left curly brace is placed correctly
      * according to policy.
      * @param brace token for left curly brace
      * @param startToken token for start of expression
      */
     private void verifyBrace(final DetailAST brace,
                              final DetailAST startToken)
     {
         final String braceLine = getLine(brace.getLineNo() - 1);
 
         // calculate the previous line length without trailing whitespace. Need
         // to handle the case where there is no previous line, cause the line
         // being check is the first line in the file.
         final int prevLineLen = brace.getLineNo() == 1
             ? maxLineLength
             : Utils.lengthMinusTrailingWhitespace(getLine(brace.getLineNo() - 2));
 
         // Check for being told to ignore, or have '{}' which is a special case
         if (braceLine.length() > brace.getColumnNo() + 1
             && braceLine.charAt(brace.getColumnNo() + 1) == '}')
         {
-            ; // ignore
+            // ignore
         }
         else if (getAbstractOption() == LeftCurlyOption.NL) {
             if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {
                 log(brace.getLineNo(), brace.getColumnNo(),
                     MSG_KEY_LINE_NEW, "{");
             }
         }
         else if (getAbstractOption() == LeftCurlyOption.EOL) {
             if (Utils.whitespaceBefore(brace.getColumnNo(), braceLine)
                 && prevLineLen + 2 <= maxLineLength)
             {
                 log(brace.getLineNo(), brace.getColumnNo(),
                     MSG_KEY_LINE_PREVIOUS, "{");
             }
             if (!hasLineBreakAfter(brace)) {
                 log(brace.getLineNo(), brace.getColumnNo(), MSG_KEY_LINE_BREAK_AFTER);
             }
         }
         else if (getAbstractOption() == LeftCurlyOption.NLOW) {
             if (startToken.getLineNo() == brace.getLineNo()) {
-                ; // all ok as on the same line
+                // all ok as on the same line
             }
             else if (startToken.getLineNo() + 1 == brace.getLineNo()) {
                 if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {
                     log(brace.getLineNo(), brace.getColumnNo(),
                         MSG_KEY_LINE_NEW, "{");
                 }
                 else if (prevLineLen + 2 <= maxLineLength) {
                     log(brace.getLineNo(), brace.getColumnNo(),
                         MSG_KEY_LINE_PREVIOUS, "{");
                 }
             }
             else if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {
                 log(brace.getLineNo(), brace.getColumnNo(),
                     MSG_KEY_LINE_NEW, "{");
             }
         }
     }
 
     /**
      * Checks if left curly has line break after.
      * @param leftCurly
      *        Left curly token.
      * @return
      *        True, left curly has line break after.
      */
     private boolean hasLineBreakAfter(DetailAST leftCurly)
     {
         DetailAST nextToken = null;
         if (leftCurly.getType() == TokenTypes.SLIST) {
             nextToken = leftCurly.getFirstChild();
         }
         else {
             if (leftCurly.getParent().getParent().getType() == TokenTypes.ENUM_DEF)
             {
                 if (!ignoreEnums) {
                     nextToken = leftCurly.getNextSibling();
                 }
             }
         }
         if (nextToken != null && nextToken.getType() != TokenTypes.RCURLY) {
             if (leftCurly.getLineNo() == nextToken.getLineNo()) {
                 return false;
             }
         }
         return true;
     }
 }
