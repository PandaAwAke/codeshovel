diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedForDepthCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedForDepthCheck.java
index 17626a6bb..d24b6847a 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedForDepthCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedForDepthCheck.java
@@ -22,62 +22,58 @@ package com.puppycrawl.tools.checkstyle.checks.coding;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * Check the number of nested <code>for</code> -statements. The maximum
  * number of nested layers can be configured. The default value is 1. Most of
  * the logic is implemented in the parent class. The code for the class is
  * copied from the NestedIfDepthCheck-class. The only difference is the
  * intercepted token (for instead of if). Example:
  * <pre>
  *  &lt;!-- Restricts nested for blocks to a specified depth (default = 1).
  *                                                                        --&gt;
  *  &lt;module name=&quot;com.puppycrawl.tools.checkstyle.checks.coding
  *                                            .CatchWithLostStackCheck&quot;&gt;
  *    &lt;property name=&quot;severity&quot; value=&quot;info&quot;/&gt;
  *    &lt;property name=&quot;max&quot; value=&quot;1&quot;/&gt;
  *  &lt;/module&gt;
  * </pre>
  * @author Alexander Jesse
  * @see com.puppycrawl.tools.checkstyle.checks.coding.AbstractNestedDepthCheck
  * @see com.puppycrawl.tools.checkstyle.checks.coding.NestedIfDepthCheck
  */
 public final class NestedForDepthCheck extends AbstractNestedDepthCheck {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "nested.for.depth";
 
     /** default allowed nesting depth. */
     private static final int DEFAULT_MAX = 1;
 
     /** Creates new check instance with default allowed nesting depth. */
     public NestedForDepthCheck() {
         super(DEFAULT_MAX);
     }
 
     @Override
     public int[] getDefaultTokens() {
         return new int[] {TokenTypes.LITERAL_FOR};
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.LITERAL_FOR};
     }
 
     @Override
     public void visitToken(DetailAST ast) {
-        if (TokenTypes.LITERAL_FOR == ast.getType()) {
-            nestIn(ast, MSG_KEY);
-        }
+        nestIn(ast, MSG_KEY);
     }
 
     @Override
     public void leaveToken(DetailAST ast) {
-        if (TokenTypes.LITERAL_FOR == ast.getType()) {
-            nestOut();
-        }
+        nestOut();
     }
 }
