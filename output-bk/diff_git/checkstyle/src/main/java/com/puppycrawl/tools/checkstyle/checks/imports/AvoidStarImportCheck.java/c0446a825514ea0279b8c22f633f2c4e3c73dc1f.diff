diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java
index ec63ca2d8..b74891c7e 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java
@@ -51,101 +51,101 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  * allow certain classes like java.lang.Math or java.io.File to be
  * excluded in order to support static member imports.
  *
  * The optional "allowClassImports" when set to true, will allow starred
  * class imports but will not affect static member imports.
  *
  * The optional "allowStaticMemberImports" when set to true will allow
  * starred static member imports but will not affect class imports.
  *
  * @author Oliver Burn
  * @author <a href="bschneider@vecna.com">Bill Schneider</a>
  * @author Travis Schneeberger
  */
 public class AvoidStarImportCheck
     extends Check
 {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "import.avoidStar";
 
     /** the packages/classes to exempt from this check. */
     private final List<String> excludes = Lists.newArrayList();
 
     /** whether to allow all class imports */
     private boolean allowClassImports;
 
     /** whether to allow all static member imports */
     private boolean allowStaticMemberImports;
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};
     }
 
     @Override
     public int[] getAcceptableTokens()
     {
         return new int[] {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};
     }
 
     /**
      * Sets the list of packages or classes to be exempt from the check.
      * The excludes can contain a .* or not.
      * @param excludesParam a list of package names/fully-qualifies class names
      * where star imports are ok
      */
-    public void setExcludes(String[] excludesParam)
+    public void setExcludes(String... excludesParam)
     {
         excludes.clear();
         for (final String exclude : excludesParam) {
             excludes.add(exclude.endsWith(".*") ? exclude : exclude + ".*");
         }
     }
 
     /**
      * Sets whether or not to allow all non-static class imports.
      * @param allow true to allow false to disallow
      */
     public void setAllowClassImports(boolean allow)
     {
         allowClassImports = allow;
     }
 
     /**
      * Sets whether or not to allow all static member imports.
      * @param allow true to allow false to disallow
      */
     public void setAllowStaticMemberImports(boolean allow)
     {
         allowStaticMemberImports = allow;
     }
 
     @Override
     public void visitToken(final DetailAST ast)
     {
         if (!allowClassImports && TokenTypes.IMPORT == ast.getType()) {
             final DetailAST startingDot = ast.getFirstChild();
             logsStarredImportViolation(startingDot);
         }
         else if (!allowStaticMemberImports
             && TokenTypes.STATIC_IMPORT == ast.getType())
         {
             // must navigate past the static keyword
             final DetailAST startingDot = ast.getFirstChild().getNextSibling();
             logsStarredImportViolation(startingDot);
         }
     }
 
     /**
      * Gets the full import identifier.  If the import is a starred import and
      * it's not excluded then a violation is logged.
      * @param startingDot the starting dot for the import statement
      */
     private void logsStarredImportViolation(DetailAST startingDot)
     {
         final FullIdent name = FullIdent.createFullIdent(startingDot);
         if (isStaredImport(name) && !excludes.contains(name.getText())) {
