diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java
index 33699fec1..d1dd5a116 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java
@@ -23,143 +23,134 @@ import java.util.Iterator;
 import java.util.NavigableMap;
 import java.util.TreeMap;
 
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * This class checks line-wrapping into definitions and expressions. The
  * line-wrapping indentation should be not less then value of the
  * lineWrappingIndentation parameter.
  *
  * @author maxvetrenko
  *
  */
 public class LineWrappingHandler
 {
 
     /**
      * The current instance of <code>IndentationCheck</code> class using this
      * handler. This field used to get access to private fields of
      * IndentationCheck instance.
      */
     private final IndentationCheck indentCheck;
 
     /**
      * Root node for current expression.
      */
     private DetailAST firstNode;
 
     /**
      * Last node for current expression.
      */
     private DetailAST lastNode;
 
     /**
      * User's value of line wrapping indentation.
      */
     private int indentLevel;
 
     /**
      * Force strict condition in line wrapping case.
      */
     private boolean forceStrictCondition;
 
     /**
      * Sets values of class field, finds last node and calculates indentation level.
      *
      * @param instance
      *            instance of IndentationCheck.
      * @param firstNode
-     *            root node for current expression..
+     *            root node for current expression.
+     * @param lastNode
+     *            last node for current expression.
      */
-    public LineWrappingHandler(IndentationCheck instance, DetailAST firstNode)
+    public LineWrappingHandler(IndentationCheck instance, DetailAST firstNode, DetailAST lastNode)
     {
         indentCheck = instance;
         this.firstNode = firstNode;
-        lastNode = findLastNode(firstNode);
+        this.lastNode = lastNode;
         indentLevel = indentCheck.getLineWrappingIndentation();
         forceStrictCondition = indentCheck.getForceStrictCondition();
     }
 
-    /**
-     * Finds last node of AST subtree.
-     *
-     * @param firstNode the first node of expression or definition.
-     * @return last node.
-     */
-    public DetailAST findLastNode(DetailAST firstNode)
-    {
-        return firstNode.getLastChild().getPreviousSibling();
-    }
-
     /**
      * @return correct indentation for current expression.
      */
-    public int getCurrentIndentation()
+    protected int getCurrentIndentation()
     {
         return firstNode.getColumnNo() + indentLevel;
     }
 
     // Getters for private fields.
 
-    public final DetailAST getFirstNode()
+    protected final DetailAST getFirstNode()
     {
         return firstNode;
     }
 
-    public final DetailAST getLastNode()
+    protected final DetailAST getLastNode()
     {
         return lastNode;
     }
 
-    public final int getIndentLevel()
+    protected final int getIndentLevel()
     {
         return indentLevel;
     }
 
     /**
      * Checks line wrapping into expressions and definitions.
      */
     public void checkIndentation()
     {
         final NavigableMap<Integer, DetailAST> firstNodesOnLines = collectFirstNodes();
 
         final DetailAST firstNode = firstNodesOnLines.get(firstNodesOnLines.firstKey());
         if (firstNode.getType() == TokenTypes.AT) {
             checkAnnotationIndentation(firstNode, firstNodesOnLines);
         }
 
         // First node should be removed because it was already checked before.
         firstNodesOnLines.remove(firstNodesOnLines.firstKey());
         final int firstNodeIndent = getFirstNodeIndent(firstNode);
         final int currentIndent = firstNodeIndent + indentLevel;
 
         for (DetailAST node : firstNodesOnLines.values()) {
             final int currentType = node.getType();
 
             if (currentType == TokenTypes.RCURLY
                     || currentType == TokenTypes.RPAREN
                     || currentType == TokenTypes.ARRAY_INIT)
             {
                 logWarningMessage(node, firstNodeIndent);
             }
             else if (currentType == TokenTypes.LITERAL_IF) {
                 final DetailAST parent = node.getParent();
 
                 if (parent.getType() == TokenTypes.LITERAL_ELSE) {
                     logWarningMessage(parent, currentIndent);
                 }
             }
             else {
                 logWarningMessage(node, currentIndent);
             }
         }
     }
 
     /**
      * Calculates indentation of first node.
      *
      * @param node
      *            first node.
      * @return indentation of first node.
      */
