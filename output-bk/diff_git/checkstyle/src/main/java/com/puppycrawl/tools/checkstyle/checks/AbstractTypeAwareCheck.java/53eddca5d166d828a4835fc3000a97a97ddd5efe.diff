diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
index 8d42ddb2a..8984d36d3 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
@@ -1,109 +1,110 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2015 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks;
 
+import java.util.ArrayDeque;
+import java.util.Deque;
+import java.util.Iterator;
 import java.util.Map;
 import java.util.Set;
 
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
-import com.puppycrawl.tools.checkstyle.api.FastStack;
 import com.puppycrawl.tools.checkstyle.api.FullIdent;
 import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * Abstract class that endeavours to maintain type information for the Java
  * file being checked. It provides helper methods for performing type
  * information functions.
  *
  * @author Oliver Burn
  * @deprecated Checkstyle is not type aware tool and all Checks derived from this
  * class are potentially unstable.
  */
 @Deprecated
 public abstract class AbstractTypeAwareCheck extends Check
 {
     /** imports details **/
     private final Set<String> imports = Sets.newHashSet();
 
     /** full identifier for package of the method **/
     private FullIdent packageFullIdent;
 
     /** Name of current class. */
     private String currentClass;
 
     /** <code>ClassResolver</code> instance for current tree. */
     private ClassResolver classResolver;
 
     /** Stack of maps for type params. */
-    private final FastStack<Map<String, ClassInfo>> typeParams =
-        FastStack.newInstance();
+    private final Deque<Map<String, ClassInfo>> typeParams = new ArrayDeque<>();
 
     /**
      * Whether to log class loading errors to the checkstyle report
      * instead of throwing a RTE.
      *
      * Logging errors will avoid stopping checkstyle completely
      * because of a typo in javadoc. However, with modern IDEs that
      * support automated refactoring and generate javadoc this will
      * occur rarely, so by default we assume a configuration problem
      * in the checkstyle classpath and throw an execption.
      *
      * This configuration option was triggered by bug 1422462.
      */
     private boolean logLoadErrors = true;
 
     /**
      * Controls whether to log class loading errors to the checkstyle report
      * instead of throwing a RTE.
      *
      * @param logLoadErrors true if errors should be logged
      */
     public final void setLogLoadErrors(boolean logLoadErrors)
     {
         this.logLoadErrors = logLoadErrors;
     }
 
     /**
      * Whether to show class loading errors in the checkstyle report.
      * Request ID 1491630
      */
     private boolean suppressLoadErrors;
 
     /**
      * Controls whether to show class loading errors in the checkstyle report.
      *
      * @param suppressLoadErrors true if errors shouldn't be shown
      */
     public final void setSuppressLoadErrors(boolean suppressLoadErrors)
     {
         this.suppressLoadErrors = suppressLoadErrors;
     }
 
     /**
      * Called to process an AST when visiting it.
      * @param ast the AST to process. Guaranteed to not be PACKAGE_DEF or
      *             IMPORT tokens.
      */
     protected abstract void processAST(DetailAST ast);
 
     @Override
@@ -360,102 +361,103 @@ public abstract class AbstractTypeAwareCheck extends Check
             }
         }
     }
 
     /**
      * Processes class definition.
      * @param ast class definition to process.
      */
     private void processClass(DetailAST ast)
     {
         final DetailAST ident = ast.findFirstToken(TokenTypes.IDENT);
         currentClass += ("".equals(currentClass) ? "" : "$")
             + ident.getText();
 
         processTypeParams(ast);
     }
 
     /**
      * Returns current class.
      * @return name of current class.
      */
     protected final String getCurrentClassName()
     {
         return currentClass;
     }
 
     /**
      * Creates class info for given name.
      * @param name name of type.
      * @param surroundingClass name of surrounding class.
      * @return class infor for given name.
      */
     protected final ClassInfo createClassInfo(final Token name,
                                               final String surroundingClass)
     {
         final ClassInfo ci = findClassAlias(name.getText());
         if (ci != null) {
             return new ClassAlias(name, ci);
         }
         return new RegularClass(name, surroundingClass, this);
     }
 
     /**
      * Looking if a given name is alias.
      * @param name given name
      * @return ClassInfo for alias if it exists, null otherwise
      */
     protected final ClassInfo findClassAlias(final String name)
     {
         ClassInfo ci = null;
-        for (int i = typeParams.size() - 1; i >= 0; i--) {
-            final Map<String, ClassInfo> paramMap = typeParams.peek(i);
+        final Iterator<Map<String, ClassInfo>> iterator = typeParams.descendingIterator();
+        while (iterator.hasNext()) {
+            final Map<String, ClassInfo> paramMap = iterator.next();
             ci = paramMap.get(name);
             if (ci != null) {
                 break;
             }
         }
         return ci;
     }
 
     /**
      * Contains class's <code>Token</code>.
      */
     protected abstract static class ClassInfo
     {
         /** <code>FullIdent</code> associated with this class. */
         private final Token name;
 
         /** @return class name */
         public final Token getName()
         {
             return name;
         }
 
         /** @return <code>Class</code> associated with an object. */
         public abstract Class<?> getClazz();
 
         /**
          * Creates new instance of class inforamtion object.
          * @param className token which represents class name.
          */
         protected ClassInfo(final Token className)
         {
             if (className == null) {
                 throw new NullPointerException(
                     "ClassInfo's name should be non-null");
             }
             name = className;
         }
     }
 
     /** Represents regular classes/enumes. */
     private static final class RegularClass extends ClassInfo
     {
         /** name of surrounding class. */
         private final String surroundingClass;
         /** is class loadable. */
         private boolean isLoadable = true;
         /** <code>Class</code> object of this class if it's loadable. */
         private Class<?> classObj;
         /** the check we use to resolve classes. */
         private final AbstractTypeAwareCheck check;
