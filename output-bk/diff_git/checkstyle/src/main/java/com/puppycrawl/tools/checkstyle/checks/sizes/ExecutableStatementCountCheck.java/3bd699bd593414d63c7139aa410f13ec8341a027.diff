diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheck.java
index 6c2fcc705..6408a8715 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheck.java
@@ -163,73 +163,73 @@ public final class ExecutableStatementCountCheck
         context = contextStack.pop();
     }
 
     /**
      * Process the end of a statement list.
      *
      * @param ast the token representing the statement list.
      */
     private void visitSlist(DetailAST ast) {
         if (context.getAST() != null) {
             // find member AST for the statement list
             final DetailAST contextAST = context.getAST();
             DetailAST parent = ast.getParent();
             int type = parent.getType();
             while (type != TokenTypes.CTOR_DEF
                 && type != TokenTypes.METHOD_DEF
                 && type != TokenTypes.INSTANCE_INIT
                 && type != TokenTypes.STATIC_INIT) {
 
                 parent = parent.getParent();
                 type = parent.getType();
             }
             if (parent == contextAST) {
                 context.addCount(ast.getChildCount() / 2);
             }
         }
     }
 
     /**
      * Class to encapsulate counting information about one member.
      * @author Simon Harris
      */
     private static class Context {
         /** Member AST node. */
         private final DetailAST ast;
 
         /** Counter for context elements. */
         private int count;
 
         /**
          * Creates new member context.
          * @param ast member AST node.
          */
         public Context(DetailAST ast) {
             this.ast = ast;
             count = 0;
         }
 
         /**
          * Increase count.
-         * @param count the count increment.
+         * @param addition the count increment.
          */
-        public void addCount(int count) {
-            this.count += count;
+        public void addCount(int addition) {
+            this.count += addition;
         }
 
         /**
          * Gets the member AST node.
          * @return the member AST node.
          */
         public DetailAST getAST() {
             return ast;
         }
 
         /**
          * Gets the count.
          * @return the count.
          */
         public int getCount() {
             return count;
         }
     }
 }
