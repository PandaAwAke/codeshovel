diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpOnFilenameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpOnFilenameCheck.java
index a01354981..76535a5fa 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpOnFilenameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpOnFilenameCheck.java
@@ -1,78 +1,78 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2017 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks.regexp;
 
 import java.io.File;
 import java.io.IOException;
-import java.util.List;
 import java.util.regex.Pattern;
 
 import com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
+import com.puppycrawl.tools.checkstyle.api.FileText;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 
 /**
  * <p>
  * Implementation of a check that looks for a file name and/or path match (or
  * mis-match) against specified patterns. It can also be used to verify files
  * match specific naming patterns not covered by other checks (Ex: properties,
  * xml, etc.).
  * </p>
  *
  * <p>
  * When customizing the check, the properties are applied in a specific order.
  * The fileExtensions property first picks only files that match any of the
  * specific extensions supplied. Once files are matched against the
  * fileExtensions, the match property is then used in conjunction with the
  * patterns to determine if the check is looking for a match or mis-match on
  * those files. If the fileNamePattern is supplied, the matching is only applied
  * to the fileNamePattern and not the folderPattern. If no fileNamePattern is
  * supplied, then matching is applied to the folderPattern only and will result
  * in all files in a folder to be reported on violations. If no folderPattern is
  * supplied, then all folders that checkstyle finds are examined for violations.
  * The ignoreFileNameExtensions property drops the file extension and applies
  * the fileNamePattern only to the rest of file name. For example, if the file
  * is named 'test.java' and this property is turned on, the pattern is only
  * applied to 'test'.
  * </p>
  *
  * <p>
  * If this check is configured with no properties, then the default behavior of
  * this check is to report file names with spaces in them. When at least one
  * pattern property is supplied, the entire check is under the user's control to
  * allow them to fully customize the behavior.
  * </p>
  *
  * <p>
  * It is recommended that if you create your own pattern, to also specify a
  * custom error message. This allows the error message printed to be clear what
  * the violation is, especially if multiple RegexpOnFilename checks are used.
  * Argument 0 for the message populates the check's folderPattern. Argument 1
  * for the message populates the check's fileNamePattern. The file name is not
  * passed as an argument since it is part of CheckStyle's default error
  * messages.
  * </p>
  *
  * <p>
  * Check have following options:
  * </p>
  * <ul>
  * <li>
  * folderPattern - Regular expression to match the folder path against. Default
@@ -201,101 +201,101 @@ public class RegexpOnFilenameCheck extends AbstractFileSetCheck {
     private Pattern fileNamePattern;
     /** Whether to look for a file name match or mismatch. */
     private boolean match = true;
     /** Whether to ignore the file's extension when looking for matches. */
     private boolean ignoreFileNameExtensions;
 
     /**
      * Setter for folder format.
      *
      * @param folderPattern format of folder.
      */
     public void setFolderPattern(Pattern folderPattern) {
         this.folderPattern = folderPattern;
     }
 
     /**
      * Setter for file name format.
      *
      * @param fileNamePattern format of file.
      */
     public void setFileNamePattern(Pattern fileNamePattern) {
         this.fileNamePattern = fileNamePattern;
     }
 
     /**
      * Sets whether the check should look for a file name match or mismatch.
      *
      * @param match check's option for matching file names.
      */
     public void setMatch(boolean match) {
         this.match = match;
     }
 
     /**
      * Sets whether file name matching should drop the file extension or not.
      *
      * @param ignoreFileNameExtensions check's option for ignoring file extension.
      */
     public void setIgnoreFileNameExtensions(boolean ignoreFileNameExtensions) {
         this.ignoreFileNameExtensions = ignoreFileNameExtensions;
     }
 
     @Override
     public void init() {
         if (fileNamePattern == null && folderPattern == null) {
             fileNamePattern = CommonUtils.createPattern("\\s");
         }
     }
 
     @Override
-    protected void processFiltered(File file, List<String> lines) throws CheckstyleException {
+    protected void processFiltered(File file, FileText fileText) throws CheckstyleException {
         final String fileName = getFileName(file);
         final String folderPath = getFolderPath(file);
 
         if (isMatchFolder(folderPath) && isMatchFile(fileName)) {
             log();
         }
     }
 
     /**
      * Retrieves the file name from the given {@code file}.
      *
      * @param file Input file to examine.
      * @return The file name.
      */
     private String getFileName(File file) {
         String fileName = file.getName();
 
         if (ignoreFileNameExtensions) {
             fileName = CommonUtils.getFileNameWithoutExtension(fileName);
         }
 
         return fileName;
     }
 
     /**
      * Retrieves the folder path from the given {@code file}.
      *
      * @param file Input file to examine.
      * @return The folder path.
      * @throws CheckstyleException if there is an error getting the canonical
      *         path of the {@code file}.
      */
     private static String getFolderPath(File file) throws CheckstyleException {
         try {
             return file.getParentFile().getCanonicalPath();
         }
         catch (IOException ex) {
             throw new CheckstyleException("unable to create canonical path names for "
                     + file.getAbsolutePath(), ex);
         }
     }
 
     /**
      * Checks if the given {@code folderPath} matches the specified
      * {@link #folderPattern}.
      *
      * @param folderPath Input folder path to examine.
      * @return true if they do match.
      */
     private boolean isMatchFolder(String folderPath) {
