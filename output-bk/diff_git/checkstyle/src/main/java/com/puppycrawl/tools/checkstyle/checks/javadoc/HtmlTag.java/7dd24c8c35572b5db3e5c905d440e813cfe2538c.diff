diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/HtmlTag.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/HtmlTag.java
index de5065589..d175d7f21 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/HtmlTag.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/HtmlTag.java
@@ -64,74 +64,74 @@ class HtmlTag
         this.position = position;
         this.text = text;
         this.closedTag = closedTag;
         this.incomplete = incomplete;
     }
 
     /**
      * Returns the id (name) of this tag.
      * @return a String id.
      */
     public String getId()
     {
         return id;
     }
 
     /**
      * Indicates if this tag is a close (end) tag.
      * @return <code>true</code> is this is a close tag.
      */
     public boolean isCloseTag()
     {
         if (position == text.length() - 1) {
             return false;
         }
         return text.charAt(position + 1) == '/';
     }
 
     /**
      * Indicates if this tag is a self-closed XHTML style.
      * @return <code>true</code> is this is a self-closed tag.
      */
     public boolean isClosedTag()
     {
         return closedTag;
     }
 
     /**
      * Indicates if this tag is incomplete (has no close &gt;).
      * @return <code>true</code> if the tag is incomplete.
      */
     public boolean isIncompleteTag()
     {
         return incomplete;
     }
 
     /**
      * Returns the source line number where this tag was found.
      * Used for displaying a Checkstyle error.
      * @return an int line number.
      */
-    public int getLineno()
+    public int getLineNo()
     {
         return lineNo;
     }
 
     /**
      * Returns the position with in the comment line where this tag
      * was found.  Used for displaying a Checkstyle error.
      * @return an int relative to zero.
      */
     public int getPosition()
     {
         return position;
     }
 
     @Override
     public String toString()
     {
         final int startOfText = position;
         final int endOfText =
             Math.min(startOfText + HtmlTag.MAX_TEXT_LEN, text.length());
         return text.substring(startOfText, endOfText);
     }
 }
