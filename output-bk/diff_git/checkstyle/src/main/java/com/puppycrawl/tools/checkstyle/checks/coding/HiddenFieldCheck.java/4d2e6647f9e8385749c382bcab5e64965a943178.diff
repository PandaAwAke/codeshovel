diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java
index 20a130172..562c4149f 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java
@@ -229,214 +229,214 @@ public class HiddenFieldCheck
         if (type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF) {
             frameName = ast.findFirstToken(TokenTypes.IDENT).getText();
         }
         else {
             frameName = null;
         }
         final FieldFrame newFrame = new FieldFrame(frame, isStaticInnerType, frameName);
 
         //add fields to container
         final DetailAST objBlock = ast.findFirstToken(TokenTypes.OBJBLOCK);
         // enum constants may not have bodies
         if (objBlock != null) {
             DetailAST child = objBlock.getFirstChild();
             while (child != null) {
                 if (child.getType() == TokenTypes.VARIABLE_DEF) {
                     final String name =
                         child.findFirstToken(TokenTypes.IDENT).getText();
                     final DetailAST mods =
                         child.findFirstToken(TokenTypes.MODIFIERS);
                     if (mods.branchContains(TokenTypes.LITERAL_STATIC)) {
                         newFrame.addStaticField(name);
                     }
                     else {
                         newFrame.addInstanceField(name);
                     }
                 }
                 child = child.getNextSibling();
             }
         }
         // push container
         frame = newFrame;
     }
 
     @Override
     public void leaveToken(DetailAST ast) {
         if (ast.getType() == TokenTypes.CLASS_DEF
             || ast.getType() == TokenTypes.ENUM_DEF
             || ast.getType() == TokenTypes.ENUM_CONSTANT_DEF) {
             //pop
             frame = frame.getParent();
         }
     }
 
     /**
      * Process a variable token.
      * Check whether a local variable or parameter shadows a field.
      * Store a field for later comparison with local variables and parameters.
      * @param ast the variable token.
      */
     private void processVariable(DetailAST ast) {
-        if (!ScopeUtils.inInterfaceOrAnnotationBlock(ast)
+        if (!ScopeUtils.isInInterfaceOrAnnotationBlock(ast)
             && (ScopeUtils.isLocalVariableDef(ast)
                 || ast.getType() == TokenTypes.PARAMETER_DEF)) {
             // local variable or parameter. Does it shadow a field?
             final DetailAST nameAST = ast.findFirstToken(TokenTypes.IDENT);
             final String name = nameAST.getText();
 
             if (isStaticOrOnstanceField(ast, name)
                 && !isMatchingRegexp(name)
                 && !isIgnoredSetterParam(ast, name)
                 && !isIgnoredConstructorParam(ast)
                 && !isIgnoredParamOfAbstractMethod(ast)) {
                 log(nameAST, MSG_KEY, name);
             }
         }
     }
 
     /**
      * Check for static or instance field.
      * @param ast token
      * @param name identifier of token
      * @return true if static or instance field
      */
     private boolean isStaticOrOnstanceField(DetailAST ast, String name) {
         return frame.containsStaticField(name)
-                || !inStatic(ast) && frame.containsInstanceField(name);
+                || !isInStatic(ast) && frame.containsInstanceField(name);
     }
 
     /**
      * Check name by regExp
      * @param name string value to check
      * @return true is regexp is matching
      */
     private boolean isMatchingRegexp(String name) {
         return regexp != null && regexp.matcher(name).find();
     }
 
     /**
      * Determines whether an AST node is in a static method or static
      * initializer.
      * @param ast the node to check.
      * @return true if ast is in a static method or a static block;
      */
-    private static boolean inStatic(DetailAST ast) {
+    private static boolean isInStatic(DetailAST ast) {
         DetailAST parent = ast.getParent();
         boolean inStatic = false;
 
         while (parent != null) {
             if (parent.getType() == TokenTypes.STATIC_INIT) {
                 inStatic = true;
                 break;
             }
             else if (parent.getType() == TokenTypes.METHOD_DEF) {
                 final DetailAST mods =
                     parent.findFirstToken(TokenTypes.MODIFIERS);
                 inStatic = mods.branchContains(TokenTypes.LITERAL_STATIC);
                 break;
             }
             else {
                 parent = parent.getParent();
             }
         }
         return inStatic;
     }
 
     /**
      * Decides whether to ignore an AST node that is the parameter of a
      * setter method, where the property setter method for field 'xyz' has
      * name 'setXyz', one parameter named 'xyz', and return type void
      * (default behavior) or return type is name of the class in which
      * such method is declared (allowed only if
      * {@link #setSetterCanReturnItsClass(boolean)} is called with
      * value <em>true</em>)
      *
      * @param ast the AST to check.
      * @param name the name of ast.
      * @return true if ast should be ignored because check property
      * ignoreSetter is true and ast is the parameter of a setter method.
      */
     private boolean isIgnoredSetterParam(DetailAST ast, String name) {
         if (ast.getType() == TokenTypes.PARAMETER_DEF && ignoreSetter) {
             final DetailAST parametersAST = ast.getParent();
             final DetailAST methodAST = parametersAST.getParent();
             if (parametersAST.getChildCount() == 1
                 && methodAST.getType() == TokenTypes.METHOD_DEF
                 && isSetterMethod(methodAST, name)) {
                 return true;
             }
         }
         return false;
     }
 
     /**
      * Determine if a specific method identified by methodAST and a single
      * variable name aName is a setter. This recognition partially depends
      * on mSetterCanReturnItsClass property.
      *
      * @param aMethodAST AST corresponding to a method call
      * @param aName name of single parameter of this method.
      * @return true of false indicating of method is a setter or not.
      */
     private boolean isSetterMethod(DetailAST aMethodAST, String aName) {
         final String methodName =
             aMethodAST.findFirstToken(TokenTypes.IDENT).getText();
         boolean isSetterMethod = false;
 
         if (methodName.equals("set" + capitalize(aName))) {
             // method name did match set${Name}(${anyType} ${aName})
             // where ${Name} is capitalized version of ${aName}
             // therefore this method is potentially a setter
             final DetailAST typeAST = aMethodAST.findFirstToken(TokenTypes.TYPE);
             final String returnType = typeAST.getFirstChild().getText();
             if (typeAST.branchContains(TokenTypes.LITERAL_VOID)
-                    || setterCanReturnItsClass && frame.embeddedIn(returnType)) {
+                    || setterCanReturnItsClass && frame.isEmbeddedIn(returnType)) {
                 // this method has signature
                 //
                 //     void set${Name}(${anyType} ${name})
                 //
                 // and therefore considered to be a setter
                 //
                 // or
                 //
                 // return type is not void, but it is the same as the class
                 // where method is declared and and mSetterCanReturnItsClass
                 // is set to true
                 isSetterMethod = true;
             }
         }
 
         return isSetterMethod;
     }
 
     /**
      * Capitalizes a given property name the way we expect to see it in
      * a setter name.
      * @param name a property name
      * @return capitalized property name
      */
     private static String capitalize(final String name) {
         String setterName = name;
         // we should not capitalize the first character if the second
         // one is a capital one, since according to JavBeans spec
         // setXYzz() is a setter for XYzz property, not for xYzz one.
         if (name.length() == 1 || !Character.isUpperCase(name.charAt(1))) {
             setterName = name.substring(0, 1).toUpperCase(Locale.ENGLISH) + name.substring(1);
         }
         return setterName;
     }
 
     /**
      * Decides whether to ignore an AST node that is the parameter of a
      * constructor.
      * @param ast the AST to check.
      * @return true if ast should be ignored because check property
      * ignoreConstructorParameter is true and ast is a constructor parameter.
      */
     private boolean isIgnoredConstructorParam(DetailAST ast) {
         boolean result = false;
         if (ast.getType() == TokenTypes.PARAMETER_DEF
             && ignoreConstructorParameter) {
             final DetailAST parametersAST = ast.getParent();
             final DetailAST constructorAST = parametersAST.getParent();
             result = constructorAST.getType() == TokenTypes.CTOR_DEF;
         }
@@ -561,62 +561,62 @@ public class HiddenFieldCheck
         /**
          * Adds a static field to this FieldFrame.
          * @param field  the name of the instance field.
          */
         public void addStaticField(String field) {
             staticFields.add(field);
         }
 
         /**
          * Determines whether this FieldFrame contains an instance field.
          * @param field the field to check.
          * @return true if this FieldFrame contains instance field field.
          */
         public boolean containsInstanceField(String field) {
             return instanceFields.contains(field)
                     || parent != null
                     && !staticType
                     && parent.containsInstanceField(field);
 
         }
 
         /**
          * Determines whether this FieldFrame contains a static field.
          * @param field the field to check.
          * @return true if this FieldFrame contains static field field.
          */
         public boolean containsStaticField(String field) {
             return staticFields.contains(field)
                     || parent != null
                     && parent.containsStaticField(field);
         }
 
         /**
          * Getter for parent frame.
          * @return parent frame.
          */
         public FieldFrame getParent() {
             return parent;
         }
 
         /**
          * Check if current frame is embedded in class or enum with
          * specific name.
          *
          * @param classOrEnumName name of class or enum that we are looking
          * for in the chain of field frames.
          *
          * @return true if current frame is embedded in class or enum
          * with name classOrNameName
          */
-        private boolean embeddedIn(String classOrEnumName) {
+        private boolean isEmbeddedIn(String classOrEnumName) {
             FieldFrame currentFrame = this;
             while (currentFrame != null) {
                 if (Objects.equals(currentFrame.frameName, classOrEnumName)) {
                     return true;
                 }
                 currentFrame = currentFrame.parent;
             }
             return false;
         }
     }
 }
