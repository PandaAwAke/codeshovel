diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
index 0a11db532..b2ddca575 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
@@ -338,158 +338,158 @@ public class NeedBracesCheck extends AbstractCheck {
      * do this.notify(); while (o != null);
      * }
      * </p>
      * @param literalDo {@link TokenTypes#LITERAL_DO do-while statement}.
      * @return true if current do-while statement is single-line statement.
      */
     private static boolean isSingleLineDoWhile(DetailAST literalDo) {
         boolean result = false;
         if (literalDo.getParent().getType() == TokenTypes.SLIST
                 && literalDo.getFirstChild().getType() != TokenTypes.SLIST) {
             final DetailAST block = literalDo.getFirstChild();
             result = block.getLineNo() == literalDo.getLineNo();
         }
         return result;
     }
 
     /**
      * Checks if current for statement is single-line statement, e.g.:
      * <p>
      * {@code
      * for (int i = 0; ; ) this.notify();
      * }
      * </p>
      * @param literalFor {@link TokenTypes#LITERAL_FOR for statement}.
      * @return true if current for statement is single-line statement.
      */
     private static boolean isSingleLineFor(DetailAST literalFor) {
         boolean result = false;
         if (literalFor.getLastChild().getType() == TokenTypes.EMPTY_STAT) {
             result = true;
         }
         else if (literalFor.getParent().getType() == TokenTypes.SLIST
                 && literalFor.getLastChild().getType() != TokenTypes.SLIST) {
             result = literalFor.getLineNo() == literalFor.getLastChild().getLineNo();
         }
         return result;
     }
 
     /**
      * Checks if current if statement is single-line statement, e.g.:
      * <p>
      * {@code
      * if (obj.isValid()) return true;
      * }
      * </p>
      * @param literalIf {@link TokenTypes#LITERAL_IF if statement}.
      * @return true if current if statement is single-line statement.
      */
     private static boolean isSingleLineIf(DetailAST literalIf) {
         boolean result = false;
-        final DetailAST ifCondition = literalIf.findFirstToken(TokenTypes.EXPR);
         if (literalIf.getParent().getType() == TokenTypes.SLIST) {
             final DetailAST literalIfLastChild = literalIf.getLastChild();
             final DetailAST block;
             if (literalIfLastChild.getType() == TokenTypes.LITERAL_ELSE) {
                 block = literalIfLastChild.getPreviousSibling();
             }
             else {
                 block = literalIfLastChild;
             }
+            final DetailAST ifCondition = literalIf.findFirstToken(TokenTypes.EXPR);
             result = ifCondition.getLineNo() == block.getLineNo();
         }
         return result;
     }
 
     /**
      * Checks if current lambda statement is single-line statement, e.g.:
      * <p>
      * {@code
      * Runnable r = () -> System.out.println("Hello, world!");
      * }
      * </p>
      * @param lambda {@link TokenTypes#LAMBDA lambda statement}.
      * @return true if current lambda statement is single-line statement.
      */
     private static boolean isSingleLineLambda(DetailAST lambda) {
         boolean result = false;
         final DetailAST block = lambda.getLastChild();
         if (block.getType() != TokenTypes.SLIST) {
             result = lambda.getLineNo() == block.getLineNo();
         }
         return result;
     }
 
     /**
      * Checks if current case statement is single-line statement, e.g.:
      * <p>
      * {@code
      * case 1: doSomeStuff(); break;
      * case 2: doSomeStuff(); break;
      * case 3: ;
      * }
      * </p>
      * @param literalCase {@link TokenTypes#LITERAL_CASE case statement}.
      * @return true if current case statement is single-line statement.
      */
     private static boolean isSingleLineCase(DetailAST literalCase) {
         boolean result = false;
         final DetailAST slist = literalCase.getNextSibling();
         if (slist == null) {
             result = true;
         }
         else {
             final DetailAST block = slist.getFirstChild();
             if (block.getType() != TokenTypes.SLIST) {
                 final DetailAST caseBreak = slist.findFirstToken(TokenTypes.LITERAL_BREAK);
-                final boolean atOneLine = literalCase.getLineNo() == block.getLineNo();
                 if (caseBreak != null) {
+                    final boolean atOneLine = literalCase.getLineNo() == block.getLineNo();
                     result = atOneLine && block.getLineNo() == caseBreak.getLineNo();
                 }
             }
         }
         return result;
     }
 
     /**
      * Checks if current default statement is single-line statement, e.g.:
      * <p>
      * {@code
      * default: doSomeStuff();
      * }
      * </p>
      * @param literalDefault {@link TokenTypes#LITERAL_DEFAULT default statement}.
      * @return true if current default statement is single-line statement.
      */
     private static boolean isSingleLineDefault(DetailAST literalDefault) {
         boolean result = false;
         final DetailAST slist = literalDefault.getNextSibling();
         if (slist == null) {
             result = true;
         }
         else {
             final DetailAST block = slist.getFirstChild();
             if (block != null && block.getType() != TokenTypes.SLIST) {
                 result = literalDefault.getLineNo() == block.getLineNo();
             }
         }
         return result;
     }
 
     /**
      * Checks if current else statement is single-line statement, e.g.:
      * <p>
      * {@code
      * else doSomeStuff();
      * }
      * </p>
      * @param literalElse {@link TokenTypes#LITERAL_ELSE else statement}.
      * @return true if current else statement is single-line statement.
      */
     private static boolean isSingleLineElse(DetailAST literalElse) {
         boolean result = false;
         final DetailAST block = literalElse.getFirstChild();
         if (block.getType() != TokenTypes.SLIST) {
             result = literalElse.getLineNo() == block.getLineNo();
         }
         return result;
     }
