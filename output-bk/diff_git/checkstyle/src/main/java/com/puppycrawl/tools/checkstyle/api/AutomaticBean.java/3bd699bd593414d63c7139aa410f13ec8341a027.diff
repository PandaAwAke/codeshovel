diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
index dd75b4ac0..2687259b0 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
@@ -68,118 +68,120 @@ public class AutomaticBean
         cub.register(new BooleanConverter(), Boolean.class);
         cub.register(new ArrayConverter(
             boolean[].class, new BooleanConverter()), boolean[].class);
         cub.register(new ByteConverter(), Byte.TYPE);
         cub.register(new ByteConverter(), Byte.class);
         cub.register(new ArrayConverter(byte[].class, new ByteConverter()),
             byte[].class);
         cub.register(new CharacterConverter(), Character.TYPE);
         cub.register(new CharacterConverter(), Character.class);
         cub.register(new ArrayConverter(char[].class, new CharacterConverter()),
             char[].class);
         cub.register(new DoubleConverter(), Double.TYPE);
         cub.register(new DoubleConverter(), Double.class);
         cub.register(new ArrayConverter(double[].class, new DoubleConverter()),
             double[].class);
         cub.register(new FloatConverter(), Float.TYPE);
         cub.register(new FloatConverter(), Float.class);
         cub.register(new ArrayConverter(float[].class, new FloatConverter()),
             float[].class);
         cub.register(new IntegerConverter(), Integer.TYPE);
         cub.register(new IntegerConverter(), Integer.class);
         cub.register(new ArrayConverter(int[].class, new IntegerConverter()),
             int[].class);
         cub.register(new LongConverter(), Long.TYPE);
         cub.register(new LongConverter(), Long.class);
         cub.register(new ArrayConverter(long[].class, new LongConverter()),
             long[].class);
         cub.register(new ShortConverter(), Short.TYPE);
         cub.register(new ShortConverter(), Short.class);
         cub.register(new ArrayConverter(short[].class, new ShortConverter()),
             short[].class);
         cub.register(new RelaxedStringArrayConverter(), String[].class);
 
         // BigDecimal, BigInteger, Class, Date, String, Time, TimeStamp
         // do not use defaults in the default configuration of ConvertUtilsBean
 
         return new BeanUtilsBean(cub, new PropertyUtilsBean());
     }
 
     /**
      * Implements the Configurable interface using bean introspection.
      *
      * Subclasses are allowed to add behaviour. After the bean
      * based setup has completed first the method
      * {@link #finishLocalSetup finishLocalSetup}
      * is called to allow completion of the bean's local setup,
      * after that the method {@link #setupChild setupChild}
      * is called for each {@link Configuration#getChildren child Configuration}
      * of {@code configuration}.
      *
+     * @param config {@inheritDoc}
+     * @throws CheckstyleException {@inheritDoc}
      * @see Configurable
      */
     @Override
-    public final void configure(Configuration configuration)
+    public final void configure(Configuration config)
         throws CheckstyleException {
-        this.configuration = configuration;
+        this.configuration = config;
 
-        final String[] attributes = configuration.getAttributeNames();
+        final String[] attributes = config.getAttributeNames();
 
         for (final String key : attributes) {
-            final String value = configuration.getAttribute(key);
+            final String value = config.getAttribute(key);
 
-            tryCopyProperty(configuration.getName(), key, value, true);
+            tryCopyProperty(config.getName(), key, value, true);
         }
 
         finishLocalSetup();
 
-        final Configuration[] childConfigs = configuration.getChildren();
+        final Configuration[] childConfigs = config.getChildren();
         for (final Configuration childConfig : childConfigs) {
             setupChild(childConfig);
         }
     }
 
     /**
      * recheck property and try to copy it
      * @param moduleName name of the module/class
      * @param key key of value
      * @param value value
      * @param recheck whether to check for property existence before copy
      * @throws CheckstyleException then property defined incorrectly
      */
     private void tryCopyProperty(String moduleName, String key, Object value, boolean recheck)
             throws CheckstyleException {
 
         final BeanUtilsBean beanUtils = createBeanUtilsBean();
 
         try {
             if (recheck) {
                 // BeanUtilsBean.copyProperties silently ignores missing setters
                 // for key, so we have to go through great lengths here to
                 // figure out if the bean property really exists.
                 final PropertyDescriptor pd =
                         PropertyUtils.getPropertyDescriptor(this, key);
                 if (pd == null) {
                     throw new CheckstyleException(
                             "Property '" + key + "' in module "
                              + moduleName
                              + " does not exist, please check the documentation");
                 }
             }
             // finally we can set the bean property
             beanUtils.copyProperty(this, key, value);
         }
         catch (final InvocationTargetException | IllegalAccessException
                 | NoSuchMethodException e) {
             // There is no way to catch IllegalAccessException | NoSuchMethodException
             // as we do PropertyUtils.getPropertyDescriptor before beanUtils.copyProperty
             // so we have to join these exceptions with InvocationTargetException
             // to satisfy UTs coverage
             throw new CheckstyleException(
                 "Cannot set property '" + key + "' to '" + value
                 + "' in module "  + moduleName, e);
         }
         catch (final IllegalArgumentException | ConversionException e) {
             throw new CheckstyleException(
                 "illegal value '" + value + "' for property '" + key
                 + "' of module " + moduleName, e);
         }
