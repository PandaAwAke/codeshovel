diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodDefHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodDefHandler.java
index b0e1edc44..a30b2fb16 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodDefHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodDefHandler.java
@@ -21,65 +21,71 @@ package com.puppycrawl.tools.checkstyle.checks.indentation;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * Handler for method definitions.
  *
  * @author jrichard
  * @author Maikel Steneker
  */
 public class MethodDefHandler extends BlockParentHandler
 {
     /**
      * Construct an instance of this handler with the given indentation check,
      * abstract syntax tree, and parent handler.
      *
      * @param indentCheck   the indentation check
      * @param ast           the abstract syntax tree
      * @param parent        the parent handler
      */
     public MethodDefHandler(IndentationCheck indentCheck,
         DetailAST ast, ExpressionHandler parent)
     {
         super(indentCheck, (ast.getType() == TokenTypes.CTOR_DEF)
             ? "ctor def" : "method def", ast, parent);
     }
 
     @Override
     protected DetailAST getToplevelAST()
     {
         // we check this stuff ourselves below
         return null;
     }
 
     @Override
     protected void checkModifiers()
     {
         final DetailAST modifier = getMainAst().findFirstToken(TokenTypes.MODIFIERS);
         if (startsLine(modifier)
             && !getLevel().accept(expandedTabsColumnNo(modifier)))
         {
             logError(modifier, "modifier", expandedTabsColumnNo(modifier));
         }
     }
 
     @Override
     public void checkIndentation()
     {
         checkModifiers();
 
         final LineWrappingHandler lineWrap =
-            new LineWrappingHandler(getIndentCheck(), getMainAst()) {
-                @Override
-                public DetailAST findLastNode(DetailAST firstNode)
-                {
-                    return firstNode.getLastChild().getPreviousSibling();
-                }
-            };
+            new LineWrappingHandler(getIndentCheck(), getMainAst(),
+                getMethodDefParamRightParen(getMainAst()));
         lineWrap.checkIndentation();
         if (getLCurly() == null) {
             // asbtract method def -- no body
             return;
         }
         super.checkIndentation();
     }
+
+    /**
+     * Returns right parenthesis of method definition parameter list.
+     * @param methodDefAst
+     *          method definition ast node(TokenTypes.LITERAL_IF)
+     * @return right parenthesis of method definition parameter list.
+     */
+    private static DetailAST getMethodDefParamRightParen(DetailAST methodDefAst)
+    {
+        return methodDefAst.findFirstToken(TokenTypes.RPAREN);
+    }
 }
