diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
index d63d57324..9ff376a8d 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
@@ -172,101 +172,101 @@ public class NeedBracesCheck extends AbstractCheck {
             TokenTypes.LITERAL_DO,
             TokenTypes.LITERAL_ELSE,
             TokenTypes.LITERAL_FOR,
             TokenTypes.LITERAL_IF,
             TokenTypes.LITERAL_WHILE,
         };
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.LITERAL_DO,
             TokenTypes.LITERAL_ELSE,
             TokenTypes.LITERAL_FOR,
             TokenTypes.LITERAL_IF,
             TokenTypes.LITERAL_WHILE,
             TokenTypes.LITERAL_CASE,
             TokenTypes.LITERAL_DEFAULT,
             TokenTypes.LAMBDA,
         };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return CommonUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final DetailAST slistAST = ast.findFirstToken(TokenTypes.SLIST);
         boolean isElseIf = false;
         if (ast.getType() == TokenTypes.LITERAL_ELSE
             && ast.findFirstToken(TokenTypes.LITERAL_IF) != null) {
             isElseIf = true;
         }
         final boolean isDefaultInAnnotation = isDefaultInAnnotation(ast);
         final boolean skipStatement = isSkipStatement(ast);
         final boolean skipEmptyLoopBody = allowEmptyLoopBody && isEmptyLoopBody(ast);
 
         if (slistAST == null && !isElseIf && !isDefaultInAnnotation
                 && !skipStatement && !skipEmptyLoopBody) {
             log(ast.getLineNo(), MSG_KEY_NEED_BRACES, ast.getText());
         }
     }
 
     /**
      * Checks if ast is the default token of an annotation field.
      * @param ast ast to test.
      * @return true if current ast is default and it is part of annotation.
      */
-    private boolean isDefaultInAnnotation(DetailAST ast) {
+    private static boolean isDefaultInAnnotation(DetailAST ast) {
         boolean isDefaultInAnnotation = false;
         if (ast.getType() == TokenTypes.LITERAL_DEFAULT
                 && ast.getParent().getType() == TokenTypes.ANNOTATION_FIELD_DEF) {
             isDefaultInAnnotation = true;
         }
         return isDefaultInAnnotation;
     }
 
     /**
      * Checks if current statement can be skipped by "need braces" warning.
      * @param statement if, for, while, do-while, lambda, else, case, default statements.
      * @return true if current statement can be skipped by Check.
      */
     private boolean isSkipStatement(DetailAST statement) {
         return allowSingleLineStatement && isSingleLineStatement(statement);
     }
 
     /**
      * Checks if current loop statement does not have body, e.g.:
      * <p>
      * {@code
      *   while (value.incrementValue() < 5);
      *   ...
      *   for(int i = 0; i < 10; value.incrementValue());
      * }
      * </p>
      * @param ast ast token.
      * @return true if current loop statement does not have body.
      */
     private static boolean isEmptyLoopBody(DetailAST ast) {
         boolean noBodyLoop = false;
 
         if (ast.getType() == TokenTypes.LITERAL_FOR
                 || ast.getType() == TokenTypes.LITERAL_WHILE) {
             DetailAST currentToken = ast.getFirstChild();
             while (currentToken.getNextSibling() != null) {
                 currentToken = currentToken.getNextSibling();
             }
             noBodyLoop = currentToken.getType() == TokenTypes.EMPTY_STAT;
         }
         return noBodyLoop;
     }
 
     /**
      * Checks if current statement is single-line statement, e.g.:
      * <p>
      * {@code
      * if (obj.isValid()) return true;
      * }
      * </p>
