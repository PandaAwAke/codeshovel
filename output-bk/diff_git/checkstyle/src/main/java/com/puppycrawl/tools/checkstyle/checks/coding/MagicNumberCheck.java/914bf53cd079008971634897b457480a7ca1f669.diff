diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java
index 92b723e7e..89a20faee 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java
@@ -280,133 +280,125 @@ public class MagicNumberCheck extends Check
         if (null == methodDefAST) {
             return false;
         }
 
         // Check for 'hashCode' name.
         final DetailAST identAST =
             methodDefAST.findFirstToken(TokenTypes.IDENT);
         if (!"hashCode".equals(identAST.getText())) {
             return false;
         }
 
         // Check for no arguments.
         final DetailAST paramAST =
             methodDefAST.findFirstToken(TokenTypes.PARAMETERS);
         if (0 != paramAST.getChildCount()) {
             return false;
         }
 
         // we are in a 'public int hashCode()' method! The compiler will ensure
         // the method returns an 'int' and is public.
         return true;
     }
 
     /**
      * Decides whether the number of an AST is in the ignore list of this
      * check.
      * @param ast the AST to check
      * @return true if the number of ast is in the ignore list of this
      * check.
      */
     private boolean inIgnoreList(DetailAST ast)
     {
         double value = CheckUtils.parseDouble(ast.getText(), ast.getType());
         final DetailAST parent = ast.getParent();
         if (parent.getType() == TokenTypes.UNARY_MINUS) {
             value = -1 * value;
         }
         return Arrays.binarySearch(ignoreNumbers, value) >= 0;
     }
 
     /**
      * Determines whether or not the given AST is field declaration
      *
      * @param ast AST from which to search for an enclosing field declaration
      *
      * @return {@code true} if {@code ast} is in the scope of field declaration
      */
     private boolean isFieldDeclaration(DetailAST ast)
     {
         DetailAST varDefAST = ast;
-        while ((varDefAST != null)
-                && (varDefAST.getType() != TokenTypes.VARIABLE_DEF))
+        while (varDefAST != null
+                && varDefAST.getType() != TokenTypes.VARIABLE_DEF)
         {
             varDefAST = varDefAST.getParent();
         }
 
         // contains variable declaration
         // and it is directly inside class declaration
         return varDefAST != null
-                && varDefAST.getParent() != null
-                && varDefAST.getParent().getParent() != null
                 && varDefAST.getParent().getParent().getType()
-                == TokenTypes.CLASS_DEF;
+                    == TokenTypes.CLASS_DEF;
     }
 
 
     /**
      * Sets the numbers to ignore in the check.
      * BeanUtils converts numeric token list to double array automatically.
      * @param list list of numbers to ignore.
      */
     public void setIgnoreNumbers(double[] list)
     {
-        if (list == null || list.length == 0) {
+        if (list.length == 0) {
             ignoreNumbers = new double[0];
         }
         else {
             ignoreNumbers = new double[list.length];
             System.arraycopy(list, 0, ignoreNumbers, 0, list.length);
             Arrays.sort(ignoreNumbers);
         }
     }
 
     /**
      * Set whether to ignore hashCode methods.
      * @param ignoreHashCodeMethod decide whether to ignore
      * hash code methods
      */
     public void setIgnoreHashCodeMethod(boolean ignoreHashCodeMethod)
     {
         this.ignoreHashCodeMethod = ignoreHashCodeMethod;
     }
 
     /**
      * Set whether to ignore Annotations.
      * @param ignoreAnnotation decide whether to ignore annotations
      */
     public void setIgnoreAnnotation(boolean ignoreAnnotation)
     {
         this.ignoreAnnotation = ignoreAnnotation;
     }
 
     /**
      * Set whether to ignore magic numbers in field declaration.
      * @param ignoreFieldDeclaration decide whether to ignore magic numbers
      * in field declaration
      */
     public void setIgnoreFieldDeclaration(boolean ignoreFieldDeclaration)
     {
         this.ignoreFieldDeclaration = ignoreFieldDeclaration;
     }
 
     /**
      * Determines if the column displays a token type of annotation or
      * annotation member
      *
      * @param ast the AST from which to search for annotations
      *
      * @return {@code true} if the token type for this node is a annotation
      */
     private boolean isInAnnotation(DetailAST ast)
     {
-        if (null == ast.getParent()
-                || null == ast.getParent().getParent())
-        {
-            return false;
-        }
-
         return TokenTypes.ANNOTATION == ast.getParent().getParent().getType()
                 || TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR
                         == ast.getParent().getParent().getType();
     }
 }
