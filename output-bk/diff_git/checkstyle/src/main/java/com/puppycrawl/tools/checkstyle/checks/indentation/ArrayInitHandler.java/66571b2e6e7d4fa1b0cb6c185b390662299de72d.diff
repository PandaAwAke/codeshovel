diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java
index b0ebc9b34..4a1877421 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java
@@ -52,91 +52,89 @@ public class ArrayInitHandler extends BlockParentHandler {
         else {
             // at this point getParent() is instance of ArrayInitHandler
             return ((ArrayInitHandler) getParent()).getChildrenExpectedLevel();
         }
     }
 
     @Override
     protected DetailAST getToplevelAST() {
         return null;
     }
 
     @Override
     protected DetailAST getLCurly() {
         return getMainAst();
     }
 
     @Override
     protected IndentLevel curlyLevel() {
         final IndentLevel level = new IndentLevel(getLevel(), getBraceAdjustment());
         level.addAcceptedIndent(level.getLastIndentLevel() + getLineWrappingIndent());
         return level;
     }
 
     @Override
     protected DetailAST getRCurly() {
         return getMainAst().findFirstToken(TokenTypes.RCURLY);
     }
 
     @Override
     protected boolean rcurlyMustStart() {
         return false;
     }
 
     @Override
     protected boolean childrenMayNest() {
         return true;
     }
 
     @Override
     protected DetailAST getListChild() {
         return getMainAst();
     }
 
     @Override
     protected IndentLevel getChildrenExpectedLevel() {
         final IndentLevel expectedIndent =
             new IndentLevel(getLevel(), getIndentCheck().getArrayInitIndent(),
                     getIndentCheck().getLineWrappingIndentation());
 
         final int firstLine = getFirstLine(Integer.MAX_VALUE, getListChild());
-        if (hasCurlys() && firstLine == getLCurly().getLineNo()) {
-            final int lcurlyPos = expandedTabsColumnNo(getLCurly());
-            final int firstChildPos =
-                getNextFirstNonblankOnLineAfter(firstLine, lcurlyPos);
-            if (firstChildPos >= 0) {
-                expectedIndent.addAcceptedIndent(firstChildPos);
-                expectedIndent.addAcceptedIndent(lcurlyPos + getLineWrappingIndent());
-            }
+        final int lcurlyPos = expandedTabsColumnNo(getLCurly());
+        final int firstChildPos =
+            getNextFirstNonblankOnLineAfter(firstLine, lcurlyPos);
+        if (firstChildPos >= 0) {
+            expectedIndent.addAcceptedIndent(firstChildPos);
+            expectedIndent.addAcceptedIndent(lcurlyPos + getLineWrappingIndent());
         }
         return expectedIndent;
     }
 
     /**
      * @param lineNo   number of line on which we search
      * @param columnNo number of column after which we search
      *
      * @return column number of first non-blank char after
      *         specified column on specified line or -1 if
      *         such char doesn't exist.
      */
     private int getNextFirstNonblankOnLineAfter(int lineNo, int columnNo) {
         int realColumnNo = columnNo + 1;
         final String line = getIndentCheck().getLines()[lineNo - 1];
         final int lineLength = line.length();
         while (realColumnNo < lineLength
                && Character.isWhitespace(line.charAt(realColumnNo))) {
             realColumnNo++;
         }
 
         return realColumnNo == lineLength ? -1 : realColumnNo;
     }
 
     /**
      * A shortcut for <code>IndentationCheck</code> property.
      * @return value of lineWrappingIndentation property
      *         of <code>IndentationCheck</code>
      */
     private int getLineWrappingIndent() {
         return getIndentCheck().getLineWrappingIndentation();
     }
 }
