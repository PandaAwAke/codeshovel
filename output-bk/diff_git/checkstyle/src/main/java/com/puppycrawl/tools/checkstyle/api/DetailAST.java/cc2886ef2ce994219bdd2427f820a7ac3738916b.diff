diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
index 74f9e765b..bd9ba2ff6 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
@@ -152,107 +152,111 @@ public final class DetailAST extends CommonASTWithHiddenTokens {
     @Override
     public void addChild(AST ast) {
         clearBranchTokenTypes();
         clearChildCountCache(this);
         if (ast != null) {
             ((DetailAST) ast).setParent(this);
             ((DetailAST) ast).previousSibling = getLastChild();
         }
         super.addChild(ast);
     }
 
     /**
      * Returns the number of child nodes one level below this node. That is is
      * does not recurse down the tree.
      * @return the number of child nodes
      */
     public int getChildCount() {
         // lazy init
         if (childCount == NOT_INITIALIZED) {
             childCount = 0;
             AST child = getFirstChild();
 
             while (child != null) {
                 childCount += 1;
                 child = child.getNextSibling();
             }
         }
         return childCount;
     }
 
     /**
      * Returns the number of direct child tokens that have the specified type.
      * @param type the token type to match
      * @return the number of matching token
      */
     public int getChildCount(int type) {
         int count = 0;
         for (AST ast = getFirstChild(); ast != null; ast = ast.getNextSibling()) {
             if (ast.getType() == type) {
                 count++;
             }
         }
         return count;
     }
 
     /**
      * Set the parent token.
      * @param parent the parent token
      */
     private void setParent(DetailAST parent) {
-        clearBranchTokenTypes();
-        this.parent = parent;
-        final DetailAST nextSibling = getNextSibling();
-        if (nextSibling != null) {
-            nextSibling.setParent(parent);
-            nextSibling.previousSibling = this;
-        }
+        DetailAST instance = this;
+        do {
+            instance.clearBranchTokenTypes();
+            instance.parent = parent;
+            final DetailAST nextSibling = instance.getNextSibling();
+            if (nextSibling != null) {
+                nextSibling.previousSibling = instance;
+            }
+
+            instance = nextSibling;
+        } while (instance != null);
     }
 
     /**
      * Returns the parent token.
      * @return the parent token
      */
     public DetailAST getParent() {
         return parent;
     }
 
     /**
      * Gets line number.
      * @return the line number
      */
     public int getLineNo() {
         int resultNo = -1;
 
         if (lineNo == NOT_INITIALIZED) {
             // an inner AST that has been initialized
             // with initialize(String text)
             resultNo = findLineNo(getFirstChild());
 
             if (resultNo == -1) {
                 resultNo = findLineNo(getNextSibling());
             }
         }
         if (resultNo == -1) {
             resultNo = lineNo;
         }
         return resultNo;
     }
 
     /**
      * Set line number.
      * @param lineNo
      *        line number.
      */
     public void setLineNo(int lineNo) {
         this.lineNo = lineNo;
     }
 
     /**
      * Gets column number.
      * @return the column number
      */
     public int getColumnNo() {
         int resultNo = -1;
 
         if (columnNo == NOT_INITIALIZED) {
             // an inner AST that has been initialized
