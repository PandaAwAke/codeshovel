diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java
index 532f35a93..5a4d38091 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java
@@ -502,128 +502,120 @@ public class HiddenFieldCheck
      */
     public void setIgnoreConstructorParameter(
         boolean ignoreConstructorParameter) {
         this.ignoreConstructorParameter = ignoreConstructorParameter;
     }
 
     /**
      * Set whether to ignore parameters of abstract methods.
      * @param ignoreAbstractMethods decide whether to ignore
      * parameters of abstract methods.
      */
     public void setIgnoreAbstractMethods(
         boolean ignoreAbstractMethods) {
         this.ignoreAbstractMethods = ignoreAbstractMethods;
     }
 
     /**
      * Holds the names of static and instance fields of a type.
      * @author Rick Giles
      * Describe class FieldFrame
      * @author Rick Giles
      */
     private static class FieldFrame {
         /** Name of the frame, such name of the class or enum declaration */
         private final String frameName;
 
         /** Is this a static inner type */
         private final boolean staticType;
 
         /** Parent frame. */
         private final FieldFrame parent;
 
         /** Set of instance field names */
         private final Set<String> instanceFields = Sets.newHashSet();
 
         /** Set of static field names */
         private final Set<String> staticFields = Sets.newHashSet();
 
         /**
          * Creates new frame.
          * @param parent parent frame.
          * @param staticType is this a static inner type (class or enum).
          * @param frameName name associated with the frame, which can be a
          */
         public FieldFrame(FieldFrame parent, boolean staticType, String frameName) {
             this.parent = parent;
             this.staticType = staticType;
             this.frameName = frameName;
         }
 
-        /**
-         * Is this frame for static inner type.
-         * @return is this field frame for static inner type.
-         */
-        boolean isStaticType() {
-            return staticType;
-        }
-
         /**
          * Adds an instance field to this FieldFrame.
          * @param field  the name of the instance field.
          */
         public void addInstanceField(String field) {
             instanceFields.add(field);
         }
 
         /**
          * Adds a static field to this FieldFrame.
          * @param field  the name of the instance field.
          */
         public void addStaticField(String field) {
             staticFields.add(field);
         }
 
         /**
          * Determines whether this FieldFrame contains an instance field.
          * @param field the field to check.
          * @return true if this FieldFrame contains instance field field.
          */
         public boolean containsInstanceField(String field) {
             return instanceFields.contains(field)
                     || parent != null
-                    && !isStaticType()
+                    && !staticType
                     && parent.containsInstanceField(field);
 
         }
 
         /**
          * Determines whether this FieldFrame contains a static field.
          * @param field the field to check.
          * @return true if this FieldFrame contains static field field.
          */
         public boolean containsStaticField(String field) {
             return staticFields.contains(field)
                     || parent != null
                     && parent.containsStaticField(field);
         }
 
         /**
          * Getter for parent frame.
          * @return parent frame.
          */
         public FieldFrame getParent() {
             return parent;
         }
 
         /**
          * Check if current frame is embedded in class or enum with
          * specific name.
          *
          * @param classOrEnumName name of class or enum that we are looking
          * for in the chain of field frames.
          *
          * @return true if current frame is embedded in class or enum
          * with name classOrNameName
          */
         private boolean embeddedIn(String classOrEnumName) {
             FieldFrame currentFrame = this;
             while (currentFrame != null) {
                 if (java.util.Objects.equals(currentFrame.frameName, classOrEnumName)) {
                     return true;
                 }
                 currentFrame = currentFrame.parent;
             }
             return false;
         }
     }
 }
