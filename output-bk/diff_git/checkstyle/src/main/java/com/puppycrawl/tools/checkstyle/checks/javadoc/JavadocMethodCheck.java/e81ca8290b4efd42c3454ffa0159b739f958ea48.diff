diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
index 526d63656..da9fcd470 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
@@ -434,119 +434,119 @@ public class JavadocMethodCheck extends AbstractTypeAwareCheck {
     }
 
     /**
      * Checks if the given method name matches the regex. In that case
      * we skip enforcement of javadoc for this method
      * @param methodDef {@link TokenTypes#METHOD_DEF METHOD_DEF}
      * @return true if given method name matches the regex.
      */
     private boolean matchesSkipRegex(DetailAST methodDef) {
         if (ignoreMethodNamesRegex != null) {
             final DetailAST ident = methodDef.findFirstToken(TokenTypes.IDENT);
             final String methodName = ident.getText();
 
             final Matcher matcher = ignoreMethodNamesRegex.matcher(methodName);
             if (matcher.matches()) {
                 return true;
             }
         }
         return false;
     }
 
     /**
      * Whether we should check this node.
      *
      * @param ast a given node.
      * @param nodeScope the scope of the node.
      * @return whether we should check a given node.
      */
     private boolean shouldCheck(final DetailAST ast, final Scope nodeScope) {
         final Scope surroundingScope = ScopeUtils.getSurroundingScope(ast);
 
         return nodeScope.isIn(scope)
                 && surroundingScope.isIn(scope)
                 && (excludeScope == null || !nodeScope.isIn(excludeScope)
                     || !surroundingScope.isIn(excludeScope));
     }
 
     /**
      * Checks the Javadoc for a method.
      *
      * @param ast the token for the method
      * @param comment the Javadoc comment
      */
     private void checkComment(DetailAST ast, TextBlock comment) {
         final List<JavadocTag> tags = getMethodTags(comment);
 
         if (hasShortCircuitTag(ast, tags)) {
             return;
         }
 
-        Iterator<JavadocTag> it = tags.iterator();
+        final Iterator<JavadocTag> it = tags.iterator();
         if (ast.getType() != TokenTypes.ANNOTATION_FIELD_DEF) {
             // Check for inheritDoc
             boolean hasInheritDocTag = false;
             while (it.hasNext() && !hasInheritDocTag) {
                 hasInheritDocTag = it.next().isInheritDocTag();
             }
 
             checkParamTags(tags, ast, !hasInheritDocTag);
             checkThrowsTags(tags, getThrows(ast), !hasInheritDocTag);
             if (CheckUtils.isVoidMethod(ast)) {
                 checkReturnTag(tags, ast.getLineNo(), !hasInheritDocTag);
             }
         }
 
         // Dump out all unused tags
-        it = tags.iterator();
-        while (it.hasNext()) {
-            final JavadocTag jt = it.next();
+        final Iterator<JavadocTag> unusedTagIt = tags.iterator();
+        while (unusedTagIt.hasNext()) {
+            final JavadocTag jt = unusedTagIt.next();
             if (!jt.isSeeOrInheritDocTag()) {
                 log(jt.getLineNo(), MSG_UNUSED_TAG_GENERAL);
             }
         }
     }
 
     /**
      * Validates whether the Javadoc has a short circuit tag. Currently this is
      * the inheritTag. Any errors are logged.
      *
      * @param ast the construct being checked
      * @param tags the list of Javadoc tags associated with the construct
      * @return true if the construct has a short circuit tag.
      */
     private boolean hasShortCircuitTag(final DetailAST ast,
             final List<JavadocTag> tags) {
         // Check if it contains {@inheritDoc} tag
         if (tags.size() != 1
                 || !tags.get(0).isInheritDocTag()) {
             return false;
         }
 
         // Invalid if private, a constructor, or a static method
         if (!JavadocTagInfo.INHERIT_DOC.isValidOn(ast)) {
             log(ast, MSG_INVALID_INHERIT_DOC);
         }
 
         return true;
     }
 
     /**
      * Returns the scope for the method/constructor at the specified AST. If
      * the method is in an interface or annotation block, the scope is assumed
      * to be public.
      *
      * @param ast the token of the method/constructor
      * @return the scope of the method/constructor
      */
     private static Scope calculateScope(final DetailAST ast) {
         final DetailAST mods = ast.findFirstToken(TokenTypes.MODIFIERS);
         final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);
 
         if (ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {
             return Scope.PUBLIC;
         }
         else {
             return declaredScope;
         }
     }
 
@@ -874,115 +874,115 @@ public class JavadocMethodCheck extends AbstractTypeAwareCheck {
             final Token token = new Token(tag.getFirstArg(), tag.getLineNo(), tag
                     .getColumnNo());
             final AbstractClassInfo documentedCI = createClassInfo(token,
                     getCurrentClassName());
             final boolean found = foundThrows.contains(documentedEx)
                     || isInThrows(throwsList, documentedCI, foundThrows);
 
             // Handle extra JavadocTag.
             if (!found) {
                 boolean reqd = true;
                 if (allowUndeclaredRTE) {
                     reqd = !isUnchecked(documentedCI.getClazz());
                 }
 
                 if (reqd && validateThrows) {
                     log(tag.getLineNo(), tag.getColumnNo(),
                         MSG_UNUSED_TAG,
                         JavadocTagInfo.THROWS.getText(), tag.getFirstArg());
 
                 }
             }
         }
         // Now dump out all throws without tags :- unless
         // the user has chosen to suppress these problems
         if (!allowMissingThrowsTags && reportExpectedTags) {
             for (ExceptionInfo ei : throwsList) {
                 if (!ei.isFound()) {
                     final Token fi = ei.getName();
                     log(fi.getLineNo(), fi.getColumnNo(),
                         MSG_EXCPECTED_TAG,
                         JavadocTagInfo.THROWS.getText(), fi.getText());
                 }
             }
         }
     }
 
     /**
      * Verifies that documented exception is in throws.
      *
      * @param throwsList list of throws
      * @param documentedCI documented exception class info
      * @param foundThrows previously found throws
      * @return true if documented exception is in throws.
      */
     private boolean isInThrows(List<ExceptionInfo> throwsList,
             AbstractClassInfo documentedCI, Set<String> foundThrows) {
         boolean found = false;
         ExceptionInfo foundException = null;
 
         // First look for matches on the exception name
-        ListIterator<ExceptionInfo> throwIt = throwsList.listIterator();
+        final ListIterator<ExceptionInfo> throwIt = throwsList.listIterator();
         while (!found && throwIt.hasNext()) {
             final ExceptionInfo ei = throwIt.next();
 
             if (ei.getName().getText().equals(
                     documentedCI.getName().getText())) {
                 found = true;
                 foundException = ei;
             }
         }
 
         // Now match on the exception type
-        throwIt = throwsList.listIterator();
-        while (!found && throwIt.hasNext()) {
-            final ExceptionInfo ei = throwIt.next();
+        final ListIterator<ExceptionInfo> exceptionInfoIt = throwsList.listIterator();
+        while (!found && exceptionInfoIt.hasNext()) {
+            final ExceptionInfo ei = exceptionInfoIt.next();
 
             if (documentedCI.getClazz() == ei.getClazz()) {
                 found = true;
                 foundException = ei;
             }
             else if (allowThrowsTagsForSubclasses) {
                 found = isSubclass(documentedCI.getClazz(), ei.getClazz());
             }
         }
 
         if (foundException != null) {
             foundException.setFound();
             foundThrows.add(documentedCI.getName().getText());
         }
 
         return found;
     }
 
     /** Stores useful information about declared exception. */
     private static class ExceptionInfo {
         /** Does the exception have throws tag associated with. */
         private boolean found;
         /** Class information associated with this exception. */
         private final AbstractClassInfo classInfo;
 
         /**
          * Creates new instance for {@code FullIdent}.
          *
          * @param classInfo clas info
          */
         ExceptionInfo(AbstractClassInfo classInfo) {
             this.classInfo = classInfo;
         }
 
         /** Mark that the exception has associated throws tag */
         final void setFound() {
             found = true;
         }
 
         /** @return whether the exception has throws tag associated with */
         final boolean isFound() {
             return found;
         }
 
         /** @return exception's name */
         final Token getName() {
             return classInfo.getName();
         }
 
         /** @return class for this exception */
