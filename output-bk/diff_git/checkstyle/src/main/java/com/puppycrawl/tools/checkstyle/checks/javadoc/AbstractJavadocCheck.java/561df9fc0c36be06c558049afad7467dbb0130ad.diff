diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java
index bd45bc74b..c7331e16e 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java
@@ -201,171 +201,201 @@ public abstract class AbstractJavadocCheck extends Check {
      *        DetailAST of Javadoc comment
      * @return DetailNode tree of Javadoc comment
      */
     private ParseStatus parseJavadocAsDetailNode(DetailAST javadocCommentAst) {
         final String javadocComment = JavadocUtils.getJavadocCommentContent(javadocCommentAst);
 
         // Log messages should have line number in scope of file,
         // not in scope of Javadoc comment.
         // Offset is line number of beginning of Javadoc comment.
         errorListener.setOffset(javadocCommentAst.getLineNo() - 1);
 
         final ParseStatus result = new ParseStatus();
         ParseTree parseTree = null;
         ParseErrorMessage parseErrorMessage = null;
 
         try {
             parseTree = parseJavadocAsParseTree(javadocComment);
         }
         catch (ParseCancellationException e) {
             // If syntax error occurs then message is printed by error listener
             // and parser throws this runtime exception to stop parsing.
             // Just stop processing current Javadoc comment.
             parseErrorMessage = errorListener.getErrorMessage();
 
             // There are cases when antlr error listener does not handle syntax error
             if (parseErrorMessage == null) {
                 parseErrorMessage = new ParseErrorMessage(javadocCommentAst.getLineNo(),
                         UNRECOGNIZED_ANTLR_ERROR_MESSAGE_KEY,
                         javadocCommentAst.getColumnNo(), e.getMessage());
             }
         }
 
         if (parseErrorMessage == null) {
             final DetailNode tree = convertParseTreeToDetailNode(parseTree);
             result.setTree(tree);
         }
         else {
             result.setParseErrorMessage(parseErrorMessage);
         }
 
         return result;
     }
 
     /**
      * Converts ParseTree (that is generated by ANTLRv4) to DetailNode tree.
      *
      * @param parseTreeNode root node of ParseTree
      * @return root of DetailNode tree
      */
     private DetailNode convertParseTreeToDetailNode(ParseTree parseTreeNode) {
-        final JavadocNodeImpl rootJavadocNode = createJavadocNode(parseTreeNode, null, -1);
-
-        int childCount = parseTreeNode.getChildCount();
-        JavadocNodeImpl[] children = new JavadocNodeImpl[childCount];
-
-        for (int i = 0; i < childCount; i++) {
-            final JavadocNodeImpl child = createJavadocNode(parseTreeNode.getChild(i),
-                    rootJavadocNode, i);
-            children[i] = child;
-        }
-        rootJavadocNode.setChildren(children);
+        final JavadocNodeImpl rootJavadocNode = createRootJavadocNode(parseTreeNode);
 
         JavadocNodeImpl currentJavadocParent = rootJavadocNode;
         ParseTree parseTreeParent = parseTreeNode;
 
         while (currentJavadocParent != null) {
-            children = (JavadocNodeImpl[]) currentJavadocParent.getChildren();
-            childCount = children.length;
-
-            for (int i = 0; i < childCount; i++) {
-                final JavadocNodeImpl currentJavadocNode = children[i];
-                final ParseTree currentParseTreeNodeChild = parseTreeParent.getChild(i);
+            final JavadocNodeImpl[] children =
+                    (JavadocNodeImpl[]) currentJavadocParent.getChildren();
 
-                final JavadocNodeImpl[] subChildren =
-                        new JavadocNodeImpl[currentJavadocNode.getChildren().length];
+            insertChildrenNodes(children, parseTreeParent);
 
-                for (int j = 0; j < subChildren.length; j++) {
-                    final JavadocNodeImpl child =
-                            createJavadocNode(currentParseTreeNodeChild.getChild(j),
-                                    currentJavadocNode, j);
-
-                    subChildren[j] = child;
-                }
-                currentJavadocNode.setChildren(subChildren);
-            }
-
-            if (childCount > 0) {
+            if (children.length > 0) {
                 currentJavadocParent = children[0];
                 parseTreeParent = parseTreeParent.getChild(0);
             }
             else {
                 JavadocNodeImpl nextJavadocSibling = (JavadocNodeImpl) JavadocUtils
                         .getNextSibling(currentJavadocParent);
 
                 ParseTree nextParseTreeSibling = getNextSibling(parseTreeParent);
 
                 if (nextJavadocSibling == null) {
                     JavadocNodeImpl tempJavadocParent =
                             (JavadocNodeImpl) currentJavadocParent.getParent();
 
                     ParseTree tempParseTreeParent = parseTreeParent.getParent();
 
                     while (nextJavadocSibling == null && tempJavadocParent != null) {
 
                         nextJavadocSibling = (JavadocNodeImpl) JavadocUtils
                                 .getNextSibling(tempJavadocParent);
 
                         nextParseTreeSibling = getNextSibling(tempParseTreeParent);
 
                         tempJavadocParent = (JavadocNodeImpl) tempJavadocParent.getParent();
                         tempParseTreeParent = tempParseTreeParent.getParent();
                     }
                 }
                 currentJavadocParent = nextJavadocSibling;
                 parseTreeParent = nextParseTreeSibling;
             }
         }
 
         return rootJavadocNode;
     }
 
+    /**
+     * Creates child nodes for each node from 'nodes' array.
+     * @param parseTreeParent original ParseTree parent node
+     * @param nodes array of JavadocNodeImpl nodes
+     */
+    private void insertChildrenNodes(final JavadocNodeImpl[] nodes, ParseTree parseTreeParent) {
+        for (int i = 0; i < nodes.length; i++) {
+            final JavadocNodeImpl currentJavadocNode = nodes[i];
+            final ParseTree currentParseTreeNodeChild = parseTreeParent.getChild(i);
+            final JavadocNodeImpl[] subChildren =
+                    createChildrenNodes(currentJavadocNode, currentParseTreeNodeChild);
+            currentJavadocNode.setChildren(subChildren);
+        }
+    }
+
+    /**
+     * Creates children Javadoc nodes base on ParseTree node's children.
+     * @param parentJavadocNode node that will be parent for created children
+     * @param parseTreeNode original ParseTree node
+     * @return array of Javadoc nodes
+     */
+    private JavadocNodeImpl[]
+            createChildrenNodes(JavadocNodeImpl parentJavadocNode, ParseTree parseTreeNode) {
+        final JavadocNodeImpl[] children =
+                new JavadocNodeImpl[parseTreeNode.getChildCount()];
+
+        for (int j = 0; j < children.length; j++) {
+            final JavadocNodeImpl child =
+                    createJavadocNode(parseTreeNode.getChild(j), parentJavadocNode, j);
+
+            children[j] = child;
+        }
+        return children;
+    }
+
+    /**
+     * Creates root JavadocNodeImpl node base on ParseTree root node.
+     * @param parseTreeNode ParseTree root node
+     * @return root Javadoc node
+     */
+    private JavadocNodeImpl createRootJavadocNode(ParseTree parseTreeNode) {
+        final JavadocNodeImpl rootJavadocNode = createJavadocNode(parseTreeNode, null, -1);
+
+        final int childCount = parseTreeNode.getChildCount();
+        final JavadocNodeImpl[] children = new JavadocNodeImpl[childCount];
+
+        for (int i = 0; i < childCount; i++) {
+            final JavadocNodeImpl child = createJavadocNode(parseTreeNode.getChild(i),
+                    rootJavadocNode, i);
+            children[i] = child;
+        }
+        rootJavadocNode.setChildren(children);
+        return rootJavadocNode;
+    }
+
     /**
      * Creates JavadocNodeImpl node on base of ParseTree node.
      *
      * @param parseTree ParseTree node
      * @param parent DetailNode that will be parent of new node
      * @param index child index that has new node
      * @return JavadocNodeImpl node on base of ParseTree node.
      */
     private JavadocNodeImpl createJavadocNode(ParseTree parseTree, DetailNode parent, int index) {
         final JavadocNodeImpl node = new JavadocNodeImpl();
         node.setText(parseTree.getText());
         node.setColumnNumber(getColumn(parseTree));
         node.setLineNumber(getLine(parseTree) + blockCommentAst.getLineNo());
         node.setIndex(index);
         node.setType(getTokenType(parseTree));
         node.setParent(parent);
         node.setChildren(new JavadocNodeImpl[parseTree.getChildCount()]);
         return node;
     }
 
     /**
      * Gets next sibling of ParseTree node.
      * @param node ParseTree node
      * @return next sibling of ParseTree node.
      */
     private static ParseTree getNextSibling(ParseTree node) {
         if (node.getParent() == null) {
             return null;
         }
 
         final ParseTree parent = node.getParent();
         final int childCount = parent.getChildCount();
 
         int i = 0;
         while (true) {
             final ParseTree currentNode = parent.getChild(i);
             if (currentNode.equals(node)) {
                 if (i == childCount - 1) {
                     return null;
                 }
                 return parent.getChild(i + 1);
             }
             i++;
         }
     }
 
     /**
      * Gets token type of ParseTree node from JavadocTokenTypes class.
      * @param node ParseTree node.
      * @return token type from JavadocTokenTypes
