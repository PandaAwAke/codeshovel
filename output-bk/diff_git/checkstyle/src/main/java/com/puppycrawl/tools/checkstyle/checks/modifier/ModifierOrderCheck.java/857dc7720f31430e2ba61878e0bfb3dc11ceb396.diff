diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java
index f3d43c909..5b5712a40 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java
@@ -88,95 +88,91 @@ public class ModifierOrderCheck
     };
 
     @Override
     public int[] getDefaultTokens() {
         return new int[] {TokenTypes.MODIFIERS};
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.MODIFIERS};
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final List<DetailAST> mods = Lists.newArrayList();
         DetailAST modifier = ast.getFirstChild();
         while (modifier != null) {
             mods.add(modifier);
             modifier = modifier.getNextSibling();
         }
 
         if (!mods.isEmpty()) {
             final DetailAST error = checkOrderSuggestedByJLS(mods);
             if (error != null) {
                 if (error.getType() == TokenTypes.ANNOTATION) {
                     log(error.getLineNo(), error.getColumnNo(),
                             MSG_ANNOTATION_ORDER,
                              error.getFirstChild().getText()
                              + error.getFirstChild().getNextSibling()
                                 .getText());
                 }
                 else {
                     log(error.getLineNo(), error.getColumnNo(),
                             MSG_MODIFIER_ORDER, error.getText());
                 }
             }
         }
     }
 
 
     /**
      * Checks if the modifiers were added in the order suggested
      * in the Java language specification.
      *
      * @param modifiers list of modifier AST tokens
      * @return null if the order is correct, otherwise returns the offending
      * *       modifier AST.
      */
     DetailAST checkOrderSuggestedByJLS(List<DetailAST> modifiers) {
         final Iterator<DetailAST> it = modifiers.iterator();
-        //No modifiers, no problems
-        if (!it.hasNext()) {
-            return null;
-        }
 
         //Speed past all initial annotations
         DetailAST modifier;
         do {
             modifier = it.next();
         }
         while (it.hasNext() && modifier.getType() == TokenTypes.ANNOTATION);
 
         //All modifiers are annotations, no problem
         if (modifier.getType() == TokenTypes.ANNOTATION) {
             return null;
         }
 
         int i = 0;
         while (i < JLS_ORDER.length) {
             if (modifier.getType() == TokenTypes.ANNOTATION) {
                 //Annotation not at start of modifiers, bad
                 return modifier;
             }
 
             while (i < JLS_ORDER.length
                    && !JLS_ORDER[i].equals(modifier.getText())) {
                 i++;
             }
 
             if (i == JLS_ORDER.length) {
                 //Current modifier is out of JLS order
                 return modifier;
             }
             else if (!it.hasNext()) {
                 //Reached end of modifiers without problem
                 return null;
             }
             else {
                 modifier = it.next();
             }
         }
 
         return modifier;
     }
 }
