diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java
index 720c218fd..1ddd3e5b3 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java
@@ -52,138 +52,126 @@ import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
  *    offendingLine(for, whatever, reason); // SUPPRESS ParameterNumberCheck
  * </pre>
  * or it may be configured to span multiple lines, either forward:
  * <pre>
  *    // PERMIT MultipleVariableDeclarations NEXT 3 LINES
  *    double x1 = 1.0, y1 = 0.0, z1 = 0.0;
  *    double x2 = 0.0, y2 = 1.0, z2 = 0.0;
  *    double x3 = 0.0, y3 = 0.0, z3 = 1.0;
  * </pre>
  * or reverse:
  * <pre>
  *   try {
  *     thirdPartyLibrary.method();
  *   } catch (RuntimeException ex) {
  *     // ALLOW ILLEGAL CATCH BECAUSE third party API wraps everything
  *     // in RuntimeExceptions.
  *     ...
  *   }
  * </pre>
  *
  * <p>See {@link SuppressionCommentFilter} for usage notes.
  *
  * @author Mick Killianey
  */
 public class SuppressWithNearbyCommentFilter
     extends AutomaticBean
     implements Filter {
 
     /** Format to turns checkstyle reporting off. */
     private static final String DEFAULT_COMMENT_FORMAT =
         "SUPPRESS CHECKSTYLE (\\w+)";
 
     /** Default regex for checks that should be suppressed. */
     private static final String DEFAULT_CHECK_FORMAT = ".*";
 
     /** Default regex for lines that should be suppressed. */
     private static final String DEFAULT_INFLUENCE_FORMAT = "0";
 
     /** Tagged comments. */
     private final List<Tag> tags = new ArrayList<>();
 
     /** Whether to look for trigger in C-style comments. */
     private boolean checkC = true;
 
     /** Whether to look for trigger in C++-style comments. */
     // -@cs[AbbreviationAsWordInName] We can not change it as,
     // check's property is a part of API (used in configurations).
     private boolean checkCPP = true;
 
     /** Parsed comment regexp that marks checkstyle suppression region. */
-    private Pattern commentRegexp;
+    private Pattern commentFormat = Pattern.compile(DEFAULT_COMMENT_FORMAT);
 
     /** The comment pattern that triggers suppression. */
-    private String checkFormat;
+    private String checkFormat = DEFAULT_CHECK_FORMAT;
 
     /** The message format to suppress. */
     private String messageFormat;
 
     /** The influence of the suppression comment. */
-    private String influenceFormat;
+    private String influenceFormat = DEFAULT_INFLUENCE_FORMAT;
 
     /**
      * References the current FileContents for this filter.
      * Since this is a weak reference to the FileContents, the FileContents
      * can be reclaimed as soon as the strong references in TreeWalker
      * and FileContentsHolder are reassigned to the next FileContents,
      * at which time filtering for the current FileContents is finished.
      */
     private WeakReference<FileContents> fileContentsReference = new WeakReference<>(null);
 
-    /**
-     * Constructs a SuppressionCommentFilter.
-     * Initializes comment on, comment off, and check formats
-     * to defaults.
-     */
-    public SuppressWithNearbyCommentFilter() {
-        setCommentFormat(DEFAULT_COMMENT_FORMAT);
-        checkFormat = DEFAULT_CHECK_FORMAT;
-        influenceFormat = DEFAULT_INFLUENCE_FORMAT;
-    }
-
     /**
      * Set the format for a comment that turns off reporting.
-     * @param format a {@code String} value.
-     * @throws ConversionException if unable to create Pattern object.
+     * @param pattern a pattern.
      */
-    public final void setCommentFormat(String format) {
-        commentRegexp = CommonUtils.createPattern(format);
+    public final void setCommentFormat(Pattern pattern) {
+        commentFormat = pattern;
     }
 
     /**
      * @return the FileContents for this filter.
      */
     public FileContents getFileContents() {
         return fileContentsReference.get();
     }
 
     /**
      * Set the FileContents for this filter.
      * @param fileContents the FileContents for this filter.
      */
     public void setFileContents(FileContents fileContents) {
         fileContentsReference = new WeakReference<>(fileContents);
     }
 
     /**
      * Set the format for a check.
      * @param format a {@code String} value
      */
     public final void setCheckFormat(String format) {
         checkFormat = format;
     }
 
     /**
      * Set the format for a message.
      * @param format a {@code String} value
      */
     public void setMessageFormat(String format) {
         messageFormat = format;
     }
 
     /**
      * Set the format for the influence of this check.
      * @param format a {@code String} value
      */
     public final void setInfluenceFormat(String format) {
         influenceFormat = format;
     }
 
     /**
      * Set whether to look in C++ comments.
      * @param checkCpp {@code true} if C++ comments are checked.
      */
     // -@cs[AbbreviationAsWordInName] We can not change it as,
     // check's property is a part of API (used in configurations).
     public void setCheckCPP(boolean checkCpp) {
         checkCPP = checkCpp;
     }
@@ -226,162 +214,162 @@ public class SuppressWithNearbyCommentFilter
     private boolean matchesTag(AuditEvent event) {
         for (final Tag tag : tags) {
             if (tag.isMatch(event)) {
                 return true;
             }
         }
         return false;
     }
 
     /**
      * Collects all the suppression tags for all comments into a list and
      * sorts the list.
      */
     private void tagSuppressions() {
         tags.clear();
         final FileContents contents = getFileContents();
         if (checkCPP) {
             tagSuppressions(contents.getCppComments().values());
         }
         if (checkC) {
             final Collection<List<TextBlock>> cComments =
                 contents.getCComments().values();
             cComments.forEach(this::tagSuppressions);
         }
         Collections.sort(tags);
     }
 
     /**
      * Appends the suppressions in a collection of comments to the full
      * set of suppression tags.
      * @param comments the set of comments.
      */
     private void tagSuppressions(Collection<TextBlock> comments) {
         for (final TextBlock comment : comments) {
             final int startLineNo = comment.getStartLineNo();
             final String[] text = comment.getText();
             tagCommentLine(text[0], startLineNo);
             for (int i = 1; i < text.length; i++) {
                 tagCommentLine(text[i], startLineNo + i);
             }
         }
     }
 
     /**
      * Tags a string if it matches the format for turning
      * checkstyle reporting on or the format for turning reporting off.
      * @param text the string to tag.
      * @param line the line number of text.
      */
     private void tagCommentLine(String text, int line) {
-        final Matcher matcher = commentRegexp.matcher(text);
+        final Matcher matcher = commentFormat.matcher(text);
         if (matcher.find()) {
             addTag(matcher.group(0), line);
         }
     }
 
     /**
      * Adds a comment suppression {@code Tag} to the list of all tags.
      * @param text the text of the tag.
      * @param line the line number of the tag.
      */
     private void addTag(String text, int line) {
         final Tag tag = new Tag(text, line, this);
         tags.add(tag);
     }
 
     /**
      * A Tag holds a suppression comment and its location.
      */
     public static class Tag implements Comparable<Tag> {
         /** The text of the tag. */
         private final String text;
 
         /** The first line where warnings may be suppressed. */
         private final int firstLine;
 
         /** The last line where warnings may be suppressed. */
         private final int lastLine;
 
         /** The parsed check regexp, expanded for the text of this tag. */
         private final Pattern tagCheckRegexp;
 
         /** The parsed message regexp, expanded for the text of this tag. */
         private final Pattern tagMessageRegexp;
 
         /**
          * Constructs a tag.
          * @param text the text of the suppression.
          * @param line the line number.
          * @param filter the {@code SuppressWithNearbyCommentFilter} with the context
          * @throws ConversionException if unable to parse expanded text.
          */
         public Tag(String text, int line, SuppressWithNearbyCommentFilter filter) {
             this.text = text;
 
             //Expand regexp for check and message
             //Does not intern Patterns with Utils.getPattern()
             String format = "";
             try {
                 format = CommonUtils.fillTemplateWithStringsByRegexp(
-                        filter.checkFormat, text, filter.commentRegexp);
+                        filter.checkFormat, text, filter.commentFormat);
                 tagCheckRegexp = Pattern.compile(format);
                 if (filter.messageFormat == null) {
                     tagMessageRegexp = null;
                 }
                 else {
                     format = CommonUtils.fillTemplateWithStringsByRegexp(
-                            filter.messageFormat, text, filter.commentRegexp);
+                            filter.messageFormat, text, filter.commentFormat);
                     tagMessageRegexp = Pattern.compile(format);
                 }
                 format = CommonUtils.fillTemplateWithStringsByRegexp(
-                        filter.influenceFormat, text, filter.commentRegexp);
+                        filter.influenceFormat, text, filter.commentFormat);
                 final int influence;
                 try {
                     if (CommonUtils.startsWithChar(format, '+')) {
                         format = format.substring(1);
                     }
                     influence = Integer.parseInt(format);
                 }
                 catch (final NumberFormatException ex) {
                     throw new ConversionException(
                         "unable to parse influence from '" + text
                             + "' using " + filter.influenceFormat, ex);
                 }
                 if (influence >= 0) {
                     firstLine = line;
                     lastLine = line + influence;
                 }
                 else {
                     firstLine = line + influence;
                     lastLine = line;
                 }
             }
             catch (final PatternSyntaxException ex) {
                 throw new ConversionException(
                     "unable to parse expanded comment " + format,
                     ex);
             }
         }
 
         /**
          * Compares the position of this tag in the file
          * with the position of another tag.
          * @param other the tag to compare with this one.
          * @return a negative number if this tag is before the other tag,
          *     0 if they are at the same position, and a positive number if this
          *     tag is after the other tag.
          */
         @Override
         public int compareTo(Tag other) {
             if (firstLine == other.firstLine) {
                 return Integer.compare(lastLine, other.lastLine);
             }
 
             return Integer.compare(firstLine, other.firstLine);
         }
 
         @Override
         public boolean equals(Object other) {
             if (this == other) {
                 return true;
             }
