diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java
index 79aba1a7b..404239c96 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java
@@ -202,114 +202,114 @@ public class SuppressWarningsCheck extends AbstractCheck {
                                 // but they should not cause exceptions.
                         }
                     }
                     warning = warning.getNextSibling();
                 }
             }
         }
     }
 
     /**
      * Gets the {@link SuppressWarnings SuppressWarnings} annotation
      * that is annotating the AST.  If the annotation does not exist
      * this method will return {@code null}.
      *
      * @param ast the AST
      * @return the {@link SuppressWarnings SuppressWarnings} annotation
      */
     private static DetailAST getSuppressWarnings(DetailAST ast) {
         DetailAST annotation = AnnotationUtility.getAnnotation(ast, SUPPRESS_WARNINGS);
 
         if (annotation == null) {
             annotation = AnnotationUtility.getAnnotation(ast, FQ_SUPPRESS_WARNINGS);
         }
         return annotation;
     }
 
     /**
      * This method looks for a warning that matches a configured expression.
      * If found it logs a violation at the given line and column number.
      *
      * @param lineNo the line number
      * @param colNum the column number
      * @param warningText the warning.
      */
     private void logMatch(final int lineNo,
         final int colNum, final String warningText) {
         final Matcher matcher = format.matcher(warningText);
         if (matcher.matches()) {
             log(lineNo, colNum,
                     MSG_KEY_SUPPRESSED_WARNING_NOT_ALLOWED, warningText);
         }
     }
 
     /**
      * Find the parent (holder) of the of the warnings (Expr).
      *
      * @param annotation the annotation
      * @return a Token representing the expr.
      */
     private static DetailAST findWarningsHolder(final DetailAST annotation) {
-        DetailAST warningsHolder = annotation;
         final DetailAST annValuePair =
             annotation.findFirstToken(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);
         final DetailAST annArrayInit;
 
         if (annValuePair == null) {
             annArrayInit =
                     annotation.findFirstToken(TokenTypes.ANNOTATION_ARRAY_INIT);
         }
         else {
             annArrayInit =
                     annValuePair.findFirstToken(TokenTypes.ANNOTATION_ARRAY_INIT);
         }
 
+        DetailAST warningsHolder = annotation;
         if (annArrayInit != null) {
             warningsHolder = annArrayInit;
         }
 
         return warningsHolder;
     }
 
     /**
      * Strips a single double quote from the front and back of a string.
      *
      * <p>For example:
      * <br/>
      * Input String = "unchecked"
      * <br/>
      * Output String = unchecked
      *
      * @param warning the warning string
      * @return the string without two quotes
      */
     private static String removeQuotes(final String warning) {
         return warning.substring(1, warning.length() - 1);
     }
 
     /**
      * Recursively walks a conditional expression checking the left
      * and right sides, checking for matches and
      * logging violations.
      *
      * @param cond a Conditional type
      * {@link TokenTypes#QUESTION QUESTION}
      */
     private void walkConditional(final DetailAST cond) {
         if (cond.getType() == TokenTypes.QUESTION) {
             walkConditional(getCondLeft(cond));
             walkConditional(getCondRight(cond));
         }
         else {
             final String warningText =
                     removeQuotes(cond.getText());
             logMatch(cond.getLineNo(), cond.getColumnNo(), warningText);
         }
     }
 
     /**
      * Retrieves the left side of a conditional.
      *
      * @param cond cond a conditional type
      * {@link TokenTypes#QUESTION QUESTION}
      * @return either the value
      *     or another conditional
