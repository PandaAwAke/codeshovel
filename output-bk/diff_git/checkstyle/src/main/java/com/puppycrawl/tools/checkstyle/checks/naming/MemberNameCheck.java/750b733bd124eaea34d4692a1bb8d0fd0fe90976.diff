diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MemberNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MemberNameCheck.java
index 0732c13d6..45cb8b410 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MemberNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MemberNameCheck.java
@@ -18,62 +18,62 @@
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.naming;
 
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.ScopeUtils;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * <p>
  * Checks that instance variable names conform to a format specified
  * by the format property. The format is a
  * {@link java.util.regex.Pattern regular expression}
  * and defaults to
  * <strong>^[a-z][a-zA-Z0-9]*$</strong>.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="MemberName"/&gt;
  * </pre>
  * <p>
  * An example of how to configure the check for names that begin with
  * &quot;m&quot;, followed by an upper case letter, and then letters and
  * digits is:
  * </p>
  * <pre>
  * &lt;module name="MemberName"&gt;
  *    &lt;property name="format" value="^m[A-Z][a-zA-Z0-9]*$"/&gt;
  * &lt;/module&gt;
  * </pre>
  * @author Rick Giles
  * @version 1.0
  */
 public class MemberNameCheck
     extends AbstractAccessControlNameCheck
 {
     /** Creates a new <code>MemberNameCheck</code> instance. */
     public MemberNameCheck()
     {
         super("^[a-z][a-zA-Z0-9]*$");
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.VARIABLE_DEF};
     }
 
     @Override
-    protected final boolean mustCheckName(DetailAST aAST)
+    protected final boolean mustCheckName(DetailAST ast)
     {
         final DetailAST modifiersAST =
-            aAST.findFirstToken(TokenTypes.MODIFIERS);
+            ast.findFirstToken(TokenTypes.MODIFIERS);
         final boolean isStatic = (modifiersAST != null)
             && modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);
 
-        return (!isStatic && !ScopeUtils.inInterfaceOrAnnotationBlock(aAST)
-            && !ScopeUtils.isLocalVariableDef(aAST))
+        return (!isStatic && !ScopeUtils.inInterfaceOrAnnotationBlock(ast)
+            && !ScopeUtils.isLocalVariableDef(ast))
             && shouldCheckInScope(modifiersAST);
     }
 }
