diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java
index a4cdf0ac3..691cd0744 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java
@@ -133,88 +133,88 @@ public class WriteTagCheck
                           TokenTypes.CLASS_DEF,
                           TokenTypes.ENUM_DEF,
                           TokenTypes.ANNOTATION_DEF,
         };
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.INTERFACE_DEF,
                           TokenTypes.CLASS_DEF,
                           TokenTypes.ENUM_DEF,
                           TokenTypes.ANNOTATION_DEF,
                           TokenTypes.METHOD_DEF,
                           TokenTypes.CTOR_DEF,
                           TokenTypes.ENUM_CONSTANT_DEF,
                           TokenTypes.ANNOTATION_FIELD_DEF,
         };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return ArrayUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final FileContents contents = getFileContents();
         final int lineNo = ast.getLineNo();
         final TextBlock cmt =
             contents.getJavadocBefore(lineNo);
         if (cmt == null) {
             log(lineNo, MISSING_TAG, tag);
         }
         else {
             checkTag(lineNo, cmt.getText());
         }
     }
 
     /**
      * Verifies that a type definition has a required tag.
      * @param lineNo the line number for the type definition.
      * @param comment the Javadoc comment for the type definition.
      */
     private void checkTag(int lineNo, String... comment) {
         if (tagRE == null) {
             return;
         }
 
         int tagCount = 0;
         for (int i = 0; i < comment.length; i++) {
-            final String s = comment[i];
-            final Matcher matcher = tagRE.matcher(s);
+            final String commentValue = comment[i];
+            final Matcher matcher = tagRE.matcher(commentValue);
             if (matcher.find()) {
                 tagCount += 1;
                 final int contentStart = matcher.start(1);
-                final String content = s.substring(contentStart);
+                final String content = commentValue.substring(contentStart);
                 if (tagFormatRE != null && !tagFormatRE.matcher(content).find()) {
                     log(lineNo + i - comment.length, TAG_FORMAT, tag, tagFormat);
                 }
                 else {
                     logTag(lineNo + i - comment.length, tag, content);
                 }
             }
         }
         if (tagCount == 0) {
             log(lineNo, MISSING_TAG, tag);
         }
 
     }
 
     /**
      * Log a message.
      *
      * @param line the line number where the error was found
      * @param tagName the javadoc tag to be logged
      * @param tagValue the contents of the tag
      *
      * @see java.text.MessageFormat
      */
     protected final void logTag(int line, String tagName, String tagValue) {
         final String originalSeverity = getSeverity();
         setSeverity(tagSeverityLevel.getName());
 
         log(line, WRITE_TAG, tagName, tagValue);
 
         setSeverity(originalSeverity);
     }
 }
