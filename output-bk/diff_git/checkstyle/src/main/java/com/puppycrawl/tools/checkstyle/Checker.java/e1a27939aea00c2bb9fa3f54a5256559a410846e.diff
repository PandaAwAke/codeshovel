diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java b/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
index 2c465a7eb..c914f75a8 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
@@ -399,82 +399,96 @@ public class Checker extends AutomaticBean implements MessageDispatcher
             if (Utils.startsWithChar(extension, '.')) {
                 fileExtensions[i] = extension;
             }
             else {
                 fileExtensions[i] = "." + extension;
             }
         }
     }
 
     /**
      * Sets the factory for creating submodules.
      *
      * @param moduleFactory the factory for creating FileSetChecks
      */
     public void setModuleFactory(ModuleFactory moduleFactory)
     {
         this.moduleFactory = moduleFactory;
     }
 
     /** @param localeCountry the country to report messages  **/
     public void setLocaleCountry(String localeCountry)
     {
         this.localeCountry = localeCountry;
     }
 
     /** @param localeLanguage the language to report messages  **/
     public void setLocaleLanguage(String localeLanguage)
     {
         this.localeLanguage = localeLanguage;
     }
 
     /**
      * Sets the severity level.  The string should be one of the names
      * defined in the <code>SeverityLevel</code> class.
      *
      * @param severity  The new severity level
      * @see SeverityLevel
      */
     public final void setSeverity(String severity)
     {
         severityLevel = SeverityLevel.getInstance(severity);
     }
 
     /**
      * Sets the classloader that is used to contextualize filesetchecks.
      * Some Check implementations will use that classloader to improve the
      * quality of their reports, e.g. to load a class and then analyze it via
      * reflection.
      * @param loader the new classloader
      */
-    public final void setClassloader(ClassLoader loader)
+    public final void setClassLoader(ClassLoader loader)
     {
         this.loader = loader;
     }
 
+    /**
+     * Sets the classloader that is used to contextualize filesetchecks.
+     * Some Check implementations will use that classloader to improve the
+     * quality of their reports, e.g. to load a class and then analyze it via
+     * reflection.
+     * @param loader the new classloader
+     * @deprecated use {@link #setClassLoader(ClassLoader loader)} instead.
+     */
+    @Deprecated
+    public final void setClassloader(ClassLoader loader)
+    {
+        setClassLoader(loader);
+    }
+
     /**
      * Sets the classloader used to load Checkstyle core and custom module
      * classes when the module tree is being built up.
      * If no custom ModuleFactory is being set for the Checker module then
      * this module classloader must be specified.
      * @param moduleClassLoader the classloader used to load module classes
      */
     public final void setModuleClassLoader(ClassLoader moduleClassLoader)
     {
         this.moduleClassLoader = moduleClassLoader;
     }
 
     /**
      * Sets a named charset.
      * @param charset the name of a charset
      * @throws UnsupportedEncodingException if charset is unsupported.
      */
     public void setCharset(String charset)
         throws UnsupportedEncodingException
     {
         if (!Charset.isSupported(charset)) {
             final String message = "unsupported charset: '" + charset + "'";
             throw new UnsupportedEncodingException(message);
         }
         this.charset = charset;
     }
 }
