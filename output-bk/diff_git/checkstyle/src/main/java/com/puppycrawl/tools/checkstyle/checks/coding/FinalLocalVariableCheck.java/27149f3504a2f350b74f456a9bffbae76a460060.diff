diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java
index 1e71d783a..4501a820c 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java
@@ -1,95 +1,102 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2015 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.coding;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FastStack;
 import com.puppycrawl.tools.checkstyle.api.ScopeUtils;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import java.util.HashMap;
 import java.util.Map;
 
 /**
  * <p>
  * Ensures that local variables that never get their values changed,
  * must be declared final.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="FinalLocalVariable"&gt;
  *     &lt;property name="token" value="VARIABLE_DEF"/&gt;
  * &lt;/module&gt;
  * </pre>
  * @author k_gibbs, r_auckenthaler
  */
 public class FinalLocalVariableCheck extends Check
 {
+
+    /**
+     * A key is pointing to the warning message text in "messages.properties"
+     * file.
+     */
+    public static final String MSG_KEY = "final.variable";
+
     /** Scope Stack */
     private final FastStack<Map<String, DetailAST>> scopeStack =
         FastStack.newInstance();
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.IDENT,
             TokenTypes.CTOR_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.VARIABLE_DEF,
             TokenTypes.INSTANCE_INIT,
             TokenTypes.STATIC_INIT,
             TokenTypes.LITERAL_FOR,
             TokenTypes.SLIST,
             TokenTypes.OBJBLOCK,
         };
     }
 
     @Override
     public int[] getAcceptableTokens()
     {
         return new int[] {
             TokenTypes.VARIABLE_DEF,
             TokenTypes.PARAMETER_DEF,
         };
     }
 
     @Override
     public int[] getRequiredTokens()
     {
         return new int[] {
             TokenTypes.IDENT,
             TokenTypes.CTOR_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.INSTANCE_INIT,
             TokenTypes.STATIC_INIT,
             TokenTypes.LITERAL_FOR,
             TokenTypes.SLIST,
             TokenTypes.OBJBLOCK,
         };
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
         switch (ast.getType()) {
             case TokenTypes.OBJBLOCK:
             case TokenTypes.SLIST:
@@ -180,59 +187,59 @@ public class FinalLocalVariableCheck extends Check
                         || modifiers.branchContains(TokenTypes.LITERAL_NATIVE);
             }
             parent = parent.getParent();
         }
         return false;
     }
 
     /**
      * Inserts a variable at the topmost scope stack
      * @param ast the variable to insert
      */
     private void insertVariable(DetailAST ast)
     {
         if (!ast.branchContains(TokenTypes.FINAL)) {
             final Map<String, DetailAST> state = scopeStack.peek();
             final DetailAST astNode = ast.findFirstToken(TokenTypes.IDENT);
             state.put(astNode.getText(), astNode);
         }
     }
 
     /**
      * Removes the variable from the Stacks
      * @param ast Variable to remove
      */
     private void removeVariable(DetailAST ast)
     {
         for (int i = scopeStack.size() - 1; i >= 0; i--) {
             final Map<String, DetailAST> state = scopeStack.peek(i);
             final Object obj = state.remove(ast.getText());
             if (obj != null) {
                 break;
             }
         }
     }
 
     @Override
     public void leaveToken(DetailAST ast)
     {
         super.leaveToken(ast);
 
         switch (ast.getType()) {
             case TokenTypes.OBJBLOCK:
             case TokenTypes.SLIST:
             case TokenTypes.LITERAL_FOR:
             case TokenTypes.CTOR_DEF:
             case TokenTypes.STATIC_INIT:
             case TokenTypes.INSTANCE_INIT:
             case TokenTypes.METHOD_DEF:
                 final Map<String, DetailAST> state = scopeStack.pop();
                 for (DetailAST var : state.values()) {
-                    log(var.getLineNo(), var.getColumnNo(), "final.variable", var
+                    log(var.getLineNo(), var.getColumnNo(), MSG_KEY, var
                         .getText());
                 }
                 break;
 
             default:
         }
     }
 }
