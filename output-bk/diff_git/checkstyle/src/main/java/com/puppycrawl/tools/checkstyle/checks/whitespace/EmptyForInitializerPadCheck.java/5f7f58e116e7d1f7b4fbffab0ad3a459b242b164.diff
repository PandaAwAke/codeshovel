diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForInitializerPadCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForInitializerPadCheck.java
index a2bfb5951..67f68dca0 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForInitializerPadCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForInitializerPadCheck.java
@@ -40,85 +40,85 @@ for (
  * The policy to verify is specified using the {@link PadOption} class and
  * defaults to {@link PadOption#NOSPACE}.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="EmptyForInitializerPad"/&gt;
  * </pre>
  *
  * @author lkuehne
  */
 @StatelessCheck
 public class EmptyForInitializerPadCheck
     extends AbstractCheck {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_PRECEDED = "ws.preceded";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_NOT_PRECEDED = "ws.notPreceded";
 
     /** Semicolon literal. */
     private static final String SEMICOLON = ";";
 
     /** The policy to enforce. */
     private PadOption option = PadOption.NOSPACE;
 
     /**
      * Set the option to enforce.
      * @param optionStr string to decode option from
      * @throws IllegalArgumentException if unable to decode
      */
     public void setOption(String optionStr) {
         try {
             option = PadOption.valueOf(optionStr.trim().toUpperCase(Locale.ENGLISH));
         }
         catch (IllegalArgumentException iae) {
             throw new IllegalArgumentException("unable to parse " + optionStr, iae);
         }
     }
 
     @Override
     public int[] getDefaultTokens() {
-        return getAcceptableTokens();
+        return getRequiredTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
-        return new int[] {TokenTypes.FOR_INIT};
+        return getRequiredTokens();
     }
 
     @Override
     public int[] getRequiredTokens() {
-        return getAcceptableTokens();
+        return new int[] {TokenTypes.FOR_INIT};
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         if (ast.getChildCount() == 0) {
             //empty for initializer. test pad before semi.
             final DetailAST semi = ast.getNextSibling();
             final int semiLineIdx = semi.getLineNo() - 1;
             final String line = getLines()[semiLineIdx];
             final int before = semi.getColumnNo() - 1;
             //don't check if semi at beginning of line
             if (!CommonUtils.hasWhitespaceBefore(before, line)) {
                 if (option == PadOption.NOSPACE
                     && Character.isWhitespace(line.charAt(before))) {
                     log(semi.getLineNo(), before, MSG_PRECEDED, SEMICOLON);
                 }
                 else if (option == PadOption.SPACE
                          && !Character.isWhitespace(line.charAt(before))) {
                     log(semi.getLineNo(), before, MSG_NOT_PRECEDED, SEMICOLON);
                 }
             }
         }
     }
 }
