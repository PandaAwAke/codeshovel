diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/DetectorOptions.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/DetectorOptions.java
index 295780f28..582794ff9 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/DetectorOptions.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/DetectorOptions.java
@@ -1,74 +1,74 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2016 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks.regexp;
 
 import java.util.regex.Pattern;
 
-import com.google.common.base.Objects;
+import com.google.common.base.MoreObjects;
 
 import com.puppycrawl.tools.checkstyle.api.AbstractViolationReporter;
 
 /**
  * Options for a detector.
  * @author Oliver Burn
  */
 public final class DetectorOptions {
     /**
      * Flags to compile a regular expression with.
      * See {@link Pattern#flags()}.
      */
     private int compileFlags;
     /** Used for reporting violations. */
     private AbstractViolationReporter reporter;
     /**
      * Format of the regular expression to check for.
      */
     private String format;
     /** The message to report on detection. If blank, then use the format. */
     private String message = "";
     /** Minimum number of times regular expression should occur in a file. */
     private int minimum;
     /** Maximum number of times regular expression should occur in a file. */
     private int maximum;
     /** Whether to ignore case when matching. */
     private boolean ignoreCase;
     /** Used to determine whether to suppress a detected match. */
     private MatchSuppressor suppressor;
     /** Pattern created from format. Lazily initialized. */
     private Pattern pattern;
 
     /** Default constructor.*/
     private DetectorOptions() { }
 
     /**
      * Returns new Builder object.
      * @return Builder object.
      * @noinspection ReturnOfInnerClass
      */
     public static Builder newBuilder() {
         return new DetectorOptions().new Builder();
     }
 
     /**
      * Format of the regular expression.
      * @return format of the regular expression.
      */
     public String getFormat() {
         return format;
@@ -181,56 +181,56 @@ public final class DetectorOptions {
 
         /**
          * Specifies the minimum allowed number of detections and returns Builder object.
          * @param val the minimum allowed number of detections.
          * @return Builder object.
          * @noinspection ReturnOfInnerClass
          */
         public Builder minimum(int val) {
             minimum = val;
             return this;
         }
 
         /**
          * Specifies the maximum allowed number of detections and returns Builder object.
          * @param val the maximum allowed number of detections.
          * @return Builder object.
          * @noinspection ReturnOfInnerClass
          */
         public Builder maximum(int val) {
             maximum = val;
             return this;
         }
 
         /**
          * Specifies whether to ignore case when matching and returns Builder object.
          * @param val whether to ignore case when matching.
          * @return Builder object.
          * @noinspection ReturnOfInnerClass
          */
         public Builder ignoreCase(boolean val) {
             ignoreCase = val;
             return this;
         }
 
         /**
          * Specifies the suppressor to use and returns Builder object.
          * @param val the suppressor to use.
          * @return current instance
          * @noinspection ReturnOfInnerClass
          */
         public Builder suppressor(MatchSuppressor val) {
             suppressor = val;
             return this;
         }
 
         /**
          * Returns new DetectorOptions instance.
          * @return DetectorOptions instance.
          */
         public DetectorOptions build() {
-            message = Objects.firstNonNull(message, "");
-            suppressor = Objects.firstNonNull(suppressor, NeverSuppress.INSTANCE);
+            message = MoreObjects.firstNonNull(message, "");
+            suppressor = MoreObjects.firstNonNull(suppressor, NeverSuppress.INSTANCE);
             return DetectorOptions.this;
         }
     }
 }
