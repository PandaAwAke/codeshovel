diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java
index 9de3c1f4d..7dabcd007 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java
@@ -434,109 +434,113 @@ public class RequireThisCheck extends AbstractCheck {
                 else if (!validateOnlyOverlapping
                          && prevSibling == null
                          && isAssignToken(ast.getParent().getType())
                          && !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)
                          && canBeReferencedFromStaticContext(ast)
                          && canAssignValueToClassField(ast)) {
                     frameWhereViolationIsFound = findFrame(ast, true);
 
                 }
             }
             else if (variableDeclarationFrameType == FrameType.CTOR_FRAME
                      && isOverlappingByArgument(ast)
                      && !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)) {
                 frameWhereViolationIsFound = findFrame(ast, true);
             }
             else if (variableDeclarationFrameType == FrameType.BLOCK_FRAME) {
                 if (isOverlappingByLocalVariable(ast)) {
                     if (canAssignValueToClassField(ast)
                             && !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)
                             && !isReturnedVariable(variableDeclarationFrame, ast)
                             && canBeReferencedFromStaticContext(ast)) {
                         frameWhereViolationIsFound = findFrame(ast, true);
                     }
                 }
                 else if (!validateOnlyOverlapping
                          && prevSibling == null
                          && isAssignToken(ast.getParent().getType())
                          && !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)
                          && canBeReferencedFromStaticContext(ast)) {
                     frameWhereViolationIsFound = findFrame(ast, true);
                 }
             }
         }
         return frameWhereViolationIsFound;
     }
 
     /**
      * Checks whether user arranges 'this' for variable in method, constructor, or block on his own.
      * @param currentFrame current frame.
      * @param ident ident token.
      * @return true if user arranges 'this' for variable in method, constructor,
      *         or block on his own.
      */
     private static boolean isUserDefinedArrangementOfThis(AbstractFrame currentFrame,
                                                           DetailAST ident) {
         final DetailAST blockFrameNameIdent = currentFrame.getFrameNameIdent();
         final DetailAST definitionToken = blockFrameNameIdent.getParent();
         final DetailAST blockStartToken = definitionToken.findFirstToken(TokenTypes.SLIST);
         final DetailAST blockEndToken = getBlockEndToken(blockFrameNameIdent, blockStartToken);
 
-        final Set<DetailAST> variableUsagesInsideBlock =
-            getAllTokensWhichAreEqualToCurrent(definitionToken, ident, blockEndToken.getLineNo());
-
         boolean userDefinedArrangementOfThis = false;
-        for (DetailAST variableUsage : variableUsagesInsideBlock) {
-            final DetailAST prevSibling = variableUsage.getPreviousSibling();
-            if (prevSibling != null
-                    && prevSibling.getType() == TokenTypes.LITERAL_THIS) {
-                userDefinedArrangementOfThis = true;
+
+        if (blockEndToken != null) {
+            final Set<DetailAST> variableUsagesInsideBlock =
+                getAllTokensWhichAreEqualToCurrent(definitionToken, ident,
+                    blockEndToken.getLineNo());
+
+            for (DetailAST variableUsage : variableUsagesInsideBlock) {
+                final DetailAST prevSibling = variableUsage.getPreviousSibling();
+                if (prevSibling != null
+                        && prevSibling.getType() == TokenTypes.LITERAL_THIS) {
+                    userDefinedArrangementOfThis = true;
+                }
             }
         }
         return userDefinedArrangementOfThis;
     }
 
     /**
      * Returns the token which ends the code block.
      * @param blockNameIdent block name identifier.
      * @param blockStartToken token which starts the block.
      * @return the token which ends the code block.
      */
     private static DetailAST getBlockEndToken(DetailAST blockNameIdent, DetailAST blockStartToken) {
         final Set<DetailAST> rcurlyTokens = getAllTokensOfType(blockNameIdent, TokenTypes.RCURLY);
         DetailAST blockEndToken = null;
         for (DetailAST currentRcurly : rcurlyTokens) {
             final DetailAST parent = currentRcurly.getParent();
             if (blockStartToken.getLineNo() == parent.getLineNo()) {
                 blockEndToken = currentRcurly;
             }
         }
         return blockEndToken;
     }
 
     /**
      * Checks whether the current variable is returned from the method.
      * @param currentFrame current frame.
      * @param ident variable ident token.
      * @return true if the current variable is returned from the method.
      */
     private static boolean isReturnedVariable(AbstractFrame currentFrame, DetailAST ident) {
         final DetailAST blockFrameNameIdent = currentFrame.getFrameNameIdent();
         final DetailAST definitionToken = blockFrameNameIdent.getParent();
         final DetailAST blockStartToken = definitionToken.findFirstToken(TokenTypes.SLIST);
         final DetailAST blockEndToken = getBlockEndToken(blockFrameNameIdent, blockStartToken);
 
         final Set<DetailAST> returnsInsideBlock = getAllTokensOfType(definitionToken,
             TokenTypes.LITERAL_RETURN, blockEndToken.getLineNo());
 
         boolean returnedVariable = false;
         for (DetailAST returnToken : returnsInsideBlock) {
             returnedVariable = returnToken.findAll(ident).hasMoreNodes();
             if (returnedVariable) {
                 break;
             }
         }
         return returnedVariable;
     }
 
     /**
      * Checks whether a field can be referenced from a static context.
