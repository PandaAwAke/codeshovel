diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java
index 8ac590402..873cb6ca0 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java
@@ -193,70 +193,69 @@ public class InnerAssignmentCheck
         final AST exprNext = expr.getNextSibling();
         return exprNext.getType() == TokenTypes.SEMI;
     }
 
     /**
      * Tests whether the given AST is used in the "assignment in while test"
      * idiom.
      * <p>
      * <pre>
      * while ((b = is.read()) != -1) {
      *   // work with b
      * }
      * </pre>
      * </p>
      *
      * @param ast assignment AST
      * @return whether the context of the assignemt AST indicates the idiom
      */
     private static boolean isInWhileIdiom(DetailAST ast) {
         if (!isComparison(ast.getParent())) {
             return false;
         }
         return isInContext(
                 ast.getParent(), ALLOWED_ASSIGMENT_IN_COMPARISON_CONTEXT);
     }
 
     /**
      * Checks if an AST is a comparison operator.
      * @param ast the AST to check
      * @return true iff ast is a comparison operator.
      */
     private static boolean isComparison(DetailAST ast) {
         final int astType = ast.getType();
         return Arrays.binarySearch(COMPARISON_TYPES, astType) >= 0;
     }
 
     /**
      * Tests whether the provided AST is in
      * one of the given contexts.
      *
      * @param ast the AST from which to start walking towards root
      * @param contextSet the contexts to test against.
      *
      * @return whether the parents nodes of ast match
      * one of the allowed type paths
      */
     private static boolean isInContext(DetailAST ast, int[]... contextSet) {
         boolean found = false;
         for (int[] element : contextSet) {
             DetailAST current = ast;
-            final int len = element.length;
-            for (int j = 0; j < len; j++) {
+            for (int anElement : element) {
                 current = current.getParent();
-                final int expectedType = element[j];
+                final int expectedType = anElement;
                 if (current.getType() != expectedType) {
                     found = false;
                     break;
                 }
                 else {
                     found = true;
                 }
             }
 
             if (found) {
                 break;
             }
         }
         return found;
     }
 }
