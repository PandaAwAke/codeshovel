diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheck.java
index 964e01a99..51a1238d0 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheck.java
@@ -35,74 +35,74 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  * An example of how to configure the check is:
  * </p>
  *
  * <pre>
  * &lt;module name="TodoComment"/&gt;
  * </pre>
  * <p>
  * An example of how to configure the check for comments that contain
  * {@code TODO} or {@code FIXME}is:
  * </p>
  *
  * <pre>
  * &lt;module name="TodoComment"&gt;
  *    &lt;property name="format" value="(TODO)|(FIXME)"/&gt;
  * &lt;/module&gt;
  * </pre>
  * @author Oliver Burn
  * @author Baratali Izmailov
  */
 @StatelessCheck
 public class TodoCommentCheck
         extends AbstractCheck {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "todo.match";
 
     /**
      * Regular expression pattern compiled from format.
      */
     private Pattern format = Pattern.compile("TODO:");
 
     @Override
     public boolean isCommentNodesRequired() {
         return true;
     }
 
     /**
      * Setter for 'todo' comment pattern.
      * @param pattern
      *        pattern of 'todo' comment.
      */
     public void setFormat(Pattern pattern) {
         format = pattern;
     }
 
     @Override
     public int[] getDefaultTokens() {
-        return getAcceptableTokens();
+        return getRequiredTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
-        return new int[] {TokenTypes.COMMENT_CONTENT };
+        return getRequiredTokens();
     }
 
     @Override
     public int[] getRequiredTokens() {
-        return getAcceptableTokens();
+        return new int[] {TokenTypes.COMMENT_CONTENT };
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final String[] lines = ast.getText().split("\n");
 
         for (int i = 0; i < lines.length; i++) {
             if (format.matcher(lines[i]).find()) {
                 log(ast.getLineNo() + i, MSG_KEY, format.pattern());
             }
         }
     }
 }
