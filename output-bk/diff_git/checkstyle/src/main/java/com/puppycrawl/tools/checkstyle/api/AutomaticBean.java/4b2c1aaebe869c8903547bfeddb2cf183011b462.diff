diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
index 095f9a20f..8c3c036f2 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
@@ -183,84 +183,90 @@ public class AutomaticBean
         catch (final IllegalArgumentException | ConversionException ex) {
             final String message = String.format(Locale.ROOT, "illegal value '%s' for property "
                     + "'%s' of module %s", value, key, moduleName);
             throw new CheckstyleException(message, ex);
         }
     }
 
     /**
      * Implements the Contextualizable interface using bean introspection.
      *
      * @param context the context.
      * @throws CheckstyleException if there is a contextualization error.
      * @see Contextualizable
      */
     @Override
     public final void contextualize(Context context)
         throws CheckstyleException {
 
         final Collection<String> attributes = context.getAttributeNames();
 
         for (final String key : attributes) {
             final Object value = context.get(key);
 
             tryCopyProperty(getClass().getName(), key, value, false);
         }
     }
 
     /**
      * Returns the configuration that was used to configure this component.
      * @return the configuration that was used to configure this component.
      */
     protected final Configuration getConfiguration() {
         return configuration;
     }
 
     /**
      * Provides a hook to finish the part of this component's setup that
      * was not handled by the bean introspection.
      * <p>
      * The default implementation does nothing.
      * </p>
      * @throws CheckstyleException if there is a configuration error.
      */
     protected void finishLocalSetup() throws CheckstyleException {
         // No code by default, should be overridden only by demand at subclasses
     }
 
     /**
      * Called by configure() for every child of this component's Configuration.
      * <p>
-     * The default implementation does nothing.
+     * The default implementation throws {@link CheckstyleException} if
+     * {@code childConf} is {@code null} because it doesn't support children. It
+     * must be overridden to validate and support children that are wanted.
      * </p>
+     *
      * @param childConf a child of this component's Configuration
      * @throws CheckstyleException if there is a configuration error.
      * @see Configuration#getChildren
      */
     protected void setupChild(Configuration childConf)
         throws CheckstyleException {
-        // No code by default, should be overridden only by demand at subclasses
+        if (childConf != null) {
+            throw new CheckstyleException(childConf.getName() + " is not allowed as a child in "
+                    + getConfiguration().getName());
+        }
     }
 
     /**
      * A converter that does not care whether the array elements contain String
      * characters like '*' or '_'. The normal ArrayConverter class has problems
      * with this characters.
      */
     private static class RelaxedStringArrayConverter implements Converter {
         @SuppressWarnings({"unchecked", "rawtypes"})
         @Override
         public Object convert(Class type, Object value) {
             // Convert to a String and trim it for the tokenizer.
             final StringTokenizer tokenizer = new StringTokenizer(
                 value.toString().trim(), ",");
             final List<String> result = Lists.newArrayList();
 
             while (tokenizer.hasMoreTokens()) {
                 final String token = tokenizer.nextToken();
                 result.add(token.trim());
             }
 
             return result.toArray(new String[result.size()]);
         }
     }
 }
