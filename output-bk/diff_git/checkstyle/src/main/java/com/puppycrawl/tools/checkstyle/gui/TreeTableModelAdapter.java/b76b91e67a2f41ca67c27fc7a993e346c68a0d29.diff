diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableModelAdapter.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableModelAdapter.java
index e34a97862..38535b2f5 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableModelAdapter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableModelAdapter.java
@@ -48,101 +48,101 @@ public class TreeTableModelAdapter extends AbstractTableModel {
     private final JTree tree;
     private final transient TreeTableModel treeTableModel;
 
     public TreeTableModelAdapter(TreeTableModel treeTableModel, JTree tree) {
         this.tree = tree;
         this.treeTableModel = treeTableModel;
 
         tree.addTreeExpansionListener(new UpdatingTreeExpansionListener());
 
         // Install a TreeModelListener that can update the table when
         // mTree changes. We use delayedFireTableDataChanged as we can
         // not be guaranteed the mTree will have finished processing
         // the event before us.
         treeTableModel.addTreeModelListener(new UpdatingTreeModelListener());
     }
 
     // Wrappers, implementing TableModel interface.
 
     @Override
     public int getColumnCount() {
         return treeTableModel.getColumnCount();
     }
 
     @Override
     public String getColumnName(int column) {
         return treeTableModel.getColumnName(column);
     }
 
     @Override
     public Class<?> getColumnClass(int column) {
         return treeTableModel.getColumnClass(column);
     }
 
     @Override
     public int getRowCount() {
         return tree.getRowCount();
     }
 
     private Object nodeForRow(int row) {
         final TreePath treePath = tree.getPathForRow(row);
         return treePath.getLastPathComponent();
     }
 
     @Override
     public Object getValueAt(int row, int column) {
         return treeTableModel.getValueAt(nodeForRow(row), column);
     }
 
     @Override
     public boolean isCellEditable(int row, int column) {
-        return treeTableModel.isCellEditable(nodeForRow(row), column);
+        return treeTableModel.isCellEditable(column);
     }
 
     /**
      * Invokes fireTableDataChanged after all the pending events have been
      * processed. SwingUtilities.invokeLater is used to handle this.
      */
     private void delayedFireTableDataChanged() {
         SwingUtilities.invokeLater(new Runnable() {
             @Override
             public void run() {
                 fireTableDataChanged();
             }
         });
     }
 
     /**
      * TreeExpansionListener that can update the table when tree changes
      */
     private class UpdatingTreeExpansionListener implements TreeExpansionListener {
         // Don't use fireTableRowsInserted() here; the selection model
         // would get updated twice.
         @Override
         public void treeExpanded(TreeExpansionEvent event) {
             fireTableDataChanged();
         }
 
         @Override
         public void treeCollapsed(TreeExpansionEvent event) {
             fireTableDataChanged();
         }
     }
 
     /**
      * TreeModelListener that can update the table when tree changes
      */
     private class UpdatingTreeModelListener implements TreeModelListener {
         @Override
         public void treeNodesChanged(TreeModelEvent e) {
             delayedFireTableDataChanged();
         }
 
         @Override
         public void treeNodesInserted(TreeModelEvent e) {
             delayedFireTableDataChanged();
         }
 
         @Override
         public void treeNodesRemoved(TreeModelEvent e) {
             delayedFireTableDataChanged();
         }
