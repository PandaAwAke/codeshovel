diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java
index df140be7c..b0d960c34 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java
@@ -115,69 +115,69 @@ public class HandlerFactory {
      */
     public int[] getHandledTypes() {
         final Set<Integer> typeSet = typeHandlers.keySet();
         final int[] types = new int[typeSet.size()];
         int index = 0;
         for (final Integer val : typeSet) {
             types[index] = val;
             index++;
         }
 
         return types;
     }
 
     /**
      * Get the handler for an AST.
      *
      * @param indentCheck   the indentation check
      * @param ast           ast to handle
      * @param parent        the handler parent of this AST
      *
      * @return the ExpressionHandler for ast
      */
     public AbstractExpressionHandler getHandler(IndentationCheck indentCheck,
         DetailAST ast, AbstractExpressionHandler parent) {
         AbstractExpressionHandler resultHandler;
         final AbstractExpressionHandler handler =
             createdHandlers.get(ast);
         if (handler != null) {
             resultHandler = handler;
         }
         else if (ast.getType() == TokenTypes.METHOD_CALL) {
             resultHandler = createMethodCallHandler(indentCheck, ast, parent);
         }
         else {
             final Constructor<?> handlerCtor = typeHandlers.get(ast.getType());
             resultHandler = (AbstractExpressionHandler) CommonUtils.invokeConstructor(
                 handlerCtor, indentCheck, ast, parent);
         }
         return resultHandler;
     }
 
     /**
      * Create new instance of handler for METHOD_CALL.
      *
      * @param indentCheck   the indentation check
      * @param ast           ast to handle
      * @param parent        the handler parent of this AST
      *
      * @return new instance.
      */
-    AbstractExpressionHandler createMethodCallHandler(IndentationCheck indentCheck,
+    private AbstractExpressionHandler createMethodCallHandler(IndentationCheck indentCheck,
         DetailAST ast, AbstractExpressionHandler parent) {
         AbstractExpressionHandler theParent = parent;
         DetailAST astNode = ast.getFirstChild();
         while (astNode.getType() == TokenTypes.DOT) {
             astNode = astNode.getFirstChild();
         }
         if (isHandledType(astNode.getType())) {
             theParent = getHandler(indentCheck, astNode, theParent);
             createdHandlers.put(astNode, theParent);
         }
         return new MethodCallHandler(indentCheck, ast, theParent);
     }
 
     /** Clears cache of created handlers. */
     void clearCreatedHandlers() {
         createdHandlers.clear();
     }
 }
