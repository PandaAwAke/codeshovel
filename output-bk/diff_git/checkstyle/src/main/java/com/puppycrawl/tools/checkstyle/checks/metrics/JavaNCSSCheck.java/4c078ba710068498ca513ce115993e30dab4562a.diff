diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java
index fef7a1be6..3553fcd57 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java
@@ -240,151 +240,151 @@ public class JavaNCSSCheck extends Check {
 
     @Override
     public void finishTree(DetailAST rootAST) {
         //pop counter from the stack
         final Counter counter = counters.pop();
 
         final int count = counter.getCount();
         if (count > fileMax) {
             log(rootAST.getLineNo(), rootAST.getColumnNo(), MSG_FILE,
                     count, fileMax);
         }
     }
 
     /**
      * Sets the maximum ncss for a file.
      *
      * @param fileMax
      *            the maximum ncss
      */
     public void setFileMaximum(int fileMax) {
         this.fileMax = fileMax;
     }
 
     /**
      * Sets the maximum ncss for a class.
      *
      * @param classMax
      *            the maximum ncss
      */
     public void setClassMaximum(int classMax) {
         this.classMax = classMax;
     }
 
     /**
      * Sets the maximum ncss for a method.
      *
      * @param methodMax
      *            the maximum ncss
      */
     public void setMethodMaximum(int methodMax) {
         this.methodMax = methodMax;
     }
 
     /**
      * Checks if a token is countable for the ncss metric
      *
      * @param ast
      *            the AST
      * @return true if the token is countable
      */
-    private boolean isCountable(DetailAST ast) {
+    private static boolean isCountable(DetailAST ast) {
         boolean countable = true;
 
         final int tokenType = ast.getType();
 
         //check if an expression is countable
         if (TokenTypes.EXPR == tokenType) {
             countable = isExpressionCountable(ast);
         }
         //check if an variable definition is countable
         else if (TokenTypes.VARIABLE_DEF == tokenType) {
             countable = isVariableDefCountable(ast);
         }
         return countable;
     }
 
     /**
      * Checks if a variable definition is countable.
      *
      * @param ast the AST
      * @return true if the variable definition is countable, false otherwise
      */
-    private boolean isVariableDefCountable(DetailAST ast) {
+    private static boolean isVariableDefCountable(DetailAST ast) {
         boolean countable = false;
 
         //count variable defs only if they are direct child to a slist or
         // object block
         final int parentType = ast.getParent().getType();
 
         if (TokenTypes.SLIST == parentType
             || TokenTypes.OBJBLOCK == parentType) {
             final DetailAST prevSibling = ast.getPreviousSibling();
 
             //is countable if no previous sibling is found or
             //the sibling is no COMMA.
             //This is done because multiple assignment on one line are countes
             // as 1
             countable = prevSibling == null
                     || TokenTypes.COMMA != prevSibling.getType();
         }
 
         return countable;
     }
 
     /**
      * Checks if an expression is countable for the ncss metric.
      *
      * @param ast the AST
      * @return true if the expression is countable, false otherwise
      */
-    private boolean isExpressionCountable(DetailAST ast) {
+    private static boolean isExpressionCountable(DetailAST ast) {
         boolean countable = true;
 
         //count expressions only if they are direct child to a slist (method
         // body, for loop...)
         //or direct child of label,if,else,do,while,for
         final int parentType = ast.getParent().getType();
         switch (parentType) {
             case TokenTypes.SLIST :
             case TokenTypes.LABELED_STAT :
             case TokenTypes.LITERAL_FOR :
             case TokenTypes.LITERAL_DO :
             case TokenTypes.LITERAL_WHILE :
             case TokenTypes.LITERAL_IF :
             case TokenTypes.LITERAL_ELSE :
                 //don't count if or loop conditions
                 final DetailAST prevSibling = ast.getPreviousSibling();
                 countable = prevSibling == null
                     || TokenTypes.LPAREN != prevSibling.getType();
                 break;
             default :
                 countable = false;
                 break;
         }
         return countable;
     }
 
     /**
      * @author Lars KÃ¶dderitzsch
      *
      * Class representing a counter,
      */
     private static class Counter {
         /** the counters internal integer */
         private int ivCount;
 
         /**
          * Increments the counter.
          */
         public void increment() {
             ivCount++;
         }
 
         /**
          * Gets the counters value
          *
          * @return the counter
          */
         public int getCount() {
             return ivCount;
         }
