diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java
index 9bf4e442b..2867b695c 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java
@@ -95,116 +95,114 @@ public final class JavadocUtils {
      *        the type of validTags we're interested in
      * @return all standalone validTags from the given javadoc.
      */
     public static JavadocTags getJavadocTags(TextBlock cmt,
             JavadocTagType tagType) {
         final String[] text = cmt.getText();
         final List<JavadocTag> tags = Lists.newArrayList();
         final List<InvalidJavadocTag> invalidTags = Lists.newArrayList();
         Pattern blockTagPattern = Pattern.compile("/\\*{2,}\\s*@(\\p{Alpha}+)\\s");
         for (int i = 0; i < text.length; i++) {
             final String s = text[i];
             final Matcher blockTagMatcher = blockTagPattern.matcher(s);
             if ((tagType == JavadocTagType.ALL || tagType == JavadocTagType.BLOCK)
                     && blockTagMatcher.find()) {
                 final String tagName = blockTagMatcher.group(1);
                 String content = s.substring(blockTagMatcher.end(1));
                 if (content.endsWith("*/")) {
                     content = content.substring(0, content.length() - 2);
                 }
                 final int line = cmt.getStartLineNo() + i;
                 int col = blockTagMatcher.start(1) - 1;
                 if (i == 0) {
                     col += cmt.getStartColNo();
                 }
                 if (JavadocTagInfo.isValidName(tagName)) {
                     tags.add(
                             new JavadocTag(line, col, tagName, content.trim()));
                 }
                 else {
                     invalidTags.add(new InvalidJavadocTag(line, col, tagName));
                 }
             }
             // No block tag, so look for inline validTags
             else if (tagType == JavadocTagType.ALL || tagType == JavadocTagType.INLINE) {
                 // Match Javadoc text after comment characters
                 final Pattern commentPattern = Pattern.compile("^\\s*(?:/\\*{2,}|\\*+)\\s*(.*)");
                 final Matcher commentMatcher = commentPattern.matcher(s);
                 final String commentContents;
                 final int commentOffset; // offset including comment characters
                 if (!commentMatcher.find()) {
                     commentContents = s; // No leading asterisks, still valid
                     commentOffset = 0;
                 }
                 else {
                     commentContents = commentMatcher.group(1);
                     commentOffset = commentMatcher.start(1) - 1;
                 }
                 final Pattern tagPattern = Pattern.compile(".*?\\{@(\\p{Alpha}+)\\s+(.*?)\\}");
                 final Matcher tagMatcher = tagPattern.matcher(commentContents);
                 while (tagMatcher.find()) {
-                    if (tagMatcher.groupCount() == 2) {
-                        final String tagName = tagMatcher.group(1);
-                        final String tagValue = tagMatcher.group(2).trim();
-                        final int line = cmt.getStartLineNo() + i;
-                        int col = commentOffset + tagMatcher.start(1) - 1;
-                        if (i == 0) {
-                            col += cmt.getStartColNo();
-                        }
-                        if (JavadocTagInfo.isValidName(tagName)) {
-                            tags.add(new JavadocTag(line, col, tagName,
-                                    tagValue));
-                        }
-                        else {
-                            invalidTags.add(new InvalidJavadocTag(line, col,
-                                    tagName));
-                        }
+                    final String tagName = tagMatcher.group(1);
+                    final String tagValue = tagMatcher.group(2).trim();
+                    final int line = cmt.getStartLineNo() + i;
+                    int col = commentOffset + tagMatcher.start(1) - 1;
+                    if (i == 0) {
+                        col += cmt.getStartColNo();
+                    }
+                    if (JavadocTagInfo.isValidName(tagName)) {
+                        tags.add(new JavadocTag(line, col, tagName,
+                                tagValue));
+                    }
+                    else {
+                        invalidTags.add(new InvalidJavadocTag(line, col,
+                                tagName));
                     }
                     // else Error: Unexpected match count for inline Javadoc
                     // tag!
                 }
             }
             blockTagPattern = Pattern.compile("^\\s*\\**\\s*@(\\p{Alpha}+)\\s");
         }
         return new JavadocTags(tags, invalidTags);
     }
 
     /**
      * The type of Javadoc tag we want returned.
      */
     public enum JavadocTagType {
         /** block type. */
         BLOCK,
         /** inline type. */
         INLINE,
         /** all validTags. */
         ALL
     }
 
     /**
      * Checks that commentContent starts with '*' javadoc comment identifier.
      * @param commentContent
      *        content of block comment
      * @return true if commentContent starts with '*' javadoc comment
      *         identifier.
      */
     public static boolean isJavadocComment(String commentContent) {
         boolean result = false;
 
         if (!commentContent.isEmpty()) {
             final char docCommentIdentificator = commentContent.charAt(0);
             result = docCommentIdentificator == '*';
         }
 
         return result;
     }
 
     /**
      * Checks block comment content starts with '*' javadoc comment identifier.
      * @param blockCommentBegin
      *        block comment AST
      * @return true if block comment content starts with '*' javadoc comment
      *         identifier.
      */
     public static boolean isJavadocComment(DetailAST blockCommentBegin) {
         final String commentContent = getBlockCommentContent(blockCommentBegin);
         return isJavadocComment(commentContent);
@@ -223,170 +221,168 @@ public final class JavadocUtils {
 
     /**
      * Get content of Javadoc comment.
      * @param javdocCommentBegin
      *        Javadoc comment AST
      * @return content of Javadoc comment.
      */
     public static String getJavadocCommentContent(DetailAST javdocCommentBegin) {
         final DetailAST commentContent = javdocCommentBegin.getFirstChild();
         return commentContent.getText().substring(1);
     }
 
     /**
      * Returns the first child token that has a specified type.
      * @param node
      *        Javadoc AST node
      * @param type
      *        the token type to match
      * @return the matching token, or null if no match
      */
     public static DetailNode findFirstToken(DetailNode node, int type) {
         DetailNode retVal = null;
         for (DetailNode i = getFirstChild(node); i != null; i = getNextSibling(i)) {
             if (i.getType() == type) {
                 retVal = i;
                 break;
             }
         }
         return retVal;
     }
 
     /**
      * Gets first child node of specified node.
      *
      * @param node DetailNode
      * @return first child
      */
     public static DetailNode getFirstChild(DetailNode node) {
         return node.getChildren().length > 0 ? node.getChildren()[0] : null;
     }
 
     /**
      * Checks whether node contains any node of specified type among children on any deep level.
      *
      * @param node DetailNode
      * @param type token type
      * @return true if node contains any node of type type among children on any deep level.
      */
     public static boolean branchContains(DetailNode node, int type) {
         DetailNode curNode = node;
-        while (curNode != null) {
+        while (true) {
 
             if (type == curNode.getType()) {
                 return true;
             }
 
             DetailNode toVisit = getFirstChild(curNode);
             while (curNode != null && toVisit == null) {
                 toVisit = getNextSibling(curNode);
                 if (toVisit == null) {
                     curNode = curNode.getParent();
                 }
             }
 
             if (curNode == toVisit) {
                 break;
             }
 
             curNode = toVisit;
         }
 
         return false;
     }
 
     /**
      * Gets next sibling of specified node.
      *
      * @param node DetailNode
      * @return next sibling.
      */
     public static DetailNode getNextSibling(DetailNode node) {
         final DetailNode parent = node.getParent();
         if (parent != null) {
             final int nextSiblingIndex = node.getIndex() + 1;
             final DetailNode[] children = parent.getChildren();
             if (nextSiblingIndex <= children.length - 1) {
                 return children[nextSiblingIndex];
             }
         }
         return null;
     }
 
     /**
      * Gets next sibling of specified node with the specified type.
      *
      * @param node DetailNode
      * @param tokenType javadoc token type
      * @return next sibling.
      */
     public static DetailNode getNextSibling(DetailNode node, int tokenType) {
         DetailNode nextSibling = JavadocUtils.getNextSibling(node);
         while (nextSibling != null && nextSibling.getType() != tokenType) {
             nextSibling = JavadocUtils.getNextSibling(nextSibling);
         }
         return nextSibling;
     }
 
     /**
      * Gets previous sibling of specified node.
      * @param node DetailNode
      * @return previous sibling
      */
     public static DetailNode getPreviousSibling(DetailNode node) {
         final DetailNode parent = node.getParent();
-        if (parent != null) {
-            final int previousSiblingIndex = node.getIndex() - 1;
-            final DetailNode[] children = parent.getChildren();
-            if (previousSiblingIndex >= 0) {
-                return children[previousSiblingIndex];
-            }
+        final int previousSiblingIndex = node.getIndex() - 1;
+        final DetailNode[] children = parent.getChildren();
+        if (previousSiblingIndex >= 0) {
+            return children[previousSiblingIndex];
         }
         return null;
     }
 
     /**
      * Returns the name of a token for a given ID.
      * @param iD
      *        the ID of the token name to get
      * @return a token name
      */
     public static String getTokenName(int iD) {
         if (iD == JavadocTokenTypes.EOF) {
             return "EOF";
         }
         if (iD > TOKEN_VALUE_TO_NAME.length - 1) {
             throw new IllegalArgumentException("Unknown javdoc token id. Given id: " + iD);
         }
         final String name = TOKEN_VALUE_TO_NAME[iD];
         if (name == null) {
             throw new IllegalArgumentException("Unknown javdoc token id. Given id: " + iD);
         }
         return name;
     }
 
     /**
      * Returns the ID of a token for a given name.
      * @param name
      *        the name of the token ID to get
      * @return a token ID
      */
     public static int getTokenId(String name) {
         final Integer id = TOKEN_NAME_TO_VALUE.get(name);
         if (id == null) {
             throw new IllegalArgumentException("Unknown javdoc token name. Given name " + name);
         }
         return id.intValue();
     }
 
     /**
      * Gets tag name from javadocTagSection.
      *
      * @param javadocTagSection to get tag name from.
      * @return name, of the javadocTagSection's tag.
      */
     public static String getTagName(DetailNode javadocTagSection) {
         String javadocTagName;
         if (javadocTagSection.getType() == JavadocTokenTypes.JAVADOC_INLINE_TAG) {
             javadocTagName = JavadocUtils.getNextSibling(
                     JavadocUtils.getFirstChild(javadocTagSection)).getText();
         }
