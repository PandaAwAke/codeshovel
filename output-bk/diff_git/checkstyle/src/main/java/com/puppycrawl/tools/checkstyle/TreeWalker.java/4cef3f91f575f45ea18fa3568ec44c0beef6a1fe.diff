diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java b/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
index 84b4dee38..7e2b5ceb5 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
@@ -105,101 +105,103 @@ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe
     public void setTabWidth(int tabWidth) {
         this.tabWidth = tabWidth;
     }
 
     /**
      * Sets cache file.
      * @deprecated Use {@link Checker#setCacheFile} instead. It does not do anything now. We just
      *             keep the setter for transition period to the same option in Checker. The
      *             method will be completely removed in Checkstyle 8.0. See
      *             <a href="https://github.com/checkstyle/checkstyle/issues/2883">issue#2883</a>
      * @param fileName the cache file
      */
     @Deprecated
     public void setCacheFile(String fileName) {
         // Deprecated
     }
 
     /**
      * @param classLoader class loader to resolve classes with.
      */
     public void setClassLoader(ClassLoader classLoader) {
         this.classLoader = classLoader;
     }
 
     /**
      * Sets the module factory for creating child modules (Checks).
      * @param moduleFactory the factory
      */
     public void setModuleFactory(ModuleFactory moduleFactory) {
         this.moduleFactory = moduleFactory;
     }
 
     @Override
     public void finishLocalSetup() {
         final DefaultContext checkContext = new DefaultContext();
         checkContext.add("classLoader", classLoader);
         checkContext.add("messages", getMessageCollector());
         checkContext.add("severity", getSeverity());
         checkContext.add("tabWidth", String.valueOf(tabWidth));
 
         childContext = checkContext;
     }
 
     @Override
     public void setupChild(Configuration childConf)
             throws CheckstyleException {
         final String name = childConf.getName();
         final Object module = moduleFactory.createModule(name);
         if (!(module instanceof AbstractCheck)) {
             throw new CheckstyleException(
-                "TreeWalker is not allowed as a parent of " + name);
+                "TreeWalker is not allowed as a parent of " + name
+                        + " Please review 'Parent Module' section for this Check in web"
+                        + " documentation if Check is standard.");
         }
         final AbstractCheck check = (AbstractCheck) module;
         check.contextualize(childContext);
         check.configure(childConf);
         check.init();
 
         registerCheck(check);
     }
 
     @Override
     protected void processFiltered(File file, List<String> lines) throws CheckstyleException {
         // check if already checked and passed the file
         if (CommonUtils.matchesFileExtension(file, getFileExtensions())) {
             final String msg = "%s occurred during the analysis of file %s.";
             final String fileName = file.getPath();
             try {
                 final FileText text = FileText.fromLines(file, lines);
                 final FileContents contents = new FileContents(text);
                 final DetailAST rootAST = parse(contents);
 
                 getMessageCollector().reset();
 
                 walk(rootAST, contents, AstState.ORDINARY);
 
                 final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);
 
                 walk(astWithComments, contents, AstState.WITH_COMMENTS);
             }
             catch (final TokenStreamRecognitionException tre) {
                 final String exceptionMsg = String.format(Locale.ROOT, msg,
                         "TokenStreamRecognitionException", fileName);
                 throw new CheckstyleException(exceptionMsg, tre);
             }
             catch (RecognitionException | TokenStreamException ex) {
                 final String exceptionMsg = String.format(Locale.ROOT, msg,
                         ex.getClass().getSimpleName(), fileName);
                 throw new CheckstyleException(exceptionMsg, ex);
             }
         }
     }
 
     /**
      * Register a check for a given configuration.
      * @param check the check to register
      * @throws CheckstyleException if an error occurs
      */
     private void registerCheck(AbstractCheck check)
             throws CheckstyleException {
         validateDefaultTokens(check);
         final int[] tokens;
