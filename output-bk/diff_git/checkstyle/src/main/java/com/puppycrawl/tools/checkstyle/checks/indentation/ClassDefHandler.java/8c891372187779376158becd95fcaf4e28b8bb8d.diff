diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ClassDefHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ClassDefHandler.java
index 4459296d6..bb93003f4 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ClassDefHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ClassDefHandler.java
@@ -24,98 +24,98 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * Handler for class definitions.
  *
  * @author jrichard
  */
 public class ClassDefHandler extends BlockParentHandler {
     /**
      * Construct an instance of this handler with the given indentation check,
      * abstract syntax tree, and parent handler.
      *
      * @param indentCheck   the indentation check
      * @param ast           the abstract syntax tree
      * @param parent        the parent handler
      */
     public ClassDefHandler(IndentationCheck indentCheck,
                            DetailAST ast,
                            AbstractExpressionHandler parent) {
         super(indentCheck, getHandlerName(ast), ast, parent);
     }
 
     @Override
     protected DetailAST getLCurly() {
         return getMainAst().findFirstToken(TokenTypes.OBJBLOCK)
             .findFirstToken(TokenTypes.LCURLY);
     }
 
     @Override
     protected DetailAST getRCurly() {
         return getMainAst().findFirstToken(TokenTypes.OBJBLOCK)
             .findFirstToken(TokenTypes.RCURLY);
     }
 
     @Override
     protected DetailAST getTopLevelAst() {
         return null;
         // note: ident checked by hand in check indentation;
     }
 
     @Override
     protected DetailAST getListChild() {
         return getMainAst().findFirstToken(TokenTypes.OBJBLOCK);
     }
 
     @Override
     public void checkIndentation() {
         final DetailAST modifiers = getMainAst().findFirstToken(TokenTypes.MODIFIERS);
         if (modifiers.getChildCount() == 0) {
             final DetailAST ident = getMainAst().findFirstToken(TokenTypes.IDENT);
             final int lineStart = getLineStart(ident);
-            if (!getLevel().isAcceptable(lineStart)) {
+            if (!getIndent().isAcceptable(lineStart)) {
                 logError(ident, "ident", lineStart);
             }
 
         }
         else {
             checkModifiers();
         }
 
         final LineWrappingHandler lineWrap =
             new LineWrappingHandler(getIndentCheck(), getMainAst(), getMainAst().getLastChild());
         lineWrap.checkIndentation();
         super.checkIndentation();
     }
 
     @Override
     protected int[] getCheckedChildren() {
         return new int[] {
             TokenTypes.EXPR,
             TokenTypes.OBJBLOCK,
             TokenTypes.LITERAL_BREAK,
             TokenTypes.LITERAL_RETURN,
             TokenTypes.LITERAL_THROW,
             TokenTypes.LITERAL_CONTINUE,
         };
     }
 
     /**
      * Creates a handler name for this class according to ast type.
      *
      * @param ast the abstract syntax tree.
      * @return handler name for this class.
      */
     private static String getHandlerName(DetailAST ast) {
         final String name;
 
         if (ast.getType() == TokenTypes.CLASS_DEF) {
             name = "class def";
         }
         else if (ast.getType() == TokenTypes.ENUM_DEF) {
             name = "enum def";
         }
         else {
             name = "interface def";
         }
         return name;
     }
 }
