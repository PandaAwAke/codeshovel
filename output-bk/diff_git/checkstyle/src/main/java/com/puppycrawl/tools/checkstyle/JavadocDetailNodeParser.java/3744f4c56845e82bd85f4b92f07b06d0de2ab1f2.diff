diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java b/src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java
index 912803e2c..e64f792b7 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java
@@ -254,101 +254,107 @@ public class JavadocDetailNodeParser {
     /**
      * Creates children Javadoc nodes base on ParseTree node's children.
      * @param parentJavadocNode node that will be parent for created children
      * @param parseTreeNode original ParseTree node
      * @return array of Javadoc nodes
      */
     private JavadocNodeImpl[]
             createChildrenNodes(JavadocNodeImpl parentJavadocNode, ParseTree parseTreeNode) {
         final JavadocNodeImpl[] children =
                 new JavadocNodeImpl[parseTreeNode.getChildCount()];
 
         for (int j = 0; j < children.length; j++) {
             final JavadocNodeImpl child =
                     createJavadocNode(parseTreeNode.getChild(j), parentJavadocNode, j);
 
             children[j] = child;
         }
         return children;
     }
 
     /**
      * Creates root JavadocNodeImpl node base on ParseTree root node.
      * @param parseTreeNode ParseTree root node
      * @return root Javadoc node
      */
     private JavadocNodeImpl createRootJavadocNode(ParseTree parseTreeNode) {
         final JavadocNodeImpl rootJavadocNode = createJavadocNode(parseTreeNode, null, -1);
 
         final int childCount = parseTreeNode.getChildCount();
         final JavadocNodeImpl[] children = new JavadocNodeImpl[childCount];
 
         for (int i = 0; i < childCount; i++) {
             final JavadocNodeImpl child = createJavadocNode(parseTreeNode.getChild(i),
                     rootJavadocNode, i);
             children[i] = child;
         }
         rootJavadocNode.setChildren((DetailNode[]) children);
         return rootJavadocNode;
     }
 
     /**
      * Creates JavadocNodeImpl node on base of ParseTree node.
      *
      * @param parseTree ParseTree node
      * @param parent DetailNode that will be parent of new node
      * @param index child index that has new node
      * @return JavadocNodeImpl node on base of ParseTree node.
      */
     private JavadocNodeImpl createJavadocNode(ParseTree parseTree, DetailNode parent, int index) {
         final JavadocNodeImpl node = new JavadocNodeImpl();
-        node.setText(parseTree.getText());
+        if (parseTree.getChildCount() == 0
+                || "Text".equals(getNodeClassNameWithoutContext(parseTree))) {
+            node.setText(parseTree.getText());
+        }
+        else {
+            node.setText(getFormattedNodeClassNameWithoutContext(parseTree));
+        }
         node.setColumnNumber(getColumn(parseTree));
         node.setLineNumber(getLine(parseTree) + blockCommentLineNumber);
         node.setIndex(index);
         node.setType(getTokenType(parseTree));
         node.setParent(parent);
         node.setChildren((DetailNode[]) new JavadocNodeImpl[parseTree.getChildCount()]);
         return node;
     }
 
     /**
      * Adjust first line nodes to javadoc indent.
      * @param tree DetailNode tree root
      * @param javadocColumnNumber javadoc indent
      */
     private void adjustFirstLineToJavadocIndent(DetailNode tree, int javadocColumnNumber) {
         if (tree.getLineNumber() == blockCommentLineNumber) {
             ((JavadocNodeImpl) tree).setColumnNumber(tree.getColumnNumber() + javadocColumnNumber);
             final DetailNode[] children = tree.getChildren();
             for (DetailNode child : children) {
                 adjustFirstLineToJavadocIndent(child, javadocColumnNumber);
             }
         }
     }
 
     /**
      * Gets line number from ParseTree node.
      * @param tree
      *        ParseTree node
      * @return line number
      */
     private static int getLine(ParseTree tree) {
         final int line;
         if (tree instanceof TerminalNode) {
             line = ((TerminalNode) tree).getSymbol().getLine() - 1;
         }
         else {
             final ParserRuleContext rule = (ParserRuleContext) tree;
             line = rule.start.getLine() - 1;
         }
         return line;
     }
 
     /**
      * Gets column number from ParseTree node.
      * @param tree
      *        ParseTree node
      * @return column number
      */
     private static int getColumn(ParseTree tree) {
         final int column;
@@ -363,100 +369,112 @@ public class JavadocDetailNodeParser {
     }
 
     /**
      * Gets next sibling of ParseTree node.
      * @param node ParseTree node
      * @return next sibling of ParseTree node.
      */
     private static ParseTree getNextSibling(ParseTree node) {
         ParseTree nextSibling = null;
 
         if (node.getParent() != null) {
             final ParseTree parent = node.getParent();
             final int childCount = parent.getChildCount();
 
             int index = 0;
             while (true) {
                 final ParseTree currentNode = parent.getChild(index);
                 if (currentNode.equals(node)) {
                     if (index != childCount - 1) {
                         nextSibling = parent.getChild(index + 1);
                     }
                     break;
                 }
                 index++;
             }
         }
         return nextSibling;
     }
 
     /**
      * Gets token type of ParseTree node from JavadocTokenTypes class.
      * @param node ParseTree node.
      * @return token type from JavadocTokenTypes
      */
     private static int getTokenType(ParseTree node) {
         final int tokenType;
 
         if (node.getChildCount() == 0) {
             tokenType = ((TerminalNode) node).getSymbol().getType();
         }
         else {
             final String className = getNodeClassNameWithoutContext(node);
             final String typeName =
                     CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, className);
             tokenType = JavadocUtils.getTokenId(typeName);
         }
 
         return tokenType;
     }
 
+    /**
+     * Gets class name of ParseTree node and removes 'Context' postfix at the
+     * end and formats it.
+     * @param node {@code ParseTree} node whose class name is to be formatted and returned
+     * @return uppercased class name without the word 'Context' and with appropriately
+     *     inserted underscores
+     */
+    private static String getFormattedNodeClassNameWithoutContext(ParseTree node) {
+        final String classNameWithoutContext = getNodeClassNameWithoutContext(node);
+        return CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, classNameWithoutContext);
+    }
+
     /**
      * Gets class name of ParseTree node and removes 'Context' postfix at the
      * end.
      * @param node
      *        ParseTree node.
      * @return class name without 'Context'
      */
     private static String getNodeClassNameWithoutContext(ParseTree node) {
         final String className = node.getClass().getSimpleName();
         // remove 'Context' at the end
         final int contextLength = 7;
         return className.substring(0, className.length() - contextLength);
     }
 
     /**
      * Custom error listener for JavadocParser that prints user readable errors.
      */
     private static class DescriptiveErrorListener extends BaseErrorListener {
 
         /**
          * Offset is line number of beginning of the Javadoc comment. Log
          * messages should have line number in scope of file, not in scope of
          * Javadoc comment.
          */
         private int offset;
 
         /**
          * Error message that appeared while parsing.
          */
         private ParseErrorMessage errorMessage;
 
         /**
          * Getter for error message during parsing.
          * @return Error message during parsing.
          */
         private ParseErrorMessage getErrorMessage() {
             return errorMessage;
         }
 
         /**
          * Sets offset. Offset is line number of beginning of the Javadoc
          * comment. Log messages should have line number in scope of file, not
          * in scope of Javadoc comment.
          * @param offset
          *        offset line number
          */
         public void setOffset(int offset) {
             this.offset = offset;
         }
 
