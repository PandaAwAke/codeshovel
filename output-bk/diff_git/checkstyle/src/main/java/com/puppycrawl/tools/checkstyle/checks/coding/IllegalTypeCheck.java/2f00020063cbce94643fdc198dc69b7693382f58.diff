diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java
index ab45bd283..ef2891c81 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java
@@ -400,66 +400,65 @@ public final class IllegalTypeCheck extends AbstractCheck {
         DetailAST toVisitAst = currentNode.getFirstChild();
         while (toVisitAst == null) {
             toVisitAst = currentNode.getNextSibling();
             if (toVisitAst == null) {
                 if (currentNode.getParent().equals(subTreeRootAst)) {
                     break;
                 }
                 currentNode = currentNode.getParent();
             }
         }
         return toVisitAst;
     }
 
     /**
      * Returns true if method has to be checked or false.
      * @param ast method def to check.
      * @return true if we should check this method.
      */
     private boolean isCheckedMethod(DetailAST ast) {
         final String methodName =
             ast.findFirstToken(TokenTypes.IDENT).getText();
         return !ignoredMethodNames.contains(methodName);
     }
 
     /**
      * Set the list of illegal variable types.
      * @param classNames array of illegal variable types
      * @noinspection WeakerAccess
      */
     public void setIllegalClassNames(String... classNames) {
         illegalClassNames.clear();
         Collections.addAll(illegalClassNames, classNames);
     }
 
     /**
      * Set the list of ignore method names.
      * @param methodNames array of ignored method names
      * @noinspection WeakerAccess
      */
     public void setIgnoredMethodNames(String... methodNames) {
         ignoredMethodNames.clear();
         Collections.addAll(ignoredMethodNames, methodNames);
     }
 
     /**
      * Set the list of legal abstract class names.
      * @param classNames array of legal abstract class names
      * @noinspection WeakerAccess
      */
     public void setLegalAbstractClassNames(String... classNames) {
-        legalAbstractClassNames.clear();
         Collections.addAll(legalAbstractClassNames, classNames);
     }
 
     /**
      * Set the list of member modifiers (of methods and fields) which should be checked.
      * @param modifiers String contains modifiers.
      */
     public void setMemberModifiers(String modifiers) {
         final List<Integer> modifiersList = new ArrayList<>();
         for (String modifier : modifiers.split(",")) {
             modifiersList.add(TokenUtils.getTokenId(modifier.trim()));
         }
         memberModifiers = modifiersList;
     }
 }
