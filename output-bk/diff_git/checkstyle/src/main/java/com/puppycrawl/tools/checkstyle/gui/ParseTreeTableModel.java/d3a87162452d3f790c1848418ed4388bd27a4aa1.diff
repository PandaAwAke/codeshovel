diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTableModel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTableModel.java
index 87867a946..f86e4e4ee 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTableModel.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTableModel.java
@@ -1,113 +1,122 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2016 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.gui;
 
 import javax.swing.event.EventListenerList;
 import javax.swing.event.TreeModelEvent;
 import javax.swing.event.TreeModelListener;
 import javax.swing.tree.TreeModel;
 import javax.swing.tree.TreePath;
 
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
+import com.puppycrawl.tools.checkstyle.gui.MainFrameModel.ParseMode;
 
 /**
  * The model that backs the parse tree in the GUI.
  *
  * @author Lars KÃ¼hne
  */
 public class ParseTreeTableModel implements TreeModel {
     /** Presentation model. */
     private final ParseTreeTablePModel pModel;
 
     /**
      * A list of event listeners for the tree model.
      */
     private final EventListenerList listenerList = new EventListenerList();
 
     /**
      * @param parseTree DetailAST parse tree.
      */
     public ParseTreeTableModel(DetailAST parseTree) {
         pModel = new ParseTreeTablePModel(parseTree);
         setParseTree(parseTree);
     }
 
     /**
      * Sets parse tree.
      * @param parseTree DetailAST parse tree.
      */
     protected final void setParseTree(DetailAST parseTree) {
         pModel.setParseTree(parseTree);
         final Object[] path = {pModel.getRoot()};
         // no need to setup remaining info, as the call results in a
         // table structure changed event anyway - we just pass nulls
         fireTreeStructureChanged(this, path, null, (Object[]) null);
     }
 
+    /**
+     * Set parse mode.
+     * @param mode ParseMode enum
+     */
+    protected void setParseMode(ParseMode mode) {
+        pModel.setParseMode(mode);
+    }
+
     /**
      * @return the number of available column.
      */
     public int getColumnCount() {
         return pModel.getColumnCount();
     }
 
     /**
      * @param column the column number
      * @return the name for column number {@code column}.
      */
     public String getColumnName(int column) {
         return pModel.getColumnName(column);
     }
 
     /**
      * @param column the column number
      * @return the type for column number {@code column}.
      */
     public Class<?> getColumnClass(int column) {
         return pModel.getColumnClass(column);
     }
 
     /**
      * @param node the node
      * @param column the column number
      * @return the value to be displayed for node {@code node},
      *     at column number {@code column}.
      */
     public Object getValueAt(Object node, int column) {
         return pModel.getValueAt(node, column);
     }
 
     @Override
     public Object getChild(Object parent, int index) {
         return pModel.getChild(parent, index);
     }
 
     @Override
     public int getChildCount(Object parent) {
         return pModel.getChildCount(parent);
     }
 
     @Override
     public void valueForPathChanged(TreePath path, Object newValue) {
         // No Code, as tree is read-only
     }
 
     @Override
     public Object getRoot() {
