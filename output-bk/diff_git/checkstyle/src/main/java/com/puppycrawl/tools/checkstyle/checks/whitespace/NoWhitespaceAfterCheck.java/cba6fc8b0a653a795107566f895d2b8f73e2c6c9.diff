diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java
index 7ac5296a6..c0e9d58bf 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java
@@ -57,80 +57,80 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  *     &lt;property name="allowLineBreaks" value="false"/&gt;
  * &lt;/module&gt;
  * </pre>
  * @author Rick Giles
  * @author lkuehne
  * @version 1.0
  */
 public class NoWhitespaceAfterCheck extends Check
 {
     /** Whether whitespace is allowed if the AST is at a linebreak */
     private boolean mAllowLineBreaks = true;
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.ARRAY_INIT,
             TokenTypes.INC,
             TokenTypes.DEC,
             TokenTypes.UNARY_MINUS,
             TokenTypes.UNARY_PLUS,
             TokenTypes.BNOT,
             TokenTypes.LNOT,
             TokenTypes.DOT,
         };
     }
 
     @Override
     public int[] getAcceptableTokens()
     {
         return new int[] {
             TokenTypes.ARRAY_INIT,
             TokenTypes.INC,
             TokenTypes.DEC,
             TokenTypes.UNARY_MINUS,
             TokenTypes.UNARY_PLUS,
             TokenTypes.BNOT,
             TokenTypes.LNOT,
             TokenTypes.DOT,
             TokenTypes.TYPECAST,
         };
     }
 
     @Override
     public void visitToken(DetailAST aAST)
     {
         DetailAST targetAST = aAST;
         if (targetAST.getType() == TokenTypes.TYPECAST) {
             targetAST = targetAST.findFirstToken(TokenTypes.RPAREN);
         }
-        final String line = getLines()[aAST.getLineNo() - 1];
+        final String line = getLine(aAST.getLineNo() - 1);
         final int after =
             targetAST.getColumnNo() + targetAST.getText().length();
 
         if ((after >= line.length())
             || Character.isWhitespace(line.charAt(after)))
         {
             boolean flag = !mAllowLineBreaks;
             for (int i = after + 1; !flag && (i < line.length()); i++) {
                 if (!Character.isWhitespace(line.charAt(i))) {
                     flag = true;
                 }
             }
             if (flag) {
                 log(targetAST.getLineNo(), after,
                     "ws.followed", targetAST.getText());
             }
         }
     }
 
     /**
      * Control whether whitespace is flagged at linebreaks.
      * @param aAllowLineBreaks whether whitespace should be
      * flagged at linebreaks.
      */
     public void setAllowLineBreaks(boolean aAllowLineBreaks)
     {
         mAllowLineBreaks = aAllowLineBreaks;
     }
 }
