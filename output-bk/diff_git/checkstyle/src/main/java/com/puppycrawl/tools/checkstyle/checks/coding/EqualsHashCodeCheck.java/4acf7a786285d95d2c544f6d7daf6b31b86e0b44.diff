diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java
index 7191d06a4..11c0e441e 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java
@@ -117,59 +117,58 @@ public class EqualsHashCodeCheck
 
         return CheckUtils.isEqualsMethod(ast)
                 && modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)
                 && isObjectParam(parameters.getFirstChild())
                 && (ast.branchContains(TokenTypes.SLIST)
                         || modifiers.branchContains(TokenTypes.LITERAL_NATIVE));
     }
 
     /**
      * Determines if an AST is a valid HashCode method implementation.
      *
      * @param ast the AST to check
      * @return true if the {code ast} is a HashCode method.
      */
     private static boolean isHashCodeMethod(DetailAST ast) {
         final DetailAST modifiers = ast.getFirstChild();
         final AST type = ast.findFirstToken(TokenTypes.TYPE);
         final AST methodName = ast.findFirstToken(TokenTypes.IDENT);
         final DetailAST parameters = ast.findFirstToken(TokenTypes.PARAMETERS);
 
         return type.getFirstChild().getType() == TokenTypes.LITERAL_INT
                 && "hashCode".equals(methodName.getText())
                 && modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)
                 && !modifiers.branchContains(TokenTypes.LITERAL_STATIC)
                 && parameters.getFirstChild() == null
                 && (ast.branchContains(TokenTypes.SLIST)
                         || modifiers.branchContains(TokenTypes.LITERAL_NATIVE));
     }
 
     /**
      * Determines if an AST is a formal param of type Object.
      * @param paramNode the AST to check
      * @return true if firstChild is a parameter of an Object type.
      */
     private static boolean isObjectParam(DetailAST paramNode) {
         final DetailAST typeNode = paramNode.findFirstToken(TokenTypes.TYPE);
         final FullIdent fullIdent = FullIdent.createFullIdentBelow(typeNode);
         final String name = fullIdent.getText();
         return "Object".equals(name) || "java.lang.Object".equals(name);
     }
 
     @Override
     public void finishTree(DetailAST rootAST) {
         objBlockWithEquals
             .entrySet().stream().filter(detailASTDetailASTEntry -> {
                 return objBlockWithHashCode.remove(detailASTDetailASTEntry.getKey()) == null;
             }).forEach(detailASTDetailASTEntry -> {
                 final DetailAST equalsAST = detailASTDetailASTEntry.getValue();
                 log(equalsAST.getLineNo(), equalsAST.getColumnNo(), MSG_KEY_HASHCODE);
             });
-        objBlockWithHashCode.entrySet().forEach(detailASTDetailASTEntry -> {
-            final DetailAST equalsAST = detailASTDetailASTEntry.getValue();
+        objBlockWithHashCode.forEach((key, equalsAST) -> {
             log(equalsAST.getLineNo(), equalsAST.getColumnNo(), MSG_KEY_EQUALS);
         });
 
         objBlockWithEquals.clear();
         objBlockWithHashCode.clear();
     }
 }
