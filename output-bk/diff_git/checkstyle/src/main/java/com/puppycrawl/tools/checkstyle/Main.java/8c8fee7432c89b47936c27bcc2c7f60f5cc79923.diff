diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
index d5df68b13..5c15f1632 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
@@ -2,100 +2,101 @@
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2016 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle;
 
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.util.ArrayList;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Properties;
 import java.util.logging.ConsoleHandler;
 import java.util.logging.Filter;
 import java.util.logging.Level;
 import java.util.logging.LogRecord;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
 
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.CommandLineParser;
 import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.HelpFormatter;
 import org.apache.commons.cli.Options;
 import org.apache.commons.cli.ParseException;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
 import com.google.common.io.Closeables;
 import com.puppycrawl.tools.checkstyle.api.AuditListener;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
+import com.puppycrawl.tools.checkstyle.api.RootModule;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 
 /**
  * Wrapper command line program for the Checker.
  * @author the original author or authors.
  *
  **/
 public final class Main {
     /** Logger for Main. */
     private static final Log LOG = LogFactory.getLog(Main.class);
 
     /** Width of CLI help option. */
     private static final int HELP_WIDTH = 100;
 
     /** Exit code returned when execution finishes with {@link CheckstyleException}. */
     private static final int EXIT_WITH_CHECKSTYLE_EXCEPTION_CODE = -2;
 
     /** Name for the option 'v'. */
     private static final String OPTION_V_NAME = "v";
 
     /** Name for the option 'c'. */
     private static final String OPTION_C_NAME = "c";
 
     /** Name for the option 'f'. */
     private static final String OPTION_F_NAME = "f";
 
     /** Name for the option 'p'. */
     private static final String OPTION_P_NAME = "p";
 
     /** Name for the option 'o'. */
     private static final String OPTION_O_NAME = "o";
 
     /** Name for the option 't'. */
     private static final String OPTION_T_NAME = "t";
 
     /** Name for the option '--tree'. */
     private static final String OPTION_TREE_NAME = "tree";
 
     /** Name for the option '-T'. */
     private static final String OPTION_CAPITAL_T_NAME = "T";
 
     /** Name for the option '--treeWithComments'. */
     private static final String OPTION_TREE_COMMENT_NAME = "treeWithComments";
 
     /** Name for the option '-j'. */
     private static final String OPTION_J_NAME = "j";
 
     /** Name for the option '--javadocTree'. */
     private static final String OPTION_JAVADOC_TREE_NAME = "javadocTree";
 
@@ -362,122 +363,139 @@ public final class Main {
     }
 
     /**
      * Util method to convert CommandLine type to POJO object.
      * @param cmdLine command line object
      * @param filesToProcess List of files to process found from the command line.
      * @return command line option as POJO object
      */
     private static CliOptions convertCliToPojo(CommandLine cmdLine, List<File> filesToProcess) {
         final CliOptions conf = new CliOptions();
         conf.format = cmdLine.getOptionValue(OPTION_F_NAME);
         if (conf.format == null) {
             conf.format = PLAIN_FORMAT_NAME;
         }
         conf.outputLocation = cmdLine.getOptionValue(OPTION_O_NAME);
         conf.configLocation = cmdLine.getOptionValue(OPTION_C_NAME);
         conf.propertiesLocation = cmdLine.getOptionValue(OPTION_P_NAME);
         conf.files = filesToProcess;
         return conf;
     }
 
     /**
      * Executes required Checkstyle actions based on passed parameters.
      * @param cliOptions
      *        pojo object that contains all options
      * @return number of violations of ERROR level
      * @throws FileNotFoundException
      *         when output file could not be found
      * @throws CheckstyleException
      *         when properties file could not be loaded
      */
     private static int runCheckstyle(CliOptions cliOptions)
             throws CheckstyleException, FileNotFoundException {
         // setup the properties
         final Properties props;
 
         if (cliOptions.propertiesLocation == null) {
             props = System.getProperties();
         }
         else {
             props = loadProperties(new File(cliOptions.propertiesLocation));
         }
 
         // create a configuration
         final Configuration config = ConfigurationLoader.loadConfiguration(
                 cliOptions.configLocation, new PropertiesExpander(props));
 
         // create a listener for output
         final AuditListener listener = createListener(cliOptions.format, cliOptions.outputLocation);
 
-        // create Checker object and run it
+        // create RootModule object and run it
         int errorCounter = 0;
-        final Checker checker = new Checker();
+        final ClassLoader moduleClassLoader = Checker.class.getClassLoader();
+        final RootModule rootModule = getRootModule(config.getName(), moduleClassLoader);
 
         try {
 
-            final ClassLoader moduleClassLoader = Checker.class.getClassLoader();
-            checker.setModuleClassLoader(moduleClassLoader);
-            checker.configure(config);
-            checker.addListener(listener);
+            rootModule.setModuleClassLoader(moduleClassLoader);
+            rootModule.configure(config);
+            rootModule.addListener(listener);
 
-            // run Checker
-            errorCounter = checker.process(cliOptions.files);
+            // run RootModule
+            errorCounter = rootModule.process(cliOptions.files);
 
         }
         finally {
-            checker.destroy();
+            rootModule.destroy();
         }
 
         return errorCounter;
     }
 
+    /**
+     * Creates a new instance of the root module that will control and run
+     * Checkstyle.
+     * @param name The name of the module. This will either be a short name that
+     *        will have to be found or the complete package name.
+     * @param moduleClassLoader Class loader used to load the root module.
+     * @return The new instance of the root module.
+     * @throws CheckstyleException if no module can be instantiated from name
+     */
+    private static RootModule getRootModule(String name, ClassLoader moduleClassLoader)
+            throws CheckstyleException {
+        final ModuleFactory factory = new PackageObjectFactory(
+                Checker.class.getPackage().getName() + ".", moduleClassLoader);
+
+        return (RootModule) factory.createModule(name);
+    }
+
     /**
      * Loads properties from a File.
      * @param file
      *        the properties file
      * @return the properties in file
      * @throws CheckstyleException
      *         when could not load properties file
      */
     private static Properties loadProperties(File file)
             throws CheckstyleException {
         final Properties properties = new Properties();
 
         FileInputStream fis = null;
         try {
             fis = new FileInputStream(file);
             properties.load(fis);
         }
         catch (final IOException ex) {
             throw new CheckstyleException(String.format(
                     "Unable to load properties from file '%s'.", file.getAbsolutePath()), ex);
         }
         finally {
             Closeables.closeQuietly(fis);
         }
 
         return properties;
     }
 
     /**
      * Creates the audit listener.
      *
      * @param format format of the audit listener
      * @param outputLocation the location of output
      * @return a fresh new {@code AuditListener}
      * @exception FileNotFoundException when provided output location is not found
      */
     private static AuditListener createListener(String format,
                                                 String outputLocation)
             throws FileNotFoundException {
 
         // setup the output stream
         final OutputStream out;
         final boolean closeOutputStream;
         if (outputLocation == null) {
             out = System.out;
             closeOutputStream = false;
         }
         else {
             out = new FileOutputStream(outputLocation);
             closeOutputStream = true;
