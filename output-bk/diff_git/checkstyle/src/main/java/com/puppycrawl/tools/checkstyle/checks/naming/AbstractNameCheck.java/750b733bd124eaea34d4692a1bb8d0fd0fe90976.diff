diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractNameCheck.java
index 0b4d6416c..a5a4862a1 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractNameCheck.java
@@ -1,75 +1,75 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2014  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks.naming;
 
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.checks.AbstractFormatCheck;
 
 /**
  * Abstract class for checking that names conform to a specified format.
  *
  * @author Rick Giles
  * @version 1.0
  */
 public abstract class AbstractNameCheck
     extends AbstractFormatCheck
 {
     /**
      * Message key for invalid pattern error.
      */
     public static final String MSG_INVALID_PATTERN = "name.invalidPattern";
 
     /**
      * Creates a new <code>AbstractNameCheck</code> instance.
-     * @param aFormat format to check with
+     * @param format format to check with
      */
-    public AbstractNameCheck(String aFormat)
+    public AbstractNameCheck(String format)
     {
-        super(aFormat);
+        super(format);
     }
 
     /**
      * Decides whether the name of an AST should be checked against
      * the format regexp.
-     * @param aAST the AST to check.
-     * @return true if the IDENT subnode of aAST should be checked against
+     * @param ast the AST to check.
+     * @return true if the IDENT subnode of ast should be checked against
      * the format regexp.
      */
-    protected boolean mustCheckName(DetailAST aAST)
+    protected boolean mustCheckName(DetailAST ast)
     {
         return true;
     }
 
     @Override
-    public void visitToken(DetailAST aAST)
+    public void visitToken(DetailAST ast)
     {
-        if (mustCheckName(aAST)) {
-            final DetailAST nameAST = aAST.findFirstToken(TokenTypes.IDENT);
+        if (mustCheckName(ast)) {
+            final DetailAST nameAST = ast.findFirstToken(TokenTypes.IDENT);
             if (!getRegexp().matcher(nameAST.getText()).find()) {
                 log(nameAST.getLineNo(),
                     nameAST.getColumnNo(),
                     MSG_INVALID_PATTERN,
                     nameAST.getText(),
                     getFormat());
             }
         }
     }
 }
