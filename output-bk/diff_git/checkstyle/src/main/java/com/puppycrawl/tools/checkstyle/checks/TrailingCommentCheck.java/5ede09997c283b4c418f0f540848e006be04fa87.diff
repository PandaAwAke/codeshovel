diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java
index d83ba4a2b..91b26fc35 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java
@@ -52,160 +52,167 @@ import org.apache.commons.beanutils.ConversionException;
  * <li>
  * &quot;The comments have to be aligned so that they do not
  * interfere with the visual structure of the code. If you don't
  * align them neatly, they'll make your listing look like it's been
  * through a washing machine.&quot;
  * </li>
  * <li>
  * &quot;Endline comments tend to be hard to format...It takes time
  * to align them. Such time is not spent learning more about
  * the code; it's dedicated solely to the tedious task of
  * pressing the spacebar or tab key.&quot;
  * </li>
  * <li>
  * &quot;Endline comments are also hard to maintain. If the code on
  * any line containing an endline comment grows, it bumps the
  * comment farther out, and all the other endline comments will
  * have to bumped out to match. Styles that are hard to
  * maintain aren't maintained....&quot;
  * </li>
  * <li>
  * &quot;Endline comments also tend to be cryptic. The right side of
  * the line doesn't offer much room and the desire to keep the
  * comment on one line means the comment must be short.
  * Work then goes into making the line as short as possible
  * instead of as clear as possible. The comment usually ends
  * up as cryptic as possible....&quot;
  * </li>
  * <li>
  * &quot;A systemic problem with endline comments is that it's hard
  * to write a meaningful comment for one line of code. Most
  * endline comments just repeat the line of code, which hurts
  * more than it helps.&quot;
  * </li>
  * </ul>
  * His comments on being hard to maintain when the size of
  * the line changes are even more important in the age of
  * automated refactorings.
  *
  * <p>
  * To configure the check so it enforces only comment on a line:
  * <pre>
  * &lt;module name=&quot;TrailingComment&quot;&gt;
  *    &lt;property name=&quot;format&quot; value=&quot;^\\s*$&quot;/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * @author o_sukhodolsky
  */
 public class TrailingCommentCheck extends AbstractFormatCheck
 {
+
+    /**
+     * A key is pointing to the warning message text in "messages.properties"
+     * file.
+     */
+    public static final String MSG_KEY = "trailing.comments";
+
     /** default format for allowed blank line. */
     private static final String DEFAULT_FORMAT = "^[\\s\\}\\);]*$";
 
     /** pattern for legal trailing comment. */
     private Pattern legalComment;
 
     /**
      * Sets patter for legal trailing comments.
      * @param format format to set.
      * @throws ConversionException unable to parse a given format.
      */
     public void setLegalComment(final String format)
         throws ConversionException
     {
         try {
             legalComment = Utils.getPattern(format);
         }
         catch (final PatternSyntaxException e) {
             throw new ConversionException("unable to parse " + format, e);
         }
     }
     /**
      * Creates new instance of the check.
      * @throws ConversionException unable to parse DEFAULT_FORMAT.
      */
     public TrailingCommentCheck() throws ConversionException
     {
         super(DEFAULT_FORMAT);
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[0];
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
         throw new IllegalStateException("visitToken() shouldn't be called.");
     }
 
     @Override
     public void beginTree(DetailAST rootAST)
     {
         final Pattern blankLinePattern = getRegexp();
         final Map<Integer, TextBlock> cppComments = getFileContents()
                 .getCppComments();
         final Map<Integer, List<TextBlock>> cComments = getFileContents()
                 .getCComments();
         final Set<Integer> lines = Sets.newHashSet();
         lines.addAll(cppComments.keySet());
         lines.addAll(cComments.keySet());
 
         for (Integer lineNo : lines) {
             final String line = getLines()[lineNo.intValue() - 1];
             String lineBefore = "";
             TextBlock comment = null;
             if (cppComments.containsKey(lineNo)) {
                 comment = cppComments.get(lineNo);
                 lineBefore = line.substring(0, comment.getStartColNo());
             }
             else if (cComments.containsKey(lineNo)) {
                 final List<TextBlock> commentList = cComments.get(lineNo);
                 comment = commentList.get(commentList.size() - 1);
                 lineBefore = line.substring(0, comment.getStartColNo());
                 if (comment.getText().length == 1) {
                     final String lineAfter =
                         line.substring(comment.getEndColNo() + 1).trim();
                     if (!"".equals(lineAfter)) {
                         // do not check comment which doesn't end line
                         continue;
                     }
                 }
             }
             if ((comment != null)
                 && !blankLinePattern.matcher(lineBefore).find()
                 && !isLegalComment(comment))
             {
-                log(lineNo.intValue(), "trailing.comments");
+                log(lineNo.intValue(), MSG_KEY);
             }
         }
     }
 
     /**
      * Checks if given comment is legal (single-line and matches to the
      * pattern).
      * @param comment comment to check.
      * @return true if the comment if legal.
      */
     private boolean isLegalComment(final TextBlock comment)
     {
         if (legalComment == null) {
             return false;
         }
         // multi-line comment can not be legal
         if (comment.getStartLineNo() != comment.getEndLineNo()) {
             return false;
         }
         String commentText = comment.getText()[0];
         // remove chars which start comment
         commentText = commentText.substring(2);
         // if this is a C-style comment we need to remove its end
         if (commentText.endsWith("*/")) {
             commentText = commentText.substring(0, commentText.length() - 2);
         }
         commentText = commentText.trim();
         return legalComment.matcher(commentText).find();
     }
 }
