diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
index 9d7f650b6..a5d9e98f5 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
@@ -92,182 +92,182 @@ public abstract class AbstractTypeAwareCheck extends Check
     /**
      * Controls whether to show class loading errors in the checkstyle report.
      *
      * @param suppressLoadErrors true if errors shouldn't be shown
      */
     public final void setSuppressLoadErrors(boolean suppressLoadErrors)
     {
         this.suppressLoadErrors = suppressLoadErrors;
     }
 
     /**
      * Called to process an AST when visiting it.
      * @param ast the AST to process. Guaranteed to not be PACKAGE_DEF or
      *             IMPORT tokens.
      */
     protected abstract void processAST(DetailAST ast);
 
     @Override
     public final int[] getRequiredTokens()
     {
         return new int[] {
             TokenTypes.PACKAGE_DEF,
             TokenTypes.IMPORT,
             TokenTypes.CLASS_DEF,
             TokenTypes.INTERFACE_DEF,
             TokenTypes.ENUM_DEF,
         };
     }
 
     @Override
     public void beginTree(DetailAST rootAST)
     {
         packageFullIdent = FullIdent.createFullIdent(null);
         imports.clear();
         // add java.lang.* since it's always imported
         imports.add("java.lang.*");
         classResolver = null;
         currentClass = "";
         typeParams.clear();
     }
 
     @Override
     public final void visitToken(DetailAST ast)
     {
         if (ast.getType() == TokenTypes.PACKAGE_DEF) {
             processPackage(ast);
         }
         else if (ast.getType() == TokenTypes.IMPORT) {
             processImport(ast);
         }
-        else if ((ast.getType() == TokenTypes.CLASS_DEF)
-                 || (ast.getType() == TokenTypes.INTERFACE_DEF)
-                 || (ast.getType() == TokenTypes.ENUM_DEF))
+        else if (ast.getType() == TokenTypes.CLASS_DEF
+                 || ast.getType() == TokenTypes.INTERFACE_DEF
+                 || ast.getType() == TokenTypes.ENUM_DEF)
         {
             processClass(ast);
         }
         else {
             if (ast.getType() == TokenTypes.METHOD_DEF) {
                 processTypeParams(ast);
             }
             processAST(ast);
         }
     }
 
     @Override
     public final void leaveToken(DetailAST ast)
     {
-        if ((ast.getType() == TokenTypes.CLASS_DEF)
-            || (ast.getType() == TokenTypes.ENUM_DEF))
+        if (ast.getType() == TokenTypes.CLASS_DEF
+            || ast.getType() == TokenTypes.ENUM_DEF)
         {
             // perhaps it was inner class
             int dotIdx = currentClass.lastIndexOf("$");
             if (dotIdx == -1) {
                 // perhaps just a class
                 dotIdx = currentClass.lastIndexOf(".");
             }
             if (dotIdx == -1) {
                 // looks like a topmost class
                 currentClass = "";
             }
             else {
                 currentClass = currentClass.substring(0, dotIdx);
             }
             typeParams.pop();
         }
         else if (ast.getType() == TokenTypes.METHOD_DEF) {
             typeParams.pop();
         }
-        else if ((ast.getType() != TokenTypes.PACKAGE_DEF)
-                 && (ast.getType() != TokenTypes.IMPORT))
+        else if (ast.getType() != TokenTypes.PACKAGE_DEF
+                 && ast.getType() != TokenTypes.IMPORT)
         {
             leaveAST(ast);
         }
     }
 
     /**
      * Called when exiting an AST. A no-op by default, extending classes
      * may choose to override this to augment their processing.
      * @param ast the AST we are departing. Guaranteed to not be PACKAGE_DEF,
      *             CLASS_DEF, or IMPORT
      */
     protected void leaveAST(DetailAST ast)
     {
     }
 
     /**
      * Is exception is unchecked (subclass of <code>RuntimeException</code>
      * or <code>Error</code>
      *
      * @param exception <code>Class</code> of exception to check
      * @return true  if exception is unchecked
      *         false if exception is checked
      */
     protected boolean isUnchecked(Class<?> exception)
     {
         return isSubclass(exception, RuntimeException.class)
             || isSubclass(exception, Error.class);
     }
 
     /**
      * Checks if one class is subclass of another
      *
      * @param child <code>Class</code> of class
      *               which should be child
      * @param parent <code>Class</code> of class
      *                which should be parent
      * @return true  if aChild is subclass of aParent
      *         false otherwise
      */
     protected boolean isSubclass(Class<?> child, Class<?> parent)
     {
-        return (parent != null) && (child != null)
+        return parent != null && child != null
             &&  parent.isAssignableFrom(child);
     }
 
     /** @return <code>ClassResolver</code> for current tree. */
     private ClassResolver getClassResolver()
     {
         if (classResolver == null) {
             classResolver =
                 new ClassResolver(getClassLoader(),
                                   packageFullIdent.getText(),
                                   imports);
         }
         return classResolver;
     }
 
     /**
      * Attempts to resolve the Class for a specified name.
      * @param className name of the class to resolve
      * @param currentClass name of surrounding class.
      * @return the resolved class or <code>null</code>
      *          if unable to resolve the class.
      */
     protected final Class<?> resolveClass(String className,
             String currentClass)
     {
         try {
             return getClassResolver().resolve(className, currentClass);
         }
         catch (final ClassNotFoundException e) {
             return null;
         }
     }
 
     /**
      * Tries to load class. Logs error if unable.
      * @param ident name of class which we try to load.
      * @param currentClass name of surrounding class.
      * @return <code>Class</code> for a ident.
      */
     protected final Class<?> tryLoadClass(Token ident, String currentClass)
     {
         final Class<?> clazz = resolveClass(ident.getText(), currentClass);
         if (clazz == null) {
             logLoadError(ident);
         }
         return clazz;
     }
 
     /**
      * Logs error if unable to load class information.
@@ -438,114 +438,114 @@ public abstract class AbstractTypeAwareCheck extends Check
 
         /**
          * Creates new instance of class inforamtion object.
          * @param className token which represents class name.
          */
         protected ClassInfo(final Token className)
         {
             if (className == null) {
                 throw new NullPointerException(
                     "ClassInfo's name should be non-null");
             }
             name = className;
         }
     }
 
     /** Represents regular classes/enumes. */
     private static final class RegularClass extends ClassInfo
     {
         /** name of surrounding class. */
         private final String surroundingClass;
         /** is class loadable. */
         private boolean isLoadable = true;
         /** <code>Class</code> object of this class if it's loadable. */
         private Class<?> classObj;
         /** the check we use to resolve classes. */
         private final AbstractTypeAwareCheck check;
 
         /**
          * Creates new instance of of class information object.
          * @param name <code>FullIdent</code> associated with new object.
          * @param surroundingClass name of current surrounding class.
          * @param check the check we use to load class.
          */
         private RegularClass(final Token name,
                              final String surroundingClass,
                              final AbstractTypeAwareCheck check)
         {
             super(name);
             this.surroundingClass = surroundingClass;
             this.check = check;
         }
         /** @return if class is loadable ot not. */
         private boolean isLoadable()
         {
             return isLoadable;
         }
 
         @Override
         public Class<?> getClazz()
         {
-            if (isLoadable() && (classObj == null)) {
+            if (isLoadable() && classObj == null) {
                 setClazz(check.tryLoadClass(getName(), surroundingClass));
             }
             return classObj;
         }
 
         /**
          * Associates <code> Class</code> with an object.
          * @param classObj <code>Class</code> to associate with.
          */
         private void setClazz(Class<?> classObj)
         {
             this.classObj = classObj;
-            isLoadable = (classObj != null);
+            isLoadable = classObj != null;
         }
 
         @Override
         public String toString()
         {
             return "RegularClass[name=" + getName()
                 + ", in class=" + surroundingClass
                 + ", loadable=" + isLoadable
                 + ", class=" + classObj + "]";
         }
     }
 
     /** Represents type param which is "alias" for real type. */
     private static class ClassAlias extends ClassInfo
     {
         /** Class information associated with the alias. */
         private final ClassInfo classInfo;
 
         /**
          * Creates nnew instance of the class.
          * @param name token which represents name of class alias.
          * @param classInfo class information associated with the alias.
          */
         ClassAlias(final Token name, ClassInfo classInfo)
         {
             super(name);
             this.classInfo = classInfo;
         }
 
         @Override
         public final Class<?> getClazz()
         {
             return classInfo.getClazz();
         }
 
         @Override
         public String toString()
         {
             return "ClassAlias[alias " + getName()
                 + " for " + classInfo + "]";
         }
     }
 
     /**
      * Represents text element with location in the text.
      */
     protected static class Token
     {
         /** token's column number. */
         private final int column;
