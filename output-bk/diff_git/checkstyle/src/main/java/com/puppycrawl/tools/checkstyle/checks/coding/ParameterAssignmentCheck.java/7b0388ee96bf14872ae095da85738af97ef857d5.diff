diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheck.java
index 80a8a30f6..00b5a8879 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheck.java
@@ -188,60 +188,60 @@ public final class ParameterAssignmentCheck extends Check {
 
     /**
      * Checks if this is increment/decrement of parameter.
      * @param ast dec/inc to check.
      */
     private void visitIncDec(DetailAST ast) {
         checkIdent(ast);
     }
 
     /**
      * Check if ident is parameter.
      * @param ast ident to check.
      */
     private void checkIdent(DetailAST ast) {
         if (!parameterNames.isEmpty()) {
             final DetailAST identAST = ast.getFirstChild();
 
             if (identAST != null
                 && identAST.getType() == TokenTypes.IDENT
                 && parameterNames.contains(identAST.getText())) {
                 log(ast.getLineNo(), ast.getColumnNo(),
                     MSG_KEY, identAST.getText());
             }
         }
     }
 
     /**
      * Creates new set of parameters and store old one in stack.
      * @param ast a method to process.
      */
     private void visitMethodDef(DetailAST ast) {
         parameterNamesStack.push(parameterNames);
         parameterNames = Sets.newHashSet();
 
         visitMethodParameters(ast.findFirstToken(TokenTypes.PARAMETERS));
     }
 
     /** Restores old set of parameters. */
     private void leaveMethodDef() {
         parameterNames = parameterNamesStack.pop();
     }
 
     /**
      * Creates new parameter set for given method.
      * @param ast a method for process.
      */
     private void visitMethodParameters(DetailAST ast) {
         DetailAST parameterDefAST =
             ast.findFirstToken(TokenTypes.PARAMETER_DEF);
 
-        for (; parameterDefAST != null;
-             parameterDefAST = parameterDefAST.getNextSibling()) {
+        while (parameterDefAST != null) {
             if (parameterDefAST.getType() == TokenTypes.PARAMETER_DEF) {
                 final DetailAST param =
                     parameterDefAST.findFirstToken(TokenTypes.IDENT);
                 parameterNames.add(param.getText());
             }
+            parameterDefAST = parameterDefAST.getNextSibling();
         }
     }
 }
