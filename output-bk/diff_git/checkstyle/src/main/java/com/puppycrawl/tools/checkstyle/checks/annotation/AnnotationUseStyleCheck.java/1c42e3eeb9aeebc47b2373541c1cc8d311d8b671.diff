diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java
index d986ed31a..3795b64b3 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java
@@ -272,140 +272,140 @@ public final class AnnotationUseStyleCheck extends Check
         }
 
         if (ElementStyle.COMPACT_NO_ARRAY == this.style) {
             this.checkCompactNoArrayStyle(annotation);
         }
         else if (ElementStyle.COMPACT == this.style) {
             this.checkCompactStyle(annotation);
         }
         else if (ElementStyle.EXPANDED == this.style) {
             this.checkExpandedStyle(annotation);
         }
     }
 
     /**
      * Checks for expanded style type violations.
      *
      * @param annotation the annotation token
      */
     private void checkExpandedStyle(final DetailAST annotation)
     {
         final int valuePairCount =
             annotation.getChildCount(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);
 
         if (valuePairCount == 0
             && annotation.branchContains(TokenTypes.EXPR))
         {
             this.log(annotation.getLineNo(), MSG_KEY_ANNOTATION_INCORRECT_STYLE,
                 ElementStyle.EXPANDED);
         }
     }
 
     /**
      * Checks for compact style type violations.
      *
      * @param annotation the annotation token
      */
     private void checkCompactStyle(final DetailAST annotation)
     {
         final int valuePairCount =
             annotation.getChildCount(
                 TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);
 
         final DetailAST valuePair =
             annotation.findFirstToken(
                 TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);
 
         if (valuePairCount == 1
             && AnnotationUseStyleCheck.ANNOTATION_ELEMENT_SINGLE_NAME.equals(
                 valuePair.getFirstChild().getText()))
         {
-            this.log(annotation.getLineNo(), "annotation.incorrect.style",
+            this.log(annotation.getLineNo(), MSG_KEY_ANNOTATION_INCORRECT_STYLE,
                 ElementStyle.COMPACT);
         }
     }
 
     /**
      * Checks for compact no array style type violations.
      *
      * @param annotation the annotation token
      */
     private void checkCompactNoArrayStyle(final DetailAST annotation)
     {
         final DetailAST arrayInit =
             annotation.findFirstToken(TokenTypes.ANNOTATION_ARRAY_INIT);
 
         final int valuePairCount =
             annotation.getChildCount(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);
 
         final DetailAST valuePair =
             annotation.findFirstToken(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);
 
         //in compact style with one value
         if (arrayInit != null
             && arrayInit.getChildCount(TokenTypes.EXPR) == 1)
         {
-            this.log(annotation.getLineNo(), "annotation.incorrect.style",
+            this.log(annotation.getLineNo(), MSG_KEY_ANNOTATION_INCORRECT_STYLE,
                 ElementStyle.COMPACT_NO_ARRAY);
         }
         //in expanded style with one value and the correct element name
         else if (valuePairCount == 1) {
             final DetailAST nestedArrayInit =
                 valuePair.findFirstToken(TokenTypes.ANNOTATION_ARRAY_INIT);
 
             if (nestedArrayInit != null
                 && AnnotationUseStyleCheck.
                     ANNOTATION_ELEMENT_SINGLE_NAME.equals(
                     valuePair.getFirstChild().getText())
                     && nestedArrayInit.getChildCount(TokenTypes.EXPR) == 1)
             {
-                this.log(annotation.getLineNo(), "annotation.incorrect.style",
+                this.log(annotation.getLineNo(), MSG_KEY_ANNOTATION_INCORRECT_STYLE,
                     ElementStyle.COMPACT_NO_ARRAY);
             }
         }
     }
 
     /**
      * Checks to see if the trailing comma is present if required or
      * prohibited.
      *
      * @param annotation the annotation token
      */
     private void checkTrailingComma(final DetailAST annotation)
     {
         if (TrailingArrayComma.IGNORE == this.comma
             || this.comma == null)
         {
             return;
         }
 
         DetailAST child = annotation.getFirstChild();
 
         while (child != null) {
             DetailAST arrayInit = null;
 
             if (child.getType()
                 == TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR)
             {
                 arrayInit =
                     child.findFirstToken(TokenTypes.ANNOTATION_ARRAY_INIT);
             }
             else if (child.getType() == TokenTypes.ANNOTATION_ARRAY_INIT) {
                 arrayInit = child;
             }
 
             if (arrayInit != null) {
                 this.logCommaViolation(arrayInit);
             }
             child = child.getNextSibling();
         }
     }
 
     /**
      * logs a trailing array comma violation if one exists.
      *
      * @param ast the array init
      * {@link TokenTypes#ANNOTATION_ARRAY_INIT ANNOTATION_ARRAY_INIT}.
      */
     private void logCommaViolation(final DetailAST ast)
     {
         final DetailAST rCurly = ast.findFirstToken(TokenTypes.RCURLY);
