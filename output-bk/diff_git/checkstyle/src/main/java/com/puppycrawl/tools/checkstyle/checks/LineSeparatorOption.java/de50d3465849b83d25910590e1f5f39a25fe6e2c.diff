diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/LineSeparatorOption.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/LineSeparatorOption.java
index 31053eb98..8b03cedbd 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/LineSeparatorOption.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/LineSeparatorOption.java
@@ -18,70 +18,72 @@
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks;
 
 import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
 
 /**
  * Represents the options for line separator settings.
  *
  * @author lkuehne
  * @see NewlineAtEndOfFileCheck
  */
 public enum LineSeparatorOption {
     /** Windows-style line separators. **/
     CRLF("\r\n"),
 
     /** Mac-style line separators. **/
     CR("\r"),
 
     /** Unix-style line separators. **/
     LF("\n"),
 
     /**
      * Matches CR, LF and CRLF line separators.
      * Only the length is used - the actual value is ignored.
      */
     LF_CR_CRLF("##"),
 
     /** System default line separators. **/
     SYSTEM(System.getProperty("line.separator"));
 
     /** The line separator representation. */
     private final byte[] lineSeparator;
 
     /**
      * Creates a new {@code LineSeparatorOption} instance.
      * @param sep the line separator, e.g. "\r\n"
      */
     LineSeparatorOption(String sep) {
         lineSeparator = sep.getBytes(StandardCharsets.US_ASCII);
     }
 
     /**
      * Checks that bytes is equal to the byte representation of this line separator.
      * @param bytes a bytes array to check
      * @return if bytes is equal to the byte representation
      *     of this line separator
      */
     public boolean matches(byte... bytes) {
+        final boolean result;
         if (this == LF_CR_CRLF) {
             // this silently assumes CRLF and ANY have the same length
             // and LF and CR are of length 1
-            return CRLF.matches(bytes)
+            result = CRLF.matches(bytes)
                 || LF.matches(Arrays.copyOfRange(bytes, 1, 2))
                 || CR.matches(Arrays.copyOfRange(bytes, 1, 2));
         }
         else {
-            return Arrays.equals(bytes, lineSeparator);
+            result = Arrays.equals(bytes, lineSeparator);
         }
+        return result;
     }
 
     /**
      * @return the length of the file separator in bytes,
      *     e.g. 1 for CR, 2 for CRLF, ...
      */
     public int length() {
         return lineSeparator.length;
     }
 }
