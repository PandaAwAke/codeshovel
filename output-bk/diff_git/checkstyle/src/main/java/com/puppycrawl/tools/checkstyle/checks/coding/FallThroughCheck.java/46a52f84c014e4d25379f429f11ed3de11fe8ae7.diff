diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
index f329f3512..7ff5dc45f 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
@@ -293,102 +293,102 @@ public class FallThroughCheck extends Check {
     /**
      * Checks if a given switch terminated by return, throw or,
      * if allowed break, continue.
      * @param literalSwitchAst loop to check
      * @param useContinue should we consider continue as terminator.
      * @return true if switch is terminated.
      */
     private boolean checkSwitch(final DetailAST literalSwitchAst, boolean useContinue) {
         DetailAST caseGroup = literalSwitchAst.findFirstToken(TokenTypes.CASE_GROUP);
         boolean isTerminated = caseGroup != null;
         while (isTerminated && caseGroup.getType() != TokenTypes.RCURLY) {
             final DetailAST caseBody =
                 caseGroup.findFirstToken(TokenTypes.SLIST);
             isTerminated = caseBody != null && isTerminated(caseBody, false, useContinue);
             caseGroup = caseGroup.getNextSibling();
         }
         return isTerminated;
     }
 
     /**
      * Determines if the fall through case between {@code currentCase} and
      * {@code nextCase} is relieved by a appropriate comment.
      *
      * @param currentCase AST of the case that falls through to the next case.
      * @param nextCase AST of the next case.
      * @return True if a relief comment was found
      */
     private boolean hasFallThroughComment(DetailAST currentCase, DetailAST nextCase) {
         boolean allThroughComment = false;
         final int endLineNo = nextCase.getLineNo();
         final int endColNo = nextCase.getColumnNo();
 
         /*
          * Remember: The lines number returned from the AST is 1-based, but
          * the lines number in this array are 0-based. So you will often
          * see a "lineNo-1" etc.
          */
         final String[] lines = getLines();
 
         /*
          * Handle:
          *    case 1:
          *    /+ FALLTHRU +/ case 2:
          *    ....
          * and
          *    switch(i) {
          *    default:
          *    /+ FALLTHRU +/}
          */
         final String linePart = lines[endLineNo - 1].substring(0, endColNo);
-        if (commentMatch(regExp, linePart, endLineNo)) {
+        if (matchesComment(regExp, linePart, endLineNo)) {
             allThroughComment = true;
         }
         else {
             /*
              * Handle:
              *    case 1:
              *    .....
              *    // FALLTHRU
              *    case 2:
              *    ....
              * and
              *    switch(i) {
              *    default:
              *    // FALLTHRU
              *    }
              */
             final int startLineNo = currentCase.getLineNo();
             for (int i = endLineNo - 2; i > startLineNo - 1; i--) {
                 if (!lines[i].trim().isEmpty()) {
-                    allThroughComment = commentMatch(regExp, lines[i], i + 1);
+                    allThroughComment = matchesComment(regExp, lines[i], i + 1);
                     break;
                 }
             }
         }
         return allThroughComment;
     }
 
     /**
      * Does a regular expression match on the given line and checks that a
      * possible match is within a comment.
      * @param pattern The regular expression pattern to use.
      * @param line The line of test to do the match on.
      * @param lineNo The line number in the file.
      * @return True if a match was found inside a comment.
      */
-    private boolean commentMatch(Pattern pattern, String line, int lineNo
+    private boolean matchesComment(Pattern pattern, String line, int lineNo
     ) {
         final Matcher matcher = pattern.matcher(line);
 
         final boolean hit = matcher.find();
 
         if (hit) {
             final int startMatch = matcher.start();
             // -1 because it returns the char position beyond the match
             final int endMatch = matcher.end() - 1;
             return getFileContents().hasIntersectionWithComment(lineNo,
                     startMatch, lineNo, endMatch);
         }
         return false;
     }
 }
