diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java b/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java
index 924849ff1..008998b71 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java
@@ -194,108 +194,110 @@ public class XMLLogger
                 final FileMessages messages = fileMessages.get(fileName);
                 messages.addError(event);
             }
         }
     }
 
     /**
      * Outputs the given event to the writer.
      * @param event An event to print.
      */
     private void writeFileError(AuditEvent event) {
         writer.print("<error" + " line=\"" + event.getLine() + "\"");
         if (event.getColumn() > 0) {
             writer.print(" column=\"" + event.getColumn() + "\"");
         }
         writer.print(" severity=\""
                 + event.getSeverityLevel().getName()
                 + "\"");
         writer.print(" message=\""
                 + encode(event.getMessage())
                 + "\"");
         writer.print(" source=\"");
         if (event.getModuleId() == null) {
             writer.print(encode(event.getSourceName()));
         }
         else {
             writer.print(encode(event.getModuleId()));
         }
         writer.println("\"/>");
     }
 
     @Override
     public void addException(AuditEvent event, Throwable throwable) {
         final String fileName = event.getFileName();
         if (fileName == null || !fileMessages.containsKey(fileName)) {
             synchronized (writerLock) {
                 writeException(throwable);
             }
         }
         else {
             final FileMessages messages = fileMessages.get(fileName);
             messages.addException(throwable);
         }
     }
 
     /**
      * Writes the exception event to the print writer.
      * @param throwable The
      */
     private void writeException(Throwable throwable) {
+        writer.println("<exception>");
+        writer.println("<![CDATA[");
+
         final StringWriter stringWriter = new StringWriter();
         final PrintWriter printer = new PrintWriter(stringWriter);
-        printer.println("<exception>");
-        printer.println("<![CDATA[");
         throwable.printStackTrace(printer);
-        printer.println("]]>");
-        printer.println("</exception>");
         writer.println(encode(stringWriter.toString()));
+
+        writer.println("]]>");
+        writer.println("</exception>");
     }
 
     /**
      * Escape &lt;, &gt; &amp; &#39; and &quot; as their entities.
      * @param value the value to escape.
      * @return the escaped value if necessary.
      */
     public static String encode(String value) {
         final StringBuilder sb = new StringBuilder(256);
         for (int i = 0; i < value.length(); i++) {
             final char chr = value.charAt(i);
             switch (chr) {
                 case '<':
                     sb.append("&lt;");
                     break;
                 case '>':
                     sb.append("&gt;");
                     break;
                 case '\'':
                     sb.append("&apos;");
                     break;
                 case '\"':
                     sb.append("&quot;");
                     break;
                 case '&':
                     sb.append("&amp;");
                     break;
                 case '\r':
                     break;
                 case '\n':
                     sb.append("&#10;");
                     break;
                 default:
                     if (Character.isISOControl(chr)) {
                         // true escape characters need '&' before but it also requires XML 1.1
                         // until https://github.com/checkstyle/checkstyle/issues/5168
                         sb.append("#x");
                         sb.append(Integer.toHexString(chr));
                         sb.append(';');
                     }
                     else {
                         sb.append(chr);
                     }
                     break;
             }
         }
         return sb.toString();
     }
 
     /**
