diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java
index 03fe77470..226998bfd 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java
@@ -54,162 +54,162 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  * Default value is <code>true</code>.
  * </p>
  * <p>
  * Option <code>ignoreOverriddenMethod</code> - Allows to
  * ignore methods tagged with <code>@Override</code> annotation
  * (that usually mean inherited name). Default value is <code>true</code>.
  * </p>
  * Default configuration
  * <pre>
  * &lt;module name="AbbreviationAsWordInName" /&gt;
  * </pre>
  * <p>
  * To configure to check variables and classes identifiers, do not ignore
  * variables with static modifier
  * and allow no abbreviations (enforce camel case phrase) but allow XML and URL abbreviations.
  * </p>
  * <pre>
  * &lt;module name="AbbreviationAsWordInName"&gt;
  *     &lt;property name="tokens" value="VARIABLE_DEF,CLASS_DEF"/&gt;
  *     &lt;property name="ignoreStatic" value="false"/&gt;
  *     &lt;property name="allowedAbbreviationLength" value="1"/&gt;
  *     &lt;property name="allowedAbbreviations" value="XML,URL"/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * @author Roman Ivanov, Daniil Yaroslvtsev, Baratali Izmailov
  */
 public class AbbreviationAsWordInNameCheck extends Check
 {
 
     /**
      * Warning message key.
      */
     public static final String MSG_KEY = "abbreviation.as.word";
 
     /**
      * The default value of "allowedAbbreviationLength" option.
      */
     private static final int DEFAULT_ALLOWED_ABBREVIATIONS_LENGTH = 3;
 
     /**
      * Variable indicates on the allowed amount of capital letters in
      * abbreviations in the classes, interfaces, variables and methods names.
      */
     private int allowedAbbreviationLength =
             DEFAULT_ALLOWED_ABBREVIATIONS_LENGTH;
 
     /**
      * Set of allowed abbreviation to ignore in check.
      */
-    private Set<String> allowedAbbreviations = new HashSet<String>();
+    private Set<String> allowedAbbreviations = new HashSet<>();
 
     /** Allows to ignore variables with 'final' modifier. */
     private boolean ignoreFinal = true;
 
     /** Allows to ignore variables with 'static' modifier. */
     private boolean ignoreStatic = true;
 
     /** Allows to ignore methods with '@Override' annotation. */
     private boolean ignoreOverriddenMethods = true;
 
     /**
      * Sets ignore option for variables with 'final' modifier.
      * @param ignoreFinal
      *        Defines if ignore variables with 'final' modifier or not.
      */
     public void setIgnoreFinal(boolean ignoreFinal)
     {
         this.ignoreFinal = ignoreFinal;
     }
 
     /**
      * Sets ignore option for variables with 'static' modifier.
      * @param ignoreStatic
      *        Defines if ignore variables with 'static' modifier or not.
      */
     public void setIgnoreStatic(boolean ignoreStatic)
     {
         this.ignoreStatic = ignoreStatic;
     }
 
     /**
      * Sets ignore option for methods with "@Override" annotation.
      * @param ignoreOverriddenMethods
      *        Defines if ignore methods with "@Override" annotation or not.
      */
     public void setIgnoreOverriddenMethods(boolean ignoreOverriddenMethods)
     {
         this.ignoreOverriddenMethods = ignoreOverriddenMethods;
     }
 
     /**
      * Allowed abbreviation length in names.
      * @param allowedAbbreviationLength
      *            amount of allowed capital letters in abbreviation.
      */
     public void setAllowedAbbreviationLength(int allowedAbbreviationLength)
     {
         this.allowedAbbreviationLength = allowedAbbreviationLength;
     }
 
     /**
      * Set a list of abbreviations that must be skipped for checking.
      * Abbreviations should be separated by comma, no spaces is allowed.
      * @param allowedAbbreviations
      *        an string of abbreviations that must be skipped from checking,
      *        each abbreviation separated by comma.
      */
     public void setAllowedAbbreviations(String allowedAbbreviations)
     {
         if (allowedAbbreviations != null) {
-            this.allowedAbbreviations = new HashSet<String>(
+            this.allowedAbbreviations = new HashSet<>(
                     Arrays.asList(allowedAbbreviations.split(",")));
         }
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.CLASS_DEF,
             TokenTypes.INTERFACE_DEF,
             TokenTypes.ENUM_DEF,
             TokenTypes.ANNOTATION_DEF,
             TokenTypes.ANNOTATION_FIELD_DEF,
             TokenTypes.PARAMETER_DEF,
             TokenTypes.VARIABLE_DEF,
             TokenTypes.METHOD_DEF,
         };
     }
 
     @Override
     public int[] getAcceptableTokens()
     {
         return new int[] {
             TokenTypes.CLASS_DEF,
             TokenTypes.INTERFACE_DEF,
             TokenTypes.ENUM_DEF,
             TokenTypes.ANNOTATION_DEF,
             TokenTypes.ANNOTATION_FIELD_DEF,
             TokenTypes.PARAMETER_DEF,
             TokenTypes.VARIABLE_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.ENUM_CONSTANT_DEF,
         };
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
 
         if (!isIgnoreSituation(ast)) {
 
             final DetailAST nameAst = ast.findFirstToken(TokenTypes.IDENT);
             final String typeName = nameAst.getText();
 
             final String abbr = getDisallowedAbbreviation(typeName);
             if (abbr != null) {
                 log(nameAst.getLineNo(), MSG_KEY, allowedAbbreviationLength);
             }
         }
     }
@@ -306,60 +306,60 @@ public class AbbreviationAsWordInNameCheck extends Check
             final char symbol = str.charAt(index);
 
             if (Character.isUpperCase(symbol)) {
                 if (!abbrStarted) {
                     abbrStarted = true;
                     beginIndex = index;
                 }
             }
             else {
                 if (abbrStarted) {
                     abbrStarted = false;
 
                     // -1 as a first capital is usually beginning of next word
                     final int endIndex = index - 1;
                     final int abbrLength = endIndex - beginIndex;
                     if (abbrLength > allowedAbbreviationLength) {
                         result = str.substring(beginIndex, endIndex);
                         if (!allowedAbbreviations.contains(result)) {
                             break;
                         }
                         else {
                             result = null;
                         }
                     }
                     beginIndex = -1;
                 }
             }
         }
         if (abbrStarted) {
             final int endIndex = str.length();
             final int abbrLength = endIndex - beginIndex;
             if (abbrLength > 1 && abbrLength > allowedAbbreviationLength) {
                 result = str.substring(beginIndex, endIndex);
                 if (allowedAbbreviations.contains(result)) {
                     result = null;
                 }
             }
         }
         return result;
     }
 
     /**
      * Gets all the children which are one level below on the current DetailAST
      * parent node.
      * @param node
      *        Current parent node.
      * @return The list of children one level below on the current parent node.
      */
     private static List<DetailAST> getChildren(final DetailAST node)
     {
-        final List<DetailAST> result = new LinkedList<DetailAST>();
+        final List<DetailAST> result = new LinkedList<>();
         DetailAST curNode = node.getFirstChild();
         while (curNode != null) {
             result.add(curNode);
             curNode = curNode.getNextSibling();
         }
         return result;
     }
 
 }
