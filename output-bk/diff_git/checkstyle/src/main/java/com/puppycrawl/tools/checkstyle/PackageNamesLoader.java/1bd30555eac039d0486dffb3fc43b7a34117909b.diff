diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
index ef51cee43..3857764eb 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
@@ -107,101 +107,101 @@ public final class PackageNamesLoader
     private String getPackageName()
     {
         final StringBuilder buf = new StringBuilder();
         for (String subPackage : packageStack) {
             buf.append(subPackage);
             if (!subPackage.endsWith(".")) {
                 buf.append(".");
             }
         }
         return buf.toString();
     }
 
     @Override
     public void endElement(String namespaceURI,
                            String localName,
                            String qName)
     {
         if ("package".equals(qName)) {
 
             packageNames.add(getPackageName());
             packageStack.pop();
         }
     }
 
     /**
      * Returns the set of package names, compiled from all
      * checkstyle_packages.xml files found on the given classloaders
      * classpath.
      * @param classLoader the class loader for loading the
      *          checkstyle_packages.xml files.
      * @return the set of package names.
      * @throws CheckstyleException if an error occurs.
      */
     public static Set<String> getPackageNames(ClassLoader classLoader)
         throws CheckstyleException
     {
 
         Enumeration<URL> packageFiles = null;
         try {
             packageFiles = classLoader.getResources(CHECKSTYLE_PACKAGES);
         }
         catch (IOException e) {
             throw new CheckstyleException(
                     "unable to get package file resources", e);
         }
 
         //create the loader outside the loop to prevent PackageObjectFactory
         //being created anew for each file
         final PackageNamesLoader namesLoader = newPackageNamesLoader();
 
-        while ((null != packageFiles) && packageFiles.hasMoreElements()) {
+        while (null != packageFiles && packageFiles.hasMoreElements()) {
             final URL packageFile = packageFiles.nextElement();
             InputStream stream = null;
 
             try {
                 stream = new BufferedInputStream(packageFile.openStream());
                 final InputSource source = new InputSource(stream);
                 loadPackageNamesSource(source, "default package names",
                     namesLoader);
             }
             catch (IOException e) {
                 throw new CheckstyleException(
                         "unable to open " + packageFile, e);
             }
             finally {
                 Utils.closeQuietly(stream);
             }
         }
         return namesLoader.getPackageNames();
     }
 
     /**
      * Creates a PackageNamesLoader instance.
      * @return the PackageNamesLoader
      * @throws CheckstyleException if the creation failed
      */
     private static PackageNamesLoader newPackageNamesLoader()
         throws CheckstyleException
     {
         try {
             return new PackageNamesLoader();
         }
         catch (final ParserConfigurationException e) {
             throw new CheckstyleException(
                     "unable to create PackageNamesLoader ", e);
         }
         catch (final SAXException e) {
             throw new CheckstyleException(
                     "unable to create PackageNamesLoader - "
                     + e.getMessage(), e);
         }
     }
 
     /**
      * Returns the list of package names in a specified source.
      * @param source the source for the list.
      * @param sourceName the name of the source.
      * @param nameLoader the PackageNamesLoader instance
      * @throws CheckstyleException if an error occurs.
      */
     private static void loadPackageNamesSource(
