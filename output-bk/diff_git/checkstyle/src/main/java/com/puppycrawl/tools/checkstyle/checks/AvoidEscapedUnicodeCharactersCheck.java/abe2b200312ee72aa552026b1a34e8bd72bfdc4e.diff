diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java
index 059a79f79..5726ea509 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java
@@ -155,100 +155,106 @@ public class AvoidEscapedUnicodeCharactersCheck
     private boolean allowByTailComment;
 
     /** Allow if all characters in literal are excaped*/
     private boolean allowIfAllCharactersEscaped;
 
     /** Allow escapes for space literals*/
     private boolean allowNonPrintableEscapes;
 
     /**
      * Set allowIfAllCharactersEscaped.
      * @param allow user's value.
      */
     public final void setAllowEscapesForControlCharacters(boolean allow)
     {
         allowEscapesForControlCharacters = allow;
     }
 
     /**
      * Set allowByTailComment.
      * @param allow user's value.
      */
     public final void setAllowByTailComment(boolean allow)
     {
         allowByTailComment = allow;
     }
 
     /**
      * Set allowIfAllCharactersEscaped.
      * @param allow user's value.
      */
     public final void setAllowIfAllCharactersEscaped(boolean allow)
     {
         allowIfAllCharactersEscaped = allow;
     }
 
     /**
      * Set allowSpaceEscapes.
      * @param allow user's value.
      */
     public final void setAllowNonPrintableEscapes(boolean allow)
     {
         allowNonPrintableEscapes = allow;
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.STRING_LITERAL, TokenTypes.CHAR_LITERAL};
     }
 
+    @Override
+    public int[] getAcceptableTokens()
+    {
+        return new int[] {TokenTypes.STRING_LITERAL, TokenTypes.CHAR_LITERAL};
+    }
+
     @Override
     public void visitToken(DetailAST ast)
     {
 
         final String literal = ast.getText();
 
         if (hasUnicodeChar(literal)) {
             if (!(allowByTailComment && haastrailComment(ast)
                     || isAllCharactersEscaped(literal)
                     || (allowEscapesForControlCharacters
                             && isOnlyUnicodeValidChars(literal, sUnicodeControl))
                     || (allowNonPrintableEscapes
                             && isOnlyUnicodeValidChars(literal, sNonPrintableChars))))
             {
                 log(ast.getLineNo(), "forbid.escaped.unicode.char");
             }
         }
     }
 
     /**
      * Checks if literal has Unicode chars.
      * @param literal String literal.
      * @return true if literal has Unicode chars.
      */
     private boolean hasUnicodeChar(String literal)
     {
         return sUnicodeRegexp.matcher(literal).find();
     }
 
     /**
      * Check if String literal contains Unicode control chars.
      * @param literal String llteral.
      * @param pattern RegExp for valid characters.
      * @return true, if String literal contains Unicode control chars.
      */
     private boolean isOnlyUnicodeValidChars(String literal, Pattern pattern)
     {
         final int unicodeMatchesCounter =
                 countMatches(sUnicodeRegexp, literal);
         final int unicodeValidMatchesCouter =
                 countMatches(pattern, literal);
         return unicodeMatchesCounter - unicodeValidMatchesCouter == 0;
     }
 
     /**
      * Check if trail comment is present after ast token.
      * @param ast current token.
      * @return true if trail comment is present after ast token.
      */
     private boolean haastrailComment(DetailAST ast)
