diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
index 9d25f7e90..ad1f24c66 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
@@ -1,95 +1,95 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2015 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle;
 
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.UnsupportedEncodingException;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Properties;
 
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.CommandLineParser;
 import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.HelpFormatter;
 import org.apache.commons.cli.Options;
 import org.apache.commons.cli.ParseException;
 
 import com.google.common.collect.Lists;
 import com.google.common.io.Closeables;
 import com.puppycrawl.tools.checkstyle.api.AuditListener;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
-import com.puppycrawl.tools.checkstyle.utils.Utils;
+import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 
 /**
  * Wrapper command line program for the Checker.
  * @author the original author or authors.
  *
  **/
 public final class Main {
     /** Exit code returned when excecution finishes with {@link CheckstyleException}*/
     private static final int EXIT_WITH_CHECKSTYLE_EXCEPTION_CODE = -2;
 
     /** Name for the option 'v'. */
     private static final String OPTION_V_NAME = "v";
 
     /** Name for the option 'c'. */
     private static final String OPTION_C_NAME = "c";
 
     /** Name for the option 'f'. */
     private static final String OPTION_F_NAME = "f";
 
     /** Name for the option 'p'. */
     private static final String OPTION_P_NAME = "p";
 
     /** Name for the option 'o'. */
     private static final String OPTION_O_NAME = "o";
 
     /** Name for 'xml' format. */
     private static final String XML_FORMAT_NAME = "xml";
 
     /** Name for 'plain' format. */
     private static final String PLAIN_FORMAT_NAME = "plain";
 
     /** Don't create instance of this class, use {@link #main(String[])} method instead. */
     private Main() {
     }
 
     /**
      * Loops over the files specified checking them for errors. The exit code
      * is the number of errors found in all the files.
      * @param args the command line arguments.
      * @throws UnsupportedEncodingException if there is a problem to use UTF-8
      * @throws FileNotFoundException if there is a problem with files access
      **/
     public static void main(String... args) throws UnsupportedEncodingException,
             FileNotFoundException {
         int errorCounter = 0;
         boolean cliViolations = false;
         // provide proper exit code based on results.
         final int exitWithCliViolation = -1;
         int exitStatus = 0;
 
@@ -296,101 +296,101 @@ public final class Main {
             properties.load(fis);
         }
         catch (final IOException e) {
             throw new CheckstyleException(String.format(
                     "Unable to load properties from file '%s'.", file.getAbsolutePath()), e);
         }
         finally {
             Closeables.closeQuietly(fis);
         }
 
         return properties;
     }
 
     /**
      * Creates the audit listener.
      *
      * @param format format of the audit listener
      * @param outputLocation the location of output
      * @return a fresh new {@code AuditListener}
      * @exception UnsupportedEncodingException if there is problem to use UTf-8
      * @exception FileNotFoundException when provided output location is not found
      */
     private static AuditListener createListener(String format,
                                                 String outputLocation)
             throws UnsupportedEncodingException, FileNotFoundException {
 
         // setup the output stream
         OutputStream out;
         boolean closeOutputStream;
         if (outputLocation != null) {
             out = new FileOutputStream(outputLocation);
             closeOutputStream = true;
         }
         else {
             out = System.out;
             closeOutputStream = false;
         }
 
         // setup a listener
         AuditListener listener;
         if (XML_FORMAT_NAME.equals(format)) {
             listener = new XMLLogger(out, closeOutputStream);
 
         }
         else if (PLAIN_FORMAT_NAME.equals(format)) {
             listener = new DefaultLogger(out, closeOutputStream);
 
         }
         else {
             if (closeOutputStream) {
-                Utils.close(out);
+                CommonUtils.close(out);
             }
             throw new IllegalStateException(String.format(
                     "Invalid output format. Found '%s' but expected '%s' or '%s'.",
                     format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));
         }
 
         return listener;
     }
 
     /**
      * Determines the files to process.
      * @param filesToProcess
      *        arguments that were not processed yet but shall be
      * @return list of files to process
      */
     private static List<File> getFilesToProcess(String... filesToProcess) {
         final List<File> files = Lists.newLinkedList();
         for (String element : filesToProcess) {
             files.addAll(listFiles(new File(element)));
         }
 
         return files;
     }
 
     /**
      * Traverses a specified node looking for files to check. Found files are added to a specified
      * list. Subdirectories are also traversed.
      * @param node
      *        the node to process
      * @return found files
      */
     private static List<File> listFiles(File node) {
         // could be replaced with org.apache.commons.io.FileUtils.list() method
         // if only we add commons-io library
         final List<File> result = Lists.newLinkedList();
 
         if (node.canRead()) {
             if (node.isDirectory()) {
                 final File[] files = node.listFiles();
                 // listFiles() can return null, so we need to check it
                 if (files != null) {
                     for (File element : files) {
                         result.addAll(listFiles(element));
                     }
                 }
             }
             else if (node.isFile()) {
                 result.add(node);
             }
         }
