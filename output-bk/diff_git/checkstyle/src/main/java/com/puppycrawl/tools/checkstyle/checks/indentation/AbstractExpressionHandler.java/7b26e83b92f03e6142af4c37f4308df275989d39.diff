diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
index 85171a30c..d513b14a3 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
@@ -522,86 +522,79 @@ public abstract class AbstractExpressionHandler {
     /**
      * Accessor for the IndentCheck attribute.
      *
      * @return the IndentCheck attribute
      */
     protected final IndentationCheck getIndentCheck() {
         return indentCheck;
     }
 
     /**
      * Accessor for the MainAst attribute.
      *
      * @return the MainAst attribute
      */
     protected final DetailAST getMainAst() {
         return mainAst;
     }
 
     /**
      * Accessor for the Parent attribute.
      *
      * @return the Parent attribute
      */
     protected final AbstractExpressionHandler getParent() {
         return parent;
     }
 
     /**
      * A shortcut for {@code IndentationCheck} property.
      * @return value of basicOffset property of {@code IndentationCheck}
      */
     protected final int getBasicOffset() {
         return indentCheck.getBasicOffset();
     }
 
     /**
      * A shortcut for {@code IndentationCheck} property.
      * @return value of braceAdjustment property
      *         of {@code IndentationCheck}
      */
     protected final int getBraceAdjustment() {
         return indentCheck.getBraceAdjustment();
     }
 
     /**
      * Check the indentation of the right parenthesis.
      * @param rparen parenthesis to check
      * @param lparen left parenthesis associated with aRparen
      */
     protected final void checkRParen(DetailAST lparen, DetailAST rparen) {
-        // no paren - no check :)
-        if (rparen == null) {
-            return;
-        }
-
-        // the rcurly can either be at the correct indentation,
-        // or not first on the line ...
-        final int rparenLevel = expandedTabsColumnNo(rparen);
-        if (getLevel().isAcceptable(rparenLevel) || !startsLine(rparen)) {
-            return;
-        }
-
-        // or has <lparen level> + 1 indentation
-        final int lparenLevel = expandedTabsColumnNo(lparen);
-        if (rparenLevel == lparenLevel + 1) {
-            return;
+        if (rparen != null) {
+            // the rcurly can either be at the correct indentation,
+            // or not first on the line
+            final int rparenLevel = expandedTabsColumnNo(rparen);
+            // or has <lparen level> + 1 indentation
+            final int lparenLevel = expandedTabsColumnNo(lparen);
+
+            if (!getLevel().isAcceptable(rparenLevel) && startsLine(rparen)
+                    && rparenLevel != lparenLevel + 1) {
+                logError(rparen, "rparen", rparenLevel);
+            }
         }
-
-        logError(rparen, "rparen", rparenLevel);
     }
 
     /**
      * Check the indentation of the left parenthesis.
      * @param lparen parenthesis to check
      */
     protected final void checkLParen(final DetailAST lparen) {
         // the rcurly can either be at the correct indentation, or on the
         // same line as the lcurly
         if (lparen == null
             || getLevel().isAcceptable(expandedTabsColumnNo(lparen))
             || !startsLine(lparen)) {
             return;
         }
         logError(lparen, "lparen", expandedTabsColumnNo(lparen));
     }
 }
