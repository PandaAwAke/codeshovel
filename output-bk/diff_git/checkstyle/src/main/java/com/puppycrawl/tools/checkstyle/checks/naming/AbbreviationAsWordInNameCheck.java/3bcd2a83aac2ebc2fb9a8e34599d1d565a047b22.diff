diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java
index 723f50046..7f3cc0c04 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java
@@ -197,103 +197,103 @@ public class AbbreviationAsWordInNameCheck extends AbstractCheck {
             TokenTypes.INTERFACE_DEF,
             TokenTypes.ENUM_DEF,
             TokenTypes.ANNOTATION_DEF,
             TokenTypes.ANNOTATION_FIELD_DEF,
             TokenTypes.PARAMETER_DEF,
             TokenTypes.VARIABLE_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.ENUM_CONSTANT_DEF,
         };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return CommonUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public void visitToken(DetailAST ast) {
 
         if (!isIgnoreSituation(ast)) {
 
             final DetailAST nameAst = ast.findFirstToken(TokenTypes.IDENT);
             final String typeName = nameAst.getText();
 
             final String abbr = getDisallowedAbbreviation(typeName);
             if (abbr != null) {
                 log(nameAst.getLineNo(), MSG_KEY, typeName, allowedAbbreviationLength + 1);
             }
         }
     }
 
     /**
      * Checks if it is an ignore situation.
      * @param ast input DetailAST node.
      * @return true if it is an ignore situation found for given input DetailAST
      *         node.
      * @noinspection SimplifiableIfStatement
      */
     private boolean isIgnoreSituation(DetailAST ast) {
         final DetailAST modifiers = ast.getFirstChild();
 
         final boolean result;
         if (ast.getType() == TokenTypes.VARIABLE_DEF) {
             if ((ignoreFinal || ignoreStatic)
                     && isInterfaceDeclaration(ast)) {
                 // field declarations in interface are static/final
                 result = true;
             }
             else {
                 result = ignoreFinal
-                          && modifiers.branchContains(TokenTypes.FINAL)
+                          && modifiers.findFirstToken(TokenTypes.FINAL) != null
                     || ignoreStatic
-                        && modifiers.branchContains(TokenTypes.LITERAL_STATIC);
+                        && modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) != null;
             }
         }
         else if (ast.getType() == TokenTypes.METHOD_DEF) {
             result = ignoreOverriddenMethods && hasOverrideAnnotation(modifiers);
         }
         else {
             result = CheckUtils.isReceiverParameter(ast);
         }
         return result;
     }
 
     /**
      * Check that variable definition in interface or @interface definition.
      * @param variableDefAst variable definition.
      * @return true if variable definition(variableDefAst) is in interface
      *     or @interface definition.
      */
     private static boolean isInterfaceDeclaration(DetailAST variableDefAst) {
         boolean result = false;
         final DetailAST astBlock = variableDefAst.getParent();
         final DetailAST astParent2 = astBlock.getParent();
 
         if (astParent2.getType() == TokenTypes.INTERFACE_DEF
                 || astParent2.getType() == TokenTypes.ANNOTATION_DEF) {
             result = true;
         }
         return result;
     }
 
     /**
      * Checks that the method has "@Override" annotation.
      * @param methodModifiersAST
      *        A DetailAST nod is related to the given method modifiers
      *        (MODIFIERS type).
      * @return true if method has "@Override" annotation.
      */
     private static boolean hasOverrideAnnotation(DetailAST methodModifiersAST) {
         boolean result = false;
         for (DetailAST child : getChildren(methodModifiersAST)) {
             if (child.getType() == TokenTypes.ANNOTATION) {
                 final DetailAST annotationIdent = child.findFirstToken(TokenTypes.IDENT);
 
                 if (annotationIdent != null && "Override".equals(annotationIdent.getText())) {
                     result = true;
                     break;
                 }
             }
         }
         return result;
     }
