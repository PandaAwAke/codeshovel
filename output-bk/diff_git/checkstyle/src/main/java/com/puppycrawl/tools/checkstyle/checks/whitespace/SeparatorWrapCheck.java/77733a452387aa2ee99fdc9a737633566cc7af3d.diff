diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SeparatorWrapCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SeparatorWrapCheck.java
index 82d0f461d..bcb4f076c 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SeparatorWrapCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SeparatorWrapCheck.java
@@ -42,124 +42,124 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  *  {@link TokenTypes#ELLIPSIS ELLIPSIS},
  *  {@link TokenTypes#AT AT},
  *  {@link TokenTypes#LPAREN LPAREN},
  *  {@link TokenTypes#RPAREN RPAREN},
  *  {@link TokenTypes#ARRAY_DECLARATOR ARRAY_DECLARATOR},
  *  {@link TokenTypes#RBRACK RBRACK},
  * </p>
  * <p>
  * Code example for comma and dot at the new line:
  * </p>
  * <pre>
  * s
  *    .isEmpty();
  * foo(i
  *    ,s);
  * </pre>
  *  <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="SeparatorWrap"/&gt;
  * </pre>
  * <p>
  * Code example for comma and dot at the previous line:
  * </p>
  * <pre>
  * s.
  *    isEmpty();
  * foo(i,
  *    s);
  * </pre>
  * <p> An example of how to configure the check for comma at the
  * new line is:
  * </p>
  * <pre>
  * &lt;module name="SeparatorWrap"&gt;
  *     &lt;property name="tokens" value="COMMA"/&gt;
  *     &lt;property name="option" value="nl"/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * @author maxvetrenko
  */
 public class SeparatorWrapCheck
     extends Check {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
-    public static final String LINE_PREVIOUS = "line.previous";
+    public static final String MSG_LINE_PREVIOUS = "line.previous";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
-    public static final String LINE_NEW = "line.new";
+    public static final String MSG_LINE_NEW = "line.new";
 
     /** The policy to enforce. */
     private WrapOption option = WrapOption.EOL;
 
     /**
      * Set the option to enforce.
      * @param optionStr string to decode option from
      * @throws ConversionException if unable to decode
      */
     public void setOption(String optionStr) {
         try {
             option = WrapOption.valueOf(optionStr.trim().toUpperCase(Locale.ENGLISH));
         }
         catch (IllegalArgumentException iae) {
             throw new ConversionException("unable to parse " + optionStr, iae);
         }
     }
 
     @Override
     public int[] getDefaultTokens() {
         return new int[] {
             TokenTypes.DOT,
             TokenTypes.COMMA,
         };
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.DOT,
             TokenTypes.COMMA,
             TokenTypes.SEMI,
             TokenTypes.ELLIPSIS,
             TokenTypes.AT,
             TokenTypes.LPAREN,
             TokenTypes.RPAREN,
             TokenTypes.ARRAY_DECLARATOR,
             TokenTypes.RBRACK,
         };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return ArrayUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final String text = ast.getText();
         final int colNo = ast.getColumnNo();
         final int lineNo = ast.getLineNo();
         final String currentLine = getLines()[lineNo - 1];
         final String substringAfterToken =
                 currentLine.substring(colNo + text.length()).trim();
         final String substringBeforeToken =
                 currentLine.substring(0, colNo).trim();
 
         if (option == WrapOption.EOL
                 && substringBeforeToken.isEmpty()) {
-            log(lineNo, colNo, LINE_PREVIOUS, text);
+            log(lineNo, colNo, MSG_LINE_PREVIOUS, text);
         }
         else if (option == WrapOption.NL
                  && substringAfterToken.isEmpty()) {
-            log(lineNo, colNo, LINE_NEW, text);
+            log(lineNo, colNo, MSG_LINE_NEW, text);
         }
     }
 }
