diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
index 196d864d1..72467bf8a 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
@@ -197,171 +197,171 @@ public class JavadocTypeCheck
 
     @Override
     public void visitToken(DetailAST ast)
     {
         if (shouldCheck(ast)) {
             final FileContents contents = getFileContents();
             final int lineNo = ast.getLineNo();
             final TextBlock cmt = contents.getJavadocBefore(lineNo);
             if (cmt == null) {
                 log(lineNo, JAVADOC_MISSING);
             }
             else if (ScopeUtils.isOuterMostType(ast)) {
                 // don't check author/version for inner classes
                 final List<JavadocTag> tags = getJavadocTags(cmt);
                 checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),
                          authorFormatPattern, authorFormat);
                 checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),
                          versionFormatPattern, versionFormat);
 
                 final List<String> typeParamNames =
                     CheckUtils.getTypeParameterNames(ast);
 
                 if (!allowMissingParamTags) {
                     //Check type parameters that should exist, do
                     for (final String string : typeParamNames) {
                         checkTypeParamTag(
                             lineNo, tags, string);
                     }
                 }
 
                 checkUnusedTypeParamTags(tags, typeParamNames);
             }
         }
     }
 
     /**
      * Whether we should check this node.
      * @param ast a given node.
      * @return whether we should check a given node.
      */
     private boolean shouldCheck(final DetailAST ast)
     {
         final DetailAST mods = ast.findFirstToken(TokenTypes.MODIFIERS);
         final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);
         final Scope scope =
             ScopeUtils.inInterfaceOrAnnotationBlock(ast)
                 ? Scope.PUBLIC : declaredScope;
         final Scope surroundingScope = ScopeUtils.getSurroundingScope(ast);
 
         return scope.isIn(this.scope)
-            && ((surroundingScope == null) || surroundingScope.isIn(this.scope))
-            && ((excludeScope == null)
+            && (surroundingScope == null || surroundingScope.isIn(this.scope))
+            && (excludeScope == null
                 || !scope.isIn(excludeScope)
-                || ((surroundingScope != null)
-                && !surroundingScope.isIn(excludeScope)));
+                || surroundingScope != null
+                && !surroundingScope.isIn(excludeScope));
     }
 
     /**
      * Gets all standalone tags from a given javadoc.
      * @param cmt the Javadoc comment to process.
      * @return all standalone tags from the given javadoc.
      */
     private List<JavadocTag> getJavadocTags(TextBlock cmt)
     {
         final JavadocTags tags = JavadocUtils.getJavadocTags(cmt,
             JavadocUtils.JavadocTagType.BLOCK);
         if (!allowUnknownTags) {
             for (final InvalidJavadocTag tag : tags.getInvalidTags()) {
                 log(tag.getLine(), tag.getCol(), UNKNOWN_TAG,
                     tag.getName());
             }
         }
         return tags.getValidTags();
     }
 
     /**
      * Verifies that a type definition has a required tag.
      * @param lineNo the line number for the type definition.
      * @param tags tags from the Javadoc comment for the type definition.
      * @param tagName the required tag name.
      * @param formatPattern regexp for the tag value.
      * @param format pattern for the tag value.
      */
     private void checkTag(int lineNo, List<JavadocTag> tags, String tagName,
                           Pattern formatPattern, String format)
     {
         if (formatPattern == null) {
             return;
         }
 
         int tagCount = 0;
         for (int i = tags.size() - 1; i >= 0; i--) {
             final JavadocTag tag = tags.get(i);
             if (tag.getTagName().equals(tagName)) {
                 tagCount++;
                 if (!formatPattern.matcher(tag.getArg1()).find()) {
                     log(lineNo, TAG_FORMAT, "@" + tagName, format);
                 }
             }
         }
         if (tagCount == 0) {
             log(lineNo, MISSING_TAG, "@" + tagName);
         }
     }
 
     /**
      * Verifies that a type definition has the specified param tag for
      * the specified type parameter name.
      * @param lineNo the line number for the type definition.
      * @param tags tags from the Javadoc comment for the type definition.
      * @param typeParamName the name of the type parameter
      */
     private void checkTypeParamTag(final int lineNo,
             final List<JavadocTag> tags, final String typeParamName)
     {
         boolean found = false;
         for (int i = tags.size() - 1; i >= 0; i--) {
             final JavadocTag tag = tags.get(i);
             if (tag.isParamTag()
-                && (tag.getArg1() != null)
-                && (tag.getArg1().indexOf("<" + typeParamName + ">") == 0))
+                && tag.getArg1() != null
+                && tag.getArg1().indexOf("<" + typeParamName + ">") == 0)
             {
                 found = true;
             }
         }
         if (!found) {
             log(lineNo, MISSING_TAG,
                 JavadocTagInfo.PARAM.getText() + " <" + typeParamName + ">");
         }
     }
 
     /**
      * Checks for unused param tags for type parameters.
      * @param tags tags from the Javadoc comment for the type definition.
      * @param typeParamNames names of type parameters
      */
     private void checkUnusedTypeParamTags(
         final List<JavadocTag> tags,
         final List<String> typeParamNames)
     {
         final Pattern pattern = Utils.getPattern("\\s*<([^>]+)>.*");
         for (int i = tags.size() - 1; i >= 0; i--) {
             final JavadocTag tag = tags.get(i);
             if (tag.isParamTag()) {
 
                 if (tag.getArg1() != null) {
 
                     final Matcher matcher = pattern.matcher(tag.getArg1());
                     String typeParamName = null;
 
                     if (matcher.matches()) {
                         typeParamName = matcher.group(1).trim();
                         if (!typeParamNames.contains(typeParamName)) {
                             log(tag.getLineNo(), tag.getColumnNo(),
                                 UNUSED_TAG,
                                 JavadocTagInfo.PARAM.getText(),
                                 "<" + typeParamName + ">");
                         }
                     }
                     else {
                         log(tag.getLineNo(), tag.getColumnNo(),
                             UNUSED_TAG_GENERAL);
                     }
                 }
                 else {
                     log(tag.getLineNo(), tag.getColumnNo(),
                         UNUSED_TAG_GENERAL);
                 }
             }
         }
     }
