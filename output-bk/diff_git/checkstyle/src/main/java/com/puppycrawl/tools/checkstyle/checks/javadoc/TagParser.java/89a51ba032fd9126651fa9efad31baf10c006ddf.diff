diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java
index 05d5e1450..24b650a18 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java
@@ -1,316 +1,316 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2014  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.javadoc;
 
 import com.google.common.collect.Lists;
 import java.util.List;
 
 /**
  * <p>
  * Helper class used to parse HTML tags or generic type identifiers
  * from a single line of text. Just the beginning of the HTML tag
  * is located.  No attempt is made to parse out the complete tag,
  * particularly since some of the tag parameters could be located
  * on the following line of text.  The <code>hasNextTag</code> and
  * <code>nextTag</code> methods are used to iterate through the HTML
  * tags or generic type identifiers that were found on the line of text.
  * </p>
  *
  * <p>
  * This class isn't really specific to HTML tags. Currently the only HTML
  * tag that this class looks specifically for is the HTML comment tag.
  * This class helps figure out if a tag exists and if it is well-formed.
  * It does not know whether it is valid HTML.  This class is also used for
  * generics types which looks like opening HTML tags ex: {@code <T>, <E>, <V>,
  * <MY_FOO_TYPE>}, etc. According to this class they are valid tags.
  * </p>
  *
  * @author Chris Stillwell
  */
 class TagParser
 {
     /** List of HtmlTags found on the input line of text. */
-    private final List<HtmlTag> mTags = Lists.newLinkedList();
+    private final List<HtmlTag> tags = Lists.newLinkedList();
 
     /**
      * Constructs a TagParser and finds the first tag if any.
-     * @param aText the line of text to parse.
-     * @param aLineNo the source line number.
+     * @param text the line of text to parse.
+     * @param lineNo the source line number.
      */
-    public TagParser(String[] aText, int aLineNo)
+    public TagParser(String[] text, int lineNo)
     {
-        parseTags(aText, aLineNo);
+        parseTags(text, lineNo);
     }
 
     /**
      * Returns the next available HtmlTag.
      * @return a HtmlTag or <code>null</code> if none available.
      * @throws IndexOutOfBoundsException if there are no HtmlTags
      *         left to return.
      */
     public HtmlTag nextTag()
     {
-        return mTags.remove(0);
+        return tags.remove(0);
     }
 
     /**
      * Indicates if there are any more HtmlTag to retrieve.
      * @return <code>true</code> if there are more tags.
      */
     public boolean hasNextTag()
     {
-        return !mTags.isEmpty();
+        return !tags.isEmpty();
     }
 
     /**
      * Performs lazy initialization on the internal tags List
      * and adds the tag.
-     * @param aTag the HtmlTag to add.
+     * @param tag the HtmlTag to add.
      */
-    private void add(HtmlTag aTag)
+    private void add(HtmlTag tag)
     {
-        mTags.add(aTag);
+        tags.add(tag);
     }
 
     /**
      * Parses the text line for any HTML tags and adds them to the internal
      * List of tags.
-     * @param aText the source line to parse.
-     * @param aLineNo the source line number.
+     * @param text the source line to parse.
+     * @param lineNo the source line number.
      */
-    private void parseTags(String[] aText, int aLineNo)
+    private void parseTags(String[] text, int lineNo)
     {
-        final int nLines = aText.length;
+        final int nLines = text.length;
         Point position = new Point(0, 0);
 
-        position = findChar(aText, '<', position);
+        position = findChar(text, '<', position);
         while (position.getLineNo() < nLines) {
             // if this is html comment then skip it
-            if (isCommentTag(aText, position)) {
-                position = skipHtmlComment(aText, position);
+            if (isCommentTag(text, position)) {
+                position = skipHtmlComment(text, position);
             }
-            else if (!isTag(aText, position)) {
-                position = getNextCharPos(aText, position);
+            else if (!isTag(text, position)) {
+                position = getNextCharPos(text, position);
             }
             else {
                 // find end of tag
-                final Point endTag = findChar(aText, '>', position);
+                final Point endTag = findChar(text, '>', position);
                 final boolean incompleteTag = (endTag.getLineNo() >= nLines);
                 // get tag id (one word)
                 final String tagId =
-                    (incompleteTag ? "" : getTagId(aText, position));
+                    (incompleteTag ? "" : getTagId(text, position));
                 // is this closed tag
                 final boolean closedTag =
                     ((endTag.getLineNo() < nLines) && (endTag.getColumnNo() > 0)
-                     && (aText[endTag.getLineNo()]
+                     && (text[endTag.getLineNo()]
                      .charAt(endTag.getColumnNo() - 1) == '/'));
                 // add new tag
                 add(new HtmlTag(tagId,
-                                position.getLineNo() + aLineNo,
+                                position.getLineNo() + lineNo,
                                 position.getColumnNo(),
                                 closedTag,
                                 incompleteTag,
-                                aText[position.getLineNo()]));
+                                text[position.getLineNo()]));
                 position = endTag;
             }
-            position = findChar(aText, '<', position);
+            position = findChar(text, '<', position);
         }
     }
 
     /**
      * Checks if the given position is start one for HTML tag.
-     * @param aText text of javadoc comments.
-     * @param aPos position to check.
+     * @param text text of javadoc comments.
+     * @param pos position to check.
      * @return <code>true</code> some HTML tag starts from given position.
      */
-    private boolean isTag(String[] aText, Point aPos)
+    private boolean isTag(String[] javadocText, Point pos)
     {
-        final int column = aPos.getColumnNo() + 1;
-        final String text = aText[aPos.getLineNo()];
+        final int column = pos.getColumnNo() + 1;
+        final String text = javadocText[pos.getLineNo()];
 
-        //Character.isJavaIdentifier... may not be a valid HTML
+        //Character.isJavidentifier... may not be a valid HTML
         //identifier but is valid for generics
         return ((column < text.length())
                 && (Character.isJavaIdentifierStart(text.charAt(column))
                     || Character.isJavaIdentifierPart(text.charAt(column))
                     || text.charAt(column) == '/')
                 || (column >= text.length()));
     }
 
     /**
      * Parse tag id.
-     * @param aText text of javadoc comments.
-     * @param aTagStart start position of the tag
+     * @param text text of javadoc comments.
+     * @param tagStart start position of the tag
      * @return id for given tag
      */
-    private String getTagId(String[] aText, Point aTagStart)
+    private String getTagId(String[] javadocText, Point tagStart)
     {
-        int column = aTagStart.getColumnNo() + 1;
-        String text = aText[aTagStart.getLineNo()];
+        int column = tagStart.getColumnNo() + 1;
+        String text = javadocText[tagStart.getLineNo()];
         if (column >= text.length()) {
             return "";
         }
 
         if (text.charAt(column) == '/') {
             column++;
         }
 
         text = text.substring(column).trim();
         column = 0;
 
-        //Character.isJavaIdentifier... may not be a valid HTML
+        //Character.isJavidentifier... may not be a valid HTML
         //identifier but is valid for generics
         while (column < text.length()
             && (Character.isJavaIdentifierStart(text.charAt(column))
                 || Character.isJavaIdentifierPart(text.charAt(column))))
         {
             column++;
         }
 
         return text.substring(0, column);
     }
 
     /**
      * If this is a HTML-comments.
-     * @param aText text of javadoc comments
-     * @param aPos position to check
+     * @param text text of javadoc comments
+     * @param pos position to check
      * @return <code>true</code> if HTML-comments
      *         starts form given position.
      */
-    private boolean isCommentTag(String[] aText, Point aPos)
+    private boolean isCommentTag(String[] text, Point pos)
     {
-        return aText[aPos.getLineNo()].startsWith("<!--", aPos.getColumnNo());
+        return text[pos.getLineNo()].startsWith("<!--", pos.getColumnNo());
     }
 
     /**
      * Skips HTML comments.
-     * @param aText text of javadoc comments.
-     * @param aFrom start position of HTML-comments
+     * @param text text of javadoc comments.
+     * @param from start position of HTML-comments
      * @return position after HTML-comments
      */
-    private Point skipHtmlComment(String[] aText, Point aFrom)
+    private Point skipHtmlComment(String[] text, Point from)
     {
-        Point to = aFrom;
-        to = findChar(aText, '>', to);
-        while ((to.getLineNo() < aText.length)
-               && !aText[to.getLineNo()]
+        Point to = from;
+        to = findChar(text, '>', to);
+        while ((to.getLineNo() < text.length)
+               && !text[to.getLineNo()]
                .substring(0, to.getColumnNo() + 1).endsWith("-->"))
         {
-            to = findChar(aText, '>', getNextCharPos(aText, to));
+            to = findChar(text, '>', getNextCharPos(text, to));
         }
         return to;
     }
 
     /**
      * Finds next occurrence of given character.
-     * @param aText text to search
-     * @param aChar character to search
-     * @param aFrom position to start search
+     * @param text text to search
+     * @param char character to search
+     * @param from position to start search
      * @return position of next occurrence of given character
      */
-    private Point findChar(String[] aText, char aChar, Point aFrom)
+    private Point findChar(String[] text, char character, Point from)
     {
-        Point curr = new Point(aFrom.getLineNo(), aFrom.getColumnNo());
-        while ((curr.getLineNo() < aText.length)
-               && (aText[curr.getLineNo()].charAt(curr.getColumnNo()) != aChar))
+        Point curr = new Point(from.getLineNo(), from.getColumnNo());
+        while ((curr.getLineNo() < text.length)
+               && (text[curr.getLineNo()].charAt(curr.getColumnNo()) != character))
         {
-            curr = getNextCharPos(aText, curr);
+            curr = getNextCharPos(text, curr);
         }
 
         return curr;
     }
 
     /**
      * Returns position of next comment character, skips
      * whitespaces and asterisks.
-     * @param aText to search.
-     * @param aFrom location to search from
+     * @param text to search.
+     * @param from location to search from
      * @return location of the next character.
      */
-    private Point getNextCharPos(String[] aText, Point aFrom)
+    private Point getNextCharPos(String[] text, Point from)
     {
-        int line = aFrom.getLineNo();
-        int column = aFrom.getColumnNo() + 1;
-        while ((line < aText.length) && (column >= aText[line].length())) {
+        int line = from.getLineNo();
+        int column = from.getColumnNo() + 1;
+        while ((line < text.length) && (column >= text[line].length())) {
             // go to the next line
             line++;
             column = 0;
-            if (line < aText.length) {
+            if (line < text.length) {
                 //skip beginning spaces and stars
-                final String currentLine = aText[line];
+                final String currentLine = text[line];
                 while ((column < currentLine.length())
                        && (Character.isWhitespace(currentLine.charAt(column))
                            || (currentLine.charAt(column) == '*')))
                 {
                     column++;
                     if ((column < currentLine.length())
                         && (currentLine.charAt(column - 1) == '*')
                         && (currentLine.charAt(column) == '/'))
                     {
                         // this is end of comment
                         column = currentLine.length();
                     }
                 }
             }
         }
 
         return new Point(line, column);
     }
 
     /**
      * Represents current position in the text.
      * @author o_sukholsky
      */
     private static final class Point
     {
         /** line number. */
-        private final int mLine;
+        private final int line;
         /** column number.*/
-        private final int mColumn;
+        private final int column;
 
         /**
          * Creates new <code>Point</code> instance.
-         * @param aLineNo line number
-         * @param aColumnNo column number
+         * @param lineNo line number
+         * @param columnNo column number
          */
-        public Point(int aLineNo, int aColumnNo)
+        public Point(int lineNo, int columnNo)
         {
-            mLine = aLineNo;
-            mColumn = aColumnNo;
+            line = lineNo;
+            column = columnNo;
         }
 
         /**
          * Getter for line number.
          * @return line number of the position.
          */
         public int getLineNo()
         {
-            return mLine;
+            return line;
         }
 
         /**
          * Getter for column number.
          * @return column number of the position.
          */
         public int getColumnNo()
         {
-            return mColumn;
+            return column;
         }
     }
 }
