diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java
index 6c0f9d655..af26ab26c 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java
@@ -224,101 +224,101 @@ public class AnnotationLocationCheck extends Check {
                         MSG_KEY_ANNOTATION_LOCATION_ALONE, getAnnotationName(annotation));
             }
             else if (annotation.getColumnNo() != correctLevel && !hasNodeBefore(annotation)) {
                 log(annotation.getLineNo(), MSG_KEY_ANNOTATION_LOCATION,
                     getAnnotationName(annotation), annotation.getColumnNo(), correctLevel);
             }
             annotation = annotation.getNextSibling();
         }
     }
 
     /**
      * Some javadoc.
      * @param annotation Some javadoc.
      * @param hasParams Some javadoc.
      * @return Some javadoc.
      */
     private boolean isCorrectLocation(DetailAST annotation, boolean hasParams) {
         final boolean allowingCondition = hasParams ? allowSamelineParameterizedAnnotation
             : allowSamelineSingleParameterlessAnnotation;
         return allowingCondition && !hasNodeBefore(annotation)
             || !allowingCondition && !hasNodeBeside(annotation)
             || allowSamelineMultipleAnnotations;
     }
 
     /**
      * Some javadoc.
      * @param annotation Some javadoc.
      * @return Some javadoc.
      */
     private static String getAnnotationName(DetailAST annotation) {
         DetailAST idenNode = annotation.findFirstToken(TokenTypes.IDENT);
         if (idenNode == null) {
             idenNode = annotation.findFirstToken(TokenTypes.DOT).findFirstToken(TokenTypes.IDENT);
         }
         return idenNode.getText();
     }
 
     /**
      * Some javadoc.
      * @param annotation Some javadoc.
      * @return Some javadoc.
      */
     private static boolean hasNodeAfter(DetailAST annotation) {
         final int annotationLineNo = annotation.getLineNo();
         DetailAST nextNode = annotation.getNextSibling();
 
         if (nextNode == null) {
             nextNode = annotation.getParent().getNextSibling();
         }
 
-        return nextNode != null && annotationLineNo == nextNode.getLineNo();
+        return annotationLineNo == nextNode.getLineNo();
     }
 
     /**
      * Some javadoc.
      * @param annotation Some javadoc.
      * @return Some javadoc.
      */
     private static boolean hasNodeBefore(DetailAST annotation) {
         final int annotationLineNo = annotation.getLineNo();
         final DetailAST previousNode = annotation.getPreviousSibling();
 
         return previousNode != null && annotationLineNo == previousNode.getLineNo();
     }
 
     /**
      * Some javadoc.
      * @param annotation Some javadoc.
      * @return Some javadoc.
      */
     private static boolean hasNodeBeside(DetailAST annotation) {
         return hasNodeBefore(annotation) || hasNodeAfter(annotation);
     }
 
     /**
      * Some javadoc.
      * @param modifierNode Some javadoc.
      * @return Some javadoc.
      */
     private static int getAnnotationLevel(DetailAST modifierNode) {
         return modifierNode.getParent().getColumnNo();
     }
 
     /**
      * Some javadoc.
      * @param annotation Some javadoc.
      * @return Some javadoc.
      */
     private static boolean isParameterized(DetailAST annotation) {
         return annotation.findFirstToken(TokenTypes.EXPR) != null;
     }
 
     /**
      * Some javadoc.
      * @param modifierNode Some javadoc.
      * @return Some javadoc.
      */
     private static boolean hasAnnotations(DetailAST modifierNode) {
         return modifierNode.findFirstToken(TokenTypes.ANNOTATION) != null;
     }
 }
