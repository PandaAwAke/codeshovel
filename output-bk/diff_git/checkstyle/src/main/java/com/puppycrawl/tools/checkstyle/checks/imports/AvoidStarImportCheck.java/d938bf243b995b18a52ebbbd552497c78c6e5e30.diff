diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java
index 582685a34..08e400c0e 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java
@@ -107,64 +107,57 @@ public class AvoidStarImportCheck
     /**
      * Sets the list of packages or classes to be exempt from the check.
      * The excludes can contain a .* or not.
      * @param excludesParam a list of package names/fully-qualifies class names
      * where star imports are ok
      */
     public void setExcludes(String... excludesParam) {
         excludes.clear();
         for (final String exclude : excludesParam) {
             excludes.add(exclude.endsWith(".*") ? exclude : exclude + ".*");
         }
     }
 
     /**
      * Sets whether or not to allow all non-static class imports.
      * @param allow true to allow false to disallow
      */
     public void setAllowClassImports(boolean allow) {
         allowClassImports = allow;
     }
 
     /**
      * Sets whether or not to allow all static member imports.
      * @param allow true to allow false to disallow
      */
     public void setAllowStaticMemberImports(boolean allow) {
         allowStaticMemberImports = allow;
     }
 
     @Override
     public void visitToken(final DetailAST ast) {
         if (!allowClassImports && TokenTypes.IMPORT == ast.getType()) {
             final DetailAST startingDot = ast.getFirstChild();
             logsStarredImportViolation(startingDot);
         }
         else if (!allowStaticMemberImports
             && TokenTypes.STATIC_IMPORT == ast.getType()) {
             // must navigate past the static keyword
             final DetailAST startingDot = ast.getFirstChild().getNextSibling();
             logsStarredImportViolation(startingDot);
         }
     }
 
     /**
      * Gets the full import identifier.  If the import is a starred import and
      * it's not excluded then a violation is logged.
      * @param startingDot the starting dot for the import statement
      */
     private void logsStarredImportViolation(DetailAST startingDot) {
         final FullIdent name = FullIdent.createFullIdent(startingDot);
-        if (isStaredImport(name) && !excludes.contains(name.getText())) {
-            log(startingDot.getLineNo(), MSG_KEY, name.getText());
+        final String importText = name.getText();
+        if (importText.endsWith(".*") && !excludes.contains(importText)) {
+            log(startingDot.getLineNo(), MSG_KEY, importText);
         }
     }
 
-    /**
-     * Checks is an import is a stared import.
-     * @param importIdent the full import identifier
-     * @return true if a start import false if not
-     */
-    private boolean isStaredImport(FullIdent importIdent) {
-        return null != importIdent && importIdent.getText().endsWith(".*");
-    }
 }
