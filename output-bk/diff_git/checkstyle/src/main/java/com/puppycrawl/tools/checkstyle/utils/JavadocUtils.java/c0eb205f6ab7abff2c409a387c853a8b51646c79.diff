diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtils.java
index 1f4ac1478..3129cd98d 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtils.java
@@ -216,101 +216,101 @@ public final class JavadocUtils {
             commentContents = text;
             commentOffset = 0;
         }
         final Matcher tagMatcher = INLINE_TAG_PATTERN.matcher(commentContents);
         while (tagMatcher.find()) {
             final String tagName = tagMatcher.group(1);
             final int line = comment.getStartLineNo() + lineNumber;
             int col = commentOffset + tagMatcher.start(1) - 1;
             if (lineNumber == 0) {
                 col += comment.getStartColNo();
             }
             if (JavadocTagInfo.isValidName(tagName)) {
                 final String tagValue = tagMatcher.group(2).trim();
                 validTags.add(new JavadocTag(line, col, tagName,
                         tagValue));
             }
             else {
                 invalidTags.add(new InvalidJavadocTag(line, col,
                         tagName));
             }
         }
     }
 
     /**
      * Checks that commentContent starts with '*' javadoc comment identifier.
      * @param commentContent
      *        content of block comment
      * @return true if commentContent starts with '*' javadoc comment
      *         identifier.
      */
     public static boolean isJavadocComment(String commentContent) {
         boolean result = false;
 
         if (!commentContent.isEmpty()) {
             final char docCommentIdentificator = commentContent.charAt(0);
             result = docCommentIdentificator == '*';
         }
 
         return result;
     }
 
     /**
      * Checks block comment content starts with '*' javadoc comment identifier.
      * @param blockCommentBegin
      *        block comment AST
      * @return true if block comment content starts with '*' javadoc comment
      *         identifier.
      */
     public static boolean isJavadocComment(DetailAST blockCommentBegin) {
         final String commentContent = getBlockCommentContent(blockCommentBegin);
-        return isJavadocComment(commentContent);
+        return isJavadocComment(commentContent) && isCorrectJavadocPosition(blockCommentBegin);
     }
 
     /**
      * Gets content of block comment.
      * @param blockCommentBegin
      *        block comment AST.
      * @return content of block comment.
      */
     private static String getBlockCommentContent(DetailAST blockCommentBegin) {
         final DetailAST commentContent = blockCommentBegin.getFirstChild();
         return commentContent.getText();
     }
 
     /**
      * Get content of Javadoc comment.
      * @param javadocCommentBegin
      *        Javadoc comment AST
      * @return content of Javadoc comment.
      */
     public static String getJavadocCommentContent(DetailAST javadocCommentBegin) {
         final DetailAST commentContent = javadocCommentBegin.getFirstChild();
         return commentContent.getText().substring(1);
     }
 
     /**
      * Returns the first child token that has a specified type.
      * @param detailNode
      *        Javadoc AST node
      * @param type
      *        the token type to match
      * @return the matching token, or null if no match
      */
     public static DetailNode findFirstToken(DetailNode detailNode, int type) {
         DetailNode returnValue = null;
         DetailNode node = getFirstChild(detailNode);
         while (node != null) {
             if (node.getType() == type) {
                 returnValue = node;
                 break;
             }
             node = getNextSibling(node);
         }
         return returnValue;
     }
 
     /**
      * Gets first child node of specified node.
      *
      * @param node DetailNode
      * @return first child
@@ -421,51 +421,74 @@ public final class JavadocUtils {
             name = TOKEN_VALUE_TO_NAME[id];
             if (name == null) {
                 throw new IllegalArgumentException(UNKNOWN_JAVADOC_TOKEN_ID_EXCEPTION_MESSAGE + id);
             }
         }
         return name;
     }
 
     /**
      * Returns the ID of a token for a given name.
      * @param name
      *        the name of the token ID to get
      * @return a token ID
      */
     public static int getTokenId(String name) {
         final Integer id = TOKEN_NAME_TO_VALUE.get(name);
         if (id == null) {
             throw new IllegalArgumentException("Unknown javadoc token name. Given name " + name);
         }
         return id;
     }
 
     /**
      * Gets tag name from javadocTagSection.
      *
      * @param javadocTagSection to get tag name from.
      * @return name, of the javadocTagSection's tag.
      */
     public static String getTagName(DetailNode javadocTagSection) {
         final String javadocTagName;
         if (javadocTagSection.getType() == JavadocTokenTypes.JAVADOC_INLINE_TAG) {
             javadocTagName = getNextSibling(
                     getFirstChild(javadocTagSection)).getText();
         }
         else {
             javadocTagName = getFirstChild(javadocTagSection).getText();
         }
         return javadocTagName;
     }
 
     /**
      * Replace all control chars with escaped symbols.
      * @param text the String to process.
      * @return the processed String with all control chars escaped.
      */
     public static String escapeAllControlChars(String text) {
         final String textWithoutNewlines = NEWLINE.matcher(text).replaceAll("\\\\n");
         final String textWithoutReturns = RETURN.matcher(textWithoutNewlines).replaceAll("\\\\r");
         return TAB.matcher(textWithoutReturns).replaceAll("\\\\t");
     }
+
+    /**
+     * Checks Javadoc comment it's in right place.
+     * From Javadoc util documentation:
+     * "Placement of comments - Documentation comments are recognized only when placed
+     * immediately before class, interface, constructor, method, or field
+     * declarations -- see the class example, method example, and field example.
+     * Documentation comments placed in the body of a method are ignored. Only one
+     * documentation comment per declaration statement is recognized by the Javadoc tool."
+     *
+     * @param blockComment Block comment AST
+     * @return true if Javadoc is in right place
+     */
+    public static boolean isCorrectJavadocPosition(DetailAST blockComment) {
+        return BlockCommentPosition.isOnClass(blockComment)
+                || BlockCommentPosition.isOnInterface(blockComment)
+                || BlockCommentPosition.isOnEnum(blockComment)
+                || BlockCommentPosition.isOnMethod(blockComment)
+                || BlockCommentPosition.isOnField(blockComment)
+                || BlockCommentPosition.isOnConstructor(blockComment)
+                || BlockCommentPosition.isOnEnumConstant(blockComment)
+                || BlockCommentPosition.isOnAnnotationDef(blockComment);
+    }
 }
