diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheck.java
index ee59461e7..ec9e4ff8f 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheck.java
@@ -70,101 +70,101 @@ public class SingleLineJavadocCheck extends AbstractJavadocCheck {
      */
     private List<String> ignoredTags = new ArrayList<>();
 
     /** Whether inline tags must be ignored **/
     private boolean ignoreInlineTags = true;
 
     /**
      * Sets a list of tags to be ignored by check.
      *
      * @param tags to be ignored by check.
      */
     public void setIgnoredTags(String tags) {
         final List<String> tagList = new ArrayList<>();
         final String[] sTags = tags.split(",");
         for (String sTag : sTags) {
             tagList.add(sTag.trim());
         }
         ignoredTags = tagList;
     }
 
     /**
      * Sets whether inline tags must be ignored.
      *
      * @param ignoreInlineTags whether inline tags must be ignored.
      */
     public void setIgnoreInlineTags(boolean ignoreInlineTags) {
         this.ignoreInlineTags = ignoreInlineTags;
     }
 
     @Override
     public int[] getDefaultJavadocTokens() {
         return new int[] {
             JavadocTokenTypes.JAVADOC,
         };
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.BLOCK_COMMENT_BEGIN };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public void visitJavadocToken(DetailNode ast) {
         if (isSingleLineJavadoc(getBlockCommentAst())
                 && (hasJavadocTags(ast) || !ignoreInlineTags && hasJavadocInlineTags(ast))) {
-            log(ast.getLineNumber(), "singleline.javadoc");
+            log(ast.getLineNumber(), MSG_KEY);
         }
     }
 
     /**
      * Checks if comment is single line comment.
      *
      * @param blockCommentStart the AST tree in which a block comment starts
      * @return true, if comment is single line comment.
      */
     private static boolean isSingleLineJavadoc(DetailAST blockCommentStart) {
         final DetailAST blockCommentEnd = blockCommentStart.getLastChild();
         return blockCommentStart.getLineNo() == blockCommentEnd.getLineNo();
     }
 
     /**
      * Checks if comment has javadoc tags which are not ignored. Also works
      * on custom tags. As block tags can be interpreted only at the beginning of a line,
      * only the first instance is checked.
      *
      * @param javadocRoot javadoc root node.
      * @return true, if comment has javadoc tags which are not ignored.
      * @see <a href=
      * http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#blockandinlinetags>
      * Block and inline tags</a>
      */
     private boolean hasJavadocTags(DetailNode javadocRoot) {
         final DetailNode javadocTagSection =
                 JavadocUtils.findFirstToken(javadocRoot, JavadocTokenTypes.JAVADOC_TAG);
         return javadocTagSection != null && !isTagIgnored(javadocTagSection);
     }
 
     /**
      * Checks if comment has in-line tags which are not ignored.
      *
      * @param javadocRoot javadoc root node.
      * @return true, if comment has in-line tags which are not ignored.
      * @see <a href=
      * http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#javadoctags>
      * JavadocTags</a>
      */
     private boolean hasJavadocInlineTags(DetailNode javadocRoot) {
         DetailNode javadocTagSection =
                 JavadocUtils.findFirstToken(javadocRoot, JavadocTokenTypes.JAVADOC_INLINE_TAG);
         boolean foundTag = false;
         while (javadocTagSection != null) {
             if (!isTagIgnored(javadocTagSection)) {
                 foundTag = true;
                 break;
             }
             javadocTagSection = JavadocUtils.getNextSibling(
