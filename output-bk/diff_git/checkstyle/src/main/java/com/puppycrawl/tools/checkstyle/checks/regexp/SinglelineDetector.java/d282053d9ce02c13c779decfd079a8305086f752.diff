diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java
index 30d24ccc9..a91b7c8f4 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java
@@ -29,90 +29,90 @@ import java.util.regex.Matcher;
 class SinglelineDetector {
     /** The detection options to use. */
     private final DetectorOptions options;
     /** Tracks the number of matches. */
     private int currentMatches;
 
     /**
      * Creates an instance.
      * @param options the options to use.
      */
     SinglelineDetector(DetectorOptions options) {
         this.options = options;
     }
 
     /**
      * Processes a set of lines looking for matches.
      * @param lines the lines to process.
      */
     public void processLines(List<String> lines) {
         resetState();
         int lineNo = 0;
         for (String line : lines) {
             lineNo++;
             checkLine(lineNo, line, options.getPattern().matcher(line), 0);
         }
         finish();
     }
 
     /** Perform processing at the end of a set of lines. */
     private void finish() {
         if (currentMatches < options.getMinimum()) {
             if (options.getMessage().isEmpty()) {
                 options.getReporter().log(0, "regexp.minimum",
                         options.getMinimum(), options.getFormat());
             }
             else {
                 options.getReporter().log(0, options.getMessage());
             }
         }
     }
 
     /**
      * Reset the state of the detector.
      */
     private void resetState() {
         currentMatches = 0;
     }
 
     /**
      * Check a line for matches.
-     * @param lineno the line number of the line to check
+     * @param lineNo the line number of the line to check
      * @param line the line to check
      * @param matcher the matcher to use
      * @param startPosition the position to start searching from.
      */
-    private void checkLine(int lineno, String line, Matcher matcher,
+    private void checkLine(int lineNo, String line, Matcher matcher,
             int startPosition) {
         final boolean foundMatch = matcher.find(startPosition);
         if (!foundMatch) {
             return;
         }
 
         // match is found, check for intersection with comment
         final int startCol = matcher.start(0);
         final int endCol = matcher.end(0);
         // Note that Matcher.end(int) returns the offset AFTER the
         // last matched character, but shouldSuppress()
         // needs column number of the last character.
         // So we need to use (endCol - 1) here.
         if (options.getSuppressor()
-                .shouldSuppress(lineno, startCol, lineno, endCol - 1)) {
+                .shouldSuppress(lineNo, startCol, lineNo, endCol - 1)) {
             if (endCol < line.length()) {
                 // check if the expression is on the rest of the line
-                checkLine(lineno, line, matcher, endCol);
+                checkLine(lineNo, line, matcher, endCol);
             }
             return;
         }
 
         currentMatches++;
         if (currentMatches > options.getMaximum()) {
             if (options.getMessage().isEmpty()) {
-                options.getReporter().log(lineno, "regexp.exceeded",
+                options.getReporter().log(lineNo, "regexp.exceeded",
                         matcher.pattern().toString());
             }
             else {
-                options.getReporter().log(lineno, options.getMessage());
+                options.getReporter().log(lineNo, options.getMessage());
             }
         }
     }
 }
