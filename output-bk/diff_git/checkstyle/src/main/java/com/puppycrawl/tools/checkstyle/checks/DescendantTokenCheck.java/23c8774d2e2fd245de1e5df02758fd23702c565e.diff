diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java
index 73b539df0..d93f587a9 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java
@@ -203,150 +203,157 @@ public class DescendantTokenCheck extends Check {
     /** Whether to sum the number of tokens found. */
     private boolean sumTokenCounts;
     /** limited tokens */
     private int[] limitedTokens = ArrayUtils.EMPTY_INT_ARRAY;
     /** error message when minimum count not reached */
     private String minimumMessage;
     /** error message when maximum count exceeded */
     private String maximumMessage;
 
     /**
      * Counts of descendant tokens.
      * Indexed by (token ID - 1) for performance.
      */
     private int[] counts = ArrayUtils.EMPTY_INT_ARRAY;
 
     @Override
     public int[] getDefaultTokens() {
         return ArrayUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public int[] getRequiredTokens() {
         return ArrayUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         //reset counts
         Arrays.fill(counts, 0);
         countTokens(ast, 0);
 
         if (sumTokenCounts) {
             logAsTotal(ast);
         }
         else {
             logAsSeparated(ast);
         }
     }
 
     /**
      * log violations for each Token
      * @param ast token
      */
     private void logAsSeparated(DetailAST ast) {
         // name of this token
         final String name = Utils.getTokenName(ast.getType());
 
         for (int element : limitedTokens) {
             final int tokenCount = counts[element - 1];
             if (tokenCount < minimumNumber) {
-                final String descendantName = Utils
-                        .getTokenName(element);
+                final String descendantName = Utils.getTokenName(element);
+
+                if (minimumMessage == null) {
+                    minimumMessage = MSG_KEY_MIN;
+                }
                 log(ast.getLineNo(), ast.getColumnNo(),
-                    minimumMessage == null ? MSG_KEY_MIN
-                                : minimumMessage,
+                        minimumMessage,
                         String.valueOf(tokenCount),
                         String.valueOf(minimumNumber),
                         name,
                         descendantName);
             }
             if (tokenCount > maximumNumber) {
-                final String descendantName = Utils
-                        .getTokenName(element);
+                final String descendantName = Utils.getTokenName(element);
+
+                if (maximumMessage == null) {
+                    maximumMessage = MSG_KEY_MAX;
+                }
                 log(ast.getLineNo(), ast.getColumnNo(),
-                    maximumMessage == null ? MSG_KEY_MAX
-                                : maximumMessage,
+                        maximumMessage,
                         String.valueOf(tokenCount),
                         String.valueOf(maximumNumber),
                         name,
                         descendantName);
             }
         }
     }
 
     /**
      * log validation as one violation
      * @param ast curent token
      */
     private void logAsTotal(DetailAST ast) {
         // name of this token
         final String name = Utils.getTokenName(ast.getType());
 
         int total = 0;
         for (int element : limitedTokens) {
             total += counts[element - 1];
         }
         if (total < minimumNumber) {
+            if (minimumMessage == null) {
+                minimumMessage = MSG_KEY_SUM_MIN;
+            }
             log(ast.getLineNo(), ast.getColumnNo(),
-                minimumMessage == null ? MSG_KEY_SUM_MIN
-                            : minimumMessage,
+                    minimumMessage,
                     String.valueOf(total),
                     String.valueOf(minimumNumber), name);
         }
         if (total > maximumNumber) {
+            if (maximumMessage == null) {
+                maximumMessage = MSG_KEY_SUM_MAX;
+            }
             log(ast.getLineNo(), ast.getColumnNo(),
-                maximumMessage == null ? MSG_KEY_SUM_MAX
-                            : maximumMessage,
+                    maximumMessage,
                     String.valueOf(total),
-                    String.valueOf(maximumNumber),
-                    name);
+                    String.valueOf(maximumNumber), name);
         }
     }
 
     /**
      * Counts the number of occurrences of descendant tokens.
      * @param ast the root token for descendants.
      * @param depth the maximum depth of the counted descendants.
      */
     private void countTokens(AST ast, int depth) {
         if (depth <= maximumDepth) {
             //update count
             if (depth >= minimumDepth) {
                 final int type = ast.getType();
                 if (type <= counts.length) {
                     counts[type - 1]++;
                 }
             }
             AST child = ast.getFirstChild();
             final int nextDepth = depth + 1;
             while (child != null) {
                 countTokens(child, nextDepth);
                 child = child.getNextSibling();
             }
         }
     }
 
     @Override
     public int[] getAcceptableTokens() {
         // Any tokens set by property 'tokens' are acceptable
         final Set<String> tokenNames = getTokenNames();
         final int[] result = new int[tokenNames.size()];
         int i = 0;
         for (String name : tokenNames) {
             result[i] = Utils.getTokenId(name);
             i++;
         }
         return result;
     }
 
     /**
      * Sets the tokens which occurance as descendant is limited.
      * @param limitedTokensParam - list of tokens to ignore.
      */
     public void setLimitedTokens(String... limitedTokensParam) {
         limitedTokens = new int[limitedTokensParam.length];
 
         int maxToken = 0;
         for (int i = 0; i < limitedTokensParam.length; i++) {
             limitedTokens[i] = Utils.getTokenId(limitedTokensParam[i]);
             if (limitedTokens[i] > maxToken) {
