diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
index 9c9411348..5b957207f 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
@@ -156,100 +156,106 @@ public class ImportOrderCheck
                 }
                 grp = Pattern.compile("^" + Pattern.quote(pkg));
             }
 
             groups[i] = grp;
         }
     }
 
     /**
      * Sets whether or not imports should be ordered within any one group of
      * imports.
      *
      * @param ordered
      *            whether lexicographic ordering of imports within a group
      *            required or not.
      */
     public void setOrdered(boolean ordered)
     {
         this.ordered = ordered;
     }
 
     /**
      * Sets whether or not groups of imports must be separated from one another
      * by at least one blank line.
      *
      * @param separated
      *            whether groups should be separated by oen blank line.
      */
     public void setSeparated(boolean separated)
     {
         this.separated = separated;
     }
 
     /**
      * Sets whether string comparison should be case sensitive or not.
      *
      * @param caseSensitive
      *            whether string comparison should be case sensitive.
      */
     public void setCaseSensitive(boolean caseSensitive)
     {
         this.caseSensitive = caseSensitive;
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};
     }
 
+    @Override
+    public int[] getAcceptableTokens()
+    {
+        return new int[] {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};
+    }
+
     @Override
     public void beginTree(DetailAST rootAST)
     {
         lastGroup = Integer.MIN_VALUE;
         lastImportLine = Integer.MIN_VALUE;
         lastImport = "";
         lastImportStatic = false;
         beforeFirstImport = true;
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
         final FullIdent ident;
         final boolean isStatic;
 
         if (ast.getType() == TokenTypes.IMPORT) {
             ident = FullIdent.createFullIdentBelow(ast);
             isStatic = false;
         }
         else {
             ident = FullIdent.createFullIdent(ast.getFirstChild()
                     .getNextSibling());
             isStatic = true;
         }
 
         switch (getAbstractOption()) {
             case TOP:
                 if (!isStatic && lastImportStatic) {
                     lastGroup = Integer.MIN_VALUE;
                     lastImport = "";
                 }
                 // no break;
 
             case ABOVE:
                 // previous non-static but current is static
                 doVisitToken(ident, isStatic, (!lastImportStatic && isStatic));
                 break;
 
             case INFLOW:
                 // previous argument is useless here
                 doVisitToken(ident, isStatic, true);
                 break;
 
             case BOTTOM:
                 if (isStatic && !lastImportStatic) {
                     lastGroup = Integer.MIN_VALUE;
                     lastImport = "";
                 }
                 // no break;
