diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/DetectorOptions.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/DetectorOptions.java
index 57592df15..8d03338b4 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/DetectorOptions.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/DetectorOptions.java
@@ -123,71 +123,63 @@ class DetectorOptions {
     }
 
     /**
      * Format of the regular expression.
      * @return format of the regular expression.
      */
     public String getFormat() {
         return format;
     }
 
     /**
      * The violation reporter to use.
      * @return the violation reporter to use.
      */
     public AbstractViolationReporter getReporter() {
         return reporter;
     }
 
     /**
      * The message to report errors with.
      * @return the message to report errors with.
      */
     public String getMessage() {
         return message;
     }
 
     /**
      * The minimum number of allowed detections.
      * @return the minimum number of allowed detections.
      */
     public int getMinimum() {
         return minimum;
     }
 
     /**
      * The maximum number of allowed detections.
      * @return the maximum number of allowed detections.
      */
     public int getMaximum() {
         return maximum;
     }
 
     /**
      * The suppressor to use.
      * @return the suppressor to use.
      */
     public MatchSuppressor getSuppressor() {
         return suppressor;
     }
 
-    /**
-     * Whether to ignore case when matching.
-     * @return whether to ignore case when matching.
-     */
-    public boolean isIgnoreCase() {
-        return ignoreCase;
-    }
-
     /**
      * The pattern to use when matching.
      * @return the pattern to use when matching.
      */
     public Pattern getPattern() {
         int options = compileFlags;
 
-        if (isIgnoreCase()) {
+        if (ignoreCase) {
             options |= Pattern.CASE_INSENSITIVE;
         }
         return Pattern.compile(format, options);
     }
 }
