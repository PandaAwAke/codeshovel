diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java
index 484c0b90e..bd9d5ae54 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java
@@ -167,123 +167,123 @@ public final class CheckUtils {
      * @return the double value represented by the string argument.
      */
     public static double parseDouble(String text, int type) {
         String txt = UNDERSCORE_PATTERN.matcher(text).replaceAll("");
         double result = 0;
         switch (type) {
             case TokenTypes.NUM_FLOAT:
             case TokenTypes.NUM_DOUBLE:
                 result = Double.parseDouble(txt);
                 break;
             case TokenTypes.NUM_INT:
             case TokenTypes.NUM_LONG:
                 int radix = BASE_10;
                 if (txt.startsWith("0x") || txt.startsWith("0X")) {
                     radix = BASE_16;
                     txt = txt.substring(2);
                 }
                 else if (txt.charAt(0) == '0') {
                     radix = BASE_8;
                     txt = txt.substring(1);
                 }
                 if (CommonUtils.endsWithChar(txt, 'L') || CommonUtils.endsWithChar(txt, 'l')) {
                     txt = txt.substring(0, txt.length() - 1);
                 }
                 if (!txt.isEmpty()) {
                     if (type == TokenTypes.NUM_INT) {
                         result = parseInt(txt, radix);
                     }
                     else {
                         result = parseLong(txt, radix);
                     }
                 }
                 break;
             default:
                 break;
         }
         return result;
     }
 
     /**
      * Parses the string argument as a signed integer in the radix specified by
      * the second argument. The characters in the string must all be digits of
      * the specified radix. Handles negative values, which method
      * java.lang.Integer.parseInt(String, int) does not.
      * @param text the String containing the integer representation to be
      * parsed. Precondition: text contains a parsable int.
      * @param radix the radix to be used while parsing text.
      * @return the integer represented by the string argument in the specified
      * radix.
      */
-    public static int parseInt(String text, int radix) {
+    private static int parseInt(String text, int radix) {
         int result = 0;
         final int max = text.length();
         for (int i = 0; i < max; i++) {
             final int digit = Character.digit(text.charAt(i), radix);
             result *= radix;
             result += digit;
         }
         return result;
     }
 
     /**
      * Parses the string argument as a signed long in the radix specified by
      * the second argument. The characters in the string must all be digits of
      * the specified radix. Handles negative values, which method
      * java.lang.Integer.parseInt(String, int) does not.
      * @param text the String containing the integer representation to be
      * parsed. Precondition: text contains a parsable int.
      * @param radix the radix to be used while parsing text.
      * @return the long represented by the string argument in the specified
      * radix.
      */
-    public static long parseLong(String text, int radix) {
+    private static long parseLong(String text, int radix) {
         long result = 0;
         final int max = text.length();
         for (int i = 0; i < max; i++) {
             final int digit = Character.digit(text.charAt(i), radix);
             result *= radix;
             result += digit;
         }
         return result;
     }
 
     /**
      * Finds sub-node for given node minimal (line, column) pair.
      * @param node the root of tree for search.
      * @return sub-node with minimal (line, column) pair.
      */
     public static DetailAST getFirstNode(final DetailAST node) {
         DetailAST currentNode = node;
         DetailAST child = node.getFirstChild();
         while (child != null) {
             final DetailAST newNode = getFirstNode(child);
             if (newNode.getLineNo() < currentNode.getLineNo()
                 || newNode.getLineNo() == currentNode.getLineNo()
                     && newNode.getColumnNo() < currentNode.getColumnNo()) {
                 currentNode = newNode;
             }
             child = child.getNextSibling();
         }
 
         return currentNode;
     }
 
     /**
      * Retrieves the names of the type parameters to the node.
      * @param node the parameterized AST node
      * @return a list of type parameter names
      */
     public static List<String> getTypeParameterNames(final DetailAST node) {
         final DetailAST typeParameters =
             node.findFirstToken(TokenTypes.TYPE_PARAMETERS);
 
         final List<String> typeParameterNames = Lists.newArrayList();
         if (typeParameters != null) {
             final DetailAST typeParam =
                 typeParameters.findFirstToken(TokenTypes.TYPE_PARAMETER);
             typeParameterNames.add(
                     typeParam.findFirstToken(TokenTypes.IDENT).getText());
 
             DetailAST sibling = typeParam.getNextSibling();
             while (sibling != null) {
                 if (sibling.getType() == TokenTypes.TYPE_PARAMETER) {
