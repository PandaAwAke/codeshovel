diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MemberNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MemberNameCheck.java
index f63eb6aac..21bb12526 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MemberNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MemberNameCheck.java
@@ -30,55 +30,55 @@ import com.puppycrawl.tools.checkstyle.utils.ScopeUtils;
  * {@link java.util.regex.Pattern regular expression}
  * and defaults to
  * <strong>^[a-z][a-zA-Z0-9]*$</strong>.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="MemberName"/&gt;
  * </pre>
  * <p>
  * An example of how to configure the check for names that begin with
  * &quot;m&quot;, followed by an upper case letter, and then letters and
  * digits is:
  * </p>
  * <pre>
  * &lt;module name="MemberName"&gt;
  *    &lt;property name="format" value="^m[A-Z][a-zA-Z0-9]*$"/&gt;
  * &lt;/module&gt;
  * </pre>
  * @author Rick Giles
  */
 public class MemberNameCheck
     extends AbstractAccessControlNameCheck {
     /** Creates a new {@code MemberNameCheck} instance. */
     public MemberNameCheck() {
         super("^[a-z][a-zA-Z0-9]*$");
     }
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.VARIABLE_DEF};
     }
 
     @Override
     public int[] getRequiredTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     protected final boolean mustCheckName(DetailAST ast) {
         final DetailAST modifiersAST =
             ast.findFirstToken(TokenTypes.MODIFIERS);
         final boolean isStatic = modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);
 
-        return !isStatic && !ScopeUtils.inInterfaceOrAnnotationBlock(ast)
+        return !isStatic && !ScopeUtils.isInInterfaceOrAnnotationBlock(ast)
             && !ScopeUtils.isLocalVariableDef(ast)
                 && shouldCheckInScope(modifiersAST);
     }
 }
