diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java
index 1775281d0..4589b964c 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java
@@ -20,108 +20,113 @@
 package com.puppycrawl.tools.checkstyle.checks.coding;
 
 import java.util.Map;
 import java.util.Set;
 
 import antlr.collections.AST;
 
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * <p>
  * Checks that classes that override equals() also override hashCode().
  * </p>
  * <p>
  * Rationale: The contract of equals() and hashCode() requires that
  * equal objects have the same hashCode. Hence, whenever you override
  * equals() you must override hashCode() to ensure that your class can
  * be used in collections that are hash based.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="EqualsHashCode"/&gt;
  * </pre>
  * @author lkuehne
  */
 public class EqualsHashCodeCheck
         extends Check {
     // implementation note: we have to use the following members to
     // keep track of definitions in different inner classes
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "equals.noHashCode";
 
     /** maps OBJ_BLOCK to the method definition of equals() */
     private final Map<DetailAST, DetailAST> objBlockEquals = Maps.newHashMap();
 
     /** the set of OBJ_BLOCKs that contain a definition of hashCode() */
     private final Set<DetailAST> objBlockWithHashCode = Sets.newHashSet();
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.METHOD_DEF};
+        return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.METHOD_DEF};
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void beginTree(DetailAST rootAST) {
         objBlockEquals.clear();
         objBlockWithHashCode.clear();
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final DetailAST modifiers = ast.getFirstChild();
         final AST type = ast.findFirstToken(TokenTypes.TYPE);
         final AST methodName = ast.findFirstToken(TokenTypes.IDENT);
         final DetailAST parameters = ast.findFirstToken(TokenTypes.PARAMETERS);
 
         if (type.getFirstChild().getType() == TokenTypes.LITERAL_BOOLEAN
                 && "equals".equals(methodName.getText())
                 && modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)
                 && parameters.getChildCount() == 1
                 && isObjectParam(parameters.getFirstChild())
             ) {
             objBlockEquals.put(ast.getParent(), ast);
         }
         else if (type.getFirstChild().getType() == TokenTypes.LITERAL_INT
                 && "hashCode".equals(methodName.getText())
                 && modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)
                 && parameters.getFirstChild() == null) { // no params
             objBlockWithHashCode.add(ast.getParent());
         }
     }
 
     /**
      * Determines if an AST is a formal param of type Object (or subclass).
      * @param firstChild the AST to check
      * @return true iff firstChild is a parameter of an Object type.
      */
     private static boolean isObjectParam(AST firstChild) {
         final AST modifiers = firstChild.getFirstChild();
         final AST type = modifiers.getNextSibling();
         switch (type.getFirstChild().getType()) {
             case TokenTypes.LITERAL_BOOLEAN:
             case TokenTypes.LITERAL_BYTE:
             case TokenTypes.LITERAL_CHAR:
             case TokenTypes.LITERAL_DOUBLE:
             case TokenTypes.LITERAL_FLOAT:
             case TokenTypes.LITERAL_INT:
             case TokenTypes.LITERAL_LONG:
             case TokenTypes.LITERAL_SHORT:
                 return false;
             default:
                 return true;
         }
