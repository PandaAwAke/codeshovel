diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java
index 7fb5e3338..2370aa2fb 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java
@@ -46,101 +46,101 @@ public class MethodCallHandler extends AbstractExpressionHandler {
         final IndentLevel indentLevel;
         // if inside a method call's params, this could be part of
         // an expression, so get the previous line's start
         if (getParent() instanceof MethodCallHandler) {
             final MethodCallHandler container =
                     (MethodCallHandler) getParent();
             if (areOnSameLine(container.getMainAst(), getMainAst())
                     || isChainedMethodCallWrapped()
                     || areMethodsChained(container.getMainAst(), getMainAst())) {
                 indentLevel = container.getIndent();
             }
             // we should increase indentation only if this is the first
             // chained method call which was moved to the next line
             else {
                 indentLevel = new IndentLevel(container.getIndent(), getBasicOffset());
             }
         }
         else {
             // if our expression isn't first on the line, just use the start
             // of the line
             final LineSet lines = new LineSet();
             findSubtreeLines(lines, getMainAst().getFirstChild(), true);
             final int firstCol = lines.firstLineCol();
             final int lineStart = getLineStart(getFirstAst(getMainAst()));
             if (lineStart == firstCol) {
                 indentLevel = super.getIndentImpl();
             }
             else {
                 indentLevel = new IndentLevel(lineStart);
             }
         }
         return indentLevel;
     }
 
     /**
      * Checks if ast2 is a chained method call that starts on the same level as ast1 ends.
      * In other words, if the right paren of ast1 is on the same level as the lparen of ast2:
      *
      * <code>
      *     value.methodOne(
      *         argument1
      *     ).methodTwo(
      *         argument2
      *     );
      * </code>
      *
      * @param ast1 Ast1
      * @param ast2 Ast2
      * @return True if ast2 begins on the same level that ast1 ends
      */
-    private boolean areMethodsChained(DetailAST ast1, DetailAST ast2) {
+    private static boolean areMethodsChained(DetailAST ast1, DetailAST ast2) {
         final DetailAST rparen = ast1.findFirstToken(TokenTypes.RPAREN);
         return rparen.getLineNo() == ast2.getLineNo();
     }
 
     /**
      * If this is the first chained method call which was moved to the next line.
      * @return true if chained class are wrapped
      */
     private boolean isChainedMethodCallWrapped() {
         boolean result = false;
         final DetailAST main = getMainAst();
         final DetailAST dot = main.getFirstChild();
         final DetailAST target = dot.getFirstChild();
 
         final DetailAST dot1 = target.getFirstChild();
         final DetailAST target1 = dot1.getFirstChild();
 
         if (dot1.getType() == TokenTypes.DOT
             && target1.getType() == TokenTypes.METHOD_CALL) {
             result = true;
         }
         return result;
     }
 
     /**
      * Get the first AST of the specified method call.
      *
      * @param ast
      *            the method call
      *
      * @return the first AST of the specified method call
      */
     private static DetailAST getFirstAst(DetailAST ast) {
         // walk down the first child part of the dots that make up a method
         // call name
 
         DetailAST astNode = ast.getFirstChild();
         while (astNode.getType() == TokenTypes.DOT) {
             astNode = astNode.getFirstChild();
         }
         return astNode;
     }
 
     @Override
     public IndentLevel getSuggestedChildIndent(AbstractExpressionHandler child) {
         // for whatever reason a method that crosses lines, like asList
         // here:
         //            System.out.println("methods are: " + Arrays.asList(
         //                new String[] {"method"}).toString());
         // will not have the right line num, so just get the child name
