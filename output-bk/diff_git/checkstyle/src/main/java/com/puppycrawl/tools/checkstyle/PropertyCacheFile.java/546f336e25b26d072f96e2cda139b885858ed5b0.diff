diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java b/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java
index fa6e7c82c..d085d4828 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java
@@ -65,158 +65,158 @@ final class PropertyCacheFile {
 
     /** mask for last byte */
     private static final int MASK_0X0F = 0x0F;
 
     /** bit shift */
     private static final int SHIFT_4 = 4;
 
     /** the details on files **/
     private final Properties details = new Properties();
 
     /** configuration object **/
     private final Configuration config;
 
     /** file name of cache **/
     private final String fileName;
 
     /**
      * Creates a new <code>PropertyCacheFile</code> instance.
      *
      * @param config the current configuration, not null
      * @param fileName the cache file
      */
     PropertyCacheFile(Configuration config, String fileName) {
         if (config == null) {
             throw new IllegalArgumentException("config can not be null");
         }
         if (fileName == null) {
             throw new IllegalArgumentException("fileName can not be null");
         }
         this.config = config;
         this.fileName = fileName;
     }
 
     /**
      * load cached values from file
      * @throws IOException when there is a problems with file read
      */
     void load() throws IOException {
         // get the current config so if the file isn't found
         // the first time the hash will be added to output file
         final String currentConfigHash = getConfigHashCode(config);
         if (new File(fileName).exists()) {
             FileInputStream inStream = null;
             try {
                 inStream = new FileInputStream(fileName);
                 details.load(inStream);
                 final String cachedConfigHash = details.getProperty(CONFIG_HASH_KEY);
                 if (!currentConfigHash.equals(cachedConfigHash)) {
                     // Detected configuration change - clear cache
                     details.clear();
-                    details.put(CONFIG_HASH_KEY, currentConfigHash);
+                    details.setProperty(CONFIG_HASH_KEY, currentConfigHash);
                 }
             }
             finally {
                 Closeables.closeQuietly(inStream);
             }
         }
         else {
             // put the hash in the file if the file is going to be created
-            details.put(CONFIG_HASH_KEY, currentConfigHash);
+            details.setProperty(CONFIG_HASH_KEY, currentConfigHash);
         }
     }
 
     /**
      * Cleans up the object and updates the cache file.
      * @throws IOException  when there is a problems with file save
      */
     void persist() throws IOException {
         FileOutputStream out = null;
         try {
             out = new FileOutputStream(fileName);
             details.store(out, null);
         }
         finally {
             flushAndCloseOutStream(out);
         }
     }
 
     /**
      * Flushes and closes output stream.
      * @param stream the output stream
      * @throws IOException  when there is a problems with file flush and close
      */
     private static void flushAndCloseOutStream(OutputStream stream) throws IOException {
         if (stream != null) {
             Flushables.flush(stream, false);
         }
         Closeables.close(stream, false);
     }
 
     /**
      * @param fileName the file to check
      * @param timestamp the timestamp of the file to check
      * @return whether the specified file has already been checked ok
      */
     boolean inCache(String fileName, long timestamp) {
         final String lastChecked = details.getProperty(fileName);
         return lastChecked != null
             && lastChecked.equals(Long.toString(timestamp));
     }
 
     /**
      * Records that a file checked ok.
      * @param fileName name of the file that checked ok
      * @param timestamp the timestamp of the file
      */
     void put(String fileName, long timestamp) {
-        details.put(fileName, Long.toString(timestamp));
+        details.setProperty(fileName, Long.toString(timestamp));
     }
 
     /**
      * Calculates the hashcode for a GlobalProperties.
      *
      * @param object the GlobalProperties
      * @return the hashcode for <code>object</code>
      */
     private static String getConfigHashCode(Serializable object) {
         try {
             // im-memory serialization of Configuration
 
             final ByteArrayOutputStream baos = new ByteArrayOutputStream();
             ObjectOutputStream oos = null;
             try {
                 oos = new ObjectOutputStream(baos);
                 oos.writeObject(object);
             }
             finally {
                 flushAndCloseOutStream(oos);
             }
 
             // Instead of hexEncoding baos.toByteArray() directly we
             // use a message digest here to keep the length of the
             // hashcode reasonable
 
             final MessageDigest md = MessageDigest.getInstance("SHA-1");
             md.update(baos.toByteArray());
 
             return hexEncode(md.digest());
         }
         catch (final IOException | NoSuchAlgorithmException ex) {
             // rethrow as unchecked exception
             throw new IllegalStateException("Unable to calculate hashcode.", ex);
         }
     }
 
     /**
      * Hex-encodes a byte array.
      * @param byteArray the byte array
      * @return hex encoding of <code>byteArray</code>
      */
     private static String hexEncode(byte... byteArray) {
         final StringBuilder buf = new StringBuilder(2 * byteArray.length);
         for (final byte b : byteArray) {
             final int low = b & MASK_0X0F;
             final int high = b >> SHIFT_4 & MASK_0X0F;
             buf.append(HEX_CHARS[high]);
             buf.append(HEX_CHARS[low]);
         }
