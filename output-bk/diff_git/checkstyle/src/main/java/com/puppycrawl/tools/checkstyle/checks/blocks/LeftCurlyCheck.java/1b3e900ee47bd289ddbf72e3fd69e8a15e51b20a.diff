diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
index d04dd5ae5..ab725b30e 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
@@ -330,57 +330,55 @@ public class LeftCurlyCheck
         }
         if (!hasLineBreakAfter(brace)) {
             log(brace.getLineNo(), brace.getColumnNo(), MSG_KEY_LINE_BREAK_AFTER);
         }
     }
 
     /**
      * validate token on new Line position
      * @param brace brace AST
      * @param startToken start Token
      * @param braceLine content of line with Brace
      * @param prevLineLen previous Line length
      */
     private void validateNewLinePosion(DetailAST brace, DetailAST startToken,
                                        String braceLine, int prevLineLen) {
         // not on the same line
         if (startToken.getLineNo() + 1 == brace.getLineNo()) {
             if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {
                 log(brace.getLineNo(), brace.getColumnNo(),
                         MSG_KEY_LINE_NEW, "{");
             }
             else if (prevLineLen + 2 <= maxLineLength) {
                 log(brace.getLineNo(), brace.getColumnNo(),
                         MSG_KEY_LINE_PREVIOUS, "{");
             }
         }
         else if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {
             log(brace.getLineNo(), brace.getColumnNo(),
                     MSG_KEY_LINE_NEW, "{");
         }
     }
 
     /**
      * Checks if left curly has line break after.
      * @param leftCurly
      *        Left curly token.
      * @return
      *        True, left curly has line break after.
      */
     private boolean hasLineBreakAfter(DetailAST leftCurly) {
         DetailAST nextToken = null;
         if (leftCurly.getType() == TokenTypes.SLIST) {
             nextToken = leftCurly.getFirstChild();
         }
         else {
             if (leftCurly.getParent().getParent().getType() == TokenTypes.ENUM_DEF
                     && !ignoreEnums) {
                 nextToken = leftCurly.getNextSibling();
             }
         }
-        if (nextToken != null && nextToken.getType() != TokenTypes.RCURLY
-                && leftCurly.getLineNo() == nextToken.getLineNo()) {
-            return false;
-        }
-        return true;
+        return nextToken == null
+                || nextToken.getType() == TokenTypes.RCURLY
+                || leftCurly.getLineNo() != nextToken.getLineNo();
     }
 }
