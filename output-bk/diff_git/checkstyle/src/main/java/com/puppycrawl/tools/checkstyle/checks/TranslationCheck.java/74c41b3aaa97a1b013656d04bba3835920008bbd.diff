diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
index 218225cea..6e7cbc7ce 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
@@ -189,114 +189,111 @@ public class TranslationCheck extends AbstractFileSetCheck {
      * @param baseName base name regexp.
      */
     public void setBaseName(Pattern baseName) {
         this.baseName = baseName;
     }
 
     /**
      * Sets language codes of required translations for the check.
      * @param translationCodes a comma separated list of language codes.
      */
     public void setRequiredTranslations(String... translationCodes) {
         requiredTranslations = Arrays.stream(translationCodes).collect(Collectors.toSet());
         validateUserSpecifiedLanguageCodes(requiredTranslations);
     }
 
     /**
      * Validates the correctness of user specified language codes for the check.
      * @param languageCodes user specified language codes for the check.
      */
     private void validateUserSpecifiedLanguageCodes(Set<String> languageCodes) {
         for (String code : languageCodes) {
             if (!isValidLanguageCode(code)) {
                 final LocalizedMessage msg = new LocalizedMessage(0, TRANSLATION_BUNDLE,
                         WRONG_LANGUAGE_CODE_KEY, new Object[] {code}, getId(), getClass(), null);
                 final String exceptionMessage = String.format(Locale.ROOT,
                         "%s [%s]", msg.getMessage(), TranslationCheck.class.getSimpleName());
                 throw new IllegalArgumentException(exceptionMessage);
             }
         }
     }
 
     /**
      * Checks whether user specified language code is correct (is contained in available locales).
      * @param userSpecifiedLanguageCode user specified language code.
      * @return true if user specified language code is correct.
      */
     private static boolean isValidLanguageCode(final String userSpecifiedLanguageCode) {
         boolean valid = false;
         final Locale[] locales = Locale.getAvailableLocales();
         for (Locale locale : locales) {
             if (userSpecifiedLanguageCode.equals(locale.toString())) {
                 valid = true;
                 break;
             }
         }
         return valid;
     }
 
     @Override
     public void beginProcessing(String charset) {
-        super.beginProcessing(charset);
         filesToProcess.clear();
     }
 
     @Override
     protected void processFiltered(File file, FileText fileText) {
         // We just collecting files for processing at finishProcessing()
         filesToProcess.add(file);
     }
 
     @Override
     public void finishProcessing() {
-        super.finishProcessing();
-
         final Set<ResourceBundle> bundles = groupFilesIntoBundles(filesToProcess, baseName);
         for (ResourceBundle currentBundle : bundles) {
             checkExistenceOfDefaultTranslation(currentBundle);
             checkExistenceOfRequiredTranslations(currentBundle);
             checkTranslationKeys(currentBundle);
         }
     }
 
     /**
      * Checks an existence of default translation file in the resource bundle.
      * @param bundle resource bundle.
      */
     private void checkExistenceOfDefaultTranslation(ResourceBundle bundle) {
         final Optional<String> fileName = getMissingFileName(bundle, null);
         if (fileName.isPresent()) {
             logMissingTranslation(bundle.getPath(), fileName.get());
         }
     }
 
     /**
      * Checks an existence of translation files in the resource bundle.
      * The name of translation file begins with the base name of resource bundle which is followed
      * by '_' and a language code (country and variant are optional), it ends with the extension
      * suffix.
      * @param bundle resource bundle.
      */
     private void checkExistenceOfRequiredTranslations(ResourceBundle bundle) {
         for (String languageCode : requiredTranslations) {
             final Optional<String> fileName = getMissingFileName(bundle, languageCode);
             if (fileName.isPresent()) {
                 logMissingTranslation(bundle.getPath(), fileName.get());
             }
         }
     }
 
     /**
      * Returns the name of translation file which is absent in resource bundle or Guava's Optional,
      * if there is not missing translation.
      * @param bundle resource bundle.
      * @param languageCode language code.
      * @return the name of translation file which is absent in resource bundle or Guava's Optional,
      *         if there is not missing translation.
      */
     private static Optional<String> getMissingFileName(ResourceBundle bundle, String languageCode) {
         final String fileNameRegexp;
         final boolean searchForDefaultTranslation;
         final String extension = bundle.getExtension();
         final String baseName = bundle.getBaseName();
         if (languageCode == null) {
             searchForDefaultTranslation = true;
