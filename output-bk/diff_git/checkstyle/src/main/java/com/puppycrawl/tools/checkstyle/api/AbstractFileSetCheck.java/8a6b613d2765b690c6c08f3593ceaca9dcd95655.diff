diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
index 57b9ccae6..4fa0c3bbc 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
@@ -29,106 +29,109 @@ import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 /**
  * Provides common functionality for many FileSetChecks.
  *
  * @author lkuehne
  * @author oliver
  * @noinspection NoopMethodInAbstractClass
  */
 public abstract class AbstractFileSetCheck
     extends AbstractViolationReporter
     implements FileSetCheck {
 
     /**
      * Collects the error messages.
      */
     private static final ThreadLocal<SortedSet<LocalizedMessage>> MESSAGE_COLLECTOR =
             ThreadLocal.withInitial(TreeSet::new);
 
     /** The dispatcher errors are fired to. */
     private MessageDispatcher messageDispatcher;
 
     /** The file extensions that are accepted by this filter. */
     private String[] fileExtensions = CommonUtils.EMPTY_STRING_ARRAY;
 
     /**
      * Called to process a file that matches the specified file extensions.
      * @param file the file to be processed
      * @param fileText the contents of the file.
      * @throws CheckstyleException if error condition within Checkstyle occurs.
      */
     protected abstract void processFiltered(File file, FileText fileText)
             throws CheckstyleException;
 
     @Override
     public void init() {
         // No code by default, should be overridden only by demand at subclasses
     }
 
     @Override
     public void destroy() {
         // No code by default, should be overridden only by demand at subclasses
     }
 
     @Override
     public void beginProcessing(String charset) {
         // No code by default, should be overridden only by demand at subclasses
     }
 
     @Override
     public final SortedSet<LocalizedMessage> process(File file, FileText fileText)
             throws CheckstyleException {
-        MESSAGE_COLLECTOR.get().clear();
+        final SortedSet<LocalizedMessage> messages = MESSAGE_COLLECTOR.get();
+        messages.clear();
         // Process only what interested in
         if (CommonUtils.matchesFileExtension(file, fileExtensions)) {
             processFiltered(file, fileText);
         }
-        return new TreeSet<>(MESSAGE_COLLECTOR.get());
+        final SortedSet<LocalizedMessage> result = new TreeSet<>(messages);
+        messages.clear();
+        return result;
     }
 
     @Override
     public void finishProcessing() {
         // No code by default, should be overridden only by demand at subclasses
     }
 
     @Override
     public final void setMessageDispatcher(MessageDispatcher messageDispatcher) {
         this.messageDispatcher = messageDispatcher;
     }
 
     /**
      * A message dispatcher is used to fire violation messages to
      * interested audit listeners.
      *
      * @return the current MessageDispatcher.
      */
     protected final MessageDispatcher getMessageDispatcher() {
         return messageDispatcher;
     }
 
     /**
      * Makes copy of file extensions and returns them.
      * @return file extensions that identify the files that pass the
      *     filter of this FileSetCheck.
      */
     public String[] getFileExtensions() {
         return Arrays.copyOf(fileExtensions, fileExtensions.length);
     }
 
     /**
      * Sets the file extensions that identify the files that pass the
      * filter of this FileSetCheck.
      * @param extensions the set of file extensions. A missing
      *         initial '.' character of an extension is automatically added.
      * @throws IllegalArgumentException is argument is null
      */
     public final void setFileExtensions(String... extensions) {
         if (extensions == null) {
             throw new IllegalArgumentException("Extensions array can not be null");
         }
 
         fileExtensions = new String[extensions.length];
         for (int i = 0; i < extensions.length; i++) {
             final String extension = extensions[i];
             if (CommonUtils.startsWithChar(extension, '.')) {
                 fileExtensions[i] = extension;
             }
             else {
