diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java
index 337f2fa35..e2c6eb659 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java
@@ -512,96 +512,96 @@ public abstract class ExpressionHandler {
                     expandedTabsColumnNo(modifier));
             }
         }
     }
 
     /**
      * Check the indentation of the expression we are handling.
      */
     public abstract void checkIndentation();
 
     /**
      * Accessor for the IndentCheck attribute.
      *
      * @return the IndentCheck attribute
      */
     protected final IndentationCheck getIndentCheck() {
         return indentCheck;
     }
 
     /**
      * Accessor for the MainAst attribute.
      *
      * @return the MainAst attribute
      */
     protected final DetailAST getMainAst() {
         return mainAst;
     }
 
     /**
      * Accessor for the Parent attribute.
      *
      * @return the Parent attribute
      */
     protected final ExpressionHandler getParent() {
         return parent;
     }
 
     /**
      * A shortcut for <code>IndentationCheck</code> property.
      * @return value of basicOffset property of <code>IndentationCheck</code>
      */
     protected final int getBasicOffset() {
         return getIndentCheck().getBasicOffset();
     }
 
     /**
      * A shortcut for <code>IndentationCheck</code> property.
      * @return value of braceAdjustment property
      *         of <code>IndentationCheck</code>
      */
-    protected final int getBraceAdjustement() {
-        return getIndentCheck().getBraceAdjustement();
+    protected final int getBraceAdjustment() {
+        return getIndentCheck().getBraceAdjustment();
     }
 
     /**
      * Check the indentation of the right parenthesis.
      * @param rparen parenthesis to check
      * @param lparen left parenthesis associated with aRparen
      */
     protected final void checkRParen(DetailAST lparen, DetailAST rparen) {
         // no paren - no check :)
         if (rparen == null) {
             return;
         }
 
         // the rcurly can either be at the correct indentation,
         // or not first on the line ...
         final int rparenLevel = expandedTabsColumnNo(rparen);
         if (getLevel().accept(rparenLevel) || !startsLine(rparen)) {
             return;
         }
 
         // or has <lparen level> + 1 indentation
         final int lparenLevel = expandedTabsColumnNo(lparen);
         if (rparenLevel == lparenLevel + 1) {
             return;
         }
 
         logError(rparen, "rparen", rparenLevel);
     }
 
     /**
      * Check the indentation of the left parenthesis.
      * @param lparen parenthesis to check
      */
     protected final void checkLParen(final DetailAST lparen) {
         // the rcurly can either be at the correct indentation, or on the
         // same line as the lcurly
         if (lparen == null
             || getLevel().accept(expandedTabsColumnNo(lparen))
             || !startsLine(lparen)) {
             return;
         }
         logError(lparen, "lparen", expandedTabsColumnNo(lparen));
     }
 }
