diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavaDocTagContinuationIndentationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavaDocTagContinuationIndentationCheck.java
index fa8fb8bf2..2ab17e288 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavaDocTagContinuationIndentationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavaDocTagContinuationIndentationCheck.java
@@ -22,81 +22,105 @@ import java.util.ArrayList;
 import java.util.List;
 
 import com.puppycrawl.tools.checkstyle.api.DetailNode;
 import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;
 
 /**
  * <p>
  * Checks the indentation of the continuation lines in at-clauses.
  * </p>
  * <p>
  * Default configuration:
  * </p>
  * <pre>
  * &lt;module name=&quot;JavaDocTagContinuationIndentation&quot;&gt;
  *     &lt;property name=&quot;offset&quot; value=&quot;4&quot;/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * @author max
  *
  */
 public class JavaDocTagContinuationIndentationCheck extends AbstractJavadocCheck
 {
 
     /** Default indentation */
     private static final int DEFAULT_INDENTATION = 4;
 
     /**
      * How many spaces to use for new indentation level.
      */
     private int mOffset = DEFAULT_INDENTATION;
 
     /**
      * Some javadoc.
      * @param aOffset Some javadoc.
      */
     public void setOffset(int aOffset)
     {
         mOffset = aOffset;
     }
 
     @Override
     public int[] getDefaultJavadocTokens()
     {
         return new int[] {JavadocTokenTypes.DESCRIPTION };
     }
 
     @Override
     public void visitJavadocToken(DetailNode aAst)
     {
-        final List<DetailNode> textNodes = getAllTextNodes(aAst);
-
-        for (DetailNode textNode : textNodes.subList(1, textNodes.size())) {
-            final DetailNode whitespaceNode = JavadocUtils.getFirstChild(textNode);
-
-            if (whitespaceNode.getType() == JavadocTokenTypes.WS
-                    && whitespaceNode.getText().length() - 1 != mOffset)
+        final List<DetailNode> textNodes = getAllNewlineNodes(aAst);
+        if (isInlineDescription(aAst)) {
+            return;
+        }
+        for (DetailNode newlineNode : textNodes) {
+            final DetailNode textNode = JavadocUtils.getNextSibling(JavadocUtils
+                    .getNextSibling(newlineNode));
+            if (textNode != null && textNode.getType() == JavadocTokenTypes.TEXT
+                    && textNode.getChildren().length > 1)
             {
-                log(textNode.getLineNumber(), "tag.continuation.indent", mOffset);
+                final DetailNode whitespace = JavadocUtils.getFirstChild(textNode);
+                if (whitespace.getType() == JavadocTokenTypes.WS
+                        && whitespace.getText().length() - 1 < mOffset)
+                {
+                    log(textNode.getLineNumber(), "tag.continuation.indent", mOffset);
+                }
             }
         }
     }
 
     /**
      * Some javadoc.
      * @param aDescriptionNode Some javadoc.
      * @return Some javadoc.
      */
-    private List<DetailNode> getAllTextNodes(DetailNode aDescriptionNode)
+    private List<DetailNode> getAllNewlineNodes(DetailNode aDescriptionNode)
     {
         final List<DetailNode> textNodes = new ArrayList<DetailNode>();
         DetailNode node = JavadocUtils.getFirstChild(aDescriptionNode);
         while (JavadocUtils.getNextSibling(node) != null) {
-            if (node.getType() == JavadocTokenTypes.TEXT) {
+            if (node.getType() == JavadocTokenTypes.NEWLINE) {
                 textNodes.add(node);
             }
             node = JavadocUtils.getNextSibling(node);
         }
         return textNodes;
     }
+
+    /**
+     * Some javadoc.
+     * @param aDescription Some javadoc.
+     * @return Some javadoc.
+     */
+    private boolean isInlineDescription(DetailNode aDescription)
+    {
+        DetailNode inlineTag = aDescription.getParent();
+        while (inlineTag != null) {
+            if (inlineTag.getType() == JavadocTokenTypes.JAVADOC_INLINE_TAG) {
+                return true;
+            }
+            inlineTag = inlineTag.getParent();
+        }
+        return false;
+    }
 }
