diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
index f69f0ed18..5df77a00d 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
@@ -248,101 +248,86 @@ public class JavadocTypeCheck
             for (final InvalidJavadocTag tag : tags.getInvalidTags()) {
                 log(tag.getLine(), tag.getCol(), UNKNOWN_TAG,
                     tag.getName());
             }
         }
         return tags.getValidTags();
     }
 
     /**
      * Verifies that a type definition has a required tag.
      * @param lineNo the line number for the type definition.
      * @param tags tags from the Javadoc comment for the type definition.
      * @param tagName the required tag name.
      * @param formatPattern regexp for the tag value.
      * @param format pattern for the tag value.
      */
     private void checkTag(int lineNo, List<JavadocTag> tags, String tagName,
                           Pattern formatPattern, String format) {
         if (formatPattern == null) {
             return;
         }
 
         int tagCount = 0;
         for (int i = tags.size() - 1; i >= 0; i--) {
             final JavadocTag tag = tags.get(i);
             if (tag.getTagName().equals(tagName)) {
                 tagCount++;
                 if (!formatPattern.matcher(tag.getArg1()).find()) {
                     log(lineNo, TAG_FORMAT, "@" + tagName, format);
                 }
             }
         }
         if (tagCount == 0) {
             log(lineNo, MISSING_TAG, "@" + tagName);
         }
     }
 
     /**
      * Verifies that a type definition has the specified param tag for
      * the specified type parameter name.
      * @param lineNo the line number for the type definition.
      * @param tags tags from the Javadoc comment for the type definition.
      * @param typeParamName the name of the type parameter
      */
     private void checkTypeParamTag(final int lineNo,
             final List<JavadocTag> tags, final String typeParamName) {
         boolean found = false;
         for (int i = tags.size() - 1; i >= 0; i--) {
             final JavadocTag tag = tags.get(i);
             if (tag.isParamTag()
-                && tag.getArg1() != null
                 && tag.getArg1().indexOf("<" + typeParamName + ">") == 0) {
                 found = true;
             }
         }
         if (!found) {
             log(lineNo, MISSING_TAG,
                 JavadocTagInfo.PARAM.getText() + " <" + typeParamName + ">");
         }
     }
 
     /**
      * Checks for unused param tags for type parameters.
      * @param tags tags from the Javadoc comment for the type definition.
      * @param typeParamNames names of type parameters
      */
     private void checkUnusedTypeParamTags(
         final List<JavadocTag> tags,
         final List<String> typeParamNames) {
         final Pattern pattern = Pattern.compile("\\s*<([^>]+)>.*");
         for (int i = tags.size() - 1; i >= 0; i--) {
             final JavadocTag tag = tags.get(i);
             if (tag.isParamTag()) {
 
-                if (tag.getArg1() != null) {
-
-                    final Matcher matcher = pattern.matcher(tag.getArg1());
-                    String typeParamName = null;
-
-                    if (matcher.matches()) {
-                        typeParamName = matcher.group(1).trim();
-                        if (!typeParamNames.contains(typeParamName)) {
-                            log(tag.getLineNo(), tag.getColumnNo(),
-                                UNUSED_TAG,
-                                JavadocTagInfo.PARAM.getText(),
-                                "<" + typeParamName + ">");
-                        }
-                    }
-                    else {
-                        log(tag.getLineNo(), tag.getColumnNo(),
-                            UNUSED_TAG_GENERAL);
-                    }
-                }
-                else {
+                final Matcher matcher = pattern.matcher(tag.getArg1());
+                matcher.find();
+                final String typeParamName = matcher.group(1).trim();
+                if (!typeParamNames.contains(typeParamName)) {
                     log(tag.getLineNo(), tag.getColumnNo(),
-                        UNUSED_TAG_GENERAL);
+                        UNUSED_TAG,
+                        JavadocTagInfo.PARAM.getText(),
+                        "<" + typeParamName + ">");
                 }
             }
         }
     }
 }
