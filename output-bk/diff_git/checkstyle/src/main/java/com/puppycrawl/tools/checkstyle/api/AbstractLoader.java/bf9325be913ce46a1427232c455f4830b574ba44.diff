diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractLoader.java
index ef9cfb3b4..7df11c89c 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractLoader.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractLoader.java
@@ -60,68 +60,68 @@ public abstract class AbstractLoader
      * Creates a new instance.
      * @param publicId the public ID for the DTD to resolve
      * @param dtdResourceName the resource for the DTD
      * @throws SAXException if an error occurs
      * @throws ParserConfigurationException if an error occurs
      */
     protected AbstractLoader(String publicId, String dtdResourceName)
         throws SAXException, ParserConfigurationException {
         this(new HashMap<String, String>(1));
         publicIdToResourceNameMap.put(publicId, dtdResourceName);
     }
 
     /**
      * Creates a new instance.
      * @param publicIdToResourceNameMap maps public IDs to DTD resource names
      * @throws SAXException if an error occurs
      * @throws ParserConfigurationException if an error occurs
      */
     protected AbstractLoader(Map<String, String> publicIdToResourceNameMap)
         throws SAXException, ParserConfigurationException {
         this.publicIdToResourceNameMap =
             Maps.newHashMap(publicIdToResourceNameMap);
         final SAXParserFactory factory = SAXParserFactory.newInstance();
         factory.setValidating(true);
         factory.setNamespaceAware(true);
         parser = factory.newSAXParser().getXMLReader();
         parser.setContentHandler(this);
         parser.setEntityResolver(this);
         parser.setErrorHandler(this);
     }
 
     /**
      * Parses the specified input source.
      * @param inputSource the input source to parse.
      * @throws IOException if an error occurs
      * @throws SAXException in an error occurs
      */
     public void parseInputSource(InputSource inputSource)
         throws IOException, SAXException {
         parser.parse(inputSource);
     }
 
     @Override
     public InputSource resolveEntity(String publicId, String systemId)
         throws SAXException, IOException {
         if (publicIdToResourceNameMap.keySet().contains(publicId)) {
             final String dtdResourceName =
                     publicIdToResourceNameMap.get(publicId);
             final ClassLoader loader =
                 getClass().getClassLoader();
-            final InputStream dtdIS =
+            final InputStream dtdIs =
                 loader.getResourceAsStream(dtdResourceName);
 
-            return new InputSource(dtdIS);
+            return new InputSource(dtdIs);
         }
         return super.resolveEntity(publicId, systemId);
     }
 
     @Override
     public void error(SAXParseException exception) throws SAXException {
         throw exception;
     }
 
     @Override
     public void fatalError(SAXParseException exception) throws SAXException {
         throw exception;
     }
 }
