diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java
index 9a5ee4064..600a72331 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java
@@ -98,104 +98,102 @@ public abstract class AbstractHeaderCheck extends AbstractFileSetCheck
         if (CommonUtils.isBlank(fileName)) {
             throw new CheckstyleException(
                 "property 'headerFile' is missing or invalid in module "
                     + getConfiguration().getName());
         }
 
         headerFile = fileName;
     }
 
     /**
      * Load the header from a file.
      * @throws CheckstyleException if the file cannot be loaded
      */
     private void loadHeaderFile() throws CheckstyleException {
         checkHeaderNotInitialized();
         Reader headerReader = null;
         try {
             final URI uri = CommonUtils.getUriByFilename(headerFile);
             headerReader = new InputStreamReader(new BufferedInputStream(
                     uri.toURL().openStream()), charset);
             loadHeader(headerReader);
         }
         catch (final IOException ex) {
             throw new CheckstyleException(
                     "unable to load header file " + headerFile, ex);
         }
         finally {
             Closeables.closeQuietly(headerReader);
         }
     }
 
     /**
      * Called before initializing the header.
      * @throws ConversionException if header has already been set
      */
     private void checkHeaderNotInitialized() {
         if (!readerLines.isEmpty()) {
             throw new ConversionException(
                     "header has already been set - "
                     + "set either header or headerFile, not both");
         }
     }
 
     /**
      * Set the header to check against. Individual lines in the header
      * must be separated by '\n' characters.
      * @param header header content to check against.
      * @throws ConversionException if the header cannot be interpreted
      */
     public void setHeader(String header) {
-        if (CommonUtils.isBlank(header)) {
-            return;
-        }
-
-        checkHeaderNotInitialized();
+        if (!CommonUtils.isBlank(header)) {
+            checkHeaderNotInitialized();
 
-        final String headerExpandedNewLines = ESCAPED_LINE_FEED_PATTERN
-                .matcher(header).replaceAll("\n");
+            final String headerExpandedNewLines = ESCAPED_LINE_FEED_PATTERN
+                    .matcher(header).replaceAll("\n");
 
-        final Reader headerReader = new StringReader(headerExpandedNewLines);
-        try {
-            loadHeader(headerReader);
-        }
-        catch (final IOException ex) {
-            throw new ConversionException("unable to load header", ex);
-        }
-        finally {
-            Closeables.closeQuietly(headerReader);
+            final Reader headerReader = new StringReader(headerExpandedNewLines);
+            try {
+                loadHeader(headerReader);
+            }
+            catch (final IOException ex) {
+                throw new ConversionException("unable to load header", ex);
+            }
+            finally {
+                Closeables.closeQuietly(headerReader);
+            }
         }
     }
 
     /**
      * Load header to check against from a Reader into readerLines.
      * @param headerReader delivers the header to check against
      * @throws IOException if
      */
     private void loadHeader(final Reader headerReader) throws IOException {
         final LineNumberReader lnr = new LineNumberReader(headerReader);
         readerLines.clear();
         while (true) {
             final String line = lnr.readLine();
             if (line == null) {
                 break;
             }
             readerLines.add(line);
         }
         postProcessHeaderLines();
     }
 
     @Override
     protected final void finishLocalSetup() throws CheckstyleException {
         if (headerFile != null) {
             loadHeaderFile();
         }
         if (readerLines.isEmpty()) {
             setHeader(null);
         }
     }
 
     @Override
     public Set<String> getExternalResourceLocations() {
         return ImmutableSet.of(headerFile);
     }
 }
