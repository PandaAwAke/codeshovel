diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ObjectBlockHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ObjectBlockHandler.java
index 3f8da688e..0cd72c502 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ObjectBlockHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ObjectBlockHandler.java
@@ -48,64 +48,64 @@ public class ObjectBlockHandler extends BlockParentHandler {
 
     @Override
     protected DetailAST getLCurly() {
         return getMainAst().findFirstToken(TokenTypes.LCURLY);
     }
 
     @Override
     protected DetailAST getRCurly() {
         return getMainAst().findFirstToken(TokenTypes.RCURLY);
     }
 
     @Override
     protected DetailAST getListChild() {
         return getMainAst();
     }
 
     @Override
     protected IndentLevel getLevelImpl() {
         final DetailAST parentAST = getMainAst().getParent();
         IndentLevel indent = getParent().getLevel();
         if (parentAST.getType() == TokenTypes.LITERAL_NEW) {
             indent.addAcceptedIndent(super.getLevelImpl());
         }
         else if (parentAST.getType() == TokenTypes.ENUM_CONSTANT_DEF) {
             indent = super.getLevelImpl();
         }
         return indent;
     }
 
     @Override
     public void checkIndentation() {
         // if we have a class or interface as a parent, don't do anything,
         // as this is checked by class def; so
         // only do this if we have a new for a parent (anonymous inner
         // class)
         final DetailAST parentAST = getMainAst().getParent();
         if (parentAST.getType() != TokenTypes.LITERAL_NEW) {
             return;
         }
 
         super.checkIndentation();
     }
 
     @Override
     protected void checkRCurly() {
         final DetailAST rcurly = getRCurly();
         final int rcurlyPos = expandedTabsColumnNo(rcurly);
         final IndentLevel level = curlyLevel();
         level.addAcceptedIndent(level.getFirstIndentLevel() + getLineWrappingIndentation());
 
-        if (!level.accept(rcurlyPos) && startsLine(rcurly)) {
+        if (!level.isAcceptable(rcurlyPos) && startsLine(rcurly)) {
             logError(rcurly, "rcurly", rcurlyPos, curlyLevel());
         }
     }
 
     /**
      * A shortcut for {@code IndentationCheck} property.
      * @return value of lineWrappingIndentation property
      *         of {@code IndentationCheck}
      */
     private int getLineWrappingIndentation() {
         return getIndentCheck().getLineWrappingIndentation();
     }
 }
