diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java
index 3a56e66ce..ee1867f61 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java
@@ -117,68 +117,68 @@ public class ClassResolver
         }
 
         // Giving up, the type is unknown, so load the class to generate an
         // exception
         return safeLoad(name);
     }
 
     /**
      * @return whether a specified class is loadable with safeLoad().
      * @param name name of the class to check
      */
     public boolean isLoadable(String name)
     {
         try {
             safeLoad(name);
             return true;
         }
         catch (final ClassNotFoundException e) {
             return false;
         }
     }
 
     /**
      * Will load a specified class is such a way that it will NOT be
      * initialised.
      * @param name name of the class to load
      * @return the <code>Class</code> for the specified class
      * @throws ClassNotFoundException if an error occurs
      */
     public Class<?> safeLoad(String name)
         throws ClassNotFoundException
     {
         // The next line will load the class using the specified class
         // loader. The magic is having the "false" parameter. This means the
         // class will not be initialised. Very, very important.
         return Class.forName(name, false, loader);
     }
 
     /**
      * Tries to resolve a class for fully-specified name.
      * @param name a given name of class.
      * @return Class object for the given name or null.
      */
     private Class<?> resolveQualifiedName(final String name)
     {
         try {
             if (isLoadable(name)) {
                 return safeLoad(name);
             }
             //Perhaps it's fully-qualified inner class
-            final int dot = name.lastIndexOf(".");
+            final int dot = name.lastIndexOf('.');
             if (dot != -1) {
                 final String innerName =
                     name.substring(0, dot) + "$" + name.substring(dot + 1);
                 if (isLoadable(innerName)) {
                     return safeLoad(innerName);
                 }
             }
         }
         catch (final ClassNotFoundException ex) {
             // we shouldn't get this exception here,
             // so this is unexpected runtime exception
             throw new RuntimeException(ex);
         }
 
         return null;
     }
 }
