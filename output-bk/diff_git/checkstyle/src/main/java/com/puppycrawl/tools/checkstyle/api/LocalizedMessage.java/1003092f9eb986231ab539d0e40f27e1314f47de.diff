diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
index 87169eff3..725b50ffb 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
@@ -192,166 +192,156 @@ public final class LocalizedMessage
      *
      * @param lineNo line number associated with the message
      * @param bundle name of a resource bundle that contains error messages
      * @param key the key to locate the translation
      * @param args arguments for the translation
      * @param moduleId the id of the module the message is associated with
      * @param sourceClass the name of the source for the message
      * @param customMessage optional custom message overriding the default
      */
     public LocalizedMessage(
         int lineNo,
         String bundle,
         String key,
         Object[] args,
         String moduleId,
         Class<?> sourceClass,
         String customMessage) {
         this(lineNo, 0, bundle, key, args, DEFAULT_SEVERITY, moduleId,
                 sourceClass, customMessage);
     }
 
     // -@cs[CyclomaticComplexity] equals - a lot of fields to check.
     @Override
     public boolean equals(Object object) {
         if (this == object) {
             return true;
         }
         if (object == null || getClass() != object.getClass()) {
             return false;
         }
         final LocalizedMessage localizedMessage = (LocalizedMessage) object;
         return Objects.equals(lineNo, localizedMessage.lineNo)
                 && Objects.equals(columnNo, localizedMessage.columnNo)
                 && Objects.equals(severityLevel, localizedMessage.severityLevel)
                 && Objects.equals(moduleId, localizedMessage.moduleId)
                 && Objects.equals(key, localizedMessage.key)
                 && Objects.equals(bundle, localizedMessage.bundle)
                 && Objects.equals(sourceClass, localizedMessage.sourceClass)
                 && Objects.equals(customMessage, localizedMessage.customMessage)
                 && Arrays.equals(args, localizedMessage.args);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(lineNo, columnNo, severityLevel, moduleId, key, bundle, sourceClass,
                 customMessage, Arrays.hashCode(args));
     }
 
     /** Clears the cache. */
     public static void clearCache() {
-        synchronized (BUNDLE_CACHE) {
-            BUNDLE_CACHE.clear();
-        }
+        BUNDLE_CACHE.clear();
     }
 
     /**
      * Gets the translated message.
      * @return the translated message
      */
     public String getMessage() {
         String message = getCustomMessage();
 
         if (message == null) {
             try {
                 // Important to use the default class loader, and not the one in
                 // the GlobalProperties object. This is because the class loader in
                 // the GlobalProperties is specified by the user for resolving
                 // custom classes.
                 final ResourceBundle resourceBundle = getBundle(bundle);
                 final String pattern = resourceBundle.getString(key);
                 final MessageFormat formatter = new MessageFormat(pattern, Locale.ROOT);
                 message = formatter.format(args);
             }
             catch (final MissingResourceException ignored) {
                 // If the Check author didn't provide i18n resource bundles
                 // and logs error messages directly, this will return
                 // the author's original message
                 final MessageFormat formatter = new MessageFormat(key, Locale.ROOT);
                 message = formatter.format(args);
             }
         }
         return message;
     }
 
     /**
      * Returns the formatted custom message if one is configured.
      * @return the formatted custom message or {@code null}
      *          if there is no custom message
      */
     private String getCustomMessage() {
         String message = null;
         if (customMessage != null) {
             final MessageFormat formatter = new MessageFormat(customMessage, Locale.ROOT);
             message = formatter.format(args);
         }
         return message;
     }
 
     /**
      * Find a ResourceBundle for a given bundle name. Uses the classloader
      * of the class emitting this message, to be sure to get the correct
      * bundle.
      * @param bundleName the bundle name
      * @return a ResourceBundle
      */
     private ResourceBundle getBundle(String bundleName) {
-        synchronized (BUNDLE_CACHE) {
-            ResourceBundle resourceBundle = BUNDLE_CACHE
-                    .get(bundleName);
-            if (resourceBundle == null) {
-                resourceBundle = ResourceBundle.getBundle(bundleName, sLocale,
-                        sourceClass.getClassLoader(), new Utf8Control());
-                BUNDLE_CACHE.put(bundleName, resourceBundle);
-            }
-            return resourceBundle;
-        }
+        return BUNDLE_CACHE.computeIfAbsent(bundleName, name -> ResourceBundle.getBundle(
+                name, sLocale, sourceClass.getClassLoader(), new Utf8Control()));
     }
 
     /**
      * Gets the line number.
      * @return the line number
      */
     public int getLineNo() {
         return lineNo;
     }
 
     /**
      * Gets the column number.
      * @return the column number
      */
     public int getColumnNo() {
         return columnNo;
     }
 
     /**
      * Gets the severity level.
      * @return the severity level
      */
     public SeverityLevel getSeverityLevel() {
         return severityLevel;
     }
 
     /**
      * Returns id of module.
      * @return the module identifier.
      */
     public String getModuleId() {
         return moduleId;
     }
 
     /**
      * Returns the message key to locate the translation, can also be used
      * in IDE plugins to map error messages to corrective actions.
      *
      * @return the message key
      */
     public String getKey() {
         return key;
     }
 
     /**
      * Gets the name of the source for this LocalizedMessage.
      * @return the name of the source for this LocalizedMessage
      */
     public String getSourceName() {
         return sourceClass.getName();
