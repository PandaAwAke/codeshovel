diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java
index 6cd611272..a3358189e 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java
@@ -59,104 +59,104 @@ public class JavadocVariableCheck
      */
     public void setScope(String from) {
         scope = Scope.getInstance(from);
     }
 
     /**
      * Set the excludeScope.
      * @param excludeScope a {@code String} value
      */
     public void setExcludeScope(String excludeScope) {
         this.excludeScope = Scope.getInstance(excludeScope);
     }
 
     /**
      * Sets the variable names to ignore in the check.
      * @param regexp regular expression to define variable names to ignore.
      * @throws org.apache.commons.beanutils.ConversionException if unable to create Pattern object.
      */
     public void setIgnoreNamePattern(String regexp) {
         ignoreNamePattern = CommonUtils.createPattern(regexp);
     }
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.VARIABLE_DEF,
             TokenTypes.ENUM_CONSTANT_DEF,
         };
     }
 
     /*
      * Skipping enum values is requested.
      * Checkstyle's issue #1669: https://github.com/checkstyle/checkstyle/issues/1669
      */
     @Override
     public int[] getRequiredTokens() {
         return new int[] {
             TokenTypes.VARIABLE_DEF,
         };
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         if (shouldCheck(ast)) {
             final FileContents contents = getFileContents();
-            final TextBlock cmt =
+            final TextBlock textBlock =
                 contents.getJavadocBefore(ast.getLineNo());
 
-            if (cmt == null) {
+            if (textBlock == null) {
                 log(ast, JAVADOC_MISSING);
             }
         }
     }
 
     /**
      * Decides whether the variable name of an AST is in the ignore list.
      * @param ast the AST to check
      * @return true if the variable name of ast is in the ignore list.
      */
     private boolean isIgnored(DetailAST ast) {
         final String name = ast.findFirstToken(TokenTypes.IDENT).getText();
         return ignoreNamePattern != null
                 && ignoreNamePattern.matcher(name).matches();
     }
 
     /**
      * Whether we should check this node.
      * @param ast a given node.
      * @return whether we should check a given node.
      */
     private boolean shouldCheck(final DetailAST ast) {
         if (ScopeUtils.isInCodeBlock(ast) || isIgnored(ast)) {
             return false;
         }
 
         final Scope customScope;
         if (ast.getType() == TokenTypes.ENUM_CONSTANT_DEF) {
             customScope = Scope.PUBLIC;
         }
         else {
             final DetailAST mods = ast.findFirstToken(TokenTypes.MODIFIERS);
             final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);
 
             if (ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {
                 customScope = Scope.PUBLIC;
             }
             else {
                 customScope = declaredScope;
             }
         }
 
         final Scope surroundingScope = ScopeUtils.getSurroundingScope(ast);
 
         return customScope.isIn(scope) && surroundingScope.isIn(scope)
             && (excludeScope == null
                 || !customScope.isIn(excludeScope)
                 || !surroundingScope.isIn(excludeScope));
     }
 }
