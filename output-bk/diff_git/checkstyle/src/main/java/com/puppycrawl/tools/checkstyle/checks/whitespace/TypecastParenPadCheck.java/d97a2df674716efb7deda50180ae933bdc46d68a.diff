diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/TypecastParenPadCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/TypecastParenPadCheck.java
index 296553aca..053f450fa 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/TypecastParenPadCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/TypecastParenPadCheck.java
@@ -16,66 +16,66 @@
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.whitespace;
 
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * <p>Checks the padding of parentheses for typecasts. That is whether a space
  * is required after a left parenthesis and before a right parenthesis, or such
  * spaces are forbidden.
  * </p>
  * <p>
  * The policy to verify is specified using the {@link PadOption} class and
  * defaults to {@link PadOption#NOSPACE}.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="TypecastParenPad"/&gt;
  * </pre>
  * <p>
  * An example of how to configure the check to require spaces for the
  * parentheses of constructor, method, and super constructor invocations is:
  * </p>
  * <pre>
  * &lt;module name="TypecastParenPad"&gt;
  *     &lt;property name="option" value="space"/&gt;
  * &lt;/module&gt;
  * </pre>
  * @author Oliver Burn
  * @version 1.0
  */
 public class TypecastParenPadCheck extends AbstractParenPadCheck
 {
     @Override
     public int[] getRequiredTokens()
     {
         return new int[] {TokenTypes.RPAREN, TokenTypes.TYPECAST};
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return getRequiredTokens();
     }
 
     @Override
-    public void visitToken(DetailAST aAST)
+    public void visitToken(DetailAST ast)
     {
         // Strange logic in this method to guard against checking RPAREN tokens
         // that are not associated with a TYPECAST token.
-        if (aAST.getType() == TokenTypes.TYPECAST) {
-            processLeft(aAST);
+        if (ast.getType() == TokenTypes.TYPECAST) {
+            processLeft(ast);
         }
-        else if ((aAST.getParent() != null)
-                 && (aAST.getParent().getType() == TokenTypes.TYPECAST)
-                 && (aAST.getParent().findFirstToken(TokenTypes.RPAREN)
-                     == aAST))
+        else if ((ast.getParent() != null)
+                 && (ast.getParent().getType() == TokenTypes.TYPECAST)
+                 && (ast.getParent().findFirstToken(TokenTypes.RPAREN)
+                     == ast))
         {
-            processRight(aAST);
+            processRight(ast);
         }
     }
 }
