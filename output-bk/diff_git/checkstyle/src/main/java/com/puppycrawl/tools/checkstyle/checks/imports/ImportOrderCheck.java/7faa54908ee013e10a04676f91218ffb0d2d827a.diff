diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
index f121e5fde..a6f08bf1d 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
@@ -591,98 +591,100 @@ public class ImportOrderCheck
      *         or lexicographical); and a value greater than {@code 0} if str1 is greater than str2
      *         (container order or lexicographically).
      */
     private static int compareContainerOrder(String importName1, String importName2,
                                              boolean caseSensitive) {
         final String container1 = getImportContainer(importName1);
         final String container2 = getImportContainer(importName2);
         final int compareContainersOrderResult;
         if (caseSensitive) {
             compareContainersOrderResult = container1.compareTo(container2);
         }
         else {
             compareContainersOrderResult = container1.compareToIgnoreCase(container2);
         }
         final int result;
         if (compareContainersOrderResult == 0) {
             result = compare(importName1, importName2, caseSensitive);
         }
         else {
             result = compareContainersOrderResult;
         }
         return result;
     }
 
     /**
      * Extracts import container name from fully qualified import name.
      * An import container name is the type which encloses the static element being imported.
      * For example, HttpConstants, HttpHeaders, HttpHeaders.Names are import container names:
      * <p>
      * import static HttpConstants.COLON     => HttpConstants
      * import static HttpHeaders.addHeader   => HttpHeaders
      * import static HttpHeaders.setHeader   => HttpHeaders
      * import static HttpHeaders.Names.DATE  => HttpHeaders.Names
      * </p>
      * @param qualifiedImportName fully qualified import name.
      * @return import container name.
      */
     private static String getImportContainer(String qualifiedImportName) {
         final int lastDotIndex = qualifiedImportName.lastIndexOf('.');
         return qualifiedImportName.substring(0, lastDotIndex);
     }
 
     /**
      * Finds out what group the specified import belongs to.
      *
      * @param name the import name to find.
      * @return group number for given import name.
      */
     private int getGroupNumber(String name) {
         int bestIndex = groups.length;
-        int bestLength = -1;
-        int bestPos = 0;
+        int bestEnd = -1;
+        int bestPos = Integer.MAX_VALUE;
 
         // find out what group this belongs in
         // loop over groups and get index
         for (int i = 0; i < groups.length; i++) {
             final Matcher matcher = groups[i].matcher(name);
-            while (matcher.find()) {
-                final int length = matcher.end() - matcher.start();
-                if (length > bestLength
-                    || length == bestLength && matcher.start() < bestPos) {
+            if (matcher.find()) {
+                if (matcher.start() < bestPos) {
                     bestIndex = i;
-                    bestLength = length;
+                    bestEnd = matcher.end();
                     bestPos = matcher.start();
                 }
+                else if (matcher.start() == bestPos && matcher.end() > bestEnd) {
+                    bestIndex = i;
+                    bestEnd = matcher.end();
+                }
             }
         }
 
         return bestIndex;
     }
 
     /**
      * Compares two strings.
      *
      * @param string1
      *            the first string.
      * @param string2
      *            the second string.
      * @param caseSensitive
      *            whether the comparison is case sensitive.
      * @return the value {@code 0} if string1 is equal to string2; a value
      *         less than {@code 0} if string1 is lexicographically less
      *         than the string2; and a value greater than {@code 0} if
      *         string1 is lexicographically greater than string2.
      */
     private static int compare(String string1, String string2,
             boolean caseSensitive) {
         final int result;
         if (caseSensitive) {
             result = string1.compareTo(string2);
         }
         else {
             result = string1.compareToIgnoreCase(string2);
         }
 
         return result;
     }
 }
