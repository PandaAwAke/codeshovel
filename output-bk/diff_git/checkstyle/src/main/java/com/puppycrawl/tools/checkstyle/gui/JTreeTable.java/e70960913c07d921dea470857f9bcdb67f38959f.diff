diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java
index 2cac5f82e..b472bd48e 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java
@@ -155,101 +155,101 @@ public class JTreeTable extends JTable {
                     new CodeSelector(ast, editor, lines2position).select();
 
                     if (tree.isExpanded(selected)) {
                         tree.collapsePath(selected);
                     }
                     else {
                         tree.expandPath(selected);
                     }
                     tree.setSelectionPath(selected);
                 }
             };
         final KeyStroke stroke = KeyStroke.getKeyStroke("ENTER");
         final String command = "expand/collapse";
         getInputMap().put(stroke, command);
         getActionMap().put(command, expand);
     }
 
     /**
      * Overridden to message super and forward the method to the tree.
      * Since the tree is not actually in the component hierarchy it will
      * never receive this unless we forward it in this manner.
      */
     @Override
     public void updateUI() {
         super.updateUI();
         if (tree != null) {
             tree.updateUI();
         }
         // Use the tree's default foreground and background colors in the
         // table.
         LookAndFeel.installColorsAndFont(this, "Tree.background",
                 "Tree.foreground", "Tree.font");
     }
 
     /* Workaround for BasicTableUI anomaly. Make sure the UI never tries to
      * paint the editor. The UI currently uses different techniques to
      * paint the renderers and editors and overriding setBounds() below
      * is not the right thing to do for an editor. Returning -1 for the
      * editing row in this case, ensures the editor is never painted.
      */
     @Override
     public int getEditingRow() {
         final Class<?> editingClass = getColumnClass(editingColumn);
         return editingClass == TreeTableModel.class ? -1 : editingRow;
     }
 
     /**
      * Overridden to pass the new rowHeight to the tree.
      */
     @Override
-    public void setRowHeight(int newRowHeight) {
+    public final void setRowHeight(int newRowHeight) {
         super.setRowHeight(newRowHeight);
         if (tree != null && tree.getRowHeight() != newRowHeight) {
             tree.setRowHeight(getRowHeight());
         }
     }
 
     /**
      * @return the tree that is being shared between the model.
      */
     public JTree getTree() {
         return tree;
     }
 
     /**
      * A TreeCellRenderer that displays a JTree.
      */
     class TreeTableCellRenderer extends JTree implements
             TableCellRenderer {
         /**
          *
          */
         private static final long serialVersionUID = 4324031590789321581L;
         /** Last table/tree row asked to renderer. */
         protected int visibleRow;
 
         /** creates a new instance */
         public TreeTableCellRenderer(TreeModel model) {
             super(model);
         }
 
         /**
          * updateUI is overridden to set the colors of the Tree's renderer
          * to match that of the table.
          */
         @Override
         public void updateUI() {
             super.updateUI();
             // Make the tree's cell renderer use the table's cell selection
             // colors.
             final TreeCellRenderer tcr = getCellRenderer();
             if (tcr instanceof DefaultTreeCellRenderer) {
                 final DefaultTreeCellRenderer dtcr = (DefaultTreeCellRenderer) tcr;
                 // For 1.1 uncomment this, 1.2 has a bug that will cause an
                 // exception to be thrown if the border selection color is
                 // null.
                 // dtcr.setBorderSelectionColor(null);
                 dtcr.setTextSelectionColor(UIManager.getColor
                         ("Table.selectionForeground"));
                 dtcr.setBackgroundSelectionColor(UIManager.getColor
                         ("Table.selectionBackground"));
@@ -346,101 +346,101 @@ public class JTreeTable extends JTable {
          */
         @Override
         public boolean isCellEditable(EventObject e) {
             if (e instanceof MouseEvent) {
                 for (int counter = getColumnCount() - 1; counter >= 0;
                      counter--) {
                     if (getColumnClass(counter) == TreeTableModel.class) {
                         final MouseEvent me = (MouseEvent) e;
                         final MouseEvent newME = new MouseEvent(tree, me.getID(),
                                 me.getWhen(), me.getModifiers(),
                                 me.getX() - getCellRect(0, counter, true).x,
                                 me.getY(), me.getClickCount(),
                                 me.isPopupTrigger());
                         tree.dispatchEvent(newME);
                         break;
                     }
                 }
             }
 
             return false;
         }
     }
 
     /**
      * ListToTreeSelectionModelWrapper extends DefaultTreeSelectionModel
      * to listen for changes in the ListSelectionModel it maintains. Once
      * a change in the ListSelectionModel happens, the paths are updated
      * in the DefaultTreeSelectionModel.
      */
     class ListToTreeSelectionModelWrapper extends DefaultTreeSelectionModel {
         /**
          *
          */
         private static final long serialVersionUID = 2267930983939339510L;
         /** Set to true when we are updating the ListSelectionModel. */
         protected boolean updatingListSelectionModel;
 
         public ListToTreeSelectionModelWrapper() {
             super();
             getListSelectionModel().addListSelectionListener
                     (createListSelectionListener());
         }
 
         /**
          * Returns the list selection model. ListToTreeSelectionModelWrapper
          * listens for changes to this model and updates the selected paths
          * accordingly.
          *
          * @return the list selection model
          */
-        ListSelectionModel getListSelectionModel() {
+        final ListSelectionModel getListSelectionModel() {
             return listSelectionModel;
         }
 
         /**
          * This is overridden to set <code>updatingListSelectionModel</code>
          * and message super. This is the only place DefaultTreeSelectionModel
          * alters the ListSelectionModel.
          */
         @Override
         public void resetRowSelection() {
             if (!updatingListSelectionModel) {
                 updatingListSelectionModel = true;
                 try {
                     super.resetRowSelection();
                 } finally {
                     updatingListSelectionModel = false;
                 }
             }
             // Notice how we don't message super if
             // updatingListSelectionModel is true. If
             // updatingListSelectionModel is true, it implies the
             // ListSelectionModel has already been updated and the
             // paths are the only thing that needs to be updated.
         }
 
         /**
          * Creates and returns an instance of ListSelectionHandler.
          */
         private ListSelectionListener createListSelectionListener() {
             return new ListSelectionHandler();
         }
 
         /**
          * If <code>updatingListSelectionModel</code> is false, this will
          * reset the selected paths from the selected rows in the list
          * selection model.
          */
         protected void updateSelectedPathsFromSelectedRows() {
             if (!updatingListSelectionModel) {
                 updatingListSelectionModel = true;
                 try {
                     // This is way expensive, ListSelectionModel needs an
                     // enumerator for iterating.
                     final int min = listSelectionModel.getMinSelectionIndex();
                     final int max = listSelectionModel.getMaxSelectionIndex();
 
                     clearSelection();
                     if (min != -1 && max != -1) {
                         for (int counter = min; counter <= max; counter++) {
                             if (listSelectionModel.isSelectedIndex(counter)) {
