diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheck.java
index a5f700062..1031564a8 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheck.java
@@ -27,100 +27,110 @@ import com.puppycrawl.tools.checkstyle.checks.AbstractFormatCheck;
  * <p>
  * Restricts return statements to a specified count (default = 2).
  * Ignores specified methods (<code>equals()</code> by default).
  * </p>
  * <p>
  * Rationale: Too many return points can be indication that code is
  * attempting to do too much or may be difficult to understand.
  * </p>
  *
  * @author <a href="mailto:simon@redhillconsulting.com.au">Simon Harris</a>
  * TODO: Test for inside a static block
  */
 public final class ReturnCountCheck extends AbstractFormatCheck
 {
     /** Default allowed number of return statements. */
     private static final int DEFAULT_MAX = 2;
 
     /** Stack of method contexts. */
     private final FastStack<Context> contextStack = FastStack.newInstance();
     /** Maximum allowed number of return stmts. */
     private int max;
     /** Current method context. */
     private Context context;
 
     /** Creates new instance of the checks. */
     public ReturnCountCheck()
     {
         super("^equals$");
         setMax(DEFAULT_MAX);
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.CTOR_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.LITERAL_RETURN,
         };
     }
 
     @Override
     public int[] getRequiredTokens()
     {
         return new int[]{
             TokenTypes.CTOR_DEF,
             TokenTypes.METHOD_DEF,
         };
     }
 
+    @Override
+    public int[] getAcceptableTokens()
+    {
+        return new int[] {
+            TokenTypes.CTOR_DEF,
+            TokenTypes.METHOD_DEF,
+            TokenTypes.LITERAL_RETURN,
+        };
+    }
+
     /**
      * Getter for max property.
      * @return maximum allowed number of return statements.
      */
     public int getMax()
     {
         return max;
     }
 
     /**
      * Setter for max property.
      * @param max maximum allowed number of return statements.
      */
     public void setMax(int max)
     {
         this.max = max;
     }
 
     @Override
     public void beginTree(DetailAST rootAST)
     {
         context = null;
         contextStack.clear();
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
         switch (ast.getType()) {
             case TokenTypes.CTOR_DEF:
             case TokenTypes.METHOD_DEF:
                 visitMethodDef(ast);
                 break;
             case TokenTypes.LITERAL_RETURN:
                 context.visitLiteralReturn();
                 break;
             default:
                 throw new IllegalStateException(ast.toString());
         }
     }
 
     @Override
     public void leaveToken(DetailAST ast)
     {
         switch (ast.getType()) {
             case TokenTypes.CTOR_DEF:
             case TokenTypes.METHOD_DEF:
                 leaveMethodDef(ast);
                 break;
             case TokenTypes.LITERAL_RETURN:
