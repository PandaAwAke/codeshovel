diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java
index 37eddc4f1..bcf7013ad 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java
@@ -143,87 +143,102 @@ public final class MissingDeprecatedCheck extends Check {
     public void visitToken(final DetailAST ast) {
         final TextBlock javadoc =
             this.getFileContents().getJavadocBefore(ast.getLineNo());
 
         final boolean containsAnnotation =
             AnnotationUtility.containsAnnotation(ast, DEPRECATED)
             || AnnotationUtility.containsAnnotation(ast, FQ_DEPRECATED);
 
         final boolean containsJavadocTag = this.containsJavadocTag(javadoc);
 
         if (containsAnnotation ^ containsJavadocTag) {
             this.log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_DEPRECATED);
         }
     }
 
     /**
      * Checks to see if the text block contains a deprecated tag.
      *
      * @param javadoc the javadoc of the AST
      * @return true if contains the tag
      */
     private boolean containsJavadocTag(final TextBlock javadoc) {
         if (javadoc == null) {
             return false;
         }
 
         final String[] lines = javadoc.getText();
 
         boolean found = false;
 
         int currentLine = javadoc.getStartLineNo() - 1;
 
         for (int i = 0; i < lines.length; i++) {
             currentLine++;
             final String line = lines[i];
 
             final Matcher javadocNoargMatcher =
                 MissingDeprecatedCheck.MATCH_DEPRECATED.matcher(line);
             final Matcher noargMultilineStart =
                 MissingDeprecatedCheck
                     .MATCH_DEPRECATED_MULTILINE_START.matcher(line);
 
             if (javadocNoargMatcher.find()) {
                 if (found) {
                     this.log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,
                         JavadocTagInfo.DEPRECATED.getText());
                 }
                 found = true;
             }
             else if (noargMultilineStart.find()) {
-                // Look for the rest of the comment if all we saw was
-                // the tag and the name. Stop when we see '*/' (end of
-                // Javadoc), '@' (start of next tag), or anything that's
-                // not whitespace or '*' characters.
-
-                for (int reindex = i + 1;
-                    reindex < lines.length; reindex++) {
-                    final Matcher multilineCont =
-                        MissingDeprecatedCheck.MATCH_DEPRECATED_MULTILINE_CONT
-                        .matcher(lines[reindex]);
-
-                    if (multilineCont.find()) {
-                        reindex = lines.length;
-                        final String lFin = multilineCont.group(1);
-                        if (!lFin.equals(MissingDeprecatedCheck.NEXT_TAG)
-                            && !lFin.equals(MissingDeprecatedCheck.END_JAVADOC)) {
-                            if (found) {
-                                this.log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,
-                                    JavadocTagInfo.DEPRECATED.getText());
-                            }
-                            found = true;
-                        }
-                        else {
-                            this.log(currentLine, MSG_KEY_JAVADOC_MISSING);
-                            if (found) {
-                                this.log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,
-                                    JavadocTagInfo.DEPRECATED.getText());
-                            }
-                            found = true;
-                        }
+                found = validateTagAtTheRestOfComment(lines, found, currentLine, i);
+
+            }
+        }
+        return found;
+    }
+
+    /**
+     * Look for the rest of the comment if all we saw was
+     * the tag and the name. Stop when we see '*' (end of
+     * Javadoc), '{@literal @}' (start of next tag), or anything that's
+     *  not whitespace or '*' characters.
+     * @param lines all lines
+     * @param foundBefore flag from parent method
+     * @param currentLine current line
+     * @param i som index
+     * @return true if Tag is found
+     */
+    private boolean validateTagAtTheRestOfComment(String[] lines, boolean foundBefore,
+                                                  int currentLine, int i) {
+
+        boolean found = false;
+        for (int reindex = i + 1;
+            reindex < lines.length; reindex++) {
+            final Matcher multilineCont =
+                MissingDeprecatedCheck.MATCH_DEPRECATED_MULTILINE_CONT
+                .matcher(lines[reindex]);
+
+            if (multilineCont.find()) {
+                reindex = lines.length;
+                final String lFin = multilineCont.group(1);
+                if (!lFin.equals(MissingDeprecatedCheck.NEXT_TAG)
+                    && !lFin.equals(MissingDeprecatedCheck.END_JAVADOC)) {
+                    if (foundBefore) {
+                        this.log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,
+                            JavadocTagInfo.DEPRECATED.getText());
+                    }
+                    found = true;
+                }
+                else {
+                    this.log(currentLine, MSG_KEY_JAVADOC_MISSING);
+                    if (foundBefore) {
+                        this.log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,
+                            JavadocTagInfo.DEPRECATED.getText());
                     }
+                    found = true;
                 }
             }
         }
         return found;
     }
 }
