diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java
index 47a7d7c2d..179b2aaa3 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java
@@ -162,180 +162,188 @@ public class FinalLocalVariableCheck extends AbstractCheck {
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.IDENT,
             TokenTypes.CTOR_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.SLIST,
             TokenTypes.OBJBLOCK,
             TokenTypes.VARIABLE_DEF,
             TokenTypes.PARAMETER_DEF,
         };
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         switch (ast.getType()) {
             case TokenTypes.OBJBLOCK:
             case TokenTypes.METHOD_DEF:
             case TokenTypes.CTOR_DEF:
                 scopeStack.push(new ScopeData());
                 break;
             case TokenTypes.SLIST:
                 if (ast.getParent().getType() != TokenTypes.CASE_GROUP
                     || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP)
                     == ast.getParent()) {
                     storePrevScopeUninitializedVariableData();
                     scopeStack.push(new ScopeData());
                 }
                 break;
             case TokenTypes.PARAMETER_DEF:
                 if (!isInLambda(ast)
                         && !ast.branchContains(TokenTypes.FINAL)
                         && !isInAbstractOrNativeMethod(ast)
                         && !ScopeUtils.isInInterfaceBlock(ast)) {
                     insertParameter(ast);
                 }
                 break;
             case TokenTypes.VARIABLE_DEF:
                 if (ast.getParent().getType() != TokenTypes.OBJBLOCK
                         && !ast.branchContains(TokenTypes.FINAL)
                         && !isVariableInForInit(ast)
                         && shouldCheckEnhancedForLoopVariable(ast)) {
                     insertVariable(ast);
                 }
                 break;
 
             case TokenTypes.IDENT:
                 final int parentType = ast.getParent().getType();
                 if (isAssignOperator(parentType)
                         && isFirstChild(ast)) {
-                    if (isInIfBlock(ast))
+                    if (isInSpecificCodeBlock(ast, TokenTypes.LITERAL_IF))
                     {
-                        markFinalVariableCandidateAsAssignInIfBlock(ast);
+                        markFinalVariableCandidateAsAssignedInIfBlock(ast);
+                        if (isInSpecificCodeBlock(ast, TokenTypes.CASE_GROUP)) {
+                            markFinalVariableCandidateAsAssignedInCaseBlock(ast);
+                        }
                     }
-                    else if (isInElseBlock(ast))
+                    else if (isInSpecificCodeBlock(ast, TokenTypes.LITERAL_ELSE))
                     {
-                        markFinalVariableCandidateAsAssignInElseBlock(ast);
+                        markFinalVariableCandidateAsAssignedInElseBlock(ast);
                     }
                     else
                     {
-                        markFinalVariableCandidateAsAssignOutsideIfOrElseBlock(ast);
+                        markFinalVariableCandidateAsAssignedOutsideIfOrElseBlock(ast);
                     }
                     removeVariable(ast);
                 }
                 break;
 
             default:
                 throw new IllegalStateException("Incorrect token type");
         }
     }
 
-    private boolean isInIfBlock(DetailAST node) {
+    private boolean isInSpecificCodeBlock(DetailAST node, int blockType) {
         boolean returnValue = false;
         for (DetailAST token = node.getParent(); token != null; token = token.getParent()) {
             final int type = token.getType();
-            if (type == TokenTypes.LITERAL_IF) {
+            if (type == blockType) {
                 returnValue = true;
                 break;
             }
         }
         return returnValue;
     }
 
-    private boolean isInElseBlock(DetailAST node) {
-        boolean returnValue = false;
-        for (DetailAST token = node.getParent(); token != null; token = token.getParent()) {
-            final int type = token.getType();
-            if (type == TokenTypes.LITERAL_ELSE) {
-                returnValue = true;
+    private void markFinalVariableCandidateAsAssignedInIfBlock(DetailAST ast) {
+        final Iterator<ScopeData> iterator = scopeStack.descendingIterator();
+        while (iterator.hasNext()) {
+            final ScopeData scopeData = iterator.next();
+            final Map<String, FinalVariableCandidate> scope = scopeData.scope;
+            DetailAST storedVariable = null;
+            final FinalVariableCandidate candidate = scope.get(ast.getText());
+            if (candidate != null) {
+                storedVariable = candidate.variableIdent;
+            }
+            if (storedVariable != null && isSameVariables(storedVariable, ast)) {
+                candidate.assignInIfBlock = true;
                 break;
             }
         }
-        return returnValue;
     }
 
-    private void markFinalVariableCandidateAsAssignInIfBlock(DetailAST ast) {
+    private void markFinalVariableCandidateAsAssignedInCaseBlock(DetailAST ast) {
         final Iterator<ScopeData> iterator = scopeStack.descendingIterator();
         while (iterator.hasNext()) {
             final ScopeData scopeData = iterator.next();
             final Map<String, FinalVariableCandidate> scope = scopeData.scope;
             DetailAST storedVariable = null;
             final FinalVariableCandidate candidate = scope.get(ast.getText());
             if (candidate != null) {
                 storedVariable = candidate.variableIdent;
             }
             if (storedVariable != null && isSameVariables(storedVariable, ast)) {
-                candidate.assignInIfBlock = true;
+                candidate.assignInIfBlockWhichIsInsideCaseBlock = true;
                 break;
             }
         }
     }
 
-    private void markFinalVariableCandidateAsAssignInElseBlock(DetailAST ast) {
+    private void markFinalVariableCandidateAsAssignedInElseBlock(DetailAST ast) {
         final Iterator<ScopeData> iterator = scopeStack.descendingIterator();
         while (iterator.hasNext()) {
             final ScopeData scopeData = iterator.next();
             final Map<String, FinalVariableCandidate> scope = scopeData.scope;
             DetailAST storedVariable = null;
             final FinalVariableCandidate candidate = scope.get(ast.getText());
             if (candidate != null) {
                 storedVariable = candidate.variableIdent;
             }
             if (storedVariable != null && isSameVariables(storedVariable, ast)) {
                 candidate.assignInElseBlock = true;
                 break;
             }
         }
     }
 
-    private void markFinalVariableCandidateAsAssignOutsideIfOrElseBlock(DetailAST ast) {
+    private void markFinalVariableCandidateAsAssignedOutsideIfOrElseBlock(DetailAST ast) {
         final Iterator<ScopeData> iterator = scopeStack.descendingIterator();
         while (iterator.hasNext()) {
             final ScopeData scopeData = iterator.next();
             final Map<String, FinalVariableCandidate> scope = scopeData.scope;
             DetailAST storedVariable = null;
             final FinalVariableCandidate candidate = scope.get(ast.getText());
             if (candidate != null) {
                 storedVariable = candidate.variableIdent;
             }
             if (storedVariable != null && isSameVariables(storedVariable, ast)) {
                 candidate.assignOutsideIfOrElseBlock = true;
                 break;
             }
         }
     }
 
     @Override
     public void leaveToken(DetailAST ast) {
         Map<String, FinalVariableCandidate> scope = null;
         switch (ast.getType()) {
             case TokenTypes.OBJBLOCK:
             case TokenTypes.CTOR_DEF:
             case TokenTypes.METHOD_DEF:
                 scope = scopeStack.pop().scope;
                 break;
             case TokenTypes.SLIST:
                 final Deque<DetailAST> prevScopeUnitializedVariableData =
                     prevScopeUninitializedVariables.peek();
                 if (ast.getParent().getType() != TokenTypes.CASE_GROUP
                     || findLastChildWhichContainsSpecifiedToken(ast.getParent().getParent(),
                             TokenTypes.CASE_GROUP, TokenTypes.SLIST) == ast.getParent()) {
                     scope = scopeStack.pop().scope;
                     prevScopeUninitializedVariables.pop();
                 }
                 final DetailAST parent = ast.getParent();
                 if (shouldUpdateUninitializedVariables(parent)) {
                     updateUninitializedVariables(prevScopeUnitializedVariableData);
                 }
                 break;
             default:
                 // do nothing
         }
         if (scope != null) {
             for (FinalVariableCandidate candidate : scope.values()) {
                 DetailAST ident = candidate.variableIdent;
                 log(ident.getLineNo(), ident.getColumnNo(), MSG_KEY, ident.getText());
             }
         }
     }
 
@@ -473,115 +481,127 @@ public class FinalLocalVariableCheck extends AbstractCheck {
      * @return true if the ast is the first child of its parent.
      */
     private static boolean isFirstChild(DetailAST ast) {
         return ast.getPreviousSibling() == null;
     }
 
     /**
      * Remove the variable from the Stack.
      * @param ast Variable to remove
      */
     private void removeVariable(DetailAST ast) {
         final Iterator<ScopeData> iterator = scopeStack.descendingIterator();
         while (iterator.hasNext()) {
             final ScopeData scopeData = iterator.next();
             final Map<String, FinalVariableCandidate> scope = scopeData.scope;
             final FinalVariableCandidate candidate = scope.get(ast.getText());
             DetailAST storedVariable = null;
             if (candidate != null) {
                 storedVariable = candidate.variableIdent;
             }
             if (storedVariable != null && isSameVariables(storedVariable, ast)) {
                 if (shouldRemoveVariable(scopeData, ast)) {
                     scope.remove(ast.getText());
                 }
                 break;
             }
         }
     }
 
     /**
      * Whether the variable should be removed from the list of final local variable
      * candidates.
      * @param scopeData the scope data of the variable.
      * @param ast the variable ast.
      * @return true, if the variable should be removed.
      */
     private static boolean shouldRemoveVariable(ScopeData scopeData, DetailAST ast) {
         boolean shouldRemove = true;
         for (DetailAST variable : scopeData.uninitializedVariables) {
             if (variable.getText().equals(ast.getText())) {
 
                 // if the variable is declared outside the loop and initialized inside
                 // the loop, then it cannot be declared final, as it can be initialized
                 // more than once in this case
                 if (isInTheSameLoop(variable, ast)
                         || !isUseOfExternalVariableInsideLoop(ast)) {
                     if (isAssignInIfBlock(scopeData, ast) && isAssignInElseBlock(scopeData, ast)) {
                         shouldRemove = true;
                     }
                     else if (isAssignInIfBlock(scopeData, ast)
-                        && isAssignOutsideIfOrElseBlock(scopeData, ast)) {
+                        && isAssignOutsideIfOrElseBlock(scopeData, ast)
+                        && !isAssignInIfBlockWhichIsInsideCaseBlock(scopeData, ast)) {
                         shouldRemove = true;
                     }
                     else {
                         shouldRemove = false;
                     }
                 }
 
                 scopeData.uninitializedVariables.remove(variable);
                 break;
             }
         }
         return shouldRemove;
     }
 
+    private static boolean isAssignInIfBlockWhichIsInsideCaseBlock(ScopeData scopeData,
+                                                                   DetailAST ast) {
+        boolean assignInIfElseBlock = false;
+        FinalVariableCandidate candidate = scopeData.scope.get(ast.getText());
+        if (candidate != null)
+        {
+            assignInIfElseBlock = candidate.assignInIfBlockWhichIsInsideCaseBlock;
+        }
+        return assignInIfElseBlock;
+    }
+
     private static boolean isAssignInIfBlock(ScopeData scopeData, DetailAST ast) {
         boolean assignInIfElseBlock = false;
         FinalVariableCandidate candidate = scopeData.scope.get(ast.getText());
         if (candidate != null)
         {
             assignInIfElseBlock = candidate.assignInIfBlock;
         }
         return assignInIfElseBlock;
     }
 
     private static boolean isAssignInElseBlock(ScopeData scopeData, DetailAST ast) {
         boolean assignInIfElseBlock = false;
         FinalVariableCandidate candidate = scopeData.scope.get(ast.getText());
         if (candidate != null)
         {
             assignInIfElseBlock = candidate.assignInElseBlock;
         }
         return assignInIfElseBlock;
     }
 
     private static boolean isAssignOutsideIfOrElseBlock(ScopeData scopeData, DetailAST ast) {
         boolean assignInIfElseBlock = false;
         FinalVariableCandidate candidate = scopeData.scope.get(ast.getText());
         if (candidate != null)
         {
             assignInIfElseBlock = candidate.assignOutsideIfOrElseBlock;
         }
         return assignInIfElseBlock;
     }
 
     /**
      * Checks whether a variable which is declared ouside loop is used inside loop.
      * For example:
      * <p>
      * {@code
      * int x;
      * for (int i = 0, j = 0; i < j; i++) {
      *     x = 5;
      * }
      * }
      * </p>
      * @param variable variable.
      * @return true if a variable which is declared ouside loop is used inside loop.
      */
     private static boolean isUseOfExternalVariableInsideLoop(DetailAST variable) {
         boolean result = true;
         DetailAST loop2 = variable.getParent();
         while (loop2 != null
             && !isLoopAst(loop2.getType())) {
             loop2 = loop2.getParent();
@@ -674,55 +694,57 @@ public class FinalLocalVariableCheck extends AbstractCheck {
     }
 
     /**
      * Check if both the variables are in the same loop.
      * @param ast1 variable to compare.
      * @param ast2 variable to compare.
      * @return true if both the variables are in the same loop.
      */
     private static boolean isInTheSameLoop(DetailAST ast1, DetailAST ast2) {
         DetailAST loop1 = ast1.getParent();
         while (loop1 != null && !isLoopAst(loop1.getType())) {
             loop1 = loop1.getParent();
         }
         DetailAST loop2 = ast2.getParent();
         while (loop2 != null && !isLoopAst(loop2.getType())) {
             loop2 = loop2.getParent();
         }
         return loop1 != null && loop1 == loop2;
     }
 
     /**
      * Checks whether the ast is a loop.
      * @param ast the ast to check.
      * @return true if the ast is a loop.
      */
     private static boolean isLoopAst(int ast) {
         return Arrays.binarySearch(LOOP_TYPES, ast) >= 0;
     }
 
     /**
      * Holder for the scope data.
      */
     private static class ScopeData {
         /** Contains variable definitions. */
         private final Map<String, FinalVariableCandidate> scope = new HashMap<>();
 
         /** Contains definitions of uninitialized variables. */
         private final Deque<DetailAST> uninitializedVariables = new ArrayDeque<>();
     }
 
     private static class FinalVariableCandidate {
 
         private DetailAST variableIdent;
 
         private boolean assignInIfBlock;
 
         private boolean assignInElseBlock;
 
         private boolean assignOutsideIfOrElseBlock;
 
+        private boolean assignInIfBlockWhichIsInsideCaseBlock;
+
         public FinalVariableCandidate(DetailAST variableIdent) {
             this.variableIdent = variableIdent;
         }
     }
 }
