diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
index 1fdef9c27..7c4640e82 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
@@ -1,97 +1,98 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2015 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle;
 
 import com.google.common.collect.Lists;
 import com.puppycrawl.tools.checkstyle.api.AuditListener;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.UnsupportedEncodingException;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Properties;
 
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.CommandLineParser;
 import org.apache.commons.cli.HelpFormatter;
 import org.apache.commons.cli.Options;
 import org.apache.commons.cli.ParseException;
 import org.apache.commons.cli.PosixParser;
 
 /**
  * Wrapper command line program for the Checker.
- * @author Damian Szczepanik (damianszczepanik@github)
+ * @author the original author or authors.
+ *
  **/
 public final class Main
 {
     /** Don't create instance of this class, use {@link #main(String[])} method instead. */
     private Main()
     {
     }
 
     /**
      * Loops over the files specified checking them for errors. The exit code
      * is the number of errors found in all the files.
      * @param args the command line arguments
      * @throws UnsupportedEncodingException if there is a problem to use UTF-8
      * @throws CheckstyleException if there is a problem with parsing a property file
      * @throws FileNotFoundException if there is a problem with files access
      **/
     public static void main(String... args) throws UnsupportedEncodingException
             , CheckstyleException, FileNotFoundException
     {
         int errorCounter = 0;
         boolean cliViolations = false;
 
         try {
             //parse CLI arguments
             final CommandLine commandLine = parseCli(args);
 
             // show version and exit if it is requested
             if (commandLine.hasOption("v")) {
                 System.out.println("Checkstyle version: "
                         + Main.class.getPackage().getImplementationVersion());
             }
             else {
                 // return error is smth is wrong in arguments
                 final List<String> messages = validateCli(commandLine);
                 cliViolations = !messages.isEmpty();
                 if (messages.isEmpty()) {
 
                     // create config helper object
                     final CliOptions config = convertCliToPojo(commandLine);
                     // run Checker
                     errorCounter = runCheckstyle(config);
 
                 }
                 else {
                     errorCounter = 1;
                     for (String message : messages) {
                         System.out.println(message);
                     }
                 }
             }
@@ -297,103 +298,107 @@ public final class Main
             out = System.out;
             closeOut = false;
         }
 
         // setup a listener
         AuditListener listener = null;
         switch (format) {
             case "xml":
                 listener = new XMLLogger(out, closeOut);
                 break;
 
             case "plain":
                 listener = new DefaultLogger(out, closeOut);
                 break;
 
             default:
                 throw new IllegalStateException("Invalid output format. Found '" + format
                         + "' but expected 'plain' or 'xml'.");
         }
 
         return listener;
     }
 
     /**
      * Determines the files to process.
      * @param filesToProcess
      *        arguments that were not processed yet but shall be
      * @return list of files to process
      */
     private static List<File> getFilesToProcess(String... filesToProcess)
     {
         final List<File> files = Lists.newLinkedList();
         for (String element : filesToProcess) {
             files.addAll(listFiles(new File(element)));
         }
 
         return files;
     }
 
     /**
      * Traverses a specified node looking for files to check. Found files are added to a specified
      * list. Subdirectories are also traversed.
      * @param node
      *        the node to process
      * @return found files
      */
     private static List<File> listFiles(File node)
     {
         // could be replaced with org.apache.commons.io.FileUtils.list() method
         // if only we add commons-io library
-        final List<File> files = Lists.newLinkedList();
+        final List<File> result = Lists.newLinkedList();
 
         if (node.canRead()) {
             if (node.isDirectory()) {
-                for (File element : node.listFiles()) {
-                    files.addAll(listFiles(element));
+                final File[] files = node.listFiles();
+                // listFiles() can return null, so we need to check it
+                if (files != null) {
+                    for (File element : files) {
+                        result.addAll(listFiles(element));
+                    }
                 }
             }
             else if (node.isFile()) {
-                files.add(node);
+                result.add(node);
             }
         }
-        return files;
+        return result;
     }
 
     /** Prints the usage information. **/
     private static void printUsage()
     {
         final HelpFormatter hf = new HelpFormatter();
         hf.printHelp(String.format("java %s [options] -c <config.xml> file...",
                 Main.class.getName()), buildOptions());
     }
 
     /**
      * Builds and returns list of parameters supported by cli Checkstyle.
      * @return available options
      */
     private static Options buildOptions()
     {
         final Options options = new Options();
         options.addOption("c", true, "Sets the check configuration file to use.");
         options.addOption("o", true, "Sets the output file. Defaults to stdout");
         options.addOption("p", true, "Loads the properties file");
         options.addOption("f", true, "Sets the output format. (plain|xml). Defaults to plain");
         options.addOption("v", false, "Print product version and exit");
         return options;
     }
 
     /** Helper structure to clear show what is required for Checker to run. **/
     private static class CliOptions
     {
         /** properties file location */
         private String propertiesLocation;
         /** config file location */
         private String configLocation;
         /** output format */
         private String format;
         /** output file location */
         private String outputLocation;
         /** list of file to validate */
         private List<File> files;
     }
 }
