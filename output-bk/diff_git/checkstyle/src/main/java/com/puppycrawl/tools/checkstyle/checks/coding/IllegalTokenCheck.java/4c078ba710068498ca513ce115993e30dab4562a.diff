diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenCheck.java
index 61bb4ad18..006ccd9a4 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenCheck.java
@@ -54,62 +54,62 @@ import java.util.Set;
  */
 public class IllegalTokenCheck
     extends Check {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "illegal.token";
 
     @Override
     public int[] getDefaultTokens() {
         return new int[] {
             TokenTypes.LABELED_STAT,
         };
     }
 
     @Override
     public int[] getAcceptableTokens() {
         // Any tokens set by property 'tokens' are acceptable
         int[] tokensToCopy = getDefaultTokens();
         final Set<String> tokenNames = getTokenNames();
         if (!tokenNames.isEmpty()) {
             tokensToCopy = new int[tokenNames.size()];
             int i = 0;
             for (String name : tokenNames) {
                 tokensToCopy[i] = Utils.getTokenId(name);
                 i++;
             }
         }
         final int[] copy = new int[tokensToCopy.length];
         System.arraycopy(tokensToCopy, 0, copy, 0, tokensToCopy.length);
         return copy;
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         log(
             ast.getLineNo(),
             ast.getColumnNo(),
             MSG_KEY,
             convertToString(ast)
         );
     }
 
     /**
      * Converts given AST node to string representation.
      * @param ast node to be represented as string
      * @return string representation of AST node
      */
-    private String convertToString(DetailAST ast) {
+    private static String convertToString(DetailAST ast) {
         final String tokenText;
         if (ast.getType() == TokenTypes.LABELED_STAT) {
             tokenText = ast.getFirstChild().getText() + ast.getText();
         }
         else {
             tokenText = ast.getText();
         }
         return tokenText;
     }
 
 }
