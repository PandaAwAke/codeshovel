diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
index 30df0d8a8..82c09392d 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
@@ -247,141 +247,151 @@ public class CheckstyleAntTask extends Task {
     ////////////////////////////////////////////////////////////////////////////
 
     @Override
     public void execute() {
         final long startTime = System.currentTimeMillis();
 
         try {
             realExecute();
         }
         finally {
             final long endTime = System.currentTimeMillis();
             log("Total execution took " + (endTime - startTime) + TIME_SUFFIX,
                 Project.MSG_VERBOSE);
         }
     }
 
     /**
      * Helper implementation to perform execution.
      */
     private void realExecute() {
         // output version info in debug mode
         final ResourceBundle compilationProperties = ResourceBundle
                 .getBundle("checkstylecompilation");
         final String version = compilationProperties
                 .getString("checkstyle.compile.version");
         final String compileTimestamp = compilationProperties
                 .getString("checkstyle.compile.timestamp");
         log("checkstyle version " + version, Project.MSG_VERBOSE);
         log("compiled on " + compileTimestamp, Project.MSG_VERBOSE);
 
         // Check for no arguments
         if (fileName == null && fileSets.isEmpty()) {
             throw new BuildException(
                     "Must specify at least one of 'file' or nested 'fileset'.",
                     getLocation());
         }
 
         if (configLocation == null) {
             throw new BuildException("Must specify 'config'.", getLocation());
         }
 
         // Create the checker
         Checker checker = null;
         try {
             checker = createChecker();
 
             final SeverityLevelCounter warningCounter =
                 new SeverityLevelCounter(SeverityLevel.WARNING);
             checker.addListener(warningCounter);
 
-            // Process the files
-            long startTime = System.currentTimeMillis();
-            final List<File> files = scanFileSets();
-            long endTime = System.currentTimeMillis();
-            log("To locate the files took " + (endTime - startTime) + TIME_SUFFIX,
-                Project.MSG_VERBOSE);
-
-            log("Running Checkstyle " + version + " on " + files.size()
-                    + " files", Project.MSG_INFO);
-            log("Using configuration " + configLocation, Project.MSG_VERBOSE);
-
-            startTime = System.currentTimeMillis();
-            final int numErrs = checker.process(files);
-            endTime = System.currentTimeMillis();
-            log("To process the files took " + (endTime - startTime) + TIME_SUFFIX,
-                Project.MSG_VERBOSE);
-            final int numWarnings = warningCounter.getCount();
-            final boolean ok = numErrs <= maxErrors
-                    && numWarnings <= maxWarnings;
-
-            // Handle the return status
-            if (!ok) {
-                final String failureMsg =
-                        "Got " + numErrs + " errors and " + numWarnings
-                                + " warnings.";
-                if (failureProperty != null) {
-                    getProject().setProperty(failureProperty, failureMsg);
-                }
-
-                if (failOnViolation) {
-                    throw new BuildException(failureMsg, getLocation());
-                }
-            }
+            processFiles(checker, warningCounter, version);
         }
         finally {
             if (checker != null) {
                 checker.destroy();
             }
         }
     }
 
+    /**
+     * Scans and processes files by means given checker.
+     * @param checker Checker to process files
+     * @param warningCounter Checker's counter of warnings
+     * @param checkstyleVersion Checkstyle compile version
+     */
+    private void processFiles(Checker checker, final SeverityLevelCounter warningCounter,
+            final String checkstyleVersion) {
+        long startTime = System.currentTimeMillis();
+        final List<File> files = scanFileSets();
+        long endTime = System.currentTimeMillis();
+        log("To locate the files took " + (endTime - startTime) + TIME_SUFFIX,
+            Project.MSG_VERBOSE);
+
+        log("Running Checkstyle " + checkstyleVersion + " on " + files.size()
+                + " files", Project.MSG_INFO);
+        log("Using configuration " + configLocation, Project.MSG_VERBOSE);
+
+        startTime = System.currentTimeMillis();
+        final int numErrs = checker.process(files);
+        endTime = System.currentTimeMillis();
+        log("To process the files took " + (endTime - startTime) + TIME_SUFFIX,
+            Project.MSG_VERBOSE);
+        final int numWarnings = warningCounter.getCount();
+        final boolean ok = numErrs <= maxErrors
+                && numWarnings <= maxWarnings;
+
+        // Handle the return status
+        if (!ok) {
+            final String failureMsg =
+                    "Got " + numErrs + " errors and " + numWarnings
+                            + " warnings.";
+            if (failureProperty != null) {
+                getProject().setProperty(failureProperty, failureMsg);
+            }
+
+            if (failOnViolation) {
+                throw new BuildException(failureMsg, getLocation());
+            }
+        }
+    }
+
     /**
      * Creates new instance of {@code Checker}.
      * @return new instance of {@code Checker}
      */
     private Checker createChecker() {
         Checker checker;
         try {
             final Properties props = createOverridingProperties();
             final Configuration config =
                 ConfigurationLoader.loadConfiguration(
                     configLocation,
                     new PropertiesExpander(props),
                     omitIgnoredModules);
 
             final DefaultContext context = new DefaultContext();
             final ClassLoader loader = new AntClassLoader(getProject(),
                     classpath);
             context.add("classloader", loader);
 
             final ClassLoader moduleClassLoader =
                 Checker.class.getClassLoader();
             context.add("moduleClassLoader", moduleClassLoader);
 
             checker = new Checker();
 
             checker.contextualize(context);
             checker.configure(config);
 
             // setup the listeners
             final AuditListener[] listeners = getListeners();
             for (AuditListener element : listeners) {
                 checker.addListener(element);
             }
         }
         catch (final Exception e) {
             throw new BuildException("Unable to create a Checker: "
                     + e.getMessage(), e);
         }
 
         return checker;
     }
 
     /**
      * Create the Properties object based on the arguments specified
      * to the ANT task.
      * @return the properties for property expansion expansion
      * @throws BuildException if an error occurs
      */
     private Properties createOverridingProperties() {
         final Properties retVal = new Properties();
