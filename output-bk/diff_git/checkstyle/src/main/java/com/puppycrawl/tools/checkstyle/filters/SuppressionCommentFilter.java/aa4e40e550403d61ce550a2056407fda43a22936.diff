diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java
index 6e7fe83f6..06311cb78 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java
@@ -393,94 +393,95 @@ public class SuppressionCommentFilter
          * @return {@code true}if the suppression turns reporting on.
          */
         public boolean isOn() {
             return on;
         }
 
         /**
          * Compares the position of this tag in the file
          * with the position of another tag.
          * @param object the tag to compare with this one.
          * @return a negative number if this tag is before the other tag,
          * 0 if they are at the same position, and a positive number if this
          * tag is after the other tag.
          */
         @Override
         public int compareTo(Tag object) {
             if (line == object.line) {
                 return Integer.compare(column, object.column);
             }
 
             return Integer.compare(line, object.line);
         }
 
         @Override
         public boolean equals(Object o) {
             if (this == o) {
                 return true;
             }
             if (o == null || getClass() != o.getClass()) {
                 return false;
             }
             final Tag tag = (Tag) o;
             return Objects.equals(line, tag.line)
                     && Objects.equals(column, tag.column)
                     && Objects.equals(on, tag.on)
                     && Objects.equals(text, tag.text);
         }
 
         @Override
         public int hashCode() {
             return Objects.hash(text, line, column, on);
         }
 
         /**
          * Determines whether the source of an audit event
          * matches the text of this tag.
          * @param event the {@code AuditEvent} to check.
          * @return true if the source of event matches the text of this tag.
          */
         public boolean isMatch(AuditEvent event) {
-            final Matcher tagMatcher =
-                tagCheckRegexp.matcher(event.getSourceName());
+            boolean match = false;
+            final Matcher tagMatcher = tagCheckRegexp.matcher(event.getSourceName());
             if (tagMatcher.find()) {
                 if (tagMessageRegexp != null) {
-                    final Matcher messageMatcher =
-                            tagMessageRegexp.matcher(event.getMessage());
-                    return messageMatcher.find();
+                    final Matcher messageMatcher = tagMessageRegexp.matcher(event.getMessage());
+                    match = messageMatcher.find();
+                }
+                else {
+                    match = true;
                 }
-                return true;
             }
-            return false;
+            return match;
         }
 
         /**
          * Expand based on a matching comment.
          * @param comment the comment.
          * @param stringToExpand the string to expand.
          * @param regexp the parsed expander.
          * @return the expanded string
          */
         private static String expandFromCoont(
             String comment,
             String stringToExpand,
             Pattern regexp) {
             final Matcher matcher = regexp.matcher(comment);
             // Match primarily for effect.
             if (!matcher.find()) {
                 return stringToExpand;
             }
             String result = stringToExpand;
             for (int i = 0; i <= matcher.groupCount(); i++) {
                 // $n expands comment match like in Pattern.subst().
                 result = result.replaceAll("\\$" + i, matcher.group(i));
             }
             return result;
         }
 
         @Override
         public final String toString() {
             return "Tag[line=" + line + "; col=" + column
                 + "; on=" + on + "; text='" + text + "']";
         }
     }
 }
