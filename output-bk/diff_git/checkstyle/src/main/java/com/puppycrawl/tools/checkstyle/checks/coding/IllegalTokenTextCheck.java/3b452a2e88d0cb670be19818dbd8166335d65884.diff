diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenTextCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenTextCheck.java
index d1fb2a67b..15180fa26 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenTextCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenTextCheck.java
@@ -45,95 +45,86 @@ import com.puppycrawl.tools.checkstyle.checks.AbstractFormatCheck;
  * &lt;module name="IllegalTokenText"&gt;
  *     &lt;property name="tokens" value="NUM_INT,NUM_LONG"/&gt;
  *     &lt;property name="format" value="^0[^lx]"/&gt;
  *     &lt;property name="ignoreCase" value="true"/&gt;
  * &lt;/module&gt;
  * </pre>
  * @author Rick Giles
  */
 public class IllegalTokenTextCheck
     extends AbstractFormatCheck {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "illegal.token.text";
 
     /**
      * Custom message for report if illegal regexp found
      * ignored if empty.
      */
     private String message = "";
 
     /**
      * Instantiates a new instance.
      */
     public IllegalTokenTextCheck() {
         // the empty language
         super("$^");
     }
 
     @Override
     public int[] getDefaultTokens() {
         return new int[0];
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return Utils.getAllTokenIds();
     }
 
     @Override
     public int[] getRequiredTokens() {
         return new int[0];
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final String text = ast.getText();
         if (getRegexp().matcher(text).find()) {
-            String customMessage = getMessage();
+            String customMessage = message;
             if (customMessage.isEmpty()) {
                 customMessage = MSG_KEY;
             }
             log(
                 ast.getLineNo(),
                 ast.getColumnNo(),
                 customMessage,
                 getFormat());
         }
     }
 
     /**
      * Setter for message property.
      * @param message custom message which should be used
      *                 to report about violations.
      */
     public void setMessage(String message) {
         if (message == null) {
             this.message = "";
         }
         else {
             this.message = message;
         }
     }
 
-    /**
-     * Getter for message property.
-     * @return custom message which should be used
-     * to report about violations.
-     */
-    public String getMessage() {
-        return message;
-    }
-
     /**
      * Set whether or not the match is case sensitive.
      * @param caseInsensitive true if the match is case insensitive.
      */
     public void setIgnoreCase(boolean caseInsensitive) {
         if (caseInsensitive) {
             setCompileFlags(Pattern.CASE_INSENSITIVE);
         }
     }
 }
