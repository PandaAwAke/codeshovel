diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java
index 8031bcc27..74affccaa 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java
@@ -89,101 +89,101 @@ public class GenericWhitespaceCheck extends Check
         if (aAST.getType() == TokenTypes.GENERIC_START) {
             processStart(aAST);
             mDepth++;
         }
         else if (aAST.getType() == TokenTypes.GENERIC_END) {
             processEnd(aAST);
             mDepth--;
         }
     }
 
     /**
      * Checks the token for the end of Generics.
      * @param aAST the token to check
      */
     private void processEnd(DetailAST aAST)
     {
         final String line = getLine(aAST.getLineNo() - 1);
         final int before = aAST.getColumnNo() - 1;
         final int after = aAST.getColumnNo() + 1;
 
         if ((0 <= before) && Character.isWhitespace(line.charAt(before))
                 && !Utils.whitespaceBefore(before, line))
         {
             log(aAST.getLineNo(), before, "ws.preceded", ">");
         }
 
         if (after < line.length()) {
 
             // Check if the last Generic, in which case must be a whitespace
             // or a '(),[.'.
             if (1 == mDepth) {
                 final char charAfter = line.charAt(after);
 
                 // Need to handle a number of cases. First is:
                 //    Collections.<Object>emptySet();
                 //                        ^
                 //                        +--- whitespace not allowed
                 if ((aAST.getParent().getType() == TokenTypes.TYPE_ARGUMENTS)
                     && (aAST.getParent().getParent().getType()
                         == TokenTypes.DOT)
                     && (aAST.getParent().getParent().getParent().getType()
                         == TokenTypes.METHOD_CALL))
                 {
                     if (Character.isWhitespace(charAfter)) {
                         log(aAST.getLineNo(), after, "ws.followed", ">");
                     }
                 }
                 else if (!Character.isWhitespace(charAfter)
                     && ('(' != charAfter) && (')' != charAfter)
                     && (',' != charAfter) && ('[' != charAfter)
-                    && ('.' != charAfter))
+                    && ('.' != charAfter) && (':' != charAfter))
                 {
                     log(aAST.getLineNo(), after, "ws.illegalFollow", ">");
                 }
             }
             else {
                 // In a nested Generic type, so can only be a '>' or ',' or '&'
 
                 // In case of several extends definitions:
                 //
                 //   class IntEnumValueType<E extends Enum<E> & IntEnum>
                 //                                          ^
                 //   should be whitespace if followed by & -+
                 //
                 final int indexOfAmp = line.indexOf('&', after);
                 if ((indexOfAmp != -1)
                     && whitespaceBetween(after, indexOfAmp, line))
                 {
                     if (indexOfAmp - after == 0) {
                         log(aAST.getLineNo(), after, "ws.notPreceded", "&");
                     }
                     else if (indexOfAmp - after != 1) {
                         log(aAST.getLineNo(), after, "ws.followed", ">");
                     }
                 }
                 else if (line.charAt(after) == ' ') {
                     log(aAST.getLineNo(), after, "ws.followed", ">");
                 }
             }
         }
     }
 
     /**
      * Checks the token for the start of Generics.
      * @param aAST the token to check
      */
     private void processStart(DetailAST aAST)
     {
         final String line = getLine(aAST.getLineNo() - 1);
         final int before = aAST.getColumnNo() - 1;
         final int after = aAST.getColumnNo() + 1;
 
         // Need to handle two cases as in:
         //
         //   public static <T> Callable<T> callable(Runnable task, T result)
         //                 ^           ^
         //      ws reqd ---+           +--- whitespace NOT required
         //
         if (0 <= before) {
             // Detect if the first case
             final DetailAST parent = aAST.getParent();
