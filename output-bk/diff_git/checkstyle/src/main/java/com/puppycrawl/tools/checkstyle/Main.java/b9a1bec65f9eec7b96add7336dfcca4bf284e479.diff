diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
index 4561eb279..a2c1e6a16 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
@@ -28,177 +28,175 @@ import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.util.List;
 import java.util.Properties;
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.CommandLineParser;
 import org.apache.commons.cli.HelpFormatter;
 import org.apache.commons.cli.Options;
 import org.apache.commons.cli.ParseException;
 import org.apache.commons.cli.PosixParser;
 
 /**
  * Wrapper command line program for the Checker.
  * @author Oliver Burn
  **/
 public final class Main
 {
     /** the options to the command line */
     private static final Options OPTS = new Options();
     static {
         OPTS.addOption("c", true, "The check configuration file to use.");
         OPTS.addOption("o", true, "Sets the output file. Defaults to stdout");
         OPTS.addOption("p", true, "Loads the properties file");
         OPTS.addOption(
             "f",
             true,
             "Sets the output format. (plain|xml). Defaults to plain");
         OPTS.addOption("v", false, "Print product version and exit");
     }
 
     /** Stop instances being created. */
     private Main()
     {
     }
 
     /**
      * Loops over the files specified checking them for errors. The exit code
      * is the number of errors found in all the files.
      * @param args the command line arguments
      **/
     public static void main(String[] args)
     {
         // parse the parameters
         final CommandLineParser clp = new PosixParser();
         CommandLine line = null;
         try {
             line = clp.parse(OPTS, args);
         }
         catch (final ParseException e) {
-            e.printStackTrace();
             usage();
         }
         assert line != null;
 
         // show version and exit
         if (line.hasOption("v")) {
             System.out.println("Checkstyle version: "
                     + Main.class.getPackage().getImplementationVersion());
             System.exit(0);
         }
 
         // setup the properties
         final Properties props =
             line.hasOption("p")
                 ? loadProperties(new File(line.getOptionValue("p")))
                 : System.getProperties();
 
         // ensure a config file is specified
         if (!line.hasOption("c")) {
             System.out.println("Must specify a config XML file.");
             usage();
         }
 
         final Configuration config = loadConfig(line, props);
 
         // setup the output stream
         OutputStream out = null;
         boolean closeOut = false;
         if (line.hasOption("o")) {
             final String fname = line.getOptionValue("o");
             try {
                 out = new FileOutputStream(fname);
                 closeOut = true;
             }
             catch (final FileNotFoundException e) {
                 System.out.println("Could not find file: '" + fname + "'");
                 System.exit(1);
             }
         }
         else {
             out = System.out;
             closeOut = false;
         }
 
         final AuditListener listener = createListener(line, out, closeOut);
         final List<File> files = getFilesToProcess(line);
         final Checker c = createChecker(config, listener);
         final int numErrs = c.process(files);
         c.destroy();
         System.exit(numErrs);
     }
 
     /**
      * Creates the Checker object.
      *
      * @param config the configuration to use
      * @param nosy the sticky beak to track what happens
      * @return a nice new fresh Checker
      */
     private static Checker createChecker(Configuration config,
                                          AuditListener nosy)
     {
         Checker c = null;
         try {
             c = new Checker();
 
             final ClassLoader moduleClassLoader =
                 Checker.class.getClassLoader();
             c.setModuleClassLoader(moduleClassLoader);
             c.configure(config);
             c.addListener(nosy);
         }
         catch (final Exception e) {
             System.out.println("Unable to create Checker: "
                                + e.getMessage());
-            e.printStackTrace(System.out);
             System.exit(1);
         }
         return c;
     }
 
     /**
      * Determines the files to process.
      *
      * @param line the command line options specifying what files to process
      * @return list of files to process
      */
     private static List<File> getFilesToProcess(CommandLine line)
     {
         final List<File> files = Lists.newLinkedList();
         final String[] remainingArgs = line.getArgs();
         for (String element : remainingArgs) {
             traverse(new File(element), files);
         }
 
         if (files.isEmpty()) {
             System.out.println("Must specify files to process");
             usage();
         }
         return files;
     }
 
     /**
      * Create the audit listener
      *
      * @param line command line options supplied
      * @param out the stream to log to
      * @param closeOut whether the stream should be closed
      * @return a fresh new <code>AuditListener</code>
      */
     private static AuditListener createListener(CommandLine line,
                                                 OutputStream out,
                                                 boolean closeOut)
     {
         final String format =
             line.hasOption("f") ? line.getOptionValue("f") : "plain";
 
         AuditListener listener = null;
         if ("xml".equals(format)) {
             listener = new XMLLogger(out, closeOut);
         }
         else if ("plain".equals(format)) {
             listener = new DefaultLogger(out, closeOut, true);
         }
         else {
             System.out.println("Invalid format: (" + format
