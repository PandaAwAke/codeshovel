diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
index 778d6eb7b..363663b09 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
@@ -190,110 +190,100 @@ public class ImportOrderCheck
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_ORDERING = "import.ordering";
 
     /** The special wildcard that catches all remaining groups. */
     private static final String WILDCARD_GROUP_NAME = "*";
 
     /** Empty array of pattern type needed to initialize check. */
     private static final Pattern[] EMPTY_PATTERN_ARRAY = new Pattern[0];
 
     /** List of import groups specified by the user. */
     private Pattern[] groups = EMPTY_PATTERN_ARRAY;
     /** Require imports in group be separated. */
     private boolean separated;
     /** Require imports in group. */
     private boolean ordered = true;
     /** Should comparison be case sensitive. */
     private boolean caseSensitive = true;
 
     /** Last imported group. */
     private int lastGroup;
     /** Line number of last import. */
     private int lastImportLine;
     /** Name of last import. */
     private String lastImport;
     /** If last import was static. */
     private boolean lastImportStatic;
     /** Whether there was any imports. */
     private boolean beforeFirstImport;
     /** Whether static imports should be sorted alphabetically or not. */
     private boolean sortStaticImportsAlphabetically;
 
     /** The policy to enforce. */
     private ImportOrderOption option = ImportOrderOption.UNDER;
 
     /**
      * Set the option to enforce.
      * @param optionStr string to decode option from
      * @throws ConversionException if unable to decode
      */
     public void setOption(String optionStr) {
         try {
             option = ImportOrderOption.valueOf(optionStr.trim().toUpperCase(Locale.ENGLISH));
         }
         catch (IllegalArgumentException iae) {
             throw new ConversionException("unable to parse " + optionStr, iae);
         }
     }
 
-    /**
-     * Gets option set.
-     * @return the {@code option} set
-     */
-    public ImportOrderOption getAbstractOption() {
-        // WARNING!! Do not rename this method to getOption(). It breaks
-        // BeanUtils, which will silently not call setOption. Very annoying!
-        return option;
-    }
-
     /**
      * Sets the list of package groups and the order they should occur in the
      * file.
      *
      * @param packageGroups a comma-separated list of package names/prefixes.
      */
     public void setGroups(String... packageGroups) {
         groups = new Pattern[packageGroups.length];
 
         for (int i = 0; i < packageGroups.length; i++) {
             String pkg = packageGroups[i];
             final StringBuilder pkgBuilder = new StringBuilder(pkg);
             Pattern grp;
 
             // if the pkg name is the wildcard, make it match zero chars
             // from any name, so it will always be used as last resort.
             if (WILDCARD_GROUP_NAME.equals(pkg)) {
                 // matches any package
                 grp = Pattern.compile("");
             }
             else if (CommonUtils.startsWithChar(pkg, '/')) {
                 if (!CommonUtils.endsWithChar(pkg, '/')) {
                     throw new IllegalArgumentException("Invalid group");
                 }
                 pkg = pkg.substring(1, pkg.length() - 1);
                 grp = Pattern.compile(pkg);
             }
             else {
                 if (!CommonUtils.endsWithChar(pkg, '.')) {
                     pkgBuilder.append('.');
                 }
                 grp = Pattern.compile("^" + Pattern.quote(pkgBuilder.toString()));
             }
 
             groups[i] = grp;
         }
     }
 
     /**
      * Sets whether or not imports should be ordered within any one group of
      * imports.
      *
      * @param ordered
      *            whether lexicographic ordering of imports within a group
      *            required or not.
      */
     public void setOrdered(boolean ordered) {
         this.ordered = ordered;
     }
 
@@ -321,205 +311,204 @@ public class ImportOrderCheck
     /**
      * Sets whether static imports (when grouped using 'top' and 'bottom' option)
      * are sorted alphabetically or according to the package groupings.
      * @param sortAlphabetically true or false.
      */
     public void setSortStaticImportsAlphabetically(boolean sortAlphabetically) {
         sortStaticImportsAlphabetically = sortAlphabetically;
     }
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};
     }
 
     @Override
     public int[] getRequiredTokens() {
         return new int[] {TokenTypes.IMPORT};
     }
 
     @Override
     public void beginTree(DetailAST rootAST) {
         lastGroup = Integer.MIN_VALUE;
         lastImportLine = Integer.MIN_VALUE;
         lastImport = "";
         lastImportStatic = false;
         beforeFirstImport = true;
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final FullIdent ident;
         final boolean isStatic;
 
         if (ast.getType() == TokenTypes.IMPORT) {
             ident = FullIdent.createFullIdentBelow(ast);
             isStatic = false;
         }
         else {
             ident = FullIdent.createFullIdent(ast.getFirstChild()
                     .getNextSibling());
             isStatic = true;
         }
 
         final boolean isStaticAndNotLastImport = isStatic && !lastImportStatic;
         final boolean isLastImportAndNonStatic = lastImportStatic && !isStatic;
-        final ImportOrderOption abstractOption = getAbstractOption();
 
         // using set of IF instead of SWITCH to analyze Enum options to satisfy coverage.
         // https://github.com/checkstyle/checkstyle/issues/1387
-        if (abstractOption == ImportOrderOption.TOP) {
+        if (option == ImportOrderOption.TOP) {
 
             if (isLastImportAndNonStatic) {
                 lastGroup = Integer.MIN_VALUE;
                 lastImport = "";
             }
             doVisitToken(ident, isStatic, isStaticAndNotLastImport);
 
         }
-        else if (abstractOption == ImportOrderOption.BOTTOM) {
+        else if (option == ImportOrderOption.BOTTOM) {
 
             if (isStaticAndNotLastImport) {
                 lastGroup = Integer.MIN_VALUE;
                 lastImport = "";
             }
             doVisitToken(ident, isStatic, isLastImportAndNonStatic);
 
         }
-        else if (abstractOption == ImportOrderOption.ABOVE) {
+        else if (option == ImportOrderOption.ABOVE) {
             // previous non-static but current is static
             doVisitToken(ident, isStatic, isStaticAndNotLastImport);
 
         }
-        else if (abstractOption == ImportOrderOption.UNDER) {
+        else if (option == ImportOrderOption.UNDER) {
             doVisitToken(ident, isStatic, isLastImportAndNonStatic);
 
         }
-        else if (abstractOption == ImportOrderOption.INFLOW) {
+        else if (option == ImportOrderOption.INFLOW) {
             // "previous" argument is useless here
             doVisitToken(ident, isStatic, true);
 
         }
         else {
             throw new IllegalStateException(
-                    "Unexpected option for static imports: " + abstractOption);
+                    "Unexpected option for static imports: " + option);
         }
 
         lastImportLine = ast.findFirstToken(TokenTypes.SEMI).getLineNo();
         lastImportStatic = isStatic;
         beforeFirstImport = false;
     }
 
     /**
      * Shares processing...
      *
      * @param ident the import to process.
      * @param isStatic whether the token is static or not.
      * @param previous previous non-static but current is static (above), or
      *                  previous static but current is non-static (under).
      */
     private void doVisitToken(FullIdent ident, boolean isStatic,
             boolean previous) {
         final String name = ident.getText();
         final int groupIdx = getGroupNumber(name);
         final int line = ident.getLineNo();
 
         if (!beforeFirstImport && isAlphabeticallySortableStaticImport(isStatic)
                 || groupIdx == lastGroup) {
             doVisitTokenInSameGroup(isStatic, previous, name, line);
         }
         else if (groupIdx > lastGroup) {
             if (!beforeFirstImport && separated && line - lastImportLine < 2) {
                 log(line, MSG_SEPARATION, name);
             }
         }
         else {
             log(line, MSG_ORDERING, name);
         }
 
         lastGroup = groupIdx;
         lastImport = name;
     }
 
     /**
      * Checks whether static imports grouped by <b>top</b> or <b>bottom</b> option
      * are sorted alphabetically or not.
      * @param isStatic if current import is static.
      * @return true if static imports should be sorted alphabetically.
      */
     private boolean isAlphabeticallySortableStaticImport(boolean isStatic) {
         return isStatic && sortStaticImportsAlphabetically
-                && (getAbstractOption() == ImportOrderOption.TOP
-                    || getAbstractOption() == ImportOrderOption.BOTTOM);
+                && (option == ImportOrderOption.TOP
+                    || option == ImportOrderOption.BOTTOM);
     }
 
     /**
      * Shares processing...
      *
      * @param isStatic whether the token is static or not.
      * @param previous previous non-static but current is static (above), or
      *     previous static but current is non-static (under).
      * @param name the name of the current import.
      * @param line the line of the current import.
      */
     private void doVisitTokenInSameGroup(boolean isStatic,
             boolean previous, String name, int line) {
         if (!ordered) {
             return;
         }
 
-        if (getAbstractOption() == ImportOrderOption.INFLOW) {
+        if (option == ImportOrderOption.INFLOW) {
             // out of lexicographic order
             if (compare(lastImport, name, caseSensitive) > 0) {
                 log(line, MSG_ORDERING, name);
             }
         }
         else {
             final boolean shouldFireError =
                 // current and previous static or current and
                 // previous non-static
                 lastImportStatic == isStatic
                 &&
                         // and out of lexicographic order
                         compare(lastImport, name, caseSensitive) > 0
                 ||
                 // previous non-static but current is static (above)
                 // or
                 // previous static but current is non-static (under)
                 previous;
 
             if (shouldFireError) {
                 log(line, MSG_ORDERING, name);
             }
         }
     }
 
     /**
      * Finds out what group the specified import belongs to.
      *
      * @param name the import name to find.
      * @return group number for given import name.
      */
     private int getGroupNumber(String name) {
         int bestIndex = groups.length;
         int bestLength = -1;
         int bestPos = 0;
 
         // find out what group this belongs in
         // loop over groups and get index
         for (int i = 0; i < groups.length; i++) {
             final Matcher matcher = groups[i].matcher(name);
             while (matcher.find()) {
                 final int length = matcher.end() - matcher.start();
                 if (length > bestLength
                     || length == bestLength && matcher.start() < bestPos) {
                     bestIndex = i;
                     bestLength = length;
                     bestPos = matcher.start();
                 }
             }
         }
