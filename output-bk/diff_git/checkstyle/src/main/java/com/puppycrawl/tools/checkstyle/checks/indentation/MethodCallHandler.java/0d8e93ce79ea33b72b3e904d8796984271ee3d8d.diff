diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java
index c4c2b1eab..3d1267e51 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java
@@ -1,96 +1,96 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2016 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks.indentation;
 
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * Handler for method calls.
  *
  * @author jrichard
  */
 public class MethodCallHandler extends AbstractExpressionHandler {
     /**
      * Construct an instance of this handler with the given indentation check,
      * abstract syntax tree, and parent handler.
      *
      * @param indentCheck   the indentation check
      * @param ast           the abstract syntax tree
      * @param parent        the parent handler
      */
     public MethodCallHandler(IndentationCheck indentCheck,
         DetailAST ast, AbstractExpressionHandler parent) {
         super(indentCheck, "method call", ast, parent);
     }
 
     @Override
     protected IndentLevel getIndentImpl() {
-        IndentLevel indentLevel;
+        final IndentLevel indentLevel;
         // if inside a method call's params, this could be part of
         // an expression, so get the previous line's start
         if (getParent() instanceof MethodCallHandler) {
             final MethodCallHandler container =
                     (MethodCallHandler) getParent();
             if (areOnSameLine(container.getMainAst(), getMainAst())
                     || isChainedMethodCallWrapped()) {
                 indentLevel = container.getIndent();
             }
             // we should increase indentation only if this is the first
             // chained method call which was moved to the next line
             else {
                 indentLevel = new IndentLevel(container.getIndent(), getBasicOffset());
             }
         }
         else {
             // if our expression isn't first on the line, just use the start
             // of the line
             final LineSet lines = new LineSet();
             findSubtreeLines(lines, getMainAst().getFirstChild(), true);
             final int firstCol = lines.firstLineCol();
             final int lineStart = getLineStart(getFirstAst(getMainAst()));
             if (lineStart == firstCol) {
                 indentLevel = super.getIndentImpl();
             }
             else {
                 indentLevel = new IndentLevel(lineStart);
             }
         }
         return indentLevel;
     }
 
     /**
      * If this is the first chained method call which was moved to the next line.
      * @return true if chained class are wrapped
      */
     private boolean isChainedMethodCallWrapped() {
         boolean result = false;
         final DetailAST main = getMainAst();
         final DetailAST dot = main.getFirstChild();
         final DetailAST target = dot.getFirstChild();
 
         final DetailAST dot1 = target.getFirstChild();
         final DetailAST target1 = dot1.getFirstChild();
 
         if (dot1.getType() == TokenTypes.DOT
             && target1.getType() == TokenTypes.METHOD_CALL) {
             result = true;
         }
         return result;
