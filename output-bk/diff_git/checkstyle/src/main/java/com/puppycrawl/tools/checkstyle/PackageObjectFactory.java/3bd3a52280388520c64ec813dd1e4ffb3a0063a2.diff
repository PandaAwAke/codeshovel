diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java b/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
index 2c123a818..4bad4e308 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
@@ -184,115 +184,115 @@ public class PackageObjectFactory implements ModuleFactory {
     }
 
     /**
      * Generate the set of all possible names for a class name.
      * @param name the name of the class get possible names for.
      * @return all possible name for a class.
      */
     private Set<String> getAllPossibleNames(String name) {
         final Set<String> names = new HashSet<>();
         names.addAll(packages.stream().map(packageName -> packageName + name)
             .collect(Collectors.toList()));
         return names;
     }
 
     /**
      * Creates a string by joining package names with a class name.
      * @param className name of the class for joining.
      * @param packages packages names.
      * @return a string which is obtained by joining package names with a class name.
      */
     private static String joinPackageNamesWithClassName(String className, Set<String> packages) {
         return packages.stream().filter(name -> name != null)
             .collect(Collectors.joining(className + STRING_SEPARATOR, "", className));
     }
 
     /**
      * Creates a new instance of a named class.
      * @param className the name of the class to instantiate.
      * @return the {@code Object} created by loader or null.
      * @throws CheckstyleException if the class fails to instantiate.
      */
     private Object createObject(String className) throws CheckstyleException {
         Class<?> clazz = null;
 
         try {
             clazz = Class.forName(className, true, moduleClassLoader);
         }
         catch (final ReflectiveOperationException | NoClassDefFoundError ignored) {
             // keep looking, ignoring exception
         }
 
         Object instance = null;
 
         if (clazz != null) {
             try {
                 final Constructor<?> declaredConstructor = clazz.getDeclaredConstructor();
                 declaredConstructor.setAccessible(true);
                 instance = declaredConstructor.newInstance();
             }
             catch (final ReflectiveOperationException ex) {
-                throw new CheckstyleException("Unable to instatiate " + className, ex);
+                throw new CheckstyleException("Unable to instantiate " + className, ex);
             }
         }
 
         return instance;
     }
 
     /**
      * Fill short-to-full module names map.
      */
     private static void fillShortToFullModuleNamesMap() {
         fillChecksFromAnnotationPackage();
         fillChecksFromBlocksPackage();
         fillChecksFromCodingPackage();
-        fillChecksFromDesingPackage();
+        fillChecksFromDesignPackage();
         fillChecksFromHeaderPackage();
         fillChecksFromImportsPackage();
         fillChecksFromIndentationPackage();
         fillChecksFromJavadocPackage();
         fillChecksFromMetricsPackage();
         fillChecksFromModifierPackage();
         fillChecksFromNamingPackage();
         fillChecksFromRegexpPackage();
         fillChecksFromSizesPackage();
         fillChecksFromWhitespacePackage();
         fillModulesFromChecksPackage();
         fillModulesFromFilefiltersPackage();
         fillModulesFromFiltersPackage();
         fillModulesFromCheckstylePackage();
     }
 
     /**
      * Fill short-to-full module names map with Checks from annotation package.
      */
     private static void fillChecksFromAnnotationPackage() {
         NAME_TO_FULL_MODULE_NAME.put("AnnotationLocationCheck",
                 BASE_PACKAGE + ".checks.annotation.AnnotationLocationCheck");
         NAME_TO_FULL_MODULE_NAME.put("AnnotationUseStyleCheck",
                 BASE_PACKAGE + ".checks.annotation.AnnotationUseStyleCheck");
         NAME_TO_FULL_MODULE_NAME.put("MissingDeprecatedCheck",
                 BASE_PACKAGE + ".checks.annotation.MissingDeprecatedCheck");
         NAME_TO_FULL_MODULE_NAME.put("MissingOverrideCheck",
                 BASE_PACKAGE + ".checks.annotation.MissingOverrideCheck");
         NAME_TO_FULL_MODULE_NAME.put("PackageAnnotationCheck",
                 BASE_PACKAGE + ".checks.annotation.PackageAnnotationCheck");
         NAME_TO_FULL_MODULE_NAME.put("SuppressWarningsCheck",
                 BASE_PACKAGE + ".checks.annotation.SuppressWarningsCheck");
     }
 
     /**
      * Fill short-to-full module names map with Checks from blocks package.
      */
     private static void fillChecksFromBlocksPackage() {
         NAME_TO_FULL_MODULE_NAME.put("AvoidNestedBlocksCheck",
                 BASE_PACKAGE + ".checks.blocks.AvoidNestedBlocksCheck");
         NAME_TO_FULL_MODULE_NAME.put("EmptyBlockCheck",
                 BASE_PACKAGE + ".checks.blocks.EmptyBlockCheck");
         NAME_TO_FULL_MODULE_NAME.put("EmptyCatchBlockCheck",
                 BASE_PACKAGE + ".checks.blocks.EmptyCatchBlockCheck");
         NAME_TO_FULL_MODULE_NAME.put("LeftCurlyCheck",
                 BASE_PACKAGE + ".checks.blocks.LeftCurlyCheck");
         NAME_TO_FULL_MODULE_NAME.put("NeedBracesCheck",
                 BASE_PACKAGE + ".checks.blocks.NeedBracesCheck");
         NAME_TO_FULL_MODULE_NAME.put("RightCurlyCheck",
                 BASE_PACKAGE + ".checks.blocks.RightCurlyCheck");
@@ -347,101 +347,101 @@ public class PackageObjectFactory implements ModuleFactory {
                 BASE_PACKAGE + ".checks.coding.MissingCtorCheck");
         NAME_TO_FULL_MODULE_NAME.put("MissingSwitchDefaultCheck",
                 BASE_PACKAGE + ".checks.coding.MissingSwitchDefaultCheck");
         NAME_TO_FULL_MODULE_NAME.put("ModifiedControlVariableCheck",
                 BASE_PACKAGE + ".checks.coding.ModifiedControlVariableCheck");
         NAME_TO_FULL_MODULE_NAME.put("MultipleStringLiteralsCheck",
                 BASE_PACKAGE + ".checks.coding.MultipleStringLiteralsCheck");
         NAME_TO_FULL_MODULE_NAME.put("MultipleVariableDeclarationsCheck",
                 BASE_PACKAGE + ".checks.coding.MultipleVariableDeclarationsCheck");
         NAME_TO_FULL_MODULE_NAME.put("NestedForDepthCheck",
                 BASE_PACKAGE + ".checks.coding.NestedForDepthCheck");
         NAME_TO_FULL_MODULE_NAME.put("NestedIfDepthCheck",
                 BASE_PACKAGE + ".checks.coding.NestedIfDepthCheck");
         NAME_TO_FULL_MODULE_NAME.put("NestedTryDepthCheck",
                 BASE_PACKAGE + ".checks.coding.NestedTryDepthCheck");
         NAME_TO_FULL_MODULE_NAME.put("NoCloneCheck",
                 BASE_PACKAGE + ".checks.coding.NoCloneCheck");
         NAME_TO_FULL_MODULE_NAME.put("NoFinalizerCheck",
                 BASE_PACKAGE + ".checks.coding.NoFinalizerCheck");
         NAME_TO_FULL_MODULE_NAME.put("OneStatementPerLineCheck",
                 BASE_PACKAGE + ".checks.coding.OneStatementPerLineCheck");
         NAME_TO_FULL_MODULE_NAME.put("OverloadMethodsDeclarationOrderCheck",
                 BASE_PACKAGE + ".checks.coding.OverloadMethodsDeclarationOrderCheck");
         NAME_TO_FULL_MODULE_NAME.put("PackageDeclarationCheck",
                 BASE_PACKAGE + ".checks.coding.PackageDeclarationCheck");
         NAME_TO_FULL_MODULE_NAME.put("ParameterAssignmentCheck",
                 BASE_PACKAGE + ".checks.coding.ParameterAssignmentCheck");
         NAME_TO_FULL_MODULE_NAME.put("RequireThisCheck",
                 BASE_PACKAGE + ".checks.coding.RequireThisCheck");
         NAME_TO_FULL_MODULE_NAME.put("ReturnCountCheck",
                 BASE_PACKAGE + ".checks.coding.ReturnCountCheck");
         NAME_TO_FULL_MODULE_NAME.put("SimplifyBooleanExpressionCheck",
                 BASE_PACKAGE + ".checks.coding.SimplifyBooleanExpressionCheck");
         NAME_TO_FULL_MODULE_NAME.put("SimplifyBooleanReturnCheck",
                 BASE_PACKAGE + ".checks.coding.SimplifyBooleanReturnCheck");
         NAME_TO_FULL_MODULE_NAME.put("StringLiteralEqualityCheck",
                 BASE_PACKAGE + ".checks.coding.StringLiteralEqualityCheck");
         NAME_TO_FULL_MODULE_NAME.put("SuperCloneCheck",
                 BASE_PACKAGE + ".checks.coding.SuperCloneCheck");
         NAME_TO_FULL_MODULE_NAME.put("SuperFinalizeCheck",
                 BASE_PACKAGE + ".checks.coding.SuperFinalizeCheck");
         NAME_TO_FULL_MODULE_NAME.put("UnnecessaryParenthesesCheck",
                 BASE_PACKAGE + ".checks.coding.UnnecessaryParenthesesCheck");
         NAME_TO_FULL_MODULE_NAME.put("VariableDeclarationUsageDistanceCheck",
                 BASE_PACKAGE + ".checks.coding.VariableDeclarationUsageDistanceCheck");
     }
 
     /**
      * Fill short-to-full module names map with Checks from design package.
      */
-    private static void fillChecksFromDesingPackage() {
+    private static void fillChecksFromDesignPackage() {
         NAME_TO_FULL_MODULE_NAME.put("DesignForExtensionCheck",
                 BASE_PACKAGE + ".checks.design.DesignForExtensionCheck");
         NAME_TO_FULL_MODULE_NAME.put("FinalClassCheck",
                 BASE_PACKAGE + ".checks.design.FinalClassCheck");
         NAME_TO_FULL_MODULE_NAME.put("HideUtilityClassConstructorCheck",
                 BASE_PACKAGE + ".checks.design.HideUtilityClassConstructorCheck");
         NAME_TO_FULL_MODULE_NAME.put("InnerTypeLastCheck",
                 BASE_PACKAGE + ".checks.design.InnerTypeLastCheck");
         NAME_TO_FULL_MODULE_NAME.put("InterfaceIsTypeCheck",
                 BASE_PACKAGE + ".checks.design.InterfaceIsTypeCheck");
         NAME_TO_FULL_MODULE_NAME.put("MutableExceptionCheck",
                 BASE_PACKAGE + ".checks.design.MutableExceptionCheck");
         NAME_TO_FULL_MODULE_NAME.put("OneTopLevelClassCheck",
                 BASE_PACKAGE + ".checks.design.OneTopLevelClassCheck");
         NAME_TO_FULL_MODULE_NAME.put("ThrowsCountCheck",
                 BASE_PACKAGE + ".checks.design.ThrowsCountCheck");
         NAME_TO_FULL_MODULE_NAME.put("VisibilityModifierCheck",
                 BASE_PACKAGE + ".checks.design.VisibilityModifierCheck");
     }
 
     /**
      * Fill short-to-full module names map with Checks from header package.
      */
     private static void fillChecksFromHeaderPackage() {
         NAME_TO_FULL_MODULE_NAME.put("HeaderCheck",
                 BASE_PACKAGE + ".checks.header.HeaderCheck");
         NAME_TO_FULL_MODULE_NAME.put("RegexpHeaderCheck",
                 BASE_PACKAGE + ".checks.header.RegexpHeaderCheck");
     }
 
     /**
      * Fill short-to-full module names map with Checks from imports package.
      */
     private static void fillChecksFromImportsPackage() {
         NAME_TO_FULL_MODULE_NAME.put("AvoidStarImportCheck",
                 BASE_PACKAGE + ".checks.imports.AvoidStarImportCheck");
         NAME_TO_FULL_MODULE_NAME.put("AvoidStaticImportCheck",
                 BASE_PACKAGE + ".checks.imports.AvoidStaticImportCheck");
         NAME_TO_FULL_MODULE_NAME.put("CustomImportOrderCheck",
                 BASE_PACKAGE + ".checks.imports.CustomImportOrderCheck");
         NAME_TO_FULL_MODULE_NAME.put("IllegalImportCheck",
                 BASE_PACKAGE + ".checks.imports.IllegalImportCheck");
         NAME_TO_FULL_MODULE_NAME.put("ImportControlCheck",
                 BASE_PACKAGE + ".checks.imports.ImportControlCheck");
         NAME_TO_FULL_MODULE_NAME.put("ImportOrderCheck",
                 BASE_PACKAGE + ".checks.imports.ImportOrderCheck");
         NAME_TO_FULL_MODULE_NAME.put("RedundantImportCheck",
                 BASE_PACKAGE + ".checks.imports.RedundantImportCheck");
         NAME_TO_FULL_MODULE_NAME.put("UnusedImportsCheck",
                 BASE_PACKAGE + ".checks.imports.UnusedImportsCheck");
