diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
index af3902847..b86bdf9b0 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
@@ -410,151 +410,151 @@ public abstract class AbstractTypeAwareCheck extends Check
     {
         ClassInfo ci = null;
         final Iterator<Map<String, ClassInfo>> iterator = typeParams.descendingIterator();
         while (iterator.hasNext()) {
             final Map<String, ClassInfo> paramMap = iterator.next();
             ci = paramMap.get(name);
             if (ci != null) {
                 break;
             }
         }
         return ci;
     }
 
     /**
      * Contains class's <code>Token</code>.
      */
     protected abstract static class ClassInfo
     {
         /** <code>FullIdent</code> associated with this class. */
         private final Token name;
 
         /**
          * Creates new instance of class inforamtion object.
          * @param className token which represents class name.
          */
         protected ClassInfo(final Token className)
         {
             if (className == null) {
                 throw new IllegalArgumentException(
                     "ClassInfo's name should be non-null");
             }
             name = className;
         }
 
         /** @return class name */
         public final Token getName()
         {
             return name;
         }
 
         /** @return <code>Class</code> associated with an object. */
         public abstract Class<?> getClazz();
     }
 
     /** Represents regular classes/enumes. */
     private static final class RegularClass extends ClassInfo
     {
         /** name of surrounding class. */
         private final String surroundingClass;
         /** is class loadable. */
-        private boolean isLoadable = true;
+        private boolean loadable = true;
         /** <code>Class</code> object of this class if it's loadable. */
         private Class<?> classObj;
         /** the check we use to resolve classes. */
         private final AbstractTypeAwareCheck check;
 
         /**
          * Creates new instance of of class information object.
          * @param name <code>FullIdent</code> associated with new object.
          * @param surroundingClass name of current surrounding class.
          * @param check the check we use to load class.
          */
         public RegularClass(final Token name,
                              final String surroundingClass,
                              final AbstractTypeAwareCheck check)
         {
             super(name);
             this.surroundingClass = surroundingClass;
             this.check = check;
         }
         /** @return if class is loadable ot not. */
         private boolean isLoadable()
         {
-            return isLoadable;
+            return loadable;
         }
 
         @Override
         public Class<?> getClazz()
         {
             if (isLoadable() && classObj == null) {
                 setClazz(check.tryLoadClass(getName(), surroundingClass));
             }
             return classObj;
         }
 
         /**
          * Associates <code> Class</code> with an object.
          * @param classObj <code>Class</code> to associate with.
          */
         private void setClazz(Class<?> classObj)
         {
             this.classObj = classObj;
-            isLoadable = classObj != null;
+            loadable = classObj != null;
         }
 
         @Override
         public String toString()
         {
             return "RegularClass[name=" + getName()
                 + ", in class=" + surroundingClass
-                + ", loadable=" + isLoadable
+                + ", loadable=" + loadable
                 + ", class=" + classObj + "]";
         }
     }
 
     /** Represents type param which is "alias" for real type. */
     private static class ClassAlias extends ClassInfo
     {
         /** Class information associated with the alias. */
         private final ClassInfo classInfo;
 
         /**
          * Creates nnew instance of the class.
          * @param name token which represents name of class alias.
          * @param classInfo class information associated with the alias.
          */
         ClassAlias(final Token name, ClassInfo classInfo)
         {
             super(name);
             this.classInfo = classInfo;
         }
 
         @Override
         public final Class<?> getClazz()
         {
             return classInfo.getClazz();
         }
 
         @Override
         public String toString()
         {
             return "ClassAlias[alias " + getName()
                 + " for " + classInfo + "]";
         }
     }
 
     /**
      * Represents text element with location in the text.
      */
     protected static class Token
     {
         /** token's column number. */
         private final int column;
         /** token's line number. */
         private final int line;
         /** token's text. */
         private final String text;
 
         /**
          * Creates token.
          * @param text token's text
