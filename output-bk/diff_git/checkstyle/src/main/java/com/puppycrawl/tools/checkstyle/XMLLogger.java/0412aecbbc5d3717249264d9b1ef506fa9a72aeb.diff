diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java b/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java
index 92f3f6ecd..6d7908c54 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java
@@ -224,168 +224,149 @@ public class XMLLogger
         if (fileName == null) {
             synchronized (writerLock) {
                 writeException(throwable);
             }
         }
         else {
             final FileMessages messages = fileMessages.computeIfAbsent(
                     fileName, name -> new FileMessages());
             messages.addException(throwable);
         }
     }
 
     /**
      * Writes the exception event to the print writer.
      * @param throwable The
      */
     private void writeException(Throwable throwable) {
         final StringWriter stringWriter = new StringWriter();
         final PrintWriter printer = new PrintWriter(stringWriter);
         printer.println("<exception>");
         printer.println("<![CDATA[");
         throwable.printStackTrace(printer);
         printer.println("]]>");
         printer.println("</exception>");
         writer.println(encode(stringWriter.toString()));
     }
 
     /**
      * Escape &lt;, &gt; &amp; &#39; and &quot; as their entities.
      * @param value the value to escape.
      * @return the escaped value if necessary.
      */
     public static String encode(String value) {
         final StringBuilder sb = new StringBuilder(256);
         for (int i = 0; i < value.length(); i++) {
             final char chr = value.charAt(i);
             switch (chr) {
                 case '<':
                     sb.append("&lt;");
                     break;
                 case '>':
                     sb.append("&gt;");
                     break;
                 case '\'':
                     sb.append("&apos;");
                     break;
                 case '\"':
                     sb.append("&quot;");
                     break;
                 case '&':
-                    sb.append(encodeAmpersand(value, i));
+                    sb.append("&amp;");
                     break;
                 case '\r':
                     break;
                 case '\n':
                     sb.append("&#10;");
                     break;
                 default:
                     sb.append(chr);
                     break;
             }
         }
         return sb.toString();
     }
 
     /**
      * Finds whether the given argument is character or entity reference.
      * @param ent the possible entity to look for.
      * @return whether the given argument a character or entity reference
      */
     public static boolean isReference(String ent) {
         boolean reference = false;
 
         if (ent.charAt(0) != '&' || !CommonUtils.endsWithChar(ent, ';')) {
             reference = false;
         }
         else if (ent.charAt(1) == '#') {
             // prefix is "&#"
             int prefixLength = 2;
 
             int radix = BASE_10;
             if (ent.charAt(2) == 'x') {
                 prefixLength++;
                 radix = BASE_16;
             }
             try {
                 Integer.parseInt(
                     ent.substring(prefixLength, ent.length() - 1), radix);
                 reference = true;
             }
             catch (final NumberFormatException ignored) {
                 reference = false;
             }
         }
         else {
             final String name = ent.substring(1, ent.length() - 1);
             for (String element : ENTITIES) {
                 if (name.equals(element)) {
                     reference = true;
                     break;
                 }
             }
         }
         return reference;
     }
 
-    /**
-     * Encodes ampersand in value at required position.
-     * @param value string value, which contains ampersand
-     * @param ampPosition position of ampersand in value
-     * @return encoded ampersand which should be used in xml
-     */
-    private static String encodeAmpersand(String value, int ampPosition) {
-        final int nextSemi = value.indexOf(';', ampPosition);
-        final String result;
-        if (nextSemi == -1
-            || !isReference(value.substring(ampPosition, nextSemi + 1))) {
-            result = "&amp;";
-        }
-        else {
-            result = "&";
-        }
-        return result;
-    }
-
     /**
      * The registered file messages.
      */
     private static class FileMessages {
         /** The file error events. */
         private final List<AuditEvent> errors = Collections.synchronizedList(new ArrayList<>());
 
         /** The file exceptions. */
         private final List<Throwable> exceptions = Collections.synchronizedList(new ArrayList<>());
 
         /**
          * Returns the file error events.
          * @return the file error events.
          */
         public List<AuditEvent> getErrors() {
             return Collections.unmodifiableList(errors);
         }
 
         /**
          * Adds the given error event to the messages.
          * @param event the error event.
          */
         public void addError(AuditEvent event) {
             errors.add(event);
         }
 
         /**
          * Returns the file exceptions.
          * @return the file exceptions.
          */
         public List<Throwable> getExceptions() {
             return Collections.unmodifiableList(exceptions);
         }
 
         /**
          * Adds the given exception to the messages.
          * @param throwable the file exception
          */
         public void addException(Throwable throwable) {
             exceptions.add(throwable);
         }
     }
 }
