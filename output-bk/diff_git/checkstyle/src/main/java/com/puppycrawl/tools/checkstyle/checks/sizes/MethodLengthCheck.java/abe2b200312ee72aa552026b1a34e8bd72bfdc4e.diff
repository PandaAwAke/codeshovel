diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodLengthCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodLengthCheck.java
index 72b7d28e1..751b20835 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodLengthCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodLengthCheck.java
@@ -23,93 +23,99 @@ import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FileContents;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * <p>
  * Checks for long methods.
  * </p>
  * <p>
  * Rationale: If a method becomes very long it is hard to understand.
  * Therefore long methods should usually be refactored into several
  * individual methods that focus on a specific task.
  * </p>
  *<p>
  * The default maximum method length is 150 lines. To change the maximum
  * number of lines, set property max.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="MethodLength"/&gt;
  * </pre>
  * <p>
  * An example of how to configure the check so that it accepts methods with at
  * most 60 lines is:
  * </p>
  * <pre>
  * &lt;module name="MethodLength"&gt;
  *    &lt;property name="max" value="60"/&gt;
  * &lt;/module&gt;
  * </pre>
  * @author Lars KÃ¼hne
  */
 public class MethodLengthCheck extends Check
 {
     /** whether to ignore empty lines and single line comments */
     private boolean countEmpty = true;
 
     /** default maximum number of lines */
     private static final int DEFAULT_MAX_LINES = 150;
 
     /** the maximum number of lines */
     private int max = DEFAULT_MAX_LINES;
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.METHOD_DEF, TokenTypes.CTOR_DEF};
     }
 
+    @Override
+    public int[] getAcceptableTokens()
+    {
+        return new int[] {TokenTypes.METHOD_DEF, TokenTypes.CTOR_DEF};
+    }
+
     @Override
     public void visitToken(DetailAST ast)
     {
         final DetailAST openingBrace = ast.findFirstToken(TokenTypes.SLIST);
         if (openingBrace != null) {
             final DetailAST closingBrace =
                 openingBrace.findFirstToken(TokenTypes.RCURLY);
             int length =
                 closingBrace.getLineNo() - openingBrace.getLineNo() + 1;
 
             if (!countEmpty) {
                 final FileContents contents = getFileContents();
                 final int lastLine = closingBrace.getLineNo();
                 for (int i = openingBrace.getLineNo() - 1; i < lastLine; i++) {
                     if (contents.lineIsBlank(i) || contents.lineIsComment(i)) {
                         length--;
                     }
                 }
             }
             if (length > max) {
                 log(ast.getLineNo(), ast.getColumnNo(), "maxLen.method",
                         length, max);
             }
         }
     }
 
     /**
      * @param length the maximum length of a method.
      */
     public void setMax(int length)
     {
         max = length;
     }
 
     /**
      * @param countEmpty whether to count empty and single line comments
      * of the form //.
      */
     public void setCountEmpty(boolean countEmpty)
     {
         this.countEmpty = countEmpty;
     }
 }
