diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java
index 4cfba3727..d5cb1120d 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java
@@ -21,109 +21,109 @@ package com.puppycrawl.tools.checkstyle.checks.indentation;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * Handler for parents of blocks ('if', 'else', 'while', etc).
  * <P>
  * The "block" handler classes use a common superclass BlockParentHandler,
  * employing the Template Method pattern.
  * </P>
  *
  * <UL>
  *   <LI>template method to get the lcurly</LI>
  *   <LI>template method to get the rcurly</LI>
  *   <LI>if curlys aren't present, then template method to get expressions
  *       is called</LI>
  *   <LI>now all the repetitous code which checks for BOL, if curlys are on
  *       same line, etc. can be collapsed into  the superclass</LI>
  * </UL>
  *
  *
  * @author jrichard
  */
 public class BlockParentHandler extends ExpressionHandler
 {
     /**
      * Children checked by parent handlers.
      */
     private static final int[] CHECKED_CHILDREN = new int[] {
         TokenTypes.VARIABLE_DEF,
         TokenTypes.EXPR,
         TokenTypes.OBJBLOCK,
         TokenTypes.LITERAL_BREAK,
         TokenTypes.LITERAL_RETURN,
         TokenTypes.LITERAL_THROW,
         TokenTypes.LITERAL_CONTINUE,
     };
 
     /**
      * Returns array of token types which should be checked among childrens.
      * @return array of token types to check.
      */
     protected int[] getCheckedChildren()
     {
         return CHECKED_CHILDREN;
     }
 
     /**
      * Construct an instance of this handler with the given indentation check,
      * name, abstract syntax tree, and parent handler.
      *
-     * @param aIndentCheck   the indentation check
-     * @param aName          the name of the handler
-     * @param aAst           the abstract syntax tree
-     * @param aParent        the parent handler
+     * @param indentCheck   the indentation check
+     * @param name          the name of the handler
+     * @param ast           the abstract syntax tree
+     * @param parent        the parent handler
      */
-    public BlockParentHandler(IndentationCheck aIndentCheck,
-        String aName, DetailAST aAst, ExpressionHandler aParent)
+    public BlockParentHandler(IndentationCheck indentCheck,
+        String name, DetailAST ast, ExpressionHandler parent)
     {
-        super(aIndentCheck, aName, aAst, aParent);
+        super(indentCheck, name, ast, parent);
     }
 
     /**
      * Get the top level expression being managed by this handler.
      *
      * @return the top level expression
      */
     protected DetailAST getToplevelAST()
     {
         return getMainAst();
     }
 
     /**
      * Check the indent of the top level token.
      */
     protected void checkToplevelToken()
     {
         final DetailAST toplevel = getToplevelAST();
 
         if ((toplevel == null)
             || getLevel().accept(expandedTabsColumnNo(toplevel)) || hasLabelBefore())
         {
             return;
         }
         if (!toplevelMustStartLine() && !startsLine(toplevel)) {
             return;
         }
         logError(toplevel, "", expandedTabsColumnNo(toplevel));
     }
 
     /**
      * Check if the top level token has label before.
      * @return true if the top level token has label before.
      */
     protected boolean hasLabelBefore()
     {
         final DetailAST parent = getToplevelAST().getParent();
         return parent != null && parent.getType() == TokenTypes.LABELED_STAT
             && parent.getLineNo() == getToplevelAST().getLineNo();
     }
 
     /**
      * Determines if the top level token must start the line.
      *
      * @return true
      */
     protected boolean toplevelMustStartLine()
     {
         return true;
     }
@@ -292,65 +292,65 @@ public class BlockParentHandler extends ExpressionHandler
     public void checkIndentation()
     {
         checkToplevelToken();
         // seperate to allow for eventual configuration
         checkLParen(getLParen());
         checkRParen(getLParen(), getRParen());
         if (hasCurlys()) {
             checkLCurly();
             checkRCurly();
         }
         final DetailAST listChild = getListChild();
         if (listChild != null) {
             // NOTE: switch statements usually don't have curlys
             if (!hasCurlys() || !areOnSameLine(getLCurly(), getRCurly())) {
                 checkChildren(listChild,
                               getCheckedChildren(),
                               getChildrenExpectedLevel(),
                               true,
                               childrenMayNest());
             }
         }
         else {
             checkNonlistChild();
         }
     }
 
     /**
      * @return indentation level expected for children
      */
     protected IndentLevel getChildrenExpectedLevel()
     {
         // if we have multileveled expected level then we should
         // try to suggest single level to children using curlies'
         // levels.
         if (getLevel().isMultiLevel() && hasCurlys()
             && !areOnSameLine(getLCurly(), getRCurly()))
         {
             if (startsLine(getLCurly())) {
                 return new IndentLevel(expandedTabsColumnNo(getLCurly()) + getBasicOffset());
             }
             else if (startsLine(getRCurly())) {
                 final IndentLevel level = new IndentLevel(curlyLevel(), getBasicOffset());
                 level.addAcceptedIndent(level.getFirstIndentLevel() + getLineWrappingIndent());
                 return level;
             }
         }
         return new IndentLevel(getLevel(), getBasicOffset());
     }
 
     @Override
-    public IndentLevel suggestedChildLevel(ExpressionHandler aChild)
+    public IndentLevel suggestedChildLevel(ExpressionHandler child)
     {
         return getChildrenExpectedLevel();
     }
 
     /**
      * A shortcut for <code>IndentationCheck</code> property.
      * @return value of lineWrappingIndentation property
      *         of <code>IndentationCheck</code>
      */
     private int getLineWrappingIndent()
     {
         return getIndentCheck().getLineWrappingIndentation();
     }
 }
