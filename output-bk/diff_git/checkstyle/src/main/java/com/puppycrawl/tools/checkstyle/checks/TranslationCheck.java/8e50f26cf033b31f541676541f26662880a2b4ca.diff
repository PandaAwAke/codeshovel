diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
index 78d481e6d..e87d341b4 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
@@ -172,179 +172,180 @@ public class TranslationCheck extends AbstractFileSetCheck {
     }
 
     /**
      * Sets the base name regexp pattern.
      * @param baseName base name regexp.
      */
     public void setBaseName(String baseName) {
         baseNamePattern = CommonUtils.createPattern(baseName);
     }
 
     /**
      * Sets language codes of required translations for the check.
      * @param translationCodes a comma separated list of language codes.
      */
     public void setRequiredTranslations(String translationCodes) {
         requiredTranslations = Sets.newTreeSet(Splitter.on(',')
             .trimResults().omitEmptyStrings().split(translationCodes));
     }
 
     @Override
     public void beginProcessing(String charset) {
         super.beginProcessing(charset);
         filesToProcess.clear();
     }
 
     @Override
     protected void processFiltered(File file, List<String> lines) {
         // We just collecting files for processing at finishProcessing()
         filesToProcess.add(file);
     }
 
     @Override
     public void finishProcessing() {
         super.finishProcessing();
 
         final Set<ResourceBundle> bundles = groupFilesIntoBundles(filesToProcess, baseNamePattern);
         for (ResourceBundle currentBundle : bundles) {
             checkExistenceOfDefaultTranslation(currentBundle);
             checkExistenceOfRequiredTranslations(currentBundle);
             checkTranslationKeys(currentBundle);
         }
     }
 
     /**
      * Groups a set of files into bundles.
      * Only files, which names match base name regexp pattern will be grouped.
      * @param files set of files.
      * @param baseNameRegexp base name regexp pattern.
      * @return set of ResourceBundles.
      */
-    private Set<ResourceBundle> groupFilesIntoBundles(Set<File> files, Pattern baseNameRegexp) {
+    private static Set<ResourceBundle> groupFilesIntoBundles(Set<File> files,
+                                                             Pattern baseNameRegexp) {
         final Set<ResourceBundle> resourceBundles = Sets.newHashSet();
         for (File currentFile : files) {
             final String fileName = currentFile.getName();
             final String baseName = extractBaseName(fileName);
             final Matcher baseNameMatcher = baseNameRegexp.matcher(baseName);
             if (baseNameMatcher.matches()) {
                 final String extension = Files.getFileExtension(fileName);
                 final String path = getPath(currentFile.getAbsolutePath());
                 final ResourceBundle newBundle = new ResourceBundle(baseName, path, extension);
                 final Optional<ResourceBundle> bundle = findBundle(resourceBundles, newBundle);
                 if (bundle.isPresent()) {
                     bundle.get().addFile(currentFile);
                 }
                 else {
                     newBundle.addFile(currentFile);
                     resourceBundles.add(newBundle);
                 }
             }
         }
         return resourceBundles;
     }
 
     /**
      * Checks an existence of default translation file in the resource bundle.
      * @param bundle resource bundle.
      */
     private void checkExistenceOfDefaultTranslation(ResourceBundle bundle) {
         final Optional<String> fileName = getMissingFileName(bundle, null);
         if (fileName.isPresent()) {
             logMissingTranslation(bundle.getPath(), fileName.get());
         }
     }
 
     /**
      * Checks an existence of translation files in the resource bundle.
      * The name of translation file begins with the base name of resource bundle which is followed
      * by '_' and a language code (country and variant are optional), it ends with the extension
      * suffix.
      * @param bundle resource bundle.
      */
     private void checkExistenceOfRequiredTranslations(ResourceBundle bundle) {
         for (String languageCode : requiredTranslations) {
             final Optional<String> fileName = getMissingFileName(bundle, languageCode);
             if (fileName.isPresent()) {
                 logMissingTranslation(bundle.getPath(), fileName.get());
             }
         }
     }
 
     /**
      * Checks resource files in bundle for consistency regarding their keys.
      * All files in bundle must have the same key set. If this is not the case
      * an error message is posted giving information which key misses in which file.
      * @param bundle resource bundle.
      */
     private void checkTranslationKeys(ResourceBundle bundle) {
         final Set<File> filesInBundle = bundle.getFiles();
         if (filesInBundle.size() > 1) {
             // build a map from files to the keys they contain
             final Set<String> allTranslationKeys = Sets.newHashSet();
             final SetMultimap<File, String> filesAssociatedWithKeys = HashMultimap.create();
             for (File currentFile : filesInBundle) {
                 final Set<String> keysInCurrentFile = getTranslationKeys(currentFile);
                 allTranslationKeys.addAll(keysInCurrentFile);
                 filesAssociatedWithKeys.putAll(currentFile, keysInCurrentFile);
             }
             checkFilesForConsistencyRegardingTheirKeys(filesAssociatedWithKeys, allTranslationKeys);
         }
     }
 
     /**
      * Searches for specific resource bundle in a set of resource bundles.
      * @param bundles set of resource bundles.
      * @param targetBundle target bundle to search for.
      * @return Guava's Optional of resource bundle (present if target bundle is found).
      */
     private static Optional<ResourceBundle> findBundle(Set<ResourceBundle> bundles,
-                                                       final ResourceBundle targetBundle) {
+                                                       ResourceBundle targetBundle) {
         Optional<ResourceBundle> result = Optional.absent();
         for (ResourceBundle currentBundle : bundles) {
             if (targetBundle.getBaseName().equals(currentBundle.getBaseName())
                     && targetBundle.getExtension().equals(currentBundle.getExtension())
                     && targetBundle.getPath().equals(currentBundle.getPath())) {
                 result = Optional.of(currentBundle);
                 break;
             }
         }
         return result;
     }
 
     /**
      * Returns the name of translation file which is absent in resource bundle or Guava's Optional,
      * if there is not missing translation.
      * @param bundle resource bundle.
      * @param languageCode language code.
      * @return the name of translation file which is absent in resource bundle or Guava's Optional,
      *         if there is not missing translation.
      */
     private static Optional<String> getMissingFileName(ResourceBundle bundle, String languageCode) {
         final String fileNameRegexp;
         final boolean searchForDefaultTranslation;
         final String extension = bundle.getExtension();
         final String baseName = bundle.getBaseName();
         if (languageCode == null) {
             searchForDefaultTranslation = true;
             fileNameRegexp = String.format(Locale.ROOT, REGEXP_FORMAT_TO_CHECK_DEFAULT_TRANSLATIONS,
                 baseName, extension);
         }
         else {
             searchForDefaultTranslation = false;
             fileNameRegexp = String.format(Locale.ROOT,
                 REGEXP_FORMAT_TO_CHECK_REQUIRED_TRANSLATIONS, baseName, languageCode, extension);
         }
         Optional<String> missingFileName = Optional.absent();
         if (!bundle.containsFile(fileNameRegexp)) {
             if (searchForDefaultTranslation) {
                 missingFileName = Optional.of(String.format(Locale.ROOT,
                     DEFAULT_TRANSLATION_FILE_NAME_FORMATTER, baseName, extension));
             }
             else {
                 missingFileName = Optional.of(String.format(Locale.ROOT,
                     FILE_NAME_WITH_LANGUAGE_CODE_FORMATTER, baseName, languageCode, extension));
             }
         }
         return missingFileName;
     }
 
     /**
@@ -482,62 +483,62 @@ public class TranslationCheck extends AbstractFileSetCheck {
         private final String baseName;
         /** Common extension of files which are included in the resource bundle. */
         private final String extension;
         /** Common path of files which are included in the resource bundle. */
         private final String path;
         /** Set of files which are included in the resource bundle. */
         private final Set<File> files;
 
         /**
          * Creates a ResourceBundle object with specific base name, common files extension.
          * @param baseName bundle base name.
          * @param path common path of files which are included in the resource bundle.
          * @param extension common extension of files which are included in the resource bundle.
          */
         ResourceBundle(String baseName, String path, String extension) {
             this.baseName = baseName;
             this.path = path;
             this.extension = extension;
             files = Sets.newHashSet();
         }
 
         public String getBaseName() {
             return baseName;
         }
 
         public String getPath() {
             return path;
         }
 
         public String getExtension() {
             return extension;
         }
 
         public Set<File> getFiles() {
             return Collections.unmodifiableSet(files);
         }
 
         /**
          * Adds a file into resource bundle.
          * @param file file which should be added into resource bundle.
          */
         public void addFile(File file) {
             files.add(file);
         }
 
         /**
          * Checks whether a resource bundle contains a file which name matches file name regexp.
          * @param fileNameRegexp file name regexp.
          * @return true if a resource bundle contains a file which name matches file name regexp.
          */
-        public boolean containsFile(final String fileNameRegexp) {
+        public boolean containsFile(String fileNameRegexp) {
             boolean containsFile = false;
             for (File currentFile : files) {
                 if (Pattern.matches(fileNameRegexp, currentFile.getName())) {
                     containsFile = true;
                     break;
                 }
             }
             return containsFile;
         }
     }
 }
