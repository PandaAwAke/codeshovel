diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java
index ea6eb592f..85a387b64 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java
@@ -80,107 +80,108 @@ public class SuppressWithNearbyCommentFilter
     /** Default regex for checks that should be suppressed. */
     private static final String DEFAULT_CHECK_FORMAT = ".*";
 
     /** Default regex for lines that should be suppressed. */
     private static final String DEFAULT_INFLUENCE_FORMAT = "0";
 
     /** Tagged comments. */
     private final List<Tag> tags = new ArrayList<>();
 
     /** Whether to look for trigger in C-style comments. */
     private boolean checkC = true;
 
     /** Whether to look for trigger in C++-style comments. */
     // -@cs[AbbreviationAsWordInName] We can not change it as,
     // check's property is a part of API (used in configurations).
     private boolean checkCPP = true;
 
     /** Parsed comment regexp that marks checkstyle suppression region. */
     private Pattern commentFormat = Pattern.compile(DEFAULT_COMMENT_FORMAT);
 
     /** The comment pattern that triggers suppression. */
     private String checkFormat = DEFAULT_CHECK_FORMAT;
 
     /** The message format to suppress. */
     private String messageFormat;
 
     /** The influence of the suppression comment. */
     private String influenceFormat = DEFAULT_INFLUENCE_FORMAT;
 
     /**
      * References the current FileContents for this filter.
      * Since this is a weak reference to the FileContents, the FileContents
      * can be reclaimed as soon as the strong references in TreeWalker
      * are reassigned to the next FileContents, at which time filtering for
      * the current FileContents is finished.
      */
     private WeakReference<FileContents> fileContentsReference = new WeakReference<>(null);
 
     /**
      * Set the format for a comment that turns off reporting.
      * @param pattern a pattern.
      */
     public final void setCommentFormat(Pattern pattern) {
         commentFormat = pattern;
     }
 
     /**
      * Returns FileContents for this filter.
      * @return the FileContents for this filter.
      */
-    public FileContents getFileContents() {
+    private FileContents getFileContents() {
         return fileContentsReference.get();
     }
 
     /**
      * Set the FileContents for this filter.
      * @param fileContents the FileContents for this filter.
+     * @noinspection WeakerAccess
      */
     public void setFileContents(FileContents fileContents) {
         fileContentsReference = new WeakReference<>(fileContents);
     }
 
     /**
      * Set the format for a check.
      * @param format a {@code String} value
      */
     public final void setCheckFormat(String format) {
         checkFormat = format;
     }
 
     /**
      * Set the format for a message.
      * @param format a {@code String} value
      */
     public void setMessageFormat(String format) {
         messageFormat = format;
     }
 
     /**
      * Set the format for the influence of this check.
      * @param format a {@code String} value
      */
     public final void setInfluenceFormat(String format) {
         influenceFormat = format;
     }
 
     /**
      * Set whether to look in C++ comments.
      * @param checkCpp {@code true} if C++ comments are checked.
      */
     // -@cs[AbbreviationAsWordInName] We can not change it as,
     // check's property is a part of API (used in configurations).
     public void setCheckCPP(boolean checkCpp) {
         checkCPP = checkCpp;
     }
 
     /**
      * Set whether to look in C comments.
      * @param checkC {@code true} if C comments are checked.
      */
     public void setCheckC(boolean checkC) {
         this.checkC = checkC;
     }
 
     @Override
     public boolean accept(TreeWalkerAuditEvent event) {
         boolean accepted = true;
