diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java b/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
index b6b39383b..69d3c85b3 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
@@ -1,99 +1,102 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2014  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle;
 
+import java.io.File;
+import java.io.Reader;
+import java.io.StringReader;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+import java.util.Set;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
 import antlr.RecognitionException;
 import antlr.TokenStreamException;
+import antlr.TokenStreamHiddenTokenFilter;
 import antlr.TokenStreamRecognitionException;
 
 import com.google.common.collect.HashMultimap;
 import com.google.common.collect.Multimap;
 import com.google.common.collect.Sets;
 import com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck;
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.api.Context;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FileContents;
 import com.puppycrawl.tools.checkstyle.api.FileText;
 import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.api.Utils;
 import com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaLexer;
 import com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer;
-import java.io.File;
-import java.io.Reader;
-import java.io.StringReader;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.List;
-import java.util.Set;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 
 /**
  * Responsible for walking an abstract syntax tree and notifying interested
  * checks at each each node.
  *
  * @author Oliver Burn
  * @version 1.0
  */
 public final class TreeWalker
     extends AbstractFileSetCheck
 {
     /** default distance between tab stops */
     private static final int DEFAULT_TAB_WIDTH = 8;
 
     /** maps from token name to checks */
     private final Multimap<String, Check> mTokenToChecks =
         HashMultimap.create();
     /** all the registered checks */
     private final Set<Check> mAllChecks = Sets.newHashSet();
     /** the distance between tab stops */
     private int mTabWidth = DEFAULT_TAB_WIDTH;
     /** cache file **/
     private PropertyCacheFile mCache = new PropertyCacheFile(null, null);
 
     /** class loader to resolve classes with. **/
     private ClassLoader mClassLoader;
 
     /** context of child components */
     private Context mChildContext;
 
     /** a factory for creating submodules (i.e. the Checks) */
     private ModuleFactory mModuleFactory;
 
     /** controls whether we should use recursive or iterative
      * algorithm for tree processing.
      */
     private final boolean mRecursive;
 
     /** logger for debug purpose */
     private static final Log LOG =
         LogFactory.getLog("com.puppycrawl.tools.checkstyle.TreeWalker");
 
     /**
      * Creates a new <code>TreeWalker</code> instance.
      */
     public TreeWalker()
     {
         setFileExtensions(new String[]{"java"});
         // Tree walker can use two possible algorithms for
         // tree processing (iterative and recursive.
@@ -382,110 +385,116 @@ public final class TreeWalker
         }
 
         notifyLeave(aAST);
 
         final DetailAST sibling = aAST.getNextSibling();
         if (sibling != null) {
             processRec(sibling);
         }
     }
 
     /**
      * Notify interested checks that visiting a node.
      * @param aAST the node to notify for
      */
     private void notifyVisit(DetailAST aAST)
     {
         final Collection<Check> visitors =
             mTokenToChecks.get(TokenTypes.getTokenName(aAST.getType()));
         for (Check c : visitors) {
             c.visitToken(aAST);
         }
     }
 
     /**
      * Notify interested checks that leaving a node.
      *
      * @param aAST
      *                the node to notify for
      */
     private void notifyLeave(DetailAST aAST)
     {
         final Collection<Check> visitors =
             mTokenToChecks.get(TokenTypes.getTokenName(aAST.getType()));
         for (Check ch : visitors) {
             ch.leaveToken(aAST);
         }
     }
 
     /**
      * Static helper method to parses a Java source file.
      *
      * @param aContents
      *                contains the contents of the file
      * @throws TokenStreamException
      *                 if lexing failed
      * @throws RecognitionException
      *                 if parsing failed
      * @return the root of the AST
      */
     public static DetailAST parse(FileContents aContents)
-        throws RecognitionException, TokenStreamException
+            throws RecognitionException, TokenStreamException
     {
         final String fullText = aContents.getText().getFullText().toString();
         final Reader sr = new StringReader(fullText);
         final GeneratedJavaLexer lexer = new GeneratedJavaLexer(sr);
         lexer.setFilename(aContents.getFilename());
         lexer.setCommentListener(aContents);
         lexer.setTreatAssertAsKeyword(true);
         lexer.setTreatEnumAsKeyword(true);
+        lexer.setTokenObjectClass("antlr.CommonHiddenStreamToken");
+
+        TokenStreamHiddenTokenFilter filter = new TokenStreamHiddenTokenFilter(
+                lexer);
+        filter.hide(TokenTypes.SINGLE_LINE_COMMENT);
+        filter.hide(TokenTypes.BLOCK_COMMENT_BEGIN);
 
         final GeneratedJavaRecognizer parser =
-            new GeneratedJavaRecognizer(lexer);
+                new GeneratedJavaRecognizer(filter);
         parser.setFilename(aContents.getFilename());
         parser.setASTNodeClass(DetailAST.class.getName());
         parser.compilationUnit();
 
         return (DetailAST) parser.getAST();
     }
 
     @Override
     public void destroy()
     {
         for (Check c : mAllChecks) {
             c.destroy();
         }
         mCache.destroy();
         super.destroy();
     }
 
     /**
      * @return true if we should use recursive algorithm
      *         for tree processing, false for iterative one.
      */
     private boolean useRecursiveAlgorithm()
     {
         return mRecursive;
     }
 
     /**
      * Processes a node calling interested checks at each node.
      * Uses iterative algorithm.
      * @param aRoot the root of tree for process
      */
     private void processIter(DetailAST aRoot)
     {
         DetailAST curNode = aRoot;
         while (curNode != null) {
             notifyVisit(curNode);
             DetailAST toVisit = curNode.getFirstChild();
             while ((curNode != null) && (toVisit == null)) {
                 notifyLeave(curNode);
                 toVisit = curNode.getNextSibling();
                 if (toVisit == null) {
                     curNode = curNode.getParent();
                 }
             }
             curNode = toVisit;
         }
     }
 }
