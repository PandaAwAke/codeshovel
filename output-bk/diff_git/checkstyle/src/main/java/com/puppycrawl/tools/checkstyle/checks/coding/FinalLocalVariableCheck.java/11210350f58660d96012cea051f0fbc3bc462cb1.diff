diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java
index d92b50052..64dfec2b3 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java
@@ -367,110 +367,135 @@ public class FinalLocalVariableCheck extends AbstractCheck {
      * @param ast VARIABLE_DEF to be checked
      * @return true if initialized
      */
     private static boolean isInitialized(DetailAST ast) {
         return ast.getParent().getLastChild().getType() == TokenTypes.ASSIGN;
     }
 
     /**
      * Whether the ast is the first child of its parent.
      * @param ast the ast to check.
      * @return true if the ast is the first child of its parent.
      */
     private static boolean isFirstChild(DetailAST ast) {
         return ast.getPreviousSibling() == null;
     }
 
     /**
      * Remove the variable from the Stack.
      * @param ast Variable to remove
      */
     private void removeVariable(DetailAST ast) {
         final Iterator<ScopeData> iterator = scopeStack.descendingIterator();
         while (iterator.hasNext()) {
             final ScopeData scopeData = iterator.next();
             final Map<String, DetailAST> scope = scopeData.scope;
             final DetailAST storedVariable = scope.get(ast.getText());
             if (storedVariable != null && isSameVariables(storedVariable, ast)) {
                 if (shouldRemoveVariable(scopeData, ast)) {
                     scope.remove(ast.getText());
                 }
                 break;
             }
         }
     }
 
     /**
      * Whether the variable should be removed from the list of final local variable
      * candidates.
      * @param scopeData the scope data of the variable.
      * @param ast the variable ast.
      * @return true, if the variable should be removed.
      */
     private static boolean shouldRemoveVariable(ScopeData scopeData, DetailAST ast) {
         boolean shouldRemove = true;
         for (DetailAST variable : scopeData.uninitializedVariables) {
             if (variable.getText().equals(ast.getText())) {
 
                 // if the variable is declared outside the loop and initialized inside
                 // the loop, then it cannot be declared final, as it can be initialized
                 // more than once in this case
-                if (isInTheSameLoop(variable, ast)) {
+                if (isInTheSameLoop(variable, ast)
+                        || !isUseOfExternalVariableInsideLoop(ast)) {
                     shouldRemove = false;
                 }
                 scopeData.uninitializedVariables.remove(variable);
                 break;
             }
         }
         return shouldRemove;
     }
 
+    /**
+     * Checks whether a variable which is declared ouside loop is used inside loop.
+     * For example:
+     * <p>
+     * {@code
+     * int x;
+     * for (int i = 0, j = 0; i < j; i++) {
+     *     x = 5;
+     * }
+     * }
+     * </p>
+     * @param variable variable.
+     * @return true if a variable which is declared ouside loop is used inside loop.
+     */
+    private static boolean isUseOfExternalVariableInsideLoop(DetailAST variable) {
+        boolean result = true;
+        DetailAST loop2 = variable.getParent();
+        while (loop2 != null
+            && !isLoopAst(loop2.getType())) {
+            loop2 = loop2.getParent();
+        }
+        return loop2 != null;
+    }
+
     /**
      * Is Arithmetic operator.
      * @param parentType token AST
      * @return true is token type is in arithmetic operator
      */
     private static boolean isAssignOperator(int parentType) {
         return Arrays.binarySearch(ASSIGN_OPERATOR_TYPES, parentType) >= 0;
     }
 
     /**
      * Checks if current variable is defined in
      *  {@link TokenTypes#FOR_INIT for-loop init}, e.g.:
      * <p>
      * {@code
      * for (int i = 0, j = 0; i < j; i++) { . . . }
      * }
      * </p>
      * {@code i, j} are defined in {@link TokenTypes#FOR_INIT for-loop init}
      * @param variableDef variable definition node.
      * @return true if variable is defined in {@link TokenTypes#FOR_INIT for-loop init}
      */
     private static boolean isVariableInForInit(DetailAST variableDef) {
         return variableDef.getParent().getType() == TokenTypes.FOR_INIT;
     }
 
     /**
      * Determines whether an AST is a descendant of an abstract or native method.
      * @param ast the AST to check.
      * @return true if ast is a descendant of an abstract or native method.
      */
     private static boolean isInAbstractOrNativeMethod(DetailAST ast) {
         boolean abstractOrNative = false;
         DetailAST parent = ast.getParent();
         while (parent != null && !abstractOrNative) {
             if (parent.getType() == TokenTypes.METHOD_DEF) {
                 final DetailAST modifiers =
                     parent.findFirstToken(TokenTypes.MODIFIERS);
                 abstractOrNative = modifiers.branchContains(TokenTypes.ABSTRACT)
                         || modifiers.branchContains(TokenTypes.LITERAL_NATIVE);
             }
             parent = parent.getParent();
         }
         return abstractOrNative;
     }
 
     /**
      * Check if current param is lambda's param.
      * @param paramDef {@link TokenTypes#PARAMETER_DEF parameter def}.
      * @return true if current param is lambda's param.
      */
