diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java
index 23d9dfce4..db4acda40 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java
@@ -85,107 +85,122 @@ public class RequireThisCheck extends DeclarationCollector {
      * Setter for checkMethods property.
      * @param checkMethods should we check methods usage or not.
      */
     public void setCheckMethods(boolean checkMethods) {
         this.checkMethods = checkMethods;
     }
 
     @Override
     public int[] getDefaultTokens() {
         return new int[] {
             TokenTypes.CLASS_DEF,
             TokenTypes.CTOR_DEF,
             TokenTypes.ENUM_DEF,
             TokenTypes.IDENT,
             TokenTypes.INTERFACE_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.PARAMETER_DEF,
             TokenTypes.SLIST,
             TokenTypes.VARIABLE_DEF,
         };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return getDefaultTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.IDENT,
         };
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         super.visitToken(ast);
         if (ast.getType() == TokenTypes.IDENT) {
             processIDENT(ast);
         }
     }
 
     /**
      * Checks if a given IDENT is method call or field name which
      * require explicit <code>this</code> qualifier.
      *
      * @param ast IDENT to check.
      */
     private void processIDENT(DetailAST ast) {
         final int parentType = ast.getParent().getType();
-
-        if (parentType == TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR
-            || parentType == TokenTypes.ANNOTATION
-            || parentType == TokenTypes.ANNOTATION_FIELD_DEF) {
-            //cannot refer to 'this' from annotations
-            return;
-        }
-
-        // let's check method calls
-        if (parentType == TokenTypes.METHOD_CALL) {
-            if (checkMethods && isClassMethod(ast.getText())) {
-                log(ast, "require.this.method", ast.getText());
+        switch (parentType) {
+            case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:
+            case TokenTypes.ANNOTATION:
+            case TokenTypes.ANNOTATION_FIELD_DEF:
+                // no need to check annotations content
+                break;
+            case TokenTypes.METHOD_CALL: {
+                // let's check method calls
+                if (checkMethods && isClassMethod(ast.getText())) {
+                    log(ast, "require.this.method", ast.getText());
+                }
+                break;
+            }
+            default: {
+                if (checkFields) {
+                    processField(ast, parentType);
+                }
+                break;
             }
-            return;
-        }
-
-        // let's check fields
-        if (!checkFields) {
-            // we shouldn't check fields
-            return;
         }
+    }
 
+    /**
+     * process validation of Field
+     * @param ast field definition ast token
+     * @param parentType type of the parrent
+     */
+    private void processField(DetailAST ast, int parentType) {
         if (ScopeUtils.getSurroundingScope(ast) == null) {
             // it is not a class or interface it's
             // either import or package
             // we shouldn't checks this
             return;
         }
 
         if (parentType == TokenTypes.DOT
-            && ast.getPreviousSibling() != null) {
+                && ast.getPreviousSibling() != null) {
             // it's the method name in a method call; no problem
             return;
         }
         if (parentType == TokenTypes.TYPE
-            || parentType == TokenTypes.LITERAL_NEW) {
+                || parentType == TokenTypes.LITERAL_NEW) {
             // it's a type name; no problem
             return;
         }
-        if (parentType == TokenTypes.VARIABLE_DEF
-            || parentType == TokenTypes.CTOR_DEF
-            || parentType == TokenTypes.METHOD_DEF
-            || parentType == TokenTypes.CLASS_DEF
-            || parentType == TokenTypes.ENUM_DEF
-            || parentType == TokenTypes.INTERFACE_DEF
-            || parentType == TokenTypes.PARAMETER_DEF
-            || parentType == TokenTypes.TYPE_ARGUMENT) {
+        if (isDeclarationToken(parentType)) {
             // it's being declared; no problem
             return;
         }
 
         final String name = ast.getText();
         if (isClassField(name)) {
             log(ast, "require.this.variable", name);
         }
     }
+
+    /**
+     * check that token is related to Definition tokens
+     * @param parentType token Type
+     * @return true if token is related to Definition Tokens
+     */
+    private boolean isDeclarationToken(int parentType) {
+        return parentType == TokenTypes.VARIABLE_DEF
+            || parentType == TokenTypes.CTOR_DEF
+            || parentType == TokenTypes.METHOD_DEF
+            || parentType == TokenTypes.CLASS_DEF
+            || parentType == TokenTypes.ENUM_DEF
+            || parentType == TokenTypes.INTERFACE_DEF
+            || parentType == TokenTypes.PARAMETER_DEF
+            || parentType == TokenTypes.TYPE_ARGUMENT;
+    }
 }
