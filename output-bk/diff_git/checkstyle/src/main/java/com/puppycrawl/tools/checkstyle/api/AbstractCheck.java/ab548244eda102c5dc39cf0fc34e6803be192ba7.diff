diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractCheck.java
index 110ee3717..72f98391b 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractCheck.java
@@ -1,161 +1,170 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2017 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.api;
 
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.Set;
+import java.util.SortedSet;
+import java.util.TreeSet;
 
 import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 
 /**
  * The base class for checks.
  *
  * @author Oliver Burn
  * @see <a href="{@docRoot}/../writingchecks.html" target="_top">Writing
  * your own checks</a>
  */
 public abstract class AbstractCheck extends AbstractViolationReporter {
     /** Default tab width for column reporting. */
     private static final int DEFAULT_TAB_WIDTH = 8;
 
     /** The tokens the check is interested in. */
     private final Set<String> tokens = new HashSet<>();
 
+    /** The sorted set for collecting messages. */
+    private final SortedSet<LocalizedMessage> messages = new TreeSet<>();
+
     /** The current file contents. */
     private FileContents fileContents;
 
-    /** The object for collecting messages. */
-    private LocalizedMessages messages;
-
     /** The tab width for column reporting. */
     private int tabWidth = DEFAULT_TAB_WIDTH;
 
     /**
      * The class loader to load external classes. Not initialized as this must
      * be set by my creator.
      */
     private ClassLoader classLoader;
 
     /**
      * Returns the default token a check is interested in. Only used if the
      * configuration for a check does not define the tokens.
      * @return the default tokens
      * @see TokenTypes
      */
     public abstract int[] getDefaultTokens();
 
     /**
      * The configurable token set.
      * Used to protect Checks against malicious users who specify an
      * unacceptable token set in the configuration file.
      * The default implementation returns the check's default tokens.
      * @return the token set this check is designed for.
      * @see TokenTypes
      */
     public abstract int[] getAcceptableTokens();
 
     /**
      * The tokens that this check must be registered for.
      * @return the token set this must be registered for.
      * @see TokenTypes
      */
     public abstract int[] getRequiredTokens();
 
     /**
      * Whether comment nodes are required or not.
      * @return false as a default value.
      */
     public boolean isCommentNodesRequired() {
         return false;
     }
 
     /**
      * Adds a set of tokens the check is interested in.
      * @param strRep the string representation of the tokens interested in
      */
     public final void setTokens(String... strRep) {
         Collections.addAll(tokens, strRep);
     }
 
     /**
      * Returns the tokens registered for the check.
      * @return the set of token names
      */
     public final Set<String> getTokenNames() {
         return Collections.unmodifiableSet(tokens);
     }
 
     /**
-     * Set the global object used to collect messages.
-     * @param messages the messages to log with
+     * Returns the sorted set of {@link LocalizedMessage}.
+     * @return the sorted set of {@link LocalizedMessage}.
+     */
+    public SortedSet<LocalizedMessage> getMessages() {
+        return new TreeSet<>(messages);
+    }
+
+    /**
+     * Clears the sorted set of {@link LocalizedMessage} of the check.
      */
-    public final void setMessages(LocalizedMessages messages) {
-        this.messages = messages;
+    public final void clearMessages() {
+        messages.clear();
     }
 
     /**
      * Initialize the check. This is the time to verify that the check has
      * everything required to perform it job.
      */
     public void init() {
         // No code by default, should be overridden only by demand at subclasses
     }
 
     /**
      * Destroy the check. It is being retired from service.
      */
     public void destroy() {
         // No code by default, should be overridden only by demand at subclasses
     }
 
     /**
      * Called before the starting to process a tree. Ideal place to initialize
      * information that is to be collected whilst processing a tree.
      * @param rootAST the root of the tree
      */
     public void beginTree(DetailAST rootAST) {
         // No code by default, should be overridden only by demand at subclasses
     }
 
     /**
      * Called after finished processing a tree. Ideal place to report on
      * information collected whilst processing a tree.
      * @param rootAST the root of the tree
      */
     public void finishTree(DetailAST rootAST) {
         // No code by default, should be overridden only by demand at subclasses
     }
 
     /**
      * Called to process a token.
      * @param ast the token to process
      */
     public void visitToken(DetailAST ast) {
         // No code by default, should be overridden only by demand at subclasses
     }
 
     /**
      * Called after all the child nodes have been process.
      * @param ast the token leaving
      */
     public void leaveToken(DetailAST ast) {
         // No code by default, should be overridden only by demand at subclasses
     }
