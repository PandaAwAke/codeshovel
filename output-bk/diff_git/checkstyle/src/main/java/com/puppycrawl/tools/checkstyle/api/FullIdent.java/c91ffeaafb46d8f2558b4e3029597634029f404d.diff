diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/FullIdent.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/FullIdent.java
index 5e621d579..74b87a3a1 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/FullIdent.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/FullIdent.java
@@ -66,86 +66,90 @@ public final class FullIdent {
      * @param ast the parent node from where to start from
      * @return a {@code FullIdent} value
      */
     public static FullIdent createFullIdentBelow(DetailAST ast) {
         return createFullIdent(ast.getFirstChild());
     }
 
     /**
      * Gets the text.
      * @return the text
      */
     public String getText() {
         return String.join("", elements);
     }
 
     /**
      * Gets the line number.
      * @return the line number
      */
     public int getLineNo() {
         return lineNo;
     }
 
     /**
      * Gets the column number.
      * @return the column number
      */
     public int getColumnNo() {
         return columnNo;
     }
 
     @Override
     public String toString() {
         return String.join("", elements) + "[" + lineNo + "x" + columnNo + "]";
     }
 
     /**
      * Recursively extract a FullIdent.
      *
      * @param full the FullIdent to add to
      * @param ast the node to recurse from
      */
     private static void extractFullIdent(FullIdent full, DetailAST ast) {
         if (ast != null) {
             if (ast.getType() == TokenTypes.DOT) {
                 extractFullIdent(full, ast.getFirstChild());
                 full.append(".");
                 extractFullIdent(
                     full, ast.getFirstChild().getNextSibling());
             }
+            else if (ast.getType() == TokenTypes.ARRAY_DECLARATOR) {
+                extractFullIdent(full, ast.getFirstChild());
+                full.append("[]");
+            }
             else {
                 full.append(ast);
             }
         }
     }
 
     /**
      * Append the specified text.
      * @param text the text to append
      */
     private void append(String text) {
         elements.add(text);
     }
 
     /**
      * Append the specified token and also recalibrate the first line and
      * column.
      * @param ast the token to append
      */
     private void append(DetailAST ast) {
         elements.add(ast.getText());
         if (lineNo == 0) {
             lineNo = ast.getLineNo();
         }
         else if (ast.getLineNo() > 0) {
             lineNo = Math.min(lineNo, ast.getLineNo());
         }
         if (columnNo == 0) {
             columnNo = ast.getColumnNo();
         }
         else if (ast.getColumnNo() > 0) {
             columnNo = Math.min(columnNo, ast.getColumnNo());
         }
     }
 
 }
