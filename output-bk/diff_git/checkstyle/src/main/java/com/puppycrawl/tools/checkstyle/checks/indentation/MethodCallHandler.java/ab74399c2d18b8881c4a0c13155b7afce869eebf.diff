diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java
index 21f886499..812d11637 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java
@@ -69,122 +69,122 @@ public class MethodCallHandler extends AbstractExpressionHandler {
             if (lineStart == firstCol) {
                 indentLevel = super.getLevelImpl();
             }
             else {
                 indentLevel = new IndentLevel(lineStart);
             }
         }
         return indentLevel;
     }
 
     /**
      * If this is the first chained method call which was moved to the next line.
      * @return true if chained class are wrapped
      */
     private boolean isChainedMethodCallWrapped() {
         boolean result = false;
         final DetailAST main = getMainAst();
         final DetailAST dot = main.getFirstChild();
         final DetailAST target = dot.getFirstChild();
 
         final DetailAST dot1 = target.getFirstChild();
         final DetailAST target1 = dot1.getFirstChild();
 
         if (dot1.getType() == TokenTypes.DOT
             && target1.getType() == TokenTypes.METHOD_CALL) {
             result = true;
         }
         return result;
     }
 
     /**
      * Get the first AST of the specified method call.
      *
      * @param ast
      *            the method call
      *
      * @return the first AST of the specified method call
      */
     private static DetailAST getFirstAst(DetailAST ast) {
         // walk down the first child part of the dots that make up a method
         // call name
 
         DetailAST astNode = ast.getFirstChild();
         while (astNode.getType() == TokenTypes.DOT) {
             astNode = astNode.getFirstChild();
         }
         return astNode;
     }
 
     @Override
-    public IndentLevel suggestedChildLevel(AbstractExpressionHandler child) {
+    public IndentLevel getSuggestedChildLevel(AbstractExpressionHandler child) {
         // for whatever reason a method that crosses lines, like asList
         // here:
         //            System.out.println("methods are: " + Arrays.asList(
         //                new String[] {"method"}).toString());
         // will not have the right line num, so just get the child name
 
         final DetailAST first = getMainAst().getFirstChild();
         IndentLevel suggestedLevel = new IndentLevel(getLineStart(first));
         if (!areOnSameLine(child.getMainAst().getFirstChild(),
                            getMainAst().getFirstChild())) {
             suggestedLevel = new IndentLevel(suggestedLevel,
                     getBasicOffset(),
                     getIndentCheck().getLineWrappingIndentation());
         }
 
         // If the right parenthesis is at the start of a line;
         // include line wrapping in suggested indent level.
         final DetailAST rparen = getMainAst().findFirstToken(TokenTypes.RPAREN);
         if (getLineStart(rparen) == rparen.getColumnNo()) {
             suggestedLevel.addAcceptedIndent(new IndentLevel(
-                    getParent().suggestedChildLevel(this),
+                    getParent().getSuggestedChildLevel(this),
                     getIndentCheck().getLineWrappingIndentation()
             ));
         }
 
         return suggestedLevel;
     }
 
     @Override
     public void checkIndentation() {
         final DetailAST exprNode = getMainAst().getParent();
         if (exprNode.getParent().getType() != TokenTypes.SLIST) {
             return;
         }
         final DetailAST methodName = getMainAst().getFirstChild();
         checkExpressionSubtree(methodName, getLevel(), false, false);
 
         final DetailAST lparen = getMainAst();
         final DetailAST rparen = getMainAst().findFirstToken(TokenTypes.RPAREN);
         checkLParen(lparen);
 
         if (rparen.getLineNo() == lparen.getLineNo()) {
             return;
         }
 
         checkExpressionSubtree(
             getMainAst().findFirstToken(TokenTypes.ELIST),
             new IndentLevel(getLevel(), getBasicOffset()),
             false, true);
 
         checkRParen(lparen, rparen);
         final LineWrappingHandler lineWrap =
             new LineWrappingHandler(getIndentCheck(), getMainAst(),
                     getMethodCallLastNode(getMainAst()));
         lineWrap.checkIndentation();
     }
 
     @Override
     protected boolean shouldIncreaseIndent() {
         return false;
     }
 
     /**
      * Returns method call right paren.
      * @param firstNode
      *          method call ast(TokenTypes.METHOD_CALL)
      * @return ast node containing right paren for specified method call. If
      *     method calls are chained returns right paren for last call.
      */
     private static DetailAST getMethodCallLastNode(DetailAST firstNode) {
         return firstNode.getLastChild();
