diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java
index d8de7d3b5..3a56e66ce 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java
@@ -50,101 +50,101 @@ public class ClassResolver
         this.imports = imports;
         imports.add("java.lang.*");
     }
 
     /**
      * Attempts to resolve the Class for a specified name. The algorithm is
      * to check:
      * - fully qualified name
      * - explicit imports
      * - enclosing package
      * - star imports
      * @param name name of the class to resolve
      * @param currentClass name of current class (for inner classes).
      * @return the resolved class
      * @throws ClassNotFoundException if unable to resolve the class
      */
     public Class<?> resolve(String name, String currentClass)
         throws ClassNotFoundException
     {
         // See if the class is full qualified
         Class<?> clazz = resolveQualifiedName(name);
         if (clazz != null) {
             return clazz;
         }
 
         // try matching explicit imports
         for (String imp : imports) {
             // Very important to add the "." in the check below. Otherwise you
             // when checking for "DataException", it will match on
             // "SecurityDataException". This has been the cause of a very
             // difficult bug to resolve!
             if (imp.endsWith("." + name)) {
                 clazz = resolveQualifiedName(imp);
                 if (clazz != null) {
                     return clazz;
                 }
 
             }
         }
 
         // See if in the package
         if (!"".equals(pkg)) {
             clazz = resolveQualifiedName(pkg + "." + name);
             if (clazz != null) {
                 return clazz;
             }
         }
 
         //inner class of this class???
         if (!"".equals(currentClass)) {
-            final String innerClass = (!"".equals(pkg) ? (pkg + ".") : "")
+            final String innerClass = (!"".equals(pkg) ? pkg + "." : "")
                 + currentClass + "$" + name;
             if (isLoadable(innerClass)) {
                 return safeLoad(innerClass);
             }
         }
 
         // try star imports
         for (String imp : imports) {
             if (imp.endsWith(".*")) {
                 final String fqn = imp.substring(0, imp.lastIndexOf('.') + 1)
                     + name;
                 clazz = resolveQualifiedName(fqn);
                 if (clazz != null) {
                     return clazz;
                 }
             }
         }
 
         // Giving up, the type is unknown, so load the class to generate an
         // exception
         return safeLoad(name);
     }
 
     /**
      * @return whether a specified class is loadable with safeLoad().
      * @param name name of the class to check
      */
     public boolean isLoadable(String name)
     {
         try {
             safeLoad(name);
             return true;
         }
         catch (final ClassNotFoundException e) {
             return false;
         }
     }
 
     /**
      * Will load a specified class is such a way that it will NOT be
      * initialised.
      * @param name name of the class to load
      * @return the <code>Class</code> for the specified class
      * @throws ClassNotFoundException if an error occurs
      */
     public Class<?> safeLoad(String name)
         throws ClassNotFoundException
     {
         // The next line will load the class using the specified class
         // loader. The magic is having the "false" parameter. This means the
