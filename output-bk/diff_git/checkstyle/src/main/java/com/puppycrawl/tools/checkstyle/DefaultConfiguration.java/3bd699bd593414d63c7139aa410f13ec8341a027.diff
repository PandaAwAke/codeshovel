diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/DefaultConfiguration.java b/src/main/java/com/puppycrawl/tools/checkstyle/DefaultConfiguration.java
index 6b821be63..318324c31 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/DefaultConfiguration.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/DefaultConfiguration.java
@@ -17,119 +17,119 @@
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle;
 
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 
 /**
  * Default implementation of the Configuration interface.
  * @author lkuehne
  */
 public final class DefaultConfiguration implements Configuration {
     /** Required for serialization. */
     private static final long serialVersionUID = 1157875385356127169L;
 
     /** The name of this configuration */
     private final String name;
 
     /** the list of child Configurations */
     private final List<Configuration> children = Lists.newArrayList();
 
     /** the map from attribute names to attribute values */
     private final Map<String, String> attributeMap = Maps.newHashMap();
 
     /** the map containing custom messages. */
     private final Map<String, String> messages = Maps.newHashMap();
 
     /**
      * Instantiates a DefaultConfiguration.
      * @param name the name for this DefaultConfiguration.
      */
     public DefaultConfiguration(String name) {
         this.name = name;
     }
 
     @Override
     public String[] getAttributeNames() {
         final Set<String> keySet = attributeMap.keySet();
         return keySet.toArray(new String[keySet.size()]);
     }
 
     @Override
-    public String getAttribute(String name) throws CheckstyleException {
-        if (!attributeMap.containsKey(name)) {
+    public String getAttribute(String attributeName) throws CheckstyleException {
+        if (!attributeMap.containsKey(attributeName)) {
             throw new CheckstyleException(
-                    "missing key '" + name + "' in " + getName());
+                    "missing key '" + attributeName + "' in " + getName());
         }
-        return attributeMap.get(name);
+        return attributeMap.get(attributeName);
     }
 
     @Override
     public Configuration[] getChildren() {
         return children.toArray(
             new Configuration[children.size()]);
     }
 
     @Override
     public String getName() {
         return name;
     }
 
     /**
      * Makes a configuration a child of this configuration.
      * @param configuration the child configuration.
      */
     public void addChild(Configuration configuration) {
         children.add(configuration);
     }
 
     /**
      * Removes a child of this configuration.
      * @param configuration the child configuration to remove.
      */
     public void removeChild(final Configuration configuration) {
         children.remove(configuration);
     }
 
     /**
      * Adds an attribute to this configuration.
-     * @param name the name of the attribute.
+     * @param attributeName the name of the attribute.
      * @param value the value of the attribute.
      */
-    public void addAttribute(String name, String value) {
-        final String current = attributeMap.put(name, value);
+    public void addAttribute(String attributeName, String value) {
+        final String current = attributeMap.put(attributeName, value);
         if (current == null) {
-            attributeMap.put(name, value);
+            attributeMap.put(attributeName, value);
         }
         else {
-            attributeMap.put(name, current + "," + value);
+            attributeMap.put(attributeName, current + "," + value);
         }
     }
 
     /**
      * Adds a custom message to this configuration.
      * @param key the message key
      * @param value the custom message pattern
      */
     public void addMessage(String key, String value) {
         messages.put(key, value);
     }
 
     /**
      * Returns an unmodifiable map instance containing the custom messages
      * for this configuration.
      * @return unmodifiable map containing custom messages
      */
     @Override
     public ImmutableMap<String, String> getMessages() {
         return ImmutableMap.copyOf(messages);
     }
 }
