diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java
index 35626478d..3d500f7be 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java
@@ -223,101 +223,101 @@ public class BlockParentHandler extends AbstractExpressionHandler {
      * Check the indentation level of a child that is not a list of statements.
      */
     private void checkNonListChild() {
         final DetailAST nonList = getNonListChild();
         if (nonList == null) {
             return;
         }
 
         final IndentLevel expected = new IndentLevel(getLevel(), getBasicOffset());
         checkExpressionSubtree(nonList, expected, false, false);
     }
 
     /**
      * Get the child element representing the list of statements.
      *
      * @return the statement list child
      */
     protected DetailAST getListChild() {
         return getMainAst().findFirstToken(TokenTypes.SLIST);
     }
 
     /**
      * Get the right parenthesis portion of the expression we are handling.
      *
      * @return the right parenthesis expression
      */
     protected DetailAST getRParen() {
         return getMainAst().findFirstToken(TokenTypes.RPAREN);
     }
 
     /**
      * Get the left parenthesis portion of the expression we are handling.
      *
      * @return the left parenthesis expression
      */
     protected DetailAST getLParen() {
         return getMainAst().findFirstToken(TokenTypes.LPAREN);
     }
 
     @Override
     public void checkIndentation() {
         checkTopLevelToken();
         // separate to allow for eventual configuration
         checkLParen(getLParen());
         checkRParen(getLParen(), getRParen());
         if (hasCurlies()) {
             checkLCurly();
             checkRCurly();
         }
         final DetailAST listChild = getListChild();
-        if (listChild != null) {
+        if (listChild == null) {
+            checkNonListChild();
+        }
+        else {
             // NOTE: switch statements usually don't have curlies
             if (!hasCurlies() || !areOnSameLine(getLCurly(), getRCurly())) {
                 checkChildren(listChild,
-                              getCheckedChildren(),
-                              getChildrenExpectedLevel(),
-                              true,
-                              canChildrenBeNested());
+                        getCheckedChildren(),
+                        getChildrenExpectedLevel(),
+                        true,
+                        canChildrenBeNested());
             }
         }
-        else {
-            checkNonListChild();
-        }
     }
 
     /**
      * Gets indentation level expected for children.
      * @return indentation level expected for children
      */
     protected IndentLevel getChildrenExpectedLevel() {
         IndentLevel indentLevel = new IndentLevel(getLevel(), getBasicOffset());
         // if we have multileveled expected level then we should
         // try to suggest single level to children using curlies'
         // levels.
         if (getLevel().isMultiLevel() && hasCurlies()) {
             if (startsLine(getLCurly())) {
                 indentLevel = new IndentLevel(expandedTabsColumnNo(getLCurly()) + getBasicOffset());
             }
             else if (startsLine(getRCurly())) {
                 final IndentLevel level = new IndentLevel(curlyLevel(), getBasicOffset());
                 level.addAcceptedIndent(level.getFirstIndentLevel() + getLineWrappingIndent());
                 indentLevel = level;
             }
         }
         return indentLevel;
     }
 
     @Override
     public IndentLevel suggestedChildLevel(AbstractExpressionHandler child) {
         return getChildrenExpectedLevel();
     }
 
     /**
      * A shortcut for {@code IndentationCheck} property.
      * @return value of lineWrappingIndentation property
      *         of {@code IndentationCheck}
      */
     private int getLineWrappingIndent() {
         return getIndentCheck().getLineWrappingIndentation();
     }
 }
