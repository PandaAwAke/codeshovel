diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
index 8ca67c9fd..f329f3512 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
@@ -94,143 +94,154 @@ public class FallThroughCheck extends Check {
     public int[] getDefaultTokens() {
         return new int[]{TokenTypes.CASE_GROUP};
     }
 
     @Override
     public int[] getRequiredTokens() {
         return getDefaultTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[]{TokenTypes.CASE_GROUP};
     }
 
     /**
      * Set the relief pattern.
      *
      * @param pattern
      *            The regular expression pattern.
      */
     public void setReliefPattern(String pattern) {
         reliefPattern = pattern;
     }
 
     /**
      * Configures whether we need to check last case group or not.
      * @param value new value of the property.
      */
     public void setCheckLastCaseGroup(boolean value) {
         checkLastCaseGroup = value;
     }
 
     @Override
     public void init() {
         super.init();
         regExp = Pattern.compile(reliefPattern);
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final DetailAST nextGroup = ast.getNextSibling();
         final boolean isLastGroup = nextGroup.getType() != TokenTypes.CASE_GROUP;
         if (isLastGroup && !checkLastCaseGroup) {
             // we do not need to check last group
             return;
         }
 
         final DetailAST slist = ast.findFirstToken(TokenTypes.SLIST);
 
         if (slist != null && !isTerminated(slist, true, true)
-            && !hasFallTruComment(ast, nextGroup)) {
+            && !hasFallThroughComment(ast, nextGroup)) {
             if (isLastGroup) {
                 log(ast, MSG_FALL_THROUGH_LAST);
             }
             else {
                 log(nextGroup, MSG_FALL_THROUGH);
             }
         }
     }
 
     /**
      * Checks if a given subtree terminated by return, throw or,
      * if allowed break, continue.
      * @param ast root of given subtree
      * @param useBreak should we consider break as terminator.
      * @param useContinue should we consider continue as terminator.
      * @return true if the subtree is terminated.
      */
     private boolean isTerminated(final DetailAST ast, boolean useBreak,
                                  boolean useContinue) {
+        boolean terminated;
+
         switch (ast.getType()) {
             case TokenTypes.LITERAL_RETURN:
             case TokenTypes.LITERAL_THROW:
-                return true;
+                terminated = true;
+                break;
             case TokenTypes.LITERAL_BREAK:
-                return useBreak;
+                terminated = useBreak;
+                break;
             case TokenTypes.LITERAL_CONTINUE:
-                return useContinue;
+                terminated = useContinue;
+                break;
             case TokenTypes.SLIST:
-                return checkSlist(ast, useBreak, useContinue);
+                terminated = checkSlist(ast, useBreak, useContinue);
+                break;
             case TokenTypes.LITERAL_IF:
-                return checkIf(ast, useBreak, useContinue);
+                terminated = checkIf(ast, useBreak, useContinue);
+                break;
             case TokenTypes.LITERAL_FOR:
             case TokenTypes.LITERAL_WHILE:
             case TokenTypes.LITERAL_DO:
-                return checkLoop(ast);
+                terminated = checkLoop(ast);
+                break;
             case TokenTypes.LITERAL_TRY:
-                return checkTry(ast, useBreak, useContinue);
+                terminated = checkTry(ast, useBreak, useContinue);
+                break;
             case TokenTypes.LITERAL_SWITCH:
-                return checkSwitch(ast, useContinue);
+                terminated = checkSwitch(ast, useContinue);
+                break;
             default:
-                return false;
+                terminated = false;
         }
+        return terminated;
     }
 
     /**
      * Checks if a given SLIST terminated by return, throw or,
      * if allowed break, continue.
      * @param slistAst SLIST to check
      * @param useBreak should we consider break as terminator.
      * @param useContinue should we consider continue as terminator.
      * @return true if SLIST is terminated.
      */
     private boolean checkSlist(final DetailAST slistAst, boolean useBreak,
                                boolean useContinue) {
         DetailAST lastStmt = slistAst.getLastChild();
 
         if (lastStmt.getType() == TokenTypes.RCURLY) {
             lastStmt = lastStmt.getPreviousSibling();
         }
 
         return lastStmt != null
             && isTerminated(lastStmt, useBreak, useContinue);
     }
 
     /**
      * Checks if a given IF terminated by return, throw or,
      * if allowed break, continue.
      * @param ast IF to check
      * @param useBreak should we consider break as terminator.
      * @param useContinue should we consider continue as terminator.
      * @return true if IF is terminated.
      */
     private boolean checkIf(final DetailAST ast, boolean useBreak,
                             boolean useContinue) {
         final DetailAST thenStmt = ast.findFirstToken(TokenTypes.RPAREN)
                 .getNextSibling();
         final DetailAST elseStmt = thenStmt.getNextSibling();
         boolean isTerminated = isTerminated(thenStmt, useBreak, useContinue);
 
         if (isTerminated && elseStmt != null) {
             isTerminated = isTerminated(elseStmt.getFirstChild(),
                 useBreak, useContinue);
         }
         else if (elseStmt == null) {
             isTerminated = false;
         }
         return isTerminated;
     }
 
     /**
      * Checks if a given loop terminated by return, throw or,
      * if allowed break, continue.
@@ -259,126 +270,125 @@ public class FallThroughCheck extends Check {
      * @return true if try/catch/finally block is terminated.
      */
     private boolean checkTry(final DetailAST ast, boolean useBreak,
                              boolean useContinue) {
         final DetailAST finalStmt = ast.getLastChild();
         if (finalStmt.getType() == TokenTypes.LITERAL_FINALLY) {
             return isTerminated(finalStmt.findFirstToken(TokenTypes.SLIST),
                                 useBreak, useContinue);
         }
 
         boolean isTerminated = isTerminated(ast.getFirstChild(),
                                             useBreak, useContinue);
 
         DetailAST catchStmt = ast.findFirstToken(TokenTypes.LITERAL_CATCH);
         while (catchStmt != null && isTerminated) {
             final DetailAST catchBody =
                 catchStmt.findFirstToken(TokenTypes.SLIST);
             isTerminated &= isTerminated(catchBody, useBreak, useContinue);
             catchStmt = catchStmt.getNextSibling();
         }
         return isTerminated;
     }
 
     /**
      * Checks if a given switch terminated by return, throw or,
      * if allowed break, continue.
      * @param literalSwitchAst loop to check
      * @param useContinue should we consider continue as terminator.
      * @return true if switch is terminated.
      */
     private boolean checkSwitch(final DetailAST literalSwitchAst, boolean useContinue) {
         DetailAST caseGroup = literalSwitchAst.findFirstToken(TokenTypes.CASE_GROUP);
         boolean isTerminated = caseGroup != null;
         while (isTerminated && caseGroup.getType() != TokenTypes.RCURLY) {
             final DetailAST caseBody =
                 caseGroup.findFirstToken(TokenTypes.SLIST);
             isTerminated = caseBody != null && isTerminated(caseBody, false, useContinue);
             caseGroup = caseGroup.getNextSibling();
         }
         return isTerminated;
     }
 
     /**
      * Determines if the fall through case between {@code currentCase} and
      * {@code nextCase} is relieved by a appropriate comment.
      *
      * @param currentCase AST of the case that falls through to the next case.
      * @param nextCase AST of the next case.
      * @return True if a relief comment was found
      */
-    private boolean hasFallTruComment(DetailAST currentCase,
-            DetailAST nextCase) {
-
+    private boolean hasFallThroughComment(DetailAST currentCase, DetailAST nextCase) {
+        boolean allThroughComment = false;
         final int endLineNo = nextCase.getLineNo();
         final int endColNo = nextCase.getColumnNo();
 
         /*
          * Remember: The lines number returned from the AST is 1-based, but
          * the lines number in this array are 0-based. So you will often
          * see a "lineNo-1" etc.
          */
         final String[] lines = getLines();
 
         /*
          * Handle:
          *    case 1:
          *    /+ FALLTHRU +/ case 2:
          *    ....
          * and
          *    switch(i) {
          *    default:
          *    /+ FALLTHRU +/}
          */
         final String linePart = lines[endLineNo - 1].substring(0, endColNo);
         if (commentMatch(regExp, linePart, endLineNo)) {
-            return true;
+            allThroughComment = true;
         }
-
-        /*
-         * Handle:
-         *    case 1:
-         *    .....
-         *    // FALLTHRU
-         *    case 2:
-         *    ....
-         * and
-         *    switch(i) {
-         *    default:
-         *    // FALLTHRU
-         *    }
-         */
-        final int startLineNo = currentCase.getLineNo();
-        for (int i = endLineNo - 2; i > startLineNo - 1; i--) {
-            if (!lines[i].trim().isEmpty()) {
-                return commentMatch(regExp, lines[i], i + 1);
+        else {
+            /*
+             * Handle:
+             *    case 1:
+             *    .....
+             *    // FALLTHRU
+             *    case 2:
+             *    ....
+             * and
+             *    switch(i) {
+             *    default:
+             *    // FALLTHRU
+             *    }
+             */
+            final int startLineNo = currentCase.getLineNo();
+            for (int i = endLineNo - 2; i > startLineNo - 1; i--) {
+                if (!lines[i].trim().isEmpty()) {
+                    allThroughComment = commentMatch(regExp, lines[i], i + 1);
+                    break;
+                }
             }
         }
-
-        // Well -- no relief comment found.
-        return false;
+        return allThroughComment;
     }
 
     /**
      * Does a regular expression match on the given line and checks that a
      * possible match is within a comment.
      * @param pattern The regular expression pattern to use.
      * @param line The line of test to do the match on.
      * @param lineNo The line number in the file.
      * @return True if a match was found inside a comment.
      */
     private boolean commentMatch(Pattern pattern, String line, int lineNo
     ) {
         final Matcher matcher = pattern.matcher(line);
 
         final boolean hit = matcher.find();
 
         if (hit) {
             final int startMatch = matcher.start();
             // -1 because it returns the char position beyond the match
             final int endMatch = matcher.end() - 1;
             return getFileContents().hasIntersectionWithComment(lineNo,
                     startMatch, lineNo, endMatch);
         }
         return false;
     }
 }
