diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java
index b33ca80a4..fafd84f7b 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java
@@ -1,80 +1,79 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2016 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks;
 
 import java.util.Arrays;
 import java.util.Set;
 
-import org.apache.commons.lang3.ArrayUtils;
-
 import antlr.collections.AST;
 
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
+import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 import com.puppycrawl.tools.checkstyle.utils.TokenUtils;
 
 /**
  * <p>
  * Checks for restricted tokens beneath other tokens.
  * </p>
  * <p>
  * Examples of how to configure the check:
  * </p>
  * <pre>
  * &lt;!-- String literal equality check --&gt;
  * &lt;module name="DescendantToken"&gt;
  *     &lt;property name="tokens" value="EQUAL,NOT_EQUAL"/&gt;
  *     &lt;property name="limitedTokens" value="STRING_LITERAL"/&gt;
  *     &lt;property name="maximumNumber" value="0"/&gt;
  *     &lt;property name="maximumDepth" value="1"/&gt;
  * &lt;/module&gt;
  *
  * &lt;!-- Switch with no default --&gt;
  * &lt;module name="DescendantToken"&gt;
  *     &lt;property name="tokens" value="LITERAL_SWITCH"/&gt;
  *     &lt;property name="maximumDepth" value="2"/&gt;
  *     &lt;property name="limitedTokens" value="LITERAL_DEFAULT"/&gt;
  *     &lt;property name="minimumNumber" value="1"/&gt;
  * &lt;/module&gt;
  *
  * &lt;!-- Assert statement may have side effects --&gt;
  * &lt;module name="DescendantToken"&gt;
  *     &lt;property name="tokens" value="LITERAL_ASSERT"/&gt;
  *     &lt;property name="limitedTokens" value="ASSIGN,DEC,INC,POST_DEC,
  *     POST_INC,PLUS_ASSIGN,MINUS_ASSIGN,STAR_ASSIGN,DIV_ASSIGN,MOD_ASSIGN,
  *     BSR_ASSIGN,SR_ASSIGN,SL_ASSIGN,BAND_ASSIGN,BXOR_ASSIGN,BOR_ASSIGN,
  *     METHOD_CALL"/&gt;
  *     &lt;property name="maximumNumber" value="0"/&gt;
  * &lt;/module&gt;
  *
  * &lt;!-- Initializer in for performs no setup - use while instead? --&gt;
  * &lt;module name="DescendantToken"&gt;
  *     &lt;property name="tokens" value="FOR_INIT"/&gt;
  *     &lt;property name="limitedTokens" value="EXPR"/&gt;
  *     &lt;property name="minimumNumber" value="1"/&gt;
  * &lt;/module&gt;
  *
  * &lt;!-- Condition in for performs no check --&gt;
  * &lt;module name="DescendantToken"&gt;
  *     &lt;property name="tokens" value="FOR_CONDITION"/&gt;
  *     &lt;property name="limitedTokens" value="EXPR"/&gt;
  *     &lt;property name="minimumNumber" value="1"/&gt;
  * &lt;/module&gt;
  *
@@ -157,120 +156,120 @@ import com.puppycrawl.tools.checkstyle.utils.TokenUtils;
  *
  * &lt;!-- Too many fields within a class --&gt;
  * &lt;module name="DescendantToken"&gt;
  *     &lt;property name="tokens" value="CLASS_DEF"/&gt;
  *     &lt;property name="limitedTokens" value="VARIABLE_DEF"/&gt;
  *     &lt;property name="maximumDepth" value="2"/&gt;
  *     &lt;property name="maximumNumber" value="10"/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * @author Tim Tyler &lt;tim@tt1.org&gt;
  * @author Rick Giles
  */
 public class DescendantTokenCheck extends AbstractCheck {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY_MIN = "descendant.token.min";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY_MAX = "descendant.token.max";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY_SUM_MIN = "descendant.token.sum.min";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY_SUM_MAX = "descendant.token.sum.max";
 
     /** Minimum depth. */
     private int minimumDepth;
     /** Maximum depth. */
     private int maximumDepth = Integer.MAX_VALUE;
     /** Minimum number. */
     private int minimumNumber;
     /** Maximum number. */
     private int maximumNumber = Integer.MAX_VALUE;
     /** Whether to sum the number of tokens found. */
     private boolean sumTokenCounts;
     /** Limited tokens. */
-    private int[] limitedTokens = ArrayUtils.EMPTY_INT_ARRAY;
+    private int[] limitedTokens = CommonUtils.EMPTY_INT_ARRAY;
     /** Error message when minimum count not reached. */
     private String minimumMessage;
     /** Error message when maximum count exceeded. */
     private String maximumMessage;
 
     /**
      * Counts of descendant tokens.
      * Indexed by (token ID - 1) for performance.
      */
-    private int[] counts = ArrayUtils.EMPTY_INT_ARRAY;
+    private int[] counts = CommonUtils.EMPTY_INT_ARRAY;
 
     @Override
     public int[] getDefaultTokens() {
-        return ArrayUtils.EMPTY_INT_ARRAY;
+        return CommonUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public int[] getRequiredTokens() {
-        return ArrayUtils.EMPTY_INT_ARRAY;
+        return CommonUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         //reset counts
         Arrays.fill(counts, 0);
         countTokens(ast, 0);
 
         if (sumTokenCounts) {
             logAsTotal(ast);
         }
         else {
             logAsSeparated(ast);
         }
     }
 
     /**
      * Log violations for each Token.
      * @param ast token
      */
     private void logAsSeparated(DetailAST ast) {
         // name of this token
         final String name = TokenUtils.getTokenName(ast.getType());
 
         for (int element : limitedTokens) {
             final int tokenCount = counts[element - 1];
             if (tokenCount < minimumNumber) {
                 final String descendantName = TokenUtils.getTokenName(element);
 
                 if (minimumMessage == null) {
                     minimumMessage = MSG_KEY_MIN;
                 }
                 log(ast.getLineNo(), ast.getColumnNo(),
                         minimumMessage,
                         String.valueOf(tokenCount),
                         String.valueOf(minimumNumber),
                         name,
                         descendantName);
             }
             if (tokenCount > maximumNumber) {
                 final String descendantName = TokenUtils.getTokenName(element);
 
                 if (maximumMessage == null) {
                     maximumMessage = MSG_KEY_MAX;
                 }
                 log(ast.getLineNo(), ast.getColumnNo(),
                         maximumMessage,
                         String.valueOf(tokenCount),
                         String.valueOf(maximumNumber),
                         name,
