diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java
index cd763b118..c72f159ed 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java
@@ -1,197 +1,196 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2016 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.api;
 
 import java.io.File;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.regex.Pattern;
 
 import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
 import com.puppycrawl.tools.checkstyle.grammars.CommentListener;
 
 /**
  * Represents the contents of a file.
  *
  * @author Oliver Burn
  */
 public final class FileContents implements CommentListener {
     /**
      * The pattern to match a single line comment containing only the comment
      * itself -- no code.
      */
     private static final String MATCH_SINGLELINE_COMMENT_PAT = "^\\s*//.*$";
     /** Compiled regexp to match a single-line comment line. */
     private static final Pattern MATCH_SINGLELINE_COMMENT = Pattern
             .compile(MATCH_SINGLELINE_COMMENT_PAT);
 
     /** The file name. */
     private final String fileName;
 
     /** The text. */
     private final FileText text;
 
     /** Map of the Javadoc comments indexed on the last line of the comment.
      * The hack is it assumes that there is only one Javadoc comment per line.
      */
-    private final Map<Integer, TextBlock> javadocComments = Maps.newHashMap();
+    private final Map<Integer, TextBlock> javadocComments = new HashMap<>();
     /** Map of the C++ comments indexed on the first line of the comment. */
-    private final Map<Integer, TextBlock> cppComments =
-        Maps.newHashMap();
+    private final Map<Integer, TextBlock> cppComments = new HashMap<>();
 
     /**
      * Map of the C comments indexed on the first line of the comment to a list
      * of comments on that line.
      */
-    private final Map<Integer, List<TextBlock>> clangComments = Maps.newHashMap();
+    private final Map<Integer, List<TextBlock>> clangComments = new HashMap<>();
 
     /**
      * Creates a new {@code FileContents} instance.
      *
      * @param filename name of the file
      * @param lines the contents of the file
      * @deprecated Use {@link #FileContents(FileText)} instead
      *     in order to preserve the original line breaks where possible.
      */
     @Deprecated
     public FileContents(String filename, String... lines) {
         fileName = filename;
         text = FileText.fromLines(new File(filename), Arrays.asList(lines));
     }
 
     /**
      * Creates a new {@code FileContents} instance.
      *
      * @param text the contents of the file
      */
     public FileContents(FileText text) {
         fileName = text.getFile().toString();
         this.text = new FileText(text);
     }
 
     @Override
     public void reportSingleLineComment(String type, int startLineNo,
             int startColNo) {
         reportCppComment(startLineNo, startColNo);
     }
 
     @Override
     public void reportBlockComment(String type, int startLineNo,
             int startColNo, int endLineNo, int endColNo) {
         reportCComment(startLineNo, startColNo, endLineNo, endColNo);
     }
 
     /**
      * Report the location of a C++ style comment.
      * @param startLineNo the starting line number
      * @param startColNo the starting column number
      **/
     public void reportCppComment(int startLineNo, int startColNo) {
         final String line = line(startLineNo - 1);
         final String[] txt = {line.substring(startColNo)};
         final Comment comment = new Comment(txt, startColNo, startLineNo,
                 line.length() - 1);
         cppComments.put(startLineNo, comment);
     }
 
     /**
      * Returns a map of all the C++ style comments. The key is a line number,
      * the value is the comment {@link TextBlock} at the line.
      * @return the Map of comments
      */
     public ImmutableMap<Integer, TextBlock> getCppComments() {
         return ImmutableMap.copyOf(cppComments);
     }
 
     /**
      * Report the location of a C-style comment.
      * @param startLineNo the starting line number
      * @param startColNo the starting column number
      * @param endLineNo the ending line number
      * @param endColNo the ending column number
      **/
     public void reportCComment(int startLineNo, int startColNo,
             int endLineNo, int endColNo) {
         final String[] cComment = extractCComment(startLineNo, startColNo,
                 endLineNo, endColNo);
         final Comment comment = new Comment(cComment, startColNo, endLineNo,
                 endColNo);
 
         // save the comment
         if (clangComments.containsKey(startLineNo)) {
             final List<TextBlock> entries = clangComments.get(startLineNo);
             entries.add(comment);
         }
         else {
-            final List<TextBlock> entries = Lists.newArrayList();
+            final List<TextBlock> entries = new ArrayList<>();
             entries.add(comment);
             clangComments.put(startLineNo, entries);
         }
 
         // Remember if possible Javadoc comment
         final String firstLine = line(startLineNo - 1);
         if (firstLine.contains("/**") && !firstLine.contains("/**/")) {
             javadocComments.put(endLineNo - 1, comment);
         }
     }
 
     /**
      * Returns a map of all C style comments. The key is the line number, the
      * value is a {@link List} of C style comment {@link TextBlock}s
      * that start at that line.
      * @return the map of comments
      */
     public ImmutableMap<Integer, List<TextBlock>> getCComments() {
         return ImmutableMap.copyOf(clangComments);
     }
 
     /**
      * Returns the specified C comment as a String array.
      * @param startLineNo the starting line number
      * @param startColNo the starting column number
      * @param endLineNo the ending line number
      * @param endColNo the ending column number
      * @return C comment as a array
      **/
     private String[] extractCComment(int startLineNo, int startColNo,
             int endLineNo, int endColNo) {
         final String[] returnValue;
         if (startLineNo == endLineNo) {
             returnValue = new String[1];
             returnValue[0] = line(startLineNo - 1).substring(startColNo,
                     endColNo + 1);
         }
         else {
             returnValue = new String[endLineNo - startLineNo + 1];
             returnValue[0] = line(startLineNo - 1).substring(startColNo);
             for (int i = startLineNo; i < endLineNo; i++) {
                 returnValue[i - startLineNo + 1] = line(i);
             }
             returnValue[returnValue.length - 1] = line(endLineNo - 1).substring(0,
                     endColNo + 1);
         }
         return returnValue;
     }
 
     /**
