diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTable.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTable.java
index 20ece7d23..d6847e27a 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTable.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTable.java
@@ -147,108 +147,106 @@ public class TreeTable extends JTable {
 
     /**
      * Set initial value of width for columns in table.
      */
     private void setColumnsInitialWidth() {
         final FontMetrics fontMetrics = getFontMetrics(getFont());
         // Six character string to contain "Column" column.
         final int widthOfSixCharacterString = fontMetrics.stringWidth("XXXXXX");
         // Padding must be added to width for columns to make them fully
         // visible in table header.
         final int padding = 10;
         final int widthOfColumnContainingSixCharacterString =
                 widthOfSixCharacterString + padding;
         getColumn("Line").setMaxWidth(widthOfColumnContainingSixCharacterString);
         getColumn("Column").setMaxWidth(widthOfColumnContainingSixCharacterString);
         final int preferredTreeColumnWidth =
                 Math.toIntExact(Math.round(getPreferredSize().getWidth() * 0.6));
         getColumn("Tree").setPreferredWidth(preferredTreeColumnWidth);
         // Twenty eight character string to contain "Type" column
         final int widthOfTwentyEightCharacterString =
                 fontMetrics.stringWidth("XXXXXXXXXXXXXXXXXXXXXXXXXXXX");
         final int preferredTypeColumnWidth = widthOfTwentyEightCharacterString + padding;
         getColumn("Type").setPreferredWidth(preferredTypeColumnWidth);
     }
 
     /**
      * Overridden to message super and forward the method to the tree.
      * Since the tree is not actually in the component hierarchy it will
      * never receive this unless we forward it in this manner.
      */
     @Override
     public void updateUI() {
         super.updateUI();
         if (tree != null) {
             tree.updateUI();
         }
         // Use the tree's default foreground and background colors in the
         // table.
         LookAndFeel.installColorsAndFont(this, "Tree.background",
                 "Tree.foreground", "Tree.font");
     }
 
     /* Workaround for BasicTableUI anomaly. Make sure the UI never tries to
      * paint the editor. The UI currently uses different techniques to
      * paint the renderers and editors and overriding setBounds() below
      * is not the right thing to do for an editor. Returning -1 for the
      * editing row in this case, ensures the editor is never painted.
      */
     @Override
     public int getEditingRow() {
+        int rowIndex = -1;
         final Class<?> editingClass = getColumnClass(editingColumn);
-
-        if (editingClass == ParseTreeTableModel.class) {
-            return -1;
-        }
-        else {
-            return editingRow;
+        if (editingClass != ParseTreeTableModel.class) {
+            rowIndex = editingRow;
         }
+        return rowIndex;
     }
 
     /**
      * Overridden to pass the new rowHeight to the tree.
      */
     @Override
     public final void setRowHeight(int newRowHeight) {
         super.setRowHeight(newRowHeight);
         if (tree != null && tree.getRowHeight() != newRowHeight) {
             tree.setRowHeight(getRowHeight());
         }
     }
 
     /**
      * @return the tree that is being shared between the model.
      */
     public JTree getTree() {
         return tree;
     }
 
     /**
      * Sets text area editor.
      * @param textArea JTextArea component.
      */
     public void setEditor(JTextArea textArea) {
         editor = textArea;
     }
 
     /**
      * Sets line position map.
      * @param linePositionMap Line position map.
      */
     public void setLinePositionMap(List<Integer> linePositionMap) {
         final List<Integer> copy = new ArrayList<>(linePositionMap);
         this.linePositionMap = Collections.unmodifiableList(copy);
     }
 
     /**
      * TreeTableCellEditor implementation. Component returned is the
      * JTree.
      */
     private class TreeTableCellEditor extends BaseCellEditor implements
             TableCellEditor {
         @Override
         public Component getTableCellEditorComponent(JTable table,
                 Object value,
                 boolean isSelected,
                 int row, int column) {
             return tree;
         }
