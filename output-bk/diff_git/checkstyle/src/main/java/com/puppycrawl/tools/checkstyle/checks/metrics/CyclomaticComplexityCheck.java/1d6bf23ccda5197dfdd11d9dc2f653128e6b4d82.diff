diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java
index cc6af9bb9..0e83db080 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java
@@ -20,61 +20,61 @@ package com.puppycrawl.tools.checkstyle.checks.metrics;
 
 import java.math.BigInteger;
 
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * Checks cyclomatic complexity against a specified limit. The complexity is
  * measured by the number of "if", "while", "do", "for", "?:", "catch",
  * "switch", "case", "&amp;&amp;" and "||" statements (plus one) in the body of
  * the member. It is a measure of the minimum number of possible paths through
  * the source and therefore the number of required tests. Generally 1-4 is
  * considered good, 5-7 ok, 8-10 consider re-factoring, and 11+ re-factor now!
  *
  * @author <a href="mailto:simon@redhillconsulting.com.au">Simon Harris</a>
  * @author Oliver Burn
  */
 public class CyclomaticComplexityCheck
     extends AbstractComplexityCheck
 {
     /** default allowed complexity */
     private static final int DEFAULT_VALUE = 10;
 
     /** Create an instance. */
     public CyclomaticComplexityCheck()
     {
         super(DEFAULT_VALUE);
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.CTOR_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.INSTANCE_INIT,
             TokenTypes.STATIC_INIT,
             TokenTypes.LITERAL_WHILE,
             TokenTypes.LITERAL_DO,
             TokenTypes.LITERAL_FOR,
             TokenTypes.LITERAL_IF,
             TokenTypes.LITERAL_CASE,
             TokenTypes.LITERAL_CATCH,
             TokenTypes.QUESTION,
             TokenTypes.LAND,
             TokenTypes.LOR,
         };
     }
 
     @Override
-    protected final void visitTokenHook(DetailAST aAST)
+    protected final void visitTokenHook(DetailAST ast)
     {
         incrementCurrentValue(BigInteger.ONE);
     }
 
     @Override
     protected final String getMessageID()
     {
         return "cyclomaticComplexity";
     }
 }
