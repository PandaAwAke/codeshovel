diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
index 447f11003..3bb772dcc 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
@@ -348,91 +348,95 @@ public class SuppressWarningsHolder
         }
     }
 
     /**
      * Returns the n'th child of an AST node.
      * @param aAST the AST node to get the child of
      * @param aIndex the index of the child to get
      * @return the n'th child of the given AST node, or {@code null} if none
      */
     private static DetailAST getNthChild(DetailAST aAST, int aIndex)
     {
         DetailAST child = aAST.getFirstChild();
         if (child != null) {
             for (int i = 0; i < aIndex && child != null; ++i) {
                 child = child.getNextSibling();
             }
         }
         return child;
     }
 
     /**
      * Returns the Java identifier represented by an AST.
      * @param aAST an AST node for an IDENT or DOT
      * @return the Java identifier represented by the given AST subtree
      * @throws IllegalArgumentException if the AST is invalid
      */
     private static String getIdentifier(DetailAST aAST)
     {
         if (aAST != null) {
             if (aAST.getType() == TokenTypes.IDENT) {
                 return aAST.getText();
             }
             else if (aAST.getType() == TokenTypes.DOT) {
                 return getIdentifier(aAST.getFirstChild()) + "."
                     + getIdentifier(aAST.getLastChild());
             }
         }
         throw new IllegalArgumentException("Identifier AST expected: " + aAST);
     }
 
     /**
      * Returns the literal string expression represented by an AST.
      * @param aAST an AST node for an EXPR
      * @return the Java string represented by the given AST expression
      * @throws IllegalArgumentException if the AST is invalid
      */
     private static String getStringExpr(DetailAST aAST)
     {
         if (aAST != null && aAST.getType() == TokenTypes.EXPR) {
             final DetailAST firstChild = aAST.getFirstChild();
-            if (firstChild.getType() == TokenTypes.STRING_LITERAL) {
+            switch (firstChild.getType()) {
+            case TokenTypes.STRING_LITERAL:
                 // NOTE: escaped characters are not unescaped
                 final String quotedText = firstChild.getText();
                 return quotedText.substring(1, quotedText.length() - 1);
+            case TokenTypes.IDENT:
+                return firstChild.getText();
+            default:
+                throw new IllegalArgumentException("String literal AST expected: "
+                        + firstChild);
             }
-            throw new IllegalArgumentException("String literal AST expected: "
-                + firstChild);
         }
         throw new IllegalArgumentException("Expression AST expected: " + aAST);
     }
 
     /**
      * Returns the annotation values represented by an AST.
      * @param aAST an AST node for an EXPR or ANNOTATION_ARRAY_INIT
      * @return the list of Java string represented by the given AST for an
      *         expression or annotation array initializer
      * @throws IllegalArgumentException if the AST is invalid
      */
     private static List<String> getAnnotationValues(DetailAST aAST)
     {
         switch (aAST.getType()) {
         case TokenTypes.EXPR:
             return ImmutableList.of(getStringExpr(aAST));
 
         case TokenTypes.ANNOTATION_ARRAY_INIT:
             final List<String> valueList = Lists.newLinkedList();
             DetailAST childAST = aAST.getFirstChild();
             while (childAST != null) {
                 if (childAST.getType() == TokenTypes.EXPR) {
                     valueList.add(getStringExpr(childAST));
                 }
                 childAST = childAST.getNextSibling();
             }
             return valueList;
 
         default:
         }
         throw new IllegalArgumentException(
             "Expression or annotation array initializer AST expected: " + aAST);
     }
 }
