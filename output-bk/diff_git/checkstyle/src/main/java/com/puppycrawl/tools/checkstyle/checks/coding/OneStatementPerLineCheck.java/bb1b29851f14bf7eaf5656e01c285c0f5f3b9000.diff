diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OneStatementPerLineCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OneStatementPerLineCheck.java
index c1dace46e..c480fd742 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OneStatementPerLineCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OneStatementPerLineCheck.java
@@ -1,121 +1,121 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2014  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.coding;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * Restricts the number of statements per line to one.
  * @author Alexander Jesse
  * @author Oliver Burn
  */
 public final class OneStatementPerLineCheck extends Check
 {
     /** hold the line-number where the last statement ended. */
-    private int mLastStatementEnd = -1;
+    private int lastStatementEnd = -1;
     /** tracks the depth of EXPR tokens. */
-    private int mExprDepth;
+    private int exprDepth;
 
     /**
      * The for-header usually has 3 statements on one line, but THIS IS OK.
      */
-    private boolean mInForHeader;
+    private boolean inForHeader;
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.EXPR, TokenTypes.SEMI, TokenTypes.FOR_INIT,
             TokenTypes.FOR_ITERATOR,
         };
     }
 
     @Override
-    public void beginTree(DetailAST aRootAST)
+    public void beginTree(DetailAST rootAST)
     {
-        mExprDepth = 0;
-        mInForHeader = false;
-        mLastStatementEnd = -1;
+        exprDepth = 0;
+        inForHeader = false;
+        lastStatementEnd = -1;
     }
 
     @Override
-    public void visitToken(DetailAST aAst)
+    public void visitToken(DetailAST ast)
     {
-        switch (aAst.getType()) {
+        switch (ast.getType()) {
         case TokenTypes.EXPR:
-            visitExpr(aAst);
+            visitExpr(ast);
             break;
         case TokenTypes.SEMI:
-            visitSemi(aAst);
+            visitSemi(ast);
             break;
         case TokenTypes.FOR_INIT:
-            mInForHeader = true;
+            inForHeader = true;
             break;
         default:
             break;
         }
     }
 
     @Override
-    public void leaveToken(DetailAST aAst)
+    public void leaveToken(DetailAST ast)
     {
-        switch (aAst.getType()) {
+        switch (ast.getType()) {
         case TokenTypes.FOR_ITERATOR:
-            mInForHeader = false;
+            inForHeader = false;
             break;
         case TokenTypes.EXPR:
-            mExprDepth--;
+            exprDepth--;
             break;
         default:
             break;
         }
     }
 
     /**
      * Mark the state-change for the statement (entering) and remember the
      * first line of the last statement. If the first line of the new
      * statement is the same as the last line of the last statement and we are
      * not within a for-statement, then the rule is violated.
-     * @param aAst token for the {@link TokenTypes#EXPR}.
+     * @param ast token for the {@link TokenTypes#EXPR}.
      */
-    private void visitExpr(DetailAST aAst)
+    private void visitExpr(DetailAST ast)
     {
-        mExprDepth++;
-        if (mExprDepth == 1
-                && !mInForHeader
-                && (mLastStatementEnd == aAst.getLineNo()))
+        exprDepth++;
+        if (exprDepth == 1
+                && !inForHeader
+                && (lastStatementEnd == ast.getLineNo()))
         {
-            log(aAst, "multiple.statements.line");
+            log(ast, "multiple.statements.line");
         }
     }
 
     /**
      * Mark the state-change for the statement (leaving) and remember the last
      * line of the last statement.
-     * @param aAst for the {@link TokenTypes#SEMI}.
+     * @param ast for the {@link TokenTypes#SEMI}.
      */
-    private void visitSemi(DetailAST aAst)
+    private void visitSemi(DetailAST ast)
     {
-        if (mExprDepth == 0) {
-            mLastStatementEnd = aAst.getLineNo();
+        if (exprDepth == 0) {
+            lastStatementEnd = ast.getLineNo();
         }
     }
 }
