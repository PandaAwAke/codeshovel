diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java
index e9237d281..c98fbb15f 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java
@@ -298,125 +298,125 @@ public abstract class ExpressionHandler
 
         // check first line
         final int startLine = lines.firstLine();
         final int endLine = lines.lastLine();
         final int startCol = lines.firstLineCol();
 
         final int realStartCol =
             getLineStart(indentCheck.getLine(startLine - 1));
 
         if (realStartCol == startCol) {
             checkSingleLine(startLine, startCol, indentLevel,
                 firstLineMatches);
         }
 
         // if first line starts the line, following lines are indented
         // one level; but if the first line of this expression is
         // nested with the previous expression (which is assumed if it
         // doesn't start the line) then don't indent more, the first
         // indentation is absorbed by the nesting
 
         IndentLevel theLevel = indentLevel;
         if (firstLineMatches
             || firstLine > mainAst.getLineNo() && shouldIncreaseIndent())
         {
             theLevel = new IndentLevel(indentLevel, getBasicOffset());
         }
 
         // check following lines
         for (int i = startLine + 1; i <= endLine; i++) {
             final Integer col = lines.getStartColumn(i);
             // startCol could be null if this line didn't have an
             // expression that was required to be checked (it could be
             // checked by a child expression)
 
             if (col != null) {
                 checkSingleLine(i, col.intValue(), theLevel, false);
             }
         }
     }
 
     /**
      * Check the indent level for a single line.
      *
      * @param lineNum       the line number to check
      * @param indentLevel   the required indent level
      */
     private void checkSingleLine(int lineNum, IndentLevel indentLevel)
     {
         final String line = indentCheck.getLine(lineNum - 1);
         final int start = getLineStart(line);
-        if (indentLevel.gt(start)) {
+        if (indentLevel.greaterThan(start)) {
             logChildError(lineNum, start, indentLevel);
         }
     }
 
     /**
      * Check the indentation for a single line.
      *
      * @param lineNum       the number of the line to check
      * @param colNum        the column number we are starting at
      * @param indentLevel   the indentation level
      * @param mustMatch     whether or not the indentation level must match
      */
 
     private void checkSingleLine(int lineNum, int colNum,
         IndentLevel indentLevel, boolean mustMatch)
     {
         final String line = indentCheck.getLine(lineNum - 1);
         final int start = getLineStart(line);
         // if must match is set, it is an error if the line start is not
         // at the correct indention level; otherwise, it is an only an
         // error if this statement starts the line and it is less than
         // the correct indentation level
         if (mustMatch ? !indentLevel.accept(start)
-            : colNum == start && indentLevel.gt(start))
+            : colNum == start && indentLevel.greaterThan(start))
         {
             logChildError(lineNum, start, indentLevel);
         }
     }
 
     /**
      * Get the start of the specified line.
      *
      * @param line   the specified line number
      *
      * @return the start of the specified line
      */
     protected final int getLineStart(String line)
     {
         for (int start = 0; start < line.length(); start++) {
             final char c = line.charAt(start);
 
             if (!Character.isWhitespace(c)) {
                 return Utils.lengthExpandedTabs(
                     line, start, indentCheck.getIndentationTabWidth());
             }
         }
         return 0;
     }
 
     /**
      * Check the indent level of the children of the specified parent
      * expression.
      *
      * @param parent             the parent whose children we are checking
      * @param tokenTypes         the token types to check
      * @param startLevel         the starting indent level
      * @param firstLineMatches   whether or not the first line needs to match
      * @param allowNesting       whether or not nested children are allowed
      */
     protected final void checkChildren(DetailAST parent,
                                        int[] tokenTypes,
                                        IndentLevel startLevel,
                                        boolean firstLineMatches,
                                        boolean allowNesting)
     {
         Arrays.sort(tokenTypes);
         for (DetailAST child = parent.getFirstChild();
                 child != null;
                 child = child.getNextSibling())
         {
             if (Arrays.binarySearch(tokenTypes, child.getType()) >= 0) {
                 checkExpressionSubtree(child, startLevel,
                     firstLineMatches, allowNesting);
             }
