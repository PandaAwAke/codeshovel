diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java
index ebf1437c8..48f5fbe1d 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java
@@ -1,71 +1,72 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2015 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks.javadoc;
 
+import com.puppycrawl.tools.checkstyle.Utils;
 import com.puppycrawl.tools.checkstyle.api.DetailNode;
 import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;
 
 /**
  * Checks that:
  * <ul>
  * <li>There is one blank line between each of two paragraphs
  * and one blank line before the at-clauses block if it is present.</li>
  * <li>Each paragraph but the first has &lt;p&gt; immediately
  * before the first word, with no space after.</li>
  * </ul>
  *
  * <p>
  * The check can be specified by option tagImmediatelyBeforeFirstWord,
  * which says whether the &lt;p&gt; tag should be placed immediately before
  * the first word.
  *
  * <p>
  * Default configuration:
  * </p>
  * <pre>
  * &lt;module name=&quot;JavadocParagraph&quot;/&gt;
  * </pre>
  *
  * <p>
  * To allow newlines and spaces immediately after the &lt;p&gt; tag:
  * <pre>
  * &lt;module name=&quot;JavadocParagraph&quot;&gt;
  *      &lt;property name=&quot;tagImmediatelyBeforeFirstWord&quot;
  *                   value==&quot;false&quot;/&gt;
  * &lt;/module&quot;&gt;
  * </pre>
  *
  * <p>
  * In case of tagImmediatelyBeforeFirstWord set to false
  * the following example will not have any violations:
  * <pre>
  *   /**
  *    * &lt;p&gt;
  *    * Some Javadoc.
  *    *
  *    * &lt;p&gt;  Some Javadoc.
  *    *
  *    * &lt;p&gt;
  *    * &lt;pre&gt;
  *    * Some preformatted Javadoc.
  *    * &lt;/pre&gt;
  *    *
  *    *&#47;
  * </pre>
@@ -209,53 +210,53 @@ public class JavadocParagraphCheck extends AbstractJavadocCheck {
             }
             previousNode = JavadocUtils.getPreviousSibling(previousNode);
         }
         return true;
     }
 
     /**
      * Finds and returns nearest empty line in javadoc.
      * @param node DetailNode node.
      * @return Some nearest empty line in javadoc.
      */
     private static DetailNode getNearestEmptyLine(DetailNode node) {
         DetailNode newLine = JavadocUtils.getPreviousSibling(node);
         while (newLine != null) {
             final DetailNode previousSibling = JavadocUtils.getPreviousSibling(newLine);
             if (newLine.getType() == JavadocTokenTypes.NEWLINE && isEmptyLine(newLine)) {
                 break;
             }
             newLine = previousSibling;
         }
         return newLine;
     }
 
     /**
      * Tests if NEWLINE node is a last node in javadoc.
      * @param newLine NEWLINE node.
      * @return true, if NEWLINE node is a last node in javadoc.
      */
     private static boolean isLastEmptyLine(DetailNode newLine) {
         DetailNode nextNode = JavadocUtils.getNextSibling(newLine);
         while (nextNode != null && nextNode.getType() != JavadocTokenTypes.JAVADOC_TAG) {
             if (nextNode.getType() == JavadocTokenTypes.TEXT
                     && nextNode.getChildren().length > 1
                     || nextNode.getType() == JavadocTokenTypes.HTML_ELEMENT) {
                 return false;
             }
             nextNode = JavadocUtils.getNextSibling(nextNode);
         }
         return true;
     }
 
     /**
      * Tests whether the paragraph tag is immediately followed by the text.
      * @param tag html tag.
      * @return true, if the paragraph tag is immediately followed by the text.
      */
     private static boolean isImmediatelyFollowedByText(DetailNode tag) {
         final DetailNode nextSibling = JavadocUtils.getNextSibling(tag);
         return nextSibling.getType() == JavadocTokenTypes.NEWLINE
                 || nextSibling.getType() == JavadocTokenTypes.EOF
-                || nextSibling.getText().startsWith(" ");
+                || Utils.startsWithChar(nextSibling.getText(), ' ');
     }
 }
