diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java
index 04b21a856..4fa2cfe2b 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java
@@ -128,101 +128,101 @@ public abstract class AbstractSuperCheck
         }
         else if (isSuperCall(ast)) {
             final MethodNode methodNode = methodStack.getLast();
             methodNode.setCallingSuper();
         }
     }
 
     /**
      *  Determines whether a 'super' literal is a call to the super method
      * for this check.
      * @param ast the AST node of a 'super' literal.
      * @return true if ast is a call to the super method
      * for this check.
      */
     private boolean isSuperCall(DetailAST ast) {
         if (ast.getType() != TokenTypes.LITERAL_SUPER) {
             return false;
         }
         // dot operator?
         DetailAST parent = ast.getParent();
         if (parent == null || parent.getType() != TokenTypes.DOT) {
             return false;
         }
 
         if (isSameNameMethod(ast)) {
             return false;
         }
         if (isZeroParameters(parent)) {
             return false;
         }
 
         // in an overriding method for this check?
         while (parent != null) {
             if (parent.getType() == TokenTypes.METHOD_DEF) {
                 return isOverridingMethod(parent);
             }
             else if (parent.getType() == TokenTypes.CTOR_DEF
                 || parent.getType() == TokenTypes.INSTANCE_INIT) {
                 return false;
             }
             parent = parent.getParent();
         }
         return false;
     }
 
     /**
      * is 0 parameters?
      * @param parent parent AST
      * @return tru if no parameters found
      */
-    private boolean isZeroParameters(DetailAST parent) {
+    private static boolean isZeroParameters(DetailAST parent) {
 
         final DetailAST args = parent.getNextSibling();
         return args == null || args.getType() != TokenTypes.ELIST || args.getChildCount() != 0;
     }
 
     /**
      * is same name of method
      * @param ast method AST
      * @return true if method name is the same
      */
     private boolean isSameNameMethod(DetailAST ast) {
 
         AST sibling = ast.getNextSibling();
         // ignore type parameters
         if (sibling != null
             && sibling.getType() == TokenTypes.TYPE_ARGUMENTS) {
             sibling = sibling.getNextSibling();
         }
         if (sibling == null || sibling.getType() != TokenTypes.IDENT) {
             return true;
         }
         final String name = sibling.getText();
         return !getMethodName().equals(name);
     }
 
     @Override
     public void leaveToken(DetailAST ast) {
         if (isOverridingMethod(ast)) {
             final MethodNode methodNode =
                 methodStack.removeLast();
             if (!methodNode.isCallingSuper()) {
                 final DetailAST methodAST = methodNode.getMethod();
                 final DetailAST nameAST =
                     methodAST.findFirstToken(TokenTypes.IDENT);
                 log(nameAST.getLineNo(), nameAST.getColumnNo(),
                     MSG_KEY, nameAST.getText());
             }
         }
     }
 
     /**
      * Determines whether an AST is a method definition for this check,
      * with 0 parameters.
      * @param ast the method definition AST.
      * @return true if the method of ast is a method for this check.
      */
     private boolean isOverridingMethod(DetailAST ast) {
         if (ast.getType() != TokenTypes.METHOD_DEF
             || ScopeUtils.inInterfaceOrAnnotationBlock(ast)) {
             return false;
