diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java
index 11eaaafe3..0902ba163 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java
@@ -72,87 +72,86 @@ public class SimplifyBooleanReturnCheck
         // [ LITERAL_ELSE (with the elseStatement as a child) ]
 
         // don't bother if this is not if then else
         final AST elseLiteral =
             ast.findFirstToken(TokenTypes.LITERAL_ELSE);
         if (elseLiteral == null) {
             return;
         }
         final AST elseStatement = elseLiteral.getFirstChild();
 
         // skip '(' and ')'
         final AST condition = ast.getFirstChild().getNextSibling();
         final AST thenStatement = condition.getNextSibling().getNextSibling();
 
         if (returnsOnlyBooleanLiteral(thenStatement)
             && returnsOnlyBooleanLiteral(elseStatement)) {
             log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY);
         }
     }
 
     /**
      * Returns if an AST is a return statment with a boolean literal
      * or a compound statement that contains only such a return statement.
      *
      * Returns {@code true} iff ast represents
      * <br/>
      * <pre>
      * return true/false;
      * </pre>
      * or
      * <br/>
      * <pre>
      * {
      *   return true/false;
      * }
      * </pre>
      *
      * @param ast the sytax tree to check
      * @return if ast is a return statment with a boolean literal.
      */
     private static boolean returnsOnlyBooleanLiteral(AST ast) {
         if (isBooleanLiteralReturnStatement(ast)) {
             return true;
         }
 
         final AST firstStmnt = ast.getFirstChild();
         return isBooleanLiteralReturnStatement(firstStmnt);
     }
 
     /**
-     * Returns if an AST is a return statment with a boolean literal.
+     * Returns if an AST is a return statement with a boolean literal.
      *
      * Returns {@code true} iff ast represents
      * <br/>
      * <pre>
      * return true/false;
      * </pre>
      *
-     * @param ast the sytax tree to check
-     * @return if ast is a return statment with a boolean literal.
+     * @param ast the syntax tree to check
+     * @return if ast is a return statement with a boolean literal.
      */
     private static boolean isBooleanLiteralReturnStatement(AST ast) {
-        if (ast == null || ast.getType() != TokenTypes.LITERAL_RETURN) {
-            return false;
-        }
+        boolean booleanReturnStatement = false;
 
-        final AST expr = ast.getFirstChild();
+        if (ast != null && ast.getType() == TokenTypes.LITERAL_RETURN) {
+            final AST expr = ast.getFirstChild();
 
-        if (expr.getType() == TokenTypes.SEMI) {
-            return false;
+            if (expr.getType() != TokenTypes.SEMI) {
+                final AST value = expr.getFirstChild();
+                booleanReturnStatement = isBooleanLiteralType(value.getType());
+            }
         }
-
-        final AST value = expr.getFirstChild();
-        return isBooleanLiteralType(value.getType());
+        return booleanReturnStatement;
     }
 
     /**
      * Checks if a token type is a literal true or false.
      * @param tokenType the TokenType
      * @return true iff tokenType is LITERAL_TRUE or LITERAL_FALSE
      */
     private static boolean isBooleanLiteralType(final int tokenType) {
         final boolean iastrue = tokenType == TokenTypes.LITERAL_TRUE;
         final boolean isFalse = tokenType == TokenTypes.LITERAL_FALSE;
         return iastrue || isFalse;
     }
 }
