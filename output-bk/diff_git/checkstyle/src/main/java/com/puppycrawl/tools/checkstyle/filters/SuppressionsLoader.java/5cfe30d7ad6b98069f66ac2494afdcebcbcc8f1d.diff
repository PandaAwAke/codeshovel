diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoader.java
index f2cd2aab3..2ccf791a0 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoader.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoader.java
@@ -16,214 +16,214 @@
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.filters;
 
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.net.MalformedURLException;
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.net.URL;
 import java.util.Map;
 import java.util.regex.PatternSyntaxException;
 
 import javax.xml.parsers.ParserConfigurationException;
 
 import org.xml.sax.Attributes;
 import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
 
 import com.google.common.collect.Maps;
 import com.puppycrawl.tools.checkstyle.api.AbstractLoader;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.FilterSet;
 
 /**
  * Loads a filter chain of suppressions.
  * @author Rick Giles
  */
 public final class SuppressionsLoader
     extends AbstractLoader
 {
     /** the public ID for the configuration dtd */
     private static final String DTD_PUBLIC_ID_1_0 =
         "-//Puppy Crawl//DTD Suppressions 1.0//EN";
     /** the resource for the configuration dtd */
     private static final String DTD_RESOURCE_NAME_1_0 =
         "com/puppycrawl/tools/checkstyle/suppressions_1_0.dtd";
     /** the public ID for the configuration dtd */
     private static final String DTD_PUBLIC_ID_1_1 =
         "-//Puppy Crawl//DTD Suppressions 1.1//EN";
     /** the resource for the configuration dtd */
     private static final String DTD_RESOURCE_NAME_1_1 =
         "com/puppycrawl/tools/checkstyle/suppressions_1_1.dtd";
 
     /**
      * the filter chain to return in getAFilterChain(),
      * configured during parsing
      */
-    private final FilterSet mFilterChain = new FilterSet();
+    private final FilterSet filterChain = new FilterSet();
 
     /**
      * Creates a new <code>SuppressionsLoader</code> instance.
      * @throws ParserConfigurationException if an error occurs
      * @throws SAXException if an error occurs
      */
     private SuppressionsLoader()
         throws ParserConfigurationException, SAXException
     {
         super(createIdToResourceNameMap());
     }
 
     /**
      * Returns the loaded filter chain.
      * @return the loaded filter chain.
      */
     public FilterSet getFilterChain()
     {
-        return mFilterChain;
+        return filterChain;
     }
 
     @Override
-    public void startElement(String aNamespaceURI,
-                             String aLocalName,
-                             String aQName,
-                             Attributes aAtts)
+    public void startElement(String namespaceURI,
+                             String locqName,
+                             String qName,
+                             Attributes atts)
         throws SAXException
     {
-        if ("suppress".equals(aQName)) {
+        if ("suppress".equals(qName)) {
             //add SuppressElement filter to the filter chain
-            final String files = aAtts.getValue("files");
+            final String files = atts.getValue("files");
             if (files == null) {
                 throw new SAXException("missing files attribute");
             }
-            final String checks = aAtts.getValue("checks");
-            final String modId = aAtts.getValue("id");
+            final String checks = atts.getValue("checks");
+            final String modId = atts.getValue("id");
             if ((checks == null) && (modId == null)) {
                 throw new SAXException("missing checks and id attribute");
             }
             final SuppressElement suppress;
             try {
                 suppress = new SuppressElement(files);
                 if (modId != null) {
                     suppress.setModuleId(modId);
                 }
                 if (checks != null) {
                     suppress.setChecks(checks);
                 }
             }
             catch (final PatternSyntaxException e) {
                 throw new SAXException("invalid files or checks format");
             }
-            final String lines = aAtts.getValue("lines");
+            final String lines = atts.getValue("lines");
             if (lines != null) {
                 suppress.setLines(lines);
             }
-            final String columns = aAtts.getValue("columns");
+            final String columns = atts.getValue("columns");
             if (columns != null) {
                 suppress.setColumns(columns);
             }
-            mFilterChain.addFilter(suppress);
+            filterChain.addFilter(suppress);
         }
     }
 
     /**
      * Returns the suppression filters in a specified file.
-     * @param aFilename name of the suppresssions file.
+     * @param filename name of the suppresssions file.
      * @return the filter chain of suppression elements specified in the file.
      * @throws CheckstyleException if an error occurs.
      */
-    public static FilterSet loadSuppressions(String aFilename)
+    public static FilterSet loadSuppressions(String filename)
         throws CheckstyleException
     {
         try {
             // figure out if this is a File or a URL
             URI uri;
             try {
-                final URL url = new URL(aFilename);
+                final URL url = new URL(filename);
                 uri = url.toURI();
             }
             catch (final MalformedURLException ex) {
                 uri = null;
             }
             catch (final URISyntaxException ex) {
                 // URL violating RFC 2396
                 uri = null;
             }
             if (uri == null) {
-                final File file = new File(aFilename);
+                final File file = new File(filename);
                 if (file.exists()) {
                     uri = file.toURI();
                 }
                 else {
                     // check to see if the file is in the classpath
                     try {
                         final URL configUrl = SuppressionsLoader.class
-                                .getResource(aFilename);
+                                .getResource(filename);
                         if (configUrl == null) {
-                            throw new FileNotFoundException(aFilename);
+                            throw new FileNotFoundException(filename);
                         }
                         uri = configUrl.toURI();
                     }
                     catch (final URISyntaxException e) {
-                        throw new FileNotFoundException(aFilename);
+                        throw new FileNotFoundException(filename);
                     }
                 }
             }
             final InputSource source = new InputSource(uri.toString());
-            return loadSuppressions(source, aFilename);
+            return loadSuppressions(source, filename);
         }
         catch (final FileNotFoundException e) {
-            throw new CheckstyleException("unable to find " + aFilename, e);
+            throw new CheckstyleException("unable to find " + filename, e);
         }
     }
 
     /**
      * Returns the suppression filters in a specified source.
-     * @param aSource the source for the suppressions.
-     * @param aSourceName the name of the source.
-     * @return the filter chain of suppression elements in aSource.
+     * @param source the source for the suppressions.
+     * @param sourceName the name of the source.
+     * @return the filter chain of suppression elements in source.
      * @throws CheckstyleException if an error occurs.
      */
     private static FilterSet loadSuppressions(
-            InputSource aSource, String aSourceName)
+            InputSource source, String sourceName)
         throws CheckstyleException
     {
         try {
             final SuppressionsLoader suppressionsLoader =
                 new SuppressionsLoader();
-            suppressionsLoader.parseInputSource(aSource);
+            suppressionsLoader.parseInputSource(source);
             return suppressionsLoader.getFilterChain();
         }
         catch (final FileNotFoundException e) {
-            throw new CheckstyleException("unable to find " + aSourceName, e);
+            throw new CheckstyleException("unable to find " + sourceName, e);
         }
         catch (final ParserConfigurationException e) {
-            throw new CheckstyleException("unable to parse " + aSourceName, e);
+            throw new CheckstyleException("unable to parse " + sourceName, e);
         }
         catch (final SAXException e) {
             throw new CheckstyleException("unable to parse "
-                    + aSourceName + " - " + e.getMessage(), e);
+                    + sourceName + " - " + e.getMessage(), e);
         }
         catch (final IOException e) {
-            throw new CheckstyleException("unable to read " + aSourceName, e);
+            throw new CheckstyleException("unable to read " + sourceName, e);
         }
         catch (final NumberFormatException e) {
             throw new CheckstyleException("number format exception "
-                + aSourceName + " - " + e.getMessage(), e);
+                + sourceName + " - " + e.getMessage(), e);
         }
     }
 
     /**
      * Creates mapping between local resources and dtd ids.
      * @return map between local resources and dtd ids.
      */
     private static Map<String, String> createIdToResourceNameMap()
     {
         final Map<String, String> map = Maps.newHashMap();
         map.put(DTD_PUBLIC_ID_1_0, DTD_RESOURCE_NAME_1_0);
         map.put(DTD_PUBLIC_ID_1_1, DTD_RESOURCE_NAME_1_1);
         return map;
     }
 }
