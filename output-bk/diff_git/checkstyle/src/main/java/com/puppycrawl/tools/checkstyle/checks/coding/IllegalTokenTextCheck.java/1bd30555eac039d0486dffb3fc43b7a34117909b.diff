diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenTextCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenTextCheck.java
index 8da03583b..b8f8aef65 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenTextCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenTextCheck.java
@@ -75,74 +75,74 @@ public class IllegalTokenTextCheck
 
     @Override
     public void beginTree(DetailAST rootAST)
     {
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[0];
     }
 
     @Override
     public int[] getAcceptableTokens()
     {
         // Any tokens set by property 'tokens' are acceptable
         final Set<String> tokenNames = getTokenNames();
         final int[] result = new int[tokenNames.size()];
         int i = 0;
         for (final String name : tokenNames) {
             result[i] = TokenTypes.getTokenId(name);
             i++;
         }
         return result;
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
         final String text = ast.getText();
         if (getRegexp().matcher(text).find()) {
             String message = getMessage();
             if ("".equals(message)) {
                 message = MSG_KEY;
             }
             log(
                 ast.getLineNo(),
                 ast.getColumnNo(),
                 message,
                 getFormat());
         }
     }
 
     /**
      * Setter for message property.
      * @param message custom message which should be used
      *                 to report about violations.
      */
     public void setMessage(String message)
     {
-        this.message = (null == message) ? "" : message;
+        this.message = null == message ? "" : message;
     }
 
     /**
      * Getter for message property.
      * @return custom message which should be used
      * to report about violations.
      */
     public String getMessage()
     {
         return message;
     }
 
     /**
      * Set whether or not the match is case sensitive.
      * @param caseInsensitive true if the match is case insensitive.
      */
     public void setIgnoreCase(boolean caseInsensitive)
     {
         if (caseInsensitive) {
             setCompileFlags(Pattern.CASE_INSENSITIVE);
         }
     }
 }
