diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfo.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfo.java
index 93b282361..5f4f3f0db 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfo.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfo.java
@@ -519,125 +519,125 @@ public enum JavadocTagInfo
         return this.validInPackageHtml;
     }
 
     /**
      * Checks if tag is valid in a overview.html Javadoc file.
      *
      * @return true if tag is valid.
      */
     public boolean isValidInOverviewHtml()
     {
         return this.validInOverviewHtml;
     }
 
     /**
      * Gets the tag text.
      * @return the tag text
      */
     public String getText()
     {
         return this.text;
     }
 
     /**
      * Gets the tag name.
      * @return the tag name
      */
     public String getName()
     {
         return this.name;
     }
 
     /**
      * Gets the Tag type defined by {@link JavadocTagInfo.Type Type}.
      * @return the Tag type
      */
     public Type getType()
     {
         return this.type;
     }
 
     /**
      * returns a JavadocTag from the tag text.
      * @param text String representing the tag text
      * @return Returns a JavadocTag type from a String representing the tag
      * @throws NullPointerException if the text is null
      * @throws IllegalArgumentException if the text is not a valid tag
      */
     public static JavadocTagInfo fromText(final String text)
     {
         if (text == null) {
-            throw new NullPointerException("the text is null");
+            throw new IllegalArgumentException("the text is null");
         }
 
         final JavadocTagInfo tag = TEXT_TO_TAG.get(text);
 
         if (tag == null) {
             throw new IllegalArgumentException("the text [" + text
                 + "] is not a valid Javadoc tag text");
         }
 
         return tag;
     }
 
     /**
      * returns a JavadocTag from the tag name.
      * @param name String name of the tag
      * @return Returns a JavadocTag type from a String representing the tag
      * @throws NullPointerException if the text is null
      * @throws IllegalArgumentException if the text is not a valid tag. The name
      *    can be checked using {@link JavadocTagInfo#isValidName(String)}
      */
     public static JavadocTagInfo fromName(final String name)
     {
         if (name == null) {
-            throw new NullPointerException("the name is null");
+            throw new IllegalArgumentException("the name is null");
         }
 
         final JavadocTagInfo tag = NAME_TO_TAG.get(name);
 
         if (tag == null) {
             throw new IllegalArgumentException("the name [" + name
                 + "] is not a valid Javadoc tag name");
         }
 
         return tag;
     }
 
     /**
      * Returns whether the provided name is for a valid tag.
      * @param name the tag name to check.
      * @return whether the provided name is for a valid tag.
      */
     public static boolean isValidName(final String name)
     {
         return NAME_TO_TAG.containsKey(name);
     }
 
     /**
      * {@inheritDoc}
      */
     @Override
     public String toString()
     {
         return "text [" + this.text + "] name [" + this.name
             + "] type [" + this.type
             + "] validInPackageHtml [" + this.validInPackageHtml
             + "] validInOverviewHtml [" + this.validInOverviewHtml + "]";
     }
 
     /**
      * The Javadoc Type.
      *
      * For example a {@code @param} tag is a block tag while a
      * {@code {@link}} tag is a inline tag.
      *
      * @author Travis Schneeberger
      */
     public enum Type
     {
         /** block type. **/
         BLOCK,
 
         /** inline type. **/
         INLINE
     }
