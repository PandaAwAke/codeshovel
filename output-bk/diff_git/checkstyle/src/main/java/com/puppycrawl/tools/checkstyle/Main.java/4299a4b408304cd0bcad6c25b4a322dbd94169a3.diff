diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
index 48600100a..b58724384 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
@@ -14,151 +14,157 @@
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle;
 
 import com.google.common.collect.Lists;
 import com.puppycrawl.tools.checkstyle.api.AuditListener;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.UnsupportedEncodingException;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Properties;
 
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.CommandLineParser;
 import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.HelpFormatter;
 import org.apache.commons.cli.Options;
 import org.apache.commons.cli.ParseException;
 
 /**
  * Wrapper command line program for the Checker.
  * @author the original author or authors.
  *
  **/
 public final class Main {
     /** Don't create instance of this class, use {@link #main(String[])} method instead. */
     private Main() {
     }
 
     /**
      * Loops over the files specified checking them for errors. The exit code
      * is the number of errors found in all the files.
      * @param args the command line arguments
      * @throws UnsupportedEncodingException if there is a problem to use UTF-8
      * @throws CheckstyleException if there is a problem with parsing a property file
      * @throws FileNotFoundException if there is a problem with files access
      **/
     public static void main(String... args) throws UnsupportedEncodingException,
-            CheckstyleException, FileNotFoundException {
+            FileNotFoundException {
         int errorCounter = 0;
         boolean cliViolations = false;
+        // provide proper exit code based on results.
+        final int exitWithCliViolation = -1;
+        final int exitWithCheckstyleException = -2;
+        int exitStatus = 0;
 
         try {
             //parse CLI arguments
             final CommandLine commandLine = parseCli(args);
 
             // show version and exit if it is requested
             if (commandLine.hasOption("v")) {
                 System.out.println("Checkstyle version: "
                         + Main.class.getPackage().getImplementationVersion());
+                exitStatus = 0;
             }
             else {
                 // return error is smth is wrong in arguments
                 final List<String> messages = validateCli(commandLine);
                 cliViolations = !messages.isEmpty();
-                if (messages.isEmpty()) {
-
+                if (!cliViolations) {
                     // create config helper object
                     final CliOptions config = convertCliToPojo(commandLine);
                     // run Checker
                     errorCounter = runCheckstyle(config);
-
+                    exitStatus = errorCounter;
                 }
                 else {
+                    exitStatus = exitWithCliViolation;
                     errorCounter = 1;
                     for (String message : messages) {
                         System.out.println(message);
                     }
                 }
             }
         }
         catch (ParseException pex) {
             // smth wrong with arguments - print error and manual
             cliViolations = true;
+            exitStatus = exitWithCliViolation;
             errorCounter = 1;
             System.out.println(pex.getMessage());
             printUsage();
         }
         catch (CheckstyleException e) {
+            exitStatus = exitWithCheckstyleException;
             errorCounter = 1;
             System.out.println(e.getMessage());
         }
         finally {
             // return exit code base on validation of Checker
             if (errorCounter != 0 && !cliViolations) {
                 System.out.println(String.format("Checkstyle ends with %d errors.", errorCounter));
             }
-            // provide proper exit code based on results.
-            System.exit(errorCounter);
+            System.exit(exitStatus);
         }
     }
 
     /**
      * Parses and executes Checkstyle based on passed arguments.
      * @param args
      *        command line parameters
      * @return parsed information about passed parameters
      * @throws ParseException
      *         when passed arguments are not valid
      */
     private static CommandLine parseCli(String... args)
             throws ParseException {
         // parse the parameters
         final CommandLineParser clp = new DefaultParser();
         // always returns not null value
         return clp.parse(buildOptions(), args);
     }
 
     /**
      * Do validation of Command line options
      * @param cmdLine command line object
      * @return list of violations
      */
     private static List<String> validateCli(CommandLine cmdLine) {
         final List<String> result = new ArrayList<>();
         // ensure a configuration file is specified
         if (cmdLine.hasOption("c")) {
             final String configLocation = cmdLine.getOptionValue("c");
             final File configFile =  new File(configLocation);
             if (!configFile.exists()) {
                 result.add(String.format("unable to find '%s'.", configLocation));
             }
 
             // validate optional parameters
             if (cmdLine.hasOption("f")) {
                 final String format = cmdLine.getOptionValue("f");
                 if (!"plain".equals(format) && !"xml".equals(format)) {
                     result.add(String.format("Invalid output format."
                             + " Found '%s' but expected 'plain' or 'xml'.", format));
                 }
             }
 
             if (cmdLine.hasOption("p")) {
                 final String propertiesLocation = cmdLine.getOptionValue("p");
                 final File file = new File(propertiesLocation);
                 if (!file.exists()) {
                     result.add(String.format("Could not find file '%s'.", propertiesLocation));
                 }
             }
@@ -229,101 +235,101 @@ public final class Main {
         final AuditListener listener = createListener(cliOptions.format, cliOptions.outputLocation);
 
         // create Checker object and run it
         int errorCounter = 0;
         final Checker checker = new Checker();
 
         try {
 
             final ClassLoader moduleClassLoader = Checker.class.getClassLoader();
             checker.setModuleClassLoader(moduleClassLoader);
             checker.configure(config);
             checker.addListener(listener);
 
             // run Checker
             errorCounter = checker.process(cliOptions.files);
 
         }
         finally {
             checker.destroy();
         }
 
         return errorCounter;
     }
 
     /**
      * Loads properties from a File.
      * @param file
      *        the properties file
      * @return the properties in file
      * @throws CheckstyleException
      *         when could not load properties file
      */
     private static Properties loadProperties(File file)
             throws CheckstyleException {
         final Properties properties = new Properties();
 
         try (FileInputStream fis = new FileInputStream(file)) {
             properties.load(fis);
         }
         catch (final IOException e) {
             throw new CheckstyleException(String.format(
                     "Unable to load properties from file '%s'.", file.getAbsolutePath()), e);
         }
 
         return properties;
     }
 
     /**
      * Creates the audit listener.
      *
-     * @param format format of the auditt listener
+     * @param format format of the audit listener
      * @param outputLocation the location of output
      * @return a fresh new <code>AuditListener</code>
      * @exception UnsupportedEncodingException if there is problem to use UTf-8
      * @exception FileNotFoundException when provided output location is not found
      */
     private static AuditListener createListener(String format,
                                                 String outputLocation)
             throws UnsupportedEncodingException, FileNotFoundException {
 
         // setup the output stream
         OutputStream out = null;
         boolean closeOut = false;
         if (outputLocation != null) {
             out = new FileOutputStream(outputLocation);
             closeOut = true;
         }
         else {
             out = System.out;
             closeOut = false;
         }
 
         // setup a listener
         AuditListener listener = null;
         switch (format) {
             case "xml":
                 listener = new XMLLogger(out, closeOut);
                 break;
 
             case "plain":
                 listener = new DefaultLogger(out, closeOut);
                 break;
 
             default:
                 throw new IllegalStateException("Invalid output format. Found '" + format
                         + "' but expected 'plain' or 'xml'.");
         }
 
         return listener;
     }
 
     /**
      * Determines the files to process.
      * @param filesToProcess
      *        arguments that were not processed yet but shall be
      * @return list of files to process
      */
     private static List<File> getFilesToProcess(String... filesToProcess) {
         final List<File> files = Lists.newLinkedList();
         for (String element : filesToProcess) {
             files.addAll(listFiles(new File(element)));
