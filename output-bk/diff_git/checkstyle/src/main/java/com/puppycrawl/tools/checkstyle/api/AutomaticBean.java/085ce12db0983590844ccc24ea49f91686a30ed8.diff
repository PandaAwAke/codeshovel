diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
index 5f8e511d2..6e8345948 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
@@ -112,123 +112,122 @@ public class AutomaticBean
      * {@link #finishLocalSetup finishLocalSetup}
      * is called to allow completion of the bean's local setup,
      * after that the method {@link #setupChild setupChild}
      * is called for each {@link Configuration#getChildren child Configuration}
      * of {@code configuration}.
      *
      * @see Configurable
      */
     @Override
     public final void configure(Configuration config)
         throws CheckstyleException {
         configuration = config;
 
         final String[] attributes = config.getAttributeNames();
 
         for (final String key : attributes) {
             final String value = config.getAttribute(key);
 
             tryCopyProperty(config.getName(), key, value, true);
         }
 
         finishLocalSetup();
 
         final Configuration[] childConfigs = config.getChildren();
         for (final Configuration childConfig : childConfigs) {
             setupChild(childConfig);
         }
     }
 
     /**
      * Recheck property and try to copy it
      * @param moduleName name of the module/class
      * @param key key of value
      * @param value value
      * @param recheck whether to check for property existence before copy
      * @throws CheckstyleException then property defined incorrectly
      */
     private void tryCopyProperty(String moduleName, String key, Object value, boolean recheck)
             throws CheckstyleException {
 
         final BeanUtilsBean beanUtils = createBeanUtilsBean();
 
         try {
             if (recheck) {
                 // BeanUtilsBean.copyProperties silently ignores missing setters
                 // for key, so we have to go through great lengths here to
                 // figure out if the bean property really exists.
                 final PropertyDescriptor pd =
                         PropertyUtils.getPropertyDescriptor(this, key);
                 if (pd == null) {
-                    throw new CheckstyleException(
-                            "Property '" + key + "' in module "
-                             + moduleName
-                             + " does not exist, please check the documentation");
+                    final String message = String.format("Property '%s' in module %s does not "
+                            + "exist, please check the documentation", key, moduleName);
+                    throw new CheckstyleException(message);
                 }
             }
             // finally we can set the bean property
             beanUtils.copyProperty(this, key, value);
         }
         catch (final InvocationTargetException | IllegalAccessException
                 | NoSuchMethodException e) {
             // There is no way to catch IllegalAccessException | NoSuchMethodException
             // as we do PropertyUtils.getPropertyDescriptor before beanUtils.copyProperty
             // so we have to join these exceptions with InvocationTargetException
             // to satisfy UTs coverage
-            throw new CheckstyleException(
-                "Cannot set property '" + key + "' to '" + value
-                + "' in module "  + moduleName, e);
+            final String message = String.format("Cannot set property '%s' to '%s' in module %s",
+                    key, value, moduleName);
+            throw new CheckstyleException(message, e);
         }
         catch (final IllegalArgumentException | ConversionException e) {
-            throw new CheckstyleException(
-                "illegal value '" + value + "' for property '" + key
-                + "' of module " + moduleName, e);
+            final String message = String.format("illegal value '%s' for property '%s' of "
+                    + "module %s", value, key, moduleName);
+            throw new CheckstyleException(message, e);
         }
     }
 
     /**
      * Implements the Contextualizable interface using bean introspection.
      * @see Contextualizable
      */
     @Override
     public final void contextualize(Context context)
         throws CheckstyleException {
 
         final Collection<String> attributes = context.getAttributeNames();
 
         for (final String key : attributes) {
             final Object value = context.get(key);
 
             tryCopyProperty(getClass().getName(), key, value, false);
         }
     }
 
     /**
      * Returns the configuration that was used to configure this component.
      * @return the configuration that was used to configure this component.
      */
     protected final Configuration getConfiguration() {
         return configuration;
     }
 
     /**
      * Provides a hook to finish the part of this component's setup that
      * was not handled by the bean introspection.
      * <p>
      * The default implementation does nothing.
      * </p>
      * @throws CheckstyleException if there is a configuration error.
      */
     protected void finishLocalSetup() throws CheckstyleException {
         // No code by default, should be overridden only by demand at subclasses
     }
 
     /**
      * Called by configure() for every child of this component's Configuration.
      * <p>
      * The default implementation does nothing.
      * </p>
      * @param childConf a child of this component's Configuration
      * @throws CheckstyleException if there is a configuration error.
      * @see Configuration#getChildren
      */
     protected void setupChild(Configuration childConf)
