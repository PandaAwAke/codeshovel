diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java b/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java
index 1856cf4c7..dba9f6b88 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java
@@ -6,100 +6,106 @@
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle;
 
 import java.io.Closeable;
 import java.io.File;
 import java.io.IOException;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.util.ResourceBundle;
 import java.util.regex.Pattern;
 import java.util.regex.PatternSyntaxException;
 
 import org.apache.commons.beanutils.ConversionException;
 import org.apache.commons.lang3.ArrayUtils;
 
 import com.google.common.collect.ImmutableCollection;
 import com.google.common.collect.ImmutableMap;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * Contains utility methods.
  *
  * @author <a href="mailto:nesterenko-aleksey@list.ru">Aleksey Nesterenko</a>
  */
 public final class Utils {
 
     /** Maps from a token name to value */
     private static final ImmutableMap<String, Integer> TOKEN_NAME_TO_VALUE;
     /** Maps from a token value to name */
     private static final String[] TOKEN_VALUE_TO_NAME;
 
     /** Array of all token IDs */
     private static final int[] TOKEN_IDS;
 
+    /** Prefix for exception when getting token by given id. */
+    private static final String TOKEN_ID_EXCEPTION_PREFIX = "given id ";
+
+    /** Prefix for exception when getting token by given name. */
+    private static final String TOKEN_NAME_EXCEPTION_PREFIX = "given name ";
+
     // initialise the constants
     static {
         final ImmutableMap.Builder<String, Integer> builder =
                 ImmutableMap.builder();
         final Field[] fields = TokenTypes.class.getDeclaredFields();
         String[] tempTokenValueToName = ArrayUtils.EMPTY_STRING_ARRAY;
         for (final Field field : fields) {
             // Only process the int declarations.
             if (field.getType() != Integer.TYPE) {
                 continue;
             }
 
             final String name = field.getName();
             final int tokenValue = getIntFromField(field, name);
             builder.put(name, tokenValue);
             if (tokenValue > tempTokenValueToName.length - 1) {
                 final String[] temp = new String[tokenValue + 1];
                 System.arraycopy(tempTokenValueToName, 0,
                         temp, 0, tempTokenValueToName.length);
                 tempTokenValueToName = temp;
             }
             tempTokenValueToName[tokenValue] = name;
         }
 
         TOKEN_NAME_TO_VALUE = builder.build();
         TOKEN_VALUE_TO_NAME = tempTokenValueToName;
         final ImmutableCollection<Integer> values = TOKEN_NAME_TO_VALUE.values();
         final Integer[] ids = values.toArray(new Integer[values.size()]);
         TOKEN_IDS = ArrayUtils.toPrimitive(ids);
     }
 
     /** Stop instances being created **/
     private Utils() {
     }
 
     /**
      * Get all token IDs that are available in TokenTypes.
      * @return array of token IDs
      */
     public static int[] getAllTokenIds() {
         final int[] safeCopy = new int[TOKEN_IDS.length];
         System.arraycopy(TOKEN_IDS, 0, safeCopy, 0, TOKEN_IDS.length);
         return safeCopy;
     }
 
     /**
      * Returns whether the file extension matches what we are meant to
      * process.
      * @param file the file to be checked.
      * @param fileExtensions files extensions, empty property in config makes it matches to all.
@@ -250,130 +256,130 @@ public final class Utils {
     public static String relativizeAndNormalizePath(final String baseDirectory, final String path) {
         if (baseDirectory == null) {
             return path;
         }
         final Path pathAbsolute = Paths.get(path).normalize();
         final Path pathBase = Paths.get(baseDirectory).normalize();
         return pathBase.relativize(pathAbsolute).toString();
     }
 
     /**
      * Tests if this string starts with the specified prefix.
      * <p>
      * It is faster version of {@link String#startsWith(String)} optimized for one-character
      * prefixes at the expense of some readability. Suggested by SimplifyStartsWith PMD rule:
      * http://pmd.sourceforge.net/pmd-5.3.1/pmd-java/rules/java/optimizations.html#SimplifyStartsWith
      * </p>
      *
      * @param value the {@code String} to check
      * @param prefix the prefix to find
      * @return {@code true} if the {@code char} is a prefix of the given
      * {@code String}; {@code false} otherwise.
      */
     public static boolean startsWithChar(String value, char prefix) {
         return !value.isEmpty() && value.charAt(0) == prefix;
     }
 
     /**
      * Tests if this string ends with the specified suffix.
      * <p>
      * It is faster version of {@link String#endsWith(String)} optimized for one-character
      * suffixes at the expense of some readability. Suggested by SimplifyStartsWith PMD rule:
      * http://pmd.sourceforge.net/pmd-5.3.1/pmd-java/rules/java/optimizations.html#SimplifyStartsWith
      * </p>
      *
      * @param value the {@code String} to check
      * @param suffix the suffix to find
      * @return {@code true} if the {@code char} is a suffix of the given
      * {@code String}; {@code false} otherwise.
      */
     public static boolean endsWithChar(String value, char suffix) {
         return !value.isEmpty() && value.charAt(value.length() - 1) == suffix;
     }
 
     /**
      * Returns the name of a token for a given ID.
      * @param iD the ID of the token name to get
      * @return a token name
      */
     public static String getTokenName(int iD) {
         if (iD > TOKEN_VALUE_TO_NAME.length - 1) {
-            throw new IllegalArgumentException("given id " + iD);
+            throw new IllegalArgumentException(TOKEN_ID_EXCEPTION_PREFIX + iD);
         }
         final String name = TOKEN_VALUE_TO_NAME[iD];
         if (name == null) {
-            throw new IllegalArgumentException("given id " + iD);
+            throw new IllegalArgumentException(TOKEN_ID_EXCEPTION_PREFIX + iD);
         }
         return name;
     }
 
     /**
      * Returns the ID of a token for a given name.
      * @param name the name of the token ID to get
      * @return a token ID
      */
     public static int getTokenId(String name) {
         final Integer id = TOKEN_NAME_TO_VALUE.get(name);
         if (id == null) {
-            throw new IllegalArgumentException("given name " + name);
+            throw new IllegalArgumentException(TOKEN_NAME_EXCEPTION_PREFIX + name);
         }
         return id;
     }
 
     /**
      * Returns the short description of a token for a given name.
      * @param name the name of the token ID to get
      * @return a short description
      */
     public static String getShortDescription(String name) {
         if (!TOKEN_NAME_TO_VALUE.containsKey(name)) {
-            throw new IllegalArgumentException("given name " + name);
+            throw new IllegalArgumentException(TOKEN_NAME_EXCEPTION_PREFIX + name);
         }
 
         final String tokentypes =
             "com.puppycrawl.tools.checkstyle.api.tokentypes";
         final ResourceBundle bundle = ResourceBundle.getBundle(tokentypes);
         return bundle.getString(name);
     }
 
     /**
      * Is argument comment-related type (SINGLE_LINE_COMMENT,
      * BLOCK_COMMENT_BEGIN, BLOCK_COMMENT_END, COMMENT_CONTENT).
      * @param type
      *        token type.
      * @return true if type is comment-related type.
      */
     public static boolean isCommentType(int type) {
         return type == TokenTypes.SINGLE_LINE_COMMENT
                 || type == TokenTypes.BLOCK_COMMENT_BEGIN
                 || type == TokenTypes.BLOCK_COMMENT_END
                 || type == TokenTypes.COMMENT_CONTENT;
     }
 
     /**
      * Is argument comment-related type name (SINGLE_LINE_COMMENT,
      * BLOCK_COMMENT_BEGIN, BLOCK_COMMENT_END, COMMENT_CONTENT).
      * @param type
      *        token type name.
      * @return true if type is comment-related type name.
      */
     public static boolean isCommentType(String type) {
         return isCommentType(getTokenId(type));
     }
 
     /**
      * @param targetClass from which constructor is returned
      * @param parameterTypes of constructor
      * @return constructor of targetClass or {@link IllegalStateException} if any exception occurs
      * @see Class#getConstructor(Class[])
      */
     public static Constructor<?> getConstructor(Class<?> targetClass, Class<?>... parameterTypes) {
         try {
             return targetClass.getConstructor(parameterTypes);
         }
         catch (NoSuchMethodException ex) {
             throw new IllegalStateException(ex);
         }
     }
 
     /**
      * @param constructor to invoke
