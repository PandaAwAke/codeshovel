diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java
index 8d44d269e..b36ded5d2 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java
@@ -68,111 +68,111 @@ public class MultipleStringLiteralsCheck extends AbstractCheck {
     /**
      * Pattern for matching ignored strings.
      */
     private Pattern ignoreStringsRegexp;
 
     /**
      * Construct an instance with default values.
      */
     public MultipleStringLiteralsCheck() {
         setIgnoreStringsRegexp(Pattern.compile("^\"\"$"));
         ignoreOccurrenceContext.set(TokenTypes.ANNOTATION);
     }
 
     /**
      * Sets the maximum allowed duplicates of a string.
      * @param allowedDuplicates The maximum number of duplicates.
      */
     public void setAllowedDuplicates(int allowedDuplicates) {
         this.allowedDuplicates = allowedDuplicates;
     }
 
     /**
      * Sets regular expression pattern for ignored strings.
      * @param ignoreStringsRegexp
      *        regular expression pattern for ignored strings
      * @noinspection WeakerAccess
      */
     public final void setIgnoreStringsRegexp(Pattern ignoreStringsRegexp) {
         if (ignoreStringsRegexp == null || ignoreStringsRegexp.pattern().isEmpty()) {
             this.ignoreStringsRegexp = null;
         }
         else {
             this.ignoreStringsRegexp = ignoreStringsRegexp;
         }
     }
 
     /**
      * Adds a set of tokens the check is interested in.
      * @param strRep the string representation of the tokens interested in
      */
     public final void setIgnoreOccurrenceContext(String... strRep) {
         ignoreOccurrenceContext.clear();
         for (final String s : strRep) {
             final int type = TokenUtils.getTokenId(s);
             ignoreOccurrenceContext.set(type);
         }
     }
 
     @Override
     public int[] getDefaultTokens() {
-        return getAcceptableTokens();
+        return getRequiredTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
-        return new int[] {TokenTypes.STRING_LITERAL};
+        return getRequiredTokens();
     }
 
     @Override
     public int[] getRequiredTokens() {
-        return getAcceptableTokens();
+        return new int[] {TokenTypes.STRING_LITERAL};
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         if (!isInIgnoreOccurrenceContext(ast)) {
             final String currentString = ast.getText();
             if (ignoreStringsRegexp == null || !ignoreStringsRegexp.matcher(currentString).find()) {
                 List<StringInfo> hitList = stringMap.get(currentString);
                 if (hitList == null) {
                     hitList = new ArrayList<>();
                     stringMap.put(currentString, hitList);
                 }
                 final int line = ast.getLineNo();
                 final int col = ast.getColumnNo();
                 hitList.add(new StringInfo(line, col));
             }
         }
     }
 
     /**
      * Analyses the path from the AST root to a given AST for occurrences
      * of the token types in {@link #ignoreOccurrenceContext}.
      *
      * @param ast the node from where to start searching towards the root node
      * @return whether the path from the root node to ast contains one of the
      *     token type in {@link #ignoreOccurrenceContext}.
      */
     private boolean isInIgnoreOccurrenceContext(DetailAST ast) {
         boolean isInIgnoreOccurrenceContext = false;
         for (DetailAST token = ast;
              token.getParent() != null;
              token = token.getParent()) {
             final int type = token.getType();
             if (ignoreOccurrenceContext.get(type)) {
                 isInIgnoreOccurrenceContext = true;
                 break;
             }
         }
         return isInIgnoreOccurrenceContext;
     }
 
     @Override
     public void beginTree(DetailAST rootAST) {
         stringMap.clear();
     }
 
     @Override
     public void finishTree(DetailAST rootAST) {
         for (Map.Entry<String, List<StringInfo>> stringListEntry : stringMap.entrySet()) {
             final List<StringInfo> hits = stringListEntry.getValue();
