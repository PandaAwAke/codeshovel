diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/Check.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/Check.java
index 0e33c1784..24f118498 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/Check.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/Check.java
@@ -1,104 +1,110 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2014  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.api;
 
-import com.google.common.collect.Sets;
 import java.util.Set;
 
+import com.google.common.collect.Sets;
+
 /**
  * The base class for checks.
  *
  * @author Oliver Burn
  * @version 1.0
  * @see <a href="{@docRoot}/../writingchecks.html" target="_top">Writing
  * your own checks</a>
  */
 public abstract class Check extends AbstractViolationReporter
 {
     /** default tab width for column reporting */
     private static final int DEFAULT_TAB_WIDTH = 8;
 
     /** the current file contents */
     private FileContents mFileContents;
 
     /** the tokens the check is interested in */
     private final Set<String> mTokens = Sets.newHashSet();
 
     /** the object for collecting messages. */
     private LocalizedMessages mMessages;
 
     /** the tab width for column reporting */
     private int mTabWidth = DEFAULT_TAB_WIDTH; // meaningful default
 
     /**
      * The class loader to load external classes. Not initialised as this must
      * be set by my creator.
      */
     private ClassLoader mLoader;
 
+    public boolean isCommentNodesRequired()
+    {
+        return false;
+    }
+
     /**
      * Returns the default token a check is interested in. Only used if the
      * configuration for a check does not define the tokens.
      * @return the default tokens
      * @see TokenTypes
      */
     public abstract int[] getDefaultTokens();
 
     /**
      * The configurable token set.
      * Used to protect Checks against malicious users who specify an
      * unacceptable token set in the configuration file.
      * The default implementation returns the check's default tokens.
      * @return the token set this check is designed for.
      * @see TokenTypes
      */
     public int[] getAcceptableTokens()
     {
         final int[] defaultTokens = getDefaultTokens();
         final int[] copy = new int[defaultTokens.length];
         System.arraycopy(defaultTokens, 0, copy, 0, defaultTokens.length);
         return copy;
     }
 
     /**
      * The tokens that this check must be registered for.
      * @return the token set this must be registered for.
      * @see TokenTypes
      */
     public int[] getRequiredTokens()
     {
         return new int[] {};
     }
 
     /**
      * Adds a set of tokens the check is interested in.
      * @param aStrRep the string representation of the tokens interested in
      */
     public final void setTokens(String[] aStrRep)
     {
         for (final String s : aStrRep) {
             mTokens.add(s);
         }
     }
 
     /**
      * Returns the tokens registered for the check.
      * @return the set of token names
      */
     public final Set<String> getTokenNames()
