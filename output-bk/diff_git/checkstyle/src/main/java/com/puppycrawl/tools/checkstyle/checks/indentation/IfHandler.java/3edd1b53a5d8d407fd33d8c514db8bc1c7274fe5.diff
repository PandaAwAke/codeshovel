diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IfHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IfHandler.java
index 559df404f..73bd90f91 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IfHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IfHandler.java
@@ -24,89 +24,89 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * Handler for if statements.
  *
  * @author jrichard
  */
 public class IfHandler extends BlockParentHandler {
     /**
      * Construct an instance of this handler with the given indentation check,
      * abstract syntax tree, and parent handler.
      *
      * @param indentCheck   the indentation check
      * @param ast           the abstract syntax tree
      * @param parent        the parent handler
      */
     public IfHandler(IndentationCheck indentCheck,
         DetailAST ast, AbstractExpressionHandler parent) {
         super(indentCheck, "if", ast, parent);
     }
 
     @Override
     public IndentLevel suggestedChildLevel(AbstractExpressionHandler child) {
         if (child instanceof ElseHandler) {
             return getLevel();
         }
         return super.suggestedChildLevel(child);
     }
 
     @Override
     protected IndentLevel getLevelImpl() {
         if (isIfAfterElse()) {
             return getParent().getLevel();
         }
         return super.getLevelImpl();
     }
 
     /**
      * Determines if this 'if' statement is part of an 'else' clause
      * and on the same line.
      *
      * @return true if this 'if' is part of an 'else', false otherwise
      */
     private boolean isIfAfterElse() {
         // check if there is an 'else' and an 'if' on the same line
         final DetailAST parent = getMainAst().getParent();
         return parent.getType() == TokenTypes.LITERAL_ELSE
             && parent.getLineNo() == getMainAst().getLineNo();
     }
 
     @Override
-    protected void checkToplevelToken() {
+    protected void checkTopLevelToken() {
         if (isIfAfterElse()) {
             return;
         }
 
-        super.checkToplevelToken();
+        super.checkTopLevelToken();
     }
 
     /**
      * Check the indentation of the conditional expression.
      */
     private void checkCondExpr() {
         final DetailAST condAst = getMainAst().findFirstToken(TokenTypes.LPAREN)
             .getNextSibling();
         final IndentLevel expected =
             new IndentLevel(getLevel(), getBasicOffset());
         checkExpressionSubtree(condAst, expected, false, false);
     }
 
     @Override
     public void checkIndentation() {
         super.checkIndentation();
         checkCondExpr();
         final LineWrappingHandler lineWrap =
             new LineWrappingHandler(getIndentCheck(), getMainAst(),
                     getIfStatementRightParen(getMainAst()));
         lineWrap.checkIndentation();
     }
 
     /**
      * Returns right parenthesis of if statement.
      * @param literalIfAst
      *          literal-if ast node(TokenTypes.LITERAL_IF)
      * @return right parenthesis of if statement.
      */
     private static DetailAST getIfStatementRightParen(DetailAST literalIfAst) {
         return literalIfAst.findFirstToken(TokenTypes.RPAREN);
     }
 }
