diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java b/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java
index 35be71af7..3c8edc2ee 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java
@@ -108,83 +108,84 @@ public class DefaultLogger
         if (infoStream == errorStream) {
             errorWriter = infoWriter;
         }
         else {
             errorWriter = new PrintWriter(errorStreamWriter);
         }
     }
 
     /**
      * Print an Emacs compliant line on the error stream.
      * If the column number is non zero, then also display it.
      * @see AuditListener
      **/
     @Override
     public void addError(AuditEvent event) {
         final SeverityLevel severityLevel = event.getSeverityLevel();
         if (severityLevel != SeverityLevel.IGNORE) {
 
             final String fileName = event.getFileName();
             final String message = event.getMessage();
 
             // avoid StringBuffer.expandCapacity
             final int bufLen = fileName.length() + message.length()
                 + BUFFER_CUSHION;
             final StringBuilder sb = new StringBuilder(bufLen);
 
             sb.append(fileName).append(':').append(event.getLine());
             if (event.getColumn() > 0) {
                 sb.append(':').append(event.getColumn());
             }
             final String errorMessageSeparator = ": ";
             if (printSeverity) {
                 sb.append(errorMessageSeparator).append(severityLevel.getName());
             }
             sb.append(errorMessageSeparator).append(message);
             errorWriter.println(sb);
         }
     }
 
     @Override
     public void addException(AuditEvent event, Throwable throwable) {
         synchronized (errorWriter) {
             errorWriter.println("Error auditing " + event.getFileName());
             throwable.printStackTrace(errorWriter);
         }
     }
 
     @Override
     public void auditStarted(AuditEvent event) {
         infoWriter.println("Starting audit...");
+        infoWriter.flush();
     }
 
     @Override
     public void fileFinished(AuditEvent event) {
-        // No need to implement this method in this class
+        infoWriter.flush();
     }
 
     @Override
     public void fileStarted(AuditEvent event) {
         // No need to implement this method in this class
     }
 
     @Override
     public void auditFinished(AuditEvent event) {
         infoWriter.println("Audit done.");
         closeStreams();
     }
 
     /**
      * Flushes the output streams and closes them if needed.
      */
     private void closeStreams() {
         infoWriter.flush();
         if (closeInfo) {
             infoWriter.close();
         }
 
         errorWriter.flush();
         if (closeError) {
             errorWriter.close();
         }
     }
 }
