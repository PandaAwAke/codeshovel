diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java
index 5000a3a6f..0f2d2229a 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java
@@ -410,57 +410,57 @@ public final class IllegalTypeCheck extends AbstractFormatCheck
         return illegalClassNames.toArray(
             new String[illegalClassNames.size()]);
     }
 
     /**
      * Set the list of ignore method names.
      * @param methodNames array of ignored method names
      */
     public void setIgnoredMethodNames(String[] methodNames)
     {
         ignoredMethodNames.clear();
         Collections.addAll(ignoredMethodNames, methodNames);
     }
 
     /**
      * Get the list of ignored method names.
      * @return array of ignored method names
      */
     public String[] getIgnoredMethodNames()
     {
         return ignoredMethodNames.toArray(
             new String[ignoredMethodNames.size()]);
     }
 
     /**
      * Set the list of legal abstract class names.
      * @param classNames array of legal abstract class names
      */
     public void setLegalAbstractClassNames(String[] classNames)
     {
         legalAbstractClassNames.clear();
         Collections.addAll(legalAbstractClassNames, classNames);
     }
 
     /**
      * Get the list of legal abstract class names.
      * @return array of legal abstract class names
      */
     public String[] getLegalAbstractClassNames()
     {
         return legalAbstractClassNames.toArray(
             new String[legalAbstractClassNames.size()]);
     }
 
     /**
      * Set the list of member modifiers (of methods and fields) which should be checked.
      * @param modifiers String contains modifiers.
      */
     public void setMemberModifiers(String modifiers)
     {
-        final List<Integer> modifiersList = new ArrayList<Integer>(modifiers.length());
+        final List<Integer> modifiersList = new ArrayList<>(modifiers.length());
         for (String modifier : modifiers.split(", ")) {
             modifiersList.add(TokenTypes.getTokenId(modifier));
         }
         this.memberModifiers = modifiersList;
     }
 }
