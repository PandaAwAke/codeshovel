diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ScopeUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/ScopeUtils.java
index 4c13bb5c5..47061b95d 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/ScopeUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ScopeUtils.java
@@ -32,101 +32,101 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  */
 public final class ScopeUtils {
     /** prevent instantiation */
     private ScopeUtils() {
     }
 
     /**
      * Returns the Scope specified by the modifier set.
      *
      * @param aMods root node of a modifier set
      * @return a {@code Scope} value
      */
     public static Scope getScopeFromMods(DetailAST aMods) {
         Scope retVal = Scope.PACKAGE; // default scope
         for (AST token = aMods.getFirstChild();
             token != null;
             token = token.getNextSibling()) {
             if ("public".equals(token.getText())) {
                 retVal = Scope.PUBLIC;
                 break;
             }
             else if ("protected".equals(token.getText())) {
                 retVal = Scope.PROTECTED;
                 break;
             }
             else if ("private".equals(token.getText())) {
                 retVal = Scope.PRIVATE;
                 break;
             }
         }
         return retVal;
     }
 
     /**
      * Returns the scope of the surrounding "block".
      * @param aAST the node to return the scope for
      * @return the Scope of the surrounding block
      */
     public static Scope getSurroundingScope(DetailAST aAST) {
         Scope retVal = null;
         for (DetailAST token = aAST.getParent();
              token != null;
              token = token.getParent()) {
             final int type = token.getType();
             if (type == TokenTypes.CLASS_DEF
                 || type == TokenTypes.INTERFACE_DEF
                 || type == TokenTypes.ANNOTATION_DEF
                 || type == TokenTypes.ENUM_DEF) {
                 final DetailAST mods =
                     token.findFirstToken(TokenTypes.MODIFIERS);
-                final Scope modScope = ScopeUtils.getScopeFromMods(mods);
+                final Scope modScope = getScopeFromMods(mods);
                 if (retVal == null || retVal.isIn(modScope)) {
                     retVal = modScope;
                 }
             }
             else if (type == TokenTypes.LITERAL_NEW) {
                 retVal = Scope.ANONINNER;
                 break; //because Scope.ANONINNER is not in any other Scope
             }
         }
 
         return retVal;
     }
 
     /**
      * Returns whether a node is directly contained within an interface block.
      *
      * @param aAST the node to check if directly contained within an interface
      * block
      * @return a {@code boolean} value
      */
     public static boolean inInterfaceBlock(DetailAST aAST) {
         boolean retVal = false;
 
         // Loop up looking for a containing interface block
         for (DetailAST token = aAST.getParent();
              token != null;
              token = token.getParent()) {
             final int type = token.getType();
             if (type == TokenTypes.CLASS_DEF
                 || type == TokenTypes.ENUM_DEF
                 || type == TokenTypes.ANNOTATION_DEF) {
                 break; // in a class, enum or annotation
             }
             else if (type == TokenTypes.LITERAL_NEW) {
                 break; // inner implementation
             }
             else if (type == TokenTypes.INTERFACE_DEF) {
                 retVal = true;
                 break;
             }
         }
 
         return retVal;
     }
 
     /**
      * Returns whether a node is directly contained within an annotation block.
      *
      * @param aAST the node to check if directly contained within an annotation
      * block
