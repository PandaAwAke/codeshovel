diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java
index a8a511251..3276fa5fa 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java
@@ -159,70 +159,70 @@ public class HandlerFactory
         if (ast.getType() == TokenTypes.METHOD_CALL) {
             return createMethodCallHandler(indentCheck, ast, parent);
         }
 
         ExpressionHandler expHandler = null;
         try {
             final Constructor<?> handlerCtor =
                 typeHandlers.get(ast.getType());
             if (handlerCtor != null) {
                 expHandler = (ExpressionHandler) handlerCtor.newInstance(
                         indentCheck, ast, parent);
             }
         }
         ///CLOVER:OFF
         catch (final InstantiationException e) {
             LOG.debug("couldn't instantiate constructor for " + ast, e);
             throw new RuntimeException("couldn't instantiate constructor for "
                                        + ast);
         }
         catch (final IllegalAccessException e) {
             LOG.debug("couldn't access constructor for " + ast, e);
             throw new RuntimeException("couldn't access constructor for "
                                        + ast);
         }
         catch (final InvocationTargetException e) {
             LOG.debug("couldn't instantiate constructor for " + ast, e);
             throw new RuntimeException("couldn't instantiate constructor for "
                                        + ast);
         }
         if (expHandler == null) {
             throw new RuntimeException("no handler for type " + ast.getType());
         }
         ///CLOVER:ON
         return expHandler;
     }
 
     /**
      * Create new instance of handler for METHOD_CALL.
      *
      * @param indentCheck   the indentation check
      * @param ast           ast to handle
      * @param parent        the handler parent of this AST
      *
      * @return new instance.
      */
     ExpressionHandler createMethodCallHandler(IndentationCheck indentCheck,
         DetailAST ast, ExpressionHandler parent)
     {
         ExpressionHandler theParent = parent;
         DetailAST astNode = ast.getFirstChild();
-        while ((astNode != null) && (astNode.getType() == TokenTypes.DOT)) {
+        while (astNode != null && astNode.getType() == TokenTypes.DOT) {
             astNode = astNode.getFirstChild();
         }
-        if ((astNode != null) && isHandledType(astNode.getType())) {
+        if (astNode != null && isHandledType(astNode.getType())) {
             theParent = getHandler(indentCheck, astNode, theParent);
             createdHandlers.put(astNode, theParent);
         }
         return new MethodCallHandler(indentCheck, ast, theParent);
     }
 
     /** Clears cache of created handlers. */
     void clearCreatedHandlers()
     {
         createdHandlers.clear();
     }
 
     /** cache for created method call handlers */
     private final Map<DetailAST, ExpressionHandler> createdHandlers =
         Maps.newHashMap();
 }
