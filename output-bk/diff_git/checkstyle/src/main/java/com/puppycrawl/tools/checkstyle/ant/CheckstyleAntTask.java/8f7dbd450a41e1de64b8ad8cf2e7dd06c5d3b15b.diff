diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
index 57db4dd0d..e84187b06 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
@@ -293,101 +293,101 @@ public class CheckstyleAntTask extends Task {
 
             // Check for no arguments
             if (fileName == null && fileSets.isEmpty()) {
                 throw new BuildException(
                         "Must specify at least one of 'file' or nested 'fileset'.",
                         getLocation());
             }
             if (configLocation == null) {
                 throw new BuildException("Must specify 'config'.", getLocation());
             }
             realExecute(version);
         }
         finally {
             final long endTime = System.currentTimeMillis();
             log("Total execution took " + (endTime - startTime) + TIME_SUFFIX,
                 Project.MSG_VERBOSE);
         }
     }
 
     /**
      * Helper implementation to perform execution.
      * @param checkstyleVersion Checkstyle compile version.
      */
     private void realExecute(String checkstyleVersion) {
         // Create the checker
         Checker checker = null;
         try {
             checker = createChecker();
 
             // setup the listeners
             final AuditListener[] listeners = getListeners();
             for (AuditListener element : listeners) {
                 checker.addListener(element);
             }
             final SeverityLevelCounter warningCounter =
                 new SeverityLevelCounter(SeverityLevel.WARNING);
             checker.addListener(warningCounter);
 
             processFiles(checker, warningCounter, checkstyleVersion);
         }
         finally {
             destroyChecker(checker);
         }
     }
 
     /**
      * Destroy Checker. This method exists only due to bug in cobertura library
      * https://github.com/cobertura/cobertura/issues/170
      * @param checker Checker that was used to process files
      */
-    private void destroyChecker(Checker checker) {
+    private static void destroyChecker(Checker checker) {
         if (checker != null) {
             checker.destroy();
         }
     }
 
     /**
      * Scans and processes files by means given checker.
      * @param checker Checker to process files
      * @param warningCounter Checker's counter of warnings
      * @param checkstyleVersion Checkstyle compile version
      */
     private void processFiles(Checker checker, final SeverityLevelCounter warningCounter,
             final String checkstyleVersion) {
         final long startTime = System.currentTimeMillis();
         final List<File> files = scanFileSets();
         final long endTime = System.currentTimeMillis();
         log("To locate the files took " + (endTime - startTime) + TIME_SUFFIX,
             Project.MSG_VERBOSE);
 
         log("Running Checkstyle " + checkstyleVersion + " on " + files.size()
                 + " files", Project.MSG_INFO);
         log("Using configuration " + configLocation, Project.MSG_VERBOSE);
 
         final int numErrs;
 
         try {
             final long processingStartTime = System.currentTimeMillis();
             numErrs = checker.process(files);
             final long processingEndTime = System.currentTimeMillis();
             log("To process the files took " + (processingEndTime - processingStartTime)
                 + TIME_SUFFIX, Project.MSG_VERBOSE);
         }
         catch (CheckstyleException ex) {
             throw new BuildException("Unable to process files: " + files, ex);
         }
         final int numWarnings = warningCounter.getCount();
         final boolean okStatus = numErrs <= maxErrors && numWarnings <= maxWarnings;
 
         // Handle the return status
         if (!okStatus) {
             final String failureMsg =
                     "Got " + numErrs + " errors and " + numWarnings
                             + " warnings.";
             if (failureProperty != null) {
                 getProject().setProperty(failureProperty, failureMsg);
             }
 
             if (failOnViolation) {
                 throw new BuildException(failureMsg, getLocation());
             }
