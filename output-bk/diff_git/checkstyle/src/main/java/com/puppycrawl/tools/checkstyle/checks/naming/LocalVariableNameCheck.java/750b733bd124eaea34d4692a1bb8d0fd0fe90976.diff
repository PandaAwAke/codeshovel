diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalVariableNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalVariableNameCheck.java
index 21a724308..1da92a146 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalVariableNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalVariableNameCheck.java
@@ -31,102 +31,102 @@ import com.puppycrawl.tools.checkstyle.api.Utils;
  * by the format property. A catch parameter is considered to be
  * a local variable. The format is a
  * {@link java.util.regex.Pattern regular expression}
  * and defaults to
  * <strong>^[a-z][a-zA-Z0-9]*$</strong>.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="LocalVariableName"/&gt;
  * </pre>
  * <p>
  * An example of how to configure the check for names that begin with a lower
  * case letter, followed by letters, digits, and underscores is:
  * </p>
  * <pre>
  * &lt;module name="LocalVariableName"&gt;
  *    &lt;property name="format" value="^[a-z](_?[a-zA-Z0-9]+)*$"/&gt;
  * &lt;/module&gt;
  * </pre>
  * <p>
  * An example of one character variable name in
  * initialization expression(like "i") in FOR loop:
  * </p>
  * <pre>
  * for(int i = 1; i &lt; 10; i++) {}
  * </pre>
  * <p>
  * An example of how to configure the check to allow one char variable name in
  * <a href="http://docs.oracle.com/javase/tutorial/java/nutsandbolts/for.html">
  * initialization expressions</a> in FOR loop:
  * </p>
  * <pre>
  * &lt;module name="LocalVariableName"&gt;
  *    &lt;property name="allowOneCharVarInForLoop" value="true"/&gt;
  * &lt;/module&gt;
  * </pre>
  * <p>
  *
  * @author Rick Giles
  * @author maxvetrenko
  * @version 1.0
  */
 public class LocalVariableNameCheck
     extends AbstractNameCheck
 {
     /**
      * Allow one character name for initialization expression in FOR loop.
      */
-    private boolean mAllowOneCharVarInForLoop;
+    private boolean allowOneCharVarInForLoop;
 
     /** Regexp for one-char loop variables. */
     private static Pattern sSingleChar = Utils.getPattern("^[a-z]$");
 
     /** Creates a new <code>LocalVariableNameCheck</code> instance. */
     public LocalVariableNameCheck()
     {
         super("^[a-z][a-zA-Z0-9]*$");
     }
 
-    public final void setAllowOneCharVarInForLoop(boolean aAllow)
+    public final void setAllowOneCharVarInForLoop(boolean allow)
     {
-        mAllowOneCharVarInForLoop = aAllow;
+        allowOneCharVarInForLoop = allow;
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.VARIABLE_DEF,
             TokenTypes.PARAMETER_DEF,
         };
     }
 
     @Override
-    protected final boolean mustCheckName(DetailAST aAST)
+    protected final boolean mustCheckName(DetailAST ast)
     {
         final DetailAST modifiersAST =
-            aAST.findFirstToken(TokenTypes.MODIFIERS);
+            ast.findFirstToken(TokenTypes.MODIFIERS);
         final boolean isFinal = (modifiersAST != null)
             && modifiersAST.branchContains(TokenTypes.FINAL);
-        if (mAllowOneCharVarInForLoop && isForLoopVariable(aAST)) {
+        if (allowOneCharVarInForLoop && isForLoopVariable(ast)) {
             final String variableName =
-                    aAST.findFirstToken(TokenTypes.IDENT).getText();
+                    ast.findFirstToken(TokenTypes.IDENT).getText();
             return !sSingleChar.matcher(variableName).find();
         }
-        return (!isFinal && ScopeUtils.isLocalVariableDef(aAST));
+        return (!isFinal && ScopeUtils.isLocalVariableDef(ast));
     }
 
     /**
      * Checks if a variable is the loop's one.
-     * @param aVariableDef variable definition.
+     * @param variableDef variable definition.
      * @return true if a variable is the loop's one.
      */
-    private boolean isForLoopVariable(DetailAST aVariableDef)
+    private boolean isForLoopVariable(DetailAST variableDef)
     {
-        final int parentType = aVariableDef.getParent().getType();
+        final int parentType = variableDef.getParent().getType();
         return  parentType == TokenTypes.FOR_INIT
                 || parentType == TokenTypes.FOR_EACH_CLAUSE;
     }
 }
