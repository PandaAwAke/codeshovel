diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java
index 4d371ad88..5c37b4bb8 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java
@@ -229,101 +229,101 @@ public class IllegalInstantiationCheck
         if (illegalClasses.contains(className)) {
             return className;
         }
         final int pkgNameLen;
 
         if (pkgName == null) {
             pkgNameLen = 0;
         }
         else {
             pkgNameLen = pkgName.length();
         }
 
         for (String illegal : illegalClasses) {
 
             if (isStandardClass(className, illegal)) {
                 return illegal;
             }
             if (isSamePackage(className, pkgNameLen, illegal)) {
                 return illegal;
             }
             final String importArg = checkImportStatements(className);
             if (importArg != null) {
                 return importArg;
             }
         }
         return null;
     }
 
     /**
      * Check import statements
      * @param className name of the class
      * @return value of illegal instatiated type
      */
     private String checkImportStatements(String className) {
         String illegalType = null;
         // import statements
         for (FullIdent importLineText : imports) {
             final String importArg = importLineText.getText();
             if (importArg.endsWith(".*")) {
                 final String fqClass =
                     importArg.substring(0, importArg.length() - 1)
                     + className;
                 // assume that illegalInsts only contain existing classes
                 // or else we might create a false alarm here
                 if (illegalClasses.contains(fqClass)) {
                     illegalType = fqClass;
                     break;
                 }
             }
             else {
-                if (CommonUtils.baseClassname(importArg).equals(className)
+                if (CommonUtils.baseClassName(importArg).equals(className)
                     && illegalClasses.contains(importArg)) {
                     illegalType = importArg;
                     break;
                 }
             }
         }
         return illegalType;
     }
 
     /**
      * Check that type is of the same package
      * @param className class name
      * @param pkgNameLen package name
      * @param illegal illegal value
      * @return true if type of the same package
      */
     private boolean isSamePackage(String className, int pkgNameLen, String illegal) {
         // class from same package
 
         // the toplevel package (pkgName == null) is covered by the
         // "illegalInsts.contains(className)" check above
 
         // the test is the "no garbage" version of
         // illegal.equals(pkgName + "." + className)
         return pkgName != null
                 && className.length() == illegal.length() - pkgNameLen - 1
                 && illegal.charAt(pkgNameLen) == '.'
                 && illegal.endsWith(className)
                 && illegal.startsWith(pkgName);
     }
 
     /**
      * Is Standard Class
      * @param className class name
      * @param illegal illegal value
      * @return true if type is standard
      */
     private boolean isStandardClass(String className, String illegal) {
         // class from java.lang
         if (illegal.length() - JAVA_LANG.length() == className.length()
             && illegal.endsWith(className)
             && illegal.startsWith(JAVA_LANG)) {
             // java.lang needs no import, but a class without import might
             // also come from the same file or be in the same package.
             // E.g. if a class defines an inner class "Boolean",
             // the expression "new Boolean()" refers to that class,
             // not to java.lang.Boolean
 
             final boolean isSameFile = classNames.contains(className);
             final boolean isSamePackage = isSamePackage(className);
