diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java
index 812f1de9c..5ea239ac5 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java
@@ -183,101 +183,101 @@ public final class FileContents implements CommentListener {
             retVal[0] = line(startLineNo - 1).substring(startColNo,
                     endColNo + 1);
         }
         else {
             retVal = new String[endLineNo - startLineNo + 1];
             retVal[0] = line(startLineNo - 1).substring(startColNo);
             for (int i = startLineNo; i < endLineNo; i++) {
                 retVal[i - startLineNo + 1] = line(i);
             }
             retVal[retVal.length - 1] = line(endLineNo - 1).substring(0,
                     endColNo + 1);
         }
         return retVal;
     }
 
     /**
      * Returns the Javadoc comment before the specified line.
      * A return value of <code>null</code> means there is no such comment.
      * @param lineNoBefore the line number to check before
      * @return the Javadoc comment, or <code>null</code> if none
      **/
     public TextBlock getJavadocBefore(int lineNoBefore) {
         // Lines start at 1 to the callers perspective, so need to take off 2
         int lineNo = lineNoBefore - 2;
 
         // skip blank lines
         while (lineNo > 0 && (lineIsBlank(lineNo) || lineIsComment(lineNo))) {
             lineNo--;
         }
 
         return javadocComments.get(lineNo);
     }
 
     /**
      * Get a single line.
      * For internal use only, as getText().get(lineNo) is just as
      * suitable for external use and avoids method duplication.
      * @param lineNo the number of the line to get
      * @return the corresponding line, without terminator
      * @throws IndexOutOfBoundsException if lineNo is invalid
      */
     private String line(int lineNo) {
         return text.get(lineNo);
     }
 
     /**
      * Get the full text of the file.
      * @return an object containing the full text of the file
      */
     public FileText getText() {
-        return text;
+        return new FileText(text);
     }
 
     /** @return the lines in the file */
     public String[] getLines() {
         return text.toLinesArray();
     }
 
     /**
      * Get the line from text of the file.
      * @param index index of the line
      * @return line from text of the file
      */
     public String getLine(int index) {
         return text.get(index);
     }
 
     /** @return the name of the file */
     public String getFileName() {
         return fileName;
     }
 
     /**
      * Getter.
      * @return the name of the file
      * @deprecated use {@link #getFileName} instead
      */
     @Deprecated
     public String getFilename() {
         return getFileName();
     }
 
     /**
      * Checks if the specified line is blank.
      * @param lineNo the line number to check
      * @return if the specified line consists only of tabs and spaces.
      **/
     public boolean lineIsBlank(int lineNo) {
         // possible improvement: avoid garbage creation in trim()
         return line(lineNo).trim().isEmpty();
     }
 
     /**
      * Checks if the specified line is a single-line comment without code.
      * @param lineNo  the line number to check
      * @return if the specified line consists of only a single line comment
      *         without code.
      **/
     public boolean lineIsComment(int lineNo) {
         return MATCH_SINGLELINE_COMMENT.matcher(line(lineNo)).matches();
     }
