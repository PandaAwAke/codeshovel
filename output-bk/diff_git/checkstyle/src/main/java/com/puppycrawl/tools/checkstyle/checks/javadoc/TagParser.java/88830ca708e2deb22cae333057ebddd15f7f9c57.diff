diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java
index 7e263feaf..ea783af3a 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java
@@ -54,134 +54,146 @@ class TagParser {
      * @param text the line of text to parse.
      * @param lineNo the source line number.
      */
     TagParser(String[] text, int lineNo) {
         parseTags(text, lineNo);
     }
 
     /**
      * Returns the next available HtmlTag.
      * @return a HtmlTag or {@code null} if none available.
      * @throws IndexOutOfBoundsException if there are no HtmlTags
      *         left to return.
      */
     public HtmlTag nextTag() {
         return tags.remove(0);
     }
 
     /**
      * Indicates if there are any more HtmlTag to retrieve.
      * @return {@code true} if there are more tags.
      */
     public boolean hasNextTag() {
         return !tags.isEmpty();
     }
 
     /**
      * Performs lazy initialization on the internal tags List
      * and adds the tag.
      * @param tag the HtmlTag to add.
      */
     private void add(HtmlTag tag) {
         tags.add(tag);
     }
 
     /**
      * Parses the text line for any HTML tags and adds them to the internal
      * List of tags.
      * @param text the source line to parse.
      * @param lineNo the source line number.
      */
     private void parseTags(String[] text, int lineNo) {
         final int nLines = text.length;
         Point position = new Point(0, 0);
 
         position = findChar(text, '<', position);
         while (position.getLineNo() < nLines) {
             // if this is html comment then skip it
             if (isCommentTag(text, position)) {
                 position = skipHtmlComment(text, position);
             }
-            else if (!isTag(text, position)) {
-                position = getNextCharPos(text, position);
+            else if (isTag(text, position)) {
+                position = parseTag(text, lineNo, nLines, position);
             }
             else {
-                // find end of tag
-                final Point endTag = findChar(text, '>', position);
-                final boolean incompleteTag = endTag.getLineNo() >= nLines;
-                // get tag id (one word)
-                final String tagId;
-
-                if (incompleteTag) {
-                    tagId = "";
-                }
-                else {
-                    tagId = getTagId(text, position);
-                }
-                // is this closed tag
-                final boolean closedTag =
-                        endTag.getLineNo() < nLines
-                         && text[endTag.getLineNo()]
-                         .charAt(endTag.getColumnNo() - 1) == '/';
-                // add new tag
-                add(new HtmlTag(tagId,
-                                position.getLineNo() + lineNo,
-                                position.getColumnNo(),
-                                closedTag,
-                                incompleteTag,
-                                text[position.getLineNo()]));
-                position = endTag;
+                position = getNextCharPos(text, position);
             }
             position = findChar(text, '<', position);
         }
     }
 
+    /**
+     * Parses the tag and return position after it
+     * @param text the source line to parse.
+     * @param lineNo the source line number.
+     * @param nLines line length
+     * @param position start position for parsing
+     * @return position after tag
+     */
+    private Point parseTag(String[] text, int lineNo, final int nLines, Point position) {
+        // find end of tag
+        final Point endTag = findChar(text, '>', position);
+        final boolean incompleteTag = endTag.getLineNo() >= nLines;
+        // get tag id (one word)
+        final String tagId;
+
+        if (incompleteTag) {
+            tagId = "";
+        }
+        else {
+            tagId = getTagId(text, position);
+        }
+        // is this closed tag
+        final boolean closedTag =
+                endTag.getLineNo() < nLines
+                 && text[endTag.getLineNo()]
+                 .charAt(endTag.getColumnNo() - 1) == '/';
+        // add new tag
+        add(new HtmlTag(tagId,
+                        position.getLineNo() + lineNo,
+                        position.getColumnNo(),
+                        closedTag,
+                        incompleteTag,
+                        text[position.getLineNo()]));
+        return endTag;
+    }
+
     /**
      * Checks if the given position is start one for HTML tag.
      * @param javadocText text of javadoc comments.
      * @param pos position to check.
      * @return {@code true} some HTML tag starts from given position.
      */
     private static boolean isTag(String[] javadocText, Point pos) {
         final int column = pos.getColumnNo() + 1;
         final String text = javadocText[pos.getLineNo()];
 
         //Character.isJavaIdentifier... may not be a valid HTML
         //identifier but is valid for generics
         return column < text.length()
                 && (Character.isJavaIdentifierStart(text.charAt(column))
                     || text.charAt(column) == '/')
                 || column >= text.length();
     }
 
     /**
      * Parse tag id.
      * @param javadocText text of javadoc comments.
      * @param tagStart start position of the tag
      * @return id for given tag
      */
     private static String getTagId(String[] javadocText, Point tagStart) {
         int column = tagStart.getColumnNo() + 1;
         String text = javadocText[tagStart.getLineNo()];
         if (column >= text.length()) {
             return "";
         }
 
         if (text.charAt(column) == '/') {
             column++;
         }
 
         text = text.substring(column).trim();
         int position = 0;
 
         //Character.isJavaIdentifier... may not be a valid HTML
         //identifier but is valid for generics
         while (position < text.length()
             && (Character.isJavaIdentifierStart(text.charAt(position))
                 || Character.isJavaIdentifierPart(text.charAt(position)))) {
             position++;
         }
 
         return text.substring(0, position);
     }
 
     /**
