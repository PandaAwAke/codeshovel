diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java b/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java
index 4d00a4d80..5b87dbfd6 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java
@@ -120,107 +120,119 @@ public class XMLLogger
                 writer.print(" column=\"" + evt.getColumn() + "\"");
             }
             writer.print(" severity=\""
                 + evt.getSeverityLevel().getName()
                 + "\"");
             writer.print(" message=\""
                 + encode(evt.getMessage())
                 + "\"");
             writer.println(" source=\""
                 + encode(evt.getSourceName())
                 + "\"/>");
         }
     }
 
     @Override
     public void addException(AuditEvent evt, Throwable throwable) {
         final StringWriter stringWriter = new StringWriter();
         final PrintWriter printer = new PrintWriter(stringWriter);
         printer.println("<exception>");
         printer.println("<![CDATA[");
         throwable.printStackTrace(printer);
         printer.println("]]>");
         printer.println("</exception>");
         printer.flush();
         writer.println(encode(stringWriter.toString()));
     }
 
     /**
      * Escape &lt;, &gt; &amp; &#39; and &quot; as their entities.
      * @param value the value to escape.
      * @return the escaped value if necessary.
      */
     public static String encode(String value) {
         final StringBuilder sb = new StringBuilder();
         for (int i = 0; i < value.length(); i++) {
             final char chr = value.charAt(i);
             switch (chr) {
                 case '<':
                     sb.append("&lt;");
                     break;
                 case '>':
                     sb.append("&gt;");
                     break;
                 case '\'':
                     sb.append("&apos;");
                     break;
                 case '\"':
                     sb.append("&quot;");
                     break;
                 case '&':
-                    final int nextSemi = value.indexOf(';', i);
-                    if (nextSemi < 0
-                        || !isReference(value.substring(i, nextSemi + 1))) {
-                        sb.append("&amp;");
-                    }
-                    else {
-                        sb.append('&');
-                    }
+                    sb.append(encodeAmpersend(value, i));
                     break;
                 default:
                     sb.append(chr);
                     break;
             }
         }
         return sb.toString();
     }
 
     /**
      * @param ent the possible entity to look for.
      * @return whether the given argument a character or entity reference
      */
     public static boolean isReference(String ent) {
         boolean reference = false;
 
         if (ent.charAt(0) != '&' || !CommonUtils.endsWithChar(ent, ';')) {
             reference = false;
         }
         else if (ent.charAt(1) == '#') {
             // prefix is "&#"
             int prefixLength = 2;
 
             int radix = BASE_10;
             if (ent.charAt(2) == 'x') {
                 prefixLength++;
                 radix = BASE_16;
             }
             try {
                 Integer.parseInt(
                     ent.substring(prefixLength, ent.length() - 1), radix);
                 reference = true;
             }
             catch (final NumberFormatException ignored) {
                 reference = false;
             }
         }
         else {
             final String name = ent.substring(1, ent.length() - 1);
             for (String element : ENTITIES) {
                 if (name.equals(element)) {
                     reference = true;
                     break;
                 }
             }
         }
         return reference;
     }
+
+    /**
+     * Encodes ampersand in value at required position.
+     * @param value string value, which contains ampersand
+     * @param ampPosition position of ampersand in value
+     * @return encoded ampersand which should be used in xml
+     */
+    private static String encodeAmpersend(String value, int ampPosition) {
+        final int nextSemi = value.indexOf(';', ampPosition);
+        String result;
+        if (nextSemi < 0
+            || !isReference(value.substring(ampPosition, nextSemi + 1))) {
+            result = "&amp;";
+        }
+        else {
+            result = "&";
+        }
+        return result;
+    }
 }
