diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/FullIdent.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/FullIdent.java
index 64f17cff8..8cc5c155c 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/FullIdent.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/FullIdent.java
@@ -92,54 +92,54 @@ public final class FullIdent {
         }
         else if (ast.getColumnNo() > 0) {
             columnNo = Math.min(columnNo, ast.getColumnNo());
         }
     }
 
     /**
      * Creates a new FullIdent starting from the specified node.
      * @param ast the node to start from
      * @return a {@code FullIdent} value
      */
     public static FullIdent createFullIdent(DetailAST ast) {
         final FullIdent fi = new FullIdent();
         extractFullIdent(fi, ast);
         return fi;
     }
 
     /**
      * Creates a new FullIdent starting from the child of the specified node.
      * @param ast the parent node from where to start from
      * @return a {@code FullIdent} value
      */
     public static FullIdent createFullIdentBelow(DetailAST ast) {
         return createFullIdent(ast.getFirstChild());
     }
 
     /**
      * Recursively extract a FullIdent.
      *
      * @param full the FullIdent to add to
      * @param ast the node to recurse from
      */
     private static void extractFullIdent(FullIdent full, DetailAST ast) {
         if (ast == null) {
             return;
         }
 
         if (ast.getType() == TokenTypes.DOT) {
             extractFullIdent(full, ast.getFirstChild());
             full.append(".");
             extractFullIdent(
                 full, ast.getFirstChild().getNextSibling());
         }
         else {
             full.append(ast);
         }
     }
 
     @Override
     public String toString() {
-        return getText() + "[" + getLineNo() + "x" + getColumnNo() + "]";
+        return getText() + "[" + lineNo + "x" + columnNo + "]";
     }
 
 }
