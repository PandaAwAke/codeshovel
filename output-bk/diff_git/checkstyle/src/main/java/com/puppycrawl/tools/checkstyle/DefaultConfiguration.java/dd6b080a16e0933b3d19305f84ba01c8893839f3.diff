diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/DefaultConfiguration.java b/src/main/java/com/puppycrawl/tools/checkstyle/DefaultConfiguration.java
index c0ab037b6..b8321506d 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/DefaultConfiguration.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/DefaultConfiguration.java
@@ -25,101 +25,100 @@ import com.google.common.collect.Maps;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
 /**
  * Default implementation of the Configuration interface.
  * @author lkuehne
  */
 public final class DefaultConfiguration implements Configuration
 {
     /** Required for serialization. */
     private static final long serialVersionUID = 1157875385356127169L;
 
     /** The name of this configuration */
     private final String name;
 
     /** the list of child Configurations */
     private final List<Configuration> children = Lists.newArrayList();
 
     /** the map from attribute names to attribute values */
     private final Map<String, String> attributeMap = Maps.newHashMap();
 
     /** the map containing custom messages. */
     private final Map<String, String> messages = Maps.newHashMap();
 
     /**
      * Instantiates a DefaultConfiguration.
      * @param name the name for this DefaultConfiguration.
      */
     public DefaultConfiguration(String name)
     {
         this.name = name;
     }
 
     /** {@inheritDoc} */
     @Override
     public String[] getAttributeNames()
     {
         final Set<String> keySet = attributeMap.keySet();
         return keySet.toArray(new String[keySet.size()]);
     }
 
     /** {@inheritDoc} */
     @Override
     public String getAttribute(String name) throws CheckstyleException
     {
         if (!attributeMap.containsKey(name)) {
-            // TODO: i18n
             throw new CheckstyleException(
                     "missing key '" + name + "' in " + getName());
         }
         return attributeMap.get(name);
     }
 
     /** {@inheritDoc} */
     @Override
     public Configuration[] getChildren()
     {
         return children.toArray(
             new Configuration[children.size()]);
     }
 
     /** {@inheritDoc} */
     @Override
     public String getName()
     {
         return name;
     }
 
     /**
      * Makes a configuration a child of this configuration.
      * @param configuration the child configuration.
      */
     public void addChild(Configuration configuration)
     {
         children.add(configuration);
     }
 
     /**
      * Removes a child of this configuration.
      * @param configuration the child configuration to remove.
      */
     public void removeChild(final Configuration configuration)
     {
         children.remove(configuration);
     }
 
     /**
      * Adds an attribute to this configuration.
      * @param name the name of the attribute.
      * @param value the value of the attribute.
      */
     public void addAttribute(String name, String value)
     {
         final String current = attributeMap.put(name, value);
         if (null == current) {
             attributeMap.put(name, value);
         }
