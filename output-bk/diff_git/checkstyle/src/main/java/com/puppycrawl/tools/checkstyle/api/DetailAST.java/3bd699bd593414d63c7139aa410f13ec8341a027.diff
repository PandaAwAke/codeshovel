diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
index bbfa8e253..d0bc3b5fa 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
@@ -61,105 +61,105 @@ public final class DetailAST extends CommonASTWithHiddenTokens {
      * if branchTokenTypes.get(x) is true.
      */
     private BitSet branchTokenTypes;
 
     @Override
     public void initialize(Token tok) {
         super.initialize(tok);
         lineNo = tok.getLine();
         columnNo = tok.getColumn() - 1; // expect columns to start @ 0
     }
 
     @Override
     public void initialize(AST ast) {
         final DetailAST da = (DetailAST) ast;
         setText(da.getText());
         setType(da.getType());
         lineNo = da.getLineNo();
         columnNo = da.getColumnNo();
         hiddenAfter = da.getHiddenAfter();
         hiddenBefore = da.getHiddenBefore();
     }
 
     @Override
     public void setFirstChild(AST ast) {
         childCount = NOT_INITIALIZED;
         super.setFirstChild(ast);
         if (ast != null) {
             ((DetailAST) ast).setParent(this);
         }
     }
 
     @Override
     public void setNextSibling(AST ast) {
         super.setNextSibling(ast);
         if (ast != null && parent != null) {
             ((DetailAST) ast).setParent(parent);
         }
         if (ast != null) {
             ((DetailAST) ast).setPreviousSibling(this);
         }
     }
 
     /**
      * Add previous sibling.
      * @param ast
      *        DetailAST object.
      */
     public void addPreviousSibling(DetailAST ast) {
         if (ast != null) {
             ast.setParent(parent);
-            final DetailAST previousSibling = getPreviousSibling();
+            final DetailAST previousSiblingNode = getPreviousSibling();
 
-            if (previousSibling != null) {
-                ast.setPreviousSibling(previousSibling);
-                previousSibling.setNextSibling(ast);
+            if (previousSiblingNode != null) {
+                ast.setPreviousSibling(previousSiblingNode);
+                previousSiblingNode.setNextSibling(ast);
             }
             else if (parent != null) {
                 parent.setFirstChild(ast);
             }
 
             ast.setNextSibling(this);
             setPreviousSibling(ast);
         }
     }
 
     /**
      * Add next sibling.
      * @param ast
      *        DetailAST object.
      */
     public void addNextSibling(DetailAST ast) {
         if (ast != null) {
             ast.setParent(parent);
             final DetailAST nextSibling = getNextSibling();
 
             if (nextSibling != null) {
                 ast.setNextSibling(nextSibling);
                 nextSibling.setPreviousSibling(ast);
             }
 
             ast.setPreviousSibling(this);
             setNextSibling(ast);
         }
     }
 
     /**
      * Sets previous sibling.
      * @param ast a previous sibling
      */
     void setPreviousSibling(DetailAST ast) {
         previousSibling = ast;
     }
 
     @Override
     public void addChild(AST ast) {
         super.addChild(ast);
         if (ast != null) {
             ((DetailAST) ast).setParent(this);
             getFirstChild().setParent(this);
         }
     }
 
     /**
      * Returns the number of child nodes one level below this node. That is is
      * does not recurse down the tree.
