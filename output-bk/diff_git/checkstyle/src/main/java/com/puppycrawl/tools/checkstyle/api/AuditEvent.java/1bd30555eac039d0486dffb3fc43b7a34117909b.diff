diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AuditEvent.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AuditEvent.java
index 175ccff3e..3a966593f 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AuditEvent.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AuditEvent.java
@@ -71,76 +71,76 @@ public final class AuditEvent
      * Creates a new <code>AuditEvent</code> instance.
      *
      * @param src source of the event
      * @param fileName file associated with the event
      * @param message the actual message
      */
     public AuditEvent(Object src, String fileName, LocalizedMessage message)
     {
         super(src);
         this.fileName = fileName;
         this.message = message;
     }
 
     /**
      * @return the file name currently being audited or null if there is
      * no relation to a file.
      */
     public String getFileName()
     {
         return fileName;
     }
 
     /**
      * return the line number on the source file where the event occurred.
      * This may be 0 if there is no relation to a file content.
      * @return an integer representing the line number in the file source code.
      */
     public int getLine()
     {
         return message.getLineNo();
     }
 
     /**
      * return the message associated to the event.
      * @return the event message
      */
     public String getMessage()
     {
         return message.getMessage();
     }
 
     /** @return the column associated with the message **/
     public int getColumn()
     {
         return message.getColumnNo();
     }
 
     /** @return the audit event severity level **/
     public SeverityLevel getSeverityLevel()
     {
-        return (message == null)
+        return message == null
             ? SeverityLevel.INFO
             : message.getSeverityLevel();
     }
 
     /**
      * @return the identifier of the module that generated the event. Can return
      *         null.
      */
     public String getModuleId()
     {
         return message.getModuleId();
     }
 
     /** @return the name of the source for the message **/
     public String getSourceName()
     {
         return message.getSourceName();
     }
 
     /** @return the localized message **/
     public LocalizedMessage getLocalizedMessage()
     {
         return message;
     }
 }
