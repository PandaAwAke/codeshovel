diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentLevel.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentLevel.java
index 35c11e66d..52cf9b3d6 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentLevel.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentLevel.java
@@ -69,64 +69,68 @@ public class IndentLevel {
      */
     public boolean isAcceptable(int indent) {
         return levels.get(indent);
     }
 
     /**
      * Returns true if indent less then minimal of
      * acceptable indentation levels, false otherwise.
      * @param indent indentation to check.
      * @return true if {@code indent} less then minimal of
      *         acceptable indentation levels, false otherwise.
      */
     public boolean isGreaterThan(int indent) {
         return levels.nextSetBit(0) > indent;
     }
 
     /**
      * Adds one more acceptable indentation level.
      * @param indent new acceptable indentation.
      */
     public void addAcceptedIndent(int indent) {
         levels.set(indent);
     }
 
     /**
      * Adds one more acceptable indentation level.
      * @param indent new acceptable indentation.
      */
     public void addAcceptedIndent(IndentLevel indent) {
         levels.or(indent.levels);
     }
 
     /**
      * Returns first indentation level.
      * @return indentation level.
      */
     public int getFirstIndentLevel() {
         return levels.nextSetBit(0);
     }
 
     /**
      * Returns last indentation level.
      * @return indentation level.
      */
     public int getLastIndentLevel() {
         return levels.length() - 1;
     }
 
     @Override
     public String toString() {
+        final String result;
         if (levels.cardinality() == 1) {
-            return String.valueOf(levels.nextSetBit(0));
+            result = String.valueOf(levels.nextSetBit(0));
         }
-        final StringBuilder sb = new StringBuilder(50);
-        for (int i = levels.nextSetBit(0); i >= 0;
-            i = levels.nextSetBit(i + 1)) {
-            if (sb.length() > 0) {
-                sb.append(", ");
+        else {
+            final StringBuilder sb = new StringBuilder(50);
+            for (int i = levels.nextSetBit(0); i >= 0;
+                 i = levels.nextSetBit(i + 1)) {
+                if (sb.length() > 0) {
+                    sb.append(", ");
+                }
+                sb.append(i);
             }
-            sb.append(i);
+            result = sb.toString();
         }
-        return sb.toString();
+        return result;
     }
 }
