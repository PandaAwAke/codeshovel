diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java
index 8a2b2e0af..77e7f90f8 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java
@@ -229,169 +229,170 @@ public abstract class AbstractJavadocCheck extends Check
     private ParseStatus parseJavadocAsDetailNode(DetailAST javadocCommentAst)
     {
         final String javadocComment = JavadocUtils.getJavadocCommentContent(javadocCommentAst);
 
         // Log messages should have line number in scope of file,
         // not in scope of Javadoc comment.
         // Offset is line number of beginning of Javadoc comment.
         errorListener.setOffset(javadocCommentAst.getLineNo() - 1);
 
         final ParseStatus result = new ParseStatus();
         ParseTree parseTree = null;
         ParseErrorMessage parseErrorMessage = null;
 
         try {
             parseTree = parseJavadocAsParseTree(javadocComment);
         }
         catch (IOException e) {
             // Antlr can not initiate its ANTLRInputStream
             parseErrorMessage = new ParseErrorMessage(javadocCommentAst.getLineNo(),
                     PARSE_ERROR_MESSAGE_KEY,
                     javadocCommentAst.getColumnNo(), e.getMessage());
         }
         catch (ParseCancellationException e) {
             // If syntax error occurs then message is printed by error listener
             // and parser throws this runtime exception to stop parsing.
             // Just stop processing current Javadoc comment.
             parseErrorMessage = errorListener.getErrorMessage();
 
             // There are cases when antlr error listener does not handle syntax error
             if (parseErrorMessage == null) {
                 parseErrorMessage = new ParseErrorMessage(javadocCommentAst.getLineNo(),
                         UNRECOGNIZED_ANTLR_ERROR_MESSAGE_KEY,
                         javadocCommentAst.getColumnNo(), e.getMessage());
             }
         }
 
         if (parseErrorMessage == null) {
             final DetailNode tree = convertParseTree2DetailNode(parseTree);
             result.setTree(tree);
         }
         else {
             result.setParseErrorMessage(parseErrorMessage);
         }
 
         return result;
     }
 
     /**
      * Converts ParseTree (that is generated by ANTLRv4) to DetailNode tree.
      *
-     * @param rootParseTree root node of ParseTree
+     * @param parseTreeNode root node of ParseTree
      * @return root of DetailNode tree
      */
-    private DetailNode convertParseTree2DetailNode(ParseTree rootParseTree)
+    private DetailNode convertParseTree2DetailNode(ParseTree parseTreeNode)
     {
-        final ParseTree currentParseTreeNode = rootParseTree;
-        final JavadocNodeImpl rootJavadocNode = createJavadocNode(currentParseTreeNode, null, -1);
+        final JavadocNodeImpl rootJavadocNode = createJavadocNode(parseTreeNode, null, -1);
 
-        int childCount = currentParseTreeNode.getChildCount();
-        JavadocNodeImpl[] children = (JavadocNodeImpl[]) rootJavadocNode.getChildren();
+        int childCount = parseTreeNode.getChildCount();
+        JavadocNodeImpl[] children = new JavadocNodeImpl[childCount];
 
         for (int i = 0; i < childCount; i++) {
-            final JavadocNodeImpl child = createJavadocNode(currentParseTreeNode.getChild(i)
+            final JavadocNodeImpl child = createJavadocNode(parseTreeNode.getChild(i)
                     , rootJavadocNode, i);
             children[i] = child;
         }
+        rootJavadocNode.setChildren(children);
 
         JavadocNodeImpl currentJavadocParent = rootJavadocNode;
-        ParseTree currentParseTreeParent = currentParseTreeNode;
+        ParseTree parseTreeParent = parseTreeNode;
 
         while (currentJavadocParent != null) {
             children = (JavadocNodeImpl[]) currentJavadocParent.getChildren();
             childCount = children.length;
 
             for (int i = 0; i < childCount; i++) {
                 final JavadocNodeImpl currentJavadocNode = children[i];
-                final ParseTree currentParseTreeNodeChild = currentParseTreeParent.getChild(i);
+                final ParseTree currentParseTreeNodeChild = parseTreeParent.getChild(i);
 
-                final JavadocNodeImpl[] subChildren = (JavadocNodeImpl[]) currentJavadocNode
-                        .getChildren();
+                final JavadocNodeImpl[] subChildren =
+                        new JavadocNodeImpl[currentJavadocNode.getChildren().length];
 
                 for (int j = 0; j < subChildren.length; j++) {
                     final JavadocNodeImpl child =
                             createJavadocNode(currentParseTreeNodeChild.getChild(j)
                                     , currentJavadocNode, j);
 
                     subChildren[j] = child;
                 }
+                currentJavadocNode.setChildren(subChildren);
             }
 
             if (childCount > 0) {
                 currentJavadocParent = children[0];
-                currentParseTreeParent = currentParseTreeParent.getChild(0);
+                parseTreeParent = parseTreeParent.getChild(0);
             }
             else {
                 JavadocNodeImpl nextJavadocSibling = (JavadocNodeImpl) JavadocUtils
                         .getNextSibling(currentJavadocParent);
 
-                ParseTree nextParseTreeSibling = getNextSibling(currentParseTreeParent);
+                ParseTree nextParseTreeSibling = getNextSibling(parseTreeParent);
 
                 if (nextJavadocSibling == null) {
                     JavadocNodeImpl tempJavadocParent =
                             (JavadocNodeImpl) currentJavadocParent.getParent();
 
-                    ParseTree tempParseTreeParent = currentParseTreeParent.getParent();
+                    ParseTree tempParseTreeParent = parseTreeParent.getParent();
 
                     while (nextJavadocSibling == null && tempJavadocParent != null) {
 
                         nextJavadocSibling = (JavadocNodeImpl) JavadocUtils
                                 .getNextSibling(tempJavadocParent);
 
                         nextParseTreeSibling = getNextSibling(tempParseTreeParent);
 
                         tempJavadocParent = (JavadocNodeImpl) tempJavadocParent.getParent();
                         tempParseTreeParent = tempParseTreeParent.getParent();
                     }
                 }
                 currentJavadocParent = nextJavadocSibling;
-                currentParseTreeParent = nextParseTreeSibling;
+                parseTreeParent = nextParseTreeSibling;
             }
         }
 
         return rootJavadocNode;
     }
 
     /**
      * Creates JavadocNodeImpl node on base of ParseTree node.
      *
      * @param parseTree ParseTree node
      * @param parent DetailNode that will be parent of new node
      * @param index child index that has new node
      * @return JavadocNodeImpl node on base of ParseTree node.
      */
     private JavadocNodeImpl createJavadocNode(ParseTree parseTree, DetailNode parent, int index)
     {
         final JavadocNodeImpl node = new JavadocNodeImpl();
         node.setText(parseTree.getText());
         node.setColumnNumber(getColumn(parseTree));
         node.setLineNumber(getLine(parseTree) + blockCommentAst.getLineNo());
         node.setIndex(index);
         node.setType(getTokenType(parseTree));
         node.setParent(parent);
         node.setChildren(new JavadocNodeImpl[parseTree.getChildCount()]);
         return node;
     }
 
     /**
      * Gets next sibling of ParseTree node.
      * @param node ParseTree node
      * @return next sibling of ParseTree node.
      */
     private static ParseTree getNextSibling(ParseTree node)
     {
         if (node.getParent() == null) {
             return null;
         }
 
         final ParseTree parent = node.getParent();
         final int childCount = parent.getChildCount();
 
         for (int i = 0; i < childCount; i++) {
             final ParseTree currentNode = parent.getChild(i);
             if (currentNode.equals(node)) {
                 if (i == childCount - 1) {
                     return null;
                 }
                 return parent.getChild(i + 1);
             }
         }
