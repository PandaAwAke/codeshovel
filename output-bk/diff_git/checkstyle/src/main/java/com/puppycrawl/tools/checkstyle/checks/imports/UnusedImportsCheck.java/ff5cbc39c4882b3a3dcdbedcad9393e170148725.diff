diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java
index 1488046f4..6c079c140 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java
@@ -192,118 +192,118 @@ public class UnusedImportsCheck extends Check
     }
 
     /**
      * Collects the details of imports.
      * @param ast node containing the import details
      */
     private void processImport(DetailAST ast)
     {
         final FullIdent name = FullIdent.createFullIdentBelow(ast);
         if ((name != null) && !name.getText().endsWith(".*")) {
             imports.add(name);
         }
     }
 
     /**
      * Collects the details of static imports.
      * @param ast node containing the static import details
      */
     private void processStaticImport(DetailAST ast)
     {
         final FullIdent name =
             FullIdent.createFullIdent(
                 ast.getFirstChild().getNextSibling());
         if ((name != null) && !name.getText().endsWith(".*")) {
             imports.add(name);
         }
     }
 
     /**
      * Collects references made in Javadoc comments.
      * @param ast node to inspect for Javadoc
      */
     private void processJavadoc(DetailAST ast)
     {
         final FileContents contents = getFileContents();
         final int lineNo = ast.getLineNo();
         final TextBlock cmt = contents.getJavadocBefore(lineNo);
         if (cmt != null) {
             referenced.addAll(processJavadoc(cmt));
         }
     }
 
     /**
      * Process a javadoc {@link TextBlock} and return the set of classes
      * referenced within.
      * @param cmt The javadoc block to parse
      * @return a set of classes referenced in the javadoc block
      */
     private Set<String> processJavadoc(TextBlock cmt)
     {
-        final Set<String> references = new HashSet<String>();
+        final Set<String> references = new HashSet<>();
         // process all the @link type tags
         // INLINEs inside BLOCKs get hidden when using ALL
         for (final JavadocTag tag
                 : getValidTags(cmt, JavadocUtils.JavadocTagType.INLINE))
         {
             if (tag.canReferenceImports()) {
                 references.addAll(processJavadocTag(tag));
             }
         }
         // process all the @throws type tags
         for (final JavadocTag tag
                 : getValidTags(cmt, JavadocUtils.JavadocTagType.BLOCK))
         {
             if (tag.canReferenceImports()) {
                 references.addAll(
                         matchPattern(tag.getArg1(), FIRST_CLASS_NAME));
             }
         }
         return references;
     }
 
     /**
      * Returns the list of valid tags found in a javadoc {@link TextBlock}
      * @param cmt The javadoc block to parse
      * @param tagType The type of tags we're interested in
      * @return the list of tags
      */
     private List<JavadocTag> getValidTags(TextBlock cmt,
             JavadocUtils.JavadocTagType tagType)
     {
         return JavadocUtils.getJavadocTags(cmt, tagType).getValidTags();
     }
 
     /**
      * Returns a list of references found in a javadoc {@link JavadocTag}
      * @param tag The javadoc tag to parse
      * @return A list of references found in this tag
      */
     private Set<String> processJavadocTag(JavadocTag tag)
     {
-        final Set<String> references = new HashSet<String>();
+        final Set<String> references = new HashSet<>();
         final String identifier = tag.getArg1().trim();
         for (Pattern pattern : new Pattern[]
         {FIRST_CLASS_NAME, ARGUMENT_NAME})
         {
             references.addAll(matchPattern(identifier, pattern));
         }
         return references;
     }
 
     /**
      * Extracts a list of texts matching a {@link Pattern} from a
      * {@link String}.
      * @param identifier The String to match the pattern against
      * @param pattern The Pattern used to extract the texts
      * @return A list of texts which matched the pattern
      */
     private Set<String> matchPattern(String identifier, Pattern pattern)
     {
-        final Set<String> references = new HashSet<String>();
+        final Set<String> references = new HashSet<>();
         final Matcher matcher = pattern.matcher(identifier);
         while (matcher.find()) {
             references.add(matcher.group(1));
         }
         return references;
     }
 }
