diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheck.java
index cc12e5e4a..a088e1f04 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheck.java
@@ -105,56 +105,58 @@ public final class MutableExceptionCheck extends AbstractFormatCheck {
         }
     }
 
     /**
      * Called when we start processing class definition.
      * @param ast class definition node
      */
     private void visitClassDef(DetailAST ast) {
         checkingStack.push(checking ? Boolean.TRUE : Boolean.FALSE);
         checking = isNamedAsException(ast) && isExtendedClassNamedAsException(ast);
     }
 
     /** Called when we leave class definition. */
     private void leaveClassDef() {
         checking = checkingStack.pop();
     }
 
     /**
      * Checks variable definition.
      * @param ast variable def node for check
      */
     private void visitVariableDef(DetailAST ast) {
         if (checking && ast.getParent().getType() == TokenTypes.OBJBLOCK) {
             final DetailAST modifiersAST =
                 ast.findFirstToken(TokenTypes.MODIFIERS);
 
             if (modifiersAST.findFirstToken(TokenTypes.FINAL) == null) {
                 log(ast.getLineNo(),  ast.getColumnNo(), MSG_KEY,
                         ast.findFirstToken(TokenTypes.IDENT).getText());
             }
         }
     }
 
     /**
      * @param ast class definition node
      * @return true if a class name conforms to specified format
      */
     private boolean isNamedAsException(DetailAST ast) {
         final String className = ast.findFirstToken(TokenTypes.IDENT).getText();
         return getRegexp().matcher(className).find();
     }
 
     /**
      * @param ast class definition node
      * @return true if extended class name conforms to specified format
      */
     private boolean isExtendedClassNamedAsException(DetailAST ast) {
         final DetailAST extendsClause = ast.findFirstToken(TokenTypes.EXTENDS_CLAUSE);
         if (extendsClause != null) {
             final DetailAST extendedClass = extendsClause.findFirstToken(TokenTypes.IDENT);
-            final String extendedClassName = extendedClass.getText();
-            return extendedClassName.matches(extendedClassNameFormat);
+            if (extendedClass != null) {
+                final String extendedClassName = extendedClass.getText();
+                return extendedClassName.matches(extendedClassNameFormat);
+            }
         }
         return false;
     }
 }
