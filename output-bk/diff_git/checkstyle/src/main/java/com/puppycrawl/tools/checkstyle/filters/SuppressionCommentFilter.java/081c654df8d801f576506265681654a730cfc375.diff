diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java
index e715e5a2f..fef0bd57a 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java
@@ -53,102 +53,101 @@ import com.puppycrawl.tools.checkstyle.checks.FileContentsHolder;
  * must be kept up-to-date as the source file is edited.
  * </p>
  * <p>
  * Usage:
  * This check only works in conjunction with the FileContentsHolder module
  * since that module makes the suppression comments in the .java
  * files available <i>sub rosa</i>.
  * </p>
  * @author Mike McMahon
  * @author Rick Giles
  * @see FileContentsHolder
  */
 public class SuppressionCommentFilter
     extends AutomaticBean
     implements Filter {
     /**
      * A Tag holds a suppression comment and its location, and determines
      * whether the supression turns checkstyle reporting on or off.
      * @author Rick Giles
      */
     public static class Tag
         implements Comparable<Tag> {
         /** The text of the tag. */
         private final String text;
 
         /** The line number of the tag. */
         private final int line;
 
         /** The column number of the tag. */
         private final int column;
 
         /** Determines whether the suppression turns checkstyle reporting on. */
         private final boolean on;
 
         /** The parsed check regexp, expanded for the text of this tag. */
         private final transient Pattern tagCheckRegexp;
 
         /** The parsed message regexp, expanded for the text of this tag. */
         private transient Pattern tagMessageRegexp;
 
         /**
          * Constructs a tag.
          * @param line the line number.
          * @param column the column number.
          * @param text the text of the suppression.
          * @param on <code>true</code> if the tag turns checkstyle reporting.
          * @param filter the {@code SuppressionCommentFilter} with the context
          * @throws ConversionException if unable to parse expanded text.
          * on.
          */
-        public Tag(int line, int column, String text, boolean on, SuppressionCommentFilter filter)
-            throws ConversionException {
+        public Tag(int line, int column, String text, boolean on, SuppressionCommentFilter filter) {
             this.line = line;
             this.column = column;
             this.text = text;
             this.on = on;
 
             //Expand regexp for check and message
             //Does not intern Patterns with Utils.getPattern()
             String format = "";
             try {
                 if (on) {
                     format =
                         expandFromCoont(text, filter.checkFormat, filter.onRegexp);
                     tagCheckRegexp = Pattern.compile(format);
                     if (filter.messageFormat != null) {
                         format =
                             expandFromCoont(text, filter.messageFormat, filter.onRegexp);
                         tagMessageRegexp = Pattern.compile(format);
                     }
                 }
                 else {
                     format =
                         expandFromCoont(text, filter.checkFormat, filter.offRegexp);
                     tagCheckRegexp = Pattern.compile(format);
                     if (filter.messageFormat != null) {
                         format =
                             expandFromCoont(
                                 text,
                                 filter.messageFormat,
                                 filter.offRegexp);
                         tagMessageRegexp = Pattern.compile(format);
                     }
                 }
             }
             catch (final PatternSyntaxException e) {
                 throw new ConversionException(
                     "unable to parse expanded comment " + format,
                     e);
             }
         }
 
         /** @return the text of the tag. */
         public String getText() {
             return text;
         }
 
         /** @return the line number of the tag in the source file. */
         public int getLine() {
             return line;
         }
 
@@ -270,112 +269,110 @@ public class SuppressionCommentFilter
 
     /** Control all checks */
     private static final String DEFAULT_CHECK_FORMAT = ".*";
 
     /** Whether to look in comments of the C type. */
     private boolean checkC = true;
 
     /** Whether to look in comments of the C++ type. */
     private boolean checkCPP = true;
 
     /** Parsed comment regexp that turns checkstyle reporting off. */
     private Pattern offRegexp;
 
     /** Parsed comment regexp that turns checkstyle reporting on. */
     private Pattern onRegexp;
 
     /** The check format to suppress. */
     private String checkFormat;
 
     /** The message format to suppress. */
     private String messageFormat;
 
     /** Tagged comments */
     private final List<Tag> tags = Lists.newArrayList();
 
     /**
      * References the current FileContents for this filter.
      * Since this is a weak reference to the FileContents, the FileContents
      * can be reclaimed as soon as the strong references in TreeWalker
      * and FileContentsHolder are reassigned to the next FileContents,
      * at which time filtering for the current FileContents is finished.
      */
     private WeakReference<FileContents> fileContentsReference = new WeakReference<>(null);
 
     /**
      * Constructs a SuppressionCoontFilter.
      * Initializes comment on, comment off, and check formats
      * to defaults.
      */
     public SuppressionCommentFilter() {
         setOnCommentFormat(DEFAULT_ON_FORMAT);
         setOffCommentFormat(DEFAULT_OFF_FORMAT);
         setCheckFormat(DEFAULT_CHECK_FORMAT);
     }
 
     /**
      * Set the format for a comment that turns off reporting.
      * @param format a <code>String</code> value.
      * @throws ConversionException if unable to create Pattern object.
      */
-    public void setOffCommentFormat(String format)
-        throws ConversionException {
+    public void setOffCommentFormat(String format) {
         offRegexp = Utils.createPattern(format);
     }
 
     /**
      * Set the format for a comment that turns on reporting.
      * @param format a <code>String</code> value
      * @throws ConversionException if unable to create Pattern object.
      */
-    public void setOnCommentFormat(String format)
-        throws ConversionException {
+    public void setOnCommentFormat(String format) {
         onRegexp = Utils.createPattern(format);
     }
 
     /** @return the FileContents for this filter. */
     public FileContents getFileContents() {
         return fileContentsReference.get();
     }
 
     /**
      * Set the FileContents for this filter.
      * @param fileContents the FileContents for this filter.
      */
     public void setFileContents(FileContents fileContents) {
         fileContentsReference = new WeakReference<>(fileContents);
     }
 
     /**
      * Set the format for a check.
      * @param format a <code>String</code> value
      */
     public void setCheckFormat(String format) {
         checkFormat = format;
     }
 
     /**
      * Set the format for a message.
      * @param format a <code>String</code> value
      */
     public void setMessageFormat(String format) {
         messageFormat = format;
     }
 
     /**
      * Set whether to look in C++ comments.
      * @param checkCPP <code>true</code> if C++ comments are checked.
      */
     public void setCheckCPP(boolean checkCPP) {
         this.checkCPP = checkCPP;
     }
 
     /**
      * Set whether to look in C comments.
      * @param checkC <code>true</code> if C comments are checked.
      */
     public void setCheckC(boolean checkC) {
         this.checkC = checkC;
     }
 
     /** {@inheritDoc} */
     @Override
