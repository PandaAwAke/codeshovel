diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java
index 602e154e8..20582370f 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java
@@ -78,226 +78,227 @@ public class BlockParentHandler extends AbstractExpressionHandler {
     }
 
     /**
      * Get the top level expression being managed by this handler.
      *
      * @return the top level expression
      */
     protected DetailAST getTopLevelAst() {
         return getMainAst();
     }
 
     /**
      * Check the indent of the top level token.
      */
     protected void checkTopLevelToken() {
         final DetailAST topLevel = getTopLevelAst();
 
         if (topLevel != null
                 && !getIndent().isAcceptable(expandedTabsColumnNo(topLevel))
                 && !hasLabelBefore()
                 && (shouldTopLevelStartLine() || isOnStartOfLine(topLevel))) {
             logError(topLevel, "", expandedTabsColumnNo(topLevel));
         }
     }
 
     /**
      * Check if the top level token has label before.
      * @return true if the top level token has label before.
      */
     protected boolean hasLabelBefore() {
         final DetailAST parent = getTopLevelAst().getParent();
         return parent.getType() == TokenTypes.LABELED_STAT
             && parent.getLineNo() == getTopLevelAst().getLineNo();
     }
 
     /**
      * Determines if the top level token must start the line.
      *
      * @return true
      */
     protected boolean shouldTopLevelStartLine() {
         return true;
     }
 
     /**
      * Determines if this block expression has curly braces.
      *
      * @return true if curly braces are present, false otherwise
      */
     protected boolean hasCurlies() {
-        return getLCurly() != null && getRCurly() != null;
+        return getLeftCurly() != null && getRightCurly() != null;
     }
 
     /**
      * Get the left curly brace portion of the expression we are handling.
      *
      * @return the left curly brace expression
      */
-    protected DetailAST getLCurly() {
+    protected DetailAST getLeftCurly() {
         return getMainAst().findFirstToken(TokenTypes.SLIST);
     }
 
     /**
      * Get the right curly brace portion of the expression we are handling.
      *
      * @return the right curly brace expression
      */
-    protected DetailAST getRCurly() {
+    protected DetailAST getRightCurly() {
         final DetailAST slist = getMainAst().findFirstToken(TokenTypes.SLIST);
         return slist.findFirstToken(TokenTypes.RCURLY);
     }
 
     /**
      * Check the indentation of the left curly brace.
      */
-    protected void checkLCurly() {
+    protected void checkLeftCurly() {
         // the lcurly can either be at the correct indentation, or nested
         // with a previous expression
-        final DetailAST lcurly = getLCurly();
+        final DetailAST lcurly = getLeftCurly();
         final int lcurlyPos = expandedTabsColumnNo(lcurly);
 
         if (!curlyIndent().isAcceptable(lcurlyPos) && isOnStartOfLine(lcurly)) {
             logError(lcurly, "lcurly", lcurlyPos, curlyIndent());
         }
     }
 
     /**
      * Get the expected indentation level for the curly braces.
      *
      * @return the curly brace indentation level
      */
     protected IndentLevel curlyIndent() {
         return new IndentLevel(getIndent(), getBraceAdjustment());
     }
 
     /**
      * Determines if child elements within the expression may be nested.
      *
      * @return false
      */
     protected boolean canChildrenBeNested() {
         return false;
     }
 
     /**
      * Check the indentation of the right curly brace.
      */
-    protected void checkRCurly() {
-        final DetailAST rcurly = getRCurly();
+    protected void checkRightCurly() {
+        final DetailAST rcurly = getRightCurly();
         final int rcurlyPos = expandedTabsColumnNo(rcurly);
 
         if (!curlyIndent().isAcceptable(rcurlyPos)
                 && isOnStartOfLine(rcurly)) {
             logError(rcurly, "rcurly", rcurlyPos, curlyIndent());
         }
     }
 
     /**
      * Get the child element that is not a list of statements.
      *
      * @return the non-list child element
      */
     protected DetailAST getNonListChild() {
         return getMainAst().findFirstToken(TokenTypes.RPAREN).getNextSibling();
     }
 
     /**
      * Check the indentation level of a child that is not a list of statements.
      */
     private void checkNonListChild() {
         final DetailAST nonList = getNonListChild();
         if (nonList != null) {
             final IndentLevel expected = new IndentLevel(getIndent(), getBasicOffset());
             checkExpressionSubtree(nonList, expected, false, false);
         }
     }
 
     /**
      * Get the child element representing the list of statements.
      *
      * @return the statement list child
      */
     protected DetailAST getListChild() {
         return getMainAst().findFirstToken(TokenTypes.SLIST);
     }
 
     /**
      * Get the right parenthesis portion of the expression we are handling.
      *
      * @return the right parenthesis expression
      */
-    protected DetailAST getRParen() {
+    protected DetailAST getRightParen() {
         return getMainAst().findFirstToken(TokenTypes.RPAREN);
     }
 
     /**
      * Get the left parenthesis portion of the expression we are handling.
      *
      * @return the left parenthesis expression
      */
-    protected DetailAST getLParen() {
+    protected DetailAST getLeftParen() {
         return getMainAst().findFirstToken(TokenTypes.LPAREN);
     }
 
     @Override
     public void checkIndentation() {
         checkTopLevelToken();
         // separate to allow for eventual configuration
-        checkLParen(getLParen());
-        checkRParen(getLParen(), getRParen());
+        checkLeftParen(getLeftParen());
+        checkRightParen(getLeftParen(), getRightParen());
         if (hasCurlies()) {
-            checkLCurly();
-            checkRCurly();
+            checkLeftCurly();
+            checkRightCurly();
         }
         final DetailAST listChild = getListChild();
         if (listChild == null) {
             checkNonListChild();
         }
         else {
             // NOTE: switch statements usually don't have curlies
-            if (!hasCurlies() || !areOnSameLine(getLCurly(), getRCurly())) {
+            if (!hasCurlies() || !areOnSameLine(getLeftCurly(), getRightCurly())) {
                 checkChildren(listChild,
                         getCheckedChildren(),
                         getChildrenExpectedIndent(),
                         true,
                         canChildrenBeNested());
             }
         }
     }
 
     /**
      * Gets indentation level expected for children.
      * @return indentation level expected for children
      */
     protected IndentLevel getChildrenExpectedIndent() {
         IndentLevel indentLevel = new IndentLevel(getIndent(), getBasicOffset());
         // if we have multileveled expected level then we should
         // try to suggest single level to children using curlies'
         // levels.
         if (getIndent().isMultiLevel() && hasCurlies()) {
-            if (isOnStartOfLine(getLCurly())) {
-                indentLevel = new IndentLevel(expandedTabsColumnNo(getLCurly()) + getBasicOffset());
+            if (isOnStartOfLine(getLeftCurly())) {
+                indentLevel = new IndentLevel(expandedTabsColumnNo(getLeftCurly())
+                        + getBasicOffset());
             }
-            else if (isOnStartOfLine(getRCurly())) {
+            else if (isOnStartOfLine(getRightCurly())) {
                 final IndentLevel level = new IndentLevel(curlyIndent(), getBasicOffset());
                 level.addAcceptedIndent(level.getFirstIndentLevel() + getLineWrappingIndent());
                 indentLevel = level;
             }
         }
         return indentLevel;
     }
 
     @Override
     public IndentLevel getSuggestedChildIndent(AbstractExpressionHandler child) {
         return getChildrenExpectedIndent();
     }
 
     /**
      * A shortcut for {@code IndentationCheck} property.
      * @return value of lineWrappingIndentation property
      *         of {@code IndentationCheck}
      */
     private int getLineWrappingIndent() {
         return getIndentCheck().getLineWrappingIndentation();
     }
 }
