diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java
index 7fdeee0a4..ce304d8a7 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java
@@ -475,93 +475,82 @@ public class WhitespaceAroundCheck extends Check {
      */
     private boolean isEmptyMethodBlock(DetailAST ast, int parentType) {
         return allowEmptyMethods
             && isEmptyBlock(ast, parentType, TokenTypes.METHOD_DEF);
     }
 
     /**
      * Test if the given <code>DetailAST</code> is part of an allowed empty
      * constructor (ctor) block.
      * @param ast the <code>DetailAST</code> to test.
      * @param parentType the token type of <code>ast</code>'s parent.
      * @return <code>true</code> if <code>ast</code> makes up part of an
      *         allowed empty constructor block.
      */
     private boolean isEmptyCtorBlock(DetailAST ast, int parentType) {
         return allowEmptyCtors
             && isEmptyBlock(ast, parentType, TokenTypes.CTOR_DEF);
     }
 
     /**
      *
      * @param ast ast the <code>DetailAST</code> to test.
      * @param parentType the token type of <code>ast</code>'s parent.
      * @return <code>true</code> if <code>ast</code> makes up part of an
      *         allowed empty loop block.
      */
     private boolean isEmptyLoop(DetailAST ast, int parentType) {
         return allowEmptyLoops
             && (isEmptyBlock(ast, parentType, TokenTypes.LITERAL_FOR)
                     || isEmptyBlock(ast,
                             parentType, TokenTypes.LITERAL_WHILE)
                             || isEmptyBlock(ast,
                                     parentType, TokenTypes.LITERAL_DO));
     }
 
     /**
      * Test if the given <code>DetailAST</code> is part of an empty block.
      * An example empty block might look like the following
      * <p>
      * <pre>   class Foo {}</pre>
      * </p>
      *
      * @param ast ast the <code>DetailAST</code> to test.
      * @param parentType the token type of <code>ast</code>'s parent.
      * @return <code>true</code> if <code>ast</code> makes up part of an
      *         empty block contained under a <code>match</code> token type
      *         node.
      */
     private boolean isEmptyType(DetailAST ast, int parentType) {
         final int type = ast.getType();
-        if ((type == TokenTypes.RCURLY || type == TokenTypes.LCURLY)
-                && parentType == TokenTypes.OBJBLOCK) {
-            final DetailAST typeNode = ast.getParent().getParent();
-            final int matchType = typeNode.getType();
-            if (matchType == TokenTypes.CLASS_DEF
-                    || matchType == TokenTypes.INTERFACE_DEF
-                    || matchType == TokenTypes.ENUM_DEF
-                    || matchType == TokenTypes.LITERAL_NEW
-                    || matchType == TokenTypes.ANNOTATION_DEF) {
-                return true;
-            }
-        }
-        return false;
+        return (type == TokenTypes.RCURLY || type == TokenTypes.LCURLY)
+                && parentType == TokenTypes.OBJBLOCK;
     }
 
     /**
      * Tests if a given <code>DetailAST</code> is part of an empty block.
      * An example empty block might look like the following
      * <p>
      * <pre>   public void myMethod(int val) {}</pre>
      * </p>
      * In the above, the method body is an empty block ("{}").
      *
      * @param ast the <code>DetailAST</code> to test.
      * @param parentType the token type of <code>ast</code>'s parent.
      * @param match the parent token type we're looking to match.
      * @return <code>true</code> if <code>ast</code> makes up part of an
      *         empty block contained under a <code>match</code> token type
      *         node.
      */
     private boolean isEmptyBlock(DetailAST ast, int parentType, int match) {
         final int type = ast.getType();
         if (type == TokenTypes.RCURLY) {
             final DetailAST grandParent = ast.getParent().getParent();
             return parentType == TokenTypes.SLIST
                 && grandParent.getType() == match;
         }
 
         return type == TokenTypes.SLIST
             && parentType == match
             && ast.getFirstChild().getType() == TokenTypes.RCURLY;
     }
 }
