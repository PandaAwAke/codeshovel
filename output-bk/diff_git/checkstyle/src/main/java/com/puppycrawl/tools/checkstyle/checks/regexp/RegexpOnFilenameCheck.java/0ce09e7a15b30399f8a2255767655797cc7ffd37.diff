diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpOnFilenameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpOnFilenameCheck.java
index c2f962300..567158915 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpOnFilenameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpOnFilenameCheck.java
@@ -238,101 +238,101 @@ public class RegexpOnFilenameCheck extends AbstractFileSetCheck {
      *
      * @param ignoreFileNameExtensions check's option for ignoring file extension.
      */
     public void setIgnoreFileNameExtensions(boolean ignoreFileNameExtensions) {
         this.ignoreFileNameExtensions = ignoreFileNameExtensions;
     }
 
     @Override
     public void init() {
         if (fileNamePattern == null && folderPattern == null) {
             fileNamePattern = CommonUtils.createPattern("\\s");
         }
     }
 
     @Override
     protected void processFiltered(File file, FileText fileText) throws CheckstyleException {
         final String fileName = getFileName(file);
         final String folderPath = getFolderPath(file);
 
         if (isMatchFolder(folderPath) && isMatchFile(fileName)) {
             log();
         }
     }
 
     /**
      * Retrieves the file name from the given {@code file}.
      *
      * @param file Input file to examine.
      * @return The file name.
      */
     private String getFileName(File file) {
         String fileName = file.getName();
 
         if (ignoreFileNameExtensions) {
             fileName = CommonUtils.getFileNameWithoutExtension(fileName);
         }
 
         return fileName;
     }
 
     /**
      * Retrieves the folder path from the given {@code file}.
      *
      * @param file Input file to examine.
      * @return The folder path.
      * @throws CheckstyleException if there is an error getting the canonical
      *         path of the {@code file}.
      */
     private static String getFolderPath(File file) throws CheckstyleException {
         try {
-            return file.getParentFile().getCanonicalPath();
+            return file.getCanonicalFile().getParent();
         }
         catch (IOException ex) {
             throw new CheckstyleException("unable to create canonical path names for "
                     + file.getAbsolutePath(), ex);
         }
     }
 
     /**
      * Checks if the given {@code folderPath} matches the specified
      * {@link #folderPattern}.
      *
      * @param folderPath Input folder path to examine.
      * @return true if they do match.
      */
     private boolean isMatchFolder(String folderPath) {
         final boolean result;
 
         // null pattern always matches, regardless of value of 'match'
         if (folderPattern == null) {
             result = true;
         }
         else {
             // null pattern means 'match' applies to the folderPattern matching
             final boolean useMatch = fileNamePattern != null || match;
             result = folderPattern.matcher(folderPath).find() == useMatch;
         }
 
         return result;
     }
 
     /**
      * Checks if the given {@code fileName} matches the specified
      * {@link #fileNamePattern}.
      *
      * @param fileName Input file name to examine.
      * @return true if they do match.
      */
     private boolean isMatchFile(String fileName) {
         // null pattern always matches, regardless of value of 'match'
         return fileNamePattern == null || fileNamePattern.matcher(fileName).find() == match;
     }
 
     /** Logs the errors for the check. */
     private void log() {
         final String folder = getStringOrDefault(folderPattern, "");
         final String fileName = getStringOrDefault(fileNamePattern, "");
 
         if (match) {
             log(0, MSG_MATCH, folder, fileName);
         }
