diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
index 980131756..15542cae4 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
@@ -242,101 +242,102 @@ public class SuppressWarningsHolder
         if (identifier.startsWith(JAVA_LANG_PREFIX)) {
             identifier = identifier.substring(JAVA_LANG_PREFIX.length());
         }
         if ("SuppressWarnings".equals(identifier)) {
 
             // get values of annotation
             List<String> values = null;
             final DetailAST lparenAST = ast.findFirstToken(TokenTypes.LPAREN);
             if (lparenAST != null) {
                 final DetailAST nextAST = lparenAST.getNextSibling();
                 if (nextAST != null) {
                     final int nextType = nextAST.getType();
                     switch (nextType) {
                         case TokenTypes.EXPR:
                         case TokenTypes.ANNOTATION_ARRAY_INIT:
                             values = getAnnotationValues(nextAST);
                             break;
 
                         case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:
                             // expected children: IDENT ASSIGN ( EXPR |
                             // ANNOTATION_ARRAY_INIT )
                             values = getAnnotationValues(getNthChild(nextAST, 2));
                             break;
 
                         case TokenTypes.RPAREN:
                             // no value present (not valid Java)
                             break;
 
                         default:
                             // unknown annotation value type (new syntax?)
                     }
                 }
             }
             if (values == null) {
                 log(ast, "suppress.warnings.missing.value");
                 return;
             }
 
             final DetailAST targetAST = getAnnotationTarget(ast);
 
 
             if (targetAST == null) {
                 log(ast, "suppress.warnings.invalid.target");
                 return;
             }
 
             // get text range of target
             final int firstLine = targetAST.getLineNo();
             final int firstColumn = targetAST.getColumnNo();
             final DetailAST nextAST = targetAST.getNextSibling();
-            final int lastLine, lastColumn;
+            final int lastLine;
+            final int lastColumn;
             if (nextAST != null) {
                 lastLine = nextAST.getLineNo();
                 lastColumn = nextAST.getColumnNo() - 1;
             }
             else {
                 lastLine = Integer.MAX_VALUE;
                 lastColumn = Integer.MAX_VALUE;
             }
 
             // add suppression entries for listed checks
             final List<Entry> entries = ENTRIES.get();
             if (entries != null) {
                 for (String value : values) {
                     // strip off the checkstyle-only prefix if present
                     if (value.startsWith(CHECKSTYLE_PREFIX)) {
                         value = value.substring(CHECKSTYLE_PREFIX.length());
                     }
                     entries.add(new Entry(value, firstLine, firstColumn,
                         lastLine, lastColumn));
                 }
             }
         }
     }
 
     /**
      * get target of annotation
      * @param ast the AST node to get the child of
      * @return get target of annotation
      */
     private DetailAST getAnnotationTarget(DetailAST ast)
     {
         DetailAST targetAST = null;
         DetailAST parentAST = ast.getParent();
         if (parentAST != null) {
             switch (parentAST.getType()) {
                 case TokenTypes.MODIFIERS:
                 case TokenTypes.ANNOTATIONS:
                     parentAST = parentAST.getParent();
                     if (parentAST != null) {
                         switch (parentAST.getType()) {
                             case TokenTypes.ANNOTATION_DEF:
                             case TokenTypes.PACKAGE_DEF:
                             case TokenTypes.CLASS_DEF:
                             case TokenTypes.INTERFACE_DEF:
                             case TokenTypes.ENUM_DEF:
                             case TokenTypes.ENUM_CONSTANT_DEF:
                             case TokenTypes.CTOR_DEF:
                             case TokenTypes.METHOD_DEF:
                             case TokenTypes.PARAMETER_DEF:
                             case TokenTypes.VARIABLE_DEF:
