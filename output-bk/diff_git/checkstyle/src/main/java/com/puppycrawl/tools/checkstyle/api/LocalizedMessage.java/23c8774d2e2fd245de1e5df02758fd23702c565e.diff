diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
index e4f118661..4c8b34eb4 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
@@ -68,101 +68,107 @@ public final class LocalizedMessage
     private final int lineNo;
     /** the column number **/
     private final int colNo;
 
     /** the severity level **/
     private final SeverityLevel severityLevel;
 
     /** the id of the module generating the message. */
     private final String moduleId;
 
     /** key for the message format **/
     private final String key;
 
     /** arguments for MessageFormat **/
     private final Object[] args;
 
     /** name of the resource bundle to get messages from **/
     private final String bundle;
 
     /** class of the source for this LocalizedMessage */
     private final Class<?> sourceClass;
 
     /** a custom message overriding the default message from the bundle. */
     private final String customMessage;
 
     /**
      * Creates a new {@code LocalizedMessage} instance.
      *
      * @param lineNo line number associated with the message
      * @param colNo column number associated with the message
      * @param bundle resource bundle name
      * @param key the key to locate the translation
      * @param args arguments for the translation
      * @param severityLevel severity level for the message
      * @param moduleId the id of the module the message is associated with
      * @param sourceClass the Class that is the source of the message
      * @param customMessage optional custom message overriding the default
      */
     public LocalizedMessage(int lineNo,
                             int colNo,
                             String bundle,
                             String key,
                             Object[] args,
                             SeverityLevel severityLevel,
                             String moduleId,
                             Class<?> sourceClass,
                             String customMessage) {
         this.lineNo = lineNo;
         this.colNo = colNo;
         this.key = key;
-        this.args = args == null ? null : args.clone();
+
+        if (args == null) {
+            this.args = null;
+        }
+        else {
+            this.args = Arrays.copyOf(args, args.length);
+        }
         this.bundle = bundle;
         this.severityLevel = severityLevel;
         this.moduleId = moduleId;
         this.sourceClass = sourceClass;
         this.customMessage = customMessage;
     }
 
     /**
      * Creates a new {@code LocalizedMessage} instance.
      *
      * @param lineNo line number associated with the message
      * @param colNo column number associated with the message
      * @param bundle resource bundle name
      * @param key the key to locate the translation
      * @param args arguments for the translation
      * @param moduleId the id of the module the message is associated with
      * @param sourceClass the Class that is the source of the message
      * @param customMessage optional custom message overriding the default
      */
     public LocalizedMessage(int lineNo,
                             int colNo,
                             String bundle,
                             String key,
                             Object[] args,
                             String moduleId,
                             Class<?> sourceClass,
                             String customMessage) {
         this(lineNo,
              colNo,
              bundle,
              key,
              args,
              DEFAULT_SEVERITY,
              moduleId,
              sourceClass,
              customMessage);
     }
 
     /**
      * Creates a new {@code LocalizedMessage} instance.
      *
      * @param lineNo line number associated with the message
      * @param bundle resource bundle name
      * @param key the key to locate the translation
      * @param args arguments for the translation
      * @param severityLevel severity level for the message
      * @param moduleId the id of the module the message is associated with
      * @param sourceClass the source class for the message
      * @param customMessage optional custom message overriding the default
      */
@@ -302,100 +308,99 @@ public final class LocalizedMessage
     /** @return the column number **/
     public int getColumnNo() {
         return colNo;
     }
 
     /** @return the severity level **/
     public SeverityLevel getSeverityLevel() {
         return severityLevel;
     }
 
     /** @return the module identifier. */
     public String getModuleId() {
         return moduleId;
     }
 
     /**
      * Returns the message key to locate the translation, can also be used
      * in IDE plugins to map error messages to corrective actions.
      *
      * @return the message key
      */
     public String getKey() {
         return key;
     }
 
     /** @return the name of the source for this LocalizedMessage */
     public String getSourceName() {
         return sourceClass.getName();
     }
 
     /** @param locale the locale to use for localization **/
     public static void setLocale(Locale locale) {
         if (Locale.ENGLISH.getLanguage().equals(locale.getLanguage())) {
             sLocale = Locale.ROOT;
         }
         else {
             sLocale = locale;
         }
     }
 
     ////////////////////////////////////////////////////////////////////////////
     // Interface Comparable methods
     ////////////////////////////////////////////////////////////////////////////
 
     @Override
     public int compareTo(LocalizedMessage other) {
         if (getLineNo() == other.getLineNo()) {
             if (getColumnNo() == other.getColumnNo()) {
                 return getMessage().compareTo(other.getMessage());
             }
-            return getColumnNo() < other.getColumnNo() ? -1 : 1;
+            return Integer.compare(getColumnNo(), other.getColumnNo());
         }
-
-        return getLineNo() < other.getLineNo() ? -1 : 1;
+        return Integer.compare(getLineNo(), other.getLineNo());
     }
 
     /**
      * <p>
      * Custom ResourceBundle.Control implementation which allows explicitly read
      * the properties files as UTF-8
      * </p>
      *
      * @author <a href="mailto:nesterenko-aleksey@list.ru">Aleksey Nesterenko</a>
      */
     protected static class UTF8Control extends Control {
         @Override
         public ResourceBundle newBundle(String aBaseName, Locale aLocale, String aFormat,
                  ClassLoader aLoader, boolean aReload) throws IOException {
             // The below is a copy of the default implementation.
             final String bundleName = toBundleName(aBaseName, aLocale);
             final String resourceName = toResourceName(bundleName, "properties");
             InputStream stream = null;
             if (aReload) {
                 final URL url = aLoader.getResource(resourceName);
                 if (url != null) {
                     final URLConnection connection = url.openConnection();
                     if (connection != null) {
                         connection.setUseCaches(false);
                         stream = connection.getInputStream();
                     }
                 }
             }
             else {
                 stream = aLoader.getResourceAsStream(resourceName);
             }
             ResourceBundle bundle = null;
             if (stream != null) {
                 final Reader streamReader = new InputStreamReader(stream, "UTF-8");
                 try {
                     // Only this line is changed to make it to read properties files as UTF-8.
                     bundle = new PropertyResourceBundle(streamReader);
                 }
                 finally {
                     stream.close();
                 }
             }
             return bundle;
         }
     }
 }
