diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java b/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
index ab49b2591..60d81a773 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
@@ -290,100 +290,102 @@ public class PackageObjectFactory implements ModuleFactory {
         catch (final ReflectiveOperationException | NoClassDefFoundError ignored) {
             // ignore the exception
         }
 
         Object instance = null;
 
         if (clazz != null) {
             try {
                 final Constructor<?> declaredConstructor = clazz.getDeclaredConstructor();
                 declaredConstructor.setAccessible(true);
                 instance = declaredConstructor.newInstance();
             }
             catch (final ReflectiveOperationException ex) {
                 throw new CheckstyleException("Unable to instantiate " + className, ex);
             }
         }
 
         return instance;
     }
 
     /**
      * Fill short-to-full module names map.
      */
     private static void fillShortToFullModuleNamesMap() {
         fillChecksFromAnnotationPackage();
         fillChecksFromBlocksPackage();
         fillChecksFromCodingPackage();
         fillChecksFromDesignPackage();
         fillChecksFromHeaderPackage();
         fillChecksFromImportsPackage();
         fillChecksFromIndentationPackage();
         fillChecksFromJavadocPackage();
         fillChecksFromMetricsPackage();
         fillChecksFromModifierPackage();
         fillChecksFromNamingPackage();
         fillChecksFromRegexpPackage();
         fillChecksFromSizesPackage();
         fillChecksFromWhitespacePackage();
         fillModulesFromChecksPackage();
         fillModulesFromFilefiltersPackage();
         fillModulesFromFiltersPackage();
         fillModulesFromCheckstylePackage();
     }
 
     /**
      * Fill short-to-full module names map with Checks from annotation package.
      */
     private static void fillChecksFromAnnotationPackage() {
         NAME_TO_FULL_MODULE_NAME.put("AnnotationLocationCheck",
                 BASE_PACKAGE + ".checks.annotation.AnnotationLocationCheck");
+        NAME_TO_FULL_MODULE_NAME.put("AnnotationOnSameLineCheck",
+                BASE_PACKAGE + ".checks.annotation.AnnotationOnSameLineCheck");
         NAME_TO_FULL_MODULE_NAME.put("AnnotationUseStyleCheck",
                 BASE_PACKAGE + ".checks.annotation.AnnotationUseStyleCheck");
         NAME_TO_FULL_MODULE_NAME.put("MissingDeprecatedCheck",
                 BASE_PACKAGE + ".checks.annotation.MissingDeprecatedCheck");
         NAME_TO_FULL_MODULE_NAME.put("MissingOverrideCheck",
                 BASE_PACKAGE + ".checks.annotation.MissingOverrideCheck");
         NAME_TO_FULL_MODULE_NAME.put("PackageAnnotationCheck",
                 BASE_PACKAGE + ".checks.annotation.PackageAnnotationCheck");
         NAME_TO_FULL_MODULE_NAME.put("SuppressWarningsCheck",
                 BASE_PACKAGE + ".checks.annotation.SuppressWarningsCheck");
     }
 
     /**
      * Fill short-to-full module names map with Checks from blocks package.
      */
     private static void fillChecksFromBlocksPackage() {
         NAME_TO_FULL_MODULE_NAME.put("AvoidNestedBlocksCheck",
                 BASE_PACKAGE + ".checks.blocks.AvoidNestedBlocksCheck");
         NAME_TO_FULL_MODULE_NAME.put("EmptyBlockCheck",
                 BASE_PACKAGE + ".checks.blocks.EmptyBlockCheck");
         NAME_TO_FULL_MODULE_NAME.put("EmptyCatchBlockCheck",
                 BASE_PACKAGE + ".checks.blocks.EmptyCatchBlockCheck");
         NAME_TO_FULL_MODULE_NAME.put("LeftCurlyCheck",
                 BASE_PACKAGE + ".checks.blocks.LeftCurlyCheck");
         NAME_TO_FULL_MODULE_NAME.put("NeedBracesCheck",
                 BASE_PACKAGE + ".checks.blocks.NeedBracesCheck");
         NAME_TO_FULL_MODULE_NAME.put("RightCurlyCheck",
                 BASE_PACKAGE + ".checks.blocks.RightCurlyCheck");
     }
 
     /**
      * Fill short-to-full module names map with Checks from coding package.
      */
     // -@cs[ExecutableStatementCount] splitting this method is not reasonable.
     private static void fillChecksFromCodingPackage() {
         NAME_TO_FULL_MODULE_NAME.put("ArrayTrailingCommaCheck",
                 BASE_PACKAGE + ".checks.coding.ArrayTrailingCommaCheck");
         NAME_TO_FULL_MODULE_NAME.put("AvoidInlineConditionalsCheck",
                 BASE_PACKAGE + ".checks.coding.AvoidInlineConditionalsCheck");
         NAME_TO_FULL_MODULE_NAME.put("CovariantEqualsCheck",
                 BASE_PACKAGE + ".checks.coding.CovariantEqualsCheck");
         NAME_TO_FULL_MODULE_NAME.put("DeclarationOrderCheck",
                 BASE_PACKAGE + ".checks.coding.DeclarationOrderCheck");
         NAME_TO_FULL_MODULE_NAME.put("DefaultComesLastCheck",
                 BASE_PACKAGE + ".checks.coding.DefaultComesLastCheck");
         NAME_TO_FULL_MODULE_NAME.put("EmptyStatementCheck",
                 BASE_PACKAGE + ".checks.coding.EmptyStatementCheck");
         NAME_TO_FULL_MODULE_NAME.put("EqualsAvoidNullCheck",
                 BASE_PACKAGE + ".checks.coding.EqualsAvoidNullCheck");
         NAME_TO_FULL_MODULE_NAME.put("EqualsHashCodeCheck",
