diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java
index de3ca70f7..539e5672a 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java
@@ -95,56 +95,56 @@ public class JavadocVariableCheck
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         if (shouldCheck(ast)) {
             final FileContents contents = getFileContents();
             final TextBlock cmt =
                 contents.getJavadocBefore(ast.getLineNo());
 
             if (cmt == null) {
                 log(ast, JAVADOC_MISSING);
             }
         }
     }
 
     /**
      * Decides whether the variable name of an AST is in the ignore list.
      * @param ast the AST to check
      * @return true if the variable name of ast is in the ignore list.
      */
     private boolean isIgnored(DetailAST ast) {
         final String name = ast.findFirstToken(TokenTypes.IDENT).getText();
         return ignoreNamePattern != null
                 && ignoreNamePattern.matcher(name).matches();
     }
 
     /**
      * Whether we should check this node.
      * @param ast a given node.
      * @return whether we should check a given node.
      */
     private boolean shouldCheck(final DetailAST ast) {
         if (ScopeUtils.inCodeBlock(ast) || isIgnored(ast)) {
             return false;
         }
 
         final Scope customScope;
         if (ast.getType() == TokenTypes.ENUM_CONSTANT_DEF) {
             customScope = Scope.PUBLIC;
         }
         else {
             final DetailAST mods = ast.findFirstToken(TokenTypes.MODIFIERS);
             final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);
             customScope =
                 ScopeUtils.inInterfaceOrAnnotationBlock(ast)
                     ? Scope.PUBLIC : declaredScope;
         }
 
         final Scope surroundingScope = ScopeUtils.getSurroundingScope(ast);
 
-        return customScope.isIn(this.scope) && surroundingScope.isIn(this.scope)
+        return customScope.isIn(scope) && surroundingScope.isIn(scope)
             && (excludeScope == null
                 || !customScope.isIn(excludeScope)
                 || !surroundingScope.isIn(excludeScope));
     }
 }
