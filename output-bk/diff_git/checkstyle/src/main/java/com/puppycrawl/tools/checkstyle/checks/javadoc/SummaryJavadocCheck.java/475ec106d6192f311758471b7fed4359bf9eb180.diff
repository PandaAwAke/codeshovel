diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java
index 828d2231f..b7a5958d3 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java
@@ -169,54 +169,54 @@ public class SummaryJavadocCheck extends AbstractJavadocCheck {
                     extraTextFound = true;
                 }
             }
             else if (!SKIP_TOKENS.contains(child.getType())) {
                 extraTextFound = true;
             }
             if (extraTextFound) {
                 break;
             }
         }
         return containsInheritDoc && !extraTextFound;
     }
 
     /**
      * Finds and returns first sentence.
      * @param ast Javadoc root node.
      * @return first sentence.
      */
     private static String getFirstSentence(DetailNode ast) {
         final StringBuilder result = new StringBuilder();
         final String periodSuffix = PERIOD + ' ';
         for (DetailNode child : ast.getChildren()) {
             final String text;
             if (child.getChildren().length == 0) {
                 text = child.getText();
             }
             else {
                 text = getFirstSentence(child);
             }
 
             if (child.getType() != JavadocTokenTypes.JAVADOC_INLINE_TAG
                 && text.contains(periodSuffix)) {
                 result.append(text.substring(0, text.indexOf(periodSuffix) + 1));
                 break;
             }
             else {
                 result.append(text);
             }
         }
         return result.toString();
     }
 
     /**
      * Tests if first sentence contains forbidden summary fragment.
      * @param firstSentence String with first sentence.
      * @return true, if first sentence contains forbidden summary fragment.
      */
     private boolean containsForbiddenFragment(String firstSentence) {
         String javadocText = JAVADOC_MULTILINE_TO_SINGLELINE_PATTERN
                 .matcher(firstSentence).replaceAll(" ");
-        javadocText = CharMatcher.WHITESPACE.trimAndCollapseFrom(javadocText, ' ');
+        javadocText = CharMatcher.whitespace().trimAndCollapseFrom(javadocText, ' ');
         return forbiddenSummaryFragments.matcher(javadocText).find();
     }
 }
