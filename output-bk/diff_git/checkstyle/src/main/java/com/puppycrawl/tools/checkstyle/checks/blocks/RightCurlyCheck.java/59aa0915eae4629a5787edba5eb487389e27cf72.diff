diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java
index 11247c794..232bd2fd4 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java
@@ -125,101 +125,101 @@ public class RightCurlyCheck extends AbstractCheck {
             throw new IllegalArgumentException("unable to parse " + optionStr, iae);
         }
     }
 
     /**
      * Does the check need to check if right curly starts line.
      * @param flag new value of this property.
      */
     public void setShouldStartLine(boolean flag) {
         shouldStartLine = flag;
     }
 
     @Override
     public int[] getDefaultTokens() {
         return new int[] {
             TokenTypes.LITERAL_TRY,
             TokenTypes.LITERAL_CATCH,
             TokenTypes.LITERAL_FINALLY,
             TokenTypes.LITERAL_IF,
             TokenTypes.LITERAL_ELSE,
         };
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.LITERAL_TRY,
             TokenTypes.LITERAL_CATCH,
             TokenTypes.LITERAL_FINALLY,
             TokenTypes.LITERAL_IF,
             TokenTypes.LITERAL_ELSE,
             TokenTypes.CLASS_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.CTOR_DEF,
             TokenTypes.LITERAL_FOR,
             TokenTypes.LITERAL_WHILE,
             TokenTypes.LITERAL_DO,
             TokenTypes.STATIC_INIT,
             TokenTypes.INSTANCE_INIT,
             TokenTypes.LAMBDA,
         };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return CommonUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public void visitToken(DetailAST ast) {
-        final Details details = getDetails(ast);
+        final Details details = Details.getDetails(ast);
         final DetailAST rcurly = details.rcurly;
 
         if (rcurly != null) {
             final String violation = validate(details);
             if (!violation.isEmpty()) {
                 log(rcurly, violation, "}", rcurly.getColumnNo() + 1);
             }
         }
     }
 
     /**
      * Does general validation.
      * @param details for validation.
      * @return violation message or empty string
      *     if there was not violation during validation.
      */
     private String validate(Details details) {
         String violation = "";
         if (shouldHaveLineBreakBefore(option, details)) {
             violation = MSG_KEY_LINE_BREAK_BEFORE;
         }
         else if (shouldBeOnSameLine(option, details)) {
             violation = MSG_KEY_LINE_SAME;
         }
         else if (shouldBeAloneOnLine(option, details)) {
             violation = MSG_KEY_LINE_ALONE;
         }
         else if (shouldStartLine) {
             final String targetSourceLine = getLines()[details.rcurly.getLineNo() - 1];
             if (!isOnStartOfLine(details, targetSourceLine)) {
                 violation = MSG_KEY_LINE_NEW;
             }
         }
         return violation;
     }
 
     /**
      * Checks whether a right curly should have a line break before.
      * @param bracePolicy option for placing the right curly brace.
      * @param details details for validation.
      * @return true if a right curly should have a line break before.
      */
     private static boolean shouldHaveLineBreakBefore(RightCurlyOption bracePolicy,
                                                      Details details) {
         return bracePolicy == RightCurlyOption.SAME
                 && !hasLineBreakBefore(details.rcurly)
                 && details.lcurly.getLineNo() != details.rcurly.getLineNo();
     }
 
     /**
@@ -273,227 +273,319 @@ public class RightCurlyCheck extends AbstractCheck {
     }
 
     /**
      * Whether right curly brace starts target source line.
      * @param details Details of right curly brace for validation
      * @param targetSourceLine source line to check
      * @return true if right curly brace starts target source line.
      */
     private static boolean isOnStartOfLine(Details details, String targetSourceLine) {
         return CommonUtils.hasWhitespaceBefore(details.rcurly.getColumnNo(), targetSourceLine)
                 || details.lcurly.getLineNo() == details.rcurly.getLineNo();
     }
 
     /**
      * Checks whether right curly is alone on a line.
      * @param details for validation.
      * @return true if right curly is alone on a line.
      */
     private static boolean isAloneOnLine(Details details) {
         final DetailAST rcurly = details.rcurly;
         final DetailAST lcurly = details.lcurly;
         final DetailAST nextToken = details.nextToken;
         return rcurly.getLineNo() != lcurly.getLineNo()
             && rcurly.getLineNo() != nextToken.getLineNo();
     }
 
     /**
      * Checks whether block has a single-line format.
      * @param details for validation.
      * @return true if block has single-line format.
      */
     private static boolean isSingleLineBlock(Details details) {
         final DetailAST rcurly = details.rcurly;
         final DetailAST lcurly = details.lcurly;
         final DetailAST nextToken = details.nextToken;
         return rcurly.getLineNo() == lcurly.getLineNo()
             && rcurly.getLineNo() != nextToken.getLineNo();
     }
 
     /**
      * Checks whether lcurly is in anonymous inner class initialization.
      * @param lcurly left curly token.
      * @return true if lcurly begins anonymous inner class initialization.
      */
     private static boolean isAnonInnerClassInit(DetailAST lcurly) {
         final Scope surroundingScope = ScopeUtils.getSurroundingScope(lcurly);
         return surroundingScope.ordinal() == Scope.ANONINNER.ordinal();
     }
 
     /**
-     * Collects validation details.
-     * @param ast detail ast.
-     * @return object that contain all details to make a validation.
-     * @noinspection SwitchStatementDensity
+     * Checks if definition body is empty.
+     * @param lcurly left curly.
+     * @return true if definition body is empty.
+     */
+    private static boolean isEmptyBody(DetailAST lcurly) {
+        boolean result = false;
+        if (lcurly.getParent().getType() == TokenTypes.OBJBLOCK) {
+            if (lcurly.getNextSibling().getType() == TokenTypes.RCURLY) {
+                result = true;
+            }
+        }
+        else if (lcurly.getFirstChild().getType() == TokenTypes.RCURLY) {
+            result = true;
+        }
+        return result;
+    }
+
+    /**
+     * Checks if right curly has line break before.
+     * @param rightCurly right curly token.
+     * @return true, if right curly has line break before.
+     */
+    private static boolean hasLineBreakBefore(DetailAST rightCurly) {
+        final DetailAST previousToken = rightCurly.getPreviousSibling();
+        return previousToken == null
+                || rightCurly.getLineNo() != previousToken.getLineNo();
+    }
+
+    /**
+     * Structure that contains all details for validation.
      */
-    // -@cs[JavaNCSS|ExecutableStatementCount|CyclomaticComplexity|NPathComplexity] getDetails()
-    // method is a huge SWITCH, it has to be monolithic
-    private static Details getDetails(DetailAST ast) {
-        // Attempt to locate the tokens to do the check
-        boolean shouldCheckLastRcurly = false;
-        DetailAST rcurly = null;
-        final DetailAST lcurly;
-        DetailAST nextToken;
-
-        switch (ast.getType()) {
-            case TokenTypes.LITERAL_TRY:
+    private static final class Details {
+
+        /** Right curly. */
+        private final DetailAST rcurly;
+        /** Left curly. */
+        private final DetailAST lcurly;
+        /** Next token. */
+        private final DetailAST nextToken;
+        /** Should check last right curly. */
+        private final boolean shouldCheckLastRcurly;
+
+        /**
+         * Constructor.
+         * @param lcurly the lcurly of the token whose details are being collected
+         * @param rcurly the rcurly of the token whose details are being collected
+         * @param nextToken the token after the token whose details are being collected
+         * @param shouldCheckLastRcurly boolean value to determine if to check last rcurly
+         */
+        private Details(DetailAST lcurly, DetailAST rcurly,
+                        DetailAST nextToken, boolean shouldCheckLastRcurly) {
+            this.lcurly = lcurly;
+            this.rcurly = rcurly;
+            this.nextToken = nextToken;
+            this.shouldCheckLastRcurly = shouldCheckLastRcurly;
+        }
+
+        /**
+         * Collects validation Details.
+         * @param ast a {@code DetailAST} value
+         * @return object containing all details to make a validation
+         */
+        private static Details getDetails(DetailAST ast) {
+            final Details details;
+            switch (ast.getType()) {
+                case TokenTypes.LITERAL_TRY:
+                case TokenTypes.LITERAL_CATCH:
+                case TokenTypes.LITERAL_FINALLY:
+                    details = getDetailsForTryCatchFinally(ast);
+                    break;
+                case TokenTypes.LITERAL_IF:
+                case TokenTypes.LITERAL_ELSE:
+                    details = getDetailsForIfElse(ast);
+                    break;
+                case TokenTypes.LITERAL_DO:
+                case TokenTypes.LITERAL_WHILE:
+                case TokenTypes.LITERAL_FOR:
+                    details = getDetailsForLoops(ast);
+                    break;
+                case TokenTypes.LAMBDA:
+                    details = getDetailsForLambda(ast);
+                    break;
+                default:
+                    details = getDetailsForOthers(ast);
+                    break;
+            }
+            return details;
+        }
+
+        /**
+         * Collects validation details for LITERAL_TRY, LITERAL_CATCH, and LITERAL_FINALLY.
+         * @param ast a {@code DetailAST} value
+         * @return object containing all details to make a validation
+         */
+        private static Details getDetailsForTryCatchFinally(DetailAST ast) {
+            boolean shouldCheckLastRcurly = false;
+            final DetailAST rcurly;
+            final DetailAST lcurly;
+            DetailAST nextToken;
+            final int tokenType = ast.getType();
+            if (tokenType == TokenTypes.LITERAL_TRY) {
                 if (ast.getFirstChild().getType() == TokenTypes.RESOURCE_SPECIFICATION) {
                     lcurly = ast.getFirstChild().getNextSibling();
                 }
                 else {
                     lcurly = ast.getFirstChild();
                 }
                 nextToken = lcurly.getNextSibling();
                 rcurly = lcurly.getLastChild();
 
                 if (nextToken == null) {
                     shouldCheckLastRcurly = true;
                     nextToken = getNextToken(ast);
                 }
-                break;
-            case TokenTypes.LITERAL_CATCH:
+            }
+            else if (tokenType == TokenTypes.LITERAL_CATCH) {
                 nextToken = ast.getNextSibling();
                 lcurly = ast.getLastChild();
                 rcurly = lcurly.getLastChild();
                 if (nextToken == null) {
                     shouldCheckLastRcurly = true;
                     nextToken = getNextToken(ast);
                 }
-                break;
-            case TokenTypes.LITERAL_IF:
+
+            }
+            else {
+                shouldCheckLastRcurly = true;
+                nextToken = getNextToken(ast);
+                lcurly = ast.getFirstChild();
+                rcurly = lcurly.getLastChild();
+            }
+            return new Details(lcurly, rcurly, nextToken, shouldCheckLastRcurly);
+        }
+
+        /**
+         * Collects validation details for LITERAL_IF and LITERAL_ELSE.
+         * @param ast a {@code DetailAST} value
+         * @return object containing all details to make a validation
+         */
+        private static Details getDetailsForIfElse(DetailAST ast) {
+            boolean shouldCheckLastRcurly = false;
+            DetailAST rcurly = null;
+            final DetailAST lcurly;
+            DetailAST nextToken;
+            final int tokenType = ast.getType();
+            if (tokenType == TokenTypes.LITERAL_IF) {
                 nextToken = ast.findFirstToken(TokenTypes.LITERAL_ELSE);
                 if (nextToken == null) {
                     shouldCheckLastRcurly = true;
                     nextToken = getNextToken(ast);
                     lcurly = ast.getLastChild();
                 }
                 else {
                     lcurly = nextToken.getPreviousSibling();
                 }
                 if (lcurly.getType() == TokenTypes.SLIST) {
                     rcurly = lcurly.getLastChild();
                 }
-                break;
-            case TokenTypes.LITERAL_ELSE:
-            case TokenTypes.LITERAL_FINALLY:
+
+            }
+            else {
                 shouldCheckLastRcurly = true;
                 nextToken = getNextToken(ast);
                 lcurly = ast.getFirstChild();
                 if (lcurly.getType() == TokenTypes.SLIST) {
                     rcurly = lcurly.getLastChild();
                 }
-                break;
-            case TokenTypes.CLASS_DEF:
+            }
+            return new Details(lcurly, rcurly, nextToken, shouldCheckLastRcurly);
+        }
+
+        /**
+         * Collects validation details for CLASS_DEF, METHOD DEF, CTOR_DEF, STATIC_INIT, and
+         * INSTANCE_INIT.
+         * @param ast a {@code DetailAST} value
+         * @return an object containing all details to make a validation
+         */
+        private static Details getDetailsForOthers(DetailAST ast) {
+            DetailAST rcurly = null;
+            final DetailAST lcurly;
+            final DetailAST nextToken;
+            final int tokenType = ast.getType();
+            if (tokenType == TokenTypes.CLASS_DEF) {
                 final DetailAST child = ast.getLastChild();
                 lcurly = child.getFirstChild();
                 rcurly = child.getLastChild();
                 nextToken = ast;
-                break;
-            case TokenTypes.CTOR_DEF:
-            case TokenTypes.STATIC_INIT:
-            case TokenTypes.INSTANCE_INIT:
-                lcurly = ast.findFirstToken(TokenTypes.SLIST);
-                rcurly = lcurly.getLastChild();
-                nextToken = getNextToken(ast);
-                break;
-            case TokenTypes.LITERAL_DO:
-                nextToken = ast.findFirstToken(TokenTypes.DO_WHILE);
+            }
+            else if (tokenType == TokenTypes.METHOD_DEF) {
                 lcurly = ast.findFirstToken(TokenTypes.SLIST);
                 if (lcurly != null) {
+                    // SLIST could be absent if method is abstract
                     rcurly = lcurly.getLastChild();
                 }
-                break;
-            case TokenTypes.LAMBDA:
+                nextToken = getNextToken(ast);
+            }
+            else {
                 lcurly = ast.findFirstToken(TokenTypes.SLIST);
+                rcurly = lcurly.getLastChild();
                 nextToken = getNextToken(ast);
-                if (nextToken.getType() != TokenTypes.RPAREN
-                        && nextToken.getType() != TokenTypes.COMMA) {
-                    shouldCheckLastRcurly = true;
-                    nextToken = getNextToken(nextToken);
-                }
+            }
+            return new Details(lcurly, rcurly, nextToken, false);
+        }
+
+        /**
+         * Collects validation details for loops' tokens.
+         * @param ast a {@code DetailAST} value
+         * @return an object containing all details to make a validation
+         */
+        private static Details getDetailsForLoops(DetailAST ast) {
+            DetailAST rcurly = null;
+            final DetailAST lcurly;
+            final DetailAST nextToken;
+            final int tokenType = ast.getType();
+            if (tokenType == TokenTypes.LITERAL_DO) {
+                nextToken = ast.findFirstToken(TokenTypes.DO_WHILE);
+                lcurly = ast.findFirstToken(TokenTypes.SLIST);
                 if (lcurly != null) {
                     rcurly = lcurly.getLastChild();
                 }
-                break;
-            default:
-                // ATTENTION! We have default here, but we expect case TokenTypes.METHOD_DEF,
-                // TokenTypes.LITERAL_FOR, TokenTypes.LITERAL_WHILE only.
-                // It has been done to improve coverage to 100%. I couldn't replace it with
-                // if-else-if block because code was ugly and didn't pass pmd check.
-
+            }
+            else {
                 lcurly = ast.findFirstToken(TokenTypes.SLIST);
                 if (lcurly != null) {
-                    // SLIST could be absent if method is abstract,
-                    // and code like "while(true);"
+                    // SLIST could be absent in code like "while(true);"
                     rcurly = lcurly.getLastChild();
                 }
                 nextToken = getNextToken(ast);
-                break;
+            }
+            return new Details(lcurly, rcurly, nextToken, false);
         }
 
-        final Details details = new Details();
-        details.rcurly = rcurly;
-        details.lcurly = lcurly;
-        details.nextToken = nextToken;
-        details.shouldCheckLastRcurly = shouldCheckLastRcurly;
-
-        return details;
-    }
-
-    /**
-     * Checks if definition body is empty.
-     * @param lcurly left curly.
-     * @return true if definition body is empty.
-     */
-    private static boolean isEmptyBody(DetailAST lcurly) {
-        boolean result = false;
-        if (lcurly.getParent().getType() == TokenTypes.OBJBLOCK) {
-            if (lcurly.getNextSibling().getType() == TokenTypes.RCURLY) {
-                result = true;
+        /**
+         * Collects validation details for Lambdas.
+         * @param ast a {@code DetailAST} value
+         * @return an object containing all details to make a validation
+         */
+        private static Details getDetailsForLambda(DetailAST ast) {
+            final DetailAST lcurly = ast.findFirstToken(TokenTypes.SLIST);
+            boolean shouldCheckLastRcurly = false;
+            DetailAST nextToken = getNextToken(ast);
+            if (nextToken.getType() != TokenTypes.RPAREN
+                    && nextToken.getType() != TokenTypes.COMMA) {
+                shouldCheckLastRcurly = true;
+                nextToken = getNextToken(nextToken);
             }
+            DetailAST rcurly = null;
+            if (lcurly != null) {
+                rcurly = lcurly.getLastChild();
+            }
+            return new Details(lcurly, rcurly, nextToken, shouldCheckLastRcurly);
         }
-        else if (lcurly.getFirstChild().getType() == TokenTypes.RCURLY) {
-            result = true;
-        }
-        return result;
-    }
 
-    /**
-     * Finds next token after the given one.
-     * @param ast the given node.
-     * @return the token which represents next lexical item.
-     */
-    private static DetailAST getNextToken(DetailAST ast) {
-        DetailAST next = null;
-        DetailAST parent = ast;
-        while (next == null) {
-            next = parent.getNextSibling();
-            parent = parent.getParent();
+        /**
+         * Finds next token after the given one.
+         * @param ast the given node.
+         * @return the token which represents next lexical item.
+         */
+        private static DetailAST getNextToken(DetailAST ast) {
+            DetailAST next = null;
+            DetailAST parent = ast;
+            while (next == null) {
+                next = parent.getNextSibling();
+                parent = parent.getParent();
+            }
+            return CheckUtils.getFirstNode(next);
         }
-        return CheckUtils.getFirstNode(next);
-    }
-
-    /**
-     * Checks if right curly has line break before.
-     * @param rightCurly right curly token.
-     * @return true, if right curly has line break before.
-     */
-    private static boolean hasLineBreakBefore(DetailAST rightCurly) {
-        final DetailAST previousToken = rightCurly.getPreviousSibling();
-        return previousToken == null
-                || rightCurly.getLineNo() != previousToken.getLineNo();
-    }
-
-    /**
-     * Structure that contains all details for validation.
-     */
-    private static class Details {
-        /** Right curly. */
-        private DetailAST rcurly;
-        /** Left curly. */
-        private DetailAST lcurly;
-        /** Next token. */
-        private DetailAST nextToken;
-        /** Should check last right curly. */
-        private boolean shouldCheckLastRcurly;
     }
 }
