diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java
index 065ed7666..3688729c7 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java
@@ -119,58 +119,61 @@ public class AtclauseOrderCheck extends AbstractJavadocCheck
 
     @Override
     public int[] getDefaultJavadocTokens()
     {
         return new int[] {
             JavadocTokenTypes.JAVADOC,
         };
     }
 
     @Override
     public void visitJavadocToken(DetailNode aAst)
     {
         final int parentType = getParentType(getBlockCommentAst());
 
         if (mTarget.contains(parentType)) {
             checkOrderInTagSection(aAst);
         }
     }
 
     /**
      * Some javadoc.
      * @param aJavadoc Some javadoc.
      */
     private void checkOrderInTagSection(DetailNode aJavadoc)
     {
         int indexOrderOfPreviousTag = 0;
         int indexOrderOfCurrentTag = 0;
 
         for (DetailNode node : aJavadoc.getChildren()) {
             if (node.getType() == JavadocTokenTypes.JAVADOC_TAG) {
                 final String tagText = JavadocUtils.getFirstChild(node).getText();
                 indexOrderOfCurrentTag = mTagOrder.indexOf(tagText);
 
                 if (mTagOrder.contains(tagText)
                         && indexOrderOfCurrentTag < indexOrderOfPreviousTag)
                 {
                     log(node.getLineNumber(), "at.clause.order", mTagOrder.toString());
                 }
                 indexOrderOfPreviousTag = indexOrderOfCurrentTag;
             }
         }
     }
 
     /**
      * Some javadoc.
      * @param aCommentBlock Some javadoc.
      * @return Some javadoc.
      */
     private int getParentType(DetailAST aCommentBlock)
     {
+        int type = 0;
         final DetailAST parentNode = aCommentBlock.getParent();
-        int type = parentNode.getType();
-        if (type == TokenTypes.TYPE || type == TokenTypes.MODIFIERS) {
-            type = parentNode.getParent().getType();
+        if (parentNode != null) {
+            type = parentNode.getType();
+            if (type == TokenTypes.TYPE || type == TokenTypes.MODIFIERS) {
+                type = parentNode.getParent().getType();
+            }
         }
         return type;
     }
 }
