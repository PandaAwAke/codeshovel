diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheck.java
index 44e58bce3..1f9c90a7f 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheck.java
@@ -59,75 +59,81 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  *      ...
  *  }
  * </code>
  * </pre>
  * @author Oliver Burn
  * @version 1.0
  */
 public class ParameterNumberCheck
     extends Check
 {
     /** {@link Override Override} annotation name */
     private static final String OVERRIDE = "Override";
 
     /** canonical {@link Override Override} annotation name */
     private static final String CANONICAL_OVERRIDE = "java.lang." + OVERRIDE;
 
     /** default maximum number of allowed parameters */
     private static final int DEFAULT_MAX_PARAMETERS = 7;
 
     /** the maximum number of allowed parameters */
     private int max = DEFAULT_MAX_PARAMETERS;
 
     /** ignore overridden methods */
     private boolean ignoreOverriddenMethods;
 
     /**
      * Sets the maximum number of allowed parameters.
      * @param max the max allowed parameters
      */
     public void setMax(int max)
     {
         this.max = max;
     }
 
     /**
      * Ignore number of parameters for methods with
      * &#064;{@link java.lang.Override} annotation.
      * @param ignoreOverriddenMethods set ignore overridden methods
      */
     public void setIgnoreOverriddenMethods(boolean ignoreOverriddenMethods)
     {
         this.ignoreOverriddenMethods = ignoreOverriddenMethods;
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.METHOD_DEF, TokenTypes.CTOR_DEF};
     }
 
+    @Override
+    public int[] getAcceptableTokens()
+    {
+        return new int[] {TokenTypes.METHOD_DEF, TokenTypes.CTOR_DEF};
+    }
+
     @Override
     public void visitToken(DetailAST ast)
     {
         final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);
         final int count = params.getChildCount(TokenTypes.PARAMETER_DEF);
         if (count > max && !ignoreNumberOfParameters(ast)) {
             final DetailAST name = ast.findFirstToken(TokenTypes.IDENT);
             log(name.getLineNo(), name.getColumnNo(), "maxParam", max, count);
         }
     }
 
     /** Determine whether to ignore number of parameters for the method.
      *
      * @param ast the token to process
      * @return true if this is overridden method and number of parameters should be ignored
      *         false otherwise
      */
     private boolean ignoreNumberOfParameters(DetailAST ast)
     {
         //if you override a method, you have no power over the number of parameters
         return ignoreOverriddenMethods
                 && (AnnotationUtility.containsAnnotation(ast, OVERRIDE)
                 || AnnotationUtility.containsAnnotation(ast, CANONICAL_OVERRIDE));
     }
 }
