diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheck.java
index 6c0a0929a..484d8ef9a 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheck.java
@@ -20,100 +20,112 @@ package com.puppycrawl.tools.checkstyle.checks.sizes;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FastStack;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * Restricts the number of executable statements to a specified limit
  * (default = 30).
  * @author Simon Harris
  */
 public final class ExecutableStatementCountCheck
     extends Check
 {
     /** default threshold */
     private static final int DEFAULT_MAX = 30;
 
     /** threshold to report error for */
     private int max;
 
     /** Stack of method contexts. */
     private final FastStack<Context> contextStack = FastStack.newInstance();
 
     /** Current method context. */
     private Context context;
 
     /** Constructs a <code>ExecutableStatementCountCheck</code>. */
     public ExecutableStatementCountCheck()
     {
         setMax(DEFAULT_MAX);
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.CTOR_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.INSTANCE_INIT,
             TokenTypes.STATIC_INIT,
             TokenTypes.SLIST,
         };
     }
 
     @Override
     public int[] getRequiredTokens()
     {
         return new int[] {TokenTypes.SLIST};
     }
 
+    @Override
+    public int[] getAcceptableTokens()
+    {
+        return new int[] {
+            TokenTypes.CTOR_DEF,
+            TokenTypes.METHOD_DEF,
+            TokenTypes.INSTANCE_INIT,
+            TokenTypes.STATIC_INIT,
+            TokenTypes.SLIST,
+        };
+    }
+
     /**
      * Gets the maximum threshold.
      * @return the maximum threshold.
      */
     public int getMax()
     {
         return max;
     }
 
     /**
      * Sets the maximum threshold.
      * @param max the maximum threshold.
      */
     public void setMax(int max)
     {
         this.max = max;
     }
 
     @Override
     public void beginTree(DetailAST rootAST)
     {
         context = null;
         contextStack.clear();
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
         switch (ast.getType()) {
             case TokenTypes.CTOR_DEF:
             case TokenTypes.METHOD_DEF:
             case TokenTypes.INSTANCE_INIT:
             case TokenTypes.STATIC_INIT:
                 visitMemberDef(ast);
                 break;
             case TokenTypes.SLIST:
                 visitSlist(ast);
                 break;
             default:
                 throw new IllegalStateException(ast.toString());
         }
     }
 
     @Override
     public void leaveToken(DetailAST ast)
     {
         switch (ast.getType()) {
             case TokenTypes.CTOR_DEF:
             case TokenTypes.METHOD_DEF:
             case TokenTypes.INSTANCE_INIT:
