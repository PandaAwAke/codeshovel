diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java
index 61a71567c..2e4608e08 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java
@@ -295,105 +295,105 @@ public class VariableDeclarationUsageDistanceCheck extends Check {
      *        DetailAST of METHOD_CALL.
      * @return name of instance.
      */
     private static String getInstanceName(DetailAST methodCallAst) {
         final String methodCallName =
                 FullIdent.createFullIdentBelow(methodCallAst).getText();
         final int lastDotIndex = methodCallName.lastIndexOf('.');
         String instanceName = "";
         if (lastDotIndex != -1) {
             instanceName = methodCallName.substring(0, lastDotIndex);
         }
         return instanceName;
     }
 
     /**
      * Processes statements until usage of variable to detect sequence of
      * initialization methods.
      * @param variableUsageAst
      *        DetailAST of expression that uses variable named variableName.
      * @param variableName
      *        name of considered variable.
      * @return true if statements between declaration and usage of variable are
      *         initialization methods.
      */
     private static boolean isInitializationSequence(
             DetailAST variableUsageAst, String variableName) {
         boolean result = true;
         boolean isUsedVariableDeclarationFound = false;
         DetailAST currentSiblingAst = variableUsageAst;
         String initInstanceName = "";
 
         while (result
                 && !isUsedVariableDeclarationFound
                 && currentSiblingAst != null) {
 
             switch (currentSiblingAst.getType()) {
 
                 case TokenTypes.EXPR:
                     final DetailAST methodCallAst = currentSiblingAst.getFirstChild();
 
                     if (methodCallAst != null
                         && methodCallAst.getType() == TokenTypes.METHOD_CALL) {
                         final String instanceName =
                             getInstanceName(methodCallAst);
                         // method is called without instance
                         if (instanceName.isEmpty()) {
                             result = false;
                         }
                         // differs from previous instance
                         else if (!instanceName.equals(initInstanceName)) {
-                            if (!initInstanceName.isEmpty()) {
-                                result = false;
+                            if (initInstanceName.isEmpty()) {
+                                initInstanceName = instanceName;
                             }
                             else {
-                                initInstanceName = instanceName;
+                                result = false;
                             }
                         }
                     }
                     else { // is not method call
                         result = false;
                     }
                     break;
 
                 case TokenTypes.VARIABLE_DEF:
                     final String currentVariableName = currentSiblingAst
                         .findFirstToken(TokenTypes.IDENT).getText();
                     isUsedVariableDeclarationFound = variableName.equals(currentVariableName);
                     break;
 
                 case TokenTypes.SEMI:
                     break;
 
                 default:
                     result = false;
             }
 
             currentSiblingAst = currentSiblingAst.getPreviousSibling();
         }
 
         return result;
     }
 
     /**
      * Calculates distance between declaration of variable and its first usage
      * in single scope.
      * @param semicolonAst
      *        Regular node of Ast which is checked for content of checking
      *        variable.
      * @param variableIdentAst
      *        Variable which distance is calculated for.
      * @return entry which contains expression with variable usage and distance.
      */
     private static Entry<DetailAST, Integer> calculateDistanceInSingleScope(
             DetailAST semicolonAst, DetailAST variableIdentAst) {
         int dist = 0;
         boolean firstUsageFound = false;
         DetailAST currentAst = semicolonAst;
         DetailAST variableUsageAst = null;
 
         while (!firstUsageFound && currentAst != null
                 && currentAst.getType() != TokenTypes.RCURLY) {
             if (currentAst.getFirstChild() != null) {
 
                 if (isChild(currentAst, variableIdentAst)) {
 
