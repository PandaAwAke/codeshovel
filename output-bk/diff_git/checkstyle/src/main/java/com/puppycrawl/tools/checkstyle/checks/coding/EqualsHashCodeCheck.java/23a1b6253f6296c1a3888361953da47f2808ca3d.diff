diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java
index 84ad553c9..bd9bd783f 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java
@@ -57,91 +57,91 @@ public class EqualsHashCodeCheck
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "equals.noHashCode";
 
     /** Maps OBJ_BLOCK to the method definition of equals() */
     private final Map<DetailAST, DetailAST> objBlockEquals = Maps.newHashMap();
 
     /** The set of OBJ_BLOCKs that contain a definition of hashCode() */
     private final Set<DetailAST> objBlockWithHashCode = Sets.newHashSet();
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.METHOD_DEF};
     }
 
     @Override
     public int[] getRequiredTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public void beginTree(DetailAST rootAST) {
         objBlockEquals.clear();
         objBlockWithHashCode.clear();
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final DetailAST modifiers = ast.getFirstChild();
         final AST type = ast.findFirstToken(TokenTypes.TYPE);
         final AST methodName = ast.findFirstToken(TokenTypes.IDENT);
         final DetailAST parameters = ast.findFirstToken(TokenTypes.PARAMETERS);
 
         if (type.getFirstChild().getType() == TokenTypes.LITERAL_BOOLEAN
                 && "equals".equals(methodName.getText())
                 && modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)
                 && parameters.getChildCount() == 1
                 && isObjectParam(parameters.getFirstChild())
             ) {
             objBlockEquals.put(ast.getParent(), ast);
         }
         else if (type.getFirstChild().getType() == TokenTypes.LITERAL_INT
                 && "hashCode".equals(methodName.getText())
                 && modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)
-                && parameters.getFirstChild() == null) { // no params
+                && parameters.getFirstChild() == null) {
             objBlockWithHashCode.add(ast.getParent());
         }
     }
 
     /**
      * Determines if an AST is a formal param of type Object (or subclass).
      * @param firstChild the AST to check
      * @return true iff firstChild is a parameter of an Object type.
      */
     private static boolean isObjectParam(AST firstChild) {
         final AST modifiers = firstChild.getFirstChild();
         final AST type = modifiers.getNextSibling();
         switch (type.getFirstChild().getType()) {
             case TokenTypes.LITERAL_BOOLEAN:
             case TokenTypes.LITERAL_BYTE:
             case TokenTypes.LITERAL_CHAR:
             case TokenTypes.LITERAL_DOUBLE:
             case TokenTypes.LITERAL_FLOAT:
             case TokenTypes.LITERAL_INT:
             case TokenTypes.LITERAL_LONG:
             case TokenTypes.LITERAL_SHORT:
                 return false;
             default:
                 return true;
         }
     }
 
     @Override
     public void finishTree(DetailAST rootAST) {
         for (Map.Entry<DetailAST, DetailAST> detailASTDetailASTEntry : objBlockEquals.entrySet()) {
             if (!objBlockWithHashCode.contains(detailASTDetailASTEntry.getKey())) {
                 final DetailAST equalsAST = detailASTDetailASTEntry.getValue();
                 log(equalsAST.getLineNo(), equalsAST.getColumnNo(), MSG_KEY);
             }
         }
 
         objBlockEquals.clear();
         objBlockWithHashCode.clear();
     }
 }
