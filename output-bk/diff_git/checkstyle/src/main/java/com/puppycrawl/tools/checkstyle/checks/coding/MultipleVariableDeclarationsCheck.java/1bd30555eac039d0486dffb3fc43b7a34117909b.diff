diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleVariableDeclarationsCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleVariableDeclarationsCheck.java
index 9f49863fe..8610b1f17 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleVariableDeclarationsCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleVariableDeclarationsCheck.java
@@ -32,113 +32,113 @@ import com.puppycrawl.tools.checkstyle.checks.CheckUtils;
  * Rationale: <a
  * href="http://java.sun.com/docs/codeconv/html/CodeConventions.doc5.html#2991">
  * the SUN Code conventions chapter 6.1</a> recommends that
  * declarations should be one per line.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="MultipleVariableDeclarations"/&gt;
  * </pre>
  * @author o_sukhodolsky
  */
 public class MultipleVariableDeclarationsCheck extends Check
 {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_MULTIPLE = "multiple.variable.declarations";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_MULTIPLE_COMMA = "multiple.variable.declarations.comma";
 
     /** Creates new instance of the check. */
     public MultipleVariableDeclarationsCheck()
     {
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.VARIABLE_DEF};
     }
 
     @Override
     public int[] getAcceptableTokens()
     {
         return new int[] {TokenTypes.VARIABLE_DEF};
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
         DetailAST nextNode = ast.getNextSibling();
         final boolean isCommaSeparated =
-            ((nextNode != null) && (nextNode.getType() == TokenTypes.COMMA));
+                nextNode != null && nextNode.getType() == TokenTypes.COMMA;
 
         if (nextNode == null) {
             // no next statement - no check
             return;
         }
 
-        if ((nextNode.getType() == TokenTypes.COMMA)
-            || (nextNode.getType() == TokenTypes.SEMI))
+        if (nextNode.getType() == TokenTypes.COMMA
+            || nextNode.getType() == TokenTypes.SEMI)
         {
             nextNode = nextNode.getNextSibling();
         }
 
-        if ((nextNode != null)
-            && (nextNode.getType() == TokenTypes.VARIABLE_DEF))
+        if (nextNode != null
+            && nextNode.getType() == TokenTypes.VARIABLE_DEF)
         {
             final DetailAST firstNode = CheckUtils.getFirstNode(ast);
             if (isCommaSeparated) {
                 // Check if the multiple variable declarations are in a
                 // for loop initializer. If they are, then no warning
                 // should be displayed. Declaring multiple variables in
                 // a for loop initializer is a good way to minimize
                 // variable scope. Refer Feature Request Id - 2895985
                 // for more details
                 if (ast.getParent().getType() != TokenTypes.FOR_INIT) {
                     log(firstNode, "multiple.variable.declarations.comma");
                 }
                 return;
             }
 
             final DetailAST lastNode = getLastNode(ast);
             final DetailAST firstNextNode = CheckUtils.getFirstNode(nextNode);
 
             if (firstNextNode.getLineNo() == lastNode.getLineNo()) {
                 log(firstNode, "multiple.variable.declarations");
             }
         }
 
     }
 
     /**
      * Finds sub-node for given node maximum (line, column) pair.
      * @param node the root of tree for search.
      * @return sub-node with maximum (line, column) pair.
      */
     private static DetailAST getLastNode(final DetailAST node)
     {
         DetailAST currentNode = node;
         DetailAST child = node.getFirstChild();
         while (child != null) {
             final DetailAST newNode = getLastNode(child);
-            if ((newNode.getLineNo() > currentNode.getLineNo())
-                || ((newNode.getLineNo() == currentNode.getLineNo())
-                    && (newNode.getColumnNo() > currentNode.getColumnNo())))
+            if (newNode.getLineNo() > currentNode.getLineNo()
+                || newNode.getLineNo() == currentNode.getLineNo()
+                    && newNode.getColumnNo() > currentNode.getColumnNo())
             {
                 currentNode = newNode;
             }
             child = child.getNextSibling();
         }
 
         return currentNode;
     }
 }
