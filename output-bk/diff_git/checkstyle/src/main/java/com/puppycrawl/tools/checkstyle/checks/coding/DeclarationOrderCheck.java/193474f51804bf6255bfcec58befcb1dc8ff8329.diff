diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java
index 5da02bb19..bc63dac42 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java
@@ -192,86 +192,82 @@ public class DeclarationOrderCheck extends Check
 
             case TokenTypes.MODIFIERS:
                 if (parentType != TokenTypes.VARIABLE_DEF
                     || ast.getParent().getParent().getType()
                         != TokenTypes.OBJBLOCK)
                 {
                     return;
                 }
 
                 state = scopeStates.peek();
                 if (ast.findFirstToken(TokenTypes.LITERAL_STATIC) != null) {
                     if (state.currentScopeState > STATE_STATIC_VARIABLE_DEF) {
                         if (!ignoreModifiers
                             || state.currentScopeState > STATE_INSTANCE_VARIABLE_DEF)
                         {
                             log(ast, MSG_STATIC);
                         }
                     }
                     else {
                         state.currentScopeState = STATE_STATIC_VARIABLE_DEF;
                     }
                 }
                 else {
                     if (state.currentScopeState > STATE_INSTANCE_VARIABLE_DEF) {
                         log(ast, MSG_INSTANCE);
                     }
                     else if (state.currentScopeState == STATE_STATIC_VARIABLE_DEF) {
                         state.declarationAccess = Scope.PUBLIC;
                         state.currentScopeState = STATE_INSTANCE_VARIABLE_DEF;
                     }
                 }
 
                 final Scope access = ScopeUtils.getScopeFromMods(ast);
                 if (state.declarationAccess.compareTo(access) > 0) {
                     if (!ignoreModifiers) {
                         log(ast, MSG_ACCESS);
                     }
                 }
                 else {
                     state.declarationAccess = access;
                 }
                 break;
 
             default:
         }
     }
 
     @Override
     public void leaveToken(DetailAST ast)
     {
-        switch (ast.getType()) {
-            case TokenTypes.OBJBLOCK:
-                scopeStates.pop();
-                break;
-
-            default:
+        if (ast.getType() == TokenTypes.OBJBLOCK) {
+            scopeStates.pop();
         }
     }
 
     /**
      * Sets whether to ignore constructors.
      * @param ignoreConstructors whether to ignore constructors.
      */
     public void setIgnoreConstructors(boolean ignoreConstructors)
     {
         this.ignoreConstructors = ignoreConstructors;
     }
 
     /**
      * Sets whether to ignore methods.
      * @param ignoreMethods whether to ignore methods.
      */
     public void setIgnoreMethods(boolean ignoreMethods)
     {
         this.ignoreMethods = ignoreMethods;
     }
 
     /**
      * Sets whether to ignore modifiers.
      * @param ignoreModifiers whether to ignore modifiers.
      */
     public void setIgnoreModifiers(boolean ignoreModifiers)
     {
         this.ignoreModifiers = ignoreModifiers;
     }
 }
