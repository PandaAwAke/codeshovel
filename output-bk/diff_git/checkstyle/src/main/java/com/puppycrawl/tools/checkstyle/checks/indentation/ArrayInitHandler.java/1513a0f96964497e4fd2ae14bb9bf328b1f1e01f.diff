diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java
index e10cf7456..fc21d0119 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java
@@ -22,101 +22,101 @@ package com.puppycrawl.tools.checkstyle.checks.indentation;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * Handler for array initialization blocks.
  *
  * @author jrichard
  */
 public class ArrayInitHandler extends BlockParentHandler {
     /**
      * Construct an instance of this handler with the given indentation check,
      * astract syntax tree, and parent handler.
      *
      * @param indentCheck   the indentation check
      * @param ast           the astract syntax tree
      * @param parent        the parent handler
      */
     public ArrayInitHandler(IndentationCheck indentCheck,
         DetailAST ast, ExpressionHandler parent) {
         super(indentCheck, "array initialization", ast, parent);
     }
 
     @Override
     protected IndentLevel getLevelImpl() {
         final DetailAST parentAST = getMainAst().getParent();
         final int type = parentAST.getType();
         if (type == TokenTypes.LITERAL_NEW || type == TokenTypes.ASSIGN) {
             // note: assumes new or assignment is line to align with
             return new IndentLevel(getLineStart(parentAST));
         }
         else if (getParent() instanceof ArrayInitHandler) {
             return ((ArrayInitHandler) getParent()).getChildrenExpectedLevel();
         }
         else {
             return getParent().getLevel();
         }
     }
 
     @Override
     protected DetailAST getToplevelAST() {
         return null;
     }
 
     @Override
     protected DetailAST getLCurly() {
         return getMainAst();
     }
 
     @Override
     protected IndentLevel curlyLevel() {
-        final IndentLevel level = new IndentLevel(getLevel(), getBraceAdjustement());
+        final IndentLevel level = new IndentLevel(getLevel(), getBraceAdjustment());
         level.addAcceptedIndent(level.getLastIndentLevel() + getLineWrappingIndent());
         return level;
     }
 
     @Override
     protected DetailAST getRCurly() {
         return getMainAst().findFirstToken(TokenTypes.RCURLY);
     }
 
     @Override
     protected boolean rcurlyMustStart() {
         return false;
     }
 
     @Override
     protected boolean childrenMayNest() {
         return true;
     }
 
     @Override
     protected DetailAST getListChild() {
         return getMainAst();
     }
 
     @Override
     protected IndentLevel getChildrenExpectedLevel() {
         final IndentLevel expectedIndent =
             new IndentLevel(getLevel(), getIndentCheck().getArrayInitIndent(),
                     getIndentCheck().getLineWrappingIndentation());
 
         final int firstLine = getFirstLine(Integer.MAX_VALUE, getListChild());
         if (hasCurlys() && firstLine == getLCurly().getLineNo()) {
             final int lcurlyPos = expandedTabsColumnNo(getLCurly());
             final int firstChildPos =
                 getNextFirstNonblankOnLineAfter(firstLine, lcurlyPos);
             if (firstChildPos >= 0) {
                 expectedIndent.addAcceptedIndent(firstChildPos);
                 expectedIndent.addAcceptedIndent(lcurlyPos + getLineWrappingIndent());
             }
         }
         return expectedIndent;
     }
 
     /**
      * @param lineNo   number of line on which we search
      * @param columnNo number of column after which we search
      *
      * @return column number of first non-blank char after
      *         specified column on specified line or -1 if
      *         such char doesn't exist.
