diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheck.java
index e5c5b3c0b..49c3eb2e6 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheck.java
@@ -19,78 +19,84 @@
 package com.puppycrawl.tools.checkstyle.checks.whitespace;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * <p>Checks that chosen statements are not line-wrapped.
  * By default this Check restricts wrapping import and package statements,
  * but it's possible to check any statement.
  * </p>
  *
  * Examples
  * <p class="body">
  *
  * Examples of line-wrapped statements (bad case):
  * <pre><code> package com.puppycrawl.
  *    tools.checkstyle.checks;
  *
  * import com.puppycrawl.tools.
  *    checkstyle.api.Check;
  * </code></pre>
  *
  * <p>
  * To configure the check to force no line-wrapping
  * in package and import statements (default values):
  * </p>
  * <pre class="body">
  * &lt;module name=&quot;NoLineWrap&quot;/&gt;
  * </pre>
  *
  * <p>
  * To configure the check to force no line-wrapping only
  * in import statements:
  * </p>
  * <pre class="body">
  * &lt;module name=&quot;NoLineWrap&quot;&gt;
  *     &lt;property name="tokens" value="IMPORT"&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * Examples of not line-wrapped statements (good case):
  * <pre><code> import com.puppycrawl.tools.checkstyle.api.Check;
  * </code></pre>
  *
  * @author maxvetrenko
  */
 public class NoLineWrapCheck extends Check
 {
 
+    /**
+     * A key is pointing to the warning message text in "messages.properties"
+     * file.
+     */
+    public static final String MSG_KEY = "no.line.wrap";
+
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.PACKAGE_DEF, TokenTypes.IMPORT};
     }
 
     @Override
     public int[] getAcceptableTokens()
     {
         return new int[] {
             TokenTypes.IMPORT,
             TokenTypes.PACKAGE_DEF,
             TokenTypes.CLASS_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.CTOR_DEF,
             TokenTypes.ENUM_DEF,
             TokenTypes.INTERFACE_DEF,
         };
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
         if (ast.getLineNo() != ast.getLastChild().getLineNo()) {
-            log(ast.getLineNo(), "no.line.wrap", ast.getText());
+            log(ast.getLineNo(), MSG_KEY, ast.getText());
         }
     }
 }
