diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java
index 69bcc5a73..130f96d52 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java
@@ -202,71 +202,71 @@ public class UncommentedMainCheck
     }
 
     /**
      * Checks that method name is @quot;main@quot;.
      * @param method the METHOD_DEF node
      * @return true if check passed, false otherwise
      */
     private boolean checkName(DetailAST method)
     {
         final DetailAST ident = method.findFirstToken(TokenTypes.IDENT);
         return "main".equals(ident.getText());
     }
 
     /**
      * Checks that method has final and static modifiers.
      * @param method the METHOD_DEF node
      * @return true if check passed, false otherwise
      */
     private boolean checkModifiers(DetailAST method)
     {
         final DetailAST modifiers =
             method.findFirstToken(TokenTypes.MODIFIERS);
 
         return modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)
             && modifiers.branchContains(TokenTypes.LITERAL_STATIC);
     }
 
     /**
      * Checks that return type is <code>void</code>.
      * @param method the METHOD_DEF node
      * @return true if check passed, false otherwise
      */
     private boolean checkType(DetailAST method)
     {
         final DetailAST type =
             method.findFirstToken(TokenTypes.TYPE).getFirstChild();
         return type.getType() == TokenTypes.LITERAL_VOID;
     }
 
     /**
      * Checks that method has only <code>String[]</code> param
      * @param method the METHOD_DEF node
      * @return true if check passed, false otherwise
      */
     private boolean checkParams(DetailAST method)
     {
         final DetailAST params = method.findFirstToken(TokenTypes.PARAMETERS);
         if (params.getChildCount() != 1) {
             return false;
         }
-        final DetailAST paratype = (params.getFirstChild())
+        final DetailAST paratype = params.getFirstChild()
             .findFirstToken(TokenTypes.TYPE);
         final DetailAST arrayDecl =
             paratype.findFirstToken(TokenTypes.ARRAY_DECLARATOR);
         if (arrayDecl == null) {
             return false;
         }
 
         final DetailAST arrayType = arrayDecl.getFirstChild();
 
-        if ((arrayType.getType() == TokenTypes.IDENT)
-            || (arrayType.getType() == TokenTypes.DOT))
+        if (arrayType.getType() == TokenTypes.IDENT
+            || arrayType.getType() == TokenTypes.DOT)
         {
             final FullIdent type = FullIdent.createFullIdent(arrayType);
-            return ("String".equals(type.getText())
-                    || "java.lang.String".equals(type.getText()));
+            return "String".equals(type.getText())
+                    || "java.lang.String".equals(type.getText());
         }
 
         return false;
     }
 }
