diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheck.java
index a2f3fe1e6..8f11a1cac 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheck.java
@@ -9,91 +9,91 @@
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks;
 
 import java.util.regex.Pattern;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * <p>
  * A check for TODO comments. To check for other patterns in Java comments, set
  * property format.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  *
  * <pre>
  * &lt;module name="TodoComment"/&gt;
  * </pre>
  * <p>
  * An example of how to configure the check for comments that contain
  * <code>WARNING</code> is:
  * </p>
  *
  * <pre>
  * &lt;module name="TodoComment"&gt;
  *    &lt;property name="format" value="WARNING"/&gt;
  * &lt;/module&gt;
  * </pre>
  * @author Oliver Burn
  * @author Baratali Izmailov
  * @version 1.0
  */
 public class TodoCommentCheck
         extends Check
 {
     /**
      * Format of todo comment.
      */
-    private String mFormat = "TODO:";
+    private String format = "TODO:";
 
     /**
-     * Regular expression pattern compiled from mFormat.
+     * Regular expression pattern compiled from format.
      */
-    private Pattern mRegexp = Pattern.compile(mFormat);
+    private Pattern regexp = Pattern.compile(format);
 
     @Override
     public boolean isCommentNodesRequired()
     {
         return true;
     }
 
     /**
      * Setter for todo comment format.
-     * @param aFormat format of todo comment.
+     * @param format format of todo comment.
      */
-    public void setFormat(String aFormat)
+    public void setFormat(String format)
     {
-        mFormat = aFormat;
-        mRegexp = Pattern.compile(aFormat);
+        this.format = format;
+        regexp = Pattern.compile(format);
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.COMMENT_CONTENT };
     }
 
     @Override
-    public void visitToken(DetailAST aAST)
+    public void visitToken(DetailAST ast)
     {
-        final String[] lines = aAST.getText().split("\n");
+        final String[] lines = ast.getText().split("\n");
 
         for (int i = 0; i < lines.length; i++) {
-            if (mRegexp.matcher(lines[i]).find()) {
-                log(aAST.getLineNo() + i, "todo.match", mFormat);
+            if (regexp.matcher(lines[i]).find()) {
+                log(ast.getLineNo() + i, "todo.match", format);
             }
         }
     }
 }
