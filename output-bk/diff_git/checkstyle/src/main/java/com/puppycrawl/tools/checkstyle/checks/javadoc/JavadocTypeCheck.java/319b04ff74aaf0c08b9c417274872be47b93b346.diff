diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
index b63af443c..47f57e7e8 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
@@ -279,62 +279,63 @@ public class JavadocTypeCheck
             if (tag.getTagName().equals(tagName)) {
                 tagCount++;
                 if (!formatPattern.matcher(tag.getFirstArg()).find()) {
                     log(lineNo, TAG_FORMAT, tagPrefix + tagName, format);
                 }
             }
         }
         if (tagCount == 0) {
             log(lineNo, MISSING_TAG, tagPrefix + tagName);
         }
     }
 
     /**
      * Verifies that a type definition has the specified param tag for
      * the specified type parameter name.
      * @param lineNo the line number for the type definition.
      * @param tags tags from the Javadoc comment for the type definition.
      * @param typeParamName the name of the type parameter
      */
     private void checkTypeParamTag(final int lineNo,
             final List<JavadocTag> tags, final String typeParamName) {
         boolean found = false;
         for (int i = tags.size() - 1; i >= 0; i--) {
             final JavadocTag tag = tags.get(i);
             if (tag.isParamTag()
                 && tag.getFirstArg().indexOf(OPEN_ANGLE_BRACKET
                         + typeParamName + CLOSE_ANGLE_BRACKET) == 0) {
                 found = true;
             }
         }
         if (!found) {
             log(lineNo, MISSING_TAG, JavadocTagInfo.PARAM.getText()
                 + " " + OPEN_ANGLE_BRACKET + typeParamName + CLOSE_ANGLE_BRACKET);
         }
     }
 
     /**
      * Checks for unused param tags for type parameters.
      * @param tags tags from the Javadoc comment for the type definition.
      * @param typeParamNames names of type parameters
      */
     private void checkUnusedTypeParamTags(
         final List<JavadocTag> tags,
         final List<String> typeParamNames) {
         final Pattern pattern = Pattern.compile("\\s*<([^>]+)>.*");
         for (int i = tags.size() - 1; i >= 0; i--) {
             final JavadocTag tag = tags.get(i);
             if (tag.isParamTag()) {
 
                 final Matcher matcher = pattern.matcher(tag.getFirstArg());
-                matcher.find();
-                final String typeParamName = matcher.group(1).trim();
-                if (!typeParamNames.contains(typeParamName)) {
-                    log(tag.getLineNo(), tag.getColumnNo(),
-                        UNUSED_TAG,
-                        JavadocTagInfo.PARAM.getText(),
-                        OPEN_ANGLE_BRACKET + typeParamName + CLOSE_ANGLE_BRACKET);
+                if (matcher.find()) {
+                    final String typeParamName = matcher.group(1).trim();
+                    if (!typeParamNames.contains(typeParamName)) {
+                        log(tag.getLineNo(), tag.getColumnNo(),
+                            UNUSED_TAG,
+                            JavadocTagInfo.PARAM.getText(),
+                            OPEN_ANGLE_BRACKET + typeParamName + CLOSE_ANGLE_BRACKET);
+                    }
                 }
             }
         }
     }
 }
