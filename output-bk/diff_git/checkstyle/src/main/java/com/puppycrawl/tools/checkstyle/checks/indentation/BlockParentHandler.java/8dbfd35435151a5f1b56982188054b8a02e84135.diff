diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java
index b3e273a15..2530ae093 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java
@@ -14,101 +14,101 @@
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.indentation;
 
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * Handler for parents of blocks ('if', 'else', 'while', etc).
  * <P>
  * The "block" handler classes use a common superclass BlockParentHandler,
  * employing the Template Method pattern.
  * </P>
  *
  * <UL>
  *   <LI>template method to get the lcurly</LI>
  *   <LI>template method to get the rcurly</LI>
  *   <LI>if curlys aren't present, then template method to get expressions
  *       is called</LI>
  *   <LI>now all the repetitous code which checks for BOL, if curlys are on
  *       same line, etc. can be collapsed into the superclass</LI>
  * </UL>
  *
  *
  * @author jrichard
  */
 public class BlockParentHandler extends ExpressionHandler
 {
     /**
      * Children checked by parent handlers.
      */
     private static final int[] CHECKED_CHILDREN = new int[] {
         TokenTypes.VARIABLE_DEF,
         TokenTypes.EXPR,
         TokenTypes.OBJBLOCK,
         TokenTypes.LITERAL_BREAK,
         TokenTypes.LITERAL_RETURN,
         TokenTypes.LITERAL_THROW,
         TokenTypes.LITERAL_CONTINUE,
     };
 
     /**
      * Returns array of token types which should be checked among childrens.
      * @return array of token types to check.
      */
     protected int[] getCheckedChildren()
     {
-        return CHECKED_CHILDREN;
+        return CHECKED_CHILDREN.clone();
     }
 
     /**
      * Construct an instance of this handler with the given indentation check,
      * name, abstract syntax tree, and parent handler.
      *
      * @param indentCheck   the indentation check
      * @param name          the name of the handler
      * @param ast           the abstract syntax tree
      * @param parent        the parent handler
      */
     public BlockParentHandler(IndentationCheck indentCheck,
         String name, DetailAST ast, ExpressionHandler parent)
     {
         super(indentCheck, name, ast, parent);
     }
 
     /**
      * Get the top level expression being managed by this handler.
      *
      * @return the top level expression
      */
     protected DetailAST getToplevelAST()
     {
         return getMainAst();
     }
 
     /**
      * Check the indent of the top level token.
      */
     protected void checkToplevelToken()
     {
         final DetailAST toplevel = getToplevelAST();
 
         if (toplevel == null
             || getLevel().accept(expandedTabsColumnNo(toplevel)) || hasLabelBefore())
         {
             return;
         }
         if (!toplevelMustStartLine() && !startsLine(toplevel)) {
             return;
         }
         logError(toplevel, "", expandedTabsColumnNo(toplevel));
     }
 
     /**
      * Check if the top level token has label before.
      * @return true if the top level token has label before.
      */
     protected boolean hasLabelBefore()
