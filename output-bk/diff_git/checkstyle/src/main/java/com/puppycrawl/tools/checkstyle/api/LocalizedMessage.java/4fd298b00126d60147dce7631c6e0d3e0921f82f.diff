diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
index 25726aa53..85d6f8be0 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
@@ -205,101 +205,101 @@ public final class LocalizedMessage
     @Override
     public boolean equals(Object object) {
         if (this == object) {
             return true;
         }
         if (object == null || getClass() != object.getClass()) {
             return false;
         }
         final LocalizedMessage localizedMessage = (LocalizedMessage) object;
         return Objects.equals(lineNo, localizedMessage.lineNo)
                 && Objects.equals(colNo, localizedMessage.colNo)
                 && Objects.equals(severityLevel, localizedMessage.severityLevel)
                 && Objects.equals(moduleId, localizedMessage.moduleId)
                 && Objects.equals(key, localizedMessage.key)
                 && Objects.equals(bundle, localizedMessage.bundle)
                 && Objects.equals(sourceClass, localizedMessage.sourceClass)
                 && Objects.equals(customMessage, localizedMessage.customMessage)
                 && Arrays.equals(args, localizedMessage.args);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(lineNo, colNo, severityLevel, moduleId, key, bundle, sourceClass,
                 customMessage, Arrays.hashCode(args));
     }
 
     /** Clears the cache. */
     public static void clearCache() {
         synchronized (BUNDLE_CACHE) {
             BUNDLE_CACHE.clear();
         }
     }
 
     /** @return the translated message **/
     public String getMessage() {
 
         final String customMessage = getCustomMessage();
         if (customMessage != null) {
             return customMessage;
         }
 
         try {
             // Important to use the default class loader, and not the one in
             // the GlobalProperties object. This is because the class loader in
             // the GlobalProperties is specified by the user for resolving
             // custom classes.
             final ResourceBundle bundle = getBundle(this.bundle);
             final String pattern = bundle.getString(key);
             return MessageFormat.format(pattern, args);
         }
-        catch (final MissingResourceException ex) {
+        catch (final MissingResourceException ignored) {
             // If the Check author didn't provide i18n resource bundles
             // and logs error messages directly, this will return
             // the author's original message
             return MessageFormat.format(key, args);
         }
     }
 
     /**
      * Returns the formatted custom message if one is configured.
      * @return the formatted custom message or <code>null</code>
      *          if there is no custom message
      */
     private String getCustomMessage() {
 
         if (customMessage == null) {
             return null;
         }
 
         return MessageFormat.format(customMessage, args);
     }
 
     /**
      * Find a ResourceBundle for a given bundle name. Uses the classloader
      * of the class emitting this message, to be sure to get the correct
      * bundle.
      * @param bundleName the bundle name
      * @return a ResourceBundle
      */
     private ResourceBundle getBundle(String bundleName) {
         synchronized (BUNDLE_CACHE) {
             ResourceBundle bundle = BUNDLE_CACHE
                     .get(bundleName);
             if (bundle == null) {
                 bundle = ResourceBundle.getBundle(bundleName, sLocale,
                         sourceClass.getClassLoader(), new UTF8Control());
                 BUNDLE_CACHE.put(bundleName, bundle);
             }
             return bundle;
         }
     }
 
     /** @return the line number **/
     public int getLineNo() {
         return lineNo;
     }
 
     /** @return the column number **/
     public int getColumnNo() {
         return colNo;
     }
