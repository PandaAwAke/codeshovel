diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/Utils.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/Utils.java
index cfbf86648..f71e42096 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/Utils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/Utils.java
@@ -74,103 +74,102 @@ public final class Utils
      * Returns whether the specified string contains only whitespace up to the
      * specified index.
      *
      * @param aIndex index to check up to
      * @param aLine the line to check
      * @return whether there is only whitespace
      */
     public static boolean whitespaceBefore(int aIndex, String aLine)
     {
         for (int i = 0; i < aIndex; i++) {
             if (!Character.isWhitespace(aLine.charAt(i))) {
                 return false;
             }
         }
         return true;
     }
 
     /**
      * Returns the length of a string ignoring all trailing whitespace. It is a
      * pity that there is not a trim() like method that only removed the
      * trailing whitespace.
      * @param aLine the string to process
      * @return the length of the string ignoring all trailing whitespace
      **/
     public static int lengthMinusTrailingWhitespace(String aLine)
     {
         int len = aLine.length();
         for (int i = len - 1; i >= 0; i--) {
             if (!Character.isWhitespace(aLine.charAt(i))) {
                 break;
             }
             len--;
         }
         return len;
     }
 
     /**
      * Returns the length of a String prefix with tabs expanded.
      * Each tab is counted as the number of characters is takes to
      * jump to the next tab stop.
      * @param aString the input String
      * @param aToIdx index in aString (exclusive) where the calculation stops
      * @param aTabWidth the distance between tab stop position.
      * @return the length of aString.substring(0, aToIdx) with tabs expanded.
      */
     public static int lengthExpandedTabs(String aString,
                                          int aToIdx,
                                          int aTabWidth)
     {
         int len = 0;
-        final char[] chars = aString.toCharArray();
         for (int idx = 0; idx < aToIdx; idx++) {
-            if (chars[idx] == '\t') {
+            if (aString.charAt(idx) == '\t') {
                 len = (len / aTabWidth + 1) * aTabWidth;
             }
             else {
                 len++;
             }
         }
         return len;
     }
 
     /**
      * This is a factory method to return an Pattern object for the specified
      * regular expression. It calls {@link #getPattern(String, int)} with the
      * compile flags defaults to 0.
      * @return an Pattern object for the supplied pattern
      * @param aPattern the regular expression pattern
      * @throws PatternSyntaxException an invalid pattern was supplied
      **/
     public static Pattern getPattern(String aPattern)
         throws PatternSyntaxException
     {
         return getPattern(aPattern, 0);
     }
 
     /**
      * This is a factory method to return an Pattern object for the specified
      * regular expression and compile flags.
      * @return an Pattern object for the supplied pattern
      * @param aPattern the regular expression pattern
      * @param aCompileFlags the compilation flags
      * @throws PatternSyntaxException an invalid pattern was supplied
      **/
     public static Pattern getPattern(String aPattern, int aCompileFlags)
         throws PatternSyntaxException
     {
         final String key = aPattern + ":flags-" + aCompileFlags;
         Pattern retVal = CREATED_RES.get(key);
         if (retVal == null) {
             retVal = Pattern.compile(aPattern, aCompileFlags);
             CREATED_RES.putIfAbsent(key, retVal);
         }
         return retVal;
     }
 
     /**
      * Loads the contents of a file in a String array.
      * @return the lines in the file
      * @param aFileName the name of the file to load
      * @throws IOException error occurred
      * @deprecated consider using {@link FileText} instead
      **/
