diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
index 88a681127..62e372ab7 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
@@ -54,104 +54,103 @@ public final class Main {
 
     /**
      * Loops over the files specified checking them for errors. The exit code
      * is the number of errors found in all the files.
      * @param args the command line arguments
      * @throws UnsupportedEncodingException if there is a problem to use UTF-8
      * @throws CheckstyleException if there is a problem with parsing a property file
      * @throws FileNotFoundException if there is a problem with files access
      **/
     public static void main(String... args) throws UnsupportedEncodingException,
             CheckstyleException, FileNotFoundException {
         int errorCounter = 0;
         boolean cliViolations = false;
 
         try {
             //parse CLI arguments
             final CommandLine commandLine = parseCli(args);
 
             // show version and exit if it is requested
             if (commandLine.hasOption("v")) {
                 System.out.println("Checkstyle version: "
                         + Main.class.getPackage().getImplementationVersion());
             }
             else {
                 // return error is smth is wrong in arguments
                 final List<String> messages = validateCli(commandLine);
                 cliViolations = !messages.isEmpty();
                 if (messages.isEmpty()) {
 
                     // create config helper object
                     final CliOptions config = convertCliToPojo(commandLine);
                     // run Checker
                     errorCounter = runCheckstyle(config);
 
                 }
                 else {
                     errorCounter = 1;
                     for (String message : messages) {
                         System.out.println(message);
                     }
                 }
             }
         }
         catch (ParseException pex) {
             // smth wrong with arguments - print error and manual
             cliViolations = true;
             errorCounter = 1;
             System.out.println(pex.getMessage());
             printUsage();
         }
-        catch (Exception ex) {
-            // smth wrong during processing
+        catch (CheckstyleException e) {
             errorCounter = 1;
-            throw ex;
+            System.out.println(e.getMessage());
         }
         finally {
             // return exit code base on validation of Checker
             if (errorCounter != 0 && !cliViolations) {
                 System.out.println(String.format("Checkstyle ends with %d errors.", errorCounter));
             }
             // provide proper exit code based on results.
             System.exit(errorCounter);
         }
     }
 
     /**
      * Parses and executes Checkstyle based on passed arguments.
      * @param args
      *        command line parameters
      * @return parsed information about passed parameters
      * @throws ParseException
      *         when passed arguments are not valid
      */
     private static CommandLine parseCli(String... args)
             throws ParseException {
         // parse the parameters
         final CommandLineParser clp = new DefaultParser();
         // always returns not null value
         return clp.parse(buildOptions(), args);
     }
 
     /**
      * Do validation of Command line options
      * @param cmdLine command line object
      * @return list of violations
      */
     private static List<String> validateCli(CommandLine cmdLine) {
         final List<String> result = new ArrayList<>();
         // ensure a configuration file is specified
         if (!cmdLine.hasOption("c")) {
             result.add("Must specify a config XML file.");
         }
         else {
             // validate optional parameters
             if (cmdLine.hasOption("f")) {
                 final String format = cmdLine.getOptionValue("f");
                 if (!"plain".equals(format) && !"xml".equals(format)) {
                     result.add(String.format("Invalid output format."
                             + " Found '%s' but expected 'plain' or 'xml'.", format));
                 }
             }
             if (cmdLine.hasOption("p")) {
                 final String propertiesLocation = cmdLine.getOptionValue("p");
                 final File file = new File(propertiesLocation);
