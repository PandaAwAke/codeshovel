diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java
index 3bc4b830d..2b00c1451 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java
@@ -378,51 +378,93 @@ public final class CommonUtils {
             else {
                 // check to see if the file is in the classpath
                 try {
                     final URL configUrl = CommonUtils.class
                             .getResource(filename);
                     if (configUrl == null) {
                         throw new CheckstyleException(UNABLE_TO_FIND_EXCEPTION_PREFIX + filename);
                     }
                     uri = configUrl.toURI();
                 }
                 catch (final URISyntaxException ex) {
                     throw new CheckstyleException(UNABLE_TO_FIND_EXCEPTION_PREFIX + filename, ex);
                 }
             }
         }
 
         return uri;
     }
 
     /**
      * Puts part of line, which matches regexp into given template
      * on positions $n where 'n' is number of matched part in line.
      * @param template the string to expand.
      * @param lineToPlaceInTemplate contains expression which should be placed into string.
      * @param regexp expression to find in comment.
      * @return the string, based on template filled with given lines
      */
     public static String fillTemplateWithStringsByRegexp(
         String template, String lineToPlaceInTemplate, Pattern regexp) {
         final Matcher matcher = regexp.matcher(lineToPlaceInTemplate);
         String result = template;
         if (matcher.find()) {
             for (int i = 0; i <= matcher.groupCount(); i++) {
                 // $n expands comment match like in Pattern.subst().
                 result = result.replaceAll("\\$" + i, matcher.group(i));
             }
         }
         return result;
     }
 
     /**
      * Check if a string is blank.
      * A string is considered blank if it is null, empty or contains only  whitespace characters,
      * as determined by {@link CharMatcher#WHITESPACE}.
      * @param str the string to check
      * @return true if str is either null, empty or whitespace-only.
      */
     public static boolean isBlank(String str) {
         return str == null || CharMatcher.WHITESPACE.matchesAllOf(str);
     }
+
+    /**
+     * Returns file name without extension.
+     * We do not use the method from Guava library to reduce Checkstyle's dependencies
+     * on external libraries.
+     * @param fullFilename file name with extension.
+     * @return file name without extension.
+     */
+    public static String getFileNameWithoutExtension(String fullFilename) {
+        final String fileName = new File(fullFilename).getName();
+        final int dotIndex = fileName.lastIndexOf('.');
+        final String fileNameWithoutExtension;
+        if (dotIndex == -1) {
+            fileNameWithoutExtension = fileName;
+        }
+        else {
+            fileNameWithoutExtension = fileName.substring(0, dotIndex);
+        }
+        return fileNameWithoutExtension;
+    }
+
+    /**
+     * Returns file extension for the given file name
+     * or empty string if file does not have an extension.
+     * We do not use the method from Guava library to reduce Checkstyle's dependencies
+     * on external libraries.
+     * @param fileNameWithExtension file name with extension.
+     * @return file extension for the given file name
+     *         or empty string if file does not have an extension.
+     */
+    public static String getFileExtension(String fileNameWithExtension) {
+        final String fileName = Paths.get(fileNameWithExtension).toString();
+        final int dotIndex = fileName.lastIndexOf('.');
+        final String extension;
+        if (dotIndex == -1) {
+            extension = "";
+        }
+        else {
+            extension = fileName.substring(dotIndex + 1);
+        }
+        return extension;
+    }
 }
