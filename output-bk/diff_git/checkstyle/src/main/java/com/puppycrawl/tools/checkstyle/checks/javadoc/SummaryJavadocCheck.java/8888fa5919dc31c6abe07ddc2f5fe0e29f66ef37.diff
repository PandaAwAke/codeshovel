diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java
index c24145307..d05777c52 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java
@@ -48,104 +48,104 @@ import com.puppycrawl.tools.checkstyle.utils.JavadocUtils;
  * &lt;/module&gt;
  * </pre>
  * <p>
  * To specify period symbol at the end of first javadoc sentence - use following config:
  * </p>
  * <pre>
  * &lt;module name=&quot;SummaryJavadocCheck&quot;&gt;
  *     &lt;property name=&quot;period&quot;
  *     value=&quot;period&quot;/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  *
  * @author max
  * @author <a href="mailto:nesterenko-aleksey@list.ru">Aleksey Nesterenko</a>
  */
 public class SummaryJavadocCheck extends AbstractJavadocCheck {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_SUMMARY_FIRST_SENTENCE = "summary.first.sentence";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_SUMMARY_JAVADOC = "summary.javaDoc";
     /**
      * This regexp is used to convert multiline javadoc to single line without stars.
      */
     private static final Pattern JAVADOC_MULTILINE_TO_SINGLELINE_PATTERN =
             Pattern.compile("\n[ ]+(\\*)|^[ ]+(\\*)");
 
     /** Period literal. */
     private static final String PERIOD = ".";
 
     /**
      * Regular expression for forbidden summary fragments.
      */
     private Pattern forbiddenSummaryFragments = CommonUtils.createPattern("^$");
 
     /**
      * Period symbol at the end of first javadoc sentence.
      */
     private String period = PERIOD;
 
     /**
      * Sets custom value of regular expression for forbidden summary fragments.
-     * @param pattern user's value.
+     * @param pattern a pattern.
      */
-    public void setForbiddenSummaryFragments(String pattern) {
-        forbiddenSummaryFragments = CommonUtils.createPattern(pattern);
+    public void setForbiddenSummaryFragments(Pattern pattern) {
+        forbiddenSummaryFragments = pattern;
     }
 
     /**
      * Sets value of period symbol at the end of first javadoc sentence.
      * @param period period's value.
      */
     public void setPeriod(String period) {
         this.period = period;
     }
 
     @Override
     public int[] getDefaultJavadocTokens() {
         return new int[] {
             JavadocTokenTypes.JAVADOC,
         };
     }
 
     @Override
     public int[] getRequiredJavadocTokens() {
         return getAcceptableJavadocTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.BLOCK_COMMENT_BEGIN };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public void visitJavadocToken(DetailNode ast) {
         String firstSentence = getFirstSentence(ast);
         final int endOfSentence = firstSentence.lastIndexOf(period);
         if (endOfSentence == -1) {
             if (!firstSentence.trim().startsWith("{@inheritDoc}")) {
                 log(ast.getLineNumber(), MSG_SUMMARY_FIRST_SENTENCE);
             }
         }
         else {
             firstSentence = firstSentence.substring(0, endOfSentence);
             if (containsForbiddenFragment(firstSentence)) {
                 log(ast.getLineNumber(), MSG_SUMMARY_JAVADOC);
             }
         }
     }
 
     /**
