diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java
index afc169da3..bbfe45ca1 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java
@@ -1,173 +1,171 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2017 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks.whitespace;
 
 import java.util.Locale;
 
-import org.apache.commons.beanutils.ConversionException;
-
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 
 /**
  * <p>
  * Checks line wrapping for operators.
  * The policy to verify is specified using the {@link WrapOption} class
  * and defaults to {@link WrapOption#NL}.
  * </p>
  * <p> By default the check will check the following operators:
  *  {@link TokenTypes#BAND BAND},
  *  {@link TokenTypes#BOR BOR},
  *  {@link TokenTypes#BSR BSR},
  *  {@link TokenTypes#BXOR BXOR},
  *  {@link TokenTypes#COLON COLON},
  *  {@link TokenTypes#DIV DIV},
  *  {@link TokenTypes#EQUAL EQUAL},
  *  {@link TokenTypes#GE GE},
  *  {@link TokenTypes#GT GT},
  *  {@link TokenTypes#LAND LAND},
  *  {@link TokenTypes#LE LE},
  *  {@link TokenTypes#LITERAL_INSTANCEOF LITERAL_INSTANCEOF},
  *  {@link TokenTypes#LOR LOR},
  *  {@link TokenTypes#LT LT},
  *  {@link TokenTypes#MINUS MINUS},
  *  {@link TokenTypes#MOD MOD},
  *  {@link TokenTypes#NOT_EQUAL NOT_EQUAL},
  *  {@link TokenTypes#PLUS PLUS},
  *  {@link TokenTypes#QUESTION QUESTION},
  *  {@link TokenTypes#SL SL},
  *  {@link TokenTypes#SR SR},
  *  {@link TokenTypes#STAR STAR}.
  * Other acceptable tokens are
  *  {@link TokenTypes#ASSIGN ASSIGN},
  *  {@link TokenTypes#BAND_ASSIGN BAND_ASSIGN},
  *  {@link TokenTypes#BOR_ASSIGN BOR_ASSIGN},
  *  {@link TokenTypes#BSR_ASSIGN BSR_ASSIGN},
  *  {@link TokenTypes#BXOR_ASSIGN BXOR_ASSIGN},
  *  {@link TokenTypes#DIV_ASSIGN DIV_ASSIGN},
  *  {@link TokenTypes#MINUS_ASSIGN MINUS_ASSIGN},
  *  {@link TokenTypes#MOD_ASSIGN MOD_ASSIGN},
  *  {@link TokenTypes#PLUS_ASSIGN PLUS_ASSIGN},
  *  {@link TokenTypes#SL_ASSIGN SL_ASSIGN},
  *  {@link TokenTypes#SR_ASSIGN SR_ASSIGN},
  *  {@link TokenTypes#STAR_ASSIGN STAR_ASSIGN}.
  *  {@link TokenTypes#METHOD_REF METHOD_REF}.
  * </p>
  *  <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="OperatorWrap"/&gt;
  * </pre>
  * <p> An example of how to configure the check for assignment operators at the
  * end of a line is:
  * </p>
  * <pre>
  * &lt;module name="OperatorWrap"&gt;
  *     &lt;property name="tokens"
  *               value="ASSIGN,DIV_ASSIGN,PLUS_ASSIGN,MINUS_ASSIGN,STAR_ASSIGN,MOD_ASSIGN
  *               ,SR_ASSIGN,BSR_ASSIGN,SL_ASSIGN,BXOR_ASSIGN,BOR_ASSIGN,BAND_ASSIGN"/&gt;
  *     &lt;property name="option" value="eol"/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * @author Rick Giles
  */
 public class OperatorWrapCheck
     extends AbstractCheck {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_LINE_NEW = "line.new";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_LINE_PREVIOUS = "line.previous";
 
     /** The policy to enforce. */
     private WrapOption option = WrapOption.NL;
 
     /**
      * Set the option to enforce.
      * @param optionStr string to decode option from
-     * @throws ConversionException if unable to decode
+     * @throws IllegalArgumentException if unable to decode
      */
     public void setOption(String optionStr) {
         try {
             option = WrapOption.valueOf(optionStr.trim().toUpperCase(Locale.ENGLISH));
         }
         catch (IllegalArgumentException iae) {
-            throw new ConversionException("unable to parse " + optionStr, iae);
+            throw new IllegalArgumentException("unable to parse " + optionStr, iae);
         }
     }
 
     @Override
     public int[] getDefaultTokens() {
         return new int[] {
             TokenTypes.QUESTION,          // '?'
             TokenTypes.COLON,             // ':' (not reported for a case)
             TokenTypes.EQUAL,             // "=="
             TokenTypes.NOT_EQUAL,         // "!="
             TokenTypes.DIV,               // '/'
             TokenTypes.PLUS,              //' +' (unary plus is UNARY_PLUS)
             TokenTypes.MINUS,             // '-' (unary minus is UNARY_MINUS)
             TokenTypes.STAR,              // '*'
             TokenTypes.MOD,               // '%'
             TokenTypes.SR,                // ">>"
             TokenTypes.BSR,               // ">>>"
             TokenTypes.GE,                // ">="
             TokenTypes.GT,                // ">"
             TokenTypes.SL,                // "<<"
             TokenTypes.LE,                // "<="
             TokenTypes.LT,                // '<'
             TokenTypes.BXOR,              // '^'
             TokenTypes.BOR,               // '|'
             TokenTypes.LOR,               // "||"
             TokenTypes.BAND,              // '&'
             TokenTypes.LAND,              // "&&"
             TokenTypes.TYPE_EXTENSION_AND,
             TokenTypes.LITERAL_INSTANCEOF,
         };
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.QUESTION,          // '?'
             TokenTypes.COLON,             // ':' (not reported for a case)
             TokenTypes.EQUAL,             // "=="
             TokenTypes.NOT_EQUAL,         // "!="
             TokenTypes.DIV,               // '/'
             TokenTypes.PLUS,              //' +' (unary plus is UNARY_PLUS)
             TokenTypes.MINUS,             // '-' (unary minus is UNARY_MINUS)
             TokenTypes.STAR,              // '*'
             TokenTypes.MOD,               // '%'
             TokenTypes.SR,                // ">>"
             TokenTypes.BSR,               // ">>>"
             TokenTypes.GE,                // ">="
             TokenTypes.GT,                // ">"
             TokenTypes.SL,                // "<<"
             TokenTypes.LE,                // "<="
