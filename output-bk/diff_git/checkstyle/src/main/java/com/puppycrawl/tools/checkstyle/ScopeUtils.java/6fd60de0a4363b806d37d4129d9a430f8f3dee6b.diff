diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ScopeUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/ScopeUtils.java
index 3f4361c20..155825d70 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/ScopeUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ScopeUtils.java
@@ -221,57 +221,57 @@ public final class ScopeUtils {
                 || type == TokenTypes.INSTANCE_INIT
                 || type == TokenTypes.STATIC_INIT) {
                 retVal = true;
                 break;
             }
         }
 
         return retVal;
     }
 
     /**
      * Returns whether a node is contained in the outer most type block.
      *
      * @param aAST the node to check
      * @return a <code>boolean</code> value
      */
     public static boolean isOuterMostType(DetailAST aAST) {
         boolean retVal = true;
         for (DetailAST parent = aAST.getParent();
              parent != null;
              parent = parent.getParent()) {
             if (parent.getType() == TokenTypes.CLASS_DEF
                 || parent.getType() == TokenTypes.INTERFACE_DEF
                 || parent.getType() == TokenTypes.ANNOTATION_DEF
                 || parent.getType() == TokenTypes.ENUM_DEF) {
                 retVal = false;
                 break;
             }
         }
 
         return retVal;
     }
 
     /**
      * Determines whether a node is a local variable definition.
      * I.e. if it is declared in a code block, a for initializer,
      * or a catch parameter.
      * @param aAST the node to check.
      * @return whether aAST is a local variable definition.
      */
     public static boolean isLocalVariableDef(DetailAST aAST) {
         // variable declaration?
         if (aAST.getType() == TokenTypes.VARIABLE_DEF) {
             final DetailAST parent = aAST.getParent();
             final int type = parent.getType();
             return type == TokenTypes.SLIST
                     || type == TokenTypes.FOR_INIT
                     || type == TokenTypes.FOR_EACH_CLAUSE;
         }
         // catch parameter?
-        else if (aAST.getType() == TokenTypes.PARAMETER_DEF) {
+        if (aAST.getType() == TokenTypes.PARAMETER_DEF) {
             final DetailAST parent = aAST.getParent();
             return parent.getType() == TokenTypes.LITERAL_CATCH;
         }
         return false;
     }
 }
