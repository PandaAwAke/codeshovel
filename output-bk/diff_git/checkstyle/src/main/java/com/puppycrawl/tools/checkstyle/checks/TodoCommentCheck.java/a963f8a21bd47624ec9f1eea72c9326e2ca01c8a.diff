diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheck.java
index 9c6a84482..31ba9594a 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheck.java
@@ -12,101 +12,95 @@
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks;
 
 import java.util.regex.Pattern;
 
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * <p>
  * A check for 'TODO:' comments. To check for other patterns in Java comments, set
  * property format.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  *
  * <pre>
  * &lt;module name="TodoComment"/&gt;
  * </pre>
  * <p>
  * An example of how to configure the check for comments that contain
  * {@code TODO} or {@code FIXME}is:
  * </p>
  *
  * <pre>
  * &lt;module name="TodoComment"&gt;
  *    &lt;property name="format" value="(TODO)|(FIXME)"/&gt;
  * &lt;/module&gt;
  * </pre>
  * @author Oliver Burn
  * @author Baratali Izmailov
  */
 public class TodoCommentCheck
         extends AbstractCheck {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "todo.match";
 
-    /**
-     * Format of 'todo' comment.
-     */
-    private String format = "TODO:";
-
     /**
      * Regular expression pattern compiled from format.
      */
-    private Pattern regexp = Pattern.compile(format);
+    private Pattern format = Pattern.compile("TODO:");
 
     @Override
     public boolean isCommentNodesRequired() {
         return true;
     }
 
     /**
      * Setter for 'todo' comment pattern.
      * @param pattern
      *        pattern of 'todo' comment.
      */
     public void setFormat(Pattern pattern) {
-        format = pattern.pattern();
-        regexp = pattern;
+        format = pattern;
     }
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.COMMENT_CONTENT };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final String[] lines = ast.getText().split("\n");
 
         for (int i = 0; i < lines.length; i++) {
-            if (regexp.matcher(lines[i]).find()) {
-                log(ast.getLineNo() + i, MSG_KEY, format);
+            if (format.matcher(lines[i]).find()) {
+                log(ast.getLineNo() + i, MSG_KEY, format.pattern());
             }
         }
     }
 }
