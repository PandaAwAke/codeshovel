diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java
index f722799c6..a9eb92c8f 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java
@@ -203,102 +203,102 @@ public class EmptyLineSeparatorCheck extends Check
     }
 
     @Override
     public int[] getAcceptableTokens()
     {
         return new int[] {
             TokenTypes.PACKAGE_DEF,
             TokenTypes.IMPORT,
             TokenTypes.CLASS_DEF,
             TokenTypes.INTERFACE_DEF,
             TokenTypes.ENUM_DEF,
             TokenTypes.STATIC_INIT,
             TokenTypes.INSTANCE_INIT,
             TokenTypes.METHOD_DEF,
             TokenTypes.CTOR_DEF,
             TokenTypes.VARIABLE_DEF,
         };
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
         final DetailAST nextToken = ast.getNextSibling();
 
         if (nextToken != null) {
             final int astType = ast.getType();
             switch (astType) {
                 case TokenTypes.VARIABLE_DEF:
                     if (isTypeField(ast) && !hasEmptyLineAfter(ast)) {
                         if (allowNoEmptyLineBetweenFields
                             && nextToken.getType() != TokenTypes.VARIABLE_DEF
                             && nextToken.getType() != TokenTypes.RCURLY)
                         {
                             log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,
                                  nextToken.getText());
                         }
                         else if (!allowNoEmptyLineBetweenFields
                                  && nextToken.getType() != TokenTypes.RCURLY)
                         {
                             log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,
                                  nextToken.getText());
                         }
                     }
                     if (isTypeField(ast) && hasNotAllowedTwoEmptyLinesBefore(ast))
                     {
                         log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());
                     }
                     break;
                 case TokenTypes.IMPORT:
                     if (astType != nextToken.getType() && !hasEmptyLineAfter(ast)
-                        || (ast.getLineNo() > 1 && !hasEmptyLineBefore(ast)
-                            && ast.getPreviousSibling() == null))
+                        || ast.getLineNo() > 1 && !hasEmptyLineBefore(ast)
+                            && ast.getPreviousSibling() == null)
                     {
                         log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED, nextToken.getText());
                     }
                     if (hasNotAllowedTwoEmptyLinesBefore(ast)) {
                         log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());
                     }
                     break;
                 case TokenTypes.PACKAGE_DEF:
                     if (ast.getLineNo() > 1 && !hasEmptyLineBefore(ast)) {
                         log(ast.getLineNo(), MSG_SHOULD_BE_SEPARATED, ast.getText());
                     }
                     if (hasNotAllowedTwoEmptyLinesBefore(ast)) {
                         log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());
                     }
                 default:
                     if (nextToken.getType() != TokenTypes.RCURLY && !hasEmptyLineAfter(ast)) {
                         log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED, nextToken.getText());
                     }
                     if (hasNotAllowedTwoEmptyLinesBefore(ast)) {
                         log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());
                     }
             }
         }
     }
 
     /**
      * Checks if a token has empty two previous lines and multiple empty lines is not allowed
      * @param token DetailAST token
      * @return true, if token has empty two lines before and allowMultipleEmptyLines is false
      */
     private boolean hasNotAllowedTwoEmptyLinesBefore(DetailAST token)
     {
         return !allowMultipleEmptyLines && hasEmptyLineBefore(token)
                 && isPrePreviousLineEmpty(token);
     }
 
     /**
      * Checks if a token has empty pre-previous line.
      * @param token DetailAST token.
      * @return true, if token has empty lines before.
      */
     private boolean isPrePreviousLineEmpty(DetailAST token)
     {
         boolean result = false;
         final int lineNo = token.getLineNo();
         // 3 is the number of the pre-previous line because the numbering starts from zero.
         final int number = 3;
         if (lineNo >= number) {
             final String prePreviousLine = getLines()[lineNo - number];
             result = prePreviousLine.trim().isEmpty();
