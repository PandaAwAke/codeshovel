diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/CSVFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/CSVFilter.java
index 78bf806d0..84e74db75 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/CSVFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/CSVFilter.java
@@ -22,94 +22,94 @@ package com.puppycrawl.tools.checkstyle.filters;
 import java.util.Objects;
 import java.util.Set;
 import java.util.StringTokenizer;
 
 import com.google.common.collect.Sets;
 
 /**
  * <p>
  * This filter accepts an integer that matches a CSV value, where
  * each value is an integer or a range of integers.
  * </p>
  * @author Rick Giles
  * @author o_sukhodolsky
  */
 class CSVFilter implements IntFilter {
     /** filter set */
     private final Set<IntFilter> filters = Sets.newHashSet();
 
     /**
      * Constructs a <code>CSVFilter</code> from a CSV, Comma-Separated Values,
      * string. Each value is an integer, or a range of integers. A range of
      * integers is of the form integer-integer, such as 1-10.
      * Note: integers must be non-negative.
      * @param pattern the CSV string.
      * @throws NumberFormatException if a component substring does not
      * contain a parsable integer.
      */
     public CSVFilter(String pattern) {
         final StringTokenizer tokenizer = new StringTokenizer(pattern, ",");
         while (tokenizer.hasMoreTokens()) {
             final String token = tokenizer.nextToken().trim();
             final int index = token.indexOf('-');
             if (index == -1) {
                 final int matchValue = Integer.parseInt(token);
                 addFilter(new IntMatchFilter(matchValue));
             }
             else {
                 final int lowerBound =
                     Integer.parseInt(token.substring(0, index));
                 final int upperBound =
                     Integer.parseInt(token.substring(index + 1));
                 addFilter(new IntRangeFilter(lowerBound, upperBound));
             }
         }
     }
 
     /**
      * Adds a IntFilter to the set.
      * @param filter the IntFilter to add.
      */
-    public void addFilter(IntFilter filter) {
+    public final void addFilter(IntFilter filter) {
         filters.add(filter);
     }
 
     /**
      * Returns the IntFilters of the filter set.
      * @return the IntFilters of the filter set.
      */
     protected Set<IntFilter> getFilters() {
         return filters;
     }
 
     /**
      * Determines whether an Integer matches a CSV integer value.
      * @param intValue the Integer to check.
      * @return true if intValue is an Integer that matches a CSV value.
      */
     @Override
     public boolean accept(int intValue) {
         for (IntFilter filter : getFilters()) {
             if (filter.accept(intValue)) {
                 return true;
             }
         }
         return false;
     }
 
     @Override
     public boolean equals(Object object) {
         if (this == object) {
             return true;
         }
         if (object == null || getClass() != object.getClass()) {
             return false;
         }
         final CSVFilter csvFilter = (CSVFilter) object;
         return Objects.equals(filters, csvFilter.filters);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(filters);
     }
 }
