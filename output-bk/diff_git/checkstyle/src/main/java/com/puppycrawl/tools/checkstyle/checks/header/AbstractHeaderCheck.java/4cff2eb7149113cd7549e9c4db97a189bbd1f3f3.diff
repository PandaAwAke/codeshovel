diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java
index 8f57e76f9..a42dc0d50 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java
@@ -146,53 +146,62 @@ public abstract class AbstractHeaderCheck extends AbstractFileSetCheck
     public void setHeader(String header) {
         if (!CommonUtils.isBlank(header)) {
             checkHeaderNotInitialized();
 
             final String headerExpandedNewLines = ESCAPED_LINE_FEED_PATTERN
                     .matcher(header).replaceAll("\n");
 
             final Reader headerReader = new StringReader(headerExpandedNewLines);
             try {
                 loadHeader(headerReader);
             }
             catch (final IOException ex) {
                 throw new ConversionException("unable to load header", ex);
             }
             finally {
                 Closeables.closeQuietly(headerReader);
             }
         }
     }
 
     /**
      * Load header to check against from a Reader into readerLines.
      * @param headerReader delivers the header to check against
      * @throws IOException if
      */
     private void loadHeader(final Reader headerReader) throws IOException {
         readerLines.clear();
         final LineNumberReader lnr = new LineNumberReader(headerReader);
         while (true) {
             final String line = lnr.readLine();
             if (line == null) {
                 break;
             }
             readerLines.add(line);
         }
         postProcessHeaderLines();
     }
 
     @Override
     protected final void finishLocalSetup() throws CheckstyleException {
         if (headerFile != null) {
             loadHeaderFile();
         }
         if (readerLines.isEmpty()) {
             setHeader(null);
         }
     }
 
     @Override
     public Set<String> getExternalResourceLocations() {
-        return Collections.singleton(headerFile.toString());
+        final Set<String> result;
+
+        if (headerFile == null) {
+            result = Collections.emptySet();
+        }
+        else {
+            result = Collections.singleton(headerFile.toString());
+        }
+
+        return result;
     }
 }
