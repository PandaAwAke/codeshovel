diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java
index beb5b3d42..7ccf526e8 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java
@@ -152,101 +152,101 @@ public final class FileText {
             lineBreaks = null;
         }
         else {
             lineBreaks = fileText.lineBreaks.clone();
         }
     }
 
     /**
      * Compatibility constructor.
      *
      * <p>This constructor reconstructs the text of the file by joining
      * lines with linefeed characters. This process does not restore
      * the original line terminators and should therefore be avoided.
      *
      * @param file the name of the file
      * @param lines the lines of the text, without terminators
      * @throws NullPointerException if the lines array is null
      */
     public FileText(File file, List<String> lines) {
         final StringBuilder buf = new StringBuilder();
         for (final String line : lines) {
             buf.append(line).append('\n');
         }
         buf.trimToSize();
 
         this.file = file;
         charset = null;
         fullText = buf.toString();
         this.lines = lines.toArray(new String[lines.size()]);
     }
 
     /**
      * Reads file using specific decoder and returns all its content as a String.
      * @param inputFile File to read
      * @param decoder Charset decoder
      * @return File's text
      * @throws IOException Unable to open or read the file
      */
     private static String readFile(final File inputFile, final CharsetDecoder decoder)
             throws IOException {
         if (!inputFile.exists()) {
             throw new FileNotFoundException(inputFile.getPath() + " (No such file or directory)");
         }
         final StringBuilder buf = new StringBuilder();
         final FileInputStream stream = new FileInputStream(inputFile);
         final Reader reader = new InputStreamReader(stream, decoder);
         try {
             final char[] chars = new char[READ_BUFFER_SIZE];
             while (true) {
                 final int len = reader.read(chars);
-                if (len < 0) {
+                if (len == -1) {
                     break;
                 }
                 buf.append(chars, 0, len);
             }
         }
         finally {
             Closeables.closeQuietly(reader);
         }
         return buf.toString();
     }
 
     /**
      * Get the name of the file.
      * @return an object containing the name of the file
      */
     public File getFile() {
         return file;
     }
 
     /**
      * Get the character set which was used to read the file.
      * Will be {@code null} for a file reconstructed from its lines.
      * @return the charset used when the file was read
      */
     public Charset getCharset() {
         return charset;
     }
 
     /**
      * Retrieve the full text of the file.
      * @return the full text of the file
      */
     public CharSequence getFullText() {
         return fullText;
     }
 
     /**
      * Returns an array of all lines.
      * {@code text.toLinesArray()} is equivalent to
      * {@code text.toArray(new String[text.size()])}.
      * @return an array of all lines of the text
      */
     public String[] toLinesArray() {
         return lines.clone();
     }
 
     /**
      * Find positions of line breaks in the full text.
      * @return an array giving the first positions of each line.
      */
