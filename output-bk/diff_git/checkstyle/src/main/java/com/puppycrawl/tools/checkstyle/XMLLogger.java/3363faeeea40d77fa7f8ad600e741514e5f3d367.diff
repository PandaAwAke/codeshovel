diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java b/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java
index 86587bf6e..10037c524 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java
@@ -74,214 +74,210 @@ public class XMLLogger
 
     /**
      * Helper writer that allows easy encoding and printing.
      */
     private final PrintWriter writer;
 
     /**
      * Creates a new {@code XMLLogger} instance.
      * Sets the output to a defined stream.
      * @param outputStream the stream to write logs to.
      * @param closeStream close oS in auditFinished
      * @deprecated in order to fulfill demands of BooleanParameter IDEA check.
      * @noinspection BooleanParameter
      */
     @Deprecated
     public XMLLogger(OutputStream outputStream, boolean closeStream) {
         writer = new PrintWriter(new OutputStreamWriter(outputStream, StandardCharsets.UTF_8));
         this.closeStream = closeStream;
     }
 
     /**
      * Creates a new {@code XMLLogger} instance.
      * Sets the output to a defined stream.
      * @param outputStream the stream to write logs to.
      * @param outputStreamOptions if {@code CLOSE} stream should be closed in auditFinished()
      */
     public XMLLogger(OutputStream outputStream, OutputStreamOptions outputStreamOptions) {
         writer = new PrintWriter(new OutputStreamWriter(outputStream, StandardCharsets.UTF_8));
         closeStream = outputStreamOptions == OutputStreamOptions.CLOSE;
     }
 
     @Override
     protected void finishLocalSetup() throws CheckstyleException {
         // No code by default
     }
 
     @Override
     public void auditStarted(AuditEvent event) {
         writer.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
 
         final ResourceBundle compilationProperties =
             ResourceBundle.getBundle("checkstylecompilation", Locale.ROOT);
         final String version =
             compilationProperties.getString("checkstyle.compile.version");
 
         writer.println("<checkstyle version=\"" + version + "\">");
     }
 
     @Override
     public void auditFinished(AuditEvent event) {
-        fileMessages.forEach(this::writeFileMessages);
-
         writer.println("</checkstyle>");
         if (closeStream) {
             writer.close();
         }
         else {
             writer.flush();
         }
     }
 
     @Override
     public void fileStarted(AuditEvent event) {
         fileMessages.put(event.getFileName(), new FileMessages());
     }
 
     @Override
     public void fileFinished(AuditEvent event) {
         final String fileName = event.getFileName();
         final FileMessages messages = fileMessages.get(fileName);
 
         synchronized (writerLock) {
             writeFileMessages(fileName, messages);
         }
 
         fileMessages.remove(fileName);
     }
 
     /**
      * Prints the file section with all file errors and exceptions.
      * @param fileName The file name, as should be printed in the opening file tag.
      * @param messages The file messages.
      */
     private void writeFileMessages(String fileName, FileMessages messages) {
         writeFileOpeningTag(fileName);
         if (messages != null) {
             for (AuditEvent errorEvent : messages.getErrors()) {
                 writeFileError(errorEvent);
             }
             for (Throwable exception : messages.getExceptions()) {
                 writeException(exception);
             }
         }
         writeFileClosingTag();
     }
 
     /**
      * Prints the "file" opening tag with the given filename.
      * @param fileName The filename to output.
      */
     private void writeFileOpeningTag(String fileName) {
         writer.println("<file name=\"" + encode(fileName) + "\">");
     }
 
     /**
      * Prints the "file" closing tag.
      */
     private void writeFileClosingTag() {
         writer.println("</file>");
     }
 
     @Override
     public void addError(AuditEvent event) {
         if (event.getSeverityLevel() != SeverityLevel.IGNORE) {
             final String fileName = event.getFileName();
-            if (fileName == null) {
+            if (fileName == null || !fileMessages.containsKey(fileName)) {
                 synchronized (writerLock) {
                     writeFileError(event);
                 }
             }
             else {
-                final FileMessages messages = fileMessages.computeIfAbsent(
-                        fileName, name -> new FileMessages());
+                final FileMessages messages = fileMessages.get(fileName);
                 messages.addError(event);
             }
         }
     }
 
     /**
      * Outputs the given event to the writer.
      * @param event An event to print.
      */
     private void writeFileError(AuditEvent event) {
         writer.print("<error" + " line=\"" + event.getLine() + "\"");
         if (event.getColumn() > 0) {
             writer.print(" column=\"" + event.getColumn() + "\"");
         }
         writer.print(" severity=\""
                 + event.getSeverityLevel().getName()
                 + "\"");
         writer.print(" message=\""
                 + encode(event.getMessage())
                 + "\"");
         writer.print(" source=\"");
         if (event.getModuleId() == null) {
             writer.print(encode(event.getSourceName()));
         }
         else {
             writer.print(encode(event.getModuleId()));
         }
         writer.println("\"/>");
     }
 
     @Override
     public void addException(AuditEvent event, Throwable throwable) {
         final String fileName = event.getFileName();
-        if (fileName == null) {
+        if (fileName == null || !fileMessages.containsKey(fileName)) {
             synchronized (writerLock) {
                 writeException(throwable);
             }
         }
         else {
-            final FileMessages messages = fileMessages.computeIfAbsent(
-                    fileName, name -> new FileMessages());
+            final FileMessages messages = fileMessages.get(fileName);
             messages.addException(throwable);
         }
     }
 
     /**
      * Writes the exception event to the print writer.
      * @param throwable The
      */
     private void writeException(Throwable throwable) {
         final StringWriter stringWriter = new StringWriter();
         final PrintWriter printer = new PrintWriter(stringWriter);
         printer.println("<exception>");
         printer.println("<![CDATA[");
         throwable.printStackTrace(printer);
         printer.println("]]>");
         printer.println("</exception>");
         writer.println(encode(stringWriter.toString()));
     }
 
     /**
      * Escape &lt;, &gt; &amp; &#39; and &quot; as their entities.
      * @param value the value to escape.
      * @return the escaped value if necessary.
      */
     public static String encode(String value) {
         final StringBuilder sb = new StringBuilder(256);
         for (int i = 0; i < value.length(); i++) {
             final char chr = value.charAt(i);
             switch (chr) {
                 case '<':
                     sb.append("&lt;");
                     break;
                 case '>':
                     sb.append("&gt;");
                     break;
                 case '\'':
                     sb.append("&apos;");
                     break;
                 case '\"':
                     sb.append("&quot;");
                     break;
                 case '&':
                     sb.append("&amp;");
                     break;
                 case '\r':
                     break;
                 case '\n':
                     sb.append("&#10;");
                     break;
                 default:
