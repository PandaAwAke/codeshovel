diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/AbstractTreeTableModel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/AbstractTreeTableModel.java
index 0ba522641..e679fe64a 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/AbstractTreeTableModel.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/AbstractTreeTableModel.java
@@ -164,54 +164,54 @@ public abstract class AbstractTreeTableModel implements TreeTableModel {
                 if (e == null) {
                     e = new TreeModelEvent(source, path,
                             childIndices, children);
                 }
                 ((TreeModelListener) listeners[i + 1]).treeNodesRemoved(e);
             }
         }
     }
 
     /**
      * Notify all listeners that have registered interest for
      * 'tree structure changed' event.  The event instance
      * is lazily created using the parameters passed into
      * the fire method.
      * @see EventListenerList
      */
     void fireTreeStructureChanged(Object source, Object[] path,
             int[] childIndices,
             Object... children) {
         // Guaranteed to return a non-null array
         final Object[] listeners = listenerList.getListenerList();
         TreeModelEvent e = null;
         // Process the listeners last to first, notifying
         // those that are interested in this event
         for (int i = listeners.length - 2; i >= 0; i -= 2) {
             if (listeners[i] == TreeModelListener.class) {
                 // Lazily create the event:
                 if (e == null) {
                     e = new TreeModelEvent(source, path,
                             childIndices, children);
                 }
                 ((TreeModelListener) listeners[i + 1]).treeStructureChanged(e);
             }
         }
     }
 
     //
     // Default implementations for methods in the TreeTableModel interface.
     //
 
     @Override
     public Class<?> getColumnClass(int column) {
         return Object.class;
     }
 
     /** By default, make the column with the Tree in it the only editable one.
      *  Making this column editable causes the JTable to forward mouse
      *  and keyboard events in the Tree column to the underlying JTree.
      */
     @Override
-    public boolean isCellEditable(Object node, int column) {
+    public boolean isCellEditable(int column) {
         return getColumnClass(column) == TreeTableModel.class;
     }
 }
