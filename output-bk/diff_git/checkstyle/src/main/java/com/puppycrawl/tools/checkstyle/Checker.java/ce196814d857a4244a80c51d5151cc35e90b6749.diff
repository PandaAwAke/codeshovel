diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java b/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
index 8b9a330b3..ea54aacbe 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
@@ -255,158 +255,158 @@ public class Checker extends AutomaticBean implements MessageDispatcher {
             if (!CommonUtils.matchesFileExtension(file, fileExtensions)) {
                 continue;
             }
             final String fileName = file.getAbsolutePath();
             fireFileStarted(fileName);
             final SortedSet<LocalizedMessage> fileMessages = Sets.newTreeSet();
             try {
                 final FileText theText = new FileText(file.getAbsoluteFile(),
                         charset);
                 for (final FileSetCheck fsc : fileSetChecks) {
                     fileMessages.addAll(fsc.process(file, theText));
                 }
             }
             catch (final IOException ioe) {
                 LOG.debug("IOException occurred.", ioe);
                 fileMessages.add(new LocalizedMessage(0,
                         Definitions.CHECKSTYLE_BUNDLE, "general.exception",
                         new String[] {ioe.getMessage()}, null, getClass(),
                         null));
             }
             fireErrors(fileName, fileMessages);
             fireFileFinished(fileName);
         }
 
         // Finish up
         for (final FileSetCheck fsc : fileSetChecks) {
             // It may also log!!!
             fsc.finishProcessing();
         }
 
         for (final FileSetCheck fsc : fileSetChecks) {
             // It may also log!!!
             fsc.destroy();
         }
 
         final int errorCount = counter.getCount();
         fireAuditFinished();
         return errorCount;
     }
 
     /**
      * Sets base directory.
      * @param basedir the base directory to strip off in file names
      */
     public void setBasedir(String basedir) {
         this.basedir = basedir;
     }
 
     /** Notify all listeners about the audit start. */
     void fireAuditStarted() {
-        final AuditEvent evt = new AuditEvent(this);
+        final AuditEvent event = new AuditEvent(this);
         for (final AuditListener listener : listeners) {
-            listener.auditStarted(evt);
+            listener.auditStarted(event);
         }
     }
 
     /** Notify all listeners about the audit end. */
     void fireAuditFinished() {
-        final AuditEvent evt = new AuditEvent(this);
+        final AuditEvent event = new AuditEvent(this);
         for (final AuditListener listener : listeners) {
-            listener.auditFinished(evt);
+            listener.auditFinished(event);
         }
     }
 
     /**
      * Notify all listeners about the beginning of a file audit.
      *
      * @param fileName
      *            the file to be audited
      */
     @Override
     public void fireFileStarted(String fileName) {
         final String stripped = CommonUtils.relativizeAndNormalizePath(basedir, fileName);
-        final AuditEvent evt = new AuditEvent(this, stripped);
+        final AuditEvent event = new AuditEvent(this, stripped);
         for (final AuditListener listener : listeners) {
-            listener.fileStarted(evt);
+            listener.fileStarted(event);
         }
     }
 
     /**
      * Notify all listeners about the end of a file audit.
      *
      * @param fileName
      *            the audited file
      */
     @Override
     public void fireFileFinished(String fileName) {
         final String stripped = CommonUtils.relativizeAndNormalizePath(basedir, fileName);
-        final AuditEvent evt = new AuditEvent(this, stripped);
+        final AuditEvent event = new AuditEvent(this, stripped);
         for (final AuditListener listener : listeners) {
-            listener.fileFinished(evt);
+            listener.fileFinished(event);
         }
     }
 
     /**
      * Notify all listeners about the errors in a file.
      *
      * @param fileName the audited file
      * @param errors the audit errors from the file
      */
     @Override
     public void fireErrors(String fileName, SortedSet<LocalizedMessage> errors) {
         final String stripped = CommonUtils.relativizeAndNormalizePath(basedir, fileName);
         for (final LocalizedMessage element : errors) {
-            final AuditEvent evt = new AuditEvent(this, stripped, element);
-            if (filters.accept(evt)) {
+            final AuditEvent event = new AuditEvent(this, stripped, element);
+            if (filters.accept(event)) {
                 for (final AuditListener listener : listeners) {
-                    listener.addError(evt);
+                    listener.addError(event);
                 }
             }
         }
     }
 
     /**
      * Sets the file extensions that identify the files that pass the
      * filter of this FileSetCheck.
      * @param extensions the set of file extensions. A missing
      *     initial '.' character of an extension is automatically added.
      */
     public final void setFileExtensions(String... extensions) {
         if (extensions == null) {
             fileExtensions = null;
             return;
         }
 
         fileExtensions = new String[extensions.length];
         for (int i = 0; i < extensions.length; i++) {
             final String extension = extensions[i];
             if (CommonUtils.startsWithChar(extension, '.')) {
                 fileExtensions[i] = extension;
             }
             else {
                 fileExtensions[i] = "." + extension;
             }
         }
     }
 
     /**
      * Sets the factory for creating submodules.
      *
      * @param moduleFactory the factory for creating FileSetChecks
      */
     public void setModuleFactory(ModuleFactory moduleFactory) {
         this.moduleFactory = moduleFactory;
     }
 
     /**
      * Sets locale country.
      * @param localeCountry the country to report messages
      */
     public void setLocaleCountry(String localeCountry) {
         this.localeCountry = localeCountry;
     }
 
     /**
      * Sets locale language.
      * @param localeLanguage the language to report messages
      */
