diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
index 05979ad7c..49f5d6e50 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
@@ -123,100 +123,109 @@ public final class Main {
         }
         catch (ParseException pex) {
             // something wrong with arguments - print error and manual
             cliViolations = true;
             exitStatus = exitWithCliViolation;
             errorCounter = 1;
             System.out.println(pex.getMessage());
             printUsage();
         }
         catch (CheckstyleException e) {
             exitStatus = EXIT_WITH_CHECKSTYLE_EXCEPTION_CODE;
             errorCounter = 1;
             e.printStackTrace();
         }
         finally {
             // return exit code base on validation of Checker
             if (errorCounter != 0 && !cliViolations) {
                 System.out.println(String.format("Checkstyle ends with %d errors.", errorCounter));
             }
             if (exitStatus != 0) {
                 System.exit(exitStatus);
             }
         }
     }
 
     /**
      * Parses and executes Checkstyle based on passed arguments.
      * @param args
      *        command line parameters
      * @return parsed information about passed parameters
      * @throws ParseException
      *         when passed arguments are not valid
      */
     private static CommandLine parseCli(String... args)
             throws ParseException {
         // parse the parameters
         final CommandLineParser clp = new DefaultParser();
         // always returns not null value
         return clp.parse(buildOptions(), args);
     }
 
     /**
      * Do validation of Command line options.
      * @param cmdLine command line object
      * @return list of violations
      */
     private static List<String> validateCli(CommandLine cmdLine) {
         final List<String> result = new ArrayList<>();
         // ensure a configuration file is specified
         if (cmdLine.hasOption(OPTION_C_NAME)) {
+            final String configLocation = cmdLine.getOptionValue(OPTION_C_NAME);
+            try {
+                // test location only
+                CommonUtils.getUriByFilename(configLocation);
+            }
+            catch (CheckstyleException ignored) {
+                result.add(String.format("Could not find config XML file '%s'.", configLocation));
+            }
+
             // validate optional parameters
             if (cmdLine.hasOption(OPTION_F_NAME)) {
                 final String format = cmdLine.getOptionValue(OPTION_F_NAME);
                 if (!PLAIN_FORMAT_NAME.equals(format) && !XML_FORMAT_NAME.equals(format)) {
                     result.add(String.format("Invalid output format."
                             + " Found '%s' but expected '%s' or '%s'.",
                             format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));
                 }
             }
             if (cmdLine.hasOption(OPTION_P_NAME)) {
                 final String propertiesLocation = cmdLine.getOptionValue(OPTION_P_NAME);
                 final File file = new File(propertiesLocation);
                 if (!file.exists()) {
                     result.add(String.format("Could not find file '%s'.", propertiesLocation));
                 }
             }
             if (cmdLine.hasOption(OPTION_O_NAME)) {
                 final String outputLocation = cmdLine.getOptionValue(OPTION_O_NAME);
                 final File file = new File(outputLocation);
                 if (file.exists() && !file.canWrite()) {
                     result.add(String.format("Permission denied : '%s'.", outputLocation));
                 }
             }
             final List<File> files = getFilesToProcess(cmdLine.getArgs());
             if (files.isEmpty()) {
                 result.add("Must specify files to process, found 0.");
             }
         }
         else {
             result.add("Must specify a config XML file.");
         }
 
         return result;
     }
 
     /**
      * Util method to convert CommandLine type to POJO object.
      * @param cmdLine command line object
      * @return command line option as POJO object
      */
     private static CliOptions convertCliToPojo(CommandLine cmdLine) {
         final CliOptions conf = new CliOptions();
         conf.format = cmdLine.getOptionValue(OPTION_F_NAME);
         if (conf.format == null) {
             conf.format = PLAIN_FORMAT_NAME;
         }
         conf.outputLocation = cmdLine.getOptionValue(OPTION_O_NAME);
         conf.configLocation = cmdLine.getOptionValue(OPTION_C_NAME);
         conf.propertiesLocation = cmdLine.getOptionValue(OPTION_P_NAME);
         conf.files = getFilesToProcess(cmdLine.getArgs());
