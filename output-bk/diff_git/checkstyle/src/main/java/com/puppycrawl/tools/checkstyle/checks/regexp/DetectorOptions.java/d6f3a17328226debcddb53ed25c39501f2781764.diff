diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/DetectorOptions.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/DetectorOptions.java
index 94a702c89..2b73218a0 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/DetectorOptions.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/DetectorOptions.java
@@ -70,109 +70,108 @@ public final class DetectorOptions {
      */
     public String getFormat() {
         return format;
     }
 
     /**
      * The violation reporter to use.
      * @return the violation reporter to use.
      */
     public AbstractViolationReporter getReporter() {
         return reporter;
     }
 
     /**
      * The message to report errors with.
      * @return the message to report errors with.
      */
     public String getMessage() {
         return message;
     }
 
     /**
      * The minimum number of allowed detections.
      * @return the minimum number of allowed detections.
      */
     public int getMinimum() {
         return minimum;
     }
 
     /**
      * The maximum number of allowed detections.
      * @return the maximum number of allowed detections.
      */
     public int getMaximum() {
         return maximum;
     }
 
     /**
      * The suppressor to use.
      * @return the suppressor to use.
      */
     public MatchSuppressor getSuppressor() {
         return suppressor;
     }
 
     /**
      * The pattern to use when matching.
      * @return the pattern to use when matching.
      */
     public Pattern getPattern() {
-        if (pattern != null) {
-            return pattern;
-        }
-        int options = compileFlags;
+        if (pattern == null) {
+            int options = compileFlags;
 
-        if (ignoreCase) {
-            options |= Pattern.CASE_INSENSITIVE;
+            if (ignoreCase) {
+                options |= Pattern.CASE_INSENSITIVE;
+            }
+            pattern = Pattern.compile(format, options);
         }
-        pattern = Pattern.compile(format, options);
         return pattern;
     }
 
     /** Class which implements Builder pattern to build DetectorOptions instance. */
     public final class Builder {
 
         /**
          * Specifies the violation reporter and returns Builder object.
          * @param val for reporting violations.
          * @return Builder object.
          * @noinspection ReturnOfInnerClass
          */
         public Builder reporter(AbstractViolationReporter val) {
             reporter = val;
             return this;
         }
 
         /**
          * Specifies the compile flags to compile a regular expression with
          * and returns Builder object.
          * @param val the format to use when matching lines.
          * @return Builder object.
          * @noinspection ReturnOfInnerClass
          */
         public Builder compileFlags(int val) {
             compileFlags = val;
             return this;
         }
 
         /**
          * Specifies the format to use when matching lines and returns Builder object.
          * @param val the format to use when matching lines.
          * @return Builder object.
          * @noinspection ReturnOfInnerClass
          */
         public Builder format(String val) {
             format = val;
             return this;
         }
 
         /**
          * Specifies message to use when reporting a match and returns Builder object.
          * @param val message to use when reporting a match.
          * @return Builder object.
          * @noinspection ReturnOfInnerClass
          */
         public Builder message(String val) {
             message = val;
             return this;
         }
