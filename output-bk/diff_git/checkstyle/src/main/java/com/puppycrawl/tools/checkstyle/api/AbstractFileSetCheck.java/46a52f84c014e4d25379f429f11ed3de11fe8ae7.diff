diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
index af010b14d..24bd58703 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
@@ -26,101 +26,101 @@ import java.util.SortedSet;
 
 import org.apache.commons.lang3.ArrayUtils;
 
 import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 
 /**
  * Provides common functionality for many FileSetChecks.
  *
  * @author lkuehne
  * @author oliver
  */
 public abstract class AbstractFileSetCheck
     extends AbstractViolationReporter
     implements FileSetCheck {
     /** The dispatcher errors are fired to. */
     private MessageDispatcher messageDispatcher;
 
     /** The file extensions that are accepted by this filter */
     private String[] fileExtensions = ArrayUtils.EMPTY_STRING_ARRAY;
 
     /** Collects the error messages */
     private final LocalizedMessages messageCollector = new LocalizedMessages();
 
     /**
      * Called to process a file that matches the specified file extensions.
      * @param file the file to be processed
      * @param lines an immutable list of the contents of the file.
      */
     protected abstract void processFiltered(File file, List<String> lines);
 
     @Override
     public void init() {
         // No code by default, should be overridden only by demand at subclasses
     }
 
     @Override
     public void destroy() {
         // No code by default, should be overridden only by demand at subclasses
     }
 
     @Override
     public void beginProcessing(String charset) {
         // No code by default, should be overridden only by demand at subclasses
     }
 
     @Override
     public final SortedSet<LocalizedMessage> process(File file,
                                                    List<String> lines) {
         messageCollector.reset();
         // Process only what interested in
-        if (CommonUtils.fileExtensionMatches(file, fileExtensions)) {
+        if (CommonUtils.matchesFileExtension(file, fileExtensions)) {
             processFiltered(file, lines);
         }
         return messageCollector.getMessages();
     }
 
     @Override
     public void finishProcessing() {
         // No code by default, should be overridden only by demand at subclasses
     }
 
     @Override
     public final void setMessageDispatcher(MessageDispatcher messageDispatcher) {
         this.messageDispatcher = messageDispatcher;
     }
 
     /**
      * A message dispatcher is used to fire violation messages to
      * interested audit listeners.
      *
      * @return the current MessageDispatcher.
      */
     protected final MessageDispatcher getMessageDispatcher() {
         return messageDispatcher;
     }
 
     /**
      * @return file extensions that identify the files that pass the
      * filter of this FileSetCheck.
      */
     public String[] getFileExtensions() {
         return Arrays.copyOf(fileExtensions, fileExtensions.length);
     }
 
     /**
      * Sets the file extensions that identify the files that pass the
      * filter of this FileSetCheck.
      * @param extensions the set of file extensions. A missing
      *         initial '.' character of an extension is automatically added.
      * @throws IllegalArgumentException is arument is null
      */
     public final void setFileExtensions(String... extensions) {
         if (extensions == null) {
             throw new IllegalArgumentException("Extensions array can not be null");
         }
 
         fileExtensions = new String[extensions.length];
         for (int i = 0; i < extensions.length; i++) {
             final String extension = extensions[i];
             if (CommonUtils.startsWithChar(extension, '.')) {
                 fileExtensions[i] = extension;
