diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForIteratorPadCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForIteratorPadCheck.java
index 49494d2ca..d03bc1b9f 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForIteratorPadCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForIteratorPadCheck.java
@@ -40,84 +40,84 @@ for (Iterator foo = very.long.line.iterator();
  * The policy to verify is specified using the {@link PadOption} class and
  * defaults to {@link PadOption#NOSPACE}.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="EmptyForIteratorPad"/&gt;
  * </pre>
  *
  * @author Rick Giles
  */
 @StatelessCheck
 public class EmptyForIteratorPadCheck
     extends AbstractCheck {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_WS_FOLLOWED = "ws.followed";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_WS_NOT_FOLLOWED = "ws.notFollowed";
 
     /** Semicolon literal. */
     private static final String SEMICOLON = ";";
 
     /** The policy to enforce. */
     private PadOption option = PadOption.NOSPACE;
 
     /**
      * Set the option to enforce.
      * @param optionStr string to decode option from
      * @throws IllegalArgumentException if unable to decode
      */
     public void setOption(String optionStr) {
         try {
             option = PadOption.valueOf(optionStr.trim().toUpperCase(Locale.ENGLISH));
         }
         catch (IllegalArgumentException iae) {
             throw new IllegalArgumentException("unable to parse " + optionStr, iae);
         }
     }
 
     @Override
     public int[] getDefaultTokens() {
-        return getAcceptableTokens();
+        return getRequiredTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
-        return new int[] {TokenTypes.FOR_ITERATOR};
+        return getRequiredTokens();
     }
 
     @Override
     public int[] getRequiredTokens() {
-        return getAcceptableTokens();
+        return new int[] {TokenTypes.FOR_ITERATOR};
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         if (ast.getChildCount() == 0) {
             //empty for iterator. test pad after semi.
             final DetailAST semi = ast.getPreviousSibling();
             final String line = getLines()[semi.getLineNo() - 1];
             final int after = semi.getColumnNo() + 1;
             //don't check if at end of line
             if (after < line.length()) {
                 if (option == PadOption.NOSPACE
                     && Character.isWhitespace(line.charAt(after))) {
                     log(semi.getLineNo(), after, MSG_WS_FOLLOWED, SEMICOLON);
                 }
                 else if (option == PadOption.SPACE
                          && !Character.isWhitespace(line.charAt(after))) {
                     log(semi.getLineNo(), after, MSG_WS_NOT_FOLLOWED, SEMICOLON);
                 }
             }
         }
     }
 }
