diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
index 08c0d77e5..bdb846ac8 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
@@ -219,123 +219,123 @@ public final class DetailAST extends CommonASTWithHiddenTokens {
      * @param lineNo
      *        line number.
      */
     public void setLineNo(int lineNo) {
         this.lineNo = lineNo;
     }
 
     /** @return the column number **/
     public int getColumnNo() {
         int resultNo = -1;
 
         if (columnNo == NOT_INITIALIZED) {
             // an inner AST that has been initialized
             // with initialize(String text)
             resultNo = findColumnNo(getFirstChild());
 
             if (resultNo < 0) {
                 resultNo = findColumnNo(getNextSibling());
             }
         }
         if (resultNo < 0) {
             resultNo = columnNo;
         }
         return resultNo;
     }
 
     /**
      * Set column number.
      * @param columnNo
      *        column number.
      */
     public void setColumnNo(int columnNo) {
         this.columnNo = columnNo;
     }
 
     /** @return the last child node */
     public DetailAST getLastChild() {
         DetailAST ast = getFirstChild();
         while (ast != null && ast.getNextSibling() != null) {
             ast = ast.getNextSibling();
         }
         return ast;
     }
 
     /**
      * Finds column number in the first non-comment node.
      *
      * @param ast DetailAST node.
      * @return Column number if non-comment node exists, -1 otherwise.
      */
-    private int findColumnNo(DetailAST ast) {
+    private static int findColumnNo(DetailAST ast) {
         int resultNo = -1;
         DetailAST node = ast;
         while (node != null) {
             // comment node can't be start of any java statement/definition
             if (TokenUtils.isCommentType(node.getType())) {
                 node = node.getNextSibling();
             }
             else {
                 resultNo = node.getColumnNo();
                 break;
             }
         }
         return resultNo;
     }
 
     /**
      * Finds line number in the first non-comment node.
      *
      * @param ast DetailAST node.
      * @return Line number if non-comment node exists, -1 otherwise.
      */
-    private int findLineNo(DetailAST ast) {
+    private static int findLineNo(DetailAST ast) {
         int resultNo = -1;
         DetailAST node = ast;
         while (node != null) {
             // comment node can't be start of any java statement/definition
             if (TokenUtils.isCommentType(node.getType())) {
                 node = node.getNextSibling();
             }
             else {
                 resultNo = node.getLineNo();
                 break;
             }
         }
         return resultNo;
     }
 
     /**
      * @return the token types that occur in the branch as a sorted set.
      */
     private BitSet getBranchTokenTypes() {
         // lazy init
         if (branchTokenTypes == null) {
 
             branchTokenTypes = new BitSet();
             branchTokenTypes.set(getType());
 
             // add union of all childs
             DetailAST child = getFirstChild();
             while (child != null) {
                 final BitSet childTypes = child.getBranchTokenTypes();
                 branchTokenTypes.or(childTypes);
 
                 child = child.getNextSibling();
             }
         }
         return branchTokenTypes;
     }
 
     /**
      * Checks if this branch of the parse tree contains a token
      * of the provided type.
      * @param type a TokenType
      * @return true if and only if this branch (including this node)
      * contains a token of type {@code type}.
      */
     public boolean branchContains(int type) {
         return getBranchTokenTypes().get(type);
     }
 
     /**
      * Returns the number of direct child tokens that have the specified type.
