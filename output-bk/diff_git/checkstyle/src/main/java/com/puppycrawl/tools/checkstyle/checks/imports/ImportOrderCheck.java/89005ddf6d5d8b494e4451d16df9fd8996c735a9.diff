diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
index 1c44434a9..117aeba25 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
@@ -292,101 +292,101 @@ public class ImportOrderCheck
      * @param ident the import to process.
      * @param isStatic whether the token is static or not.
      * @param previous previous non-static but current is static (above), or
      *                  previous static but current is non-static (under).
      */
     private void doVisitToken(FullIdent ident, boolean isStatic,
             boolean previous)
     {
         if (ident != null) {
             final String name = ident.getText();
             final int groupIdx = getGroupNumber(name);
             final int line = ident.getLineNo();
 
             if (groupIdx > lastGroup) {
                 if (!beforeFirstImport && separated) {
                     // This check should be made more robust to handle
                     // comments and imports that span more than one line.
                     if ((line - lastImportLine) < 2) {
                         log(line, MSG_SEPARATION, name);
                     }
                 }
             }
             else if (groupIdx == lastGroup) {
                 doVisitTokenInSameGroup(isStatic, previous, name, line);
             }
             else {
                 log(line, MSG_ORDERING, name);
             }
 
             lastGroup = groupIdx;
             lastImport = name;
         }
     }
 
     /**
      * Shares processing...
      *
      * @param isStatic whether the token is static or not.
      * @param previous previous non-static but current is static (above), or
      *    previous static but current is non-static (under).
      * @param name the name of the current import.
      * @param line the line of the current import.
      */
     private void doVisitTokenInSameGroup(boolean isStatic,
             boolean previous, String name, int line)
     {
         if (!ordered) {
             return;
         }
 
-        if (getAbstractOption().equals(ImportOrderOption.INFLOW)) {
+        if (getAbstractOption() == ImportOrderOption.INFLOW) {
             // out of lexicographic order
             if (compare(lastImport, name, caseSensitive) > 0) {
                 log(line, MSG_ORDERING, name);
             }
         }
         else {
             final boolean shouldFireError =
                 // current and previous static or current and
                 // previous non-static
                 (!(lastImportStatic ^ isStatic)
                 &&
                 // and out of lexicographic order
                 (compare(lastImport, name, caseSensitive) > 0))
                 ||
                 // previous non-static but current is static (above)
                 // or
                 // previous static but current is non-static (under)
                 previous;
 
             if (shouldFireError) {
                 log(line, MSG_ORDERING, name);
             }
         }
     }
 
     /**
      * Finds out what group the specified import belongs to.
      *
      * @param name the import name to find.
      * @return group number for given import name.
      */
     private int getGroupNumber(String name)
     {
         int bestIndex = groups.length;
         int bestLength = -1;
         int bestPos = 0;
 
         // find out what group this belongs in
         // loop over groups and get index
         for (int i = 0; i < groups.length; i++) {
             final Matcher matcher = groups[i].matcher(name);
             while (matcher.find()) {
                 final int length = matcher.end() - matcher.start();
                 if ((length > bestLength)
                     || ((length == bestLength) && (matcher.start() < bestPos)))
                 {
                     bestIndex = i;
                     bestLength = length;
                     bestPos = matcher.start();
                 }
