diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java
index 6c8432de8..edcb09d34 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java
@@ -88,103 +88,103 @@ public final class FileContents implements CommentListener {
     public FileContents(FileText text) {
         fileName = text.getFile().toString();
         this.text = new FileText(text);
     }
 
     /** {@inheritDoc} */
     @Override
     public void reportSingleLineComment(String type, int startLineNo,
             int startColNo) {
         reportCppComment(startLineNo, startColNo);
     }
 
     /** {@inheritDoc} */
     @Override
     public void reportBlockComment(String type, int startLineNo,
             int startColNo, int endLineNo, int endColNo) {
         reportCComment(startLineNo, startColNo, endLineNo, endColNo);
     }
 
     /**
      * Report the location of a C++ style comment.
      * @param startLineNo the starting line number
      * @param startColNo the starting column number
      **/
     public void reportCppComment(int startLineNo, int startColNo) {
         final String line = line(startLineNo - 1);
         final String[] txt = {line.substring(startColNo)};
         final Comment comment = new Comment(txt, startColNo, startLineNo,
                 line.length() - 1);
         cppComments.put(startLineNo, comment);
     }
 
     /**
      * Returns a map of all the C++ style comments. The key is a line number,
      * the value is the comment {@link TextBlock} at the line.
      * @return the Map of comments
      */
     public ImmutableMap<Integer, TextBlock> getCppComments() {
         return ImmutableMap.copyOf(cppComments);
     }
 
     /**
      * Report the location of a C-style comment.
      * @param startLineNo the starting line number
      * @param startColNo the starting column number
      * @param endLineNo the ending line number
      * @param endColNo the ending column number
      **/
     public void reportCComment(int startLineNo, int startColNo,
             int endLineNo, int endColNo) {
-        final String[] cc = extractCComment(startLineNo, startColNo,
+        final String[] cComment = extractCComment(startLineNo, startColNo,
                 endLineNo, endColNo);
-        final Comment comment = new Comment(cc, startColNo, endLineNo,
+        final Comment comment = new Comment(cComment, startColNo, endLineNo,
                 endColNo);
 
         // save the comment
         if (clangComments.containsKey(startLineNo)) {
             final List<TextBlock> entries = clangComments.get(startLineNo);
             entries.add(comment);
         }
         else {
             final List<TextBlock> entries = Lists.newArrayList();
             entries.add(comment);
             clangComments.put(startLineNo, entries);
         }
 
         // Remember if possible Javadoc comment
         if (line(startLineNo - 1).indexOf("/**", startColNo) != -1) {
             javadocComments.put(endLineNo - 1, comment);
         }
     }
 
     /**
      * Returns a map of all C style comments. The key is the line number, the
      * value is a {@link List} of C style comment {@link TextBlock}s
      * that start at that line.
      * @return the map of comments
      */
     public ImmutableMap<Integer, List<TextBlock>> getCComments() {
         return ImmutableMap.copyOf(clangComments);
     }
 
     /**
      * Returns the specified C comment as a String array.
      * @param startLineNo the starting line number
      * @param startColNo the starting column number
      * @param endLineNo the ending line number
      * @param endColNo the ending column number
      * @return C comment as a array
      **/
     private String[] extractCComment(int startLineNo, int startColNo,
             int endLineNo, int endColNo) {
         String[] retVal;
         if (startLineNo == endLineNo) {
             retVal = new String[1];
             retVal[0] = line(startLineNo - 1).substring(startColNo,
                     endColNo + 1);
         }
         else {
             retVal = new String[endLineNo - startLineNo + 1];
             retVal[0] = line(startLineNo - 1).substring(startColNo);
             for (int i = startLineNo; i < endLineNo; i++) {
                 retVal[i - startLineNo + 1] = line(i);
