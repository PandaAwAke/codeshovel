diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java
index 4cef4cb3e..85412423a 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java
@@ -257,56 +257,56 @@ public abstract class AbstractClassCouplingCheck extends Check
         /**
          * Visits NEW.
          * @param ast NEW to process.
          */
         public void visitLiteralNew(DetailAST ast)
         {
             context.addReferencedClassName(ast.getFirstChild());
         }
 
         /**
          * Adds new referenced class.
          * @param ast a node which represents referenced class.
          */
         private void addReferencedClassName(DetailAST ast)
         {
             final String className = FullIdent.createFullIdent(ast).getText();
             addReferencedClassName(className);
         }
 
         /**
          * Adds new referenced class.
          * @param className class name of the referenced class.
          */
         private void addReferencedClassName(String className)
         {
             if (isSignificant(className)) {
                 referencedClassNames.add(className);
             }
         }
 
         /** Checks if coupling less than allowed or not. */
         public void checkCoupling()
         {
             referencedClassNames.remove(className);
             referencedClassNames.remove(packageName + "." + className);
 
             if (referencedClassNames.size() > max) {
                 log(lineNo, columnNo, getLogMessageId(),
                         referencedClassNames.size(), getMax(),
                         referencedClassNames.toString());
             }
         }
 
         /**
          * Checks if given class shouldn't be ignored and not from java.lang.
          * @param className class to check.
          * @return true if we should count this class.
          */
         private boolean isSignificant(String className)
         {
-            return (className.length() > 0)
+            return className.length() > 0
                     && !excludedClasses.contains(className)
                     && !className.startsWith("java.lang.");
         }
     }
 }
