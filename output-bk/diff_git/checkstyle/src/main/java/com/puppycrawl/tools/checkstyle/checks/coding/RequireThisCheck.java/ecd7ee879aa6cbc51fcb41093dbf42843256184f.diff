diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java
index caef1a90f..7b1488924 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java
@@ -101,100 +101,100 @@ public class RequireThisCheck extends DeclarationCollector
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.CLASS_DEF,
             TokenTypes.CTOR_DEF,
             TokenTypes.ENUM_DEF,
             TokenTypes.IDENT,
             TokenTypes.INTERFACE_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.PARAMETER_DEF,
             TokenTypes.SLIST,
             TokenTypes.VARIABLE_DEF,
         };
     }
 
     @Override
     public int[] getRequiredTokens()
     {
         return getDefaultTokens();
     }
 
     @Override
     public void visitToken(DetailAST aAST)
     {
         super.visitToken(aAST);
         if (aAST.getType() == TokenTypes.IDENT) {
             processIDENT(aAST);
         }
     } // end visitToken
 
     /**
      * Checks if a given IDENT is method call or field name which
      * require explicit <code>this</code> qualifier.
      *
      * @param aAST IDENT to check.
      */
     private void processIDENT(DetailAST aAST)
     {
         final int parentType = aAST.getParent().getType();
 
         if (parentType == TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR
             || parentType == TokenTypes.ANNOTATION
             || parentType == TokenTypes.ANNOTATION_FIELD_DEF)
         {
             //cannot refer to 'this' from annotations
             return;
         }
 
         // let's check method calls
         if (parentType == TokenTypes.METHOD_CALL) {
-            if (mCheckMethods && isClassField(aAST.getText())) {
+            if (mCheckMethods && isClassMethod(aAST.getText())) {
                 log(aAST, "require.this.method", aAST.getText());
             }
             return;
         }
 
         // let's check fields
         if (!mCheckFields) {
             // we shouldn't check fields
             return;
         }
 
         if (ScopeUtils.getSurroundingScope(aAST) == null) {
             // it is not a class or interface it's
             // either import or package
             // we shouldn't checks this
             return;
         }
 
         if ((parentType == TokenTypes.DOT)
             && (aAST.getPreviousSibling() != null))
         {
             // it's the method name in a method call; no problem
             return;
         }
         if ((parentType == TokenTypes.TYPE)
             || (parentType == TokenTypes.LITERAL_NEW))
         {
             // it's a type name; no problem
             return;
         }
         if ((parentType == TokenTypes.VARIABLE_DEF)
             || (parentType == TokenTypes.CTOR_DEF)
             || (parentType == TokenTypes.METHOD_DEF)
             || (parentType == TokenTypes.CLASS_DEF)
             || (parentType == TokenTypes.ENUM_DEF)
             || (parentType == TokenTypes.INTERFACE_DEF)
             || (parentType == TokenTypes.PARAMETER_DEF)
             || (parentType == TokenTypes.TYPE_ARGUMENT))
         {
             // it's being declared; no problem
             return;
         }
 
         final String name = aAST.getText();
         if (isClassField(name)) {
             log(aAST, "require.this.variable", name);
         }
     }
 } // end class RequireThis
