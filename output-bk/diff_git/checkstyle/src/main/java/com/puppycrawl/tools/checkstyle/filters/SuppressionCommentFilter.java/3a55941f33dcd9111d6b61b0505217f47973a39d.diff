diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java
index c98a27158..fcb504911 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java
@@ -120,104 +120,104 @@ public class SuppressionCommentFilter
      * Set the format for a comment that turns off reporting.
      * @param format a {@code String} value.
      * @throws ConversionException if unable to create Pattern object.
      */
     public final void setOffCommentFormat(String format) {
         offRegexp = CommonUtils.createPattern(format);
     }
 
     /**
      * Set the format for a comment that turns on reporting.
      * @param format a {@code String} value
      * @throws ConversionException if unable to create Pattern object.
      */
     public final void setOnCommentFormat(String format) {
         onRegexp = CommonUtils.createPattern(format);
     }
 
     /**
      * @return the FileContents for this filter.
      */
     public FileContents getFileContents() {
         return fileContentsReference.get();
     }
 
     /**
      * Set the FileContents for this filter.
      * @param fileContents the FileContents for this filter.
      */
     public void setFileContents(FileContents fileContents) {
         fileContentsReference = new WeakReference<>(fileContents);
     }
 
     /**
      * Set the format for a check.
      * @param format a {@code String} value
      */
     public final void setCheckFormat(String format) {
         checkFormat = format;
     }
 
     /**
      * Set the format for a message.
      * @param format a {@code String} value
      */
     public void setMessageFormat(String format) {
         messageFormat = format;
     }
 
     /**
      * Set whether to look in C++ comments.
-     * @param checkCPP {@code true} if C++ comments are checked.
+     * @param checkCpp {@code true} if C++ comments are checked.
      */
-    public void setCheckCPP(boolean checkCPP) {
-        this.checkCPP = checkCPP;
+    public void setCheckCPP(boolean checkCpp) {
+        this.checkCPP = checkCpp;
     }
 
     /**
      * Set whether to look in C comments.
      * @param checkC {@code true} if C comments are checked.
      */
     public void setCheckC(boolean checkC) {
         this.checkC = checkC;
     }
 
     @Override
     public boolean accept(AuditEvent event) {
         boolean accepted = true;
 
         if (event.getLocalizedMessage() != null) {
             // Lazy update. If the first event for the current file, update file
             // contents and tag suppressions
             final FileContents currentContents = FileContentsHolder.getContents();
 
             if (currentContents != null) {
                 if (getFileContents() != currentContents) {
                     setFileContents(currentContents);
                     tagSuppressions();
                 }
                 final Tag matchTag = findNearestMatch(event);
                 accepted = matchTag == null || matchTag.isReportingOn();
             }
         }
         return accepted;
     }
 
     /**
      * Finds the nearest comment text tag that matches an audit event.
      * The nearest tag is before the line and column of the event.
      * @param event the {@code AuditEvent} to match.
      * @return The {@code Tag} nearest event.
      */
     private Tag findNearestMatch(AuditEvent event) {
         Tag result = null;
         for (Tag tag : tags) {
             if (tag.getLine() > event.getLine()
                 || tag.getLine() == event.getLine()
                     && tag.getColumn() > event.getColumn()) {
                 break;
             }
             if (tag.isMatch(event)) {
                 result = tag;
             }
         }
         return result;
