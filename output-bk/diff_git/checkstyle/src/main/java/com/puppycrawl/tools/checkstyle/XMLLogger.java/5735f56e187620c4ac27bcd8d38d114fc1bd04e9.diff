diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java b/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java
index 5f58acff4..1e8d4c3d5 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java
@@ -78,101 +78,100 @@ public class XMLLogger
 
     /**
      * Creates a new {@code XMLLogger} instance.
      * Sets the output to a defined stream.
      * @param outputStream the stream to write logs to.
      * @param closeStream close oS in auditFinished
      * @deprecated in order to fullfil demands of BooleanParameter IDEA check.
      * @noinspection BooleanParameter
      */
     @Deprecated
     public XMLLogger(OutputStream outputStream, boolean closeStream) {
         setOutputStream(outputStream);
         this.closeStream = closeStream;
     }
 
     /**
      * Creates a new {@code XMLLogger} instance.
      * Sets the output to a defined stream.
      * @param outputStream the stream to write logs to.
      * @param outputStreamOptions if {@code CLOSE} stream should be closed in auditFinished()
      */
     public XMLLogger(OutputStream outputStream, OutputStreamOptions outputStreamOptions) {
         setOutputStream(outputStream);
         closeStream = outputStreamOptions == OutputStreamOptions.CLOSE;
     }
 
     /**
      * Sets the OutputStream.
      * @param outputStream the OutputStream to use
      **/
     private void setOutputStream(OutputStream outputStream) {
         final OutputStreamWriter osw = new OutputStreamWriter(outputStream, StandardCharsets.UTF_8);
         writer = new PrintWriter(osw);
     }
 
     @Override
     public void auditStarted(AuditEvent event) {
         writer.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
 
         final ResourceBundle compilationProperties =
             ResourceBundle.getBundle("checkstylecompilation", Locale.ROOT);
         final String version =
             compilationProperties.getString("checkstyle.compile.version");
 
         writer.println("<checkstyle version=\"" + version + "\">");
     }
 
     @Override
     public void auditFinished(AuditEvent event) {
         fileMessages.forEach(this::writeFileMessages);
-        fileMessages.clear();
 
         writer.println("</checkstyle>");
         if (closeStream) {
             writer.close();
         }
         else {
             writer.flush();
         }
     }
 
     @Override
     public void fileStarted(AuditEvent event) {
         fileMessages.put(event.getFileName(), new FileMessages());
     }
 
     @Override
     public void fileFinished(AuditEvent event) {
         final String fileName = event.getFileName();
         final FileMessages messages = fileMessages.get(fileName);
 
         synchronized (writerLock) {
             writeFileMessages(fileName, messages);
         }
 
         fileMessages.remove(fileName);
     }
 
     /**
      * Prints the file section with all file errors and exceptions.
      * @param fileName The file name, as should be printed in the opening file tag.
      * @param messages The file messages.
      */
     private void writeFileMessages(String fileName, FileMessages messages) {
         writeFileOpeningTag(fileName);
         if (messages != null) {
             for (AuditEvent errorEvent : messages.getErrors()) {
                 writeFileError(errorEvent);
             }
             for (Throwable exception : messages.getExceptions()) {
                 writeException(exception);
             }
         }
         writeFileClosingTag();
     }
 
     /**
      * Prints the "file" opening tag with the given filename.
      * @param fileName The filename to output.
      */
     private void writeFileOpeningTag(String fileName) {
