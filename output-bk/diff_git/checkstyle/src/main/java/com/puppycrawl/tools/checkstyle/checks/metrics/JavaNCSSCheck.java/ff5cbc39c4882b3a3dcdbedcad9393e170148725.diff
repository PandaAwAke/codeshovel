diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java
index b5031bd9f..db09752f8 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java
@@ -119,101 +119,101 @@ public class JavaNCSSCheck extends Check
             TokenTypes.LITERAL_RETURN,
             TokenTypes.LITERAL_THROW,
             TokenTypes.LITERAL_SYNCHRONIZED,
             TokenTypes.LITERAL_CATCH,
             TokenTypes.LITERAL_FINALLY,
             TokenTypes.EXPR,
             TokenTypes.LABELED_STAT,
             TokenTypes.LITERAL_CASE,
             TokenTypes.LITERAL_DEFAULT,
         };
     }
 
     @Override
     public int[] getAcceptableTokens()
     {
         return new int[]{
             TokenTypes.CLASS_DEF,
             TokenTypes.INTERFACE_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.CTOR_DEF,
             TokenTypes.INSTANCE_INIT,
             TokenTypes.STATIC_INIT,
             TokenTypes.PACKAGE_DEF,
             TokenTypes.IMPORT,
             TokenTypes.VARIABLE_DEF,
             TokenTypes.CTOR_CALL,
             TokenTypes.SUPER_CTOR_CALL,
             TokenTypes.LITERAL_IF,
             TokenTypes.LITERAL_ELSE,
             TokenTypes.LITERAL_WHILE,
             TokenTypes.LITERAL_DO,
             TokenTypes.LITERAL_FOR,
             TokenTypes.LITERAL_SWITCH,
             TokenTypes.LITERAL_BREAK,
             TokenTypes.LITERAL_CONTINUE,
             TokenTypes.LITERAL_RETURN,
             TokenTypes.LITERAL_THROW,
             TokenTypes.LITERAL_SYNCHRONIZED,
             TokenTypes.LITERAL_CATCH,
             TokenTypes.LITERAL_FINALLY,
             TokenTypes.EXPR,
             TokenTypes.LABELED_STAT,
             TokenTypes.LITERAL_CASE,
             TokenTypes.LITERAL_DEFAULT,
         };
     }
 
     @Override
     public void beginTree(DetailAST rootAST)
     {
-        counters = new FastStack<Counter>();
+        counters = new FastStack<>();
 
         //add a counter for the file
         counters.push(new Counter());
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
         final int tokenType = ast.getType();
 
         if ((TokenTypes.CLASS_DEF == tokenType)
             || (TokenTypes.METHOD_DEF == tokenType)
             || (TokenTypes.CTOR_DEF == tokenType)
             || (TokenTypes.STATIC_INIT == tokenType)
             || (TokenTypes.INSTANCE_INIT == tokenType))
         {
             //add a counter for this class/method
             counters.push(new Counter());
         }
 
         //check if token is countable
         if (isCountable(ast)) {
             //increment the stacked counters
             for (final Counter c : counters) {
                 c.increment();
             }
         }
     }
 
     @Override
     public void leaveToken(DetailAST ast)
     {
         final int tokenType = ast.getType();
         if ((TokenTypes.METHOD_DEF == tokenType)
             || (TokenTypes.CTOR_DEF == tokenType)
             || (TokenTypes.STATIC_INIT == tokenType)
             || (TokenTypes.INSTANCE_INIT == tokenType))
         {
             //pop counter from the stack
             final Counter counter = counters.pop();
 
             final int count = counter.getCount();
             if (count > methodMax) {
                 log(ast.getLineNo(), ast.getColumnNo(), "ncss.method",
                         count, methodMax);
             }
         }
         else if (TokenTypes.CLASS_DEF == tokenType) {
             //pop counter from the stack
             final Counter counter = counters.pop();
