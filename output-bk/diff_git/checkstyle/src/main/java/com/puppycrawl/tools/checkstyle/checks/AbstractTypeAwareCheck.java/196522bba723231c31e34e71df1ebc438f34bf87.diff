diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
index 9a7339d74..6af8b777f 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
@@ -123,113 +123,100 @@ public abstract class AbstractTypeAwareCheck extends Check {
         // add java.lang.* since it's always imported
         imports.add("java.lang.*");
         classResolver = null;
         currentClass = "";
         typeParams.clear();
     }
 
     @Override
     public final void visitToken(DetailAST ast) {
         if (ast.getType() == TokenTypes.PACKAGE_DEF) {
             processPackage(ast);
         }
         else if (ast.getType() == TokenTypes.IMPORT) {
             processImport(ast);
         }
         else if (ast.getType() == TokenTypes.CLASS_DEF
                  || ast.getType() == TokenTypes.INTERFACE_DEF
                  || ast.getType() == TokenTypes.ENUM_DEF) {
             processClass(ast);
         }
         else {
             if (ast.getType() == TokenTypes.METHOD_DEF) {
                 processTypeParams(ast);
             }
             processAST(ast);
         }
     }
 
     @Override
     public final void leaveToken(DetailAST ast) {
         if (ast.getType() == TokenTypes.CLASS_DEF
             || ast.getType() == TokenTypes.ENUM_DEF) {
             // perhaps it was inner class
             int dotIdx = currentClass.lastIndexOf('$');
             if (dotIdx == -1) {
                 // perhaps just a class
                 dotIdx = currentClass.lastIndexOf('.');
             }
             if (dotIdx == -1) {
                 // looks like a topmost class
                 currentClass = "";
             }
             else {
                 currentClass = currentClass.substring(0, dotIdx);
             }
             typeParams.pop();
         }
         else if (ast.getType() == TokenTypes.METHOD_DEF) {
             typeParams.pop();
         }
-        else if (ast.getType() != TokenTypes.PACKAGE_DEF
-                 && ast.getType() != TokenTypes.IMPORT) {
-            leaveAST(ast);
-        }
-    }
-
-    /**
-     * Called when exiting an AST. A no-op by default, extending classes
-     * may choose to override this to augment their processing.
-     * @param ast the AST we are departing. Guaranteed to not be PACKAGE_DEF,
-     *             CLASS_DEF, or IMPORT
-     */
-    protected void leaveAST(DetailAST ast) {
     }
 
     /**
      * Is exception is unchecked (subclass of <code>RuntimeException</code>
      * or <code>Error</code>
      *
      * @param exception <code>Class</code> of exception to check
      * @return true  if exception is unchecked
      *         false if exception is checked
      */
     protected boolean isUnchecked(Class<?> exception) {
         return isSubclass(exception, RuntimeException.class)
             || isSubclass(exception, Error.class);
     }
 
     /**
      * Checks if one class is subclass of another
      *
      * @param child <code>Class</code> of class
      *               which should be child
      * @param parent <code>Class</code> of class
      *                which should be parent
      * @return true  if aChild is subclass of aParent
      *         false otherwise
      */
     protected boolean isSubclass(Class<?> child, Class<?> parent) {
         return parent != null && child != null
             &&  parent.isAssignableFrom(child);
     }
 
     /** @return <code>ClassResolver</code> for current tree. */
     private ClassResolver getClassResolver() {
         if (classResolver == null) {
             classResolver =
                 new ClassResolver(getClassLoader(),
                                   packageFullIdent.getText(),
                                   imports);
         }
         return classResolver;
     }
 
     /**
      * Attempts to resolve the Class for a specified name.
      * @param className name of the class to resolve
      * @param currentClass name of surrounding class.
      * @return the resolved class or <code>null</code>
      *          if unable to resolve the class.
      */
     protected final Class<?> resolveClass(String className,
             String currentClass) {
