diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheck.java
index 19bc6a5cb..078382691 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheck.java
@@ -75,192 +75,215 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  *  ExpressionHandler is popped from the stack.
  * </p>
  *
  * <p>
  *  While on the stack the ExpressionHandler can be queried for the
  *  indentation level it suggests for children as well as for other
  *  values.
  * </p>
  *
  * <p>
  *  While an ExpressionHandler checks the indentation level of its own
  *  AST, it typically also checks surrounding ASTs.  For instance, a
  *  while loop handler checks the while loop as well as the braces
  *  and immediate children.
  * </p>
  * <pre>
  *   - handler class -to-> ID mapping kept in Map
  *   - parent passed in during construction
  *   - suggest child indent level
  *   - allows for some tokens to be on same line (ie inner classes OBJBLOCK)
  *     and not increase indentation level
  *   - looked at using double dispatch for suggestedChildLevel(), but it
  *     doesn't seem worthwhile, at least now
  *   - both tabs and spaces are considered whitespace in front of the line...
  *     tabs are converted to spaces
  *   - block parents with parens -- for, while, if, etc... -- are checked that
  *     they match the level of the parent
  * </pre>
  *
  * @author jrichard
  * @author o_sukhodolsky
  * @author Maikel Steneker
  */
 public class IndentationCheck extends Check
 {
     /** Default indentation amount - based on Sun */
     private static final int DEFAULT_INDENTATION = 4;
 
     /** how many tabs or spaces to use */
     private int mBasicOffset = DEFAULT_INDENTATION;
 
     /** how much to indent a case label */
     private int mCaseIndentationAmount = DEFAULT_INDENTATION;
 
     /** how far brace should be indented when on next line */
     private int mBraceAdjustment;
 
     /** how far throws should be indented when on next line */
     private int mThrowsIndentationAmount = DEFAULT_INDENTATION;
 
+    /** how much to indent an array initialisation when on next line */
+    private int mArrayInitIndentationAmount = DEFAULT_INDENTATION;
+
     /** handlers currently in use */
     private final FastStack<ExpressionHandler> mHandlers =
         FastStack.newInstance();
 
     /** factory from which handlers are distributed */
     private final HandlerFactory mHandlerFactory = new HandlerFactory();
 
     /** Creates a new instance of IndentationCheck. */
     public IndentationCheck()
     {
     }
 
     /**
      * Set the basic offset.
      *
      * @param aBasicOffset   the number of tabs or spaces to indent
      */
     public void setBasicOffset(int aBasicOffset)
     {
         mBasicOffset = aBasicOffset;
     }
 
     /**
      * Get the basic offset.
      *
      * @return the number of tabs or spaces to indent
      */
     public int getBasicOffset()
     {
         return mBasicOffset;
     }
 
     /**
      * Adjusts brace indentation (positive offset).
      *
      * @param aAdjustmentAmount   the brace offset
      */
     public void setBraceAdjustment(int aAdjustmentAmount)
     {
         mBraceAdjustment = aAdjustmentAmount;
     }
 
     /**
      * Get the brace adjustment amount.
      *
      * @return the positive offset to adjust braces
      */
     public int getBraceAdjustement()
     {
         return mBraceAdjustment;
     }
 
     /**
      * Set the case indentation level.
      *
      * @param aAmount   the case indentation level
      */
     public void setCaseIndent(int aAmount)
     {
         mCaseIndentationAmount = aAmount;
     }
 
     /**
      * Get the case indentation level.
      *
      * @return the case indentation level
      */
     public int getCaseIndent()
     {
         return mCaseIndentationAmount;
     }
 
     /**
      * Set the throws indentation level.
      *
      * @param aThrowsIndent the throws indentation level
      */
     public void setThrowsIndent(int aThrowsIndent)
     {
         mThrowsIndentationAmount = aThrowsIndent;
     }
 
     /**
      * Get the throws indentation level.
      *
      * @return the throws indentation level
      */
     public int getThrowsIndent()
     {
         return this.mThrowsIndentationAmount;
     }
 
+    /**
+     * Set the array initialisation indentation level.
+     *
+     * @param aArrayInitIndent the array initialisation indentation level
+     */
+    public void setArrayInitIndent(int aArrayInitIndent)
+    {
+        mArrayInitIndentationAmount = aArrayInitIndent;
+    }
+
+    /**
+     * Get the array initialisation indentation level.
+     *
+     * @return the array initialisation indentation level
+     */
+    public int getArrayInitIndent()
+    {
+        return this.mArrayInitIndentationAmount;
+    }
+
     /**
      * Log an error message.
      *
      * @param aLine the line number where the error was found
      * @param aKey the message that describes the error
      * @param aArgs the details of the message
      *
      * @see java.text.MessageFormat
      */
     public void indentationLog(int aLine, String aKey, Object... aArgs)
     {
         super.log(aLine, aKey, aArgs);
     }
 
     /**
      * Get the width of a tab.
      *
      * @return the width of a tab
      */
     public int getIndentationTabWidth()
     {
         return getTabWidth();
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return mHandlerFactory.getHandledTypes();
     }
 
     @Override
     public void beginTree(DetailAST aAst)
     {
         mHandlerFactory.clearCreatedHandlers();
         mHandlers.clear();
         mHandlers.push(new PrimordialHandler(this));
     }
 
     @Override
     public void visitToken(DetailAST aAST)
     {
         if ((aAST.getType() == TokenTypes.VARIABLE_DEF)
             && ScopeUtils.isLocalVariableDef(aAST))
         {
             // we have handler only for members
             return;
         }
 
         final ExpressionHandler handler = mHandlerFactory.getHandler(this, aAST,
             mHandlers.peek());
