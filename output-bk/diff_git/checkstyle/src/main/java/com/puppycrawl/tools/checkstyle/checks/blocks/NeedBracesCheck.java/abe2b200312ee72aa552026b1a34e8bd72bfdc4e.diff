diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
index 122ccf0ae..797a2d5f0 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
@@ -49,100 +49,115 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  *     &lt;property name="tokens" value="LITERAL_IF, LITERAL_ELSE"/&gt;
  * &lt;/module&gt;
  * </pre>
  * Check has an option <b>allowSingleLineIf</b> which allows one line
  * if-statements without braces, e.g.:
  * <p>
  * <code>
  * if (obj.isValid()) return true;
  * </code>
  * </p>
  * <br>
  *
  * @author Rick Giles
  * @author <a href="mailto:nesterenko-aleksey@list.ru">Aleksey Nesterenko</a>
  * @version 1.0
  */
 public class NeedBracesCheck extends Check
 {
     /**
      * Check's option for skipping single-line if-statements.
      */
     private boolean allowSingleLineIf;
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY_NEED_BRACES = "needBraces";
 
     /**
      * Setter.
      * @param allowSingleLineIf Check's option for skipping single-line if-statements
      */
     public void setAllowSingleLineIf(boolean allowSingleLineIf)
     {
         this.allowSingleLineIf = allowSingleLineIf;
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.LITERAL_DO,
             TokenTypes.LITERAL_ELSE,
             TokenTypes.LITERAL_FOR,
             TokenTypes.LITERAL_IF,
             TokenTypes.LITERAL_WHILE,
         };
     }
 
+    @Override
+    public int[] getAcceptableTokens()
+    {
+        return new int[] {
+            TokenTypes.LITERAL_DO,
+            TokenTypes.LITERAL_ELSE,
+            TokenTypes.LITERAL_FOR,
+            TokenTypes.LITERAL_IF,
+            TokenTypes.LITERAL_WHILE,
+            TokenTypes.LITERAL_CASE,
+            TokenTypes.LITERAL_DEFAULT,
+            TokenTypes.LAMBDA,
+        };
+    }
+
     @Override
     public void visitToken(DetailAST ast)
     {
         final DetailAST slistAST = ast.findFirstToken(TokenTypes.SLIST);
         boolean isElseIf = false;
         if ((ast.getType() == TokenTypes.LITERAL_ELSE)
             && (ast.findFirstToken(TokenTypes.LITERAL_IF) != null))
         {
             isElseIf = true;
         }
         boolean skipStatement = false;
         if (ast.getType() == TokenTypes.LITERAL_IF) {
             skipStatement = isSkipIfBlock(ast);
         }
         if ((slistAST == null) && !isElseIf && !skipStatement) {
             log(ast.getLineNo(), MSG_KEY_NEED_BRACES, ast.getText());
         }
     }
 
     /**
      * Checks if current if-block can be skipped by "need braces" warning.
      * @param literalIf {@link TokenTypes#LITERAL_IF LITERAL_IF}
      * @return true if current if block can be skipped by Check
      */
     private boolean isSkipIfBlock(DetailAST literalIf)
     {
         return allowSingleLineIf && isSingleLineIf(literalIf);
     }
 
     /**
      * Checks if current if-statement is single-line statement, e.g.:
      * <p>
      * <code>
      * if (obj.isValid()) return true;
      * </code>
      * </p>
      * @param literalIf {@link TokenTypes#LITERAL_IF LITERAL_IF}
      * @return true if current if-statement is single-line statement
      */
     private static boolean isSingleLineIf(DetailAST literalIf)
     {
         boolean result = false;
         final DetailAST ifBlock = literalIf.getLastChild();
         final DetailAST lastElementInIfBlock = ifBlock.getLastChild();
         if (lastElementInIfBlock != null
             && lastElementInIfBlock.getFirstChild() == null
             && literalIf.getLineNo() == lastElementInIfBlock.getLineNo())
         {
             result = true;
         }
