diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
index 7340cbce8..e42b46104 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
@@ -156,101 +156,101 @@ public class SuppressWarningsHolder
         return checkAlias;
     }
 
     /**
      * Registers an alias for the source name of a check.
      * @param sourceName the source name of the check (generally the class
      *        name)
      * @param checkAlias the alias used in {@link SuppressWarnings} annotations
      */
     public static void registerAlias(String sourceName, String checkAlias)
     {
         CHECK_ALIAS_MAP.put(sourceName, checkAlias);
     }
 
     /**
      * Registers a list of source name aliases based on a comma-separated list
      * of {@code source=alias} items, such as {@code
      * com.puppycrawl.tools.checkstyle.checks.sizes.ParameterNumberCheck=
      * paramnum}.
      * @param aliasList the list of comma-separated alias assigments
      */
     public void setAliasList(String aliasList)
     {
         for (String sourceAlias : aliasList.split(",")) {
             final int index = sourceAlias.indexOf("=");
             if (index > 0) {
                 registerAlias(sourceAlias.substring(0, index), sourceAlias
                     .substring(index + 1));
             }
             else if (sourceAlias.length() > 0) {
                 throw new ConversionException(
                     "'=' expected in alias list item: " + sourceAlias);
             }
         }
     }
 
     /**
      * Checks for a suppression of a check with the given source name and
      * location in the last file processed.
      * @param sourceName the source name of the check
      * @param line the line number of the check
      * @param column the column number of the check
      * @return whether the check with the given name is suppressed at the given
      *         source location
      */
     public static boolean isSuppressed(String sourceName, int line,
         int column)
     {
         final List<Entry> entries = ENTRIES.get();
         final String checkAlias = getAlias(sourceName);
-        if (entries != null && checkAlias != null) {
+        if (checkAlias != null) {
             for (Entry entry : entries) {
                 final boolean afterStart =
                     entry.getFirstLine() < line
                         || entry.getFirstLine() == line && entry
                             .getFirstColumn() <= column;
                 final boolean beforeEnd =
                     entry.getLastLine() > line
                         || entry.getLastLine() == line && entry
                             .getLastColumn() >= column;
                 final boolean nameMatches =
                     entry.getCheckName().equals(checkAlias);
                 if (afterStart && beforeEnd && nameMatches) {
                     return true;
                 }
             }
         }
         return false;
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.ANNOTATION};
     }
 
     @Override
     public void beginTree(DetailAST rootAST)
     {
         ENTRIES.set(new LinkedList<Entry>());
     }
 
     @Override
     public void visitToken(DetailAST ast)
     {
         // check whether annotation is SuppressWarnings
         // expected children: AT ( IDENT | DOT ) LPAREN <values> RPAREN
         String identifier = getIdentifier(getNthChild(ast, 1));
         if (identifier.startsWith(JAVA_LANG_PREFIX)) {
             identifier = identifier.substring(JAVA_LANG_PREFIX.length());
         }
         if ("SuppressWarnings".equals(identifier)) {
 
             // get values of annotation
             List<String> values = null;
             final DetailAST lparenAST = ast.findFirstToken(TokenTypes.LPAREN);
             if (lparenAST != null) {
                 final DetailAST nextAST = lparenAST.getNextSibling();
                 if (nextAST != null) {
                     final int nextType = nextAST.getType();
                     switch (nextType) {
