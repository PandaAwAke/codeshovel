diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java
index 9eabebecd..857561c62 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java
@@ -60,105 +60,105 @@ import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
  *    &lt;property name="tagSeverity" value="warning"/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * @author Daniel Grenner
  */
 public class WriteTagCheck
     extends AbstractCheck {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_MISSING_TAG = "type.missingTag";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_WRITE_TAG = "javadoc.writeTag";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_TAG_FORMAT = "type.tagFormat";
 
     /** Compiled regexp to match tag. **/
     private Pattern tagRegExp;
     /** Compiled regexp to match tag content. **/
     private Pattern tagFormatRegExp;
 
     /** Regexp to match tag. */
     private String tag;
     /** Regexp to match tag content. */
     private String tagFormat;
     /** The severity level of found tag reports. */
     private SeverityLevel tagSeverityLevel = SeverityLevel.INFO;
 
     /**
      * Sets the tag to check.
      * @param tag tag to check
      */
     public void setTag(String tag) {
         this.tag = tag;
         tagRegExp = CommonUtils.createPattern(tag + "\\s*(.*$)");
     }
 
     /**
      * Set the tag format.
-     * @param format a {@code String} value
+     * @param pattern a {@code String} value
      */
-    public void setTagFormat(String format) {
-        tagFormat = format;
-        tagFormatRegExp = CommonUtils.createPattern(format);
+    public void setTagFormat(Pattern pattern) {
+        tagFormat = pattern.pattern();
+        tagFormatRegExp = pattern;
     }
 
     /**
      * Sets the tag severity level.  The string should be one of the names
      * defined in the {@code SeverityLevel} class.
      *
      * @param severity  The new severity level
      * @see SeverityLevel
      */
     public final void setTagSeverity(String severity) {
         tagSeverityLevel = SeverityLevel.getInstance(severity);
     }
 
     @Override
     public int[] getDefaultTokens() {
         return new int[] {TokenTypes.INTERFACE_DEF,
                           TokenTypes.CLASS_DEF,
                           TokenTypes.ENUM_DEF,
                           TokenTypes.ANNOTATION_DEF,
         };
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.INTERFACE_DEF,
                           TokenTypes.CLASS_DEF,
                           TokenTypes.ENUM_DEF,
                           TokenTypes.ANNOTATION_DEF,
                           TokenTypes.METHOD_DEF,
                           TokenTypes.CTOR_DEF,
                           TokenTypes.ENUM_CONSTANT_DEF,
                           TokenTypes.ANNOTATION_FIELD_DEF,
         };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return CommonUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final FileContents contents = getFileContents();
         final int lineNo = ast.getLineNo();
         final TextBlock cmt =
             contents.getJavadocBefore(lineNo);
         if (cmt == null) {
             log(lineNo, MSG_MISSING_TAG, tag);
         }
         else {
