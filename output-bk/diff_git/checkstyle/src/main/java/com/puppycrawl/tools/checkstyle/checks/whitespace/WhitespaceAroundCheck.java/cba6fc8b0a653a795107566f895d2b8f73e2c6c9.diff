diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java
index a7d866012..37f91bcff 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java
@@ -280,102 +280,101 @@ public class WhitespaceAroundCheck extends Check
         // Check for CURLY in array initializer
         if (((currentType == TokenTypes.RCURLY)
                 || (currentType == TokenTypes.LCURLY))
             && ((parentType == TokenTypes.ARRAY_INIT)
                 || (parentType == TokenTypes.ANNOTATION_ARRAY_INIT)))
         {
             return;
         }
 
         // Check for import pkg.name.*;
         if ((currentType == TokenTypes.STAR)
             && (parentType == TokenTypes.DOT))
         {
             return;
         }
 
         // Check for an SLIST that has a parent CASE_GROUP. It is not a '{'.
         if ((currentType == TokenTypes.SLIST)
             && (parentType == TokenTypes.CASE_GROUP))
         {
             return;
         }
 
         if ((currentType == TokenTypes.COLON)) {
             //we do not want to check colon for cases and defaults
             if (parentType == TokenTypes.LITERAL_DEFAULT
                 || parentType == TokenTypes.LITERAL_CASE)
             {
                 return;
             }
             else if (parentType == TokenTypes.FOR_EACH_CLAUSE
                 && this.mIgnoreEnhancedForColon)
             {
                 return;
             }
         }
 
         // Checks if empty methods, ctors or loops are allowed.
         if (isEmptyMethodBlock(aAST, parentType)
                 || isEmptyCtorBlock(aAST, parentType)
                 || isEmptyLoop(aAST, parentType))
         {
             return;
         }
 
         // Checks if empty classes, interfaces or enums are allowed
         if (mAllowEmptyTypes && (isEmptyType(aAST, parentType))) {
             return;
         }
 
-        final String[] lines = getLines();
-        final String line = lines[aAST.getLineNo() - 1];
+        final String line = getLine(aAST.getLineNo() - 1);
         final int before = aAST.getColumnNo() - 1;
         final int after = aAST.getColumnNo() + aAST.getText().length();
 
         if ((before >= 0) && !Character.isWhitespace(line.charAt(before))) {
             log(aAST.getLineNo(), aAST.getColumnNo(),
                     "ws.notPreceded", aAST.getText());
         }
 
         if (after >= line.length()) {
             return;
         }
 
         final char nextChar = line.charAt(after);
         if (!Character.isWhitespace(nextChar)
             // Check for "return;"
             && !((currentType == TokenTypes.LITERAL_RETURN)
                 && (aAST.getFirstChild().getType() == TokenTypes.SEMI))
             // Check for "})" or "};" or "},". Happens with anon-inners
             && !((currentType == TokenTypes.RCURLY)
                 && ((nextChar == ')')
                     || (nextChar == ';')
                     || (nextChar == ',')
                     || (nextChar == '.'))))
         {
             log(aAST.getLineNo(), aAST.getColumnNo() + aAST.getText().length(),
                     "ws.notFollowed", aAST.getText());
         }
     }
 
     /**
      * Test if the given <code>DetailAST</code> is part of an allowed empty
      * method block.
      * @param aAST the <code>DetailAST</code> to test.
      * @param aParentType the token type of <code>aAST</code>'s parent.
      * @return <code>true</code> if <code>aAST</code> makes up part of an
      *         allowed empty method block.
      */
     private boolean isEmptyMethodBlock(DetailAST aAST, int aParentType)
     {
         return mAllowEmptyMethods
             && isEmptyBlock(aAST, aParentType, TokenTypes.METHOD_DEF);
     }
 
     /**
      * Test if the given <code>DetailAST</code> is part of an allowed empty
      * constructor (ctor) block.
      * @param aAST the <code>DetailAST</code> to test.
      * @param aParentType the token type of <code>aAST</code>'s parent.
      * @return <code>true</code> if <code>aAST</code> makes up part of an
      *         allowed empty constructor block.
