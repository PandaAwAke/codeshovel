diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/LineColumn.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/LineColumn.java
index f191d6812..603b7b349 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/LineColumn.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/LineColumn.java
@@ -9,73 +9,76 @@
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.api;
 
 import java.util.Objects;
 
 /**
  * Immutable line and column numbers.
  *
  * @author Martin von Gagern
  */
 public class LineColumn implements Comparable<LineColumn> {
 
     /** The one-based line number */
     private final int line;
 
     /** The zero-based column number */
     private final int col;
 
     /**
      * Constructs a new pair of line and column numbers.
      * @param line the one-based line number
      * @param col the zero-based column number
      */
     public LineColumn(int line, int col) {
         this.line = line;
         this.col = col;
     }
 
     /** @return the one-based line number */
     public int getLine() {
         return line;
     }
 
     /** @return the zero-based column number */
     public int getColumn() {
         return col;
     }
 
     @Override
     public int compareTo(LineColumn lineColumn) {
-        return getLine() != lineColumn.getLine()
-            ? Integer.compare(getLine(), lineColumn.getLine())
-            : Integer.compare(getColumn(), lineColumn.getColumn());
+        if (getLine() == lineColumn.getLine()) {
+            return Integer.compare(getColumn(), lineColumn.getColumn());
+        }
+        else {
+            return Integer.compare(getLine(), lineColumn.getLine());
+        }
     }
 
     @Override
     public boolean equals(Object o) {
         if (this == o) {
             return true;
         }
         if (o == null || getClass() != o.getClass()) {
             return false;
         }
         final LineColumn lineColumn = (LineColumn) o;
         return Objects.equals(line, lineColumn.line)
                 && Objects.equals(col, lineColumn.col);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(line, col);
     }
 }
