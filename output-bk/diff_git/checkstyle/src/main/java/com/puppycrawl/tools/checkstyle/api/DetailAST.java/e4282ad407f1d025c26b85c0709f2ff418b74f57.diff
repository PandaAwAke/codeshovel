diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
index 098048cb2..08c0d77e5 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
@@ -150,185 +150,207 @@ public final class DetailAST extends CommonASTWithHiddenTokens {
     public void addChild(AST ast) {
         super.addChild(ast);
         if (ast != null) {
             ((DetailAST) ast).setParent(this);
             getFirstChild().setParent(this);
         }
     }
 
     /**
      * Returns the number of child nodes one level below this node. That is is
      * does not recurse down the tree.
      * @return the number of child nodes
      */
     public int getChildCount() {
         // lazy init
         if (childCount == NOT_INITIALIZED) {
             childCount = 0;
             AST child = getFirstChild();
 
             while (child != null) {
                 childCount += 1;
                 child = child.getNextSibling();
             }
         }
         return childCount;
     }
 
     /**
      * Set the parent token.
      * @param parent the parent token
      */
     void setParent(DetailAST parent) {
         this.parent = parent;
         final DetailAST nextSibling = getNextSibling();
         if (nextSibling != null) {
             nextSibling.setParent(parent);
             nextSibling.previousSibling = this;
         }
     }
 
     /**
      * Returns the parent token.
      * @return the parent token
      */
     public DetailAST getParent() {
         return parent;
     }
 
     /** @return the line number **/
     public int getLineNo() {
+        int resultNo = -1;
+
         if (lineNo == NOT_INITIALIZED) {
             // an inner AST that has been initialized
             // with initialize(String text)
-            DetailAST child = getFirstChild();
-            while (child != null) {
-                // comment node can't be start of any java statement/definition
-                if (TokenUtils.isCommentType(child.getType())) {
-                    child = child.getNextSibling();
-                }
-                else {
-                    return child.getLineNo();
-                }
-            }
+            resultNo = findLineNo(getFirstChild());
 
-            DetailAST sibling = getNextSibling();
-            while (sibling != null) {
-                // comment node can't be start of any java statement/definition
-                if (TokenUtils.isCommentType(sibling.getType())) {
-                    sibling = sibling.getNextSibling();
-                }
-                else {
-                    return sibling.getLineNo();
-                }
+            if (resultNo < 0) {
+                resultNo = findLineNo(getNextSibling());
             }
         }
-        return lineNo;
+        if (resultNo < 0) {
+            resultNo = lineNo;
+        }
+        return resultNo;
     }
 
     /**
      * Set line number.
      * @param lineNo
      *        line number.
      */
     public void setLineNo(int lineNo) {
         this.lineNo = lineNo;
     }
 
     /** @return the column number **/
     public int getColumnNo() {
+        int resultNo = -1;
+
         if (columnNo == NOT_INITIALIZED) {
             // an inner AST that has been initialized
             // with initialize(String text)
-            DetailAST child = getFirstChild();
-            while (child != null) {
-                // comment node can't be start of any java statement/definition
-                if (TokenUtils.isCommentType(child.getType())) {
-                    child = child.getNextSibling();
-                }
-                else {
-                    return child.getColumnNo();
-                }
-            }
+            resultNo = findColumnNo(getFirstChild());
 
-            DetailAST sibling = getNextSibling();
-            while (sibling != null) {
-                // comment node can't be start of any java statement/definition
-                if (TokenUtils.isCommentType(sibling.getType())) {
-                    sibling = sibling.getNextSibling();
-                }
-                else {
-                    return sibling.getColumnNo();
-                }
+            if (resultNo < 0) {
+                resultNo = findColumnNo(getNextSibling());
             }
         }
-        return columnNo;
+        if (resultNo < 0) {
+            resultNo = columnNo;
+        }
+        return resultNo;
     }
 
     /**
      * Set column number.
      * @param columnNo
      *        column number.
      */
     public void setColumnNo(int columnNo) {
         this.columnNo = columnNo;
     }
 
     /** @return the last child node */
     public DetailAST getLastChild() {
         DetailAST ast = getFirstChild();
         while (ast != null && ast.getNextSibling() != null) {
             ast = ast.getNextSibling();
         }
         return ast;
     }
 
+    /**
+     * Finds column number in the first non-comment node.
+     *
+     * @param ast DetailAST node.
+     * @return Column number if non-comment node exists, -1 otherwise.
+     */
+    private int findColumnNo(DetailAST ast) {
+        int resultNo = -1;
+        DetailAST node = ast;
+        while (node != null) {
+            // comment node can't be start of any java statement/definition
+            if (TokenUtils.isCommentType(node.getType())) {
+                node = node.getNextSibling();
+            }
+            else {
+                resultNo = node.getColumnNo();
+                break;
+            }
+        }
+        return resultNo;
+    }
+
+    /**
+     * Finds line number in the first non-comment node.
+     *
+     * @param ast DetailAST node.
+     * @return Line number if non-comment node exists, -1 otherwise.
+     */
+    private int findLineNo(DetailAST ast) {
+        int resultNo = -1;
+        DetailAST node = ast;
+        while (node != null) {
+            // comment node can't be start of any java statement/definition
+            if (TokenUtils.isCommentType(node.getType())) {
+                node = node.getNextSibling();
+            }
+            else {
+                resultNo = node.getLineNo();
+                break;
+            }
+        }
+        return resultNo;
+    }
+
     /**
      * @return the token types that occur in the branch as a sorted set.
      */
     private BitSet getBranchTokenTypes() {
         // lazy init
         if (branchTokenTypes == null) {
 
             branchTokenTypes = new BitSet();
             branchTokenTypes.set(getType());
 
             // add union of all childs
             DetailAST child = getFirstChild();
             while (child != null) {
                 final BitSet childTypes = child.getBranchTokenTypes();
                 branchTokenTypes.or(childTypes);
 
                 child = child.getNextSibling();
             }
         }
         return branchTokenTypes;
     }
 
     /**
      * Checks if this branch of the parse tree contains a token
      * of the provided type.
      * @param type a TokenType
      * @return true if and only if this branch (including this node)
      * contains a token of type {@code type}.
      */
     public boolean branchContains(int type) {
         return getBranchTokenTypes().get(type);
     }
 
     /**
      * Returns the number of direct child tokens that have the specified type.
      * @param type the token type to match
      * @return the number of matching token
      */
     public int getChildCount(int type) {
         int count = 0;
         for (AST ast = getFirstChild(); ast != null; ast = ast.getNextSibling()) {
             if (ast.getType() == type) {
                 count++;
             }
         }
         return count;
     }
 
     /**
      * Returns the previous sibling or null if no such sibling exists.
