diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
index dc20a7b30..04239245b 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
@@ -219,109 +219,109 @@ public class JavadocTypeCheck
         final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);
         final Scope customScope =
             ScopeUtils.inInterfaceOrAnnotationBlock(ast)
                 ? Scope.PUBLIC : declaredScope;
         final Scope surroundingScope = ScopeUtils.getSurroundingScope(ast);
 
         return customScope.isIn(this.scope)
             && (surroundingScope == null || surroundingScope.isIn(this.scope))
             && (excludeScope == null
                 || !customScope.isIn(excludeScope)
                 || surroundingScope != null
                 && !surroundingScope.isIn(excludeScope));
     }
 
     /**
      * Gets all standalone tags from a given javadoc.
      * @param cmt the Javadoc comment to process.
      * @return all standalone tags from the given javadoc.
      */
     private List<JavadocTag> getJavadocTags(TextBlock cmt) {
         final JavadocTags tags = JavadocUtils.getJavadocTags(cmt,
             JavadocUtils.JavadocTagType.BLOCK);
         if (!allowUnknownTags) {
             for (final InvalidJavadocTag tag : tags.getInvalidTags()) {
                 log(tag.getLine(), tag.getCol(), UNKNOWN_TAG,
                     tag.getName());
             }
         }
         return tags.getValidTags();
     }
 
     /**
      * Verifies that a type definition has a required tag.
      * @param lineNo the line number for the type definition.
      * @param tags tags from the Javadoc comment for the type definition.
      * @param tagName the required tag name.
      * @param formatPattern regexp for the tag value.
      * @param format pattern for the tag value.
      */
     private void checkTag(int lineNo, List<JavadocTag> tags, String tagName,
                           Pattern formatPattern, String format) {
         if (formatPattern == null) {
             return;
         }
 
         int tagCount = 0;
         for (int i = tags.size() - 1; i >= 0; i--) {
             final JavadocTag tag = tags.get(i);
             if (tag.getTagName().equals(tagName)) {
                 tagCount++;
-                if (!formatPattern.matcher(tag.getArg1()).find()) {
+                if (!formatPattern.matcher(tag.getFirstArg()).find()) {
                     log(lineNo, TAG_FORMAT, "@" + tagName, format);
                 }
             }
         }
         if (tagCount == 0) {
             log(lineNo, MISSING_TAG, "@" + tagName);
         }
     }
 
     /**
      * Verifies that a type definition has the specified param tag for
      * the specified type parameter name.
      * @param lineNo the line number for the type definition.
      * @param tags tags from the Javadoc comment for the type definition.
      * @param typeParamName the name of the type parameter
      */
     private void checkTypeParamTag(final int lineNo,
             final List<JavadocTag> tags, final String typeParamName) {
         boolean found = false;
         for (int i = tags.size() - 1; i >= 0; i--) {
             final JavadocTag tag = tags.get(i);
             if (tag.isParamTag()
-                && tag.getArg1().indexOf("<" + typeParamName + ">") == 0) {
+                && tag.getFirstArg().indexOf("<" + typeParamName + ">") == 0) {
                 found = true;
             }
         }
         if (!found) {
             log(lineNo, MISSING_TAG,
                 JavadocTagInfo.PARAM.getText() + " <" + typeParamName + ">");
         }
     }
 
     /**
      * Checks for unused param tags for type parameters.
      * @param tags tags from the Javadoc comment for the type definition.
      * @param typeParamNames names of type parameters
      */
     private void checkUnusedTypeParamTags(
         final List<JavadocTag> tags,
         final List<String> typeParamNames) {
         final Pattern pattern = Pattern.compile("\\s*<([^>]+)>.*");
         for (int i = tags.size() - 1; i >= 0; i--) {
             final JavadocTag tag = tags.get(i);
             if (tag.isParamTag()) {
 
-                final Matcher matcher = pattern.matcher(tag.getArg1());
+                final Matcher matcher = pattern.matcher(tag.getFirstArg());
                 matcher.find();
                 final String typeParamName = matcher.group(1).trim();
                 if (!typeParamNames.contains(typeParamName)) {
                     log(tag.getLineNo(), tag.getColumnNo(),
                         UNUSED_TAG,
                         JavadocTagInfo.PARAM.getText(),
                         "<" + typeParamName + ">");
                 }
             }
         }
     }
 }
