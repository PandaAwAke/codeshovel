diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceBeforeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceBeforeCheck.java
index f1d1fac02..da57e0d90 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceBeforeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceBeforeCheck.java
@@ -74,72 +74,72 @@ public class NoWhitespaceBeforeCheck
     @Override
     public int[] getDefaultTokens() {
         return new int[] {
             TokenTypes.SEMI,
             TokenTypes.POST_INC,
             TokenTypes.POST_DEC,
         };
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.SEMI,
             TokenTypes.POST_INC,
             TokenTypes.POST_DEC,
             TokenTypes.DOT,
         };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return ArrayUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final String line = getLine(ast.getLineNo() - 1);
         final int before = ast.getColumnNo() - 1;
 
         if ((before < 0 || Character.isWhitespace(line.charAt(before)))
                 && !isInEmptyForInitializer(ast)) {
 
             boolean flag = !allowLineBreaks;
             // verify all characters before '.' are whitespace
             for (int i = 0; !flag && i < before; i++) {
                 if (!Character.isWhitespace(line.charAt(i))) {
                     flag = true;
                 }
             }
             if (flag) {
                 log(ast.getLineNo(), before, MSG_KEY, ast.getText());
             }
         }
     }
 
     /**
      * Checks that semicolon is in empty for initializer.
      * @param semicolonAst DetailAST of semicolon.
      * @return true if semicolon is in empty for initializer.
      */
-    private boolean isInEmptyForInitializer(DetailAST semicolonAst) {
+    private static boolean isInEmptyForInitializer(DetailAST semicolonAst) {
         boolean result = false;
         if (semicolonAst.getType() == TokenTypes.SEMI) {
             final DetailAST sibling = semicolonAst.getPreviousSibling();
             if (sibling != null
                     && sibling.getType() == TokenTypes.FOR_INIT
                     && sibling.getChildCount() == 0) {
                 result = true;
             }
         }
         return result;
     }
 
     /**
      * Control whether whitespace is flagged at linebreaks.
      * @param allowLineBreaks whether whitespace should be
      * flagged at line breaks.
      */
     public void setAllowLineBreaks(boolean allowLineBreaks) {
         this.allowLineBreaks = allowLineBreaks;
     }
 }
