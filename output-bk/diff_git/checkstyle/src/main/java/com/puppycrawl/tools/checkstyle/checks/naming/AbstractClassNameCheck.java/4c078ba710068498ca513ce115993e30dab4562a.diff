diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java
index a42bcf229..a94171cd6 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java
@@ -80,65 +80,65 @@ public final class AbstractClassNameCheck extends AbstractFormatCheck {
      * @param value new value.
      */
     public void setIgnoreName(boolean value) {
         ignoreName = value;
     }
 
     @Override
     public int[] getDefaultTokens() {
         return new int[]{TokenTypes.CLASS_DEF};
     }
 
     @Override
     public int[] getRequiredTokens() {
         return new int[]{TokenTypes.CLASS_DEF};
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[]{TokenTypes.CLASS_DEF};
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         visitClassDef(ast);
     }
 
     /**
      * Checks class definition.
      * @param ast class definition for check.
      */
     private void visitClassDef(DetailAST ast) {
         final String className =
             ast.findFirstToken(TokenTypes.IDENT).getText();
         if (isAbstract(ast)) {
             // if class has abstract modifier
             if (!ignoreName && !isMatchingClassName(className)) {
                 log(ast.getLineNo(), ast.getColumnNo(),
                     ILLEGAL_ABSTRACT_CLASS_NAME, className, getFormat());
             }
         }
         else if (!ignoreModifier && isMatchingClassName(className)) {
             log(ast.getLineNo(), ast.getColumnNo(),
                 NO_ABSTRACT_CLASS_MODIFIER, className);
         }
     }
 
     /**
      * @param ast class definition for check.
      * @return true if a given class declared as abstract.
      */
-    private boolean isAbstract(DetailAST ast) {
+    private static boolean isAbstract(DetailAST ast) {
         final DetailAST abstractAST = ast.findFirstToken(TokenTypes.MODIFIERS)
             .findFirstToken(TokenTypes.ABSTRACT);
 
         return abstractAST != null;
     }
 
     /**
      * @param className class name for check.
      * @return true if class name matches format of abstract class names.
      */
     private boolean isMatchingClassName(String className) {
         return getRegexp().matcher(className).find();
     }
 }
