diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java
index 47db2e448..4cb2d6b64 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java
@@ -80,97 +80,96 @@ public class MethodParamPadCheck
      * file.
      */
     public static final String MSG_WS_PRECEDED = "ws.preceded";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_WS_NOT_PRECEDED = "ws.notPreceded";
 
     /**
      * Whether whitespace is allowed if the method identifier is at a
      * linebreak.
      */
     private boolean allowLineBreaks;
 
     /** The policy to enforce. */
     private PadOption option = PadOption.NOSPACE;
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.CTOR_DEF,
             TokenTypes.LITERAL_NEW,
             TokenTypes.METHOD_CALL,
             TokenTypes.METHOD_DEF,
             TokenTypes.SUPER_CTOR_CALL,
             TokenTypes.ENUM_CONSTANT_DEF,
         };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return CommonUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final DetailAST parenAST;
         if (ast.getType() == TokenTypes.METHOD_CALL) {
             parenAST = ast;
         }
         else {
             parenAST = ast.findFirstToken(TokenTypes.LPAREN);
             // array construction => parenAST == null
-            if (parenAST == null) {
-                return;
-            }
         }
 
-        final String line = getLines()[parenAST.getLineNo() - 1];
-        if (CommonUtils.hasWhitespaceBefore(parenAST.getColumnNo(), line)) {
-            if (!allowLineBreaks) {
-                log(parenAST, MSG_LINE_PREVIOUS, parenAST.getText());
-            }
-        }
-        else {
-            final int before = parenAST.getColumnNo() - 1;
-            if (option == PadOption.NOSPACE
-                && Character.isWhitespace(line.charAt(before))) {
-                log(parenAST, MSG_WS_PRECEDED, parenAST.getText());
+        if (parenAST != null) {
+            final String line = getLines()[parenAST.getLineNo() - 1];
+            if (CommonUtils.hasWhitespaceBefore(parenAST.getColumnNo(), line)) {
+                if (!allowLineBreaks) {
+                    log(parenAST, MSG_LINE_PREVIOUS, parenAST.getText());
+                }
             }
-            else if (option == PadOption.SPACE
-                     && !Character.isWhitespace(line.charAt(before))) {
-                log(parenAST, MSG_WS_NOT_PRECEDED, parenAST.getText());
+            else {
+                final int before = parenAST.getColumnNo() - 1;
+                if (option == PadOption.NOSPACE
+                    && Character.isWhitespace(line.charAt(before))) {
+                    log(parenAST, MSG_WS_PRECEDED, parenAST.getText());
+                }
+                else if (option == PadOption.SPACE
+                         && !Character.isWhitespace(line.charAt(before))) {
+                    log(parenAST, MSG_WS_NOT_PRECEDED, parenAST.getText());
+                }
             }
         }
     }
 
     /**
      * Control whether whitespace is flagged at line breaks.
      * @param allowLineBreaks whether whitespace should be
      *     flagged at line breaks.
      */
     public void setAllowLineBreaks(boolean allowLineBreaks) {
         this.allowLineBreaks = allowLineBreaks;
     }
 
     /**
      * Set the option to enforce.
      * @param optionStr string to decode option from
      * @throws ConversionException if unable to decode
      */
     public void setOption(String optionStr) {
         try {
             option = PadOption.valueOf(optionStr.trim().toUpperCase(Locale.ENGLISH));
         }
         catch (IllegalArgumentException iae) {
             throw new ConversionException("unable to parse " + optionStr, iae);
         }
     }
 }
