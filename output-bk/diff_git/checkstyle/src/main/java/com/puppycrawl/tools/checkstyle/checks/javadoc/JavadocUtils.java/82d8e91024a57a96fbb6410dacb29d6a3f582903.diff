diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java
index 40ba10009..625f9ec5b 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java
@@ -272,125 +272,125 @@ public final class JavadocUtils {
         while (true) {
 
             if (type == curNode.getType()) {
                 return true;
             }
 
             DetailNode toVisit = getFirstChild(curNode);
             while (curNode != null && toVisit == null) {
                 toVisit = getNextSibling(curNode);
                 if (toVisit == null) {
                     curNode = curNode.getParent();
                 }
             }
 
             if (curNode == toVisit) {
                 break;
             }
 
             curNode = toVisit;
         }
 
         return false;
     }
 
     /**
      * Gets next sibling of specified node.
      *
      * @param node DetailNode
      * @return next sibling.
      */
     public static DetailNode getNextSibling(DetailNode node) {
         final DetailNode parent = node.getParent();
         if (parent != null) {
             final int nextSiblingIndex = node.getIndex() + 1;
             final DetailNode[] children = parent.getChildren();
             if (nextSiblingIndex <= children.length - 1) {
                 return children[nextSiblingIndex];
             }
         }
         return null;
     }
 
     /**
      * Gets next sibling of specified node with the specified type.
      *
      * @param node DetailNode
      * @param tokenType javadoc token type
      * @return next sibling.
      */
     public static DetailNode getNextSibling(DetailNode node, int tokenType) {
-        DetailNode nextSibling = JavadocUtils.getNextSibling(node);
+        DetailNode nextSibling = getNextSibling(node);
         while (nextSibling != null && nextSibling.getType() != tokenType) {
-            nextSibling = JavadocUtils.getNextSibling(nextSibling);
+            nextSibling = getNextSibling(nextSibling);
         }
         return nextSibling;
     }
 
     /**
      * Gets previous sibling of specified node.
      * @param node DetailNode
      * @return previous sibling
      */
     public static DetailNode getPreviousSibling(DetailNode node) {
         final DetailNode parent = node.getParent();
         final int previousSiblingIndex = node.getIndex() - 1;
         final DetailNode[] children = parent.getChildren();
         if (previousSiblingIndex >= 0) {
             return children[previousSiblingIndex];
         }
         return null;
     }
 
     /**
      * Returns the name of a token for a given ID.
      * @param iD
      *        the ID of the token name to get
      * @return a token name
      */
     public static String getTokenName(int iD) {
         if (iD == JavadocTokenTypes.EOF) {
             return "EOF";
         }
         if (iD > TOKEN_VALUE_TO_NAME.length - 1) {
             throw new IllegalArgumentException("Unknown javdoc token id. Given id: " + iD);
         }
         final String name = TOKEN_VALUE_TO_NAME[iD];
         if (name == null) {
             throw new IllegalArgumentException("Unknown javdoc token id. Given id: " + iD);
         }
         return name;
     }
 
     /**
      * Returns the ID of a token for a given name.
      * @param name
      *        the name of the token ID to get
      * @return a token ID
      */
     public static int getTokenId(String name) {
         final Integer id = TOKEN_NAME_TO_VALUE.get(name);
         if (id == null) {
             throw new IllegalArgumentException("Unknown javdoc token name. Given name " + name);
         }
         return id;
     }
 
     /**
      * Gets tag name from javadocTagSection.
      *
      * @param javadocTagSection to get tag name from.
      * @return name, of the javadocTagSection's tag.
      */
     public static String getTagName(DetailNode javadocTagSection) {
         String javadocTagName;
         if (javadocTagSection.getType() == JavadocTokenTypes.JAVADOC_INLINE_TAG) {
-            javadocTagName = JavadocUtils.getNextSibling(
-                    JavadocUtils.getFirstChild(javadocTagSection)).getText();
+            javadocTagName = getNextSibling(
+                    getFirstChild(javadocTagSection)).getText();
         }
         else {
-            javadocTagName = JavadocUtils.getFirstChild(javadocTagSection).getText();
+            javadocTagName = getFirstChild(javadocTagSection).getText();
         }
         return javadocTagName;
     }
 
 }
