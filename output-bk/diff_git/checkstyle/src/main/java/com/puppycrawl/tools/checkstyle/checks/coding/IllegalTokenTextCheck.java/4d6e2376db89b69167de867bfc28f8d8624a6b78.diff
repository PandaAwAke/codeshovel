diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenTextCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenTextCheck.java
index 96a13bb0f..fd6fc84eb 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenTextCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenTextCheck.java
@@ -62,72 +62,72 @@ public class IllegalTokenTextCheck
     /**
      * Custom message for report if illegal regexp found
      * ignored if empty.
      */
     private String message = "";
 
     /**
      * Instantiates a new instance.
      */
     public IllegalTokenTextCheck() {
         super("$^"); // the empty language
     }
 
     @Override
     public int[] getDefaultTokens() {
         return new int[0];
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return Utils.getAllTokenIds();
     }
 
     @Override
     public int[] getRequiredTokens() {
         return new int[0];
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final String text = ast.getText();
         if (getRegexp().matcher(text).find()) {
             String message = getMessage();
             if (message.isEmpty()) {
                 message = MSG_KEY;
             }
             log(
                 ast.getLineNo(),
                 ast.getColumnNo(),
                 message,
                 getFormat());
         }
     }
 
     /**
      * Setter for message property.
      * @param message custom message which should be used
      *                 to report about violations.
      */
     public void setMessage(String message) {
-        this.message = null == message ? "" : message;
+        this.message = message == null ? "" : message;
     }
 
     /**
      * Getter for message property.
      * @return custom message which should be used
      * to report about violations.
      */
     public String getMessage() {
         return message;
     }
 
     /**
      * Set whether or not the match is case sensitive.
      * @param caseInsensitive true if the match is case insensitive.
      */
     public void setIgnoreCase(boolean caseInsensitive) {
         if (caseInsensitive) {
             setCompileFlags(Pattern.CASE_INSENSITIVE);
         }
     }
 }
