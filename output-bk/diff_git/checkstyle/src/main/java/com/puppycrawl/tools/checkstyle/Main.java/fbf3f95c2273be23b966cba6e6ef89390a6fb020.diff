diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
index a8418ed87..d5df68b13 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
@@ -1,97 +1,97 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2016 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle;
 
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.util.ArrayList;
+import java.util.LinkedList;
 import java.util.List;
 import java.util.Properties;
 import java.util.logging.ConsoleHandler;
 import java.util.logging.Filter;
 import java.util.logging.Level;
 import java.util.logging.LogRecord;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
 
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.CommandLineParser;
 import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.HelpFormatter;
 import org.apache.commons.cli.Options;
 import org.apache.commons.cli.ParseException;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
-import com.google.common.collect.Lists;
 import com.google.common.io.Closeables;
 import com.puppycrawl.tools.checkstyle.api.AuditListener;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 
 /**
  * Wrapper command line program for the Checker.
  * @author the original author or authors.
  *
  **/
 public final class Main {
     /** Logger for Main. */
     private static final Log LOG = LogFactory.getLog(Main.class);
 
     /** Width of CLI help option. */
     private static final int HELP_WIDTH = 100;
 
     /** Exit code returned when execution finishes with {@link CheckstyleException}. */
     private static final int EXIT_WITH_CHECKSTYLE_EXCEPTION_CODE = -2;
 
     /** Name for the option 'v'. */
     private static final String OPTION_V_NAME = "v";
 
     /** Name for the option 'c'. */
     private static final String OPTION_C_NAME = "c";
 
     /** Name for the option 'f'. */
     private static final String OPTION_F_NAME = "f";
 
     /** Name for the option 'p'. */
     private static final String OPTION_P_NAME = "p";
 
     /** Name for the option 'o'. */
     private static final String OPTION_O_NAME = "o";
 
     /** Name for the option 't'. */
     private static final String OPTION_T_NAME = "t";
 
     /** Name for the option '--tree'. */
     private static final String OPTION_TREE_NAME = "tree";
 
     /** Name for the option '-T'. */
     private static final String OPTION_CAPITAL_T_NAME = "T";
 
     /** Name for the option '--treeWithComments'. */
     private static final String OPTION_TREE_COMMENT_NAME = "treeWithComments";
 
     /** Name for the option '-j'. */
     private static final String OPTION_J_NAME = "j";
@@ -467,120 +467,120 @@ public final class Main {
      * @return a fresh new {@code AuditListener}
      * @exception FileNotFoundException when provided output location is not found
      */
     private static AuditListener createListener(String format,
                                                 String outputLocation)
             throws FileNotFoundException {
 
         // setup the output stream
         final OutputStream out;
         final boolean closeOutputStream;
         if (outputLocation == null) {
             out = System.out;
             closeOutputStream = false;
         }
         else {
             out = new FileOutputStream(outputLocation);
             closeOutputStream = true;
         }
 
         // setup a listener
         final AuditListener listener;
         if (XML_FORMAT_NAME.equals(format)) {
             listener = new XMLLogger(out, closeOutputStream);
 
         }
         else if (PLAIN_FORMAT_NAME.equals(format)) {
             listener = new DefaultLogger(out, closeOutputStream, out, false);
 
         }
         else {
             if (closeOutputStream) {
                 CommonUtils.close(out);
             }
             throw new IllegalStateException(String.format(
                     "Invalid output format. Found '%s' but expected '%s' or '%s'.",
                     format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));
         }
 
         return listener;
     }
 
     /**
      * Determines the files to process.
      * @param patternsToExclude The list of directory patterns to exclude from searching.
      * @param filesToProcess
      *        arguments that were not processed yet but shall be
      * @return list of files to process
      */
     private static List<File> getFilesToProcess(List<Pattern> patternsToExclude,
             String... filesToProcess) {
-        final List<File> files = Lists.newLinkedList();
+        final List<File> files = new LinkedList<>();
         for (String element : filesToProcess) {
             files.addAll(listFiles(new File(element), patternsToExclude));
         }
 
         return files;
     }
 
     /**
      * Traverses a specified node looking for files to check. Found files are added to a specified
      * list. Subdirectories are also traversed.
      * @param node
      *        the node to process
      * @param patternsToExclude The list of directory patterns to exclude from searching.
      * @return found files
      */
     private static List<File> listFiles(File node, List<Pattern> patternsToExclude) {
         // could be replaced with org.apache.commons.io.FileUtils.list() method
         // if only we add commons-io library
-        final List<File> result = Lists.newLinkedList();
+        final List<File> result = new LinkedList<>();
 
         if (node.canRead()) {
             if (node.isDirectory()) {
                 if (!isDirectoryExcluded(node.getAbsolutePath(), patternsToExclude)) {
                     final File[] files = node.listFiles();
                     // listFiles() can return null, so we need to check it
                     if (files != null) {
                         for (File element : files) {
                             result.addAll(listFiles(element, patternsToExclude));
                         }
                     }
                 }
             }
             else if (node.isFile()) {
                 result.add(node);
             }
         }
         return result;
     }
 
     /**
      * Checks if a directory {@code path} should be excluded based on if it matches one of the
      * patterns supplied.
      * @param path The path of the directory to check
      * @param patternsToExclude The list of directory patterns to exclude from searching.
      * @return True if the directory matches one of the patterns.
      */
     private static boolean isDirectoryExcluded(String path, List<Pattern> patternsToExclude) {
         boolean result = false;
 
         for (Pattern pattern : patternsToExclude) {
             if (pattern.matcher(path).find()) {
                 result = true;
                 break;
             }
         }
 
         return result;
     }
 
     /** Prints the usage information. **/
     private static void printUsage() {
         final HelpFormatter formatter = new HelpFormatter();
         formatter.setWidth(HELP_WIDTH);
         formatter.printHelp(String.format("java %s [options] -c <config.xml> file...",
                 Main.class.getName()), buildOptions());
     }
 
     /**
      * Builds and returns list of parameters supported by cli Checkstyle.
