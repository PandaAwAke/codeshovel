diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java b/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
index 33f5423a7..5ef6007d8 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
@@ -110,70 +110,70 @@ class PackageObjectFactory implements ModuleFactory {
                 LOG.debug(IGNORING_EXCEPTION_MESSAGE, ex);
             }
         }
         final LocalizedMessage exceptionMessage = new LocalizedMessage(0,
             Definitions.CHECKSTYLE_BUNDLE, UNABLE_TO_INSTANTIATE_EXCEPTION_MESSAGE,
             new String[] {name, joinPackageNamesWithClassName(name)},
             null, getClass(), null);
         throw new CheckstyleException(exceptionMessage.getMessage());
     }
 
     /**
      * Creates a new instance of a named class.
      * @param className the name of the class to instantiate.
      * @return the {@code Object} created by loader.
      * @throws CheckstyleException if an error occurs.
      */
     private Object createObject(String className)
         throws CheckstyleException {
         try {
             final Class<?> clazz = Class.forName(className, true, moduleClassLoader);
             final Constructor<?> declaredConstructor = clazz.getDeclaredConstructor();
             declaredConstructor.setAccessible(true);
             return declaredConstructor.newInstance();
         }
         catch (final ReflectiveOperationException | NoClassDefFoundError exception) {
             throw new CheckstyleException("Unable to find class for " + className, exception);
         }
     }
 
     /**
      * Creates a new instance of a class from a given name, or that name
      * concatenated with &quot;Check&quot;. If the name is
      * a class name, creates an instance of the named class. Otherwise, creates
      * an instance of a class name obtained by concatenating the given name
      * to a package name from a given list of package names.
      * @param name the name of a class.
      * @return the {@code Object} created by loader.
      * @throws CheckstyleException if an error occurs.
      */
     @Override
     public Object createModule(String name)
         throws CheckstyleException {
         try {
             return doMakeObject(name);
         }
         catch (final CheckstyleException ignored) {
             //try again with suffix "Check"
             try {
                 return doMakeObject(name + "Check");
             }
-            catch (final CheckstyleException ex2) {
+            catch (final CheckstyleException ex) {
                 final LocalizedMessage exceptionMessage = new LocalizedMessage(0,
                     Definitions.CHECKSTYLE_BUNDLE, UNABLE_TO_INSTANTIATE_EXCEPTION_MESSAGE,
                     new String[] {name, joinPackageNamesWithClassName(name)},
                     null, getClass(), null);
-                throw new CheckstyleException(exceptionMessage.getMessage(), ex2);
+                throw new CheckstyleException(exceptionMessage.getMessage(), ex);
             }
         }
     }
 
     /**
      * Creates a string by joining package names with a class name.
      * @param className name of the class for joining.
      * @return a string which is obtained by joining package names with a class name.
      */
     private String joinPackageNamesWithClassName(String className) {
         final Joiner joiner = Joiner.on(className + ", ").skipNulls();
         return joiner.join(packages) + className;
     }
 }
