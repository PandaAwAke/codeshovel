diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
index 9557a9db0..9ab1a80ae 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
@@ -328,76 +328,76 @@ public final class DetailAST extends CommonASTWithHiddenTokens {
         return resultNo;
     }
 
     /**
      * @return the token types that occur in the branch as a sorted set.
      */
     private BitSet getBranchTokenTypes() {
         // lazy init
         if (branchTokenTypes == null) {
 
             branchTokenTypes = new BitSet();
             branchTokenTypes.set(getType());
 
             // add union of all children
             DetailAST child = getFirstChild();
             while (child != null) {
                 final BitSet childTypes = child.getBranchTokenTypes();
                 branchTokenTypes.or(childTypes);
 
                 child = child.getNextSibling();
             }
         }
         return branchTokenTypes;
     }
 
     /**
      * Checks if this branch of the parse tree contains a token
      * of the provided type.
      * @param type a TokenType
      * @return true if and only if this branch (including this node)
      *     contains a token of type {@code type}.
      */
     public boolean branchContains(int type) {
         return getBranchTokenTypes().get(type);
     }
 
     /**
      * Returns the previous sibling or null if no such sibling exists.
      * @return the previous sibling or null if no such sibling exists.
      */
     public DetailAST getPreviousSibling() {
         return previousSibling;
     }
 
     /**
      * Returns the first child token that makes a specified type.
      * @param type the token type to match
      * @return the matching token, or null if no match
      */
     public DetailAST findFirstToken(int type) {
-        DetailAST retVal = null;
+        DetailAST returnValue = null;
         for (DetailAST ast = getFirstChild(); ast != null; ast = ast.getNextSibling()) {
             if (ast.getType() == type) {
-                retVal = ast;
+                returnValue = ast;
                 break;
             }
         }
-        return retVal;
+        return returnValue;
     }
 
     @Override
     public String toString() {
         return super.toString() + "[" + getLineNo() + "x" + getColumnNo() + "]";
     }
 
     @Override
     public DetailAST getNextSibling() {
         return (DetailAST) super.getNextSibling();
     }
 
     @Override
     public DetailAST getFirstChild() {
         return (DetailAST) super.getFirstChild();
     }
 
 }
