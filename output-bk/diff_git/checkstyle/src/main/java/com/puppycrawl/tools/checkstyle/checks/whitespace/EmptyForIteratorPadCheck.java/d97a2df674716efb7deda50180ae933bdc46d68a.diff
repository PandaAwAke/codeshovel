diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForIteratorPadCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForIteratorPadCheck.java
index 2efc880e6..ee9e868c1 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForIteratorPadCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForIteratorPadCheck.java
@@ -19,73 +19,73 @@
 
 package com.puppycrawl.tools.checkstyle.checks.whitespace;
 
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.checks.AbstractOptionCheck;
 
 /**
  * <p>Checks the padding of an empty for iterator; that is whether a
  * space is required at an empty for iterator, or such spaces are
  * forbidden. No check occurs if there is a line wrap at the iterator, as in
  * </p>
  * <pre class="body">
 for (Iterator foo = very.long.line.iterator();
       foo.hasNext();
      )
    </pre>
  * <p>
  * The policy to verify is specified using the {@link PadOption} class and
  * defaults to {@link PadOption#NOSPACE}.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="EmptyForIteratorPad"/&gt;
  * </pre>
  *
  * @author Rick Giles
  * @version 1.0
  */
 public class EmptyForIteratorPadCheck
     extends AbstractOptionCheck<PadOption>
 {
     /**
      * Sets the paren pad otion to nospace.
      */
     public EmptyForIteratorPadCheck()
     {
         super(PadOption.NOSPACE, PadOption.class);
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.FOR_ITERATOR,
         };
     }
 
     @Override
-    public void visitToken(DetailAST aAST)
+    public void visitToken(DetailAST ast)
     {
-        if (aAST.getChildCount() == 0) {
+        if (ast.getChildCount() == 0) {
             //empty for iterator. test pad after semi.
-            final DetailAST semi = aAST.getPreviousSibling();
+            final DetailAST semi = ast.getPreviousSibling();
             final String line = getLines()[semi.getLineNo() - 1];
             final int after = semi.getColumnNo() + 1;
             //don't check if at end of line
             if (after < line.length()) {
                 if ((PadOption.NOSPACE == getAbstractOption())
                     && (Character.isWhitespace(line.charAt(after))))
                 {
                     log(semi.getLineNo(), after, "ws.followed", ";");
                 }
                 else if ((PadOption.SPACE == getAbstractOption())
                          && !Character.isWhitespace(line.charAt(after)))
                 {
                     log(semi.getLineNo(), after, "ws.notFollowed", ";");
                 }
             }
         }
     }
 }
