diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java
index eb536f3b8..3b12dd033 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java
@@ -461,101 +461,101 @@ public class RequireThisCheck extends Check {
         private final String frameName;
 
         /**
          * Constructor -- invokable only via super() from subclasses.
          *
          * @param parent parent frame
          * @param frameName frame name
          */
         protected AbstractFrame(AbstractFrame parent, String frameName) {
             this.parent = parent;
             this.frameName = frameName;
             varIdents = Sets.newHashSet();
         }
 
         /**
          * Get the type of the frame.
          * @return a FrameType.
          */
         protected abstract FrameType getType();
 
         /**
          * Add a name to the frame.
          * @param identToAdd the name we're adding
          */
         private void addIdent(DetailAST identToAdd) {
             varIdents.add(identToAdd);
         }
 
         protected AbstractFrame getParent() {
             return parent;
         }
 
         protected String getFrameName() {
             return frameName;
         }
 
         /** Check whether the frame contains a field or a variable with the given name.
          * @param nameToFind the IDENT ast of the name we're looking for
          * @return whether it was found
          */
         boolean containsFieldOrVariable(DetailAST nameToFind) {
             return containsFieldOrVariableDef(varIdents, nameToFind);
         }
 
         /** Check whether the frame contains a given name.
          * @param nameToFind IDENT ast of the name we're looking for.
          * @param lookForMethod whether we are looking for a method name.
          * @return whether it was found.
          */
         protected AbstractFrame getIfContains(DetailAST nameToFind, boolean lookForMethod) {
-            AbstractFrame frame;
+            final AbstractFrame frame;
 
             if (!lookForMethod
                 && containsFieldOrVariable(nameToFind)) {
                 frame = this;
             }
             else {
                 frame = parent.getIfContains(nameToFind, lookForMethod);
             }
             return frame;
         }
 
         /**
          * Whether the set contains a declaration with the text of the specified
          * IDENT ast and it is declared in a proper position.
          * @param set the set of declarations.
          * @param ident the specified IDENT ast
          * @return true if the set contains a declaration with the text of the specified
          *         IDENT ast and it is declared in a proper position.
          */
         protected boolean containsFieldOrVariableDef(Set<DetailAST> set, DetailAST ident) {
             boolean result = false;
             for (DetailAST ast: set) {
                 if (isProperDefinition(ident, ast)) {
                     result = true;
                     break;
                 }
             }
             return result;
         }
 
         /**
          * Whether the definition is correspondent to the IDENT.
          * @param ident the IDENT ast to check.
          * @param ast the IDENT ast of the definition to check.
          * @return true if ast is correspondent to ident.
          */
         protected boolean isProperDefinition(DetailAST ident, DetailAST ast) {
             final String nameToFind = ident.getText();
             return nameToFind.equals(ast.getText())
                 && checkPosition(ast, ident);
         }
 
         /**
          * Whether the declaration is located before the checked ast.
          * @param ast1 the IDENT ast of the declaration.
          * @param ast2 the IDENT ast to check.
          * @return true, if the declaration is located before the checked ast.
          */
         private static boolean checkPosition(DetailAST ast1, DetailAST ast2) {
             boolean result = false;
