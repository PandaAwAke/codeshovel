diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
index ceae743e3..858d75e0c 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
@@ -58,100 +58,109 @@ public abstract class AbstractFileSetCheck
 
     /** {@inheritDoc} */
     @Override
     public void destroy()
     {
     }
 
     /** {@inheritDoc} */
     @Override
     public void beginProcessing(String charset)
     {
     }
 
     /** {@inheritDoc} */
     @Override
     public final TreeSet<LocalizedMessage> process(File file,
                                                    List<String> lines)
     {
         getMessageCollector().reset();
         // Process only what interested in
         if (Utils.fileExtensionMatches(file, fileExtensions)) {
             processFiltered(file, lines);
         }
         return getMessageCollector().getMessages();
     }
 
     /** {@inheritDoc} */
     @Override
     public void finishProcessing()
     {
     }
 
     /** {@inheritDoc} */
     @Override
     public final void setMessageDispatcher(MessageDispatcher dispatcher)
     {
         this.dispatcher = dispatcher;
     }
 
     /**
      * A message dispatcher is used to fire violation messages to
      * interested audit listeners.
      *
      * @return the current MessageDispatcher.
      */
     protected final MessageDispatcher getMessageDispatcher()
     {
         return dispatcher;
     }
 
+    /**
+     * @return file extensions that identify the files that pass the
+     * filter of this FileSetCheck.
+     */
+    public String[] getFileExtensions()
+    {
+        return fileExtensions;
+    }
+
     /**
      * Sets the file extensions that identify the files that pass the
      * filter of this FileSetCheck.
      * @param extensions the set of file extensions. A missing
      * initial '.' character of an extension is automatically added.
      */
     public final void setFileExtensions(String[] extensions)
     {
         if (extensions == null) {
             fileExtensions = null;
             return;
         }
 
         fileExtensions = new String[extensions.length];
         for (int i = 0; i < extensions.length; i++) {
             final String extension = extensions[i];
             if (extension.startsWith(".")) {
                 fileExtensions[i] = extension;
             }
             else {
                 fileExtensions[i] = "." + extension;
             }
         }
     }
 
     /**
      * Returns the collector for violation messages.
      * Subclasses can use the collector to find out the violation
      * messages to fire via the message dispatcher.
      *
      * @return the collector for localized messages.
      */
     protected final LocalizedMessages getMessageCollector()
     {
         return messages;
     }
 
     @Override
     public final void log(int line, String key, Object... args)
     {
         log(line, 0, key, args);
     }
 
     @Override
     public final void log(int lineNo, int colNo, String key,
             Object... args)
     {
         getMessageCollector().add(
             new LocalizedMessage(lineNo,
                                  colNo,
