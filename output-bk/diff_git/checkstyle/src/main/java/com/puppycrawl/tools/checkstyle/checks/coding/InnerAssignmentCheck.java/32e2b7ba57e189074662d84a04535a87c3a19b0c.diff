diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java
index 2bdd5a413..d6450b4cc 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java
@@ -59,126 +59,126 @@ public class InnerAssignmentCheck
         {TokenTypes.EXPR, TokenTypes.SLIST},
         {TokenTypes.VARIABLE_DEF},
         {TokenTypes.EXPR, TokenTypes.ELIST, TokenTypes.FOR_INIT},
         {TokenTypes.EXPR, TokenTypes.ELIST, TokenTypes.FOR_ITERATOR},
         {TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR}, {
             TokenTypes.RESOURCE,
             TokenTypes.RESOURCES,
             TokenTypes.RESOURCE_SPECIFICATION,
         },
         {TokenTypes.EXPR, TokenTypes.LAMBDA},
     };
 
     /**
      * List of allowed AST types from an assignment AST node
      * towards the root.
      */
     private static final int[][] CONTROL_CONTEXT = {
         {TokenTypes.EXPR, TokenTypes.LITERAL_DO},
         {TokenTypes.EXPR, TokenTypes.LITERAL_FOR},
         {TokenTypes.EXPR, TokenTypes.LITERAL_WHILE},
         {TokenTypes.EXPR, TokenTypes.LITERAL_IF},
         {TokenTypes.EXPR, TokenTypes.LITERAL_ELSE},
     };
 
     /**
      * List of allowed AST types from a comparison node (above an assignment)
      * towards the root.
      */
     private static final int[][] ALLOWED_ASSIGNMENT_IN_COMPARISON_CONTEXT = {
         {TokenTypes.EXPR, TokenTypes.LITERAL_WHILE, },
     };
 
     /**
      * The token types that identify comparison operators.
      */
     private static final int[] COMPARISON_TYPES = {
         TokenTypes.EQUAL,
         TokenTypes.GE,
         TokenTypes.GT,
         TokenTypes.LE,
         TokenTypes.LT,
         TokenTypes.NOT_EQUAL,
     };
 
     static {
         Arrays.sort(COMPARISON_TYPES);
     }
 
     @Override
     public int[] getDefaultTokens() {
-        return getAcceptableTokens();
+        return getRequiredTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
+        return getRequiredTokens();
+    }
+
+    @Override
+    public int[] getRequiredTokens() {
         return new int[] {
             TokenTypes.ASSIGN,            // '='
             TokenTypes.DIV_ASSIGN,        // "/="
             TokenTypes.PLUS_ASSIGN,       // "+="
             TokenTypes.MINUS_ASSIGN,      //"-="
             TokenTypes.STAR_ASSIGN,       // "*="
             TokenTypes.MOD_ASSIGN,        // "%="
             TokenTypes.SR_ASSIGN,         // ">>="
             TokenTypes.BSR_ASSIGN,        // ">>>="
             TokenTypes.SL_ASSIGN,         // "<<="
             TokenTypes.BXOR_ASSIGN,       // "^="
             TokenTypes.BOR_ASSIGN,        // "|="
             TokenTypes.BAND_ASSIGN,       // "&="
         };
     }
 
-    @Override
-    public int[] getRequiredTokens() {
-        return getAcceptableTokens();
-    }
-
     @Override
     public void visitToken(DetailAST ast) {
         if (!isInContext(ast, ALLOWED_ASSIGNMENT_CONTEXT)
                 && !isInNoBraceControlStatement(ast)
                 && !isInWhileIdiom(ast)) {
             log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY);
         }
     }
 
     /**
      * Determines if ast is in the body of a flow control statement without
      * braces. An example of such a statement would be
      * <p>
      * <pre>
      * if (y < 0)
      *     x = y;
      * </pre>
      * </p>
      * <p>
      * This leads to the following AST structure:
      * </p>
      * <p>
      * <pre>
      * LITERAL_IF
      *     LPAREN
      *     EXPR // test
      *     RPAREN
      *     EXPR // body
      *     SEMI
      * </pre>
      * </p>
      * <p>
      * We need to ensure that ast is in the body and not in the test.
      * </p>
      *
      * @param ast an assignment operator AST
      * @return whether ast is in the body of a flow control statement
      */
     private static boolean isInNoBraceControlStatement(DetailAST ast) {
         boolean result = false;
         if (isInContext(ast, CONTROL_CONTEXT)) {
             final DetailAST expr = ast.getParent();
             final AST exprNext = expr.getNextSibling();
             result = exprNext.getType() == TokenTypes.SEMI;
         }
         return result;
     }
 
     /**
      * Tests whether the given AST is used in the "assignment in while" idiom.
