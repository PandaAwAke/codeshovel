diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpOnFilenameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpOnFilenameCheck.java
index 2d090fcda..c0f000861 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpOnFilenameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpOnFilenameCheck.java
@@ -161,116 +161,112 @@ import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
  * can be located.
  * </p>
  *
  * <pre>
  * &lt;module name=&quot;RegexpOnFilename&quot;&gt;
  *   &lt;property name=&quot;folderPattern&quot; value=&quot;[\\/]src[\\/]&quot;/&gt;
  *   &lt;property name=&quot;fileNamePattern&quot; value=&quot;\\.(java|xml)$&quot;/&gt;
  *   &lt;property name=&quot;match&quot; value=&quot;false&quot;/&gt;
  * &lt;/module&gt;
  * </pre>
  * <p>
  * To configure the check to only allow file names to be camel case:
  * </p>
  *
  * <pre>
  * &lt;module name=&quot;RegexpOnFilename&quot;&gt;
  *   &lt;property name=&quot;fileNamePattern&quot;
  *     value=&quot;^([A-Z][a-z0-9]+\.?)+$&quot;/&gt;
  *   &lt;property name=&quot;match&quot; value=&quot;false&quot;/&gt;
  *   &lt;property name=&quot;ignoreFileNameExtensions&quot; value=&quot;true&quot;/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * @author Richard Veach
  */
 public class RegexpOnFilenameCheck extends AbstractFileSetCheck {
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_MATCH = "regexp.filename.match";
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_MISMATCH = "regexp.filename.mismatch";
 
     /** Compiled regexp to match a folder. */
     private Pattern folderPattern;
     /** Compiled regexp to match a file. */
     private Pattern fileNamePattern;
     /** Whether to look for a file name match or mismatch. */
     private boolean match = true;
     /** Whether to ignore the file's extension when looking for matches. */
     private boolean ignoreFileNameExtensions;
 
     /**
      * Setter for folder format.
      *
      * @param folderPattern format of folder.
-     * @throws org.apache.commons.beanutils.ConversionException if unable to
-     *         create Pattern object.
      */
-    public void setFolderPattern(String folderPattern) {
-        this.folderPattern = CommonUtils.createPattern(folderPattern);
+    public void setFolderPattern(Pattern folderPattern) {
+        this.folderPattern = folderPattern;
     }
 
     /**
      * Setter for file name format.
      *
      * @param fileNamePattern format of file.
-     * @throws org.apache.commons.beanutils.ConversionException if unable to
-     *         create Pattern object.
      */
-    public void setFileNamePattern(String fileNamePattern) {
-        this.fileNamePattern = CommonUtils.createPattern(fileNamePattern);
+    public void setFileNamePattern(Pattern fileNamePattern) {
+        this.fileNamePattern = fileNamePattern;
     }
 
     /**
      * Sets whether the check should look for a file name match or mismatch.
      *
      * @param match check's option for matching file names.
      */
     public void setMatch(boolean match) {
         this.match = match;
     }
 
     /**
      * Sets whether file name matching should drop the file extension or not.
      *
      * @param ignoreFileNameExtensions check's option for ignoring file extension.
      */
     public void setIgnoreFileNameExtensions(boolean ignoreFileNameExtensions) {
         this.ignoreFileNameExtensions = ignoreFileNameExtensions;
     }
 
     @Override
     public void init() {
         if (fileNamePattern == null && folderPattern == null) {
             fileNamePattern = CommonUtils.createPattern("\\s");
         }
     }
 
     @Override
     protected void processFiltered(File file, List<String> lines) throws CheckstyleException {
         final String fileName = getFileName(file);
         final String folderPath = getFolderPath(file);
 
         if (isMatchFolder(folderPath) && isMatchFile(fileName)) {
             log();
         }
     }
 
     /**
      * Retrieves the file name from the given {@code file}.
      *
      * @param file Input file to examine.
      * @return The file name.
      */
     private String getFileName(File file) {
         String fileName = file.getName();
 
         if (ignoreFileNameExtensions) {
             fileName = CommonUtils.getFileNameWithoutExtension(fileName);
         }
 
