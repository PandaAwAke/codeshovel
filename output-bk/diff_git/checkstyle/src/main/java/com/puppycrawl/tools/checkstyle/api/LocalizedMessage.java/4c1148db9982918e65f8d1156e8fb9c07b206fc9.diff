diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
index 889a6642a..25726aa53 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
@@ -163,110 +163,110 @@ public final class LocalizedMessage
      * @param args arguments for the translation
      * @param severityLevel severity level for the message
      * @param moduleId the id of the module the message is associated with
      * @param sourceClass the source class for the message
      * @param customMessage optional custom message overriding the default
      */
     public LocalizedMessage(int lineNo,
                             String bundle,
                             String key,
                             Object[] args,
                             SeverityLevel severityLevel,
                             String moduleId,
                             Class<?> sourceClass,
                             String customMessage) {
         this(lineNo, 0, bundle, key, args, severityLevel, moduleId,
                 sourceClass, customMessage);
     }
 
     /**
      * Creates a new <code>LocalizedMessage</code> instance. The column number
      * defaults to 0.
      *
      * @param lineNo line number associated with the message
      * @param bundle name of a resource bundle that contains error messages
      * @param key the key to locate the translation
      * @param args arguments for the translation
      * @param moduleId the id of the module the message is associated with
      * @param sourceClass the name of the source for the message
      * @param customMessage optional custom message overriding the default
      */
     public LocalizedMessage(
         int lineNo,
         String bundle,
         String key,
         Object[] args,
         String moduleId,
         Class<?> sourceClass,
         String customMessage) {
         this(lineNo, 0, bundle, key, args, DEFAULT_SEVERITY, moduleId,
                 sourceClass, customMessage);
     }
 
     @Override
     public boolean equals(Object object) {
         if (this == object) {
             return true;
         }
         if (object == null || getClass() != object.getClass()) {
             return false;
         }
-        final LocalizedMessage that = (LocalizedMessage) object;
-        return Objects.equals(lineNo, that.lineNo)
-                && Objects.equals(colNo, that.colNo)
-                && Objects.equals(severityLevel, that.severityLevel)
-                && Objects.equals(moduleId, that.moduleId)
-                && Objects.equals(key, that.key)
-                && Objects.equals(bundle, that.bundle)
-                && Objects.equals(sourceClass, that.sourceClass)
-                && Objects.equals(customMessage, that.customMessage)
-                && Arrays.equals(args, that.args);
+        final LocalizedMessage localizedMessage = (LocalizedMessage) object;
+        return Objects.equals(lineNo, localizedMessage.lineNo)
+                && Objects.equals(colNo, localizedMessage.colNo)
+                && Objects.equals(severityLevel, localizedMessage.severityLevel)
+                && Objects.equals(moduleId, localizedMessage.moduleId)
+                && Objects.equals(key, localizedMessage.key)
+                && Objects.equals(bundle, localizedMessage.bundle)
+                && Objects.equals(sourceClass, localizedMessage.sourceClass)
+                && Objects.equals(customMessage, localizedMessage.customMessage)
+                && Arrays.equals(args, localizedMessage.args);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(lineNo, colNo, severityLevel, moduleId, key, bundle, sourceClass,
                 customMessage, Arrays.hashCode(args));
     }
 
     /** Clears the cache. */
     public static void clearCache() {
         synchronized (BUNDLE_CACHE) {
             BUNDLE_CACHE.clear();
         }
     }
 
     /** @return the translated message **/
     public String getMessage() {
 
         final String customMessage = getCustomMessage();
         if (customMessage != null) {
             return customMessage;
         }
 
         try {
             // Important to use the default class loader, and not the one in
             // the GlobalProperties object. This is because the class loader in
             // the GlobalProperties is specified by the user for resolving
             // custom classes.
             final ResourceBundle bundle = getBundle(this.bundle);
             final String pattern = bundle.getString(key);
             return MessageFormat.format(pattern, args);
         }
         catch (final MissingResourceException ex) {
             // If the Check author didn't provide i18n resource bundles
             // and logs error messages directly, this will return
             // the author's original message
             return MessageFormat.format(key, args);
         }
     }
 
     /**
      * Returns the formatted custom message if one is configured.
      * @return the formatted custom message or <code>null</code>
      *          if there is no custom message
      */
     private String getCustomMessage() {
 
         if (customMessage == null) {
             return null;
         }
