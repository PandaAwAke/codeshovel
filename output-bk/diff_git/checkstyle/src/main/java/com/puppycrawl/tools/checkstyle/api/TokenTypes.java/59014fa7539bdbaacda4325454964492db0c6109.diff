diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java
index 50a05d29a..5308e2eff 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java
@@ -3389,145 +3389,178 @@ public final class TokenTypes
      * JSR14</a>
      * @see #TYPE_ARGUMENT
      * @see #WILDCARD_TYPE
      */
     public static final int TYPE_LOWER_BOUNDS =
         GeneratedJavaTokenTypes.TYPE_LOWER_BOUNDS;
 
     /**
      * An 'at' symbol - signifying an annotation instance or the prefix
      * to the interface literal signifying the definition of an annotation
      * declaration.
      *
      * @see <a href="http://www.jcp.org/en/jsr/detail?id=201">
      * JSR201</a>
      */
     public static final int AT = GeneratedJavaTokenTypes.AT;
 
     /**
      * A triple dot for variable-length parameters. This token only ever occurs
      * in a parameter declaration immediately after the type of the parameter.
      *
      * @see <a href="http://www.jcp.org/en/jsr/detail?id=201">
      * JSR201</a>
      */
     public static final int ELLIPSIS = GeneratedJavaTokenTypes.ELLIPSIS;
 
     /**
      * '&amp;' symbol when used in a generic upper or lower bounds constrain
      * e.g. {@code Comparable&lt;<? extends Serializable, CharSequence>}.
      */
     public static final int TYPE_EXTENSION_AND =
         GeneratedJavaTokenTypes.TYPE_EXTENSION_AND;
 
     /**
      * '&lt;' symbol signifying the start of type arguments or type
      * parameters.
      */
     public static final int GENERIC_START =
         GeneratedJavaTokenTypes.GENERIC_START;
 
     /**
      * '&gt;' symbol signifying the end of type arguments or type parameters.
      */
     public static final int GENERIC_END = GeneratedJavaTokenTypes.GENERIC_END;
 
     /**
      * Special lambda symbol '-&gt;'.
      */
     public static final int LAMBDA = GeneratedJavaTokenTypes.LAMBDA;
 
+    /**
+     * Begining of single line comment: '//'
+     */
+    public static final int SINGLE_LINE_COMMENT = GeneratedJavaTokenTypes.SINGLE_LINE_COMMENT;
+
+    /**
+     * Begining of block comment: '/*'
+     */
+    public static final int BLOCK_COMMENT_BEGIN = GeneratedJavaTokenTypes.BLOCK_COMMENT_BEGIN;
+
+    /**
+     * End of block comment: '* /'
+     */
+    public static final int BLOCK_COMMENT_END = GeneratedJavaTokenTypes.BLOCK_COMMENT_END;
+
+    /**
+     * Text of single-line or block comment.
+     */
+    public static final int COMMENT_CONTENT = GeneratedJavaTokenTypes.COMMENT_CONTENT;
+
     ////////////////////////////////////////////////////////////////////////
     // The interesting code goes here
     ////////////////////////////////////////////////////////////////////////
 
     /** maps from a token name to value */
     private static final ImmutableMap<String, Integer> TOKEN_NAME_TO_VALUE;
     /** maps from a token value to name */
     private static final String[] TOKEN_VALUE_TO_NAME;
 
     // initialise the constants
     static {
         final ImmutableMap.Builder<String, Integer> builder =
             ImmutableMap.builder();
         final Field[] fields = TokenTypes.class.getDeclaredFields();
         String[] tempTokenValueToName = new String[0];
         for (final Field f : fields) {
             // Only process the int declarations.
             if (f.getType() != Integer.TYPE) {
                 continue;
             }
 
             final String name = f.getName();
             try {
                 final int tokenValue = f.getInt(name);
                 builder.put(name, tokenValue);
                 if (tokenValue > tempTokenValueToName.length - 1) {
                     final String[] temp = new String[tokenValue + 1];
                     System.arraycopy(tempTokenValueToName, 0,
                                      temp, 0, tempTokenValueToName.length);
                     tempTokenValueToName = temp;
                 }
                 tempTokenValueToName[tokenValue] = name;
             }
             catch (final IllegalArgumentException e) {
                 e.printStackTrace();
                 System.exit(1);
             }
             catch (final IllegalAccessException e) {
                 e.printStackTrace();
                 System.exit(1);
             }
         }
 
         TOKEN_NAME_TO_VALUE = builder.build();
         TOKEN_VALUE_TO_NAME = tempTokenValueToName;
     }
 
     /**
      * Returns the name of a token for a given ID.
      * @param aID the ID of the token name to get
      * @return a token name
      */
     public static String getTokenName(int aID)
     {
         if (aID > TOKEN_VALUE_TO_NAME.length - 1) {
             throw new IllegalArgumentException("given id " + aID);
         }
         final String name = TOKEN_VALUE_TO_NAME[aID];
         if (name == null) {
             throw new IllegalArgumentException("given id " + aID);
         }
         return name;
     }
 
     /**
      * Returns the ID of a token for a given name.
      * @param aName the name of the token ID to get
      * @return a token ID
      */
     public static int getTokenId(String aName)
     {
         final Integer id = TOKEN_NAME_TO_VALUE.get(aName);
         if (id == null) {
             throw new IllegalArgumentException("given name " + aName);
         }
         return id.intValue();
     }
 
     /**
      * Returns the short description of a token for a given name.
      * @param aName the name of the token ID to get
      * @return a short description
      */
     public static String getShortDescription(String aName)
     {
         if (!TOKEN_NAME_TO_VALUE.containsKey(aName)) {
             throw new IllegalArgumentException("given name " + aName);
         }
 
         final String tokentypes =
             "com.puppycrawl.tools.checkstyle.api.tokentypes";
         final ResourceBundle bundle = ResourceBundle.getBundle(tokentypes);
         return bundle.getString(aName);
     }
+
+    /**
+     * Check that argument is SINGLE_LINE_COMMENT or BLOCK_COMMENT_BEGIN
+     * or BLOCK_COMMENT_END or COMMENT_CONTENT.
+     * @param aType token type
+     * @return true if aType is comment token type
+     */
+    public static boolean isCommentType(int aType) {
+        return aType == TokenTypes.SINGLE_LINE_COMMENT
+                || aType == TokenTypes.BLOCK_COMMENT_BEGIN
+                || aType == TokenTypes.BLOCK_COMMENT_END
+                || aType == TokenTypes.COMMENT_CONTENT;
+    }
 }
