diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java
index 70bb2980c..bdb0feaa1 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java
@@ -128,69 +128,69 @@ public class EmptyBlockCheck
         if (leftCurly != null) {
             if (getAbstractOption() == BlockOption.STMT) {
                 boolean emptyBlock;
                 if (leftCurly.getType() == TokenTypes.LCURLY) {
                     emptyBlock = leftCurly.getNextSibling().getType() != TokenTypes.CASE_GROUP;
                 }
                 else {
                     emptyBlock = leftCurly.getChildCount() <= 1;
                 }
                 if (emptyBlock) {
                     log(leftCurly.getLineNo(),
                         leftCurly.getColumnNo(),
                         MSG_KEY_BLOCK_NO_STMT,
                         ast.getText());
                 }
             }
             else if (!hasText(leftCurly)) {
                 log(leftCurly.getLineNo(),
                     leftCurly.getColumnNo(),
                     MSG_KEY_BLOCK_EMPTY,
                     ast.getText());
             }
         }
     }
 
     /**
      * @param slistAST a <code>DetailAST</code> value
      * @return whether the SLIST token contains any text.
      */
     protected boolean hasText(final DetailAST slistAST) {
         boolean retVal = false;
 
         final DetailAST rightCurly = slistAST.findFirstToken(TokenTypes.RCURLY);
         final DetailAST rcurlyAST = rightCurly != null
                 ? rightCurly : slistAST.getParent().findFirstToken(TokenTypes.RCURLY);
         final int slistLineNo = slistAST.getLineNo();
         final int slistColNo = slistAST.getColumnNo();
         final int rcurlyLineNo = rcurlyAST.getLineNo();
         final int rcurlyColNo = rcurlyAST.getColumnNo();
         final String[] lines = getLines();
         if (slistLineNo == rcurlyLineNo) {
             // Handle braces on the same line
             final String txt = lines[slistLineNo - 1]
                     .substring(slistColNo + 1, rcurlyColNo);
             if (StringUtils.isNotBlank(txt)) {
                 retVal = true;
             }
         }
         else {
             // check only whitespace of first & last lines
-            if (lines[slistLineNo - 1]
-                    .substring(slistColNo + 1).trim().length() != 0
-                    || lines[rcurlyLineNo - 1]
-                            .substring(0, rcurlyColNo).trim().length() != 0) {
+            if (!lines[slistLineNo - 1]
+                .substring(slistColNo + 1).trim().isEmpty()
+                    || !lines[rcurlyLineNo - 1]
+                .substring(0, rcurlyColNo).trim().isEmpty()) {
                 retVal = true;
             }
             else {
                 // check if all lines are also only whitespace
                 for (int i = slistLineNo; i < rcurlyLineNo - 1; i++) {
-                    if (lines[i].trim().length() > 0) {
+                    if (!lines[i].trim().isEmpty()) {
                         retVal = true;
                         break;
                     }
                 }
             }
         }
         return retVal;
     }
 }
