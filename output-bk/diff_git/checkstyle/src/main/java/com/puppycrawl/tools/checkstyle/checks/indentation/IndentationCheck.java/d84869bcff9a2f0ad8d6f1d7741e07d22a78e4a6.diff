diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheck.java
index 00c7e19ac..c4064af74 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheck.java
@@ -21,335 +21,335 @@ package com.puppycrawl.tools.checkstyle.checks.indentation;
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FastStack;
 
 // TODO: allow preset indentation styles (IE... GNU style, Sun style, etc...)?
 
 // TODO: optionally make imports (and other?) statements required to start
 //   line? -- but maybe this should be a different check
 
 // TODO: optionally allow array children, throws clause, etc...
 //   to be of any indentation > required, for emacs-style indentation
 
 // TODO: this is not illegal, but probably should be:
 //        myfunc3(11, 11, Integer.
 //            getInteger("mytest").intValue(),  // this should be in 4 more
 //            11);
 
 // TODO: any dot-based indentation doesn't work (at least not yet...) the
 //  problem is that we don't know which way an expression tree will be built
 //  and with dot trees, they are built backwards.  This means code like
 //
 //  org.blah.mystuff
 //      .myclass.getFactoryObject()
 //          .objFunc().otherMethod();
 // and
 //  return ((MethodCallHandler) parent)
 //      .findContainingMethodCall(this);
 //  is all checked at the level of the first line.  Simple dots are actually
 // checked but the method call handler will have to be changed drastically
 // to fix the above...
 
 
 /**
  * Checks correct indentation of Java Code.
  *
  * <p>
  * The basic idea behind this is that while
  * pretty printers are sometimes convenient for bulk reformats of
  * legacy code, they often either aren't configurable enough or
  * just can't anticipate how format should be done.  Sometimes this is
  * personal preference, other times it is practical experience.  In any
  * case, this check should just ensure that a minimal set of indentation
  * rules are followed.
  * </p>
  *
  * <p>
  * Implementation --
  *  Basically, this check requests visitation for all handled token
  *  types (those tokens registered in the HandlerFactory).  When visitToken
  *  is called, a new ExpressionHandler is created for the AST and pushed
- *  onto the mHandlers stack.  The new handler then checks the indentation
+ *  onto the handlers stack.  The new handler then checks the indentation
  *  for the currently visiting AST.  When leaveToken is called, the
  *  ExpressionHandler is popped from the stack.
  * </p>
  *
  * <p>
  *  While on the stack the ExpressionHandler can be queried for the
  *  indentation level it suggests for children as well as for other
  *  values.
  * </p>
  *
  * <p>
  *  While an ExpressionHandler checks the indentation level of its own
  *  AST, it typically also checks surrounding ASTs.  For instance, a
  *  while loop handler checks the while loop as well as the braces
  *  and immediate children.
  * </p>
  * <pre>
  *   - handler class -to-&gt; ID mapping kept in Map
  *   - parent passed in during construction
  *   - suggest child indent level
  *   - allows for some tokens to be on same line (ie inner classes OBJBLOCK)
  *     and not increase indentation level
  *   - looked at using double dispatch for suggestedChildLevel(), but it
  *     doesn't seem worthwhile, at least now
  *   - both tabs and spaces are considered whitespace in front of the line...
  *     tabs are converted to spaces
  *   - block parents with parens -- for, while, if, etc... -- are checked that
  *     they match the level of the parent
  * </pre>
  *
  * @author jrichard
  * @author o_sukhodolsky
  * @author Maikel Steneker
  * @author maxvetrenko
  */
 public class IndentationCheck extends Check
 {
     /** Default indentation amount - based on Sun */
     private static final int DEFAULT_INDENTATION = 4;
 
     /** how many tabs or spaces to use */
-    private int mBasicOffset = DEFAULT_INDENTATION;
+    private int basicOffset = DEFAULT_INDENTATION;
 
     /** how much to indent a case label */
-    private int mCaseIndentationAmount = DEFAULT_INDENTATION;
+    private int caseIndentationAmount = DEFAULT_INDENTATION;
 
     /** how far brace should be indented when on next line */
-    private int mBraceAdjustment;
+    private int braceAdjustment;
 
     /** how far throws should be indented when on next line */
-    private int mThrowsIndentationAmount = DEFAULT_INDENTATION;
+    private int throwsIndentationAmount = DEFAULT_INDENTATION;
 
     /** how much to indent an array initialization when on next line */
-    private int mArrayInitIndentationAmount = DEFAULT_INDENTATION;
+    private int arrayInitIndentationAmount = DEFAULT_INDENTATION;
 
     /** how far continuation line should be indented when line-wrapping is present */
-    private int mLineWrappingIndentation = DEFAULT_INDENTATION;
+    private int lineWrappingIndentation = DEFAULT_INDENTATION;
 
     /**
      * Force strict condition in line wrapping case. If value is true, line wrap indent
      * have to be same as lineWrappingIndentation parameter, if value is false, line wrap indent
-     * have to be not less than mLineWrappingIndentation parameter.
+     * have to be not less than lineWrappingIndentation parameter.
      */
-    private boolean mForceStrictCondition;
+    private boolean forceStrictCondition;
 
     /** handlers currently in use */
-    private final FastStack<ExpressionHandler> mHandlers =
+    private final FastStack<ExpressionHandler> handlers =
         FastStack.newInstance();
 
     /** factory from which handlers are distributed */
-    private final HandlerFactory mHandlerFactory = new HandlerFactory();
+    private final HandlerFactory handlerFactory = new HandlerFactory();
 
     /** Creates a new instance of IndentationCheck. */
     public IndentationCheck()
     {
     }
 
     /**
      * Get forcing strict condition.
-     * @return mForceStrictCondition value.
+     * @return forceStrictCondition value.
      */
     public boolean getForceStrictCondition()
     {
-        return mForceStrictCondition;
+        return forceStrictCondition;
     }
 
     /**
      * Set forcing strict condition.
-     * @param aValue user's value of mForceStrictCondition.
+     * @param value user's value of forceStrictCondition.
      */
-    public void setForceStrictCondition(boolean aValue)
+    public void setForceStrictCondition(boolean value)
     {
-        mForceStrictCondition = aValue;
+        forceStrictCondition = value;
     }
 
     /**
      * Set the basic offset.
      *
-     * @param aBasicOffset   the number of tabs or spaces to indent
+     * @param basicOffset   the number of tabs or spaces to indent
      */
-    public void setBasicOffset(int aBasicOffset)
+    public void setBasicOffset(int basicOffset)
     {
-        mBasicOffset = aBasicOffset;
+        this.basicOffset = basicOffset;
     }
 
     /**
      * Get the basic offset.
      *
      * @return the number of tabs or spaces to indent
      */
     public int getBasicOffset()
     {
-        return mBasicOffset;
+        return basicOffset;
     }
 
     /**
      * Adjusts brace indentation (positive offset).
      *
-     * @param aAdjustmentAmount   the brace offset
+     * @param adjustmentAmount   the brace offset
      */
-    public void setBraceAdjustment(int aAdjustmentAmount)
+    public void setBraceAdjustment(int adjustmentAmount)
     {
-        mBraceAdjustment = aAdjustmentAmount;
+        braceAdjustment = adjustmentAmount;
     }
 
     /**
      * Get the brace adjustment amount.
      *
      * @return the positive offset to adjust braces
      */
     public int getBraceAdjustement()
     {
-        return mBraceAdjustment;
+        return braceAdjustment;
     }
 
     /**
      * Set the case indentation level.
      *
-     * @param aAmount   the case indentation level
+     * @param amount   the case indentation level
      */
-    public void setCaseIndent(int aAmount)
+    public void setCaseIndent(int amount)
     {
-        mCaseIndentationAmount = aAmount;
+        caseIndentationAmount = amount;
     }
 
     /**
      * Get the case indentation level.
      *
      * @return the case indentation level
      */
     public int getCaseIndent()
     {
-        return mCaseIndentationAmount;
+        return caseIndentationAmount;
     }
 
     /**
      * Set the throws indentation level.
      *
-     * @param aThrowsIndent the throws indentation level
+     * @param throwsIndent the throws indentation level
      */
-    public void setThrowsIndent(int aThrowsIndent)
+    public void setThrowsIndent(int throwsIndent)
     {
-        mThrowsIndentationAmount = aThrowsIndent;
+        throwsIndentationAmount = throwsIndent;
     }
 
     /**
      * Get the throws indentation level.
      *
      * @return the throws indentation level
      */
     public int getThrowsIndent()
     {
-        return this.mThrowsIndentationAmount;
+        return this.throwsIndentationAmount;
     }
 
     /**
      * Set the array initialisation indentation level.
      *
-     * @param aArrayInitIndent the array initialisation indentation level
+     * @param arrayInitIndent the array initialisation indentation level
      */
-    public void setArrayInitIndent(int aArrayInitIndent)
+    public void setArrayInitIndent(int arrayInitIndent)
     {
-        mArrayInitIndentationAmount = aArrayInitIndent;
+        arrayInitIndentationAmount = arrayInitIndent;
     }
 
     /**
      * Get the line-wrapping indentation level.
      *
      * @return the initialisation indentation level
      */
     public int getArrayInitIndent()
     {
-        return this.mArrayInitIndentationAmount;
+        return this.arrayInitIndentationAmount;
     }
 
     /**
      * Get the array line-wrapping indentation level.
      *
      * @return the line-wrapping indentation level
      */
     public int getLineWrappingIndentation()
     {
-        return mLineWrappingIndentation;
+        return lineWrappingIndentation;
     }
 
 
     /**
      * Set the line-wrapping indentation level.
      *
-     * @param aLineWrappingIndentation the line-wrapping indentation level
+     * @param lineWrappingIndentation the line-wrapping indentation level
      */
-    public void setLineWrappingIndentation(int aLineWrappingIndentation)
+    public void setLineWrappingIndentation(int lineWrappingIndentation)
     {
-        mLineWrappingIndentation = aLineWrappingIndentation;
+        this.lineWrappingIndentation = lineWrappingIndentation;
     }
 
     /**
      * Log an error message.
      *
-     * @param aLine the line number where the error was found
-     * @param aKey the message that describes the error
-     * @param aArgs the details of the message
+     * @param line the line number where the error was found
+     * @param key the message that describes the error
+     * @param args the details of the message
      *
      * @see java.text.MessageFormat
      */
-    public void indentationLog(int aLine, String aKey, Object... aArgs)
+    public void indentationLog(int line, String key, Object... args)
     {
-        super.log(aLine, aKey, aArgs);
+        super.log(line, key, args);
     }
 
     /**
      * Get the width of a tab.
      *
      * @return the width of a tab
      */
     public int getIndentationTabWidth()
     {
         return getTabWidth();
     }
 
     @Override
     public int[] getDefaultTokens()
     {
-        return mHandlerFactory.getHandledTypes();
+        return handlerFactory.getHandledTypes();
     }
 
     @Override
-    public void beginTree(DetailAST aAst)
+    public void beginTree(DetailAST ast)
     {
-        mHandlerFactory.clearCreatedHandlers();
-        mHandlers.clear();
-        mHandlers.push(new PrimordialHandler(this));
+        handlerFactory.clearCreatedHandlers();
+        handlers.clear();
+        handlers.push(new PrimordialHandler(this));
     }
 
     @Override
-    public void visitToken(DetailAST aAST)
+    public void visitToken(DetailAST ast)
     {
-        final ExpressionHandler handler = mHandlerFactory.getHandler(this, aAST,
-            mHandlers.peek());
-        mHandlers.push(handler);
+        final ExpressionHandler handler = handlerFactory.getHandler(this, ast,
+            handlers.peek());
+        handlers.push(handler);
         try {
             handler.checkIndentation();
         }
         catch (final NullPointerException npe) {
             npe.printStackTrace();
         }
     }
 
     @Override
-    public void leaveToken(DetailAST aAST)
+    public void leaveToken(DetailAST ast)
     {
-        mHandlers.pop();
+        handlers.pop();
     }
 
     /**
      * Accessor for the handler factory.
      *
      * @return the handler factory
      */
     final HandlerFactory getHandlerFactory()
     {
-        return mHandlerFactory;
+        return handlerFactory;
     }
-}
+}
\ No newline at end of file
