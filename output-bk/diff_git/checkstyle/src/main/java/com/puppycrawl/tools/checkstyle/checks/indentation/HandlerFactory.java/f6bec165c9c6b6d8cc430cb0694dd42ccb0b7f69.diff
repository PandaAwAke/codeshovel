diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java
index 1cbe5c4fb..59df38f8c 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java
@@ -131,54 +131,54 @@ public class HandlerFactory {
      *
      * @param indentCheck   the indentation check
      * @param ast           ast to handle
      * @param parent        the handler parent of this AST
      *
      * @return the ExpressionHandler for ast
      */
     public AbstractExpressionHandler getHandler(IndentationCheck indentCheck,
         DetailAST ast, AbstractExpressionHandler parent) {
         final AbstractExpressionHandler resultHandler;
         final AbstractExpressionHandler handler =
             createdHandlers.get(ast);
         if (handler != null) {
             resultHandler = handler;
         }
         else if (ast.getType() == TokenTypes.METHOD_CALL) {
             resultHandler = createMethodCallHandler(indentCheck, ast, parent);
         }
         else {
             final Constructor<?> handlerCtor = typeHandlers.get(ast.getType());
             resultHandler = (AbstractExpressionHandler) CommonUtils.invokeConstructor(
                 handlerCtor, indentCheck, ast, parent);
         }
         return resultHandler;
     }
 
     /**
      * Create new instance of handler for METHOD_CALL.
      *
      * @param indentCheck   the indentation check
      * @param ast           ast to handle
      * @param parent        the handler parent of this AST
      *
      * @return new instance.
      */
     private AbstractExpressionHandler createMethodCallHandler(IndentationCheck indentCheck,
         DetailAST ast, AbstractExpressionHandler parent) {
         AbstractExpressionHandler theParent = parent;
         DetailAST astNode = ast.getFirstChild();
         while (astNode.getType() == TokenTypes.DOT) {
             astNode = astNode.getFirstChild();
         }
         if (isHandledType(astNode.getType())) {
             theParent = getHandler(indentCheck, astNode, theParent);
             createdHandlers.put(astNode, theParent);
         }
         return new MethodCallHandler(indentCheck, ast, theParent);
     }
 
     /** Clears cache of created handlers. */
-    void clearCreatedHandlers() {
+    public void clearCreatedHandlers() {
         createdHandlers.clear();
     }
 }
