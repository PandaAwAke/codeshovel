diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java
index 0c565e629..9e7ae5808 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java
@@ -27,112 +27,111 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * <p>
  * Checks for overly complicated boolean return statements.
  * Idea shamelessly stolen from the equivalent PMD rule (pmd.sourceforge.net).
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="SimplifyBooleanReturn"/&gt;
  * </pre>
  * @author Lars KÃ¼hne
  */
 public class SimplifyBooleanReturnCheck
     extends AbstractCheck {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "simplify.boolReturn";
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.LITERAL_IF};
     }
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getRequiredTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         // LITERAL_IF has the following four or five children:
         // '('
         // condition
         // ')'
         // thenStatement
         // [ LITERAL_ELSE (with the elseStatement as a child) ]
 
         // don't bother if this is not if then else
         final AST elseLiteral =
             ast.findFirstToken(TokenTypes.LITERAL_ELSE);
-        if (elseLiteral == null) {
-            return;
-        }
-        final AST elseStatement = elseLiteral.getFirstChild();
+        if (elseLiteral != null) {
+            final AST elseStatement = elseLiteral.getFirstChild();
 
-        // skip '(' and ')'
-        final AST condition = ast.getFirstChild().getNextSibling();
-        final AST thenStatement = condition.getNextSibling().getNextSibling();
+            // skip '(' and ')'
+            final AST condition = ast.getFirstChild().getNextSibling();
+            final AST thenStatement = condition.getNextSibling().getNextSibling();
 
-        if (canReturnOnlyBooleanLiteral(thenStatement)
-            && canReturnOnlyBooleanLiteral(elseStatement)) {
-            log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY);
+            if (canReturnOnlyBooleanLiteral(thenStatement)
+                && canReturnOnlyBooleanLiteral(elseStatement)) {
+                log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY);
+            }
         }
     }
 
     /**
      * Returns if an AST is a return statement with a boolean literal
      * or a compound statement that contains only such a return statement.
      *
      * <p>Returns {@code true} iff ast represents
      * <br/>
      * <pre>
      * return true/false;
      * </pre>
      * or
      * <br/>
      * <pre>
      * {
      *   return true/false;
      * }
      * </pre>
      *
      * @param ast the syntax tree to check
      * @return if ast is a return statement with a boolean literal.
      */
     private static boolean canReturnOnlyBooleanLiteral(AST ast) {
         if (isBooleanLiteralReturnStatement(ast)) {
             return true;
         }
 
         final AST firstStatement = ast.getFirstChild();
         return isBooleanLiteralReturnStatement(firstStatement);
     }
 
     /**
      * Returns if an AST is a return statement with a boolean literal.
      *
      * <p>Returns {@code true} iff ast represents
      * <br/>
      * <pre>
      * return true/false;
      * </pre>
      *
      * @param ast the syntax tree to check
      * @return if ast is a return statement with a boolean literal.
      */
     private static boolean isBooleanLiteralReturnStatement(AST ast) {
         boolean booleanReturnStatement = false;
 
         if (ast != null && ast.getType() == TokenTypes.LITERAL_RETURN) {
             final AST expr = ast.getFirstChild();
 
