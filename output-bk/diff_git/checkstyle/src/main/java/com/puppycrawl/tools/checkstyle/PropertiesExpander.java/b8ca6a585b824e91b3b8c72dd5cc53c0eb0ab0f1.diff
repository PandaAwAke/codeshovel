diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PropertiesExpander.java b/src/main/java/com/puppycrawl/tools/checkstyle/PropertiesExpander.java
index 7b09127e3..d38678245 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/PropertiesExpander.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PropertiesExpander.java
@@ -1,55 +1,55 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2014  Oliver Burn
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle;
 
 import java.util.Properties;
 
 /**
  * Resolves external properties from an
  * underlying <code>Properties</code> object.
  *
  * @author lkuehne
  */
 public final class PropertiesExpander
     implements PropertyResolver
 {
     /** the underlying Properties object. */
-    private final Properties mProperties;
+    private final Properties properties;
 
     /**
      * Creates a new PropertiesExpander.
-     * @param aProperties the underlying properties to use for
+     * @param properties the underlying properties to use for
      * property resolution.
      * @throws IllegalArgumentException indicates null was passed
      */
-    public PropertiesExpander(Properties aProperties)
+    public PropertiesExpander(Properties properties)
     {
-        if (aProperties == null) {
+        if (properties == null) {
             throw new IllegalArgumentException("cannot pass null");
         }
-        mProperties = aProperties;
+        this.properties = properties;
     }
 
     /** {@inheritDoc} */
     @Override
-    public String resolve(String aPropertyName)
+    public String resolve(String propertyName)
     {
-        return mProperties.getProperty(aPropertyName);
+        return properties.getProperty(propertyName);
     }
 }
