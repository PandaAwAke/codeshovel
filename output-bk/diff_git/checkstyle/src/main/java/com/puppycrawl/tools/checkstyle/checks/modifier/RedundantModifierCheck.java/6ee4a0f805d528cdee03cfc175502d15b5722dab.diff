diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
index 3f46102f3..68d777cbe 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
@@ -287,101 +287,101 @@ public class RedundantModifierCheck
         if (!isClassPublic(classDef) && !isClassProtected(classDef)) {
             checkForRedundantPublicModifier(classCtorAst);
         }
     }
 
     /**
      * Checks if given ast has redundant public modifier.
      * @param ast ast
      */
     private void checkForRedundantPublicModifier(DetailAST ast) {
         final DetailAST astModifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
         DetailAST astModifier = astModifiers.getFirstChild();
         while (astModifier != null) {
             if (astModifier.getType() == TokenTypes.LITERAL_PUBLIC) {
                 log(astModifier.getLineNo(), astModifier.getColumnNo(),
                         MSG_KEY, astModifier.getText());
             }
 
             astModifier = astModifier.getNextSibling();
         }
     }
 
     /**
      * Checks if given class ast has protected modifier.
      * @param classDef class ast
      * @return true if class is protected, false otherwise
      */
     private static boolean isClassProtected(DetailAST classDef) {
         final DetailAST classModifiers =
                 classDef.findFirstToken(TokenTypes.MODIFIERS);
         return classModifiers.branchContains(TokenTypes.LITERAL_PROTECTED);
     }
 
     /**
      * Checks if given class is accessible from "public" scope.
      * @param ast class def to check
      * @return true if class is accessible from public scope,false otherwise
      */
     private static boolean isClassPublic(DetailAST ast) {
         boolean isAccessibleFromPublic = false;
         final boolean isMostOuterScope = ast.getParent() == null;
         final DetailAST modifiersAst = ast.findFirstToken(TokenTypes.MODIFIERS);
         final boolean hasPublicModifier = modifiersAst.branchContains(TokenTypes.LITERAL_PUBLIC);
 
         if (isMostOuterScope) {
             isAccessibleFromPublic = hasPublicModifier;
         }
         else {
             final DetailAST parentClassAst = ast.getParent().getParent();
 
-            if (parentClassAst.getType() == TokenTypes.INTERFACE_DEF || hasPublicModifier) {
+            if (hasPublicModifier || parentClassAst.getType() == TokenTypes.INTERFACE_DEF) {
                 isAccessibleFromPublic = isClassPublic(parentClassAst);
             }
         }
 
         return isAccessibleFromPublic;
     }
 
     /**
      * Checks if current AST node is member of Enum.
      * @param ast AST node
      * @return true if it is an enum member
      */
     private static boolean isEnumMember(DetailAST ast) {
         final DetailAST parentTypeDef = ast.getParent().getParent();
         return parentTypeDef.getType() == TokenTypes.ENUM_DEF;
     }
 
     /**
      * Checks if current AST node is member of Interface or Annotation, not of their subnodes.
      * @param ast AST node
      * @return true or false
      */
     private static boolean isInterfaceOrAnnotationMember(DetailAST ast) {
         DetailAST parentTypeDef = ast.getParent();
 
         if (parentTypeDef != null) {
             parentTypeDef = parentTypeDef.getParent();
         }
         return parentTypeDef != null
                 && (parentTypeDef.getType() == TokenTypes.INTERFACE_DEF
                     || parentTypeDef.getType() == TokenTypes.ANNOTATION_DEF);
     }
 
     /**
      * Checks if method definition is annotated with
      * <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/SafeVarargs.html">
      * SafeVarargs</a> annotation
      * @param methodDef method definition node
      * @return true or false
      */
     private static boolean isAnnotatedWithSafeVarargs(DetailAST methodDef) {
         boolean result = false;
         final List<DetailAST> methodAnnotationsList = getMethodAnnotationsList(methodDef);
         for (DetailAST annotationNode : methodAnnotationsList) {
             if ("SafeVarargs".equals(annotationNode.getLastChild().getText())) {
                 result = true;
                 break;
             }
         }
         return result;
