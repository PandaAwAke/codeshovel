diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java
index 6ad00c62c..1b891aa04 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java
@@ -56,101 +56,101 @@ public class LineWrappingHandler {
          * @param val value.
          * @return enum instance.
          *
          * @noinspection BooleanParameter
          */
         public static LineWrappingOptions ofBoolean(boolean val) {
             if (val) {
                 return IGNORE_FIRST_LINE;
             }
             else {
                 return NONE;
             }
         }
     }
 
     /**
      * The current instance of {@code IndentationCheck} class using this
      * handler. This field used to get access to private fields of
      * IndentationCheck instance.
      */
     private final IndentationCheck indentCheck;
 
     /**
      * Sets values of class field, finds last node and calculates indentation level.
      *
      * @param instance
      *            instance of IndentationCheck.
      */
     public LineWrappingHandler(IndentationCheck instance) {
         indentCheck = instance;
     }
 
     /**
      * Checks line wrapping into expressions and definitions using property
      * 'lineWrappingIndentation'.
      *
      * @param firstNode First node to start examining.
      * @param lastNode Last node to examine inclusively.
      */
     public void checkIndentation(DetailAST firstNode, DetailAST lastNode) {
         checkIndentation(firstNode, lastNode, indentCheck.getLineWrappingIndentation());
     }
 
     /**
      * Checks line wrapping into expressions and definitions.
      *
      * @param firstNode First node to start examining.
      * @param lastNode Last node to examine inclusively.
      * @param indentLevel Indentation all wrapped lines should use.
      */
-    public void checkIndentation(DetailAST firstNode, DetailAST lastNode, int indentLevel) {
+    private void checkIndentation(DetailAST firstNode, DetailAST lastNode, int indentLevel) {
         checkIndentation(firstNode, lastNode, indentLevel,
                 -1, LineWrappingOptions.IGNORE_FIRST_LINE);
     }
 
     /**
      * Checks line wrapping into expressions and definitions.
      *
      * @param firstNode First node to start examining.
      * @param lastNode Last node to examine inclusively.
      * @param indentLevel Indentation all wrapped lines should use.
      * @param startIndent Indentation first line before wrapped lines used.
      * @param ignoreFirstLine Test if first line's indentation should be checked or not.
      */
     public void checkIndentation(DetailAST firstNode, DetailAST lastNode, int indentLevel,
             int startIndent, LineWrappingOptions ignoreFirstLine) {
         final NavigableMap<Integer, DetailAST> firstNodesOnLines = collectFirstNodes(firstNode,
                 lastNode);
 
         final DetailAST firstLineNode = firstNodesOnLines.get(firstNodesOnLines.firstKey());
         if (firstLineNode.getType() == TokenTypes.AT) {
             DetailAST node = firstLineNode.getParent();
             while (node != null) {
                 if (node.getType() == TokenTypes.ANNOTATION) {
                     final DetailAST atNode = node.getFirstChild();
                     final NavigableMap<Integer, DetailAST> annotationLines =
                         firstNodesOnLines.subMap(
                             node.getLineNo(),
                             true,
                             getNextNodeLine(firstNodesOnLines, node),
                             true
                         );
                     checkAnnotationIndentation(atNode, annotationLines, indentLevel);
                 }
                 node = node.getNextSibling();
             }
         }
 
         if (ignoreFirstLine == LineWrappingOptions.IGNORE_FIRST_LINE) {
             // First node should be removed because it was already checked before.
             firstNodesOnLines.remove(firstNodesOnLines.firstKey());
         }
 
         final int firstNodeIndent;
         if (startIndent == -1) {
             firstNodeIndent = getLineStart(firstLineNode);
         }
         else {
             firstNodeIndent = startIndent;
         }
         final int currentIndent = firstNodeIndent + indentLevel;
