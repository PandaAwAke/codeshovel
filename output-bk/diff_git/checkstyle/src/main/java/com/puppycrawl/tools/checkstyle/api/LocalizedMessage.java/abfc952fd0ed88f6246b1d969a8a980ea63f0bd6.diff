diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
index 22455383c..205652113 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
@@ -20,340 +20,340 @@
 package com.puppycrawl.tools.checkstyle.api;
 
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.Reader;
 import java.io.Serializable;
 import java.net.URL;
 import java.net.URLConnection;
 import java.text.MessageFormat;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Locale;
 import java.util.Map;
 import java.util.MissingResourceException;
 import java.util.Objects;
 import java.util.PropertyResourceBundle;
 import java.util.ResourceBundle;
 import java.util.ResourceBundle.Control;
 
 /**
  * Represents a message that can be localised. The translations come from
  * message.properties files. The underlying implementation uses
  * java.text.MessageFormat.
  *
  * @author Oliver Burn
  * @author lkuehne
  */
 public final class LocalizedMessage
     implements Comparable<LocalizedMessage>, Serializable {
     /** Required for serialization. */
     private static final long serialVersionUID = 5675176836184862150L;
 
     /** The locale to localise messages to **/
     private static Locale sLocale = Locale.getDefault();
 
     /**
      * A cache that maps bundle names to RessourceBundles.
      * Avoids repetitive calls to ResourceBundle.getBundle().
      */
     private static final Map<String, ResourceBundle> BUNDLE_CACHE =
         Collections.synchronizedMap(new HashMap<String, ResourceBundle>());
 
     /** The default severity level if one is not specified */
     private static final SeverityLevel DEFAULT_SEVERITY = SeverityLevel.ERROR;
 
     /** The line number **/
     private final int lineNo;
     /** The column number **/
-    private final int colNo;
+    private final int columnNo;
 
     /** The severity level **/
     private final SeverityLevel severityLevel;
 
     /** The id of the module generating the message. */
     private final String moduleId;
 
     /** Key for the message format **/
     private final String key;
 
     /** Arguments for MessageFormat **/
     private final Object[] args;
 
     /** Name of the resource bundle to get messages from **/
     private final String bundle;
 
     /** Class of the source for this LocalizedMessage */
     private final Class<?> sourceClass;
 
     /** A custom message overriding the default message from the bundle. */
     private final String customMessage;
 
     /**
      * Creates a new {@code LocalizedMessage} instance.
      *
      * @param lineNo line number associated with the message
-     * @param colNo column number associated with the message
+     * @param columnNo column number associated with the message
      * @param bundle resource bundle name
      * @param key the key to locate the translation
      * @param args arguments for the translation
      * @param severityLevel severity level for the message
      * @param moduleId the id of the module the message is associated with
      * @param sourceClass the Class that is the source of the message
      * @param customMessage optional custom message overriding the default
      */
     public LocalizedMessage(int lineNo,
-                            int colNo,
+                            int columnNo,
                             String bundle,
                             String key,
                             Object[] args,
                             SeverityLevel severityLevel,
                             String moduleId,
                             Class<?> sourceClass,
                             String customMessage) {
         this.lineNo = lineNo;
-        this.colNo = colNo;
+        this.columnNo = columnNo;
         this.key = key;
 
         if (args == null) {
             this.args = null;
         }
         else {
             this.args = Arrays.copyOf(args, args.length);
         }
         this.bundle = bundle;
         this.severityLevel = severityLevel;
         this.moduleId = moduleId;
         this.sourceClass = sourceClass;
         this.customMessage = customMessage;
     }
 
     /**
      * Creates a new {@code LocalizedMessage} instance.
      *
      * @param lineNo line number associated with the message
-     * @param colNo column number associated with the message
+     * @param columnNo column number associated with the message
      * @param bundle resource bundle name
      * @param key the key to locate the translation
      * @param args arguments for the translation
      * @param moduleId the id of the module the message is associated with
      * @param sourceClass the Class that is the source of the message
      * @param customMessage optional custom message overriding the default
      */
     public LocalizedMessage(int lineNo,
-                            int colNo,
+                            int columnNo,
                             String bundle,
                             String key,
                             Object[] args,
                             String moduleId,
                             Class<?> sourceClass,
                             String customMessage) {
         this(lineNo,
-             colNo,
+                columnNo,
              bundle,
              key,
              args,
              DEFAULT_SEVERITY,
              moduleId,
              sourceClass,
              customMessage);
     }
 
     /**
      * Creates a new {@code LocalizedMessage} instance.
      *
      * @param lineNo line number associated with the message
      * @param bundle resource bundle name
      * @param key the key to locate the translation
      * @param args arguments for the translation
      * @param severityLevel severity level for the message
      * @param moduleId the id of the module the message is associated with
      * @param sourceClass the source class for the message
      * @param customMessage optional custom message overriding the default
      */
     public LocalizedMessage(int lineNo,
                             String bundle,
                             String key,
                             Object[] args,
                             SeverityLevel severityLevel,
                             String moduleId,
                             Class<?> sourceClass,
                             String customMessage) {
         this(lineNo, 0, bundle, key, args, severityLevel, moduleId,
                 sourceClass, customMessage);
     }
 
     /**
      * Creates a new {@code LocalizedMessage} instance. The column number
      * defaults to 0.
      *
      * @param lineNo line number associated with the message
      * @param bundle name of a resource bundle that contains error messages
      * @param key the key to locate the translation
      * @param args arguments for the translation
      * @param moduleId the id of the module the message is associated with
      * @param sourceClass the name of the source for the message
      * @param customMessage optional custom message overriding the default
      */
     public LocalizedMessage(
         int lineNo,
         String bundle,
         String key,
         Object[] args,
         String moduleId,
         Class<?> sourceClass,
         String customMessage) {
         this(lineNo, 0, bundle, key, args, DEFAULT_SEVERITY, moduleId,
                 sourceClass, customMessage);
     }
 
     @Override
     public boolean equals(Object object) {
         if (this == object) {
             return true;
         }
         if (object == null || getClass() != object.getClass()) {
             return false;
         }
         final LocalizedMessage localizedMessage = (LocalizedMessage) object;
         return Objects.equals(lineNo, localizedMessage.lineNo)
-                && Objects.equals(colNo, localizedMessage.colNo)
+                && Objects.equals(columnNo, localizedMessage.columnNo)
                 && Objects.equals(severityLevel, localizedMessage.severityLevel)
                 && Objects.equals(moduleId, localizedMessage.moduleId)
                 && Objects.equals(key, localizedMessage.key)
                 && Objects.equals(bundle, localizedMessage.bundle)
                 && Objects.equals(sourceClass, localizedMessage.sourceClass)
                 && Objects.equals(customMessage, localizedMessage.customMessage)
                 && Arrays.equals(args, localizedMessage.args);
     }
 
     @Override
     public int hashCode() {
-        return Objects.hash(lineNo, colNo, severityLevel, moduleId, key, bundle, sourceClass,
+        return Objects.hash(lineNo, columnNo, severityLevel, moduleId, key, bundle, sourceClass,
                 customMessage, Arrays.hashCode(args));
     }
 
     /** Clears the cache. */
     public static void clearCache() {
         synchronized (BUNDLE_CACHE) {
             BUNDLE_CACHE.clear();
         }
     }
 
     /** @return the translated message **/
     public String getMessage() {
         String message = getCustomMessage();
 
         if (message == null) {
             try {
                 // Important to use the default class loader, and not the one in
                 // the GlobalProperties object. This is because the class loader in
                 // the GlobalProperties is specified by the user for resolving
                 // custom classes.
                 final ResourceBundle resourceBundle = getBundle(bundle);
                 final String pattern = resourceBundle.getString(key);
                 message = MessageFormat.format(pattern, args);
             }
             catch (final MissingResourceException ignored) {
                 // If the Check author didn't provide i18n resource bundles
                 // and logs error messages directly, this will return
                 // the author's original message
                 message = MessageFormat.format(key, args);
             }
         }
         return message;
     }
 
     /**
      * Returns the formatted custom message if one is configured.
      * @return the formatted custom message or {@code null}
      *          if there is no custom message
      */
     private String getCustomMessage() {
 
         if (customMessage == null) {
             return null;
         }
 
         return MessageFormat.format(customMessage, args);
     }
 
     /**
      * Find a ResourceBundle for a given bundle name. Uses the classloader
      * of the class emitting this message, to be sure to get the correct
      * bundle.
      * @param bundleName the bundle name
      * @return a ResourceBundle
      */
     private ResourceBundle getBundle(String bundleName) {
         synchronized (BUNDLE_CACHE) {
             ResourceBundle resourceBundle = BUNDLE_CACHE
                     .get(bundleName);
             if (resourceBundle == null) {
                 resourceBundle = ResourceBundle.getBundle(bundleName, sLocale,
                         sourceClass.getClassLoader(), new UTF8Control());
                 BUNDLE_CACHE.put(bundleName, resourceBundle);
             }
             return resourceBundle;
         }
     }
 
     /** @return the line number **/
     public int getLineNo() {
         return lineNo;
     }
 
     /** @return the column number **/
     public int getColumnNo() {
-        return colNo;
+        return columnNo;
     }
 
     /** @return the severity level **/
     public SeverityLevel getSeverityLevel() {
         return severityLevel;
     }
 
     /** @return the module identifier. */
     public String getModuleId() {
         return moduleId;
     }
 
     /**
      * Returns the message key to locate the translation, can also be used
      * in IDE plugins to map error messages to corrective actions.
      *
      * @return the message key
      */
     public String getKey() {
         return key;
     }
 
     /** @return the name of the source for this LocalizedMessage */
     public String getSourceName() {
         return sourceClass.getName();
     }
 
     /** @param locale the locale to use for localization **/
     public static void setLocale(Locale locale) {
         if (Locale.ENGLISH.getLanguage().equals(locale.getLanguage())) {
             sLocale = Locale.ROOT;
         }
         else {
             sLocale = locale;
         }
     }
 
     ////////////////////////////////////////////////////////////////////////////
     // Interface Comparable methods
     ////////////////////////////////////////////////////////////////////////////
 
     @Override
     public int compareTo(LocalizedMessage other) {
         int result = Integer.compare(getLineNo(), other.getLineNo());
 
         if (getLineNo() == other.getLineNo()) {
             if (getColumnNo() == other.getColumnNo()) {
                 result = getMessage().compareTo(other.getMessage());
             }
             else {
