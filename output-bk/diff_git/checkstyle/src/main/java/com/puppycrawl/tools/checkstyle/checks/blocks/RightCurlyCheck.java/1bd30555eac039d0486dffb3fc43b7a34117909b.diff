diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java
index dabf6ff53..9e8fa4ab5 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java
@@ -179,141 +179,141 @@ public class RightCurlyCheck extends AbstractOptionCheck<RightCurlyOption>
                 }
                 else {
                     shouldCheckLastRcurly = true;
                     nextToken = getNextToken(ast);
                     lcurly = ast.getLastChild();
                     rcurly = lcurly.getLastChild();
                 }
                 break;
             case TokenTypes.LITERAL_ELSE:
                 shouldCheckLastRcurly = true;
                 nextToken = getNextToken(ast);
                 lcurly = ast.getFirstChild();
                 rcurly = lcurly.getLastChild();
                 break;
             case TokenTypes.LITERAL_FINALLY:
                 shouldCheckLastRcurly = true;
                 nextToken = getNextToken(ast);
                 lcurly = ast.getFirstChild();
                 rcurly = lcurly.getLastChild();
                 break;
             case TokenTypes.CLASS_DEF:
                 final DetailAST child = ast.getLastChild();
                 lcurly = child.getFirstChild();
                 rcurly = child.getLastChild();
                 nextToken = ast;
                 break;
             case TokenTypes.CTOR_DEF:
             case TokenTypes.STATIC_INIT:
             case TokenTypes.INSTANCE_INIT:
                 lcurly = ast.findFirstToken(TokenTypes.SLIST);
                 rcurly = lcurly.getLastChild();
                 nextToken = ast;
                 break;
             case TokenTypes.METHOD_DEF:
             case TokenTypes.LITERAL_FOR:
             case TokenTypes.LITERAL_WHILE:
             case TokenTypes.LITERAL_DO:
                 lcurly = ast.findFirstToken(TokenTypes.SLIST);
                 //SLIST could be absent if method is abstract, and code like "while(true);"
                 if (lcurly == null) {
                     return;
                 }
                 rcurly = lcurly.getLastChild();
                 nextToken = ast;
                 break;
             default:
                 throw new RuntimeException("Unexpected token type ("
                     + TokenTypes.getTokenName(ast.getType()) + ")");
         }
 
-        if ((rcurly == null) || (rcurly.getType() != TokenTypes.RCURLY)) {
+        if (rcurly == null || rcurly.getType() != TokenTypes.RCURLY) {
             // we need to have both tokens to perform the check
             return;
         }
 
         if (getAbstractOption() == RightCurlyOption.SAME && !hasLineBreakBefore(rcurly)) {
             log(rcurly, MSG_KEY_LINE_BREAK_BEFORE);
         }
 
         if (shouldCheckLastRcurly) {
             if (rcurly.getLineNo() == nextToken.getLineNo()) {
                 log(rcurly, MSG_KEY_LINE_ALONE, "}");
             }
         }
-        else if ((getAbstractOption() == RightCurlyOption.SAME)
-                && (rcurly.getLineNo() != nextToken.getLineNo()))
+        else if (getAbstractOption() == RightCurlyOption.SAME
+                && rcurly.getLineNo() != nextToken.getLineNo())
         {
             log(rcurly, MSG_KEY_LINE_SAME, "}");
         }
-        else if ((getAbstractOption() == RightCurlyOption.ALONE)
-                && (rcurly.getLineNo() == nextToken.getLineNo())
+        else if (getAbstractOption() == RightCurlyOption.ALONE
+                && rcurly.getLineNo() == nextToken.getLineNo()
                 && !isEmptyBody(lcurly))
         {
             log(rcurly, MSG_KEY_LINE_ALONE, "}");
         }
 
         if (!shouldStartLine) {
             return;
         }
         final boolean startsLine =
                 Utils.whitespaceBefore(rcurly.getColumnNo(),
                         getLines()[rcurly.getLineNo() - 1]);
 
-        if (!startsLine && (lcurly.getLineNo() != rcurly.getLineNo())) {
+        if (!startsLine && lcurly.getLineNo() != rcurly.getLineNo()) {
             log(rcurly, MSG_KEY_LINE_NEW, "}");
         }
     }
 
     /**
      * Checks if definition body is empty.
      * @param lcurly left curly.
      * @return true if definition body is empty.
      */
     private boolean isEmptyBody(DetailAST lcurly)
     {
         boolean result = false;
         if (lcurly.getParent().getType() == TokenTypes.OBJBLOCK) {
             if (lcurly.getNextSibling().getType() == TokenTypes.RCURLY) {
                 result = true;
             }
         }
         else if (lcurly.getFirstChild().getType() == TokenTypes.RCURLY) {
             result = true;
         }
         return result;
     }
 
     /**
      * Finds next token after the given one.
      * @param ast the given node.
      * @return the token which represents next lexical item.
      */
     private DetailAST getNextToken(DetailAST ast)
     {
         DetailAST next = null;
         DetailAST parent = ast;
-        while ((parent != null) && (next == null)) {
+        while (parent != null && next == null) {
             next = parent.getNextSibling();
             parent = parent.getParent();
         }
         return CheckUtils.getFirstNode(next);
     }
 
     /**
      * Checks if right curly has line break before.
      * @param rightCurly
      *        Right curly token.
      * @return
      *        True, if right curly has line break before.
      */
     private boolean hasLineBreakBefore(DetailAST rightCurly)
     {
         if (rightCurly != null) {
             final DetailAST previousToken = rightCurly.getPreviousSibling();
             if (previousToken != null && rightCurly.getLineNo() == previousToken.getLineNo()) {
                 return false;
             }
         }
         return true;
     }
 }
