diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java
index 140804394..33d2ce75a 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java
@@ -21,107 +21,107 @@ package com.puppycrawl.tools.checkstyle.checks.metrics;
 
 import java.util.ArrayDeque;
 import java.util.Deque;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * This check calculates the Non Commenting Source Statements (NCSS) metric for
  * java source files and methods. The check adheres to the <a
  * href="http://kclee.com/clemens/java/javancss/">JavaNCSS specification
  * </a> and gives the same results as the JavaNCSS tool.
  *
  * The NCSS-metric tries to determine complexity of methods, classes and files
  * by counting the non commenting lines. Roughly said this is (nearly)
  * equivalent to counting the semicolons and opening curly braces.
  *
  * @author Lars KÃ¶dderitzsch
  */
 public class JavaNCSSCheck extends Check {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_METHOD = "ncss.method";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_CLASS = "ncss.class";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_FILE = "ncss.file";
 
     /** default constant for max file ncss */
     private static final int FILE_MAX_NCSS = 2000;
 
     /** default constant for max file ncss */
     private static final int CLASS_MAX_NCSS = 1500;
 
     /** default constant for max method ncss */
     private static final int METHOD_MAX_NCSS = 50;
 
     /** maximum ncss for a complete source file */
-    private int fileMax = FILE_MAX_NCSS;
+    private int fileMaximum = FILE_MAX_NCSS;
 
     /** maximum ncss for a class */
-    private int classMax = CLASS_MAX_NCSS;
+    private int classMaximum = CLASS_MAX_NCSS;
 
     /** maximum ncss for a method */
-    private int methodMax = METHOD_MAX_NCSS;
+    private int methodMaximum = METHOD_MAX_NCSS;
 
     /** list containing the stacked counters */
     private Deque<Counter> counters;
 
     @Override
     public int[] getDefaultTokens() {
         return new int[]{
             TokenTypes.CLASS_DEF,
             TokenTypes.INTERFACE_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.CTOR_DEF,
             TokenTypes.INSTANCE_INIT,
             TokenTypes.STATIC_INIT,
             TokenTypes.PACKAGE_DEF,
             TokenTypes.IMPORT,
             TokenTypes.VARIABLE_DEF,
             TokenTypes.CTOR_CALL,
             TokenTypes.SUPER_CTOR_CALL,
             TokenTypes.LITERAL_IF,
             TokenTypes.LITERAL_ELSE,
             TokenTypes.LITERAL_WHILE,
             TokenTypes.LITERAL_DO,
             TokenTypes.LITERAL_FOR,
             TokenTypes.LITERAL_SWITCH,
             TokenTypes.LITERAL_BREAK,
             TokenTypes.LITERAL_CONTINUE,
             TokenTypes.LITERAL_RETURN,
             TokenTypes.LITERAL_THROW,
             TokenTypes.LITERAL_SYNCHRONIZED,
             TokenTypes.LITERAL_CATCH,
             TokenTypes.LITERAL_FINALLY,
             TokenTypes.EXPR,
             TokenTypes.LABELED_STAT,
             TokenTypes.LITERAL_CASE,
             TokenTypes.LITERAL_DEFAULT,
         };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return new int[]{
             TokenTypes.CLASS_DEF,
             TokenTypes.INTERFACE_DEF,
             TokenTypes.METHOD_DEF,
             TokenTypes.CTOR_DEF,
             TokenTypes.INSTANCE_INIT,
             TokenTypes.STATIC_INIT,
             TokenTypes.PACKAGE_DEF,
             TokenTypes.IMPORT,
             TokenTypes.VARIABLE_DEF,
@@ -175,157 +175,157 @@ public class JavaNCSSCheck extends Check {
             TokenTypes.LITERAL_CATCH,
             TokenTypes.LITERAL_FINALLY,
             TokenTypes.EXPR,
             TokenTypes.LABELED_STAT,
             TokenTypes.LITERAL_CASE,
             TokenTypes.LITERAL_DEFAULT,
         };
     }
 
     @Override
     public void beginTree(DetailAST rootAST) {
         counters = new ArrayDeque<>();
 
         //add a counter for the file
         counters.push(new Counter());
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final int tokenType = ast.getType();
 
         if (tokenType == TokenTypes.CLASS_DEF
             || tokenType == TokenTypes.METHOD_DEF
             || tokenType == TokenTypes.CTOR_DEF
             || tokenType == TokenTypes.STATIC_INIT
             || tokenType == TokenTypes.INSTANCE_INIT) {
             //add a counter for this class/method
             counters.push(new Counter());
         }
 
         //check if token is countable
         if (isCountable(ast)) {
             //increment the stacked counters
             for (final Counter counter : counters) {
                 counter.increment();
             }
         }
     }
 
     @Override
     public void leaveToken(DetailAST ast) {
         final int tokenType = ast.getType();
         if (tokenType == TokenTypes.METHOD_DEF
             || tokenType == TokenTypes.CTOR_DEF
             || tokenType == TokenTypes.STATIC_INIT
             || tokenType == TokenTypes.INSTANCE_INIT) {
             //pop counter from the stack
             final Counter counter = counters.pop();
 
             final int count = counter.getCount();
-            if (count > methodMax) {
+            if (count > methodMaximum) {
                 log(ast.getLineNo(), ast.getColumnNo(), MSG_METHOD,
-                        count, methodMax);
+                        count, methodMaximum);
             }
         }
         else if (tokenType == TokenTypes.CLASS_DEF) {
             //pop counter from the stack
             final Counter counter = counters.pop();
 
             final int count = counter.getCount();
-            if (count > classMax) {
+            if (count > classMaximum) {
                 log(ast.getLineNo(), ast.getColumnNo(), MSG_CLASS,
-                        count, classMax);
+                        count, classMaximum);
             }
         }
     }
 
     @Override
     public void finishTree(DetailAST rootAST) {
         //pop counter from the stack
         final Counter counter = counters.pop();
 
         final int count = counter.getCount();
-        if (count > fileMax) {
+        if (count > fileMaximum) {
             log(rootAST.getLineNo(), rootAST.getColumnNo(), MSG_FILE,
-                    count, fileMax);
+                    count, fileMaximum);
         }
     }
 
     /**
      * Sets the maximum ncss for a file.
      *
-     * @param fileMax
+     * @param fileMaximum
      *            the maximum ncss
      */
-    public void setFileMaximum(int fileMax) {
-        this.fileMax = fileMax;
+    public void setFileMaximum(int fileMaximum) {
+        this.fileMaximum = fileMaximum;
     }
 
     /**
      * Sets the maximum ncss for a class.
      *
-     * @param classMax
+     * @param classMaximum
      *            the maximum ncss
      */
-    public void setClassMaximum(int classMax) {
-        this.classMax = classMax;
+    public void setClassMaximum(int classMaximum) {
+        this.classMaximum = classMaximum;
     }
 
     /**
      * Sets the maximum ncss for a method.
      *
-     * @param methodMax
+     * @param methodMaximum
      *            the maximum ncss
      */
-    public void setMethodMaximum(int methodMax) {
-        this.methodMax = methodMax;
+    public void setMethodMaximum(int methodMaximum) {
+        this.methodMaximum = methodMaximum;
     }
 
     /**
      * Checks if a token is countable for the ncss metric
      *
      * @param ast
      *            the AST
      * @return true if the token is countable
      */
     private static boolean isCountable(DetailAST ast) {
         boolean countable = true;
 
         final int tokenType = ast.getType();
 
         //check if an expression is countable
         if (tokenType == TokenTypes.EXPR) {
             countable = isExpressionCountable(ast);
         }
         //check if an variable definition is countable
         else if (tokenType == TokenTypes.VARIABLE_DEF) {
             countable = isVariableDefCountable(ast);
         }
         return countable;
     }
 
     /**
      * Checks if a variable definition is countable.
      *
      * @param ast the AST
      * @return true if the variable definition is countable, false otherwise
      */
     private static boolean isVariableDefCountable(DetailAST ast) {
         boolean countable = false;
 
         //count variable defs only if they are direct child to a slist or
         // object block
         final int parentType = ast.getParent().getType();
 
         if (parentType == TokenTypes.SLIST
             || parentType == TokenTypes.OBJBLOCK) {
             final DetailAST prevSibling = ast.getPreviousSibling();
 
             //is countable if no previous sibling is found or
             //the sibling is no COMMA.
             //This is done because multiple assignment on one line are countes
             // as 1
             countable = prevSibling == null
                     || prevSibling.getType() != TokenTypes.COMMA;
         }
 
