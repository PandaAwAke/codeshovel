diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java
index 98a4d8ca5..17d118411 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java
@@ -355,119 +355,119 @@ public final class IllegalTypeCheck extends AbstractFormatCheck
                 final DetailAST nextSubTreeNode = getNextSubTreeNode(toVisit, importAst);
                 if (nextSubTreeNode.getType() != TokenTypes.SEMI) {
                     canonicalNameBuilder.append('.');
                 }
             }
         }
         return canonicalNameBuilder.toString();
     }
 
     /**
      * Gets the next node of a syntactical tree (child of a current node or
      * sibling of a current node, or sibling of a parent of a current node)
      * @param currentNodeAst Current node in considering
      * @param subTreeRootAst SubTree root
      * @return Current node after bypassing, if current node reached the root of a subtree
      *        method returns null
      */
     private static DetailAST
         getNextSubTreeNode(DetailAST currentNodeAst, DetailAST subTreeRootAst)
     {
         DetailAST currentNode = currentNodeAst;
         DetailAST toVisitAst = currentNode.getFirstChild();
         while (toVisitAst == null) {
             toVisitAst = currentNode.getNextSibling();
             if (toVisitAst == null) {
                 if (currentNode.getParent().equals(subTreeRootAst)) {
                     break;
                 }
                 currentNode = currentNode.getParent();
             }
         }
         currentNode = toVisitAst;
         return currentNode;
     }
 
     /**
      * @param ast method def to check.
      * @return true if we should check this method.
      */
     private boolean isCheckedMethod(DetailAST ast)
     {
         final String methodName =
             ast.findFirstToken(TokenTypes.IDENT).getText();
         return !ignoredMethodNames.contains(methodName);
     }
 
     /**
      * Set the list of illegal variable types.
      * @param classNames array of illegal variable types
      */
-    public void setIllegalClassNames(String[] classNames)
+    public void setIllegalClassNames(String... classNames)
     {
         illegalClassNames.clear();
         Collections.addAll(illegalClassNames, classNames);
     }
 
     /**
      * Get the list of illegal variable types.
      * @return array of illegal variable types
      */
     public String[] getIllegalClassNames()
     {
         return illegalClassNames.toArray(
             new String[illegalClassNames.size()]);
     }
 
     /**
      * Set the list of ignore method names.
      * @param methodNames array of ignored method names
      */
-    public void setIgnoredMethodNames(String[] methodNames)
+    public void setIgnoredMethodNames(String... methodNames)
     {
         ignoredMethodNames.clear();
         Collections.addAll(ignoredMethodNames, methodNames);
     }
 
     /**
      * Get the list of ignored method names.
      * @return array of ignored method names
      */
     public String[] getIgnoredMethodNames()
     {
         return ignoredMethodNames.toArray(
             new String[ignoredMethodNames.size()]);
     }
 
     /**
      * Set the list of legal abstract class names.
      * @param classNames array of legal abstract class names
      */
-    public void setLegalAbstractClassNames(String[] classNames)
+    public void setLegalAbstractClassNames(String... classNames)
     {
         legalAbstractClassNames.clear();
         Collections.addAll(legalAbstractClassNames, classNames);
     }
 
     /**
      * Get the list of legal abstract class names.
      * @return array of legal abstract class names
      */
     public String[] getLegalAbstractClassNames()
     {
         return legalAbstractClassNames.toArray(
             new String[legalAbstractClassNames.size()]);
     }
 
     /**
      * Set the list of member modifiers (of methods and fields) which should be checked.
      * @param modifiers String contains modifiers.
      */
     public void setMemberModifiers(String modifiers)
     {
         final List<Integer> modifiersList = new ArrayList<>();
         for (String modifier : modifiers.split(",")) {
             modifiersList.add(TokenTypes.getTokenId(modifier.trim()));
         }
         this.memberModifiers = modifiersList;
     }
 }
