diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
index 5a82774a0..7682e3f56 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
@@ -141,193 +141,189 @@ public class NeedBracesCheck extends Check {
             TokenTypes.LITERAL_IF,
             TokenTypes.LITERAL_WHILE,
             TokenTypes.LITERAL_CASE,
             TokenTypes.LITERAL_DEFAULT,
             TokenTypes.LAMBDA,
         };
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final DetailAST slistAST = ast.findFirstToken(TokenTypes.SLIST);
         boolean isElseIf = false;
         if (ast.getType() == TokenTypes.LITERAL_ELSE
             && ast.findFirstToken(TokenTypes.LITERAL_IF) != null) {
             isElseIf = true;
         }
 
         final boolean skipStatement = isSkipStatement(ast);
 
         if (slistAST == null && !isElseIf && !skipStatement) {
             log(ast.getLineNo(), MSG_KEY_NEED_BRACES, ast.getText());
         }
     }
 
     /**
      * Checks if current statement can be skipped by "need braces" warning.
      * @param statement if, for, while, do-while, lambda, else, case, default statements.
      * @return true if current statement can be skipped by Check.
      */
     private boolean isSkipStatement(DetailAST statement) {
         return allowSingleLineStatement && isSingleLineStatement(statement);
     }
 
     /**
      * Checks if current statement is single-line statement, e.g.:
      * <p>
      * <code>
      * if (obj.isValid()) return true;
      * </code>
      * </p>
      * <p>
      * <code>
      * while (obj.isValid()) return true;
      * </code>
      * </p>
      * @param statement if, for, while, do-while, lambda, else, case, default statements.
      * @return true if current statement is single-line statement.
      */
     private static boolean isSingleLineStatement(DetailAST statement) {
         boolean result = false;
-        switch (statement.getType()) {
-            case TokenTypes.LITERAL_IF:
-                result = isSingleLineIf(statement);
-                break;
-            case TokenTypes.LITERAL_FOR:
-                result = isSingleLineFor(statement);
-                break;
-            case TokenTypes.LITERAL_DO:
-                result = isSingleLineDoWhile(statement);
-                break;
-            case TokenTypes.LITERAL_WHILE:
-                result = isSingleLineWhile(statement);
-                break;
-            case TokenTypes.LAMBDA:
-                result = isSingleLineLambda(statement);
-                break;
-            case TokenTypes.LITERAL_CASE:
-                result = isSingleLineCase(statement);
-                break;
-            case TokenTypes.LITERAL_DEFAULT:
-                result = isSingleLineDefault(statement);
-                break;
-            case TokenTypes.LITERAL_ELSE:
-                result = isSingleLineElse(statement);
-                break;
-            default:
-                final String exceptionMsg = statement.getText();
-                throw new IllegalArgumentException("Unsupported token: " + exceptionMsg);
+        final int type = statement.getType();
+
+        if (type == TokenTypes.LITERAL_IF) {
+            result = isSingleLineIf(statement);
+        }
+        else if (type == TokenTypes.LITERAL_FOR) {
+            result = isSingleLineFor(statement);
+        }
+        else if (type == TokenTypes.LITERAL_DO) {
+            result = isSingleLineDoWhile(statement);
+        }
+        else if (type == TokenTypes.LITERAL_WHILE) {
+            result = isSingleLineWhile(statement);
+        }
+        else if (type == TokenTypes.LAMBDA) {
+            result = isSingleLineLambda(statement);
         }
+        else if (type == TokenTypes.LITERAL_CASE) {
+            result = isSingleLineCase(statement);
+        }
+        else if (type == TokenTypes.LITERAL_DEFAULT) {
+            result = isSingleLineDefault(statement);
+        }
+        else {
+            result = isSingleLineElse(statement);
+        }
+
         return result;
     }
 
     /**
      * Checks if current while statement is single-line statement, e.g.:
      * <p>
      * <code>
      * while (obj.isValid()) return true;
      * </code>
      * </p>
      * @param literalWhile {@link TokenTypes#LITERAL_WHILE while statement}.
      * @return true if current while statement is single-line statement.
      */
     private static boolean isSingleLineWhile(DetailAST literalWhile) {
         boolean result = false;
         if (literalWhile.getParent().getType() == TokenTypes.SLIST
                 && literalWhile.getLastChild().getType() != TokenTypes.SLIST) {
             final DetailAST block = literalWhile.getLastChild().getPreviousSibling();
             result = literalWhile.getLineNo() == block.getLineNo();
         }
         return result;
     }
 
     /**
      * Checks if current do-while statement is single-line statement, e.g.:
      * <p>
      * <code>
      * do this.notify(); while (o != null);
      * </code>
      * </p>
      * @param literalDo {@link TokenTypes#LITERAL_DO do-while statement}.
      * @return true if current do-while statement is single-line statement.
      */
     private static boolean isSingleLineDoWhile(DetailAST literalDo) {
         boolean result = false;
         if (literalDo.getParent().getType() == TokenTypes.SLIST
                 && literalDo.getFirstChild().getType() != TokenTypes.SLIST) {
             final DetailAST block = literalDo.getFirstChild();
             result = block.getLineNo() == literalDo.getLineNo();
         }
         return result;
     }
 
     /**
      * Checks if current for statement is single-line statement, e.g.:
      * <p>
      * <code>
      * for (int i = 0; ; ) this.notify();
      * </code>
      * </p>
      * @param literalFor {@link TokenTypes#LITERAL_FOR for statement}.
      * @return true if current for statement is single-line statement.
      */
     private static boolean isSingleLineFor(DetailAST literalFor) {
         boolean result = false;
         if (literalFor.getLastChild().getType() == TokenTypes.EMPTY_STAT) {
             result = true;
         }
         else if (literalFor.getParent().getType() == TokenTypes.SLIST
                 && literalFor.getLastChild().getType() != TokenTypes.SLIST) {
             final DetailAST block = literalFor.findFirstToken(TokenTypes.EXPR);
-            if (block != null) {
-                result = literalFor.getLineNo() == block.getLineNo();
-            }
+            result = literalFor.getLineNo() == block.getLineNo();
         }
         return result;
     }
 
     /**
      * Checks if current if statement is single-line statement, e.g.:
      * <p>
      * <code>
      * if (obj.isValid()) return true;
      * </code>
      * </p>
      * @param literalIf {@link TokenTypes#LITERAL_IF if statement}.
      * @return true if current if statement is single-line statement.
      */
     private static boolean isSingleLineIf(DetailAST literalIf) {
         boolean result = false;
         final DetailAST ifCondition = literalIf.findFirstToken(TokenTypes.EXPR);
         if (literalIf.getParent().getType() == TokenTypes.SLIST) {
             final DetailAST literalIfLastChild = literalIf.getLastChild();
             final DetailAST block;
             if (literalIfLastChild.getType() == TokenTypes.LITERAL_ELSE) {
                 block = literalIfLastChild.getPreviousSibling();
             }
             else {
                 block = literalIfLastChild;
             }
             result = ifCondition.getLineNo() == block.getLineNo();
         }
         return result;
     }
 
     /**
      * Checks if current lambda statement is single-line statement, e.g.:
      * <p>
      * <code>
      * Runnable r = () -> System.out.println("Hello, world!");
      * </code>
      * </p>
      * @param lambda {@link TokenTypes#LAMBDA lambda statement}.
      * @return true if current lambda statement is single-line statement.
      */
     private static boolean isSingleLineLambda(DetailAST lambda) {
         boolean result = false;
         final DetailAST block = lambda.getLastChild();
         if (block.getType() != TokenTypes.SLIST) {
             result = lambda.getLineNo() == block.getLineNo();
         }
         return result;
     }
 
