diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java
index 1d89582ef..03fe77470 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java
@@ -135,100 +135,116 @@ public class AbbreviationAsWordInNameCheck extends Check
     /**
      * Sets ignore option for methods with "@Override" annotation.
      * @param ignoreOverriddenMethods
      *        Defines if ignore methods with "@Override" annotation or not.
      */
     public void setIgnoreOverriddenMethods(boolean ignoreOverriddenMethods)
     {
         this.ignoreOverriddenMethods = ignoreOverriddenMethods;
     }
 
     /**
      * Allowed abbreviation length in names.
      * @param allowedAbbreviationLength
      *            amount of allowed capital letters in abbreviation.
      */
     public void setAllowedAbbreviationLength(int allowedAbbreviationLength)
     {
         this.allowedAbbreviationLength = allowedAbbreviationLength;
     }
 
     /**
      * Set a list of abbreviations that must be skipped for checking.
      * Abbreviations should be separated by comma, no spaces is allowed.
      * @param allowedAbbreviations
      *        an string of abbreviations that must be skipped from checking,
      *        each abbreviation separated by comma.
      */
     public void setAllowedAbbreviations(String allowedAbbreviations)
     {
         if (allowedAbbreviations != null) {
             this.allowedAbbreviations = new HashSet<String>(
                     Arrays.asList(allowedAbbreviations.split(",")));
         }
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {
             TokenTypes.CLASS_DEF,
             TokenTypes.INTERFACE_DEF,
             TokenTypes.ENUM_DEF,
             TokenTypes.ANNOTATION_DEF,
             TokenTypes.ANNOTATION_FIELD_DEF,
             TokenTypes.PARAMETER_DEF,
             TokenTypes.VARIABLE_DEF,
             TokenTypes.METHOD_DEF,
         };
     }
 
+    @Override
+    public int[] getAcceptableTokens()
+    {
+        return new int[] {
+            TokenTypes.CLASS_DEF,
+            TokenTypes.INTERFACE_DEF,
+            TokenTypes.ENUM_DEF,
+            TokenTypes.ANNOTATION_DEF,
+            TokenTypes.ANNOTATION_FIELD_DEF,
+            TokenTypes.PARAMETER_DEF,
+            TokenTypes.VARIABLE_DEF,
+            TokenTypes.METHOD_DEF,
+            TokenTypes.ENUM_CONSTANT_DEF,
+        };
+    }
+
     @Override
     public void visitToken(DetailAST ast)
     {
 
         if (!isIgnoreSituation(ast)) {
 
             final DetailAST nameAst = ast.findFirstToken(TokenTypes.IDENT);
             final String typeName = nameAst.getText();
 
             final String abbr = getDisallowedAbbreviation(typeName);
             if (abbr != null) {
                 log(nameAst.getLineNo(), MSG_KEY, allowedAbbreviationLength);
             }
         }
     }
 
     /**
      * Checks if it is an ignore situation.
      * @param ast input DetailAST node.
      * @return true if it is an ignore situation found for given input DetailAST
      *         node.
      */
     private boolean isIgnoreSituation(DetailAST ast)
     {
         final DetailAST modifiers = ast.getFirstChild();
 
         boolean result = false;
         if (ast.getType() == TokenTypes.VARIABLE_DEF) {
             if ((ignoreFinal || ignoreStatic)
                     && isInterfaceDeclaration(ast))
             {
                 // field declarations in interface are static/final
                 result = true;
             }
             else {
                 result = (ignoreFinal
                           && modifiers.branchContains(TokenTypes.FINAL))
                     || (ignoreStatic
                         && modifiers.branchContains(TokenTypes.LITERAL_STATIC));
             }
         }
         else if (ast.getType() == TokenTypes.METHOD_DEF) {
             result = ignoreOverriddenMethods
                     && hasOverrideAnnotation(modifiers);
         }
         return result;
     }
 
     /**
      * Check that variable definition in interface definition.
