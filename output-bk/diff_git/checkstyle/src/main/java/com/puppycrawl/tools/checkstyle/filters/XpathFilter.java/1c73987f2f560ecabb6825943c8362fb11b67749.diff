diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/XpathFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/XpathFilter.java
index bd62cb6ec..600340404 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/XpathFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/XpathFilter.java
@@ -114,101 +114,101 @@ public class XpathFilter implements TreeWalkerFilter {
             }
         }
     }
 
     @Override
     public boolean accept(TreeWalkerAuditEvent event) {
         return !isFileNameAndModuleAndCheckNameMatching(event)
                 || !isMessageNameMatching(event)
                 || !isXpathQueryMatching(event);
     }
 
     /**
      * Is matching by file name, moduleId and Check name.
      * @param event event
      * @return true if it is matching
      */
     private boolean isFileNameAndModuleAndCheckNameMatching(TreeWalkerAuditEvent event) {
         return event.getFileName() != null
                 && (fileRegexp == null || fileRegexp.matcher(event.getFileName()).find())
                 && event.getLocalizedMessage() != null
                 && (moduleId == null || moduleId.equals(event.getModuleId()))
                 && (checkRegexp == null || checkRegexp.matcher(event.getSourceName()).find());
     }
 
     /**
      * Is matching by message.
      * @param event event
      * @return true is matching or not set.
      */
     private boolean isMessageNameMatching(TreeWalkerAuditEvent event) {
         return messageRegexp == null || messageRegexp.matcher(event.getMessage()).find();
     }
 
     /**
      * Is matching by xpath query.
      * @param event event
      * @return true is matching
      */
     private boolean isXpathQueryMatching(TreeWalkerAuditEvent event) {
         boolean isMatching;
         if (xpathExpression == null) {
             isMatching = true;
         }
         else {
             isMatching = false;
             final List<Item> items = getItems(event);
             for (Item item : items) {
                 final AbstractNode abstractNode = (AbstractNode) item;
                 isMatching = abstractNode.getTokenType() == event.getTokenType()
                         && abstractNode.getLineNumber() == event.getLine()
-                        && abstractNode.getColumnNumber() == event.getColumn();
+                        && abstractNode.getColumnNumber() == event.getColumnCharIndex();
                 if (isMatching) {
                     break;
                 }
             }
         }
         return isMatching;
     }
 
     /**
      * Returns list of nodes matching xpath expression given event.
      * @param event {@code TreeWalkerAuditEvent} object
      * @return list of nodes matching xpath expression given event
      */
     private List<Item> getItems(TreeWalkerAuditEvent event) {
         final RootNode rootNode;
         if (event.getRootAst() == null) {
             rootNode = null;
         }
         else {
             rootNode = new RootNode(event.getRootAst());
         }
         final List<Item> items;
         try {
             final XPathDynamicContext xpathDynamicContext =
                     xpathExpression.createDynamicContext(rootNode);
             items = xpathExpression.evaluate(xpathDynamicContext);
         }
         catch (XPathException ex) {
             throw new IllegalStateException("Cannot initialize context and evaluate query: "
                     + xpathQuery, ex);
         }
         return items;
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(filePattern, checkPattern, messagePattern, moduleId, xpathQuery);
     }
 
     @Override
     public boolean equals(Object other) {
         if (this == other) {
             return true;
         }
         if (other == null || getClass() != other.getClass()) {
             return false;
         }
         final XpathFilter xpathFilter = (XpathFilter) other;
         return Objects.equals(filePattern, xpathFilter.filePattern)
                 && Objects.equals(checkPattern, xpathFilter.checkPattern)
