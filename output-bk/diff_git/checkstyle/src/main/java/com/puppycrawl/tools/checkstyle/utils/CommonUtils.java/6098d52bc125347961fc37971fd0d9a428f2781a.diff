diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java
index 8d3638e44..98a208ad2 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java
@@ -103,206 +103,214 @@ public final class CommonUtils {
 
     /**
      * Returns whether the file extension matches what we are meant to process.
      *
      * @param file
      *            the file to be checked.
      * @param fileExtensions
      *            files extensions, empty property in config makes it matches to all.
      * @return whether there is a match.
      */
     public static boolean matchesFileExtension(File file, String... fileExtensions) {
         boolean result = false;
         if (fileExtensions == null || fileExtensions.length == 0) {
             result = true;
         }
         else {
             // normalize extensions so all of them have a leading dot
             final String[] withDotExtensions = new String[fileExtensions.length];
             for (int i = 0; i < fileExtensions.length; i++) {
                 final String extension = fileExtensions[i];
                 if (startsWithChar(extension, '.')) {
                     withDotExtensions[i] = extension;
                 }
                 else {
                     withDotExtensions[i] = "." + extension;
                 }
             }
 
             final String fileName = file.getName();
             for (final String fileExtension : withDotExtensions) {
                 if (fileName.endsWith(fileExtension)) {
                     result = true;
                     break;
                 }
             }
         }
 
         return result;
     }
 
     /**
      * Returns whether the specified string contains only whitespace up to the specified index.
      *
      * @param index
      *            index to check up to
      * @param line
      *            the line to check
      * @return whether there is only whitespace
      */
     public static boolean hasWhitespaceBefore(int index, String line) {
+        boolean result = true;
         for (int i = 0; i < index; i++) {
             if (!Character.isWhitespace(line.charAt(i))) {
-                return false;
+                result = false;
+                break;
             }
         }
-        return true;
+        return result;
     }
 
     /**
      * Returns the length of a string ignoring all trailing whitespace.
      * It is a pity that there is not a trim() like
      * method that only removed the trailing whitespace.
      *
      * @param line
      *            the string to process
      * @return the length of the string ignoring all trailing whitespace
      **/
     public static int lengthMinusTrailingWhitespace(String line) {
         int len = line.length();
         for (int i = len - 1; i >= 0; i--) {
             if (!Character.isWhitespace(line.charAt(i))) {
                 break;
             }
             len--;
         }
         return len;
     }
 
     /**
      * Returns the length of a String prefix with tabs expanded.
      * Each tab is counted as the number of characters is
      * takes to jump to the next tab stop.
      *
      * @param inputString
      *            the input String
      * @param toIdx
      *            index in string (exclusive) where the calculation stops
      * @param tabWidth
      *            the distance between tab stop position.
      * @return the length of string.substring(0, toIdx) with tabs expanded.
      */
     public static int lengthExpandedTabs(String inputString,
             int toIdx,
             int tabWidth) {
         int len = 0;
         for (int idx = 0; idx < toIdx; idx++) {
             if (inputString.charAt(idx) == '\t') {
                 len = (len / tabWidth + 1) * tabWidth;
             }
             else {
                 len++;
             }
         }
         return len;
     }
 
     /**
      * Validates whether passed string is a valid pattern or not.
      *
      * @param pattern
      *            string to validate
      * @return true if the pattern is valid false otherwise
      */
     public static boolean isPatternValid(String pattern) {
+        boolean isValid = true;
         try {
             Pattern.compile(pattern);
         }
         catch (final PatternSyntaxException ignored) {
-            return false;
+            isValid = false;
         }
-        return true;
+        return isValid;
     }
 
     /**
      * @param type
      *            the fully qualified name. Cannot be null
      * @return the base class name from a fully qualified name
      */
     public static String baseClassName(String type) {
+        final String className;
         final int index = type.lastIndexOf('.');
-
         if (index == -1) {
-            return type;
+            className = type;
         }
         else {
-            return type.substring(index + 1);
+            className = type.substring(index + 1);
         }
+        return className;
     }
 
     /**
      * Constructs a normalized relative path between base directory and a given path.
      *
      * @param baseDirectory
      *            the base path to which given path is relativized
      * @param path
      *            the path to relativize against base directory
      * @return the relative normalized path between base directory and
      *     path or path if base directory is null.
      */
     public static String relativizeAndNormalizePath(final String baseDirectory, final String path) {
+        final String resultPath;
         if (baseDirectory == null) {
-            return path;
+            resultPath = path;
+        }
+        else {
+            final Path pathAbsolute = Paths.get(path).normalize();
+            final Path pathBase = Paths.get(baseDirectory).normalize();
+            resultPath = pathBase.relativize(pathAbsolute).toString();
         }
-        final Path pathAbsolute = Paths.get(path).normalize();
-        final Path pathBase = Paths.get(baseDirectory).normalize();
-        return pathBase.relativize(pathAbsolute).toString();
+        return resultPath;
     }
 
     /**
      * Tests if this string starts with the specified prefix.
      * <p>
      * It is faster version of {@link String#startsWith(String)} optimized for
      *  one-character prefixes at the expense of
      * some readability. Suggested by SimplifyStartsWith PMD rule:
      * http://pmd.sourceforge.net/pmd-5.3.1/pmd-java/rules/java/optimizations.html#SimplifyStartsWith
      * </p>
      *
      * @param value
      *            the {@code String} to check
      * @param prefix
      *            the prefix to find
      * @return {@code true} if the {@code char} is a prefix of the given {@code String};
      *  {@code false} otherwise.
      */
     public static boolean startsWithChar(String value, char prefix) {
         return !value.isEmpty() && value.charAt(0) == prefix;
     }
 
     /**
      * Tests if this string ends with the specified suffix.
      * <p>
      * It is faster version of {@link String#endsWith(String)} optimized for
      *  one-character suffixes at the expense of
      * some readability. Suggested by SimplifyStartsWith PMD rule:
      * http://pmd.sourceforge.net/pmd-5.3.1/pmd-java/rules/java/optimizations.html#SimplifyStartsWith
      * </p>
      *
      * @param value
      *            the {@code String} to check
      * @param suffix
      *            the suffix to find
      * @return {@code true} if the {@code char} is a suffix of the given {@code String};
      *  {@code false} otherwise.
      */
     public static boolean endsWithChar(String value, char suffix) {
         return !value.isEmpty() && value.charAt(value.length() - 1) == suffix;
     }
 
     /**
      * Gets constructor of targetClass.
      * @param targetClass
      *            from which constructor is returned
      * @param parameterTypes
      *            of constructor
      * @param <T> type of the target class object.
      * @return constructor of targetClass or {@link IllegalStateException} if any exception occurs
