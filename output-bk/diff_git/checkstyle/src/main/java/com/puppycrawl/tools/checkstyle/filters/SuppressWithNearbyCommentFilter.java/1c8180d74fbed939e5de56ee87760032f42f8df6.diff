diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java
index 33f865501..da65edb60 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java
@@ -329,124 +329,116 @@ public class SuppressWithNearbyCommentFilter
         throws ConversionException
     {
         try {
             commentRegexp = Utils.getPattern(format);
         }
         catch (final PatternSyntaxException e) {
             throw new ConversionException("unable to parse " + format, e);
         }
     }
 
     /** @return the FileContents for this filter. */
     public FileContents getFileContents()
     {
         return fileContentsReference.get();
     }
 
     /**
      * Set the FileContents for this filter.
      * @param fileContents the FileContents for this filter.
      */
     public void setFileContents(FileContents fileContents)
     {
         fileContentsReference = new WeakReference<>(fileContents);
     }
 
     /**
      * Set the format for a check.
      * @param format a <code>String</code> value
      * @throws ConversionException unable to parse format
      */
     public void setCheckFormat(String format)
         throws ConversionException
     {
         try {
             checkRegexp = Utils.getPattern(format);
             checkFormat = format;
         }
         catch (final PatternSyntaxException e) {
             throw new ConversionException("unable to parse " + format, e);
         }
     }
 
     /**
      * Set the format for a message.
      * @param format a <code>String</code> value
      * @throws ConversionException unable to parse format
      */
     public void setMessageFormat(String format)
         throws ConversionException
     {
-        // check that format parses
-        try {
-            Utils.getPattern(format);
-        }
-        catch (final PatternSyntaxException e) {
-            throw new ConversionException("unable to parse " + format, e);
+        if (!Utils.isPatternValid(format)) {
+            throw new ConversionException("Unable to parse format: " + format);
         }
         messageFormat = format;
     }
 
     /**
      * Set the format for the influence of this check.
      * @param format a <code>String</code> value
      * @throws ConversionException unable to parse format
      */
     public void setInfluenceFormat(String format)
         throws ConversionException
     {
-        // check that format parses
-        try {
-            Utils.getPattern(format);
-        }
-        catch (final PatternSyntaxException e) {
-            throw new ConversionException("unable to parse " + format, e);
+        if (!Utils.isPatternValid(format)) {
+            throw new ConversionException("Unable to parse format: " + format);
         }
         influenceFormat = format;
     }
 
 
     /**
      * Set whether to look in C++ comments.
      * @param checkCPP <code>true</code> if C++ comments are checked.
      */
     public void setCheckCPP(boolean checkCPP)
     {
         this.checkCPP = checkCPP;
     }
 
     /**
      * Set whether to look in C comments.
      * @param checkC <code>true</code> if C comments are checked.
      */
     public void setCheckC(boolean checkC)
     {
         this.checkC = checkC;
     }
 
     /** {@inheritDoc} */
     @Override
     public boolean accept(AuditEvent event)
     {
         if (event.getLocalizedMessage() == null) {
             return true;        // A special event.
         }
 
         // Lazy update. If the first event for the current file, update file
         // contents and tag suppressions
         final FileContents currentContents = FileContentsHolder.getContents();
         if (currentContents == null) {
             // we have no contents, so we can not filter.
             // TODO: perhaps we should notify user somehow?
             return true;
         }
         if (getFileContents() != currentContents) {
             setFileContents(currentContents);
             tagSuppressions();
         }
         for (final Iterator<Tag> iter = tags.iterator(); iter.hasNext();) {
             final Tag tag = iter.next();
             if (tag.isMatch(event)) {
                 return false;
             }
         }
         return true;
