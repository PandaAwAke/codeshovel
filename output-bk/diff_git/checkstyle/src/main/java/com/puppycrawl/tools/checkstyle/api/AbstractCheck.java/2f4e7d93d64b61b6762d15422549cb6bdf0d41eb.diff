diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractCheck.java
index 81eead992..08866a3af 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractCheck.java
@@ -199,96 +199,117 @@ public abstract class AbstractCheck extends AbstractViolationReporter {
     /**
      * Returns the file contents associated with the tree.
      * @return the file contents
      * @noinspection WeakerAccess
      */
     public final FileContents getFileContents() {
         return context.get().fileContents;
     }
 
     /**
      * Set the class loader associated with the tree.
      * @param classLoader the class loader
      */
     public final void setClassLoader(ClassLoader classLoader) {
         this.classLoader = classLoader;
     }
 
     /**
      * Returns the class loader associated with the tree.
      * @return the class loader
      */
     public final ClassLoader getClassLoader() {
         return classLoader;
     }
 
     /**
      * Get tab width to report errors with.
      * @return the tab width to report errors with
      */
     protected final int getTabWidth() {
         return tabWidth;
     }
 
     /**
      * Set the tab width to report errors with.
      * @param tabWidth an {@code int} value
      */
     public final void setTabWidth(int tabWidth) {
         this.tabWidth = tabWidth;
     }
 
     /**
      * Helper method to log a LocalizedMessage.
      *
      * @param ast a node to get line id column numbers associated
      *             with the message
      * @param key key to locale message format
      * @param args arguments to format
      */
     public final void log(DetailAST ast, String key, Object... args) {
-        log(ast.getLineNo(), ast.getColumnNo(), key, args);
+
+        // CommonUtils.lengthExpandedTabs returns column number considering tabulation
+        // characters, it takes line from the file by line number, ast column number and tab
+        // width as arguments. Returned value is 0-based, but user must see column number starting
+        // from 1, that is why result of the method CommonUtils.lengthExpandedTabs
+        // is increased by one.
+
+        final int col = 1 + CommonUtils.lengthExpandedTabs(
+                getLines()[ast.getLineNo() - 1], ast.getColumnNo(), tabWidth);
+        context.get().messages.add(
+                new LocalizedMessage(
+                        ast.getLineNo(),
+                        col,
+                        ast.getColumnNo(),
+                        ast.getType(),
+                        getMessageBundle(),
+                        key,
+                        args,
+                        getSeverityLevel(),
+                        getId(),
+                        getClass(),
+                        getCustomMessages().get(key)));
     }
 
     @Override
     public final void log(int line, String key, Object... args) {
         context.get().messages.add(
             new LocalizedMessage(
                 line,
                 getMessageBundle(),
                 key,
                 args,
                 getSeverityLevel(),
                 getId(),
                 getClass(),
                 getCustomMessages().get(key)));
     }
 
     @Override
     public final void log(int lineNo, int colNo, String key,
             Object... args) {
         final int col = 1 + CommonUtils.lengthExpandedTabs(
             getLines()[lineNo - 1], colNo, tabWidth);
         context.get().messages.add(
             new LocalizedMessage(
                 lineNo,
                 col,
                 getMessageBundle(),
                 key,
                 args,
                 getSeverityLevel(),
                 getId(),
                 getClass(),
                 getCustomMessages().get(key)));
     }
 
     /**
      * The actual context holder.
      */
     private static class FileContext {
         /** The sorted set for collecting messages. */
         private final SortedSet<LocalizedMessage> messages = new TreeSet<>();
 
         /** The current file contents. */
         private FileContents fileContents;
     }
 }
