diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheck.java
index d989f3ce0..317737569 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheck.java
@@ -29,115 +29,115 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  * {@link java.util.regex.Pattern regular expression}
  * and defaults to
  * <strong>^[a-z][a-zA-Z0-9]*$</strong>.
  * </p>
  *
  * <p>
  * Also, checks if a method name has the same name as the residing class.
  * The default is false (it is not allowed).  It is legal in Java to have
  * method with the same name as a class.  As long as a return type is specified
  * it is a method and not a constructor which it could be easily confused as.
  * <h3>Does not check-style the name of an overriden methods</h3> because the developer does not
  * have a choice in renaming such methods.
  * </p>
  *
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="MethodName"/&gt;
  * </pre>
  * <p>
  * An example of how to configure the check for names that begin with
  * a lower case letter, followed by letters, digits, and underscores is:
  * </p>
  * <pre>
  * &lt;module name="MethodName"&gt;
  *    &lt;property name="format" value="^[a-z](_?[a-zA-Z0-9]+)*$"/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * <p>
  * An example of how to configure the check to allow method names
  * to be equal to the residing class name is:
  * </p>
  * <pre>
  * &lt;module name="MethodName"&gt;
  *    &lt;property name="allowClassName" value="true"/&gt;
  * &lt;/module&gt;
  * </pre>
  * @author Oliver Burn
  * @author Travis Schneeberger
  * @author Utkarsh Srivastava
  * @version 1.1
  */
 public class MethodNameCheck
     extends AbstractAccessControlNameCheck
 {
     /**
      * for allowing method name to be the same as the class name.
      */
-    private boolean mAllowClassName;
+    private boolean allowClassName;
 
     /**
      * {@link Override Override} annotation name.
      */
     private static final String OVERRIDE = "Override";
 
     /**
      * Canonical {@link Override Override} annotation name.
      */
     private static final String CANONICAL_OVERRIDE = "java.lang." + OVERRIDE;
 
     /** Creates a new <code>MethodNameCheck</code> instance. */
     public MethodNameCheck()
     {
         super("^[a-z][a-zA-Z0-9]*$");
     }
 
     @Override
     public int[] getDefaultTokens()
     {
         return new int[] {TokenTypes.METHOD_DEF, };
     }
 
     @Override
-    public void visitToken(DetailAST aAst)
+    public void visitToken(DetailAST ast)
     {
-        if (!AnnotationUtility.containsAnnotation(aAst, OVERRIDE)
-            && !AnnotationUtility.containsAnnotation(aAst, CANONICAL_OVERRIDE))
+        if (!AnnotationUtility.containsAnnotation(ast, OVERRIDE)
+            && !AnnotationUtility.containsAnnotation(ast, CANONICAL_OVERRIDE))
         {
-            super.visitToken(aAst); // Will check the name against the format.
+            super.visitToken(ast); // Will check the name against the format.
         }
 
-        if (!mAllowClassName) {
+        if (!allowClassName) {
             final DetailAST method =
-                aAst.findFirstToken(TokenTypes.IDENT);
+                ast.findFirstToken(TokenTypes.IDENT);
             //in all cases this will be the classDef type except anon inner
             //with anon inner classes this will be the Literal_New keyword
-            final DetailAST classDefOrNew = aAst.getParent().getParent();
+            final DetailAST classDefOrNew = ast.getParent().getParent();
             final DetailAST classIdent =
                 classDefOrNew.findFirstToken(TokenTypes.IDENT);
             // Following logic is to handle when a classIdent can not be
             // found. This is when you have a Literal_New keyword followed
             // a DOT, which is when you have:
             // new Outclass.InnerInterface(x) { ... }
             // Such a rare case, will not have the logic to handle parsing
             // down the tree looking for the first ident.
             if ((null != classIdent)
                 && method.getText().equals(classIdent.getText()))
             {
                 log(method.getLineNo(), method.getColumnNo(),
                     "method.name.equals.class.name", method.getText());
             }
         }
     }
 
     /**
      * Sets the property for allowing a method to be the same name as a class.
-     * @param aAllowClassName true to allow false to disallow
+     * @param allowClassName true to allow false to disallow
      */
-    public void setAllowClassName(boolean aAllowClassName)
+    public void setAllowClassName(boolean allowClassName)
     {
-        mAllowClassName = aAllowClassName;
+        this.allowClassName = allowClassName;
     }
 }
