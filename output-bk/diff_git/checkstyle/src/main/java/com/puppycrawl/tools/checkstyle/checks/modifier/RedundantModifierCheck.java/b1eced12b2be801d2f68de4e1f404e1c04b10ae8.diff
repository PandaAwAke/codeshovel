diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
index 22081a833..b3283deda 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
@@ -94,282 +94,279 @@ import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
  * @author <a href="mailto:piotr.listkiewicz@gmail.com">liscju</a>
  * @author <a href="mailto:andreyselkin@gmail.com">Andrei Selkin</a>
  * @author Vladislav Lisetskiy
  */
 public class RedundantModifierCheck
     extends AbstractCheck {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_KEY = "redundantModifier";
 
     /**
      * An array of tokens for interface modifiers.
      */
     private static final int[] TOKENS_FOR_INTERFACE_MODIFIERS = {
         TokenTypes.LITERAL_STATIC,
         TokenTypes.ABSTRACT,
     };
 
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
     }
 
     @Override
     public int[] getRequiredTokens() {
         return CommonUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.METHOD_DEF,
             TokenTypes.VARIABLE_DEF,
             TokenTypes.ANNOTATION_FIELD_DEF,
             TokenTypes.INTERFACE_DEF,
             TokenTypes.CTOR_DEF,
             TokenTypes.CLASS_DEF,
             TokenTypes.ENUM_DEF,
             TokenTypes.RESOURCE,
         };
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         if (ast.getType() == TokenTypes.INTERFACE_DEF) {
             checkInterfaceModifiers(ast);
         }
-        else if (ast.getType() == TokenTypes.CTOR_DEF) {
-            if (isEnumMember(ast)) {
-                checkEnumConstructorModifiers(ast);
-            }
-            else {
-                checkClassConstructorModifiers(ast);
-            }
-        }
         else if (ast.getType() == TokenTypes.ENUM_DEF) {
             checkEnumDef(ast);
         }
-        else if (isInterfaceOrAnnotationMember(ast)) {
-            processInterfaceOrAnnotation(ast);
-        }
-        else if (ast.getType() == TokenTypes.METHOD_DEF) {
-            processMethods(ast);
-        }
-        else if (ast.getType() == TokenTypes.RESOURCE) {
-            processResources(ast);
+        else {
+            if (ast.getType() == TokenTypes.CTOR_DEF) {
+                if (isEnumMember(ast)) {
+                    checkEnumConstructorModifiers(ast);
+                }
+                else {
+                    checkClassConstructorModifiers(ast);
+                }
+            }
+            else if (ast.getType() == TokenTypes.METHOD_DEF) {
+                processMethods(ast);
+            }
+            else if (ast.getType() == TokenTypes.RESOURCE) {
+                processResources(ast);
+            }
+
+            if (isInterfaceOrAnnotationMember(ast)) {
+                processInterfaceOrAnnotation(ast);
+            }
         }
     }
 
     /**
      * Checks if interface has proper modifiers.
      * @param ast interface to check
      */
     private void checkInterfaceModifiers(DetailAST ast) {
         final DetailAST modifiers =
             ast.findFirstToken(TokenTypes.MODIFIERS);
 
         for (final int tokenType : TOKENS_FOR_INTERFACE_MODIFIERS) {
             final DetailAST modifier =
                     modifiers.findFirstToken(tokenType);
             if (modifier != null) {
                 log(modifier.getLineNo(), modifier.getColumnNo(),
                         MSG_KEY, modifier.getText());
             }
         }
     }
 
     /**
      * Check if enum constructor has proper modifiers.
      * @param ast constructor of enum
      */
     private void checkEnumConstructorModifiers(DetailAST ast) {
         final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
         final DetailAST modifier = modifiers.getFirstChild();
         if (modifier != null) {
             log(modifier.getLineNo(), modifier.getColumnNo(),
                     MSG_KEY, modifier.getText());
         }
     }
 
     /**
      * Checks whether enum has proper modifiers.
      * @param ast enum definition.
      */
     private void checkEnumDef(DetailAST ast) {
         if (isInterfaceOrAnnotationMember(ast)) {
             processInterfaceOrAnnotation(ast);
         }
         else if (ast.getParent() != null) {
-            final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
-            final DetailAST staticModifier = modifiers.findFirstToken(TokenTypes.LITERAL_STATIC);
-            if (staticModifier != null) {
-                log(staticModifier.getLineNo(), staticModifier.getColumnNo(),
-                        MSG_KEY, staticModifier.getText());
-            }
+            checkForRedundantModifier(ast, TokenTypes.LITERAL_STATIC);
         }
     }
 
     /**
      * Do validation of interface of annotation.
      * @param ast token AST
      */
     private void processInterfaceOrAnnotation(DetailAST ast) {
         final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
         DetailAST modifier = modifiers.getFirstChild();
         while (modifier != null) {
 
             // javac does not allow final or static in interface methods
             // order annotation fields hence no need to check that this
             // is not a method or annotation field
 
             final int type = modifier.getType();
             if (type == TokenTypes.LITERAL_PUBLIC
                 || type == TokenTypes.LITERAL_STATIC
                         && ast.getType() != TokenTypes.METHOD_DEF
                 || type == TokenTypes.ABSTRACT
                         && ast.getType() != TokenTypes.CLASS_DEF
                 || type == TokenTypes.FINAL
                         && ast.getType() != TokenTypes.CLASS_DEF) {
                 log(modifier.getLineNo(), modifier.getColumnNo(),
                         MSG_KEY, modifier.getText());
                 break;
             }
 
             modifier = modifier.getNextSibling();
         }
     }
 
     /**
-     * Process validation ofMethods.
+     * Process validation of Methods.
      * @param ast method AST
      */
     private void processMethods(DetailAST ast) {
         final DetailAST modifiers =
                         ast.findFirstToken(TokenTypes.MODIFIERS);
         // private method?
         boolean checkFinal =
             modifiers.branchContains(TokenTypes.LITERAL_PRIVATE);
         // declared in a final class?
         DetailAST parent = ast.getParent();
         while (parent != null) {
             if (parent.getType() == TokenTypes.CLASS_DEF) {
                 final DetailAST classModifiers =
                     parent.findFirstToken(TokenTypes.MODIFIERS);
                 checkFinal = checkFinal || classModifiers.branchContains(TokenTypes.FINAL);
                 parent = null;
             }
             else if (parent.getType() == TokenTypes.LITERAL_NEW) {
                 checkFinal = true;
                 parent = null;
             }
             else {
                 parent = parent.getParent();
             }
         }
         if (checkFinal && !isAnnotatedWithSafeVarargs(ast)) {
-            DetailAST modifier = modifiers.getFirstChild();
-            while (modifier != null) {
-                final int type = modifier.getType();
-                if (type == TokenTypes.FINAL) {
-                    log(modifier.getLineNo(), modifier.getColumnNo(),
-                            MSG_KEY, modifier.getText());
-                    break;
-                }
-                modifier = modifier.getNextSibling();
+            checkForRedundantModifier(ast, TokenTypes.FINAL);
+        }
+
+        if (!ast.branchContains(TokenTypes.SLIST)) {
+            processAbstractMethodParameters(ast);
+        }
+    }
+
+    /**
+     * Process validation of parameters for Methods with no definition.
+     * @param ast method AST
+     */
+    private void processAbstractMethodParameters(DetailAST ast) {
+        final DetailAST parameters = ast.findFirstToken(TokenTypes.PARAMETERS);
+
+        for (DetailAST child = parameters.getFirstChild(); child != null; child = child
+                .getNextSibling()) {
+            if (child.getType() == TokenTypes.PARAMETER_DEF) {
+                checkForRedundantModifier(child, TokenTypes.FINAL);
             }
         }
     }
 
     /**
      * Check if class constructor has proper modifiers.
      * @param classCtorAst class constructor ast
      */
     private void checkClassConstructorModifiers(DetailAST classCtorAst) {
         final DetailAST classDef = classCtorAst.getParent().getParent();
         if (!isClassPublic(classDef) && !isClassProtected(classDef)) {
-            checkForRedundantPublicModifier(classCtorAst);
+            checkForRedundantModifier(classCtorAst, TokenTypes.LITERAL_PUBLIC);
         }
     }
 
     /**
      * Checks if given resource has redundant modifiers.
      * @param ast ast
      */
     private void processResources(DetailAST ast) {
-        final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
-        DetailAST modifier = modifiers.getFirstChild();
-
-        while (modifier != null) {
-            final int type = modifier.getType();
-
-            if (type == TokenTypes.FINAL) {
-                log(modifier.getLineNo(), modifier.getColumnNo(), MSG_KEY, modifier.getText());
-                break;
-            }
-
-            modifier = modifier.getNextSibling();
-        }
+        checkForRedundantModifier(ast, TokenTypes.FINAL);
     }
 
     /**
-     * Checks if given ast has redundant public modifier.
+     * Checks if given ast has a redundant modifier.
      * @param ast ast
+     * @param modifierType The modifier to check for.
      */
-    private void checkForRedundantPublicModifier(DetailAST ast) {
+    private void checkForRedundantModifier(DetailAST ast, int modifierType) {
         final DetailAST astModifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
         DetailAST astModifier = astModifiers.getFirstChild();
         while (astModifier != null) {
-            if (astModifier.getType() == TokenTypes.LITERAL_PUBLIC) {
+            if (astModifier.getType() == modifierType) {
                 log(astModifier.getLineNo(), astModifier.getColumnNo(),
                         MSG_KEY, astModifier.getText());
             }
 
             astModifier = astModifier.getNextSibling();
         }
     }
 
     /**
      * Checks if given class ast has protected modifier.
      * @param classDef class ast
      * @return true if class is protected, false otherwise
      */
     private static boolean isClassProtected(DetailAST classDef) {
         final DetailAST classModifiers =
                 classDef.findFirstToken(TokenTypes.MODIFIERS);
         return classModifiers.branchContains(TokenTypes.LITERAL_PROTECTED);
     }
 
     /**
      * Checks if given class is accessible from "public" scope.
      * @param ast class def to check
      * @return true if class is accessible from public scope,false otherwise
      */
     private static boolean isClassPublic(DetailAST ast) {
         boolean isAccessibleFromPublic = false;
         final boolean isMostOuterScope = ast.getParent() == null;
         final DetailAST modifiersAst = ast.findFirstToken(TokenTypes.MODIFIERS);
         final boolean hasPublicModifier = modifiersAst.branchContains(TokenTypes.LITERAL_PUBLIC);
 
         if (isMostOuterScope) {
             isAccessibleFromPublic = hasPublicModifier;
         }
         else {
             final DetailAST parentClassAst = ast.getParent().getParent();
 
             if (hasPublicModifier || parentClassAst.getType() == TokenTypes.INTERFACE_DEF) {
                 isAccessibleFromPublic = isClassPublic(parentClassAst);
             }
         }
 
         return isAccessibleFromPublic;
     }
 
     /**
      * Checks if current AST node is member of Enum.
      * @param ast AST node
      * @return true if it is an enum member
      */
     private static boolean isEnumMember(DetailAST ast) {
