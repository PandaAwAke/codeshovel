diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
index 67f52bc84..dc20a7b30 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
@@ -65,104 +65,104 @@ public class JavadocTypeCheck
     public static final String TAG_FORMAT = "type.tagFormat";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MISSING_TAG = "type.missingTag";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String UNUSED_TAG = "javadoc.unusedTag";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String UNUSED_TAG_GENERAL = "javadoc.unusedTagGeneral";
 
     /** the scope to check for */
     private Scope scope = Scope.PRIVATE;
     /** the visibility scope where Javadoc comments shouldn't be checked **/
     private Scope excludeScope;
     /** compiled regexp to match author tag content **/
     private Pattern authorFormatPattern;
     /** compiled regexp to match version tag content **/
     private Pattern versionFormatPattern;
     /** regexp to match author tag content */
     private String authorFormat;
     /** regexp to match version tag content */
     private String versionFormat;
     /**
      * controls whether to ignore errors when a method has type parameters but
      * does not have matching param tags in the javadoc. Defaults to false.
      */
     private boolean allowMissingParamTags;
     /** controls whether to flag errors for unknown tags. Defaults to false. */
     private boolean allowUnknownTags;
 
     /**
      * Sets the scope to check.
      * @param from string to set scope from
      */
     public void setScope(String from) {
         scope = Scope.getInstance(from);
     }
 
     /**
      * Set the excludeScope.
-     * @param scope a {@code String} value
+     * @param excludeScope a {@code String} value
      */
-    public void setExcludeScope(String scope) {
-        excludeScope = Scope.getInstance(scope);
+    public void setExcludeScope(String excludeScope) {
+        this.excludeScope = Scope.getInstance(excludeScope);
     }
 
     /**
      * Set the author tag pattern.
      * @param format a {@code String} value
      */
     public void setAuthorFormat(String format) {
         authorFormat = format;
         authorFormatPattern = Utils.createPattern(format);
     }
 
     /**
      * Set the version format pattern.
      * @param format a {@code String} value
      */
     public void setVersionFormat(String format) {
         versionFormat = format;
         versionFormatPattern = Utils.createPattern(format);
     }
 
     /**
      * Controls whether to allow a type which has type parameters to
      * omit matching param tags in the javadoc. Defaults to false.
      *
      * @param flag a {@code Boolean} value
      */
     public void setAllowMissingParamTags(boolean flag) {
         allowMissingParamTags = flag;
     }
 
     /**
      * Controls whether to flag errors for unknown tags. Defaults to false.
      * @param flag a {@code Boolean} value
      */
     public void setAllowUnknownTags(boolean flag) {
         allowUnknownTags = flag;
     }
 
     @Override
     public int[] getDefaultTokens() {
         return new int[] {
             TokenTypes.INTERFACE_DEF,
             TokenTypes.CLASS_DEF,
             TokenTypes.ENUM_DEF,
             TokenTypes.ANNOTATION_DEF,
         };
     }
 
     @Override
     public int[] getAcceptableTokens() {
@@ -170,109 +170,109 @@ public class JavadocTypeCheck
             TokenTypes.INTERFACE_DEF,
             TokenTypes.CLASS_DEF,
             TokenTypes.ENUM_DEF,
             TokenTypes.ANNOTATION_DEF,
         };
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         if (shouldCheck(ast)) {
             final FileContents contents = getFileContents();
             final int lineNo = ast.getLineNo();
             final TextBlock cmt = contents.getJavadocBefore(lineNo);
             if (cmt == null) {
                 log(lineNo, JAVADOC_MISSING);
             }
             else {
                 final List<JavadocTag> tags = getJavadocTags(cmt);
                 if (ScopeUtils.isOuterMostType(ast)) {
                     // don't check author/version for inner classes
                     checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),
                             authorFormatPattern, authorFormat);
                     checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),
                             versionFormatPattern, versionFormat);
                 }
 
                 final List<String> typeParamNames =
                     CheckUtils.getTypeParameterNames(ast);
 
                 if (!allowMissingParamTags) {
                     //Check type parameters that should exist, do
                     for (final String typeParamName : typeParamNames) {
                         checkTypeParamTag(
                             lineNo, tags, typeParamName);
                     }
                 }
 
                 checkUnusedTypeParamTags(tags, typeParamNames);
             }
         }
     }
 
     /**
      * Whether we should check this node.
      * @param ast a given node.
      * @return whether we should check a given node.
      */
     private boolean shouldCheck(final DetailAST ast) {
         final DetailAST mods = ast.findFirstToken(TokenTypes.MODIFIERS);
         final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);
-        final Scope scope =
+        final Scope customScope =
             ScopeUtils.inInterfaceOrAnnotationBlock(ast)
                 ? Scope.PUBLIC : declaredScope;
         final Scope surroundingScope = ScopeUtils.getSurroundingScope(ast);
 
-        return scope.isIn(this.scope)
+        return customScope.isIn(this.scope)
             && (surroundingScope == null || surroundingScope.isIn(this.scope))
             && (excludeScope == null
-                || !scope.isIn(excludeScope)
+                || !customScope.isIn(excludeScope)
                 || surroundingScope != null
                 && !surroundingScope.isIn(excludeScope));
     }
 
     /**
      * Gets all standalone tags from a given javadoc.
      * @param cmt the Javadoc comment to process.
      * @return all standalone tags from the given javadoc.
      */
     private List<JavadocTag> getJavadocTags(TextBlock cmt) {
         final JavadocTags tags = JavadocUtils.getJavadocTags(cmt,
             JavadocUtils.JavadocTagType.BLOCK);
         if (!allowUnknownTags) {
             for (final InvalidJavadocTag tag : tags.getInvalidTags()) {
                 log(tag.getLine(), tag.getCol(), UNKNOWN_TAG,
                     tag.getName());
             }
         }
         return tags.getValidTags();
     }
 
     /**
      * Verifies that a type definition has a required tag.
      * @param lineNo the line number for the type definition.
      * @param tags tags from the Javadoc comment for the type definition.
      * @param tagName the required tag name.
      * @param formatPattern regexp for the tag value.
      * @param format pattern for the tag value.
      */
     private void checkTag(int lineNo, List<JavadocTag> tags, String tagName,
                           Pattern formatPattern, String format) {
         if (formatPattern == null) {
             return;
         }
 
         int tagCount = 0;
         for (int i = tags.size() - 1; i >= 0; i--) {
             final JavadocTag tag = tags.get(i);
             if (tag.getTagName().equals(tagName)) {
                 tagCount++;
                 if (!formatPattern.matcher(tag.getArg1()).find()) {
                     log(lineNo, TAG_FORMAT, "@" + tagName, format);
                 }
             }
         }
         if (tagCount == 0) {
             log(lineNo, MISSING_TAG, "@" + tagName);
         }
     }
 
