diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentLevel.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentLevel.java
index 595de0232..25d677ea9 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentLevel.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentLevel.java
@@ -33,101 +33,101 @@ public class IndentLevel
 
     /**
      * Creates new instance with one accaptable indentation level.
      * @param indent accaptable indentation level.
      */
     public IndentLevel(int indent)
     {
         levels.set(indent);
     }
 
     /**
      * Creates new instance for nested structure.
      * @param base parent's level
      * @param offsets offsets from parent's level.
      */
     public IndentLevel(IndentLevel base, int... offsets)
     {
         final BitSet src = base.levels;
         for (int i = src.nextSetBit(0); i >= 0; i = src.nextSetBit(i + 1)) {
             for (int offset : offsets) {
                 levels.set(i + offset);
             }
         }
     }
 
     /**
      * Checks wether we have more than one level.
      * @return wether we have more than one level.
      */
     public final boolean isMultiLevel()
     {
         return levels.cardinality() > 1;
     }
 
     /**
      * Checks if given indentation is acceptable.
      * @param indent indentation to check.
      * @return true if given indentation is acceptable,
      *         false otherwise.
      */
     public boolean accept(int indent)
     {
         return levels.get(indent);
     }
 
     /**
      * @param indent indentation to check.
      * @return true if <code>indent</code> less then minimal of
      *         acceptable indentation levels, false otherwise.
      */
-    public boolean gt(int indent)
+    public boolean greaterThan(int indent)
     {
         return levels.nextSetBit(0) > indent;
     }
 
     /**
      * Adds one more acceptable indentation level.
      * @param indent new acceptable indentation.
      */
     public void addAcceptedIndent(int indent)
     {
         levels.set(indent);
     }
 
     /**
      * Adds one more acceptable indentation level.
      * @param indent new acceptable indentation.
      */
     public void addAcceptedIndent(IndentLevel indent)
     {
         levels.or(indent.levels);
     }
 
     /**
      * Returns first indentation level.
      * @return indentation level.
      */
     public int getFirstIndentLevel()
     {
         return levels.nextSetBit(0);
     }
 
     /**
      * Returns last indentation level.
      * @return indentation level.
      */
     public int getLastIndentLevel()
     {
         return levels.length() - 1;
     }
 
     @Override
     public String toString()
     {
         if (levels.cardinality() == 1) {
             return String.valueOf(levels.nextSetBit(0));
         }
         final StringBuilder sb = new StringBuilder();
         for (int i = levels.nextSetBit(0); i >= 0;
             i = levels.nextSetBit(i + 1))
         {
