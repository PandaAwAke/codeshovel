diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocPackageCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocPackageCheck.java
index dbbe707d1..053d56c0a 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocPackageCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocPackageCheck.java
@@ -23,78 +23,77 @@ import java.io.File;
 import java.util.List;
 import java.util.Set;
 
 import com.google.common.collect.Sets;
 import com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck;
 
 /**
  * Checks that all packages have a package documentation. See the documentation
  * for more information.
  * @author Oliver Burn
  */
 public class JavadocPackageCheck extends AbstractFileSetCheck {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_LEGACY_PACKAGE_HTML = "javadoc.legacyPackageHtml";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_PACKAGE_INFO = "javadoc.packageInfo";
 
     /** The directories checked. */
     private final Set<File> directoriesChecked = Sets.newHashSet();
 
     /** Indicates if allow legacy "package.html" file to be used. */
     private boolean allowLegacy;
 
     /**
      * Creates a new instance.
      */
     public JavadocPackageCheck() {
         // java, not html!
         // The rule is: Every JAVA file should have a package.html sibling
         setFileExtensions("java");
     }
 
     @Override
     public void beginProcessing(String charset) {
         super.beginProcessing(charset);
         directoriesChecked.clear();
     }
 
     @Override
     protected void processFiltered(File file, List<String> lines) {
         // Check if already processed directory
         final File dir = file.getParentFile();
-        if (directoriesChecked.contains(dir)) {
-            return;
-        }
-        directoriesChecked.add(dir);
+        if (!directoriesChecked.contains(dir)) {
+            directoriesChecked.add(dir);
 
-        // Check for the preferred file.
-        final File packageInfo = new File(dir, "package-info.java");
-        final File packageHtml = new File(dir, "package.html");
+            // Check for the preferred file.
+            final File packageInfo = new File(dir, "package-info.java");
+            final File packageHtml = new File(dir, "package.html");
 
-        if (packageInfo.exists()) {
-            if (packageHtml.exists()) {
-                log(0, MSG_LEGACY_PACKAGE_HTML);
+            if (packageInfo.exists()) {
+                if (packageHtml.exists()) {
+                    log(0, MSG_LEGACY_PACKAGE_HTML);
+                }
+            }
+            else if (!allowLegacy || !packageHtml.exists()) {
+                log(0, MSG_PACKAGE_INFO);
             }
-        }
-        else if (!allowLegacy || !packageHtml.exists()) {
-            log(0, MSG_PACKAGE_INFO);
         }
     }
 
     /**
      * Indicates whether to allow support for the legacy <i>package.html</i>
      * file.
      * @param allowLegacy whether to allow support.
      */
     public void setAllowLegacy(boolean allowLegacy) {
         this.allowLegacy = allowLegacy;
     }
 }
