diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java
index d9b6fe0e3..ee7f6efde 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java
@@ -72,76 +72,76 @@ public class ImportControlCheck extends Check {
      * The package controller for the current file. Used for performance
      * optimisation.
      */
     private PkgControl currentLeaf;
 
     @Override
     public int[] getDefaultTokens() {
         return new int[] {TokenTypes.PACKAGE_DEF, TokenTypes.IMPORT,
                           TokenTypes.STATIC_IMPORT, };
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.PACKAGE_DEF, TokenTypes.IMPORT,
                           TokenTypes.STATIC_IMPORT, };
     }
 
     @Override
     public void beginTree(final DetailAST rootAST) {
         currentLeaf = null;
     }
 
     @Override
     public void visitToken(final DetailAST ast) {
         if (ast.getType() == TokenTypes.PACKAGE_DEF) {
             final DetailAST nameAST = ast.getLastChild().getPreviousSibling();
             final FullIdent full = FullIdent.createFullIdent(nameAST);
             if (root == null) {
                 log(nameAST, MSG_MISSING_FILE);
             }
             else {
                 inPkg = full.getText();
                 currentLeaf = root.locateFinest(inPkg);
                 if (currentLeaf == null) {
                     log(nameAST, MSG_UNKNOWN_PKG);
                 }
             }
         }
         else if (currentLeaf != null) {
             final FullIdent imp;
             if (ast.getType() == TokenTypes.IMPORT) {
                 imp = FullIdent.createFullIdentBelow(ast);
             }
             else {
                 // know it is a static import
                 imp = FullIdent.createFullIdent(ast
                         .getFirstChild().getNextSibling());
             }
             final AccessResult access = currentLeaf.checkAccess(imp.getText(),
                     inPkg);
-            if (AccessResult.ALLOWED != access) {
+            if (access != AccessResult.ALLOWED) {
                 log(ast, MSG_DISALLOWED, imp.getText());
             }
         }
     }
 
     /**
      * Set the pnameter for the file containing the import control
      * configuration. It will cause the file to be loaded.
      * @param name the name of the file to load.
      * @throws ConversionException on error loading the file.
      */
     public void setFile(final String name) {
         // Handle empty param
         if (StringUtils.isBlank(name)) {
             return;
         }
 
         try {
             root = ImportControlLoader.load(new File(name).toURI());
         }
         catch (final CheckstyleException ex) {
             throw new ConversionException("Unable to load " + name, ex);
         }
     }
 }
