diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SeparatorWrapCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SeparatorWrapCheck.java
index 7a8db0dc5..bdfd31bfb 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SeparatorWrapCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SeparatorWrapCheck.java
@@ -85,79 +85,80 @@ public class SeparatorWrapCheck
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_LINE_PREVIOUS = "line.previous";
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_LINE_NEW = "line.new";
 
     /** The policy to enforce. */
     private WrapOption option = WrapOption.EOL;
 
     /**
      * Set the option to enforce.
      * @param optionStr string to decode option from
      * @throws IllegalArgumentException if unable to decode
      */
     public void setOption(String optionStr) {
         try {
             option = WrapOption.valueOf(optionStr.trim().toUpperCase(Locale.ENGLISH));
         }
         catch (IllegalArgumentException iae) {
             throw new IllegalArgumentException("unable to parse " + optionStr, iae);
         }
     }
 
     @Override
     public int[] getDefaultTokens() {
         return new int[] {
             TokenTypes.DOT,
             TokenTypes.COMMA,
         };
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.DOT,
             TokenTypes.COMMA,
             TokenTypes.SEMI,
             TokenTypes.ELLIPSIS,
             TokenTypes.AT,
             TokenTypes.LPAREN,
             TokenTypes.RPAREN,
             TokenTypes.ARRAY_DECLARATOR,
             TokenTypes.RBRACK,
+            TokenTypes.METHOD_REF,
         };
     }
 
     @Override
     public int[] getRequiredTokens() {
         return CommonUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
     public void visitToken(DetailAST ast) {
         final String text = ast.getText();
         final int colNo = ast.getColumnNo();
         final int lineNo = ast.getLineNo();
         final String currentLine = getLines()[lineNo - 1];
         final String substringAfterToken =
                 currentLine.substring(colNo + text.length()).trim();
         final String substringBeforeToken =
                 currentLine.substring(0, colNo).trim();
 
         if (option == WrapOption.EOL
                 && substringBeforeToken.isEmpty()) {
             log(lineNo, colNo, MSG_LINE_PREVIOUS, text);
         }
         else if (option == WrapOption.NL
                  && substringAfterToken.isEmpty()) {
             log(lineNo, colNo, MSG_LINE_NEW, text);
         }
     }
 }
