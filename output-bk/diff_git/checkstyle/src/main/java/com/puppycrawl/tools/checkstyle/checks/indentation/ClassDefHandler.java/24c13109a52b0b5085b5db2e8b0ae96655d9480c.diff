diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ClassDefHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ClassDefHandler.java
index 577504016..82000f866 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ClassDefHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ClassDefHandler.java
@@ -44,75 +44,69 @@ public class ClassDefHandler extends BlockParentHandler
               (ast.getType() == TokenTypes.CLASS_DEF)
               ? "class def" : ((ast.getType() == TokenTypes.ENUM_DEF)
                   ? "enum def" : "interface def"),
               ast, parent);
     }
 
     @Override
     protected DetailAST getLCurly()
     {
         return getMainAst().findFirstToken(TokenTypes.OBJBLOCK)
             .findFirstToken(TokenTypes.LCURLY);
     }
 
     @Override
     protected DetailAST getRCurly()
     {
         return getMainAst().findFirstToken(TokenTypes.OBJBLOCK)
             .findFirstToken(TokenTypes.RCURLY);
     }
 
     @Override
     protected DetailAST getToplevelAST()
     {
         return null;
         // note: ident checked by hand in check indentation;
     }
 
     @Override
     protected DetailAST getListChild()
     {
         return getMainAst().findFirstToken(TokenTypes.OBJBLOCK);
     }
 
     @Override
     public void checkIndentation()
     {
         final DetailAST modifiers = getMainAst().findFirstToken(TokenTypes.MODIFIERS);
         if (modifiers.getChildCount() == 0) {
             final DetailAST ident = getMainAst().findFirstToken(TokenTypes.IDENT);
             final int lineStart = getLineStart(ident);
             if (!getLevel().accept(lineStart)) {
                 logError(ident, "ident", lineStart);
             }
 
         }
         else {
             checkModifiers();
         }
 
         final LineWrappingHandler lineWrap =
-            new LineWrappingHandler(getIndentCheck(), getMainAst()) {
-                @Override
-                public DetailAST findLastNode(DetailAST firstNode)
-                {
-                    return firstNode.getLastChild();
-                }
-            };
+            new LineWrappingHandler(getIndentCheck(), getMainAst(), getMainAst().getLastChild());
         lineWrap.checkIndentation();
         super.checkIndentation();
     }
 
     @Override
     protected int[] getCheckedChildren()
     {
         return new int[] {
             TokenTypes.EXPR,
             TokenTypes.OBJBLOCK,
             TokenTypes.LITERAL_BREAK,
             TokenTypes.LITERAL_RETURN,
             TokenTypes.LITERAL_THROW,
             TokenTypes.LITERAL_CONTINUE,
         };
     }
 
 }
