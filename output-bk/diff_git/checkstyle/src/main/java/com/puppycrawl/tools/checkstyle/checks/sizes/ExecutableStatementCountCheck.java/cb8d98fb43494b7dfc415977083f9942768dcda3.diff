diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheck.java
index 28494d679..0e60a5534 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheck.java
@@ -125,111 +125,110 @@ public final class ExecutableStatementCountCheck
     @Override
     public void leaveToken(DetailAST ast) {
         switch (ast.getType()) {
             case TokenTypes.CTOR_DEF:
             case TokenTypes.METHOD_DEF:
             case TokenTypes.INSTANCE_INIT:
             case TokenTypes.STATIC_INIT:
                 leaveMemberDef(ast);
                 break;
             case TokenTypes.SLIST:
                 // Do nothing
                 break;
             default:
                 throw new IllegalStateException(ast.toString());
         }
     }
 
     /**
      * Process the start of the member definition.
      * @param ast the token representing the member definition.
      */
     private void visitMemberDef(DetailAST ast) {
         contextStack.push(context);
         context = new Context(ast);
     }
 
     /**
      * Process the end of a member definition.
      *
      * @param ast the token representing the member definition.
      */
     private void leaveMemberDef(DetailAST ast) {
         final int count = context.getCount();
         if (count > getMax()) {
             log(ast.getLineNo(), ast.getColumnNo(),
                     MSG_KEY, count, getMax());
         }
         context = contextStack.pop();
     }
 
     /**
      * Process the end of a statement list.
      *
      * @param ast the token representing the statement list.
      */
     private void visitSlist(DetailAST ast) {
         if (context.getAST() != null) {
             // find member AST for the statement list
             final DetailAST contextAST = context.getAST();
             DetailAST parent = ast.getParent();
-            while (parent != null) {
-                final int type = parent.getType();
-                if (type == TokenTypes.CTOR_DEF
-                    || type == TokenTypes.METHOD_DEF
-                    || type == TokenTypes.INSTANCE_INIT
-                    || type == TokenTypes.STATIC_INIT) {
-                    if (parent == contextAST) {
-                        context.addCount(ast.getChildCount() / 2);
-                    }
-                    break;
-                }
+            int type = parent.getType();
+            while (type != TokenTypes.CTOR_DEF
+                && type != TokenTypes.METHOD_DEF
+                && type != TokenTypes.INSTANCE_INIT
+                && type != TokenTypes.STATIC_INIT) {
+
                 parent = parent.getParent();
+                type = parent.getType();
+            }
+            if (parent == contextAST) {
+                context.addCount(ast.getChildCount() / 2);
             }
         }
     }
 
     /**
      * Class to encapsulate counting information about one member.
      * @author Simon Harris
      */
     private static class Context {
         /** Member AST node. */
         private final DetailAST ast;
 
         /** Counter for context elements. */
         private int count;
 
         /**
          * Creates new member context.
          * @param ast member AST node.
          */
         public Context(DetailAST ast) {
             this.ast = ast;
             count = 0;
         }
 
         /**
          * Increase count.
          * @param count the count increment.
          */
         public void addCount(int count) {
             this.count += count;
         }
 
         /**
          * Gets the member AST node.
          * @return the member AST node.
          */
         public DetailAST getAST() {
             return ast;
         }
 
         /**
          * Gets the count.
          * @return the count.
          */
         public int getCount() {
             return count;
         }
     }
 }
