diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java
index adbc0b616..f21476ebf 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java
@@ -69,79 +69,79 @@ class MultilineDetector {
      */
     public MultilineDetector(DetectorOptions options) {
         this.options = options;
     }
 
     /**
      * Processes an entire text file looking for matches.
      * @param text the text to process
      */
     public void processLines(FileText text) {
         this.text = new FileText(text);
         resetState();
 
         if (!Strings.isNullOrEmpty(options.getFormat())) {
             matcher = options.getPattern().matcher(text.getFullText());
             findMatch();
             finish();
         }
         else {
             options.getReporter().log(0, EMPTY);
         }
     }
 
     /** Method that finds the matches. */
     private void findMatch() {
         try {
             boolean foundMatch = matcher.find();
 
             while (foundMatch) {
                 final LineColumn start = text.lineColumn(matcher.start());
                 final LineColumn end = text.lineColumn(matcher.end());
 
                 if (!options.getSuppressor().shouldSuppress(start.getLine(),
                         start.getColumn(), end.getLine(), end.getColumn())) {
                     currentMatches++;
                     if (currentMatches > options.getMaximum()) {
                         if (options.getMessage().isEmpty()) {
                             options.getReporter().log(start.getLine(),
                                     REGEXP_EXCEEDED, matcher.pattern().toString());
                         }
                         else {
                             options.getReporter()
                                     .log(start.getLine(), options.getMessage());
                         }
                     }
                 }
                 foundMatch = matcher.find();
             }
         }
         // see http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6337993 et al.
-        catch (StackOverflowError e) {
+        catch (StackOverflowError ignored) {
             // OK http://blog.igorminar.com/2008/05/catching-stackoverflowerror-and-bug-in.html
             // http://programmers.stackexchange.com/questions/
             //        209099/is-it-ever-okay-to-catch-stackoverflowerror-in-java
             options.getReporter().log(0, STACKOVERFLOW, matcher.pattern().toString());
         }
 
     }
 
     /** Perform processing at the end of a set of lines. */
     private void finish() {
         if (currentMatches < options.getMinimum()) {
             if (options.getMessage().isEmpty()) {
                 options.getReporter().log(0, REGEXP_MINIMUM,
                         options.getMinimum(), options.getFormat());
             }
             else {
                 options.getReporter().log(0, options.getMessage());
             }
         }
     }
 
     /**
      * Reset the state of the detector.
      */
     private void resetState() {
         currentMatches = 0;
     }
 }
