diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
index 678dc37c1..dcd0e2365 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
@@ -1,77 +1,77 @@
 ////////////////////////////////////////////////////////////////////////////////
 // checkstyle: Checks Java source code for adherence to a set of rules.
 // Copyright (C) 2001-2015 the original author or authors.
 //
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.puppycrawl.tools.checkstyle.checks.blocks;
 
 import org.apache.commons.lang3.ArrayUtils;
 
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.checks.AbstractOptionCheck;
-import com.puppycrawl.tools.checkstyle.utils.Utils;
+import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 
 /**
  * <p>
  * Checks the placement of left curly braces on types, methods and
  * other blocks:
  *  {@link TokenTypes#LITERAL_CATCH LITERAL_CATCH},  {@link
  * TokenTypes#LITERAL_DO LITERAL_DO},  {@link TokenTypes#LITERAL_ELSE
  * LITERAL_ELSE},  {@link TokenTypes#LITERAL_FINALLY LITERAL_FINALLY},  {@link
  * TokenTypes#LITERAL_FOR LITERAL_FOR},  {@link TokenTypes#LITERAL_IF
  * LITERAL_IF},  {@link TokenTypes#LITERAL_SWITCH LITERAL_SWITCH},  {@link
  * TokenTypes#LITERAL_SYNCHRONIZED LITERAL_SYNCHRONIZED},  {@link
  * TokenTypes#LITERAL_TRY LITERAL_TRY},  {@link TokenTypes#LITERAL_WHILE
  * LITERAL_WHILE},  {@link TokenTypes#STATIC_INIT STATIC_INIT}.
  * </p>
  *
  * <p>
  * The policy to verify is specified using the {@link LeftCurlyOption} class and
  * defaults to {@link LeftCurlyOption#EOL}. Policies {@link LeftCurlyOption#EOL}
  * and {@link LeftCurlyOption#NLOW} take into account property maxLineLength.
  * The default value for maxLineLength is 80.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="LeftCurly"/&gt;
  * </pre>
  * <p>
  * An example of how to configure the check with policy
  * {@link LeftCurlyOption#NLOW} and maxLineLength 120 is:
  * </p>
  * <pre>
  * &lt;module name="LeftCurly"&gt;
  *      &lt;property name="option"
  * value="nlow"/&gt;     &lt;property name="maxLineLength" value="120"/&gt; &lt;
  * /module&gt;
  * </pre>
  * <p>
  * An example of how to configure the check to validate enum definitions:
  * </p>
  * <pre>
  * &lt;module name="LeftCurly"&gt;
  *      &lt;property name="ignoreEnums" value="false"/&gt;
  * &lt;/module&gt;
  * </pre>
  *
  * @author Oliver Burn
  * @author lkuehne
  * @author maxvetrenko
  */
@@ -244,125 +244,125 @@ public class LeftCurlyCheck
         }
         final DetailAST tokenAfterLast;
 
         if (lastAnnot.getNextSibling() == null) {
             tokenAfterLast = modifiers.getNextSibling();
         }
         else {
             tokenAfterLast = lastAnnot.getNextSibling();
         }
 
         if (tokenAfterLast.getLineNo() > lastAnnot.getLineNo()) {
             return tokenAfterLast;
         }
         final int lastAnnotLineNumber = lastAnnot.getLineNo();
         while (lastAnnot.getPreviousSibling() != null
                && lastAnnot.getPreviousSibling().getLineNo() == lastAnnotLineNumber) {
             lastAnnot = lastAnnot.getPreviousSibling();
         }
         return lastAnnot;
     }
 
     /**
      * Find the last token of type {@code TokenTypes.ANNOTATION}
      * under the given set of modifiers.
      * @param modifiers {@code DetailAST}.
      * @return {@code DetailAST} or null if there are no annotations.
      */
     private static DetailAST findLastAnnotation(DetailAST modifiers) {
         DetailAST annot = modifiers.findFirstToken(TokenTypes.ANNOTATION);
         while (annot != null && annot.getNextSibling() != null
                && annot.getNextSibling().getType() == TokenTypes.ANNOTATION) {
             annot = annot.getNextSibling();
         }
         return annot;
     }
 
     /**
      * Verifies that a specified left curly brace is placed correctly
      * according to policy.
      * @param brace token for left curly brace
      * @param startToken token for start of expression
      */
     private void verifyBrace(final DetailAST brace,
                              final DetailAST startToken) {
         final String braceLine = getLine(brace.getLineNo() - 1);
 
         // Check for being told to ignore, or have '{}' which is a special case
         if (braceLine.length() <= brace.getColumnNo() + 1
                 || braceLine.charAt(brace.getColumnNo() + 1) != '}') {
             if (getAbstractOption() == LeftCurlyOption.NL) {
-                if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {
+                if (!CommonUtils.whitespaceBefore(brace.getColumnNo(), braceLine)) {
                     log(brace, MSG_KEY_LINE_NEW, OPEN_CURLY_BRACE, brace.getColumnNo() + 1);
                 }
             }
             else if (getAbstractOption() == LeftCurlyOption.EOL) {
 
                 validateEol(brace, braceLine);
             }
             else if (startToken.getLineNo() != brace.getLineNo()) {
 
                 validateNewLinePosion(brace, startToken, braceLine);
 
             }
         }
     }
 
     /**
      * Validate EOL case
      * @param brace brase AST
      * @param braceLine line content
      */
     private void validateEol(DetailAST brace, String braceLine) {
-        if (Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {
+        if (CommonUtils.whitespaceBefore(brace.getColumnNo(), braceLine)) {
             log(brace, MSG_KEY_LINE_PREVIOUS, OPEN_CURLY_BRACE, brace.getColumnNo() + 1);
         }
         if (!hasLineBreakAfter(brace)) {
             log(brace, MSG_KEY_LINE_BREAK_AFTER, OPEN_CURLY_BRACE, brace.getColumnNo() + 1);
         }
     }
 
     /**
      * Validate token on new Line position
      * @param brace brace AST
      * @param startToken start Token
      * @param braceLine content of line with Brace
      */
     private void validateNewLinePosion(DetailAST brace, DetailAST startToken,
                                        String braceLine) {
         // not on the same line
         if (startToken.getLineNo() + 1 == brace.getLineNo()) {
-            if (Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {
+            if (CommonUtils.whitespaceBefore(brace.getColumnNo(), braceLine)) {
                 log(brace, MSG_KEY_LINE_PREVIOUS, OPEN_CURLY_BRACE, brace.getColumnNo() + 1);
             }
             else {
                 log(brace, MSG_KEY_LINE_NEW, OPEN_CURLY_BRACE, brace.getColumnNo() + 1);
             }
         }
-        else if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {
+        else if (!CommonUtils.whitespaceBefore(brace.getColumnNo(), braceLine)) {
             log(brace, MSG_KEY_LINE_NEW, OPEN_CURLY_BRACE, brace.getColumnNo() + 1);
         }
     }
 
     /**
      * Checks if left curly has line break after.
      * @param leftCurly
      *        Left curly token.
      * @return
      *        True, left curly has line break after.
      */
     private boolean hasLineBreakAfter(DetailAST leftCurly) {
         DetailAST nextToken = null;
         if (leftCurly.getType() == TokenTypes.SLIST) {
             nextToken = leftCurly.getFirstChild();
         }
         else {
             if (leftCurly.getParent().getParent().getType() == TokenTypes.ENUM_DEF
                     && !ignoreEnums) {
                 nextToken = leftCurly.getNextSibling();
             }
         }
         return nextToken == null
                 || nextToken.getType() == TokenTypes.RCURLY
                 || leftCurly.getLineNo() != nextToken.getLineNo();
     }
 }
