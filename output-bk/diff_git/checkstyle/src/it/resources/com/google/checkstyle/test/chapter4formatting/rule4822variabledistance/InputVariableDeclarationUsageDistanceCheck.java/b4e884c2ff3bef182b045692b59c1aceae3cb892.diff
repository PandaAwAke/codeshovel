diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/InputVariableDeclarationUsageDistanceCheck.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/InputVariableDeclarationUsageDistanceCheck.java
index dbe608891..d68487bbe 100644
--- a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/InputVariableDeclarationUsageDistanceCheck.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/InputVariableDeclarationUsageDistanceCheck.java
@@ -361,110 +361,110 @@ public class InputVariableDeclarationUsageDistanceCheck {
 
         return new Color(red, green, blue, alpha);
     }
 	
 	public void testFinal() {
 		AuthUpdateTask authUpdateTask = null;
 		final long intervalMs = 30 * 60000L;
 		Object authCheckUrl = null, authInfo = null;
         authUpdateTask = new AuthUpdateTask(authCheckUrl, authInfo, new IAuthListener() {
             @Override
             public void authTokenChanged(String cookie, String token) {
                 fireAuthTokenChanged(cookie, token);
             }
         });
 
         Timer authUpdateTimer = new Timer("Auth Guard", true);
         authUpdateTimer.schedule(authUpdateTask, intervalMs / 2, intervalMs); // DECLARATION OF VARIABLE 'intervalMs' SHOULD BE HERE (distance = 2)
 	}
 	
 	public void testForCycle() {
 		int filterCount = 0;
 		for (int i = 0; i < 10; i++, filterCount++) {
 			int abc = 0;
 			System.identityHashCode(abc);
 
 			for (int j = 0; j < 10; j++) {
 				abc = filterCount;
 				System.identityHashCode(abc);
 			}
 		}
 	}
 	
 	public void testIssue32_1()
     {
         Option srcDdlFile = OptionBuilder.create("f");
         Option logDdlFile = OptionBuilder.create("o");
         Option help = OptionBuilder.create("h");
 
         Options options = new Options();
         options.something();
         options.something();
         options.something();
         options.something();
         options.addOption(srcDdlFile, logDdlFile, help); // distance=1
     }
 
     public void testIssue32_2()
     {
         int mm = Integer.parseInt("2");
         long timeNow = 0;
-        Calendar cal = Calendar.getInstance();
+        Calendar cal = Calendar.getInstance(TimeZone.getDefault(), Locale.getDefault());
         cal.setTimeInMillis(timeNow);
         cal.set(Calendar.SECOND, 0);
         cal.set(Calendar.MILLISECOND, 0);
         cal.set(Calendar.HOUR_OF_DAY, mm);
         cal.set(Calendar.MINUTE, mm); // distance=1
     }
     
     public void testIssue32_3(MyObject[] objects) {
-        Calendar cal = Calendar.getInstance();
+        Calendar cal = Calendar.getInstance(TimeZone.getDefault(), Locale.getDefault());
         for(int i=0; i<objects.length; i++) {
             objects[i].setEnabled(true);
             objects[i].setColor(0x121212);
             objects[i].setUrl("http://google.com");
             objects[i].setSize(789);
             objects[i].setCalendar(cal); // distance=1
         }
     }
     
     public String testIssue32_4(boolean flag) {
         StringBuilder builder = new StringBuilder();
         builder.append("flag is ");
         builder.append(flag);
         final String line = "";
         if(flag) {
             builder.append("line of AST is:");
             builder.append("\n");
             builder.append(String.valueOf(line)); //distance=1
             builder.append("\n");
         }
         return builder.toString();
     }
     
     public void testIssue32_5() {
         Option a = null;
         Option b = null;
         Option c = null;
         boolean isCNull = isNull(c); // distance=1
         boolean isBNull = isNull(b); // distance=1
         boolean isANull = isNull(a); // distance=1
     }
   
     public void testIssue32_6() {
         Option aOpt = null;
         Option bOpt = null;
         Option cOpt = null;
         isNull(cOpt); // distance = 1
         isNull(bOpt); // distance = 2
         isNull(aOpt); // distance = 3
     }
     
     public void testIssue32_7() {
         String line = "abc";
         otherWriter.write(line);
         line.charAt(1);
         builder.append(line);
         test(line, line, line);
     }
     
     public void testIssue32_8(Writer w1, Writer w2, Writer w3) {
