diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/InputVariableDeclarationUsageDistanceCheck.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/InputVariableDeclarationUsageDistanceCheck.java
index 873e6fea2..dbe608891 100644
--- a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/InputVariableDeclarationUsageDistanceCheck.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/InputVariableDeclarationUsageDistanceCheck.java
@@ -41,101 +41,101 @@ public class InputVariableDeclarationUsageDistanceCheck {
 	}
 
 	public boolean testMethod() {
 		int temp = 7;
 		new InputVariableDeclarationUsageDistanceCheck(2);
 		String.valueOf(temp); // DECLARATION OF VARIABLE 'temp' SHOULD BE HERE (distance = 2)
 		boolean result = false;
 		String str = "";
 		if (test1 > 1) {
 			str = "123";
 			result = true;
 		}
 		return result;
 	}
 
 	public void testMethod2() {
 		int count;
 		int a = 3;
 		int b = 2;
 		{
 			a = a
 					+ b
 					- 5
 					+ 2
 					* a;
 			count = b; // DECLARATION OF VARIABLE 'count' SHOULD BE HERE (distance = 2)
 		}
 	}
 
 	public void testMethod3() {
 		int count; //warn
 		int a = 3;
 		int b = 3;
 		a = a + b;
 		b = a + a;
 		testMethod2();
 		count = b; // DECLARATION OF VARIABLE 'count' SHOULD BE HERE (distance = 4)
 	}
 
 	public void testMethod4(int arg) {
 		int d = 0;
 		for (int i = 0; i < 10; i++) {
 			d++;
 			if (i > 5) {
 				d += arg;
 			}
 		}
 
 		String ar[] = { "1", "2" };
 		for (String st : ar) {
-			System.out.println(st);
+			System.identityHashCode(st);
 		}
 	}
 
 	public void testMethod5() {
 		int arg = 7;
 		boolean b = true;
 		boolean bb = false;
 		if (b)
 			if (!bb)
 				b = false;
 		testMethod4(arg); // DECLARATION OF VARIABLE 'arg' SHOULD BE HERE (distance = 2)
 	}
 
 	public void testMethod6() {
 		int blockNumWithSimilarVar = 3;
 		int dist = 0;
 		int index = 0;
 		int block = 0;
 
 		if (blockNumWithSimilarVar <= 1) {
 			do {
 				dist++;
 				if (block > 4) {
 					break;
 				}
 				index++;
 				block++;
 			} while (index < 7);
 		} else {
 			while (index < 8) {
 				dist += block;
 				index++;
 				block++;
 			}
 		}
 	}
 
 	public boolean testMethod7(int a) {
 		boolean res;
 		switch (a) {
 		case 1:
 			res = true;
 			break;
 		default:
 			res = false;
 		}
 		return res;
 	}
 
 	public void testMethod8() {
@@ -334,243 +334,243 @@ public class InputVariableDeclarationUsageDistanceCheck {
 	      }
 	    });
 
 	    return result;
 
 	  }
 	
 	public static Color darker(Color color, double fraction) {
         int red = (int) Math.round(color.getRed() * (1.0 - fraction));
         int green = (int) Math.round(color.getGreen() * (1.0 - fraction));
         int blue = (int) Math.round(color.getBlue() * (1.0 - fraction));
 
         if (red < 0) {
             red = 0;
         } else if (red > 255) {
             red = 255;
         }
         if (green < 0) { // DECLARATION OF VARIABLE 'green' SHOULD BE HERE (distance = 2)
             green = 0;
         } else if (green > 255) {
             green = 255;
         }
         if (blue < 0) { // DECLARATION OF VARIABLE 'blue' SHOULD BE HERE (distance = 3)
             // blue = 0;
         }
 
         int alpha = color.getAlpha();
 
         return new Color(red, green, blue, alpha);
     }
 	
 	public void testFinal() {
 		AuthUpdateTask authUpdateTask = null;
 		final long intervalMs = 30 * 60000L;
 		Object authCheckUrl = null, authInfo = null;
         authUpdateTask = new AuthUpdateTask(authCheckUrl, authInfo, new IAuthListener() {
             @Override
             public void authTokenChanged(String cookie, String token) {
                 fireAuthTokenChanged(cookie, token);
             }
         });
 
         Timer authUpdateTimer = new Timer("Auth Guard", true);
         authUpdateTimer.schedule(authUpdateTask, intervalMs / 2, intervalMs); // DECLARATION OF VARIABLE 'intervalMs' SHOULD BE HERE (distance = 2)
 	}
 	
 	public void testForCycle() {
 		int filterCount = 0;
 		for (int i = 0; i < 10; i++, filterCount++) {
 			int abc = 0;
-			System.out.println(abc);
+			System.identityHashCode(abc);
 
 			for (int j = 0; j < 10; j++) {
 				abc = filterCount;
-				System.out.println(abc);
+				System.identityHashCode(abc);
 			}
 		}
 	}
 	
 	public void testIssue32_1()
     {
         Option srcDdlFile = OptionBuilder.create("f");
         Option logDdlFile = OptionBuilder.create("o");
         Option help = OptionBuilder.create("h");
 
         Options options = new Options();
         options.something();
         options.something();
         options.something();
         options.something();
         options.addOption(srcDdlFile, logDdlFile, help); // distance=1
     }
 
     public void testIssue32_2()
     {
         int mm = Integer.parseInt("2");
         long timeNow = 0;
         Calendar cal = Calendar.getInstance();
         cal.setTimeInMillis(timeNow);
         cal.set(Calendar.SECOND, 0);
         cal.set(Calendar.MILLISECOND, 0);
         cal.set(Calendar.HOUR_OF_DAY, mm);
         cal.set(Calendar.MINUTE, mm); // distance=1
     }
     
     public void testIssue32_3(MyObject[] objects) {
         Calendar cal = Calendar.getInstance();
         for(int i=0; i<objects.length; i++) {
             objects[i].setEnabled(true);
             objects[i].setColor(0x121212);
             objects[i].setUrl("http://google.com");
             objects[i].setSize(789);
             objects[i].setCalendar(cal); // distance=1
         }
     }
     
     public String testIssue32_4(boolean flag) {
         StringBuilder builder = new StringBuilder();
         builder.append("flag is ");
         builder.append(flag);
         final String line = "";
         if(flag) {
             builder.append("line of AST is:");
             builder.append("\n");
             builder.append(String.valueOf(line)); //distance=1
             builder.append("\n");
         }
         return builder.toString();
     }
     
     public void testIssue32_5() {
         Option a = null;
         Option b = null;
         Option c = null;
         boolean isCNull = isNull(c); // distance=1
         boolean isBNull = isNull(b); // distance=1
         boolean isANull = isNull(a); // distance=1
     }
   
     public void testIssue32_6() {
         Option aOpt = null;
         Option bOpt = null;
         Option cOpt = null;
         isNull(cOpt); // distance = 1
         isNull(bOpt); // distance = 2
         isNull(aOpt); // distance = 3
     }
     
     public void testIssue32_7() {
         String line = "abc";
         otherWriter.write(line);
         line.charAt(1);
         builder.append(line);
         test(line, line, line);
     }
     
     public void testIssue32_8(Writer w1, Writer w2, Writer w3) {
         String l1="1";
 
         
         w3.write(l1); //distance=3
     }
     
     public void testIssue32_9() {
         Options options = new Options();
         Option myOption = null; //warn
         options.addBindFile(null);
         options.addBindFile(null);
         options.addBindFile(null);
         options.addBindFile(null);
         options.addBindFile(null);
-        System.out.println("message");
+        System.identityHashCode("message");
         myOption.setArgName("abc"); // distance=7
     }
     
     public void testIssue32_10() {
         Options options = new Options();
         Option myOption = null; //warn
         options.addBindFile(null);
         options.addBindFile(null);
         options.addBindFile(null);
         options.addBindFile(null);
         options.addBindFile(null);
         myOption.setArgName("q"); // distance=6
     }
     
     
     public int testIssue32_11(String toDir)
             throws Exception
     {
         int count = 0;
         String[] files = {};
 
-        System.out.println("Data archivation started");
+        System.identityHashCode("Data archivation started");
         files.notify();
-        System.out.println("sss");
+        System.identityHashCode("sss");
 
         if (files == null || files.length == 0) {
-            System.out.println("No files on a remote site");
+            System.identityHashCode("No files on a remote site");
         }
         else {
-            System.out.println("Files on remote site: " + files.length);
+            System.identityHashCode("Files on remote site: " + files.length);
 
             for (String ftpFile : files) {
                 if (files.length == 0) {
                     "".concat("");
                     ftpFile.concat(files[2]);
                     count++;
                 }
             }
         }
 
-        System.out.println();
+        System.lineSeparator();
 
         return count;
     }
     
     private Session openSession() {
         return null;
         
     }
     
     class Session {
 
         public Transaction beginTransaction() {
             return null;
         }
 
         public void close() {
         }
 
         public Serializable save(E d2) {
             return null;
         }
 
         public Serializable save(A a) {
             return null;
         }
         
     }
     
     class Transaction {
 
         public void commit() {
             
         }
         
     }
     
     class A {
 
         public void setForward(E d1) {
             
         }
         
     }
     
     class E {
 
         public void setReverse(C1 c) {
             
         }
 
