diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreack/OperatorWrapTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreack/OperatorWrapTest.java
index c9d5b3b4c..bd16a1d5e 100644
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreack/OperatorWrapTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreack/OperatorWrapTest.java
@@ -1,72 +1,70 @@
 package com.google.checkstyle.test.chapter4formatting.rule451wheretobreack;
 
 import java.io.File;
-import java.io.IOException;
 
 import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
 import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
-import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck;
 import com.puppycrawl.tools.checkstyle.checks.whitespace.WrapOption;
 
 public class OperatorWrapTest extends BaseCheckTestSupport{
     
     private static ConfigurationBuilder builder;
     
     @BeforeClass
-    public static void setConfigurationBuilder() throws CheckstyleException {
+    public static void setConfigurationBuilder() {
         builder = new ConfigurationBuilder(new File("src/it/"));
     }
 
     @Test
     public void operatorWrapTest() throws Exception {
         
         Class<OperatorWrapCheck> clazz = OperatorWrapCheck.class;
         String messageKey = "line.new";
 
         final String[] expected = {
             "10:27: " + getCheckMessage(clazz, messageKey, "+"),
             "11:28: " + getCheckMessage(clazz, messageKey, "-"),
             "19:27: " + getCheckMessage(clazz, messageKey, "&&"),
             "53:42: " + getCheckMessage(clazz, messageKey, "?"),
             "57:27: " + getCheckMessage(clazz, messageKey, "!="),
             "63:30: " + getCheckMessage(clazz, messageKey, "=="),
             "69:27: " + getCheckMessage(clazz, messageKey, ">"),
             "75:35: " + getCheckMessage(clazz, messageKey, "||"),
             "98:46: " + getCheckMessage(clazz, messageKey, "?"),
             "102:31: " + getCheckMessage(clazz, messageKey, "!="),
             "108:34: " + getCheckMessage(clazz, messageKey, "=="),
             "114:31: " + getCheckMessage(clazz, messageKey, ">"),
             "120:39: " + getCheckMessage(clazz, messageKey, "||"),
             "144:46: " + getCheckMessage(clazz, messageKey, "?"),
             "148:31: " + getCheckMessage(clazz, messageKey, "!="),
             "154:34: " + getCheckMessage(clazz, messageKey, "=="),
             "160:31: " + getCheckMessage(clazz, messageKey, ">"),
             "166:39: " + getCheckMessage(clazz, messageKey, "||"),
             "185:38: " + getCheckMessage(clazz, messageKey, "?"),
         };
 
         Configuration checkConfig = builder.getCheckConfig("OperatorWrap");
         String filePath = builder.getFilePath("OperatorWrapInput");
 
         Integer[] warnList = builder.getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
     
     @Test
     public void operatorWrapTestAssign() throws Exception {
         DefaultConfiguration newCheckConfig = createCheckConfig(OperatorWrapCheck.class);
         newCheckConfig.addAttribute("option", WrapOption.EOL.toString());
         newCheckConfig.addAttribute("tokens", "ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN,"
                 + "STAR_ASSIGN, MOD_ASSIGN, SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN,"
                 + "BOR_ASSIGN, BAND_ASSIGN");
         String messageKey = "line.previous";
         Class<OperatorWrapCheck> clazz = OperatorWrapCheck.class;
         
         final String[] expected = {
             "28:13: " + getCheckMessage(clazz, messageKey, "="),
