diff --git a/src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java b/src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java
index e8727684e..841ca74ef 100644
--- a/src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java
+++ b/src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java
@@ -92,63 +92,63 @@ public class IndentationConfigurationBuilder extends ConfigurationBuilder
                 lineNumber++;
             }
         }
         return result.toArray(new Integer[result.size()]);
     }
 
     private static int getIndentFromComment(String comment)
     {
         final Matcher match = GET_INDENT_FROM_COMMENT_REGEX.matcher(comment);
         match.matches();
         return Integer.parseInt(match.group(1));
     }
 
     private static boolean isWarnComment(String comment)
     {
         return comment.endsWith(" warn");
     }
 
     private static boolean isCommentConsistent(String comment)
     {
         final int indentInComment = getIndentFromComment(comment);
         final boolean isWarnComment = isWarnComment(comment);
 
         Matcher match = MULTILEVEL_COMMENT_REGEX.matcher(comment);
         if (match.matches()) {
             final String[] levels = match.group(1).split(",");
             final String indentInCommentStr = String.valueOf(indentInComment);
             final boolean containsActualLevel =
                             Arrays.asList(levels).contains(indentInCommentStr);
 
             return containsActualLevel && !isWarnComment
                     || !containsActualLevel && isWarnComment;
         }
 
         match = SINGLELEVEL_COMMENT_REGEX.matcher(comment);
         if (match.matches()) {
             final int expectedLevel = Integer.parseInt(match.group(1));
 
             return expectedLevel == indentInComment && !isWarnComment
                     || expectedLevel != indentInComment && isWarnComment;
         }
 
         match = NONSTRICT_LEVEL_COMMENT_REGEX.matcher(comment);
         if (match.matches()) {
             final int expectedMinimalIndent = Integer.parseInt(match.group(1));
 
             return indentInComment >= expectedMinimalIndent && !isWarnComment
                     || indentInComment < expectedMinimalIndent && isWarnComment;
         }
 
-        throw new IllegalArgumentException();
+        throw new IllegalArgumentException("Cannot determine if commit is consistent");
     }
 
     private static int getLineStart(String line, final int tabWidth)
     {
         for (int index = 0; index < line.length(); ++index) {
             if (!Character.isWhitespace(line.charAt(index))) {
                 return Utils.lengthExpandedTabs(line, index, tabWidth);
             }
         }
         return 0;
     }
 }
\ No newline at end of file
