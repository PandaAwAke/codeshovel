diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/LeftCurlyRightCurlyTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/LeftCurlyRightCurlyTest.java
index b89b3acf8..e2cfd1cb1 100644
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/LeftCurlyRightCurlyTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/LeftCurlyRightCurlyTest.java
@@ -54,63 +54,66 @@ public class LeftCurlyRightCurlyTest extends BaseCheckTestSupport{
             "14:5: " + checkMessagePrevious,
             "21:5: " + checkMessagePrevious,
             "27:5: " + checkMessagePrevious,
             "50:5: " + checkMessagePrevious,
         };
         
         Configuration checkConfig = builder.getCheckConfig("LeftCurly");
         String filePath = builder.getFilePath("LeftCurlyInput_Annotations");
         
         Integer[] warnList = builder.getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
     
     @Test
     public void leftCurlyMethodsTest() throws IOException, Exception {
         
 
         String checkMessagePrevious = getCheckMessage(LeftCurlyCheck.class, "line.previous", "{");
         final String[] expected = {
             "4:1: " + checkMessagePrevious,
             "9:5: " + checkMessagePrevious,
             "16:5: " + checkMessagePrevious,
             "19:5: " + checkMessagePrevious,
             "23:5: " + checkMessagePrevious,
             "31:1: " + checkMessagePrevious,
             "33:5: " + checkMessagePrevious,
             "38:9: " + checkMessagePrevious,
             "41:9: " + checkMessagePrevious,
             "45:9: " + checkMessagePrevious,
             "57:5: " + checkMessagePrevious,
             "61:5: " + checkMessagePrevious,
             "69:5: " + checkMessagePrevious,
             "72:5: " + checkMessagePrevious, 
             "76:5: " + checkMessagePrevious,
          };
 
         Configuration checkConfig = builder.getCheckConfig("LeftCurly");
         String filePath = builder.getFilePath("LeftCurlyInput_Method");
         
         Integer[] warnList = builder.getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
     @Test
     public void rightCurlyTestAlone() throws Exception {
         DefaultConfiguration newCheckConfig = createCheckConfig(RightCurlyCheck.class);
         newCheckConfig.addAttribute("option", RightCurlyOption.ALONE.toString());
         newCheckConfig.addAttribute("tokens", "CLASS_DEF, METHOD_DEF, CTOR_DEF");
         
         String checkMessageNew = getCheckMessage(RightCurlyCheck.class, "line.new", "}");
+        String checkMessageAlone = getCheckMessage(RightCurlyCheck.class, "line.alone", "}");
         final String[] expected = {
+            "97:5: " + checkMessageAlone,
             "97:6: " + checkMessageNew,
+            "108:5: " + checkMessageAlone,
             "108:6: " + checkMessageNew,
             "122:6: " + checkMessageNew,
         };
 
         String filePath = builder.getFilePath("RightCurlyInput_Other");
         Integer[] warnList = builder.getLinesWithWarn(filePath);
         verify(newCheckConfig, filePath, expected, warnList);
     }
 }
 
 
