diff --git a/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java b/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java
index b14a70b54..bc24f6cda 100644
--- a/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java
+++ b/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java
@@ -100,101 +100,101 @@ public abstract class BaseCheckTestSupport
     protected void verify(Configuration aConfig, String aFileName, String[] aExpected, Integer[] aWarnsExpected)
             throws Exception
     {
         verify(createChecker(aConfig), aFileName, aFileName, aExpected, aWarnsExpected);
     }
 
     protected void verify(Checker aC, String aFileName, String[] aExpected, Integer[] aWarnsExpected)
             throws Exception
     {
         verify(aC, aFileName, aFileName, aExpected, aWarnsExpected);
     }
 
     protected void verify(Checker aC,
                           String aProcessedFilename,
                           String aMessageFileName,
                           String[] aExpected, Integer[] aWarnsExpected)
         throws Exception
     {
         verify(aC,
             new File[] {new File(aProcessedFilename)},
             aMessageFileName, aExpected, aWarnsExpected);
     }
 
     protected void verify(Checker aC,
                           File[] aProcessedFiles,
                           String aMessageFileName,
                           String[] aExpected,
                           Integer[] aWarnsExpected)
         throws Exception
     {
         stream.flush();
         final List<File> theFiles = Lists.newArrayList();
         Collections.addAll(theFiles, aProcessedFiles);
         final int errs = aC.process(theFiles);
 
         // process each of the lines
         final ByteArrayInputStream bais =
             new ByteArrayInputStream(BAOS.toByteArray());
         final LineNumberReader lnr =
             new LineNumberReader(new InputStreamReader(bais));
 
         for (int i = 0; i < aExpected.length; i++) {
             final String expected = aMessageFileName + ":" + aExpected[i];
             String actual = lnr.readLine();
             assertEquals("error message " + i, expected, actual);
             String parseInt = removeDeviceFromPathOnWindows(actual);
             parseInt = parseInt.substring(parseInt.indexOf(":") + 1);
             parseInt = parseInt.substring(0, parseInt.indexOf(":"));
             int lineNumber = Integer.parseInt(parseInt);
 			Integer integer = Arrays.asList(aWarnsExpected).contains(lineNumber) ? lineNumber : 0;
-            assertEquals("error message " + i, (long) integer, (long) lineNumber);
+            assertEquals("error message " + i, (long) integer, lineNumber);
         }
 
         assertEquals("unexpected output: " + lnr.readLine(),
                      aExpected.length, errs);
         aC.destroy();
     }
 
     /**
      * Gets the check message 'as is' from appropriate 'messages.properties'
      * file.
      *
      * @param messageKey
      *            the key of message in 'messages.properties' file.
      */
     public String getCheckMessage(Class<? extends AbstractViolationReporter> aClass,
             String messageKey)
     {
         Properties pr = new Properties();
         try {
             pr.load(aClass.getResourceAsStream("messages.properties"));
         }
         catch (IOException e) {
             return null;
         }
         return pr.getProperty(messageKey);
     }
 
     /**
      * Gets the check message 'as is' from appropriate 'messages.properties' file.
      * @param messageKey the key of message in 'messages.properties' file.
      * @param arguments the arguments of message in 'messages.properties' file.
      */
     public String getCheckMessage(Class<? extends AbstractViolationReporter> aClass,
             String messageKey, Object ... arguments) {
         return format(getCheckMessage(aClass, messageKey), arguments);
     }
 
     /**
      * Gets the check message 'as is' from appropriate 'messages.properties' file.
      * @param messageKey the key of message in 'messages.properties' file.
      * @param arguments the arguments of message in 'messages.properties' file.
      */
    public String getCheckMessage(Map<String, String> messages, String messageKey, Object ... arguments)
    {
        for (Map.Entry<String, String> entry : messages.entrySet()) {
            if (messageKey.equals(entry.getKey())) {
                return format(entry.getValue(), arguments);
            }
        }
        return null;
