diff --git a/src/it/java/com/google/checkstyle/test/base/BaseIndentationCheckSupport.java b/src/it/java/com/google/checkstyle/test/base/BaseIndentationCheckSupport.java
index c03e795ed..a35b073da 100644
--- a/src/it/java/com/google/checkstyle/test/base/BaseIndentationCheckSupport.java
+++ b/src/it/java/com/google/checkstyle/test/base/BaseIndentationCheckSupport.java
@@ -155,62 +155,64 @@ public class BaseIndentationCheckSupport extends BaseCheckTestSupport {
 
         return indentInComment >= expectedMinimalIndent && !isWarnComment
                 || indentInComment < expectedMinimalIndent && isWarnComment;
     }
 
     private static boolean isSingleLevelCommentConsistent(String comment,
             int indentInComment, boolean isWarnComment) {
         final Matcher singleLevelMatch = SINGLE_LEVEL_COMMENT_REGEX.matcher(comment);
         singleLevelMatch.matches();
         final int expectedLevel = Integer.parseInt(singleLevelMatch.group(1));
 
         return expectedLevel == indentInComment && !isWarnComment
                 || expectedLevel != indentInComment && isWarnComment;
     }
 
     private static boolean isMultiLevelCommentConsistent(String comment,
             int indentInComment, boolean isWarnComment) {
         final Matcher multilevelMatch = MULTILEVEL_COMMENT_REGEX.matcher(comment);
         multilevelMatch.matches();
         final String[] levels = multilevelMatch.group(1).split(",");
         final String indentInCommentStr = String.valueOf(indentInComment);
         final boolean containsActualLevel =
                 Arrays.asList(levels).contains(indentInCommentStr);
 
         return containsActualLevel && !isWarnComment
                 || !containsActualLevel && isWarnComment;
     }
 
     private static CommentType getCommentType(String comment) {
         CommentType result = CommentType.UNKNOWN;
         final Matcher multilevelMatch = MULTILEVEL_COMMENT_REGEX.matcher(comment);
         if (multilevelMatch.matches()) {
             result = CommentType.MULTILEVEL;
         }
         else {
             final Matcher singleLevelMatch = SINGLE_LEVEL_COMMENT_REGEX.matcher(comment);
             if (singleLevelMatch.matches()) {
                 result = CommentType.SINGLE_LEVEL;
             }
             else {
                 final Matcher nonStrictLevelMatch = NON_STRICT_LEVEL_COMMENT_REGEX.matcher(comment);
                 if (nonStrictLevelMatch.matches()) {
                     result = CommentType.NON_STRICT_LEVEL;
                 }
             }
         }
         return result;
     }
 
     private static int getLineStart(String line, final int tabWidth) {
+        int lineStart = 0;
         for (int index = 0; index < line.length(); ++index) {
             if (!Character.isWhitespace(line.charAt(index))) {
-                return CommonUtils.lengthExpandedTabs(line, index, tabWidth);
+                lineStart = CommonUtils.lengthExpandedTabs(line, index, tabWidth);
+                break;
             }
         }
-        return 0;
+        return lineStart;
     }
 
     private enum CommentType {
         MULTILEVEL, SINGLE_LEVEL, NON_STRICT_LEVEL, UNKNOWN
     }
 }
