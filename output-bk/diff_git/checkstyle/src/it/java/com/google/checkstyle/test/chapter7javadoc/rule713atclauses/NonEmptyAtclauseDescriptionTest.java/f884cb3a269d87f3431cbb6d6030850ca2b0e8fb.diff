diff --git a/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/NonEmptyAtclauseDescriptionTest.java b/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/NonEmptyAtclauseDescriptionTest.java
index 3f6a1f3cd..7b8cc4d7d 100644
--- a/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/NonEmptyAtclauseDescriptionTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/NonEmptyAtclauseDescriptionTest.java
@@ -43,58 +43,58 @@ public class NonEmptyAtclauseDescriptionTest extends BaseCheckTestSupport {
 
         final String[] expected = {
             "34: " + msg,
             "35: " + msg,
             "36: " + msg,
             "37: " + msg,
             "38: " + msg,
             "39: " + msg,
             "48: " + msg,
             "49: " + msg,
             "50: " + msg,
             "51: " + msg,
             "52: " + msg,
         };
 
         final Configuration checkConfig = getCheckConfig("NonEmptyAtclauseDescription");
         final String filePath = getPath("InputNonEmptyAtclauseDescriptionCheck.java");
 
         final Integer[] warnList = getLineNumbersFromExpected(expected);
         verify(checkConfig, filePath, expected, warnList);
     }
 
     @Test
     public void testSpaceSequence() throws Exception {
         final String msg = getCheckMessage(NonEmptyAtclauseDescriptionCheck.class,
             "non.empty.atclause");
 
         final String[] expected = {
             "27: " + msg,
             "28: " + msg,
             "29: " + msg,
             "38: " + msg,
             "39: " + msg,
             "40: " + msg,
         };
 
         final Configuration checkConfig = getCheckConfig("NonEmptyAtclauseDescription");
         final String filePath = getPath("InputNonEmptyAtclauseDescriptionCheckSpaceSeq.java");
 
         final Integer[] warnList = getLineNumbersFromExpected(expected);
         verify(checkConfig, filePath, expected, warnList);
     }
 
     /**
      * Gets line numbers with violations from an array with expected messages.
      * This is used as using "warn" comments in input files would affects the work
      * of the Check.
      * @param expected an array with expected messages.
      * @return Integer array with numbers of lines with violations.
      */
-    private static Integer[] getLineNumbersFromExpected(String[] expected) {
+    private static Integer[] getLineNumbersFromExpected(String... expected) {
         final Integer[] result = new Integer[expected.length];
         for (int i = 0; i < expected.length; i++) {
             result[i] = Integer.valueOf(expected[i].substring(0, expected[i].indexOf(':')));
         }
         return result;
     }
 }
