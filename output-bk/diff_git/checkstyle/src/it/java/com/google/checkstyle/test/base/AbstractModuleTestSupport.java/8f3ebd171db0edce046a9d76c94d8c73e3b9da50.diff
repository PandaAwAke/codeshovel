diff --git a/src/it/java/com/google/checkstyle/test/base/AbstractModuleTestSupport.java b/src/it/java/com/google/checkstyle/test/base/AbstractModuleTestSupport.java
index 342728b42..f59ad6474 100644
--- a/src/it/java/com/google/checkstyle/test/base/AbstractModuleTestSupport.java
+++ b/src/it/java/com/google/checkstyle/test/base/AbstractModuleTestSupport.java
@@ -8,184 +8,204 @@
 // version 2.1 of the License, or (at your option) any later version.
 //
 // This library is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 // Lesser General Public License for more details.
 //
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
 
 package com.google.checkstyle.test.base;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
 import java.io.BufferedReader;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.io.LineNumberReader;
 import java.nio.charset.StandardCharsets;
 import java.text.MessageFormat;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Properties;
 import java.util.Set;
 import java.util.regex.Pattern;
 
 import com.puppycrawl.tools.checkstyle.BriefUtLogger;
 import com.puppycrawl.tools.checkstyle.Checker;
 import com.puppycrawl.tools.checkstyle.ConfigurationLoader;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.PropertiesExpander;
 import com.puppycrawl.tools.checkstyle.TreeWalker;
 import com.puppycrawl.tools.checkstyle.api.AbstractViolationReporter;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.internal.CheckUtil;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 import com.puppycrawl.tools.checkstyle.utils.ModuleReflectionUtils;
 
 public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport {
+
+    /**
+     * Enum to specify options for checker creation.
+     */
+    public enum ModuleCreationOption {
+        /**
+         * Points that the module configurations
+         * has to be added under {@link TreeWalker}.
+         */
+        IN_TREEWALKER,
+        /**
+         * Points that checker will be created as
+         * a root of default configuration.
+         */
+        IN_CHECKER
+    }
+
     private static final Pattern WARN_PATTERN = CommonUtils
             .createPattern(".*[ ]*//[ ]*warn[ ]*|/[*]\\s?warn\\s?[*]/");
 
     private static final String XML_NAME = "/google_checks.xml";
 
     private static Configuration configuration;
 
     private static Set<Class<?>> checkstyleModules;
 
     private final ByteArrayOutputStream stream = new ByteArrayOutputStream();
 
     /**
      * Returns test logger.
      * @return logger test logger
      */
     public BriefUtLogger getBriefUtLogger() {
         return new BriefUtLogger(stream);
     }
 
     /**
      * Returns {@link Configuration} based on Google's checks xml-configuration (google_checks.xml).
      * This implementation uses {@link ConfigurationLoader} in order to load configuration
      * from xml-file.
      * @return {@link Configuration} based on Google's checks xml-configuration (google_checks.xml).
      * @throws CheckstyleException if exception occurs during configuration loading.
      */
     protected static Configuration getConfiguration() throws CheckstyleException {
         if (configuration == null) {
             configuration = ConfigurationLoader.loadConfiguration(XML_NAME, new PropertiesExpander(
                     System.getProperties()));
         }
 
         return configuration;
     }
 
     /**
      * Creates {@link DefaultConfiguration} instance for the given module class.
      * @param clazz module class.
      * @return {@link DefaultConfiguration} instance.
      */
     private static DefaultConfiguration createModuleConfig(Class<?> clazz) {
         return new DefaultConfiguration(clazz.getName());
     }
 
     /**
      * Creates {@link Checker} instance based on the given {@link Configuration} instance.
      * @param moduleConfig {@link Configuration} instance.
      * @return {@link Checker} instance based on the given {@link Configuration} instance.
      * @throws Exception if an exception occurs during checker configuration.
      */
     public Checker createChecker(Configuration moduleConfig)
             throws Exception {
         if (checkstyleModules == null) {
             checkstyleModules = CheckUtil.getCheckstyleModules();
         }
 
         final String name = moduleConfig.getName();
-        boolean addTreeWalker = false;
+        ModuleCreationOption moduleCreationOption = ModuleCreationOption.IN_CHECKER;
 
         for (Class<?> moduleClass : checkstyleModules) {
             if (moduleClass.getSimpleName().equals(name)
                     || moduleClass.getSimpleName().equals(name + "Check")) {
                 if (ModuleReflectionUtils.isCheckstyleCheck(moduleClass)
                         || ModuleReflectionUtils.isTreeWalkerFilterModule(moduleClass)) {
-                    addTreeWalker = true;
+                    moduleCreationOption = ModuleCreationOption.IN_TREEWALKER;
                 }
                 break;
             }
         }
 
-        return createChecker(moduleConfig, addTreeWalker);
+        return createChecker(moduleConfig, moduleCreationOption);
     }
 
     /**
      * Creates {@link Checker} instance based on specified {@link Configuration}.
      * @param moduleConfig {@link Configuration} instance.
+     * @param moduleCreationOption {@code IN_TREEWALKER} if the {@code moduleConfig} should be added
+     *                                                  under {@link TreeWalker}.
      * @return {@link Checker} instance.
      * @throws CheckstyleException if an exception occurs during checker configuration.
      */
-    protected Checker createChecker(Configuration moduleConfig, boolean addTreeWalker)
+    protected Checker createChecker(Configuration moduleConfig,
+                                    ModuleCreationOption moduleCreationOption)
             throws Exception {
         final DefaultConfiguration dc;
 
-        if (addTreeWalker) {
+        if (moduleCreationOption == ModuleCreationOption.IN_TREEWALKER) {
             dc = createTreeWalkerConfig(moduleConfig);
         }
         else {
             dc = createRootConfig(moduleConfig);
         }
 
         final Checker checker = new Checker();
         // make sure the tests always run with English error messages
         // so the tests don't fail in supported locales like German
         final Locale locale = Locale.ENGLISH;
         checker.setLocaleCountry(locale.getCountry());
         checker.setLocaleLanguage(locale.getLanguage());
         checker.setModuleClassLoader(Thread.currentThread().getContextClassLoader());
         checker.configure(dc);
         checker.addListener(getBriefUtLogger());
         return checker;
     }
 
     /**
      * Creates {@link DefaultConfiguration} or the {@link Checker}.
      * based on the given {@link Configuration}.
      * @param config {@link Configuration} instance.
      * @return {@link DefaultConfiguration} for the {@link Checker}.
      */
     protected DefaultConfiguration createTreeWalkerConfig(Configuration config) {
         final DefaultConfiguration dc =
                 new DefaultConfiguration("configuration");
         final DefaultConfiguration twConf = createModuleConfig(TreeWalker.class);
         // make sure that the tests always run with this charset
         dc.addAttribute("charset", "iso-8859-1");
         dc.addChild(twConf);
         twConf.addChild(config);
         return dc;
     }
 
     /**
      * Creates {@link DefaultConfiguration} for the given {@link Configuration} instance.
      * @param config {@link Configuration} instance.
      * @return {@link DefaultConfiguration} for the given {@link Configuration} instance.
      */
     protected DefaultConfiguration createRootConfig(Configuration config) {
         final DefaultConfiguration dc = new DefaultConfiguration("root");
         dc.addChild(config);
         return dc;
     }
 
     /**
      * Performs verification of the file with given file name. Uses specified configuration.
      * Expected messages are represented by the array of strings, warning line numbers are
      * represented by the array of integers.
