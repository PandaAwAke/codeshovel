diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/LeftCurlyRightCurlyTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/LeftCurlyRightCurlyTest.java
index 02a242652..b89b3acf8 100644
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/LeftCurlyRightCurlyTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/LeftCurlyRightCurlyTest.java
@@ -1,74 +1,74 @@
 package com.google.checkstyle.test.chapter4formatting.rule412nonemptyblocks;
 
 import java.io.File;
 import java.io.IOException;
 
 import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
 import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck;
 import com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck;
 import com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyOption;
 
 public class LeftCurlyRightCurlyTest extends BaseCheckTestSupport{
     
     static ConfigurationBuilder builder;
     
     @BeforeClass
     public static void setConfigurationBuilder() throws CheckstyleException, IOException {
-        builder = new ConfigurationBuilder(new File("src/"));
+        builder = new ConfigurationBuilder(new File("src/it/"));
     }
 
     @Test
     public void leftCurlyBracesTest() throws IOException, Exception {
         
         String checkMessage = getCheckMessage(LeftCurlyCheck.class, "line.previous", "{");
         final String[] expected = {
             "4:1: " + checkMessage,
             "7:5: " + checkMessage,
             "13:5: " + checkMessage,
             "26:5: " + checkMessage,
             "43:5: " + checkMessage,
             "61:5: " + checkMessage,
             "97:5: " + checkMessage,
         };
         
         Configuration checkConfig = builder.getCheckConfig("LeftCurly");
         String filePath = builder.getFilePath("LeftCurlyInput_Braces");
         
         Integer[] warnList = builder.getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
     
     @Test
     public void leftCurlyAnnotationsTest() throws IOException, Exception {
         
         String checkMessagePrevious = getCheckMessage(LeftCurlyCheck.class, "line.previous", "{");
         final String[] expected = {
             "10:1: " + checkMessagePrevious,
             "14:5: " + checkMessagePrevious,
             "21:5: " + checkMessagePrevious,
             "27:5: " + checkMessagePrevious,
             "50:5: " + checkMessagePrevious,
         };
         
         Configuration checkConfig = builder.getCheckConfig("LeftCurly");
         String filePath = builder.getFilePath("LeftCurlyInput_Annotations");
         
         Integer[] warnList = builder.getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
     
     @Test
     public void leftCurlyMethodsTest() throws IOException, Exception {
         
 
         String checkMessagePrevious = getCheckMessage(LeftCurlyCheck.class, "line.previous", "{");
         final String[] expected = {
             "4:1: " + checkMessagePrevious,
             "9:5: " + checkMessagePrevious,
