diff --git a/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/AtclauseOrderTest.java b/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/AtclauseOrderTest.java
index 3697f3757..1ed12dd18 100644
--- a/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/AtclauseOrderTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/AtclauseOrderTest.java
@@ -1,61 +1,73 @@
 package com.google.checkstyle.test.chapter7javadoc.rule713atclauses;
 
 import java.io.File;
 
+import org.apache.commons.lang3.ArrayUtils;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
 import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
-import com.puppycrawl.tools.checkstyle.checks.coding.NoFinalizerCheck;
+import com.puppycrawl.tools.checkstyle.checks.javadoc.AtclauseOrderCheck;
 
 public class AtclauseOrderTest extends BaseCheckTestSupport{
 
     private static ConfigurationBuilder builder;
 
     @BeforeClass
     public static void setConfigurationBuilder() {
         builder = new ConfigurationBuilder(new File("src/it/"));
     }
 
     @Test
-    public void noFinalizerBasicTest() throws Exception {
-        
-        String msg = getCheckMessage(NoFinalizerCheck.class, "avoid.finalizer.method");
+    public void testCorrect() throws Exception {
 
-        final String[] expected = {
-            "5: " + msg,
-        };
+        final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
 
-        Configuration checkConfig = builder.getCheckConfig("NoFinalizer");
-        String filePath = builder.getFilePath("NoFinalizerInput");
+        Configuration checkConfig = builder.getCheckConfig("AtclauseOrder");
+        String filePath = builder.getFilePath("InputCorrectAtClauseOrderCheck");
         
         Integer[] warnList = builder.getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
     
     @Test
-    public void noFinalizerExtendedTest() throws Exception {
-        
-        String msg = getCheckMessage(NoFinalizerCheck.class, "avoid.finalizer.method");
+    public void testIncorrect() throws Exception {
+        final String tagOrder = "[@param, @return, @throws, @deprecated]";
+        String msg = getCheckMessage(AtclauseOrderCheck.class, "at.clause.order", tagOrder);
 
         final String[] expected = {
-            "9: " + msg,
-            "21: " + msg,
-            "33: " + msg,
-            "45: " + msg,
-            "57: " + msg,
+            "40: " + msg,
+            "51: " + msg,
+            "62: " + msg,
             "69: " + msg,
-            "79: " + msg,
-            "119: " + msg,
-            "136: " + msg,
+            "86: " + msg,
+            "87: " + msg,
+            "101: " + msg,
+            "123: " + msg,
+            "134: " + msg,
+            "135: " + msg,
+            "153: " + msg,
+            "172: " + msg,
+            "183: " + msg,
+            "185: " + msg,
+            "199: " + msg,
+            "202: " + msg,
+            "213: " + msg,
+            "223: " + msg,
+            "230: " + msg,
+            "237: " + msg,
+            "247: " + msg,
+            "248: " + msg,
+            "259: " + msg,
+            "261: " + msg,
         };
 
-        Configuration checkConfig = builder.getCheckConfig("NoFinalizer");
-        String filePath = builder.getFilePath("NoFinalizeExtendInput");
+        Configuration checkConfig = builder.getCheckConfig("AtclauseOrder");
+        String filePath = builder.getFilePath("InputIncorrectAtClauseOrderCheck");
         
         Integer[] warnList = builder.getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
