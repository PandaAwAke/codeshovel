diff --git a/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java b/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java
index e380c4d06..1b5d2f02f 100644
--- a/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java
+++ b/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java
@@ -28,113 +28,118 @@ import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import java.util.Properties;
 import java.util.regex.Pattern;
 
 import com.puppycrawl.tools.checkstyle.ConfigurationLoader;
 import com.puppycrawl.tools.checkstyle.PropertiesExpander;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 
 public class ConfigurationBuilder extends BaseCheckTestSupport {
 
     private static final String XML_NAME = "/google_checks.xml";
 
     private final File root;
 
     private final List<File> files = new ArrayList<>();
 
     private final Configuration configuration;
 
     private final Pattern warnPattern = CommonUtils
         .createPattern(".*[ ]*//[ ]*warn[ ]*|/[*]warn[*]/");
 
     public ConfigurationBuilder(File aRoot) {
         root = aRoot;
         configuration = getConfigurationFromXML(XML_NAME, System.getProperties());
         listFiles(files, root, "java");
     }
 
     private static Configuration getConfigurationFromXML(String aConfigName,
             Properties aProps) {
         try {
             return ConfigurationLoader.loadConfiguration(aConfigName,
                     new PropertiesExpander(aProps));
         }
         catch (final CheckstyleException e) {
             System.out.println("Error loading configuration file");
             e.printStackTrace(System.out);
             System.exit(1);
             return null;
         }
     }
 
     Configuration getConfiguration() {
         return configuration;
     }
 
     public Configuration getCheckConfig(String aCheckName) {
+        Configuration result = null;
         for (Configuration currentConfig : configuration.getChildren()) {
             if ("TreeWalker".equals(currentConfig.getName())) {
                 for (Configuration checkConfig : currentConfig.getChildren()) {
                     if (aCheckName.equals(checkConfig.getName())) {
-                        return checkConfig;
+                        result = checkConfig;
+                        break;
                     }
                 }
+                if (result != null) {
+                    break;
+                }
             }
             else if (aCheckName.equals(currentConfig.getName())) {
-                return currentConfig;
+                result = currentConfig;
             }
         }
-        return null;
+        return result;
     }
 
     public String getFilePath(String aFileName) {
         final String absoluteRootPath = root.getAbsolutePath();
         final String rootPath = absoluteRootPath.substring(0,
                 absoluteRootPath.lastIndexOf("src"));
         for (File file : files) {
             if (file.toString().endsWith(aFileName + ".java")) {
                 return rootPath + file;
             }
         }
         return null;
     }
 
     private static void listFiles(final List<File> files, final File folder,
             final String extension) {
         if (folder.canRead()) {
             if (folder.isDirectory()) {
                 for (final File file : folder.listFiles()) {
                     listFiles(files, file, extension);
                 }
             }
             else if (folder.toString().endsWith("." + extension)) {
                 files.add(folder);
             }
         }
     }
 
     public File getRoot() {
         return root;
     }
 
     public List<File> getFiles() {
         return Collections.unmodifiableList(files);
     }
 
     public Integer[] getLinesWithWarn(String aFileName) throws IOException {
         final List<Integer> result = new ArrayList<>();
         try (BufferedReader br = new BufferedReader(new InputStreamReader(
                 new FileInputStream(aFileName), StandardCharsets.UTF_8))) {
             int lineNumber = 1;
             while (true) {
                 final String line = br.readLine();
                 if (line == null) {
                     break;
                 }
                 if (warnPattern.matcher(line).find()) {
                     result.add(lineNumber);
                 }
                 lineNumber++;
