diff --git a/src/it/java/com/google/checkstyle/test/base/AbstractModuleTestSupport.java b/src/it/java/com/google/checkstyle/test/base/AbstractModuleTestSupport.java
index f2e82c97b..7ea9c615d 100644
--- a/src/it/java/com/google/checkstyle/test/base/AbstractModuleTestSupport.java
+++ b/src/it/java/com/google/checkstyle/test/base/AbstractModuleTestSupport.java
@@ -32,155 +32,151 @@ import java.io.InputStreamReader;
 import java.io.LineNumberReader;
 import java.nio.charset.StandardCharsets;
 import java.text.MessageFormat;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Properties;
 import java.util.Set;
 import java.util.regex.Pattern;
 
 import com.puppycrawl.tools.checkstyle.Checker;
 import com.puppycrawl.tools.checkstyle.ConfigurationLoader;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.PropertiesExpander;
 import com.puppycrawl.tools.checkstyle.TreeWalker;
 import com.puppycrawl.tools.checkstyle.api.AbstractViolationReporter;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.internal.utils.BriefUtLogger;
 import com.puppycrawl.tools.checkstyle.internal.utils.CheckUtil;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 import com.puppycrawl.tools.checkstyle.utils.ModuleReflectionUtils;
 
 public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport {
 
     /**
      * Enum to specify options for checker creation.
      */
     public enum ModuleCreationOption {
 
         /**
          * Points that the module configurations
          * has to be added under {@link TreeWalker}.
          */
         IN_TREEWALKER,
         /**
          * Points that checker will be created as
          * a root of default configuration.
          */
         IN_CHECKER
 
     }
 
     private static final Pattern WARN_PATTERN = CommonUtils
             .createPattern(".*[ ]*//[ ]*warn[ ]*|/[*]\\s?warn\\s?[*]/");
 
     private static final String XML_NAME = "/google_checks.xml";
 
-    private static Configuration configuration;
+    private static final Configuration CONFIGURATION;
 
-    private static Set<Class<?>> checkstyleModules;
+    private static final Set<Class<?>> CHECKSTYLE_MODULES;
 
     private final ByteArrayOutputStream stream = new ByteArrayOutputStream();
 
+    static {
+        try {
+            CONFIGURATION = ConfigurationLoader.loadConfiguration(XML_NAME,
+                    new PropertiesExpander(System.getProperties()));
+        }
+        catch (CheckstyleException ex) {
+            throw new IllegalStateException(ex);
+        }
+        try {
+            CHECKSTYLE_MODULES = CheckUtil.getCheckstyleModules();
+        }
+        catch (IOException ex) {
+            throw new IllegalStateException(ex);
+        }
+    }
+
     /**
      * Returns test logger.
      * @return logger test logger
      */
     public final BriefUtLogger getBriefUtLogger() {
         return new BriefUtLogger(stream);
     }
 
-    /**
-     * Returns {@link Configuration} based on Google's checks xml-configuration (google_checks.xml).
-     * This implementation uses {@link ConfigurationLoader} in order to load configuration
-     * from xml-file.
-     * @return {@link Configuration} based on Google's checks xml-configuration (google_checks.xml).
-     * @throws CheckstyleException if exception occurs during configuration loading.
-     */
-    protected static Configuration getConfiguration() throws CheckstyleException {
-        if (configuration == null) {
-            configuration = ConfigurationLoader.loadConfiguration(XML_NAME, new PropertiesExpander(
-                    System.getProperties()));
-        }
-
-        return configuration;
-    }
-
     /**
      * Creates {@link DefaultConfiguration} instance for the given module class.
      * @param clazz module class.
      * @return {@link DefaultConfiguration} instance.
      */
     private static DefaultConfiguration createModuleConfig(Class<?> clazz) {
         return new DefaultConfiguration(clazz.getName());
     }
 
     /**
      * Creates {@link Checker} instance based on the given {@link Configuration} instance.
      * @param moduleConfig {@link Configuration} instance.
      * @return {@link Checker} instance based on the given {@link Configuration} instance.
      * @throws Exception if an exception occurs during checker configuration.
      */
     public final Checker createChecker(Configuration moduleConfig)
             throws Exception {
-        if (checkstyleModules == null) {
-            checkstyleModules = CheckUtil.getCheckstyleModules();
-        }
-
         final String name = moduleConfig.getName();
         ModuleCreationOption moduleCreationOption = ModuleCreationOption.IN_CHECKER;
 
-        for (Class<?> moduleClass : checkstyleModules) {
+        for (Class<?> moduleClass : CHECKSTYLE_MODULES) {
             if (moduleClass.getSimpleName().equals(name)
                     || moduleClass.getSimpleName().equals(name + "Check")) {
                 if (ModuleReflectionUtils.isCheckstyleTreeWalkerCheck(moduleClass)
                         || ModuleReflectionUtils.isTreeWalkerFilterModule(moduleClass)) {
                     moduleCreationOption = ModuleCreationOption.IN_TREEWALKER;
                 }
                 break;
             }
         }
 
         return createChecker(moduleConfig, moduleCreationOption);
     }
 
     /**
      * Creates {@link Checker} instance based on specified {@link Configuration}.
      * @param moduleConfig {@link Configuration} instance.
      * @param moduleCreationOption {@code IN_TREEWALKER} if the {@code moduleConfig} should be added
      *                                                  under {@link TreeWalker}.
      * @return {@link Checker} instance.
      * @throws Exception if an exception occurs during checker configuration.
      */
     protected final Checker createChecker(Configuration moduleConfig,
                                     ModuleCreationOption moduleCreationOption)
             throws Exception {
         final DefaultConfiguration dc;
 
         if (moduleCreationOption == ModuleCreationOption.IN_TREEWALKER) {
             dc = createTreeWalkerConfig(moduleConfig);
         }
         else {
             dc = createRootConfig(moduleConfig);
         }
 
         final Checker checker = new Checker();
         // make sure the tests always run with English error messages
         // so the tests don't fail in supported locales like German
         final Locale locale = Locale.ENGLISH;
         checker.setLocaleCountry(locale.getCountry());
         checker.setLocaleLanguage(locale.getLanguage());
         checker.setModuleClassLoader(Thread.currentThread().getContextClassLoader());
         checker.configure(dc);
         checker.addListener(getBriefUtLogger());
         return checker;
     }
 
     /**
      * Creates {@link DefaultConfiguration} or the {@link Checker}.
      * based on the given {@link Configuration}.
      * @param config {@link Configuration} instance.
      * @return {@link DefaultConfiguration} for the {@link Checker}.
@@ -275,150 +271,146 @@ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport
             assertEquals("unexpected warnings " + theWarnings, 0, theWarnings.size());
         }
 
         checker.destroy();
     }
 
     /**
      * Gets the check message 'as is' from appropriate 'messages.properties'
      * file.
      *
      * @param aClass The package the message is located in.
      * @param messageKey the key of message in 'messages.properties' file.
      * @param arguments  the arguments of message in 'messages.properties' file.
      * @return The message of the check with the arguments applied.
      * @throws IOException if there is a problem loading the property file.
      */
     protected static String getCheckMessage(Class<? extends AbstractViolationReporter> aClass,
             String messageKey, Object... arguments) throws IOException {
         final Properties pr = new Properties();
         pr.load(aClass.getResourceAsStream("messages.properties"));
         final MessageFormat formatter = new MessageFormat(pr.getProperty(messageKey),
                 Locale.ROOT);
         return formatter.format(arguments);
     }
 
     /**
      * Gets the check message 'as is' from appropriate 'messages.properties' file.
      * @param messages The map of messages to scan.
      * @param messageKey the key of message in 'messages.properties' file.
      * @param arguments the arguments of message in 'messages.properties' file.
      * @return The message of the check with the arguments applied.
      */
     protected static String getCheckMessage(Map<String, String> messages, String messageKey,
             Object... arguments) {
         String checkMessage = null;
         for (Map.Entry<String, String> entry : messages.entrySet()) {
             if (messageKey.equals(entry.getKey())) {
                 final MessageFormat formatter = new MessageFormat(entry.getValue(), Locale.ROOT);
                 checkMessage = formatter.format(arguments);
                 break;
             }
         }
         return checkMessage;
     }
 
     /**
      * Returns {@link Configuration} instance for the given module name.
      * This implementation uses {@link AbstractModuleTestSupport#getConfiguration()} method inside.
      * @param moduleName module name.
      * @return {@link Configuration} instance for the given module name.
-     * @throws CheckstyleException if exception occurs during configuration loading.
      */
-    protected static Configuration getModuleConfig(String moduleName) throws CheckstyleException {
+    protected static Configuration getModuleConfig(String moduleName) {
         return getModuleConfig(moduleName, null);
     }
 
     /**
      * Returns {@link Configuration} instance for the given module name.
      * This implementation uses {@link AbstractModuleTestSupport#getConfiguration()} method inside.
      * @param moduleName module name.
      * @param moduleId module id.
      * @return {@link Configuration} instance for the given module name.
      * @throws CheckstyleException if exception occurs during configuration loading.
      */
-    protected static Configuration getModuleConfig(String moduleName, String moduleId)
-            throws CheckstyleException {
+    protected static Configuration getModuleConfig(String moduleName, String moduleId) {
         final Configuration result;
         final List<Configuration> configs = getModuleConfigs(moduleName);
         if (configs.size() == 1) {
             result = configs.get(0);
         }
         else if (moduleId == null) {
             throw new IllegalStateException("multiple instances of the same Module are detected");
         }
         else {
             result = configs.stream().filter(conf -> {
                 try {
                     return conf.getAttribute("id").equals(moduleId);
                 }
                 catch (CheckstyleException ex) {
                     throw new IllegalStateException("problem to get ID attribute from " + conf, ex);
                 }
             })
             .findFirst().orElseGet(null);
         }
 
         return result;
     }
 
     /**
      * Returns a list of all {@link Configuration} instances for the given module name.
      * This implementation uses {@link AbstractModuleTestSupport#getConfiguration()} method inside.
      * @param moduleName module name.
      * @return {@link Configuration} instance for the given module name.
-     * @throws CheckstyleException if exception occurs during configuration loading.
      */
-    protected static List<Configuration> getModuleConfigs(String moduleName)
-            throws CheckstyleException {
+    protected static List<Configuration> getModuleConfigs(String moduleName) {
         final List<Configuration> result = new ArrayList<>();
-        for (Configuration currentConfig : getConfiguration().getChildren()) {
+        for (Configuration currentConfig : CONFIGURATION.getChildren()) {
             if ("TreeWalker".equals(currentConfig.getName())) {
                 for (Configuration moduleConfig : currentConfig.getChildren()) {
                     if (moduleName.equals(moduleConfig.getName())) {
                         result.add(moduleConfig);
                     }
                 }
             }
             else if (moduleName.equals(currentConfig.getName())) {
                 result.add(currentConfig);
             }
         }
         return result;
     }
 
     private static String removeDeviceFromPathOnWindows(String path) {
         String fixedPath = path;
         final String os = System.getProperty("os.name", "Unix");
         if (os.startsWith("Windows")) {
             fixedPath = path.substring(path.indexOf(':') + 1);
         }
         return fixedPath;
     }
 
     /**
      * Returns an array of integers which represents the warning line numbers in the file
      * with the given file name.
      * @param fileName file name.
      * @return an array of integers which represents the warning line numbers.
      * @throws IOException if I/O exception occurs while reading the file.
      */
     protected Integer[] getLinesWithWarn(String fileName) throws IOException {
         final List<Integer> result = new ArrayList<>();
         try (BufferedReader br = new BufferedReader(new InputStreamReader(
                 new FileInputStream(fileName), StandardCharsets.UTF_8))) {
             int lineNumber = 1;
             while (true) {
                 final String line = br.readLine();
                 if (line == null) {
                     break;
                 }
                 if (WARN_PATTERN.matcher(line).find()) {
                     result.add(lineNumber);
                 }
                 lineNumber++;
             }
         }
         return result.toArray(new Integer[result.size()]);
     }
 
 }
