diff --git a/core/src/main/java/org/apache/lucene/queries/ExtendedCommonTermsQuery.java b/core/src/main/java/org/apache/lucene/queries/ExtendedCommonTermsQuery.java
index e09c555fd37..1889c6e759b 100644
--- a/core/src/main/java/org/apache/lucene/queries/ExtendedCommonTermsQuery.java
+++ b/core/src/main/java/org/apache/lucene/queries/ExtendedCommonTermsQuery.java
@@ -29,63 +29,67 @@ import org.elasticsearch.index.mapper.MappedFieldType;
 /**
  * Extended version of {@link CommonTermsQuery} that allows to pass in a
  * <tt>minimumNumberShouldMatch</tt> specification that uses the actual num of high frequent terms
  * to calculate the minimum matching terms.
  */
 public class ExtendedCommonTermsQuery extends CommonTermsQuery {
 
     private final MappedFieldType fieldType;
 
     public ExtendedCommonTermsQuery(Occur highFreqOccur, Occur lowFreqOccur, float maxTermFrequency, boolean disableCoord, MappedFieldType fieldType) {
         super(highFreqOccur, lowFreqOccur, maxTermFrequency, disableCoord);
         this.fieldType = fieldType;
     }
 
     private String lowFreqMinNumShouldMatchSpec;
     private String highFreqMinNumShouldMatchSpec;
 
     @Override
     protected int calcLowFreqMinimumNumberShouldMatch(int numOptional) {
         return calcMinimumNumberShouldMatch(lowFreqMinNumShouldMatchSpec, numOptional);
     }
 
     protected int calcMinimumNumberShouldMatch(String spec, int numOptional) {
         if (spec == null) {
             return 0;
         }
         return Queries.calculateMinShouldMatch(numOptional, spec);
     }
 
     @Override
     protected int calcHighFreqMinimumNumberShouldMatch(int numOptional) {
         return calcMinimumNumberShouldMatch(highFreqMinNumShouldMatchSpec, numOptional);
     }
 
     public void setHighFreqMinimumNumberShouldMatch(String spec) {
         this.highFreqMinNumShouldMatchSpec = spec;
     }
 
     public String getHighFreqMinimumNumberShouldMatchSpec() {
         return highFreqMinNumShouldMatchSpec;
     }
 
     public void setLowFreqMinimumNumberShouldMatch(String spec) {
         this.lowFreqMinNumShouldMatchSpec = spec;
     }
 
     public String getLowFreqMinimumNumberShouldMatchSpec() {
         return lowFreqMinNumShouldMatchSpec;
     }
 
+    public float getMaxTermFrequency() {
+        return this.maxTermFrequency;
+    }
+
     @Override
     protected Query newTermQuery(Term term, TermContext context) {
         if (fieldType == null) {
             return super.newTermQuery(term, context);
         }
         final Query query = fieldType.queryStringTermQuery(term);
         if (query == null) {
             return super.newTermQuery(term, context);
         } else {
             return query;
         }
     }
 }
