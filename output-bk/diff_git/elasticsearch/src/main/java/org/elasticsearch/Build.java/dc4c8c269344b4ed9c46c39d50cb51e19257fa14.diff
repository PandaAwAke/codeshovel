diff --git a/src/main/java/org/elasticsearch/Build.java b/src/main/java/org/elasticsearch/Build.java
index d7e6b816cc5..cf3b7de05a6 100644
--- a/src/main/java/org/elasticsearch/Build.java
+++ b/src/main/java/org/elasticsearch/Build.java
@@ -46,51 +46,56 @@ public class Build {
             props.load(new FastStringReader(properties));
             hash = props.getProperty("hash", hash);
             if (!hash.equals("NA")) {
                 hashShort = hash.substring(0, 7);
             }
             String gitTimestampRaw = props.getProperty("timestamp");
             if (gitTimestampRaw != null) {
                 timestamp = ISODateTimeFormat.dateTimeNoMillis().withZone(DateTimeZone.UTC).print(Long.parseLong(gitTimestampRaw));
             }
         } catch (Exception e) {
             // just ignore...
         }
 
         CURRENT = new Build(hash, hashShort, timestamp);
     }
 
     private String hash;
     private String hashShort;
     private String timestamp;
 
     Build(String hash, String hashShort, String timestamp) {
         this.hash = hash;
         this.hashShort = hashShort;
         this.timestamp = timestamp;
     }
 
     public String hash() {
         return hash;
     }
 
     public String hashShort() {
         return hashShort;
     }
 
     public String timestamp() {
         return timestamp;
     }
 
     public static Build readBuild(StreamInput in) throws IOException {
         String hash = in.readString();
         String hashShort = in.readString();
         String timestamp = in.readString();
         return new Build(hash, hashShort, timestamp);
     }
 
     public static void writeBuild(Build build, StreamOutput out) throws IOException {
         out.writeString(build.hash());
         out.writeString(build.hashShort());
         out.writeString(build.timestamp());
     }
+
+    @Override
+    public String toString() {
+        return "[" + hash + "][" + timestamp + "]";
+    }
 }
