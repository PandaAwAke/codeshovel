diff --git a/src/main/java/org/elasticsearch/search/scan/ScanContext.java b/src/main/java/org/elasticsearch/search/scan/ScanContext.java
index d3612c05126..14bf1feb3ad 100644
--- a/src/main/java/org/elasticsearch/search/scan/ScanContext.java
+++ b/src/main/java/org/elasticsearch/search/scan/ScanContext.java
@@ -120,57 +120,62 @@ public class ScanContext {
             if (counter >= to) {
                 throw StopCollectingException;
             }
         }
 
         @Override
         public void doSetNextReader(LeafReaderContext context) throws IOException {
             // if we have a reader state, and we haven't registered one already, register it
             // we need to check in readersState since even when the filter return null, setNextReader is still
             // called for that reader (before)
             if (currentReader != null && !readerStates.containsKey(currentReader)) {
                 assert readerState != null;
                 readerState.done = true;
                 readerStates.put(currentReader, readerState);
             }
             this.currentReader = context.reader();
             this.docBase = context.docBase;
             this.readerState = new ReaderState();
         }
 
         public static final RuntimeException StopCollectingException = new StopCollectingException();
 
         static class StopCollectingException extends RuntimeException {
             @Override
             public Throwable fillInStackTrace() {
                 return null;
             }
         }
     }
 
     public static class ScanFilter extends Filter {
 
         private final ConcurrentMap<IndexReader, ReaderState> readerStates;
 
         private final ScanCollector scanCollector;
 
         public ScanFilter(ConcurrentMap<IndexReader, ReaderState> readerStates, ScanCollector scanCollector) {
             this.readerStates = readerStates;
             this.scanCollector = scanCollector;
         }
 
         @Override
         public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptedDocs) throws IOException {
             ReaderState readerState = readerStates.get(context.reader());
             if (readerState != null && readerState.done) {
                 scanCollector.incCounter(readerState.count);
                 return null;
             }
             return BitsFilteredDocIdSet.wrap(new AllDocIdSet(context.reader().maxDoc()), acceptedDocs);
         }
+
+        @Override
+        public String toString(String field) {
+            return "ScanFilter";
+        }
     }
 
     static class ReaderState {
         public int count;
         public boolean done;
     }
 }
