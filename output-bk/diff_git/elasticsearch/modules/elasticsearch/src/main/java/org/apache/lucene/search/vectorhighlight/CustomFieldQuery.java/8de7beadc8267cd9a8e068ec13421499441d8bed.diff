diff --git a/modules/elasticsearch/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java b/modules/elasticsearch/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java
index 2b8bc3785d3..dbb68fc2b68 100644
--- a/modules/elasticsearch/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java
+++ b/modules/elasticsearch/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java
@@ -36,102 +36,101 @@ import java.util.Collection;
  */
 // LUCENE MONITOR
 public class CustomFieldQuery extends FieldQuery {
 
     private static Field multiTermQueryWrapperFilterQueryField;
 
     static {
         try {
             multiTermQueryWrapperFilterQueryField = MultiTermQueryWrapperFilter.class.getDeclaredField("query");
             multiTermQueryWrapperFilterQueryField.setAccessible(true);
         } catch (NoSuchFieldException e) {
             // ignore
         }
     }
 
     // hack since flatten is called from the parent constructor, so we can't pass it
     public static final ThreadLocal<IndexReader> reader = new ThreadLocal<IndexReader>();
 
     public static final ThreadLocal<Boolean> highlightFilters = new ThreadLocal<Boolean>();
 
     public CustomFieldQuery(Query query, FastVectorHighlighter highlighter) {
         this(query, highlighter.isPhraseHighlight(), highlighter.isFieldMatch());
     }
 
     public CustomFieldQuery(Query query, boolean phraseHighlight, boolean fieldMatch) {
         super(query, phraseHighlight, fieldMatch);
         reader.remove();
         highlightFilters.remove();
     }
 
     @Override void flatten(Query sourceQuery, Collection<Query> flatQueries) {
         if (sourceQuery instanceof DisjunctionMaxQuery) {
             DisjunctionMaxQuery dmq = (DisjunctionMaxQuery) sourceQuery;
             for (Query query : dmq) {
                 flatten(query, flatQueries);
             }
         } else if (sourceQuery instanceof SpanTermQuery) {
             TermQuery termQuery = new TermQuery(((SpanTermQuery) sourceQuery).getTerm());
             if (!flatQueries.contains(termQuery)) {
                 flatQueries.add(termQuery);
             }
         } else if (sourceQuery instanceof ConstantScoreQuery) {
             flatten(((ConstantScoreQuery) sourceQuery).getFilter(), flatQueries);
         } else if (sourceQuery instanceof DeletionAwareConstantScoreQuery) {
             flatten(((DeletionAwareConstantScoreQuery) sourceQuery).getFilter(), flatQueries);
         } else if (sourceQuery instanceof FunctionScoreQuery) {
             flatten(((FunctionScoreQuery) sourceQuery).getSubQuery(), flatQueries);
         } else if (sourceQuery instanceof MultiTermQuery) {
             MultiTermQuery multiTermQuery = (MultiTermQuery) sourceQuery;
             MultiTermQuery.RewriteMethod rewriteMethod = multiTermQuery.getRewriteMethod();
-            if (rewriteMethod != MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE && rewriteMethod != MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE) {
-                // we need to rewrite
-                multiTermQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);
-                try {
-                    flatten(multiTermQuery.rewrite(reader.get()), flatQueries);
-                } catch (IOException e) {
-                    // ignore
-                } catch (BooleanQuery.TooManyClauses e) {
-                    // ignore
-                } finally {
-                    multiTermQuery.setRewriteMethod(rewriteMethod);
-                }
+            // we want to rewrite a multi term query to extract the terms out of it
+            // LUCENE MONITOR: The regular Highlighter actually uses MemoryIndex to extract the terms
+            multiTermQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);
+            try {
+                flatten(multiTermQuery.rewrite(reader.get()), flatQueries);
+            } catch (IOException e) {
+                // ignore
+            } catch (BooleanQuery.TooManyClauses e) {
+                // ignore
+            } finally {
+                multiTermQuery.setRewriteMethod(rewriteMethod);
             }
         } else if (sourceQuery instanceof FilteredQuery) {
             flatten(((FilteredQuery) sourceQuery).getQuery(), flatQueries);
             flatten(((FilteredQuery) sourceQuery).getFilter(), flatQueries);
         } else {
             super.flatten(sourceQuery, flatQueries);
         }
     }
 
     void flatten(Filter sourceFilter, Collection<Query> flatQueries) {
         Boolean highlight = highlightFilters.get();
         if (highlight == null || highlight.equals(Boolean.FALSE)) {
             return;
         }
         if (sourceFilter instanceof TermFilter) {
             flatten(new TermQuery(((TermFilter) sourceFilter).getTerm()), flatQueries);
         } else if (sourceFilter instanceof PublicTermsFilter) {
             PublicTermsFilter termsFilter = (PublicTermsFilter) sourceFilter;
             for (Term term : termsFilter.getTerms()) {
                 flatten(new TermQuery(term), flatQueries);
             }
         } else if (sourceFilter instanceof MultiTermQueryWrapperFilter) {
             if (multiTermQueryWrapperFilterQueryField != null) {
                 try {
                     flatten((Query) multiTermQueryWrapperFilterQueryField.get(sourceFilter), flatQueries);
                 } catch (IllegalAccessException e) {
                     // ignore
                 }
             }
         } else if (sourceFilter instanceof XBooleanFilter) {
             XBooleanFilter booleanFilter = (XBooleanFilter) sourceFilter;
             for (Filter filter : booleanFilter.getMustFilters()) {
                 flatten(filter, flatQueries);
             }
             for (Filter filter : booleanFilter.getNotFilters()) {
                 flatten(filter, flatQueries);
             }
         }
     }
 }
