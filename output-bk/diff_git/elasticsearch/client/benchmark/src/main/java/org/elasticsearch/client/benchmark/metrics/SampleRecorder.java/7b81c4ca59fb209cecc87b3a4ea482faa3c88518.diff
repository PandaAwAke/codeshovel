diff --git a/client/benchmark/src/main/java/org/elasticsearch/client/benchmark/metrics/SampleRecorder.java b/client/benchmark/src/main/java/org/elasticsearch/client/benchmark/metrics/SampleRecorder.java
index d9f24aea004..63e1627f045 100644
--- a/client/benchmark/src/main/java/org/elasticsearch/client/benchmark/metrics/SampleRecorder.java
+++ b/client/benchmark/src/main/java/org/elasticsearch/client/benchmark/metrics/SampleRecorder.java
@@ -1,51 +1,44 @@
 /*
  * Licensed to Elasticsearch under one or more contributor
  * license agreements. See the NOTICE file distributed with
  * this work for additional information regarding copyright
  * ownership. Elasticsearch licenses this file to you under
  * the Apache License, Version 2.0 (the "License"); you may
  * not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
 package org.elasticsearch.client.benchmark.metrics;
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
 /**
  * Stores measurement samples.
  *
  * This class is NOT threadsafe.
  */
 public final class SampleRecorder {
-    private final int warmupIterations;
     private final List<Sample> samples;
-    private int currentIteration;
 
-    public SampleRecorder(int warmupIterations, int iterations) {
-        this.warmupIterations = warmupIterations;
+    public SampleRecorder(int iterations) {
         this.samples = new ArrayList<>(iterations);
     }
 
     public void addSample(Sample sample) {
-        currentIteration++;
-        // only add samples after warmup
-        if (currentIteration > warmupIterations) {
-            samples.add(sample);
-        }
+        samples.add(sample);
     }
 
     public List<Sample> getSamples() {
         return Collections.unmodifiableList(samples);
     }
 }
