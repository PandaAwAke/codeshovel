diff --git a/client/benchmark/src/main/java/org/elasticsearch/client/benchmark/transport/TransportClientBenchmark.java b/client/benchmark/src/main/java/org/elasticsearch/client/benchmark/transport/TransportClientBenchmark.java
index d2aee2251a6..c9ab38fe355 100644
--- a/client/benchmark/src/main/java/org/elasticsearch/client/benchmark/transport/TransportClientBenchmark.java
+++ b/client/benchmark/src/main/java/org/elasticsearch/client/benchmark/transport/TransportClientBenchmark.java
@@ -32,94 +32,94 @@ import org.elasticsearch.common.xcontent.XContentType;
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.plugin.noop.NoopPlugin;
 import org.elasticsearch.plugin.noop.action.bulk.NoopBulkAction;
 import org.elasticsearch.plugin.noop.action.bulk.NoopBulkRequestBuilder;
 import org.elasticsearch.plugin.noop.action.search.NoopSearchAction;
 import org.elasticsearch.plugin.noop.action.search.NoopSearchRequestBuilder;
 import org.elasticsearch.rest.RestStatus;
 import org.elasticsearch.transport.client.PreBuiltTransportClient;
 
 import java.net.InetAddress;
 import java.nio.charset.StandardCharsets;
 import java.util.List;
 import java.util.concurrent.ExecutionException;
 
 public final class TransportClientBenchmark extends AbstractBenchmark<TransportClient> {
     public static void main(String[] args) throws Exception {
         TransportClientBenchmark benchmark = new TransportClientBenchmark();
         benchmark.run(args);
     }
 
     @Override
     protected TransportClient client(String benchmarkTargetHost) throws Exception {
         TransportClient client = new PreBuiltTransportClient(Settings.EMPTY, NoopPlugin.class);
         client.addTransportAddress(new TransportAddress(InetAddress.getByName(benchmarkTargetHost), 9300));
         return client;
     }
 
     @Override
     protected BulkRequestExecutor bulkRequestExecutor(TransportClient client, String indexName, String typeName) {
         return new TransportBulkRequestExecutor(client, indexName, typeName);
     }
 
     @Override
     protected SearchRequestExecutor searchRequestExecutor(TransportClient client, String indexName) {
         return new TransportSearchRequestExecutor(client, indexName);
     }
 
     private static final class TransportBulkRequestExecutor implements BulkRequestExecutor {
         private final TransportClient client;
         private final String indexName;
         private final String typeName;
 
         TransportBulkRequestExecutor(TransportClient client, String indexName, String typeName) {
             this.client = client;
             this.indexName = indexName;
             this.typeName = typeName;
         }
 
         @Override
         public boolean bulkIndex(List<String> bulkData) {
-            NoopBulkRequestBuilder builder = NoopBulkAction.INSTANCE.newRequestBuilder(client);
+            NoopBulkRequestBuilder builder = new NoopBulkRequestBuilder(client,NoopBulkAction.INSTANCE);
             for (String bulkItem : bulkData) {
                 builder.add(new IndexRequest(indexName, typeName).source(bulkItem.getBytes(StandardCharsets.UTF_8), XContentType.JSON));
             }
             BulkResponse bulkResponse;
             try {
                 bulkResponse = builder.execute().get();
             } catch (InterruptedException e) {
                 Thread.currentThread().interrupt();
                 return false;
             } catch (ExecutionException e) {
                 throw new ElasticsearchException(e);
             }
             return !bulkResponse.hasFailures();
         }
     }
 
     private static final class TransportSearchRequestExecutor implements SearchRequestExecutor {
         private final TransportClient client;
         private final String indexName;
 
         private TransportSearchRequestExecutor(TransportClient client, String indexName) {
             this.client = client;
             this.indexName = indexName;
         }
 
         @Override
         public boolean search(String source) {
             final SearchResponse response;
-            NoopSearchRequestBuilder builder = NoopSearchAction.INSTANCE.newRequestBuilder(client);
+            NoopSearchRequestBuilder builder = new NoopSearchRequestBuilder(client, NoopSearchAction.INSTANCE);
             try {
                 builder.setIndices(indexName);
                 builder.setQuery(QueryBuilders.wrapperQuery(source));
                 response = client.execute(NoopSearchAction.INSTANCE, builder.request()).get();
                 return response.status() == RestStatus.OK;
             } catch (InterruptedException e) {
                 Thread.currentThread().interrupt();
                 return false;
             } catch (ExecutionException e) {
                 throw new ElasticsearchException(e);
             }
         }
     }
 }
