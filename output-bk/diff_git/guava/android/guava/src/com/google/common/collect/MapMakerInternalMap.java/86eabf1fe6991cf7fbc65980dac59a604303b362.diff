diff --git a/android/guava/src/com/google/common/collect/MapMakerInternalMap.java b/android/guava/src/com/google/common/collect/MapMakerInternalMap.java
index e43505185..d1dbf4a87 100644
--- a/android/guava/src/com/google/common/collect/MapMakerInternalMap.java
+++ b/android/guava/src/com/google/common/collect/MapMakerInternalMap.java
@@ -2142,101 +2142,101 @@ class MapMakerInternalMap<
     }
 
     @Override
     void maybeDrainReferenceQueues() {
       drainKeyReferenceQueue(queueForKeys);
     }
 
     @Override
     void maybeClearReferenceQueues() {
       clearReferenceQueue(queueForKeys);
     }
   }
 
   /** Concrete implementation of {@link Segment} for weak keys and weak values. */
   static final class WeakKeyWeakValueSegment<K, V>
       extends Segment<K, V, WeakKeyWeakValueEntry<K, V>, WeakKeyWeakValueSegment<K, V>> {
     private final ReferenceQueue<K> queueForKeys = new ReferenceQueue<K>();
     private final ReferenceQueue<V> queueForValues = new ReferenceQueue<V>();
 
     WeakKeyWeakValueSegment(
         MapMakerInternalMap<K, V, WeakKeyWeakValueEntry<K, V>, WeakKeyWeakValueSegment<K, V>> map,
         int initialCapacity,
         int maxSegmentSize) {
       super(map, initialCapacity, maxSegmentSize);
     }
 
     @Override
     WeakKeyWeakValueSegment<K, V> self() {
       return this;
     }
 
     @Override
     ReferenceQueue<K> getKeyReferenceQueueForTesting() {
       return queueForKeys;
     }
 
     @Override
     ReferenceQueue<V> getValueReferenceQueueForTesting() {
       return queueForValues;
     }
 
     @SuppressWarnings("unchecked")
     @Override
     public WeakKeyWeakValueEntry<K, V> castForTesting(InternalEntry<K, V, ?> entry) {
       return (WeakKeyWeakValueEntry<K, V>) entry;
     }
 
     @Override
     public WeakValueReference<K, V, WeakKeyWeakValueEntry<K, V>> getWeakValueReferenceForTesting(
         InternalEntry<K, V, ?> e) {
-      return (castForTesting(e)).getValueReference();
+      return castForTesting(e).getValueReference();
     }
 
     @Override
     public WeakValueReference<K, V, WeakKeyWeakValueEntry<K, V>> newWeakValueReferenceForTesting(
         InternalEntry<K, V, ?> e, V value) {
       return new WeakValueReferenceImpl<>(queueForValues, value, castForTesting(e));
     }
 
     @Override
     public void setWeakValueReferenceForTesting(
         InternalEntry<K, V, ?> e,
         WeakValueReference<K, V, ? extends InternalEntry<K, V, ?>> valueReference) {
       WeakKeyWeakValueEntry<K, V> entry = castForTesting(e);
       @SuppressWarnings("unchecked")
       WeakValueReference<K, V, WeakKeyWeakValueEntry<K, V>> newValueReference =
           (WeakValueReference<K, V, WeakKeyWeakValueEntry<K, V>>) valueReference;
       WeakValueReference<K, V, WeakKeyWeakValueEntry<K, V>> previous = entry.valueReference;
       entry.valueReference = newValueReference;
       previous.clear();
     }
 
     @Override
     void maybeDrainReferenceQueues() {
       drainKeyReferenceQueue(queueForKeys);
       drainValueReferenceQueue(queueForValues);
     }
 
     @Override
     void maybeClearReferenceQueues() {
       clearReferenceQueue(queueForKeys);
     }
   }
 
   /** Concrete implementation of {@link Segment} for weak keys and {@link Dummy} values. */
   static final class WeakKeyDummyValueSegment<K>
       extends Segment<K, Dummy, WeakKeyDummyValueEntry<K>, WeakKeyDummyValueSegment<K>> {
     private final ReferenceQueue<K> queueForKeys = new ReferenceQueue<K>();
 
     WeakKeyDummyValueSegment(
         MapMakerInternalMap<K, Dummy, WeakKeyDummyValueEntry<K>, WeakKeyDummyValueSegment<K>> map,
         int initialCapacity,
         int maxSegmentSize) {
       super(map, initialCapacity, maxSegmentSize);
     }
 
     @Override
     WeakKeyDummyValueSegment<K> self() {
       return this;
     }
 
