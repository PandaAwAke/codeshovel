diff --git a/android/guava/src/com/google/common/collect/Maps.java b/android/guava/src/com/google/common/collect/Maps.java
index 71f3e6479..f9955e6af 100644
--- a/android/guava/src/com/google/common/collect/Maps.java
+++ b/android/guava/src/com/google/common/collect/Maps.java
@@ -62,105 +62,115 @@ import java.util.TreeMap;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 import org.checkerframework.checker.nullness.compatqual.NullableDecl;
 
 /**
  * Static utility methods pertaining to {@link Map} instances (including instances of {@link
  * SortedMap}, {@link BiMap}, etc.). Also see this class's counterparts {@link Lists}, {@link Sets}
  * and {@link Queues}.
  *
  * <p>See the Guava User Guide article on <a href=
  * "https://github.com/google/guava/wiki/CollectionUtilitiesExplained#maps"> {@code Maps}</a>.
  *
  * @author Kevin Bourrillion
  * @author Mike Bostock
  * @author Isaac Shum
  * @author Louis Wasserman
  * @since 2.0
  */
 @GwtCompatible(emulated = true)
 public final class Maps {
   private Maps() {}
 
   private enum EntryFunction implements Function<Entry<?, ?>, Object> {
     KEY {
       @Override
       @NullableDecl
       public Object apply(Entry<?, ?> entry) {
         return entry.getKey();
       }
     },
     VALUE {
       @Override
       @NullableDecl
       public Object apply(Entry<?, ?> entry) {
         return entry.getValue();
       }
     };
   }
 
   @SuppressWarnings("unchecked")
   static <K> Function<Entry<K, ?>, K> keyFunction() {
     return (Function) EntryFunction.KEY;
   }
 
   @SuppressWarnings("unchecked")
   static <V> Function<Entry<?, V>, V> valueFunction() {
     return (Function) EntryFunction.VALUE;
   }
 
   static <K, V> Iterator<K> keyIterator(Iterator<Entry<K, V>> entryIterator) {
-    return Iterators.transform(entryIterator, Maps.<K>keyFunction());
+    return new TransformedIterator<Entry<K, V>, K>(entryIterator) {
+      @Override
+      K transform(Entry<K, V> entry) {
+        return entry.getKey();
+      }
+    };
   }
 
   static <K, V> Iterator<V> valueIterator(Iterator<Entry<K, V>> entryIterator) {
-    return Iterators.transform(entryIterator, Maps.<V>valueFunction());
+    return new TransformedIterator<Entry<K, V>, V>(entryIterator) {
+      @Override
+      V transform(Entry<K, V> entry) {
+        return entry.getValue();
+      }
+    };
   }
 
   /**
    * Returns an immutable map instance containing the given entries. Internally, the returned map
    * will be backed by an {@link EnumMap}.
    *
    * <p>The iteration order of the returned map follows the enum's iteration order, not the order in
    * which the elements appear in the given map.
    *
    * @param map the map to make an immutable copy of
    * @return an immutable map containing those entries
    * @since 14.0
    */
   @GwtCompatible(serializable = true)
   @Beta
   public static <K extends Enum<K>, V> ImmutableMap<K, V> immutableEnumMap(
       Map<K, ? extends V> map) {
     if (map instanceof ImmutableEnumMap) {
       @SuppressWarnings("unchecked") // safe covariant cast
       ImmutableEnumMap<K, V> result = (ImmutableEnumMap<K, V>) map;
       return result;
     }
     Iterator<? extends Entry<K, ? extends V>> entryItr = map.entrySet().iterator();
     if (!entryItr.hasNext()) {
       return ImmutableMap.of();
     }
     Entry<K, ? extends V> entry1 = entryItr.next();
     K key1 = entry1.getKey();
     V value1 = entry1.getValue();
     checkEntryNotNull(key1, value1);
     Class<K> clazz = key1.getDeclaringClass();
     EnumMap<K, V> enumMap = new EnumMap<>(clazz);
     enumMap.put(key1, value1);
     while (entryItr.hasNext()) {
       Entry<K, ? extends V> entry = entryItr.next();
       K key = entry.getKey();
       V value = entry.getValue();
       checkEntryNotNull(key, value);
       enumMap.put(key, value);
     }
     return ImmutableEnumMap.asImmutable(enumMap);
   }
 
   /**
    * Creates a <i>mutable</i>, empty {@code HashMap} instance.
    *
    * <p><b>Note:</b> if mutability is not required, use {@link ImmutableMap#of()} instead.
    *
    * <p><b>Note:</b> if {@code K} is an {@code enum} type, use {@link #newEnumMap} instead.
    *
