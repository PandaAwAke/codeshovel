diff --git a/android/guava/src/com/google/common/collect/AbstractMultimap.java b/android/guava/src/com/google/common/collect/AbstractMultimap.java
index be182381d..d7c67524e 100644
--- a/android/guava/src/com/google/common/collect/AbstractMultimap.java
+++ b/android/guava/src/com/google/common/collect/AbstractMultimap.java
@@ -111,113 +111,113 @@ abstract class AbstractMultimap<K, V> implements Multimap<K, V> {
   public Collection<Entry<K, V>> entries() {
     Collection<Entry<K, V>> result = entries;
     return (result == null) ? entries = createEntries() : result;
   }
 
   Collection<Entry<K, V>> createEntries() {
     if (this instanceof SetMultimap) {
       return new EntrySet();
     } else {
       return new Entries();
     }
   }
 
   @WeakOuter
   private class Entries extends Multimaps.Entries<K, V> {
     @Override
     Multimap<K, V> multimap() {
       return AbstractMultimap.this;
     }
 
     @Override
     public Iterator<Entry<K, V>> iterator() {
       return entryIterator();
     }
   }
 
   @WeakOuter
   private class EntrySet extends Entries implements Set<Entry<K, V>> {
     @Override
     public int hashCode() {
       return Sets.hashCodeImpl(this);
     }
 
     @Override
     public boolean equals(@Nullable Object obj) {
       return Sets.equalsImpl(this, obj);
     }
   }
 
   abstract Iterator<Entry<K, V>> entryIterator();
 
   private transient Set<K> keySet;
 
   @Override
   public Set<K> keySet() {
     Set<K> result = keySet;
     return (result == null) ? keySet = createKeySet() : result;
   }
 
   Set<K> createKeySet() {
-    return new Maps.KeySet<K, Collection<V>>(asMap());
+    return new Maps.KeySet<>(asMap());
   }
 
   private transient Multiset<K> keys;
 
   @Override
   public Multiset<K> keys() {
     Multiset<K> result = keys;
     return (result == null) ? keys = createKeys() : result;
   }
 
   Multiset<K> createKeys() {
-    return new Multimaps.Keys<K, V>(this);
+    return new Multimaps.Keys<>(this);
   }
 
   private transient Collection<V> values;
 
   @Override
   public Collection<V> values() {
     Collection<V> result = values;
     return (result == null) ? values = createValues() : result;
   }
 
   Collection<V> createValues() {
     return new Values();
   }
 
   @WeakOuter
   class Values extends AbstractCollection<V> {
     @Override
     public Iterator<V> iterator() {
       return valueIterator();
     }
 
     @Override
     public int size() {
       return AbstractMultimap.this.size();
     }
 
     @Override
     public boolean contains(@Nullable Object o) {
       return AbstractMultimap.this.containsValue(o);
     }
 
     @Override
     public void clear() {
       AbstractMultimap.this.clear();
     }
   }
 
   Iterator<V> valueIterator() {
     return Maps.valueIterator(entries().iterator());
   }
 
   private transient Map<K, Collection<V>> asMap;
 
   @Override
   public Map<K, Collection<V>> asMap() {
     Map<K, Collection<V>> result = asMap;
     return (result == null) ? asMap = createAsMap() : result;
   }
 
   abstract Map<K, Collection<V>> createAsMap();
