diff --git a/android/guava/src/com/google/common/base/Verify.java b/android/guava/src/com/google/common/base/Verify.java
index 3d2d70bd7..2c70c65c7 100644
--- a/android/guava/src/com/google/common/base/Verify.java
+++ b/android/guava/src/com/google/common/base/Verify.java
@@ -78,92 +78,387 @@ import javax.annotation.Nullable;
  * string, {@code Verify} will still behave as expected, and will still include all argument values
  * in the error message; the message will simply not be formatted exactly as intended.
  *
  * <h3>More information</h3>
  *
  * See <a href="https://github.com/google/guava/wiki/ConditionalFailuresExplained">Conditional
  * failures explained</a> in the Guava User Guide for advice on when this class should be used.
  *
  * @since 17.0
  */
 @Beta
 @GwtCompatible
 public final class Verify {
   /**
    * Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with no
    * message otherwise.
    *
    * @throws VerifyException if {@code expression} is {@code false}
    * @see Preconditions#checkState Preconditions.checkState()
    */
   public static void verify(boolean expression) {
     if (!expression) {
       throw new VerifyException();
     }
   }
 
   /**
    * Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
    * custom message otherwise.
    *
    * @param expression a boolean expression
    * @param errorMessageTemplate a template for the exception message should the check fail. The
    *     message is formed by replacing each {@code %s} placeholder in the template with an
    *     argument. These are matched by position - the first {@code %s} gets
    *     {@code errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted
    *     message in square braces. Unmatched placeholders will be left as-is.
    * @param errorMessageArgs the arguments to be substituted into the message template. Arguments
    *     are converted to strings using {@link String#valueOf(Object)}.
    * @throws VerifyException if {@code expression} is {@code false}
    * @see Preconditions#checkState Preconditions.checkState()
    */
   public static void verify(
       boolean expression,
       @Nullable String errorMessageTemplate,
       @Nullable Object... errorMessageArgs) {
     if (!expression) {
       throw new VerifyException(format(errorMessageTemplate, errorMessageArgs));
     }
   }
 
+  /**
+   * Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
+   * custom message otherwise.
+   *
+   * <p>See {@link #verify(boolean, String, Object...)} for details.
+   */
+  public static void verify(boolean expression, @Nullable String errorMessageTemplate, char p1) {
+    if (!expression) {
+      throw new VerifyException(format(errorMessageTemplate, p1));
+    }
+  }
+
+  /**
+   * Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
+   * custom message otherwise.
+   *
+   * <p>See {@link #verify(boolean, String, Object...)} for details.
+   */
+  public static void verify(boolean expression, @Nullable String errorMessageTemplate, int p1) {
+    if (!expression) {
+      throw new VerifyException(format(errorMessageTemplate, p1));
+    }
+  }
+
+  /**
+   * Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
+   * custom message otherwise.
+   *
+   * <p>See {@link #verify(boolean, String, Object...)} for details.
+   */
+  public static void verify(boolean expression, @Nullable String errorMessageTemplate, long p1) {
+    if (!expression) {
+      throw new VerifyException(format(errorMessageTemplate, p1));
+    }
+  }
+
+  /**
+   * Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
+   * custom message otherwise.
+   *
+   * <p>See {@link #verify(boolean, String, Object...)} for details.
+   */
+  public static void verify(
+      boolean expression, @Nullable String errorMessageTemplate, @Nullable Object p1) {
+    if (!expression) {
+      throw new VerifyException(format(errorMessageTemplate, p1));
+    }
+  }
+
+  /**
+   * Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
+   * custom message otherwise.
+   *
+   * <p>See {@link #verify(boolean, String, Object...)} for details.
+   */
+  public static void verify(
+      boolean expression, @Nullable String errorMessageTemplate, char p1, char p2) {
+    if (!expression) {
+      throw new VerifyException(format(errorMessageTemplate, p1, p2));
+    }
+  }
+
+  /**
+   * Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
+   * custom message otherwise.
+   *
+   * <p>See {@link #verify(boolean, String, Object...)} for details.
+   */
+  public static void verify(
+      boolean expression, @Nullable String errorMessageTemplate, int p1, char p2) {
+    if (!expression) {
+      throw new VerifyException(format(errorMessageTemplate, p1, p2));
+    }
+  }
+
+  /**
+   * Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
+   * custom message otherwise.
+   *
+   * <p>See {@link #verify(boolean, String, Object...)} for details.
+   */
+  public static void verify(
+      boolean expression, @Nullable String errorMessageTemplate, long p1, char p2) {
+    if (!expression) {
+      throw new VerifyException(format(errorMessageTemplate, p1, p2));
+    }
+  }
+
+  /**
+   * Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
+   * custom message otherwise.
+   *
+   * <p>See {@link #verify(boolean, String, Object...)} for details.
+   */
+  public static void verify(
+      boolean expression, @Nullable String errorMessageTemplate, @Nullable Object p1, char p2) {
+    if (!expression) {
+      throw new VerifyException(format(errorMessageTemplate, p1, p2));
+    }
+  }
+
+  /**
+   * Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
+   * custom message otherwise.
+   *
+   * <p>See {@link #verify(boolean, String, Object...)} for details.
+   */
+  public static void verify(
+      boolean expression, @Nullable String errorMessageTemplate, char p1, int p2) {
+    if (!expression) {
+      throw new VerifyException(format(errorMessageTemplate, p1, p2));
+    }
+  }
+
+  /**
+   * Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
+   * custom message otherwise.
+   *
+   * <p>See {@link #verify(boolean, String, Object...)} for details.
+   */
+  public static void verify(
+      boolean expression, @Nullable String errorMessageTemplate, int p1, int p2) {
+    if (!expression) {
+      throw new VerifyException(format(errorMessageTemplate, p1, p2));
+    }
+  }
+
+  /**
+   * Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
+   * custom message otherwise.
+   *
+   * <p>See {@link #verify(boolean, String, Object...)} for details.
+   */
+  public static void verify(
+      boolean expression, @Nullable String errorMessageTemplate, long p1, int p2) {
+    if (!expression) {
+      throw new VerifyException(format(errorMessageTemplate, p1, p2));
+    }
+  }
+
+  /**
+   * Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
+   * custom message otherwise.
+   *
+   * <p>See {@link #verify(boolean, String, Object...)} for details.
+   */
+  public static void verify(
+      boolean expression, @Nullable String errorMessageTemplate, @Nullable Object p1, int p2) {
+    if (!expression) {
+      throw new VerifyException(format(errorMessageTemplate, p1, p2));
+    }
+  }
+
+  /**
+   * Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
+   * custom message otherwise.
+   *
+   * <p>See {@link #verify(boolean, String, Object...)} for details.
+   */
+  public static void verify(
+      boolean expression, @Nullable String errorMessageTemplate, char p1, long p2) {
+    if (!expression) {
+      throw new VerifyException(format(errorMessageTemplate, p1, p2));
+    }
+  }
+
+  /**
+   * Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
+   * custom message otherwise.
+   *
+   * <p>See {@link #verify(boolean, String, Object...)} for details.
+   */
+  public static void verify(
+      boolean expression, @Nullable String errorMessageTemplate, int p1, long p2) {
+    if (!expression) {
+      throw new VerifyException(format(errorMessageTemplate, p1, p2));
+    }
+  }
+
+  /**
+   * Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
+   * custom message otherwise.
+   *
+   * <p>See {@link #verify(boolean, String, Object...)} for details.
+   */
+  public static void verify(
+      boolean expression, @Nullable String errorMessageTemplate, long p1, long p2) {
+    if (!expression) {
+      throw new VerifyException(format(errorMessageTemplate, p1, p2));
+    }
+  }
+
+  /**
+   * Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
+   * custom message otherwise.
+   *
+   * <p>See {@link #verify(boolean, String, Object...)} for details.
+   */
+  public static void verify(
+      boolean expression, @Nullable String errorMessageTemplate, @Nullable Object p1, long p2) {
+    if (!expression) {
+      throw new VerifyException(format(errorMessageTemplate, p1, p2));
+    }
+  }
+
+  /**
+   * Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
+   * custom message otherwise.
+   *
+   * <p>See {@link #verify(boolean, String, Object...)} for details.
+   */
+  public static void verify(
+      boolean expression, @Nullable String errorMessageTemplate, char p1, @Nullable Object p2) {
+    if (!expression) {
+      throw new VerifyException(format(errorMessageTemplate, p1, p2));
+    }
+  }
+
+  /**
+   * Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
+   * custom message otherwise.
+   *
+   * <p>See {@link #verify(boolean, String, Object...)} for details.
+   */
+  public static void verify(
+      boolean expression, @Nullable String errorMessageTemplate, int p1, @Nullable Object p2) {
+    if (!expression) {
+      throw new VerifyException(format(errorMessageTemplate, p1, p2));
+    }
+  }
+
+  /**
+   * Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
+   * custom message otherwise.
+   *
+   * <p>See {@link #verify(boolean, String, Object...)} for details.
+   */
+  public static void verify(
+      boolean expression, @Nullable String errorMessageTemplate, long p1, @Nullable Object p2) {
+    if (!expression) {
+      throw new VerifyException(format(errorMessageTemplate, p1, p2));
+    }
+  }
+
+  /**
+   * Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
+   * custom message otherwise.
+   *
+   * <p>See {@link #verify(boolean, String, Object...)} for details.
+   */
+  public static void verify(
+      boolean expression,
+      @Nullable String errorMessageTemplate,
+      @Nullable Object p1,
+      @Nullable Object p2) {
+    if (!expression) {
+      throw new VerifyException(format(errorMessageTemplate, p1, p2));
+    }
+  }
+
+  /**
+   * Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
+   * custom message otherwise.
+   *
+   * <p>See {@link #verify(boolean, String, Object...)} for details.
+   */
+  public static void verify(
+      boolean expression,
+      @Nullable String errorMessageTemplate,
+      @Nullable Object p1,
+      @Nullable Object p2,
+      @Nullable Object p3) {
+    if (!expression) {
+      throw new VerifyException(format(errorMessageTemplate, p1, p2, p3));
+    }
+  }
+
+  /**
+   * Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
+   * custom message otherwise.
+   *
+   * <p>See {@link #verify(boolean, String, Object...)} for details.
+   */
+  public static void verify(
+      boolean expression,
+      @Nullable String errorMessageTemplate,
+      @Nullable Object p1,
+      @Nullable Object p2,
+      @Nullable Object p3,
+      @Nullable Object p4) {
+    if (!expression) {
+      throw new VerifyException(format(errorMessageTemplate, p1, p2, p3, p4));
+    }
+  }
+
   /**
    * Ensures that {@code reference} is non-null, throwing a {@code VerifyException} with a default
    * message otherwise.
    *
    * @return {@code reference}, guaranteed to be non-null, for convenience
    * @throws VerifyException if {@code reference} is {@code null}
    * @see Preconditions#checkNotNull Preconditions.checkNotNull()
    */
   @CanIgnoreReturnValue
   public static <T> T verifyNotNull(@Nullable T reference) {
     return verifyNotNull(reference, "expected a non-null reference");
   }
 
   /**
    * Ensures that {@code reference} is non-null, throwing a {@code VerifyException} with a custom
    * message otherwise.
    *
    * @param errorMessageTemplate a template for the exception message should the check fail. The
    *     message is formed by replacing each {@code %s} placeholder in the template with an
    *     argument. These are matched by position - the first {@code %s} gets
    *     {@code errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted
    *     message in square braces. Unmatched placeholders will be left as-is.
    * @param errorMessageArgs the arguments to be substituted into the message template. Arguments
    *     are converted to strings using {@link String#valueOf(Object)}.
    * @return {@code reference}, guaranteed to be non-null, for convenience
    * @throws VerifyException if {@code reference} is {@code null}
    * @see Preconditions#checkNotNull Preconditions.checkNotNull()
    */
   @CanIgnoreReturnValue
   public static <T> T verifyNotNull(
       @Nullable T reference,
       @Nullable String errorMessageTemplate,
       @Nullable Object... errorMessageArgs) {
     verify(reference != null, errorMessageTemplate, errorMessageArgs);
     return reference;
   }
 
   // TODO(kevinb): consider <T> T verifySingleton(Iterable<T>) to take over for
   // Iterables.getOnlyElement()
 
   private Verify() {}
 }
