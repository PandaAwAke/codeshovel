diff --git a/android/guava/src/com/google/common/collect/ForwardingSortedMap.java b/android/guava/src/com/google/common/collect/ForwardingSortedMap.java
index 0839e37d9..76edef6e1 100644
--- a/android/guava/src/com/google/common/collect/ForwardingSortedMap.java
+++ b/android/guava/src/com/google/common/collect/ForwardingSortedMap.java
@@ -91,73 +91,69 @@ public abstract class ForwardingSortedMap<K, V> extends ForwardingMap<K, V>
   }
 
   @Override
   public SortedMap<K, V> tailMap(K fromKey) {
     return delegate().tailMap(fromKey);
   }
 
   /**
    * A sensible implementation of {@link SortedMap#keySet} in terms of the methods of
    * {@code ForwardingSortedMap}. In many cases, you may wish to override
    * {@link ForwardingSortedMap#keySet} to forward to this implementation or a subclass thereof.
    *
    * @since 15.0
    */
   @Beta
   protected class StandardKeySet extends Maps.SortedKeySet<K, V> {
     /** Constructor for use by subclasses. */
     public StandardKeySet() {
       super(ForwardingSortedMap.this);
     }
   }
 
   // unsafe, but worst case is a CCE is thrown, which callers will be expecting
   @SuppressWarnings("unchecked")
   private int unsafeCompare(Object k1, Object k2) {
     Comparator<? super K> comparator = comparator();
     if (comparator == null) {
       return ((Comparable<Object>) k1).compareTo(k2);
     } else {
       return ((Comparator<Object>) comparator).compare(k1, k2);
     }
   }
 
   /**
    * A sensible definition of {@link #containsKey} in terms of the {@code
    * firstKey()} method of {@link #tailMap}. If you override {@link #tailMap},
    * you may wish to override {@link #containsKey} to forward to this
    * implementation.
    *
    * @since 7.0
    */
   @Override
   @Beta
   protected boolean standardContainsKey(@Nullable Object key) {
     try {
       // any CCE will be caught
       @SuppressWarnings("unchecked")
       SortedMap<Object, V> self = (SortedMap<Object, V>) this;
       Object ceilingKey = self.tailMap(key).firstKey();
       return unsafeCompare(ceilingKey, key) == 0;
-    } catch (ClassCastException e) {
-      return false;
-    } catch (NoSuchElementException e) {
-      return false;
-    } catch (NullPointerException e) {
+    } catch (ClassCastException | NoSuchElementException | NullPointerException e) {
       return false;
     }
   }
 
   /**
    * A sensible default implementation of {@link #subMap(Object, Object)} in
    * terms of {@link #headMap(Object)} and {@link #tailMap(Object)}. In some
    * situations, you may wish to override {@link #subMap(Object, Object)} to
    * forward to this implementation.
    *
    * @since 7.0
    */
   @Beta
   protected SortedMap<K, V> standardSubMap(K fromKey, K toKey) {
     checkArgument(unsafeCompare(fromKey, toKey) <= 0, "fromKey must be <= toKey");
     return tailMap(fromKey).headMap(toKey);
   }
 }
