diff --git a/android/guava/src/com/google/common/base/Strings.java b/android/guava/src/com/google/common/base/Strings.java
index 998d1a50b..6eb7f6626 100644
--- a/android/guava/src/com/google/common/base/Strings.java
+++ b/android/guava/src/com/google/common/base/Strings.java
@@ -163,62 +163,128 @@ public final class Strings {
     }
     System.arraycopy(array, 0, array, n, size - n);
     return new String(array);
   }
 
   /**
    * Returns the longest string {@code prefix} such that {@code a.toString().startsWith(prefix) &&
    * b.toString().startsWith(prefix)}, taking care not to split surrogate pairs. If {@code a} and
    * {@code b} have no common prefix, returns the empty string.
    *
    * @since 11.0
    */
   public static String commonPrefix(CharSequence a, CharSequence b) {
     checkNotNull(a);
     checkNotNull(b);
 
     int maxPrefixLength = Math.min(a.length(), b.length());
     int p = 0;
     while (p < maxPrefixLength && a.charAt(p) == b.charAt(p)) {
       p++;
     }
     if (validSurrogatePairAt(a, p - 1) || validSurrogatePairAt(b, p - 1)) {
       p--;
     }
     return a.subSequence(0, p).toString();
   }
 
   /**
    * Returns the longest string {@code suffix} such that {@code a.toString().endsWith(suffix) &&
    * b.toString().endsWith(suffix)}, taking care not to split surrogate pairs. If {@code a} and
    * {@code b} have no common suffix, returns the empty string.
    *
    * @since 11.0
    */
   public static String commonSuffix(CharSequence a, CharSequence b) {
     checkNotNull(a);
     checkNotNull(b);
 
     int maxSuffixLength = Math.min(a.length(), b.length());
     int s = 0;
     while (s < maxSuffixLength && a.charAt(a.length() - s - 1) == b.charAt(b.length() - s - 1)) {
       s++;
     }
     if (validSurrogatePairAt(a, a.length() - s - 1)
         || validSurrogatePairAt(b, b.length() - s - 1)) {
       s--;
     }
     return a.subSequence(a.length() - s, a.length()).toString();
   }
 
+  /**
+   * Returns the given {@code template} string with each occurrence of {@code "%s"} replaced with
+   * the corresponding argument value from {@code args}; or, if the placeholder and argument counts
+   * do not match, returns a best-effort form of that string. Will not throw an exception under any
+   * circumstances (as long as all arguments' {@code toString} methods successfully return).
+   *
+   * <p><b>Note:</b> For most string-formatting needs, use {@link String#format}, {@link
+   * PrintWriter#format}, and related methods. These support the full range of {@linkplain
+   * Formatter#syntax format specifiers}, and alert you to usage errors by throwing {@link
+   * InvalidFormatException}.
+   *
+   * <p>In certain cases, such as outputting debugging information or constructing a message to be
+   * used for another unchecked exception, an exception during string formatting would serve little
+   * purpose except to supplant the real information you were trying to provide. These are the cases
+   * this method is made for; it instead generates a best-effort string with all supplied argument
+   * values present. This method is also useful in environments such as GWT where {@code
+   * String.format} is not available. As an example, method implementations of the {@link
+   * Preconditions} class use this formatter, for both of the reasons just discussed.
+   *
+   * <p><b>Warning:</b> Only the exact two-character placeholder sequence {@code "%s"} is
+   * recognized.
+   *
+   * @param template a string containing zero or more {@code "%s"} placeholder sequences. {@code
+   *     null} is treated as the four-character string {@code "null"}.
+   * @param args the arguments to be substituted into the message template. The first argument
+   *     specified is substituted for the first occurrence of {@code "%s"} in the template, and so
+   *     forth. A {@code null} argument is converted to the four-character string {@code "null"};
+   *     non-null values are converted to strings using {@link Object#toString()}.
+   * @since NEXT
+   */
+  // TODO(diamondm) consider using Arrays.toString() for array parameters
+  // TODO(diamondm) capture exceptions thrown from arguments' toString methods
+  public static String lenientFormat(@NullableDecl String template, @NullableDecl Object... args) {
+    template = String.valueOf(template); // null -> "null"
+
+    args = args == null ? new Object[] {"(Object[])null"} : args;
+
+    // start substituting the arguments into the '%s' placeholders
+    StringBuilder builder = new StringBuilder(template.length() + 16 * args.length);
+    int templateStart = 0;
+    int i = 0;
+    while (i < args.length) {
+      int placeholderStart = template.indexOf("%s", templateStart);
+      if (placeholderStart == -1) {
+        break;
+      }
+      builder.append(template, templateStart, placeholderStart);
+      builder.append(args[i++]);
+      templateStart = placeholderStart + 2;
+    }
+    builder.append(template, templateStart, template.length());
+
+    // if we run out of placeholders, append the extra args in square braces
+    if (i < args.length) {
+      builder.append(" [");
+      builder.append(args[i++]);
+      while (i < args.length) {
+        builder.append(", ");
+        builder.append(args[i++]);
+      }
+      builder.append(']');
+    }
+
+    return builder.toString();
+  }
+
   /**
    * True when a valid surrogate pair starts at the given {@code index} in the given {@code string}.
    * Out-of-range indexes return false.
    */
   @VisibleForTesting
   static boolean validSurrogatePairAt(CharSequence string, int index) {
     return index >= 0
         && index <= (string.length() - 2)
         && Character.isHighSurrogate(string.charAt(index))
         && Character.isLowSurrogate(string.charAt(index + 1));
   }
 }
