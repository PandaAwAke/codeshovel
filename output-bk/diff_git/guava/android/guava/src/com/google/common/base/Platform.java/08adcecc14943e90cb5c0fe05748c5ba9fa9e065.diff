diff --git a/android/guava/src/com/google/common/base/Platform.java b/android/guava/src/com/google/common/base/Platform.java
index 4b9ee14eb..8c4b11a78 100644
--- a/android/guava/src/com/google/common/base/Platform.java
+++ b/android/guava/src/com/google/common/base/Platform.java
@@ -23,74 +23,79 @@ import java.util.logging.Logger;
 import java.util.regex.Pattern;
 import org.checkerframework.checker.nullness.compatqual.NullableDecl;
 
 /**
  * Methods factored out so that they can be emulated differently in GWT.
  *
  * @author Jesse Wilson
  */
 @GwtCompatible(emulated = true)
 final class Platform {
   private static final Logger logger = Logger.getLogger(Platform.class.getName());
   private static final PatternCompiler patternCompiler = loadPatternCompiler();
 
   private Platform() {}
 
   /** Calls {@link System#nanoTime()}. */
   static long systemNanoTime() {
     return System.nanoTime();
   }
 
   static CharMatcher precomputeCharMatcher(CharMatcher matcher) {
     return matcher.precomputedInternal();
   }
 
   static <T extends Enum<T>> Optional<T> getEnumIfPresent(Class<T> enumClass, String value) {
     WeakReference<? extends Enum<?>> ref = Enums.getEnumConstants(enumClass).get(value);
     return ref == null ? Optional.<T>absent() : Optional.of(enumClass.cast(ref.get()));
   }
 
   static String formatCompact4Digits(double value) {
     return String.format(Locale.ROOT, "%.4g", value);
   }
 
   static boolean stringIsNullOrEmpty(@NullableDecl String string) {
     return string == null || string.isEmpty();
   }
 
   static String nullToEmpty(@NullableDecl String string) {
     return (string == null) ? "" : string;
   }
 
   static String emptyToNull(@NullableDecl String string) {
     return stringIsNullOrEmpty(string) ? null : string;
   }
 
   static CommonPattern compilePattern(String pattern) {
     Preconditions.checkNotNull(pattern);
     return patternCompiler.compile(pattern);
   }
 
-  static boolean usingJdkPatternCompiler() {
-    return patternCompiler instanceof JdkPatternCompiler;
+  static boolean patternCompilerIsPcreLike() {
+    return patternCompiler.isPcreLike();
   }
 
   private static PatternCompiler loadPatternCompiler() {
     /*
      * We'd normally use ServiceLoader here, but it hurts Android startup performance. To avoid
      * that, we hardcode the JDK Pattern compiler on Android (and, inadvertently, on App Engine and
      * in Guava, at least for now).
      */
     return new JdkPatternCompiler();
   }
 
   private static void logPatternCompilerError(ServiceConfigurationError e) {
     logger.log(Level.WARNING, "Error loading regex compiler, falling back to next option", e);
   }
 
   private static final class JdkPatternCompiler implements PatternCompiler {
     @Override
     public CommonPattern compile(String pattern) {
       return new JdkPattern(Pattern.compile(pattern));
     }
+
+    @Override
+    public boolean isPcreLike() {
+      return true;
+    }
   }
 }
