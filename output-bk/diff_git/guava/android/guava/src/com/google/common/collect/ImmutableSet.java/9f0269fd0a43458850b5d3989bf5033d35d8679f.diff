diff --git a/android/guava/src/com/google/common/collect/ImmutableSet.java b/android/guava/src/com/google/common/collect/ImmutableSet.java
index ba7defd15..ce314936e 100644
--- a/android/guava/src/com/google/common/collect/ImmutableSet.java
+++ b/android/guava/src/com/google/common/collect/ImmutableSet.java
@@ -58,104 +58,109 @@ public abstract class ImmutableSet<E> extends ImmutableCollection<E> implements
   /**
    * Returns an immutable set containing {@code element}. Preferred over {@link
    * Collections#singleton} for code consistency, {@code null} rejection, and because the return
    * type conveys the immutability guarantee.
    */
   public static <E> ImmutableSet<E> of(E element) {
     return new SingletonImmutableSet<E>(element);
   }
 
   /**
    * Returns an immutable set containing the given elements, minus duplicates, in the order each was
    * first specified. That is, if multiple elements are {@linkplain Object#equals equal}, all except
    * the first are ignored.
    */
   public static <E> ImmutableSet<E> of(E e1, E e2) {
     return construct(2, e1, e2);
   }
 
   /**
    * Returns an immutable set containing the given elements, minus duplicates, in the order each was
    * first specified. That is, if multiple elements are {@linkplain Object#equals equal}, all except
    * the first are ignored.
    */
   public static <E> ImmutableSet<E> of(E e1, E e2, E e3) {
     return construct(3, e1, e2, e3);
   }
 
   /**
    * Returns an immutable set containing the given elements, minus duplicates, in the order each was
    * first specified. That is, if multiple elements are {@linkplain Object#equals equal}, all except
    * the first are ignored.
    */
   public static <E> ImmutableSet<E> of(E e1, E e2, E e3, E e4) {
     return construct(4, e1, e2, e3, e4);
   }
 
   /**
    * Returns an immutable set containing the given elements, minus duplicates, in the order each was
    * first specified. That is, if multiple elements are {@linkplain Object#equals equal}, all except
    * the first are ignored.
    */
   public static <E> ImmutableSet<E> of(E e1, E e2, E e3, E e4, E e5) {
     return construct(5, e1, e2, e3, e4, e5);
   }
 
   /**
    * Returns an immutable set containing the given elements, minus duplicates, in the order each was
    * first specified. That is, if multiple elements are {@linkplain Object#equals equal}, all except
    * the first are ignored.
    *
+   * <p>The array {@code others} must not be longer than {@code Integer.MAX_VALUE - 6}.
+   *
    * @since 3.0 (source-compatible since 2.0)
    */
   @SafeVarargs // For Eclipse. For internal javac we have disabled this pointless type of warning.
   public static <E> ImmutableSet<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E... others) {
+    checkArgument(
+        others.length <= Integer.MAX_VALUE - 6,
+        "the total number of elements must fit in an int");
     final int paramCount = 6;
     Object[] elements = new Object[paramCount + others.length];
     elements[0] = e1;
     elements[1] = e2;
     elements[2] = e3;
     elements[3] = e4;
     elements[4] = e5;
     elements[5] = e6;
     System.arraycopy(others, 0, elements, paramCount, others.length);
     return construct(elements.length, elements);
   }
 
   /**
    * Constructs an {@code ImmutableSet} from the first {@code n} elements of the specified array. If
    * {@code k} is the size of the returned {@code ImmutableSet}, then the unique elements of {@code
    * elements} will be in the first {@code k} positions, and {@code elements[i] == null} for {@code
    * k <= i < n}.
    *
    * <p>After this method returns, {@code elements} will contain no duplicates, but {@code elements}
    * may be the real array backing the returned set, so do not modify it further.
    *
    * <p>{@code elements} may contain only values of type {@code E}.
    *
    * @throws NullPointerException if any of the first {@code n} elements of {@code elements} is null
    */
   private static <E> ImmutableSet<E> construct(int n, Object... elements) {
     switch (n) {
       case 0:
         return of();
       case 1:
         @SuppressWarnings("unchecked") // safe; elements contains only E's
         E elem = (E) elements[0];
         return of(elem);
       default:
         // continue below to handle the general case
     }
     int tableSize = chooseTableSize(n);
     Object[] table = new Object[tableSize];
     int mask = tableSize - 1;
     int hashCode = 0;
     int uniques = 0;
     for (int i = 0; i < n; i++) {
       Object element = checkElementNotNull(elements[i], i);
       int hash = element.hashCode();
       for (int j = Hashing.smear(hash); ; j++) {
         int index = j & mask;
         Object value = table[index];
         if (value == null) {
           // Came to an empty slot. Put the element here.
           elements[uniques++] = element;
