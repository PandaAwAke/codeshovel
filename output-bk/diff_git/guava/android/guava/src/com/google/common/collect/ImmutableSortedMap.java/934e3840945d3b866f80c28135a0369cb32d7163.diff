diff --git a/android/guava/src/com/google/common/collect/ImmutableSortedMap.java b/android/guava/src/com/google/common/collect/ImmutableSortedMap.java
index 742c01598..d50326545 100644
--- a/android/guava/src/com/google/common/collect/ImmutableSortedMap.java
+++ b/android/guava/src/com/google/common/collect/ImmutableSortedMap.java
@@ -882,66 +882,66 @@ public final class ImmutableSortedMap<K, V> extends ImmutableSortedMapFauxveride
   @Deprecated
   @Override
   public final Entry<K, V> pollLastEntry() {
     throw new UnsupportedOperationException();
   }
 
   @Override
   public ImmutableSortedMap<K, V> descendingMap() {
     // TODO(kevinb): the descendingMap is never actually cached at all. Either it should be or the
     // code below simplified.
     ImmutableSortedMap<K, V> result = descendingMap;
     if (result == null) {
       if (isEmpty()) {
         return result = emptyMap(Ordering.from(comparator()).reverse());
       } else {
         return result =
             new ImmutableSortedMap<K, V>(
                 (RegularImmutableSortedSet<K>) keySet.descendingSet(), valueList.reverse(), this);
       }
     }
     return result;
   }
 
   @Override
   public ImmutableSortedSet<K> navigableKeySet() {
     return keySet;
   }
 
   @Override
   public ImmutableSortedSet<K> descendingKeySet() {
     return keySet.descendingSet();
   }
 
   /**
    * Serialized type for all ImmutableSortedMap instances. It captures the
    * logical contents and they are reconstructed using public factory methods.
    * This ensures that the implementation types remain as implementation
    * details.
    */
   private static class SerializedForm extends ImmutableMap.SerializedForm {
     private final Comparator<Object> comparator;
 
     @SuppressWarnings("unchecked")
     SerializedForm(ImmutableSortedMap<?, ?> sortedMap) {
       super(sortedMap);
       comparator = (Comparator<Object>) sortedMap.comparator();
     }
 
     @Override
     Object readResolve() {
-      Builder<Object, Object> builder = new Builder<Object, Object>(comparator);
+      Builder<Object, Object> builder = new Builder<>(comparator);
       return createMap(builder);
     }
 
     private static final long serialVersionUID = 0;
   }
 
   @Override
   Object writeReplace() {
     return new SerializedForm(this);
   }
 
   // This class is never actually serialized directly, but we have to make the
   // warning go away (and suppressing would suppress for all nested classes too)
   private static final long serialVersionUID = 0;
 }
