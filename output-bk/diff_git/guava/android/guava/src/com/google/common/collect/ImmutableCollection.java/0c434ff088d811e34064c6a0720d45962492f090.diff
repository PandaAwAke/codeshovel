diff --git a/android/guava/src/com/google/common/collect/ImmutableCollection.java b/android/guava/src/com/google/common/collect/ImmutableCollection.java
index 545522837..91bd5cbdb 100644
--- a/android/guava/src/com/google/common/collect/ImmutableCollection.java
+++ b/android/guava/src/com/google/common/collect/ImmutableCollection.java
@@ -424,56 +424,61 @@ public abstract class ImmutableCollection<E> extends AbstractCollection<E> imple
     boolean forceCopy;
 
     ArrayBasedBuilder(int initialCapacity) {
       checkNonnegative(initialCapacity, "initialCapacity");
       this.contents = new Object[initialCapacity];
       this.size = 0;
     }
 
     /*
      * Expand the absolute capacity of the builder so it can accept at least the specified number of
      * elements without being resized. Also, if we've already built a collection backed by the
      * current array, create a new array.
      */
     private void getReadyToExpandTo(int minCapacity) {
       if (contents.length < minCapacity) {
         this.contents =
             Arrays.copyOf(
                 this.contents, expandedCapacity(contents.length, minCapacity));
         forceCopy = false;
       } else if (forceCopy) {
         this.contents = contents.clone();
         forceCopy = false;
       }
     }
 
     @CanIgnoreReturnValue
     @Override
     public ArrayBasedBuilder<E> add(E element) {
       checkNotNull(element);
       getReadyToExpandTo(size + 1);
       contents[size++] = element;
       return this;
     }
 
     @CanIgnoreReturnValue
     @Override
     public Builder<E> add(E... elements) {
       checkElementsNotNull(elements);
       getReadyToExpandTo(size + elements.length);
       System.arraycopy(elements, 0, contents, size, elements.length);
       size += elements.length;
       return this;
     }
     
     @CanIgnoreReturnValue
     @Override
     public Builder<E> addAll(Iterable<? extends E> elements) {
       if (elements instanceof Collection) {
         Collection<?> collection = (Collection<?>) elements;
         getReadyToExpandTo(size + collection.size());
+        if (collection instanceof ImmutableCollection) {
+          ImmutableCollection<?> immutableCollection = (ImmutableCollection<?>) collection;
+          size = immutableCollection.copyIntoArray(contents, size);
+          return this;
+        }
       }
       super.addAll(elements);
       return this;
     }
   }
 }
