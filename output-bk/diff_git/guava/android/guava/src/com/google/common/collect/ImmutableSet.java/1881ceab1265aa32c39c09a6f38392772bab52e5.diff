diff --git a/android/guava/src/com/google/common/collect/ImmutableSet.java b/android/guava/src/com/google/common/collect/ImmutableSet.java
index 48f8bbc34..ba7defd15 100644
--- a/android/guava/src/com/google/common/collect/ImmutableSet.java
+++ b/android/guava/src/com/google/common/collect/ImmutableSet.java
@@ -306,100 +306,105 @@ public abstract class ImmutableSet<E> extends ImmutableCollection<E> implements
   ImmutableSet() {}
 
   /** Returns {@code true} if the {@code hashCode()} method runs quickly. */
   boolean isHashCodeFast() {
     return false;
   }
 
   @Override
   public boolean equals(@NullableDecl Object object) {
     if (object == this) {
       return true;
     } else if (object instanceof ImmutableSet
         && isHashCodeFast()
         && ((ImmutableSet<?>) object).isHashCodeFast()
         && hashCode() != object.hashCode()) {
       return false;
     }
     return Sets.equalsImpl(this, object);
   }
 
   @Override
   public int hashCode() {
     return Sets.hashCodeImpl(this);
   }
 
   // This declaration is needed to make Set.iterator() and
   // ImmutableCollection.iterator() consistent.
   @Override
   public abstract UnmodifiableIterator<E> iterator();
 
   @LazyInit @NullableDecl @RetainedWith private transient ImmutableList<E> asList;
 
   @Override
   public ImmutableList<E> asList() {
     ImmutableList<E> result = asList;
     return (result == null) ? asList = createAsList() : result;
   }
 
   ImmutableList<E> createAsList() {
     return ImmutableList.asImmutableList(toArray());
   }
 
   abstract static class Indexed<E> extends ImmutableSet<E> {
     abstract E get(int index);
 
     @Override
     public UnmodifiableIterator<E> iterator() {
       return asList().iterator();
     }
 
+    @Override
+    int copyIntoArray(Object[] dst, int offset) {
+      return asList().copyIntoArray(dst, offset);
+    }
+
     @Override
     ImmutableList<E> createAsList() {
       return new ImmutableList<E>() {
         @Override
         public E get(int index) {
           return Indexed.this.get(index);
         }
 
         @Override
         boolean isPartialView() {
           return Indexed.this.isPartialView();
         }
 
         @Override
         public int size() {
           return Indexed.this.size();
         }
       };
     }
   }
 
   /*
    * This class is used to serialize all ImmutableSet instances, except for
    * ImmutableEnumSet/ImmutableSortedSet, regardless of implementation type. It
    * captures their "logical contents" and they are reconstructed using public
    * static factories. This is necessary to ensure that the existence of a
    * particular implementation type is an implementation detail.
    */
   private static class SerializedForm implements Serializable {
     final Object[] elements;
 
     SerializedForm(Object[] elements) {
       this.elements = elements;
     }
 
     Object readResolve() {
       return copyOf(elements);
     }
 
     private static final long serialVersionUID = 0;
   }
 
   @Override
   Object writeReplace() {
     return new SerializedForm(toArray());
   }
 
   /**
    * Returns a new builder. The generated builder is equivalent to the builder created by the {@link
    * Builder} constructor.
