diff --git a/android/guava/src/com/google/common/collect/ImmutableMultimap.java b/android/guava/src/com/google/common/collect/ImmutableMultimap.java
index fbce4bbc5..4b3e8472e 100644
--- a/android/guava/src/com/google/common/collect/ImmutableMultimap.java
+++ b/android/guava/src/com/google/common/collect/ImmutableMultimap.java
@@ -572,100 +572,118 @@ public abstract class ImmutableMultimap<K, V> extends AbstractMultimap<K, V>
 
   /**
    * Returns an immutable multiset containing all the keys in this multimap, in the same order and
    * with the same frequencies as they appear in this multimap; to get only a single occurrence of
    * each key, use {@link #keySet}.
    */
   @Override
   public ImmutableMultiset<K> keys() {
     return (ImmutableMultiset<K>) super.keys();
   }
 
   @Override
   ImmutableMultiset<K> createKeys() {
     return new Keys();
   }
 
   @SuppressWarnings("serial") // Uses writeReplace, not default serialization
   @WeakOuter
   class Keys extends ImmutableMultiset<K> {
     @Override
     public boolean contains(@NullableDecl Object object) {
       return containsKey(object);
     }
 
     @Override
     public int count(@NullableDecl Object element) {
       Collection<V> values = map.get(element);
       return (values == null) ? 0 : values.size();
     }
 
     @Override
     public ImmutableSet<K> elementSet() {
       return keySet();
     }
 
     @Override
     public int size() {
       return ImmutableMultimap.this.size();
     }
 
     @Override
     Multiset.Entry<K> getEntry(int index) {
       Map.Entry<K, ? extends Collection<V>> entry = map.entrySet().asList().get(index);
       return Multisets.immutableEntry(entry.getKey(), entry.getValue().size());
     }
 
     @Override
     boolean isPartialView() {
       return true;
     }
+
+    // We can't label this with @Override, because it doesn't override anything
+    // in the GWT emulated version.
+    Object writeReplace() {
+      return new KeysSerializedForm(ImmutableMultimap.this);
+    }
+  }
+  
+  private static final class KeysSerializedForm implements Serializable {
+    final ImmutableMultimap<?, ?> multimap;
+
+    KeysSerializedForm(ImmutableMultimap<?, ?> multimap) {
+      this.multimap = multimap;
+    }
+
+    Object readResolve() {
+      return multimap.keys();
+    }
   }
 
   /**
    * Returns an immutable collection of the values in this multimap. Its iterator traverses the
    * values for the first key, the values for the second key, and so on.
    */
   @Override
   public ImmutableCollection<V> values() {
     return (ImmutableCollection<V>) super.values();
   }
 
   @Override
   ImmutableCollection<V> createValues() {
     return new Values<>(this);
   }
 
   @Override
   UnmodifiableIterator<V> valueIterator() {
     return new Itr<V>() {
       @Override
       V output(K key, V value) {
         return value;
       }
     };
   }
 
   private static final class Values<K, V> extends ImmutableCollection<V> {
     @Weak private final transient ImmutableMultimap<K, V> multimap;
 
     Values(ImmutableMultimap<K, V> multimap) {
       this.multimap = multimap;
     }
 
     @Override
     public boolean contains(@NullableDecl Object object) {
       return multimap.containsValue(object);
     }
 
     @Override
     public UnmodifiableIterator<V> iterator() {
       return multimap.valueIterator();
     }
 
     @GwtIncompatible // not present in emulated superclass
     @Override
     int copyIntoArray(Object[] dst, int offset) {
       for (ImmutableCollection<V> valueCollection : multimap.map.values()) {
         offset = valueCollection.copyIntoArray(dst, offset);
       }
       return offset;
