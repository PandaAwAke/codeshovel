diff --git a/android/guava/src/com/google/common/collect/AbstractMapBasedMultiset.java b/android/guava/src/com/google/common/collect/AbstractMapBasedMultiset.java
index ad3945249..9949cfabb 100644
--- a/android/guava/src/com/google/common/collect/AbstractMapBasedMultiset.java
+++ b/android/guava/src/com/google/common/collect/AbstractMapBasedMultiset.java
@@ -1,250 +1,258 @@
 /*
  * Copyright (C) 2007 The Guava Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 package com.google.common.collect;
 
 import static com.google.common.base.Preconditions.checkArgument;
-import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.collect.CollectPreconditions.checkNonnegative;
-import static com.google.common.collect.CollectPreconditions.checkRemove;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
 import com.google.common.primitives.Ints;
 import com.google.errorprone.annotations.CanIgnoreReturnValue;
-import java.io.InvalidObjectException;
-import java.io.ObjectStreamException;
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
 import java.io.Serializable;
 import java.util.ConcurrentModificationException;
 import java.util.Iterator;
-import java.util.Set;
-import org.checkerframework.checker.nullness.compatqual.MonotonicNonNullDecl;
+import java.util.NoSuchElementException;
 import org.checkerframework.checker.nullness.compatqual.NullableDecl;
 
 /**
  * Basic implementation of {@code Multiset<E>} backed by an instance of {@code
  * AbstractObjectCountMap<E>}.
  *
  * <p>For serialization to work, the subclass must specify explicit {@code readObject} and {@code
  * writeObject} methods.
  *
  * @author Kevin Bourrillion
  */
 @GwtCompatible(emulated = true)
 abstract class AbstractMapBasedMultiset<E> extends AbstractMultiset<E> implements Serializable {
-  transient AbstractObjectCountMap<E> backingMap;
 
-  /*
-   * Cache the size for efficiency. Using a long lets us avoid the need for
-   * overflow checking and ensures that size() will function correctly even if
-   * the multiset had once been larger than Integer.MAX_VALUE.
-   */
-  private transient long size;
+  transient ObjectCountHashMap<E> backingMap;
+  transient long size;
 
-  /** Standard constructor. */
-  protected AbstractMapBasedMultiset(AbstractObjectCountMap<E> backingMap) {
-    this.backingMap = checkNotNull(backingMap);
-    this.size = super.size();
+  AbstractMapBasedMultiset(int distinctElements) {
+    init(distinctElements);
   }
 
-  /** Used during deserialization only. The backing map must be empty. */
-  void setBackingMap(AbstractObjectCountMap<E> backingMap) {
-    this.backingMap = backingMap;
+  abstract void init(int distinctElements);
+
+  @Override
+  public final int count(@NullableDecl Object element) {
+    return backingMap.get(element);
   }
 
-  // Required Implementations
+  // Optional Operations - Modification Operations
 
   /**
    * {@inheritDoc}
    *
-   * <p>Invoking {@link Multiset.Entry#getCount} on an entry in the returned set always returns the
-   * current count of that element in the multiset, as opposed to the count at the time the entry
-   * was retrieved.
+   * @throws IllegalArgumentException if the call would result in more than {@link
+   *     Integer#MAX_VALUE} occurrences of {@code element} in this multiset.
    */
+  @CanIgnoreReturnValue
   @Override
-  public Set<Multiset.Entry<E>> createEntrySet() {
-    return new EntrySet();
-  }
-
-  @Override
-  Iterator<Entry<E>> entryIterator() {
-    final Iterator<Entry<E>> backingEntries = backingMap.entrySet().iterator();
-    return new Iterator<Multiset.Entry<E>>() {
-      @NullableDecl Entry<E> toRemove;
-      boolean canRemove;
-
-      @Override
-      public boolean hasNext() {
-        return backingEntries.hasNext();
-      }
-
-      @Override
-      public Multiset.Entry<E> next() {
-        final Entry<E> mapEntry = backingEntries.next();
-        toRemove = mapEntry;
-        canRemove = true;
-        return mapEntry;
-      }
-
-      @Override
-      public void remove() {
-        checkRemove(canRemove);
-        size -= toRemove.getCount();
-        backingEntries.remove();
-        canRemove = false;
-        toRemove = null;
-      }
-    };
+  public final int add(@NullableDecl E element, int occurrences) {
+    if (occurrences == 0) {
+      return count(element);
+    }
+    checkArgument(occurrences > 0, "occurrences cannot be negative: %s", occurrences);
+    int entryIndex = backingMap.indexOf(element);
+    if (entryIndex == -1) {
+      backingMap.put(element, occurrences);
+      size += occurrences;
+      return 0;
+    }
+    int oldCount = backingMap.getValue(entryIndex);
+    long newCount = (long) oldCount + (long) occurrences;
+    checkArgument(newCount <= Integer.MAX_VALUE, "too many occurrences: %s", newCount);
+    backingMap.setValue(entryIndex, (int) newCount);
+    size += occurrences;
+    return oldCount;
   }
 
+  @CanIgnoreReturnValue
   @Override
-  public void clear() {
-    backingMap.clear();
-    size = 0L;
+  public final int remove(@NullableDecl Object element, int occurrences) {
+    if (occurrences == 0) {
+      return count(element);
+    }
+    checkArgument(occurrences > 0, "occurrences cannot be negative: %s", occurrences);
+    int entryIndex = backingMap.indexOf(element);
+    if (entryIndex == -1) {
+      return 0;
+    }
+    int oldCount = backingMap.getValue(entryIndex);
+    int numberRemoved;
+    if (oldCount > occurrences) {
+      numberRemoved = occurrences;
+      backingMap.setValue(entryIndex, oldCount - occurrences);
+    } else {
+      numberRemoved = oldCount;
+      backingMap.removeEntry(entryIndex);
+    }
+    size -= numberRemoved;
+    return oldCount;
   }
 
+  @CanIgnoreReturnValue
   @Override
-  int distinctElements() {
-    return backingMap.size();
+  public final int setCount(@NullableDecl E element, int count) {
+    checkNonnegative(count, "count");
+    int oldCount = (count == 0) ? backingMap.remove(element) : backingMap.put(element, count);
+    size += (count - oldCount);
+    return oldCount;
   }
 
-  // Optimizations - Query Operations
-
   @Override
-  public int size() {
-    return Ints.saturatedCast(size);
+  public final boolean setCount(@NullableDecl E element, int oldCount, int newCount) {
+    checkNonnegative(oldCount, "oldCount");
+    checkNonnegative(newCount, "newCount");
+    int entryIndex = backingMap.indexOf(element);
+    if (entryIndex == -1) {
+      if (oldCount != 0) {
+        return false;
+      }
+      if (newCount > 0) {
+        backingMap.put(element, newCount);
+        size += newCount;
+      }
+      return true;
+    }
+    int actualOldCount = backingMap.getValue(entryIndex);
+    if (actualOldCount != oldCount) {
+      return false;
+    }
+    if (newCount == 0) {
+      backingMap.removeEntry(entryIndex);
+      size -= oldCount;
+    } else {
+      backingMap.setValue(entryIndex, newCount);
+      size += newCount - oldCount;
+    }
+    return true;
   }
 
   @Override
-  public Iterator<E> iterator() {
-    return new MapBasedMultisetIterator();
+  public final void clear() {
+    backingMap.clear();
+    size = 0;
   }
 
-  /*
-   * Not subclassing AbstractMultiset$MultisetIterator because next() needs to
-   * retrieve the Map.Entry<E, Count> entry, which can then be used for
-   * a more efficient remove() call.
+  /**
+   * Skeleton of per-entry iterators. We could push this down and win a few bytes, but it's complex
+   * enough it's not especially worth it.
    */
-  private class MapBasedMultisetIterator implements Iterator<E> {
-    final Iterator<Entry<E>> entryIterator;
-    @MonotonicNonNullDecl Entry<E> currentEntry;
-    int occurrencesLeft = 0;
-    boolean canRemove = false;
-
-    MapBasedMultisetIterator() {
-      this.entryIterator = backingMap.entrySet().iterator();
+  abstract class Itr<T> implements Iterator<T> {
+    int entryIndex = backingMap.firstIndex();
+    int toRemove = -1;
+    int expectedModCount = backingMap.modCount;
+
+    abstract T result(int entryIndex);
+
+    private void checkForConcurrentModification() {
+      if (backingMap.modCount != expectedModCount) {
+        throw new ConcurrentModificationException();
+      }
     }
 
     @Override
     public boolean hasNext() {
-      return occurrencesLeft > 0 || entryIterator.hasNext();
+      checkForConcurrentModification();
+      return entryIndex >= 0;
     }
 
     @Override
-    public E next() {
-      if (occurrencesLeft == 0) {
-        currentEntry = entryIterator.next();
-        occurrencesLeft = currentEntry.getCount();
+    public T next() {
+      if (!hasNext()) {
+        throw new NoSuchElementException();
       }
-      occurrencesLeft--;
-      canRemove = true;
-      return currentEntry.getElement();
+      T result = result(entryIndex);
+      toRemove = entryIndex;
+      entryIndex = backingMap.nextIndex(entryIndex);
+      return result;
     }
 
     @Override
     public void remove() {
-      checkRemove(canRemove);
-      int frequency = currentEntry.getCount();
-      if (frequency <= 0) {
-        throw new ConcurrentModificationException();
-      }
-      if (frequency == 1) {
-        entryIterator.remove();
-      } else {
-        ((ObjectCountHashMap.MapEntry) currentEntry).setCount(frequency - 1);
-      }
-      size--;
-      canRemove = false;
+      checkForConcurrentModification();
+      CollectPreconditions.checkRemove(toRemove != -1);
+      size -= backingMap.removeEntry(toRemove);
+      entryIndex = backingMap.nextIndexAfterRemove(entryIndex, toRemove);
+      toRemove = -1;
+      expectedModCount = backingMap.modCount;
     }
   }
 
   @Override
-  public int count(@NullableDecl Object element) {
-    return backingMap.get(element);
+  final Iterator<E> elementIterator() {
+    return new Itr<E>() {
+      @Override
+      E result(int entryIndex) {
+        return backingMap.getKey(entryIndex);
+      }
+    };
   }
 
-  // Optional Operations - Modification Operations
+  @Override
+  final Iterator<Entry<E>> entryIterator() {
+    return new Itr<Entry<E>>() {
+      @Override
+      Entry<E> result(int entryIndex) {
+        return backingMap.getEntry(entryIndex);
+      }
+    };
+  }
 
-  /**
-   * {@inheritDoc}
-   *
-   * @throws IllegalArgumentException if the call would result in more than {@link
-   *     Integer#MAX_VALUE} occurrences of {@code element} in this multiset.
-   */
-  @CanIgnoreReturnValue
   @Override
-  public int add(@NullableDecl E element, int occurrences) {
-    if (occurrences == 0) {
-      return count(element);
-    }
-    checkArgument(occurrences > 0, "occurrences cannot be negative: %s", occurrences);
-    int oldCount = backingMap.get(element);
-    long newCount = (long) oldCount + (long) occurrences;
-    checkArgument(newCount <= Integer.MAX_VALUE, "too many occurrences: %s", newCount);
-    backingMap.put(element, (int) newCount);
-    size += occurrences;
-    return oldCount;
+  final int distinctElements() {
+    return backingMap.size();
   }
 
-  @CanIgnoreReturnValue
   @Override
-  public int remove(@NullableDecl Object element, int occurrences) {
-    if (occurrences == 0) {
-      return count(element);
-    }
-    checkArgument(occurrences > 0, "occurrences cannot be negative: %s", occurrences);
-    int oldCount = backingMap.get(element);
-    int numberRemoved;
-    if (oldCount > occurrences) {
-      numberRemoved = occurrences;
-      backingMap.put((E) element, oldCount - occurrences);
-    } else {
-      numberRemoved = oldCount;
-      backingMap.remove(element);
-    }
-    size -= numberRemoved;
-    return oldCount;
+  public final Iterator<E> iterator() {
+    return Multisets.iteratorImpl(this);
   }
 
-  // Roughly a 33% performance improvement over AbstractMultiset.setCount().
-  @CanIgnoreReturnValue
   @Override
-  public int setCount(@NullableDecl E element, int count) {
-    checkNonnegative(count, "count");
-    int oldCount = (count == 0) ? backingMap.remove(element) : backingMap.put(element, count);
-    size += (count - oldCount);
-    return oldCount;
+  public final int size() {
+    return Ints.saturatedCast(size);
+  }
+
+  /**
+   * @serialData the number of distinct elements, the first element, its count, the second element,
+   *     its count, and so on
+   */
+  @GwtIncompatible // java.io.ObjectOutputStream
+  private void writeObject(ObjectOutputStream stream) throws IOException {
+    stream.defaultWriteObject();
+    Serialization.writeMultiset(this, stream);
   }
 
-  // Don't allow default serialization.
-  @GwtIncompatible // java.io.ObjectStreamException
-  private void readObjectNoData() throws ObjectStreamException {
-    throw new InvalidObjectException("Stream data required");
+  @GwtIncompatible // java.io.ObjectInputStream
+  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {
+    stream.defaultReadObject();
+    int distinctElements = Serialization.readCount(stream);
+    init(ObjectCountHashMap.DEFAULT_SIZE);
+    Serialization.populateMultiset(this, stream, distinctElements);
   }
 
-  @GwtIncompatible // not needed in emulated source.
-  private static final long serialVersionUID = -2250766705698539974L;
+  @GwtIncompatible // Not needed in emulated source.
+  private static final long serialVersionUID = 0;
 }
