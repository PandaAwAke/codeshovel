diff --git a/android/guava/src/com/google/common/base/MoreObjects.java b/android/guava/src/com/google/common/base/MoreObjects.java
index eb4dac772..254286e59 100644
--- a/android/guava/src/com/google/common/base/MoreObjects.java
+++ b/android/guava/src/com/google/common/base/MoreObjects.java
@@ -6,101 +6,107 @@
  *
  * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License
  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
 
 package com.google.common.base;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.errorprone.annotations.CanIgnoreReturnValue;
 import java.util.Arrays;
 import javax.annotation.Nullable;
 
 /**
  * Helper functions that operate on any {@code Object}, and are not already provided in
  * {@link java.util.Objects}.
  *
  * <p>See the Guava User Guide on
  * <a href="https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained">writing
  * {@code Object} methods with {@code MoreObjects}</a>.
  *
  * @author Laurence Gonsalves
  * @since 18.0 (since 2.0 as {@code Objects})
  */
 @GwtCompatible
 public final class MoreObjects {
   /**
    * Returns the first of two given parameters that is not {@code null}, if either is, or otherwise
    * throws a {@link NullPointerException}.
    *
    * <p>To find the first non-null element in an iterable, use {@code
    * Iterables.find(iterable, Predicates.notNull())}. For varargs, use {@code
    * Iterables.find(Arrays.asList(a, b, c, ...), Predicates.notNull())}, static importing as
    * necessary.
    *
    * <p><b>Note:</b> if {@code first} is represented as an {@link Optional}, this can be
    * accomplished with {@link Optional#or(Object) first.or(second)}. That approach also allows for
    * lazy evaluation of the fallback instance, using {@link Optional#or(Supplier)
    * first.or(supplier)}.
    *
    * @return {@code first} if it is non-null; otherwise {@code second} if it is non-null
    * @throws NullPointerException if both {@code first} and {@code second} are null
    * @since 18.0 (since 3.0 as {@code Objects.firstNonNull()}).
    */
   public static <T> T firstNonNull(@Nullable T first, @Nullable T second) {
-    return first != null ? first : checkNotNull(second);
+    if (first != null) {
+      return first;
+    }
+    if (second != null) {
+      return second;
+    }
+    throw new NullPointerException("Both parameters are null");
   }
 
   /**
    * Creates an instance of {@link ToStringHelper}.
    *
    * <p>This is helpful for implementing {@link Object#toString()}. Specification by example:
    *
    * <pre>{@code
    * // Returns "ClassName{}"
    * MoreObjects.toStringHelper(this)
    *     .toString();
    *
    * // Returns "ClassName{x=1}"
    * MoreObjects.toStringHelper(this)
    *     .add("x", 1)
    *     .toString();
    *
    * // Returns "MyObject{x=1}"
    * MoreObjects.toStringHelper("MyObject")
    *     .add("x", 1)
    *     .toString();
    *
    * // Returns "ClassName{x=1, y=foo}"
    * MoreObjects.toStringHelper(this)
    *     .add("x", 1)
    *     .add("y", "foo")
    *     .toString();
    *
    * // Returns "ClassName{x=1}"
    * MoreObjects.toStringHelper(this)
    *     .omitNullValues()
    *     .add("x", 1)
    *     .add("y", null)
    *     .toString();
    * }</pre>
    *
    * <p>Note that in GWT, class names are often obfuscated.
    *
    * @param self the object to generate the string for (typically {@code this}), used only for its
    *     class name
    * @since 18.0 (since 2.0 as {@code Objects.toStringHelper()}).
    */
   public static ToStringHelper toStringHelper(Object self) {
     return new ToStringHelper(self.getClass().getSimpleName());
   }
 
   /**
    * Creates an instance of {@link ToStringHelper} in the same manner as
    * {@link #toStringHelper(Object)}, but using the simple name of {@code clazz} instead of using an
    * instance's {@link Object#getClass()}.
@@ -327,58 +333,61 @@ public final class MoreObjects {
      */
     @Override
     public String toString() {
       // create a copy to keep it consistent in case value changes
       boolean omitNullValuesSnapshot = omitNullValues;
       String nextSeparator = "";
       StringBuilder builder = new StringBuilder(32).append(className).append('{');
       for (ValueHolder valueHolder = holderHead.next;
           valueHolder != null;
           valueHolder = valueHolder.next) {
         Object value = valueHolder.value;
         if (!omitNullValuesSnapshot || value != null) {
           builder.append(nextSeparator);
           nextSeparator = ", ";
 
           if (valueHolder.name != null) {
             builder.append(valueHolder.name).append('=');
           }
           if (value != null && value.getClass().isArray()) {
             Object[] objectArray = {value};
             String arrayString = Arrays.deepToString(objectArray);
             builder.append(arrayString, 1, arrayString.length() - 1);
           } else {
             builder.append(value);
           }
         }
       }
       return builder.append('}').toString();
     }
 
     private ValueHolder addHolder() {
       ValueHolder valueHolder = new ValueHolder();
       holderTail = holderTail.next = valueHolder;
       return valueHolder;
     }
 
     private ToStringHelper addHolder(@Nullable Object value) {
       ValueHolder valueHolder = addHolder();
       valueHolder.value = value;
       return this;
     }
 
     private ToStringHelper addHolder(String name, @Nullable Object value) {
       ValueHolder valueHolder = addHolder();
       valueHolder.value = value;
       valueHolder.name = checkNotNull(name);
       return this;
     }
 
     private static final class ValueHolder {
+      @Nullable
       String name;
+      @Nullable
       Object value;
+      @Nullable
       ValueHolder next;
     }
   }
 
   private MoreObjects() {}
 }
