diff --git a/android/guava/src/com/google/common/collect/ImmutableBiMap.java b/android/guava/src/com/google/common/collect/ImmutableBiMap.java
index 14d557a9d..131f22fa8 100644
--- a/android/guava/src/com/google/common/collect/ImmutableBiMap.java
+++ b/android/guava/src/com/google/common/collect/ImmutableBiMap.java
@@ -303,62 +303,62 @@ public abstract class ImmutableBiMap<K, V> extends ImmutableMap<K, V> implements
    *
    * <p>The inverse of an {@code ImmutableBiMap} is another
    * {@code ImmutableBiMap}.
    */
   @Override
   public abstract ImmutableBiMap<V, K> inverse();
 
   /**
    * Returns an immutable set of the values in this map, in the same order they appear in {@link
    * #entrySet}.
    */
   @Override
   public ImmutableSet<V> values() {
     return inverse().keySet();
   }
 
   @Override
   final ImmutableSet<V> createValues() {
     throw new AssertionError("should never be called");
   }
 
   /**
    * Guaranteed to throw an exception and leave the bimap unmodified.
    *
    * @throws UnsupportedOperationException always
    * @deprecated Unsupported operation.
    */
   @CanIgnoreReturnValue
   @Deprecated
   @Override
   public V forcePut(K key, V value) {
     throw new UnsupportedOperationException();
   }
 
   /**
    * Serialized type for all ImmutableBiMap instances. It captures the logical
    * contents and they are reconstructed using public factory methods. This
    * ensures that the implementation types remain as implementation details.
    *
    * Since the bimap is immutable, ImmutableBiMap doesn't require special logic
    * for keeping the bimap and its inverse in sync during serialization, the way
    * AbstractBiMap does.
    */
   private static class SerializedForm extends ImmutableMap.SerializedForm {
     SerializedForm(ImmutableBiMap<?, ?> bimap) {
       super(bimap);
     }
 
     @Override
     Object readResolve() {
-      Builder<Object, Object> builder = new Builder<Object, Object>();
+      Builder<Object, Object> builder = new Builder<>();
       return createMap(builder);
     }
 
     private static final long serialVersionUID = 0;
   }
 
   @Override
   Object writeReplace() {
     return new SerializedForm(this);
   }
 }
