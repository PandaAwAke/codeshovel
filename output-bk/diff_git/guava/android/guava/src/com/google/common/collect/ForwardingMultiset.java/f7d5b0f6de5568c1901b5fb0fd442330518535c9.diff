diff --git a/android/guava/src/com/google/common/collect/ForwardingMultiset.java b/android/guava/src/com/google/common/collect/ForwardingMultiset.java
index 1f73c541a..9a7084f54 100644
--- a/android/guava/src/com/google/common/collect/ForwardingMultiset.java
+++ b/android/guava/src/com/google/common/collect/ForwardingMultiset.java
@@ -228,87 +228,87 @@ public abstract class ForwardingMultiset<E> extends ForwardingCollection<E> impl
   protected boolean standardSetCount(E element, int oldCount, int newCount) {
     return Multisets.setCountImpl(this, element, oldCount, newCount);
   }
 
   /**
    * A sensible implementation of {@link Multiset#elementSet} in terms of the following methods:
    * {@link ForwardingMultiset#clear}, {@link ForwardingMultiset#contains}, {@link
    * ForwardingMultiset#containsAll}, {@link ForwardingMultiset#count}, {@link
    * ForwardingMultiset#isEmpty}, the {@link Set#size} and {@link Set#iterator} methods of {@link
    * ForwardingMultiset#entrySet}, and {@link ForwardingMultiset#remove(Object, int)}. In many
    * situations, you may wish to override {@link ForwardingMultiset#elementSet} to forward to this
    * implementation or a subclass thereof.
    *
    * @since 10.0
    */
   @Beta
   protected class StandardElementSet extends Multisets.ElementSet<E> {
     /** Constructor for use by subclasses. */
     public StandardElementSet() {}
 
     @Override
     Multiset<E> multiset() {
       return ForwardingMultiset.this;
     }
 
     @Override
     public Iterator<E> iterator() {
       return Multisets.elementIterator(multiset().entrySet().iterator());
     }
   }
 
   /**
    * A sensible definition of {@link #iterator} in terms of {@link #entrySet} and {@link
    * #remove(Object)}. If you override either of these methods, you may wish to override {@link
    * #iterator} to forward to this implementation.
    *
    * @since 7.0
    */
   protected Iterator<E> standardIterator() {
     return Multisets.iteratorImpl(this);
   }
 
   /**
    * A sensible, albeit inefficient, definition of {@link #size} in terms of {@link #entrySet}. If
    * you override {@link #entrySet}, you may wish to override {@link #size} to forward to this
    * implementation.
    *
    * @since 7.0
    */
   protected int standardSize() {
-    return Multisets.sizeImpl(this);
+    return Multisets.linearTimeSizeImpl(this);
   }
 
   /**
    * A sensible, albeit inefficient, definition of {@link #equals} in terms of {@code
    * entrySet().size()} and {@link #count}. If you override either of these methods, you may wish to
    * override {@link #equals} to forward to this implementation.
    *
    * @since 7.0
    */
   protected boolean standardEquals(@NullableDecl Object object) {
     return Multisets.equalsImpl(this, object);
   }
 
   /**
    * A sensible definition of {@link #hashCode} as {@code entrySet().hashCode()} . If you override
    * {@link #entrySet}, you may wish to override {@link #hashCode} to forward to this
    * implementation.
    *
    * @since 7.0
    */
   protected int standardHashCode() {
     return entrySet().hashCode();
   }
 
   /**
    * A sensible definition of {@link #toString} as {@code entrySet().toString()} . If you override
    * {@link #entrySet}, you may wish to override {@link #toString} to forward to this
    * implementation.
    *
    * @since 7.0
    */
   @Override
   protected String standardToString() {
     return entrySet().toString();
   }
 }
