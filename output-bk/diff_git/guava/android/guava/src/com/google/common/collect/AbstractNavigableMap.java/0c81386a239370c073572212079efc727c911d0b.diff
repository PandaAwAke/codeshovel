diff --git a/android/guava/src/com/google/common/collect/AbstractNavigableMap.java b/android/guava/src/com/google/common/collect/AbstractNavigableMap.java
index 3f95eb62f..b581d2db4 100644
--- a/android/guava/src/com/google/common/collect/AbstractNavigableMap.java
+++ b/android/guava/src/com/google/common/collect/AbstractNavigableMap.java
@@ -99,80 +99,80 @@ abstract class AbstractNavigableMap<K, V> extends IteratorBasedAbstractMap<K, V>
   @Nullable
   public Entry<K, V> ceilingEntry(K key) {
     return tailMap(key, true).firstEntry();
   }
 
   @Override
   @Nullable
   public Entry<K, V> higherEntry(K key) {
     return tailMap(key, false).firstEntry();
   }
 
   @Override
   public K lowerKey(K key) {
     return Maps.keyOrNull(lowerEntry(key));
   }
 
   @Override
   public K floorKey(K key) {
     return Maps.keyOrNull(floorEntry(key));
   }
 
   @Override
   public K ceilingKey(K key) {
     return Maps.keyOrNull(ceilingEntry(key));
   }
 
   @Override
   public K higherKey(K key) {
     return Maps.keyOrNull(higherEntry(key));
   }
 
   abstract Iterator<Entry<K, V>> descendingEntryIterator();
 
   @Override
   public SortedMap<K, V> subMap(K fromKey, K toKey) {
     return subMap(fromKey, true, toKey, false);
   }
 
   @Override
   public SortedMap<K, V> headMap(K toKey) {
     return headMap(toKey, false);
   }
 
   @Override
   public SortedMap<K, V> tailMap(K fromKey) {
     return tailMap(fromKey, true);
   }
 
   @Override
   public NavigableSet<K> navigableKeySet() {
-    return new Maps.NavigableKeySet<K, V>(this);
+    return new Maps.NavigableKeySet<>(this);
   }
 
   @Override
   public Set<K> keySet() {
     return navigableKeySet();
   }
 
   @Override
   public NavigableSet<K> descendingKeySet() {
     return descendingMap().navigableKeySet();
   }
 
   @Override
   public NavigableMap<K, V> descendingMap() {
     return new DescendingMap();
   }
 
   private final class DescendingMap extends Maps.DescendingMap<K, V> {
     @Override
     NavigableMap<K, V> forward() {
       return AbstractNavigableMap.this;
     }
 
     @Override
     Iterator<Entry<K, V>> entryIterator() {
       return descendingEntryIterator();
     }
   }
 }
