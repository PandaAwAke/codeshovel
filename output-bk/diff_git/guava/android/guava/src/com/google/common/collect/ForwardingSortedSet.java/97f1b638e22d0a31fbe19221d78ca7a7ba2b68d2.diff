diff --git a/android/guava/src/com/google/common/collect/ForwardingSortedSet.java b/android/guava/src/com/google/common/collect/ForwardingSortedSet.java
index b82b690e1..de23b2fe1 100644
--- a/android/guava/src/com/google/common/collect/ForwardingSortedSet.java
+++ b/android/guava/src/com/google/common/collect/ForwardingSortedSet.java
@@ -72,102 +72,96 @@ public abstract class ForwardingSortedSet<E> extends ForwardingSet<E> implements
   @Override
   public E first() {
     return delegate().first();
   }
 
   @Override
   public SortedSet<E> headSet(E toElement) {
     return delegate().headSet(toElement);
   }
 
   @Override
   public E last() {
     return delegate().last();
   }
 
   @Override
   public SortedSet<E> subSet(E fromElement, E toElement) {
     return delegate().subSet(fromElement, toElement);
   }
 
   @Override
   public SortedSet<E> tailSet(E fromElement) {
     return delegate().tailSet(fromElement);
   }
 
   // unsafe, but worst case is a CCE is thrown, which callers will be expecting
   @SuppressWarnings("unchecked")
   private int unsafeCompare(Object o1, Object o2) {
     Comparator<? super E> comparator = comparator();
     return (comparator == null)
         ? ((Comparable<Object>) o1).compareTo(o2)
         : ((Comparator<Object>) comparator).compare(o1, o2);
   }
 
   /**
    * A sensible definition of {@link #contains} in terms of the {@code first()}
    * method of {@link #tailSet}. If you override {@link #tailSet}, you may wish
    * to override {@link #contains} to forward to this implementation.
    *
    * @since 7.0
    */
   @Override
   @Beta
   protected boolean standardContains(@Nullable Object object) {
     try {
       // any ClassCastExceptions are caught
       @SuppressWarnings("unchecked")
       SortedSet<Object> self = (SortedSet<Object>) this;
       Object ceiling = self.tailSet(object).first();
       return unsafeCompare(ceiling, object) == 0;
-    } catch (ClassCastException e) {
-      return false;
-    } catch (NoSuchElementException e) {
-      return false;
-    } catch (NullPointerException e) {
+    } catch (ClassCastException | NoSuchElementException | NullPointerException e) {
       return false;
     }
   }
 
   /**
    * A sensible definition of {@link #remove} in terms of the {@code iterator()}
    * method of {@link #tailSet}. If you override {@link #tailSet}, you may wish
    * to override {@link #remove} to forward to this implementation.
    *
    * @since 7.0
    */
   @Override
   @Beta
   protected boolean standardRemove(@Nullable Object object) {
     try {
       // any ClassCastExceptions are caught
       @SuppressWarnings("unchecked")
       SortedSet<Object> self = (SortedSet<Object>) this;
       Iterator<Object> iterator = self.tailSet(object).iterator();
       if (iterator.hasNext()) {
         Object ceiling = iterator.next();
         if (unsafeCompare(ceiling, object) == 0) {
           iterator.remove();
           return true;
         }
       }
-    } catch (ClassCastException e) {
-      return false;
-    } catch (NullPointerException e) {
+    } catch (ClassCastException | NullPointerException e) {
       return false;
     }
     return false;
   }
 
   /**
    * A sensible default implementation of {@link #subSet(Object, Object)} in
    * terms of {@link #headSet(Object)} and {@link #tailSet(Object)}. In some
    * situations, you may wish to override {@link #subSet(Object, Object)} to
    * forward to this implementation.
    *
    * @since 7.0
    */
   @Beta
   protected SortedSet<E> standardSubSet(E fromElement, E toElement) {
     return tailSet(fromElement).headSet(toElement);
   }
 }
