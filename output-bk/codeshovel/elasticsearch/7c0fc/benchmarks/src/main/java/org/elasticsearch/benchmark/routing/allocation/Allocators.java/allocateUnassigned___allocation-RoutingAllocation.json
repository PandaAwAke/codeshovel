{
  "origin": "codeshovel",
  "repositoryName": "elasticsearch",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/elasticsearch/.git",
  "startCommitName": "7c0fc209bf78e4824ca1f232b84a1dab22bc2dfa",
  "sourceFileName": "Allocators.java",
  "functionName": "allocateUnassigned",
  "functionId": "allocateUnassigned___allocation-RoutingAllocation",
  "sourceFilePath": "benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java",
  "functionStartLine": 64,
  "functionEndLine": 66,
  "changeHistory": [
    "27a760f9c19fff61f7dfaf1a7d0beaae7ff326d8",
    "2c467fd9c21cc2f79a58b6c1d412a87b83be94f3"
  ],
  "changeHistoryShort": {
    "27a760f9c19fff61f7dfaf1a7d0beaae7ff326d8": "Ymultichange(Yreturntypechange,Ybodychange)",
    "2c467fd9c21cc2f79a58b6c1d412a87b83be94f3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "27a760f9c19fff61f7dfaf1a7d0beaae7ff326d8": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "Add routing changes API to RoutingAllocation (#19992)\n\nAdds a class that records changes made to RoutingAllocation, so that at the end of the allocation round other values can be more easily derived based on these changes. Most notably, it:\r\n\r\n- replaces the explicit boolean flag that is passed around everywhere to denote changes to the routing table. The boolean flag is automatically updated now when changes actually occur, preventing issues where it got out of sync with actual changes to the routing table.\r\n- records actual changes made to RoutingNodes so that primary term and in-sync allocation ids, which are part of index metadata, can be efficiently updated just by looking at the shards that were actually changed.",
      "commitDate": 1471423619000,
      "commitName": "27a760f9c19fff61f7dfaf1a7d0beaae7ff326d8",
      "commitAuthor": "Yannick Welsch",
      "subchanges": [
        "Yreturntypechange",
        "Ybodychange"
      ]
    },
    "2c467fd9c21cc2f79a58b6c1d412a87b83be94f3": {
      "type": "Yintroduced",
      "commitMessage": "Add microbenchmarking infrastructure (#18891)\n\nWith this commit we add a benchmarks project that contains the necessary build\r\ninfrastructure and an example benchmark. It is added as a separate project to avoid\r\ninterfering with the regular build too much (especially sanity checks) and to keep\r\nthe microbenchmarks isolated.\r\n\r\nMicrobenchmarks are generated with `gradle :benchmarks:jmhJar` and can be run with\r\n` gradle :benchmarks:jmh`.\r\n\r\nWe intentionally do not use the\r\n[jmh-gradle-plugin](https://github.com/melix/jmh-gradle-plugin) as it causes all\r\nsorts of problems (dependencies are not properly excluded, not all JMH parameters\r\ncan be set) and it adds another abstraction layer that is not needed.\r\n\r\nCloses #18242",
      "commitDate": 1466002082000,
      "commitName": "2c467fd9c21cc2f79a58b6c1d412a87b83be94f3",
      "commitAuthor": "Daniel Mitterdorfer"
    }
  }
}