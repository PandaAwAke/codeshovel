{
  "origin": "codeshovel",
  "repositoryName": "elasticsearch",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/elasticsearch/.git",
  "startCommitName": "7c0fc209bf78e4824ca1f232b84a1dab22bc2dfa",
  "sourceFileName": "MetricsCalculator.java",
  "functionName": "calculateMetricsPerOperation",
  "functionId": "calculateMetricsPerOperation___samplesPerOperation-Map__String,List__Sample____",
  "sourceFilePath": "client/benchmark/src/main/java/org/elasticsearch/client/benchmark/metrics/MetricsCalculator.java",
  "functionStartLine": 48,
  "functionEndLine": 85,
  "changeHistory": [
    "7b81c4ca59fb209cecc87b3a4ea482faa3c88518",
    "c33f85bc37bbfee87158738f538d380c0cc31d13"
  ],
  "changeHistoryShort": {
    "7b81c4ca59fb209cecc87b3a4ea482faa3c88518": "Ybodychange",
    "c33f85bc37bbfee87158738f538d380c0cc31d13": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7b81c4ca59fb209cecc87b3a4ea482faa3c88518": {
      "type": "Ybodychange",
      "commitMessage": "Add client-benchmark-noop-api-plugin to stress clients even more in benchmarks (#20103)\n\n",
      "commitDate": 1472195147000,
      "commitName": "7b81c4ca59fb209cecc87b3a4ea482faa3c88518",
      "commitAuthor": "Daniel Mitterdorfer",
      "commitDateOld": 1469523682000,
      "commitNameOld": "c33f85bc37bbfee87158738f538d380c0cc31d13",
      "commitAuthorOld": "Daniel Mitterdorfer",
      "daysBetweenCommits": 30.92,
      "commitsBetweenForRepo": 437,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,38 @@\n     private static List\u003cMetrics\u003e calculateMetricsPerOperation(Map\u003cString, List\u003cSample\u003e\u003e samplesPerOperation) {\n         List\u003cMetrics\u003e metrics \u003d new ArrayList\u003c\u003e();\n         for (Map.Entry\u003cString, List\u003cSample\u003e\u003e operationAndMetrics : samplesPerOperation.entrySet()) {\n             List\u003cSample\u003e samples \u003d operationAndMetrics.getValue();\n             double[] serviceTimes \u003d new double[samples.size()];\n+            double[] latencies \u003d new double[samples.size()];\n             int it \u003d 0;\n             long firstStart \u003d Long.MAX_VALUE;\n             long latestEnd \u003d Long.MIN_VALUE;\n             for (Sample sample : samples) {\n                 firstStart \u003d Math.min(sample.getStartTimestamp(), firstStart);\n                 latestEnd \u003d Math.max(sample.getStopTimestamp(), latestEnd);\n-                serviceTimes[it++] \u003d sample.getServiceTime();\n+                serviceTimes[it] \u003d sample.getServiceTime();\n+                latencies[it] \u003d sample.getLatency();\n+                it++;\n             }\n \n             metrics.add(new Metrics(operationAndMetrics.getKey(),\n                 samples.stream().filter((r) -\u003e r.isSuccess()).count(),\n                 samples.stream().filter((r) -\u003e !r.isSuccess()).count(),\n                 // throughput calculation is based on the total (Wall clock) time it took to generate all samples\n                 calculateThroughput(samples.size(), latestEnd - firstStart),\n                 // convert ns -\u003e ms without losing precision\n+                StatUtils.percentile(serviceTimes, 50.0d) / TimeUnit.MILLISECONDS.toNanos(1L),\n                 StatUtils.percentile(serviceTimes, 90.0d) / TimeUnit.MILLISECONDS.toNanos(1L),\n                 StatUtils.percentile(serviceTimes, 95.0d) / TimeUnit.MILLISECONDS.toNanos(1L),\n                 StatUtils.percentile(serviceTimes, 99.0d) / TimeUnit.MILLISECONDS.toNanos(1L),\n                 StatUtils.percentile(serviceTimes, 99.9d) / TimeUnit.MILLISECONDS.toNanos(1L),\n-                StatUtils.percentile(serviceTimes, 99.99d) / TimeUnit.MILLISECONDS.toNanos(1L)));\n+                StatUtils.percentile(serviceTimes, 99.99d) / TimeUnit.MILLISECONDS.toNanos(1L),\n+                StatUtils.percentile(latencies, 50.0d) / TimeUnit.MILLISECONDS.toNanos(1L),\n+                StatUtils.percentile(latencies, 90.0d) / TimeUnit.MILLISECONDS.toNanos(1L),\n+                StatUtils.percentile(latencies, 95.0d) / TimeUnit.MILLISECONDS.toNanos(1L),\n+                StatUtils.percentile(latencies, 99.0d) / TimeUnit.MILLISECONDS.toNanos(1L),\n+                StatUtils.percentile(latencies, 99.9d) / TimeUnit.MILLISECONDS.toNanos(1L),\n+                StatUtils.percentile(latencies, 99.99d) / TimeUnit.MILLISECONDS.toNanos(1L)));\n         }\n         return metrics;\n     }\n\\ No newline at end of file\n"
    },
    "c33f85bc37bbfee87158738f538d380c0cc31d13": {
      "type": "Yintroduced",
      "commitMessage": "Add client benchmark\n\nWith this commit we add a benchmark for the new REST client and the\nexisting transport client.\n\nCloses #19281\n",
      "commitDate": 1469523682000,
      "commitName": "c33f85bc37bbfee87158738f538d380c0cc31d13",
      "commitAuthor": "Daniel Mitterdorfer"
    }
  }
}