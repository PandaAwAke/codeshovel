{
  "origin": "codeshovel",
  "repositoryName": "elasticsearch",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/elasticsearch/.git",
  "startCommitName": "7c0fc209bf78e4824ca1f232b84a1dab22bc2dfa",
  "sourceFileName": "SearchAfterSortedDocQuery.java",
  "functionName": "getTopComparator",
  "functionId": "getTopComparator___fieldComparators-FieldComparator__?__[]__reverseMuls-int[]__leafReaderContext-LeafReaderContext__topDoc-int",
  "sourceFilePath": "server/src/main/java/org/apache/lucene/queries/SearchAfterSortedDocQuery.java",
  "functionStartLine": 129,
  "functionEndLine": 151,
  "changeHistory": [
    "99f88f15c5febbca2d13b5b5fda27b844153bf1a",
    "5ac5fd95ae67a8031c9764f42eb13e91ff9e0789",
    "7ab3d5d04a7c6dfef084e49587a81f7334a85cb4"
  ],
  "changeHistoryShort": {
    "99f88f15c5febbca2d13b5b5fda27b844153bf1a": "Yfilerename",
    "5ac5fd95ae67a8031c9764f42eb13e91ff9e0789": "Ybodychange",
    "7ab3d5d04a7c6dfef084e49587a81f7334a85cb4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "99f88f15c5febbca2d13b5b5fda27b844153bf1a": {
      "type": "Yfilerename",
      "commitMessage": "Rename core module to server (#28180)\n\nThis is related to #27933. It renames the core module to server. This is\r\nthe first step towards introducing an elasticsearch-core jar.",
      "commitDate": 1515695443000,
      "commitName": "99f88f15c5febbca2d13b5b5fda27b844153bf1a",
      "commitAuthor": "Tim Brooks",
      "commitDateOld": 1515688270000,
      "commitNameOld": "7d0eb3292b8f8ba27ef50dbbf38783dc68c70728",
      "commitAuthorOld": "Martijn van Groningen",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "5ac5fd95ae67a8031c9764f42eb13e91ff9e0789": {
      "type": "Ybodychange",
      "commitMessage": "Move early termination based on index sort to TopDocs collector (#27666)\n\nLucene TopDocs collector are now able to early terminate the collection\r\nbased on the index sort. This change plugs this new functionality directly in the\r\nquery phase instead of relying on a dedicated early terminating collector.\r\n",
      "commitDate": 1513843026000,
      "commitName": "5ac5fd95ae67a8031c9764f42eb13e91ff9e0789",
      "commitAuthor": "Jim Ferenczi",
      "commitDateOld": 1511877162000,
      "commitNameOld": "996990ad1f68d25a219364109e4cafde9bd8a6bb",
      "commitAuthorOld": "Adrien Grand",
      "daysBetweenCommits": 22.75,
      "commitsBetweenForRepo": 234,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     static TopComparator getTopComparator(FieldComparator\u003c?\u003e[] fieldComparators,\n                                           int[] reverseMuls,\n                                           LeafReaderContext leafReaderContext,\n                                           int topDoc) {\n         return doc -\u003e {\n             // DVs use forward iterators so we recreate the iterator for each sort field\n             // every time we need to compare a document with the \u003ccode\u003eafter\u003ccode\u003e doc.\n             // We could reuse the iterators when the comparison goes forward but\n             // this should only be called a few time per segment (binary search).\n             for (int i \u003d 0; i \u003c fieldComparators.length; i++) {\n                 LeafFieldComparator comparator \u003d  fieldComparators[i].getLeafComparator(leafReaderContext);\n                 int value \u003d reverseMuls[i] * comparator.compareTop(doc);\n                 if (value !\u003d 0) {\n                     return value \u003c 0;\n                 }\n             }\n \n-            if (topDoc \u003c\u003d doc) {\n+            if (doc \u003c\u003d topDoc) {\n                 return false;\n             }\n             return true;\n         };\n     }\n\\ No newline at end of file\n"
    },
    "7ab3d5d04a7c6dfef084e49587a81f7334a85cb4": {
      "type": "Yintroduced",
      "commitMessage": "Speed up sorted scroll when the index sort matches the search sort (#25138)\n\nSorted scroll search can use early termination when the index sort matches the scroll search sort.\r\nThe optimization can be done after the first query (which still needs to collect all documents)\r\nby applying a query that only matches documents that are greater than the last doc retrieved in the previous request.\r\nSince the index is sorted, retrieving the list of documents that are greater than the last doc\r\nonly requires a binary search on each segment.\r\nThis change introduces this new query called `SortedSearchAfterDocQuery` and apply it when possible.\r\nScrolls with this optimization will search all documents on the first request and then will early terminate each segment\r\nafter $size doc for any subsequent requests.\r\n\r\nRelates #6720",
      "commitDate": 1497252810000,
      "commitName": "7ab3d5d04a7c6dfef084e49587a81f7334a85cb4",
      "commitAuthor": "Jim Ferenczi"
    }
  }
}