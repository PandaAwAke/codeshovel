{
  "origin": "codeshovel",
  "repositoryName": "elasticsearch",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/elasticsearch/.git",
  "startCommitName": "7c0fc209bf78e4824ca1f232b84a1dab22bc2dfa",
  "sourceFileName": "CustomFieldQuery.java",
  "functionName": "convertMultiPhraseQuery",
  "functionId": "convertMultiPhraseQuery___currentPos-int__termsIdx-int[]__orig-MultiPhraseQuery__terms-Term[][]__pos-int[]__reader-IndexReader__flatQueries-Collection__Query__",
  "sourceFilePath": "server/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java",
  "functionStartLine": 100,
  "functionEndLine": 135,
  "changeHistory": [
    "99f88f15c5febbca2d13b5b5fda27b844153bf1a",
    "5596e310684c2e540d932c91690cf73a3b083465",
    "54018a5d3728e796bb93ba86431f4eb512edb524",
    "10ddd691a36fa3a8199fac8da43da540af19a697",
    "c1f2fc76c27acd6f1637993115269eae1023686b",
    "4f5591be8d704868876856a53615ee71c588b07c",
    "15a62448343fd24f8e63f43b1e4b16f50005e4a5",
    "1c513bc262efa9f76be2a957d666088998c3661a",
    "72a2416a8c6abbef318bc243a230774ff2578e71"
  ],
  "changeHistoryShort": {
    "99f88f15c5febbca2d13b5b5fda27b844153bf1a": "Yfilerename",
    "5596e310684c2e540d932c91690cf73a3b083465": "Ymultichange(Yparameterchange,Ybodychange)",
    "54018a5d3728e796bb93ba86431f4eb512edb524": "Ybodychange",
    "10ddd691a36fa3a8199fac8da43da540af19a697": "Ybodychange",
    "c1f2fc76c27acd6f1637993115269eae1023686b": "Ybodychange",
    "4f5591be8d704868876856a53615ee71c588b07c": "Ybodychange",
    "15a62448343fd24f8e63f43b1e4b16f50005e4a5": "Yfilerename",
    "1c513bc262efa9f76be2a957d666088998c3661a": "Ybodychange",
    "72a2416a8c6abbef318bc243a230774ff2578e71": "Yintroduced"
  },
  "changeHistoryDetails": {
    "99f88f15c5febbca2d13b5b5fda27b844153bf1a": {
      "type": "Yfilerename",
      "commitMessage": "Rename core module to server (#28180)\n\nThis is related to #27933. It renames the core module to server. This is\r\nthe first step towards introducing an elasticsearch-core jar.",
      "commitDate": 1515695443000,
      "commitName": "99f88f15c5febbca2d13b5b5fda27b844153bf1a",
      "commitAuthor": "Tim Brooks",
      "commitDateOld": 1515688270000,
      "commitNameOld": "7d0eb3292b8f8ba27ef50dbbf38783dc68c70728",
      "commitAuthorOld": "Martijn van Groningen",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "5596e310684c2e540d932c91690cf73a3b083465": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Upgrade to lucene-6.0.0-f0aa4fc. #17075\n",
      "commitDate": 1457938732000,
      "commitName": "5596e310684c2e540d932c91690cf73a3b083465",
      "commitAuthor": "Adrien Grand",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "54018a5d3728e796bb93ba86431f4eb512edb524": {
      "type": "Ybodychange",
      "commitMessage": "upgrade to lucene 6.0.0-snapshot-bea235f\n\nCloses #16964\n\nSquashed commit of the following:\n\ncommit a23f9d2d29220991aa498214530753d7a5a148c6\nMerge: eec9c4e 0b0a251\nAuthor: Robert Muir \u003crmuir@apache.org\u003e\nDate:   Mon Mar 7 04:12:02 2016 -0500\n\n    Merge branch \u0027master\u0027 into lucene6\n\ncommit eec9c4e5cd11e9c3e0b426f04894bb2a6dae4f21\nMerge: bc67205 675d940\nAuthor: Robert Muir \u003crmuir@apache.org\u003e\nDate:   Fri Mar 4 13:45:00 2016 -0500\n\n    Merge branch \u0027master\u0027 into lucene6\n\ncommit bc67205bdfe1526eae277ab7856fc050ecbdb7b2\nAuthor: Robert Muir \u003crmuir@apache.org\u003e\nDate:   Fri Mar 4 09:56:31 2016 -0500\n\n    fix test bug\n\ncommit a60723b007ff12d97b1810cef473bd7b553a0327\nAuthor: Simon Willnauer \u003csimonw@apache.org\u003e\nDate:   Fri Mar 4 15:35:35 2016 +0100\n\n    Fix SimpleValidateQueryIT to put braces around boosted terms\n\ncommit ae3a49d7ba7ced448d2a5262e5d8ec98671a9090\nAuthor: Simon Willnauer \u003csimonw@apache.org\u003e\nDate:   Fri Mar 4 15:27:25 2016 +0100\n\n    fix multimatchquery\n\ncommit ae23fdb88a8f6d3fb7ba60fd1aaf3fd72d899aa5\nAuthor: Simon Willnauer \u003csimonw@apache.org\u003e\nDate:   Fri Mar 4 15:20:49 2016 +0100\n\n    Rewrite DecayFunctionScoreIT to be independent of the similarity used\n\n    This test relied a lot on the term scoring and compared scores\n    that are dependent on the similarity. This commit changes the base query\n    to be a predictable constant score query.\n\ncommit 366c2d518c35d31251033f1b6f6a93f6e2ae327d\nAuthor: Simon Willnauer \u003csimonw@apache.org\u003e\nDate:   Fri Mar 4 14:06:14 2016 +0100\n\n    Fix scoring in tests due to changes to idf calculation.\n\n    Lucene 6 uses a different default similarity as well as a different\n    way to calculate IDF. In contrast to older version lucene 6 uses docCount per field\n    to calculate the IDF not the # of docs in the index to overcome the sparse field\n    cases.\n\ncommit dac99fd64ac2fa71b8d8d106fe68825e574c49f8\nAuthor: Robert Muir \u003crmuir@apache.org\u003e\nDate:   Fri Mar 4 08:21:57 2016 -0500\n\n    don\u0027t hardcoded expected termquery score\n\ncommit 6e9f340ba49ab10eed512df86d52a121aa775b0f\nAuthor: Robert Muir \u003crmuir@apache.org\u003e\nDate:   Fri Mar 4 08:04:45 2016 -0500\n\n    suppress deprecation warning until migrated to points\n\ncommit 3ac8908424b3fdad44a90a4f7bdb3eff7efd077d\nAuthor: Robert Muir \u003crmuir@apache.org\u003e\nDate:   Fri Mar 4 07:21:43 2016 -0500\n\n    Remove invalid test: all commits have IDs, and its illegal to do this.\n\ncommit c12976288124ad1a26467e7e848fb810548e7eab\nAuthor: Robert Muir \u003crmuir@apache.org\u003e\nDate:   Fri Mar 4 07:06:14 2016 -0500\n\n    don\u0027t test with unsupported back compat\n\ncommit 18bbfe76128570bc70883bf91ff4c44c82d27817\nAuthor: Robert Muir \u003crmuir@apache.org\u003e\nDate:   Fri Mar 4 07:02:18 2016 -0500\n\n    remove now invalid lucene 4 backcompat test\n\ncommit 7e730e572886f0ef2d3faba712e4256216ff01ec\nAuthor: Robert Muir \u003crmuir@apache.org\u003e\nDate:   Fri Mar 4 06:58:52 2016 -0500\n\n    remove now invalid lucene 4 backwards test\n\ncommit 244d2ab6868ba5ac9e0bcde3c2833743751a25ec\nAuthor: Robert Muir \u003crmuir@apache.org\u003e\nDate:   Fri Mar 4 06:47:23 2016 -0500\n\n    use 6.0 codec\n\ncommit 5f64d4a431a6fdaa1234adca23f154c2a1de8284\nAuthor: Robert Muir \u003crmuir@apache.org\u003e\nDate:   Fri Mar 4 06:43:08 2016 -0500\n\n    compile, javadocs, forbidden-apis, etc\n\ncommit 1f273cd62a7fe9ca8f8944acbbfc5cbdd3d81ccb\nMerge: cd33921 29e3443\nAuthor: Simon Willnauer \u003csimonw@apache.org\u003e\nDate:   Fri Mar 4 10:45:29 2016 +0100\n\n    Merge branch \u0027master\u0027 into lucene6\n\ncommit cd33921ac742ef9fb351012eff35f3c7dbda7264\nAuthor: Robert Muir \u003crmuir@apache.org\u003e\nDate:   Thu Mar 3 23:58:37 2016 -0500\n\n    fix hunspell dictionary loading\n\ncommit c7fdbd837b01f7defe9cb1c24e2ec65604b0dc96\nMerge: 4d4190f d8948ba\nAuthor: Robert Muir \u003crmuir@apache.org\u003e\nDate:   Thu Mar 3 23:41:53 2016 -0500\n\n    Merge branch \u0027master\u0027 into lucene6\n\ncommit 4d4190fd82601aaafac6b8254ccb3edf218faa34\nAuthor: Robert Muir \u003crmuir@apache.org\u003e\nDate:   Thu Mar 3 23:39:14 2016 -0500\n\n    remove nocommit\n\ncommit 77ca69e288b1a41aa9595c921ed166c272a00ea8\nAuthor: Robert Muir \u003crmuir@apache.org\u003e\nDate:   Thu Mar 3 23:38:24 2016 -0500\n\n    clean up numericutils vs legacynumericutils\n\ncommit a466d696fbaad04b647ffbc0857a9439b583d0bf\nAuthor: Robert Muir \u003crmuir@apache.org\u003e\nDate:   Thu Mar 3 23:32:43 2016 -0500\n\n    upgrade spatial4j\n\ncommit 5412c747a8cfe638bacedbc8233163cb75cc3dc5\nAuthor: Robert Muir \u003crmuir@apache.org\u003e\nDate:   Thu Mar 3 23:19:28 2016 -0500\n\n    move to 6.0.0-snapshot-8eada27\n\ncommit b32bfe924626b87e540692375ece09e7c2edb189\nAuthor: Adrien Grand \u003cjpountz@gmail.com\u003e\nDate:   Thu Mar 3 11:30:09 2016 +0100\n\n    Fix some test compile errors.\n\ncommit 6ccde35e9840b03c68d1a2cd47c7923a06edf64a\nAuthor: Adrien Grand \u003cjpountz@gmail.com\u003e\nDate:   Thu Mar 3 11:25:51 2016 +0100\n\n    Current Lucene version is 6.0.0.\n\ncommit f62e1015d931b4cc04c778298a8fa1ba65e97ad9\nAuthor: Adrien Grand \u003cjpountz@gmail.com\u003e\nDate:   Thu Mar 3 11:20:48 2016 +0100\n\n    Fix compile errors in NGramTokenFilterFactory.\n\ncommit 6837c6eabf96075f743649da9b9b52dd39611c58\nAuthor: Adrien Grand \u003cjpountz@gmail.com\u003e\nDate:   Thu Mar 3 10:50:59 2016 +0100\n\n    Fix the edge ngram tokenizer/filter.\n\ncommit ccd7f070de5efcdfbeb34b9555c65c4990bf1ba6\nAuthor: Adrien Grand \u003cjpountz@gmail.com\u003e\nDate:   Thu Mar 3 10:42:44 2016 +0100\n\n    The missing value is now accessible through a getter.\n\ncommit bd3b77f9b28e5b05daa3d49683a9922a6baf2963\nAuthor: Adrien Grand \u003cjpountz@gmail.com\u003e\nDate:   Thu Mar 3 10:41:51 2016 +0100\n\n    Remove IndexCacheableQuery.\n\ncommit 05f3091c347aeae80eeb16349ac51d2b53cf86f7\nAuthor: Adrien Grand \u003cjpountz@gmail.com\u003e\nDate:   Thu Mar 3 10:39:43 2016 +0100\n\n    Fix compilation of function_score queries.\n\ncommit 81cda79a2431ac78f56b0cc5a5765387f662d801\nAuthor: Adrien Grand \u003cjpountz@gmail.com\u003e\nDate:   Thu Mar 3 10:35:02 2016 +0100\n\n    Fix compile errors in BlendedTermQuery.\n\ncommit 70994ce8dd1eca0b995870974a38e20f26f96a7b\nAuthor: Robert Muir \u003crmuir@apache.org\u003e\nDate:   Wed Mar 2 23:33:03 2016 -0500\n\n    add bug ID\n\ncommit 29d4f1a71f36f646b5a6060bed3db019564a279d\nAuthor: Robert Muir \u003crmuir@apache.org\u003e\nDate:   Wed Mar 2 21:02:32 2016 -0500\n\n    easy .store changes\n\ncommit 5e1a1e6fd665fa455e88d3a8987362fad5f44bb1\nAuthor: Robert Muir \u003crmuir@apache.org\u003e\nDate:   Wed Mar 2 20:47:24 2016 -0500\n\n    cleanups mostly around boosting\n\ncommit 333a669ec6c305ada5645d13ed1da0e19ec1d053\nAuthor: Robert Muir \u003crmuir@apache.org\u003e\nDate:   Wed Mar 2 20:27:56 2016 -0500\n\n    more simple fixes\n\ncommit bd5cd98a1e089c866b6b4a5e159400b110140ce6\nAuthor: Robert Muir \u003crmuir@apache.org\u003e\nDate:   Wed Mar 2 19:49:38 2016 -0500\n\n    more easy fixes and removal of ancient cruft\n\ncommit a68f419ee47da5f9c9ce5b372f01d707e902474c\nAuthor: Robert Muir \u003crmuir@apache.org\u003e\nDate:   Wed Mar 2 19:35:02 2016 -0500\n\n    cutover numerics\n\ncommit 4ca5dc1fa47dd5892db00899032133318fff3116\nAuthor: Robert Muir \u003crmuir@apache.org\u003e\nDate:   Wed Mar 2 18:34:18 2016 -0500\n\n    fix some constants\n\ncommit 88710a17817086e477c6c021ec346d0534b7fb88\nAuthor: Robert Muir \u003crmuir@apache.org\u003e\nDate:   Wed Mar 2 18:14:25 2016 -0500\n\n    Add spatial-extras jar as a core dependency\n\ncommit c8cd6726583e5ce3f546ed355d4eca037164a30d\nAuthor: Robert Muir \u003crmuir@apache.org\u003e\nDate:   Wed Mar 2 18:03:33 2016 -0500\n\n    update to lucene 6 jars\n",
      "commitDate": 1457341943000,
      "commitName": "54018a5d3728e796bb93ba86431f4eb512edb524",
      "commitAuthor": "Robert Muir",
      "commitDateOld": 1450471427000,
      "commitNameOld": "4ea19995cff603ce8472e985c902dd2f8fadebee",
      "commitAuthorOld": "Ryan Ernst",
      "daysBetweenCommits": 79.52,
      "commitsBetweenForRepo": 1304,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n     private void convertMultiPhraseQuery(int currentPos, int[] termsIdx, MultiPhraseQuery orig, List\u003cTerm[]\u003e terms, int[] pos, IndexReader reader, Collection\u003cQuery\u003e flatQueries) throws IOException {\n         if (currentPos \u003d\u003d 0) {\n             // if we have more than 16 terms\n             int numTerms \u003d 0;\n             for (Term[] currentPosTerm : terms) {\n                 numTerms +\u003d currentPosTerm.length;\n             }\n             if (numTerms \u003e 16) {\n                 for (Term[] currentPosTerm : terms) {\n                     for (Term term : currentPosTerm) {\n-                        super.flatten(new TermQuery(term), reader, flatQueries, orig.getBoost());\n+                        super.flatten(new TermQuery(term), reader, flatQueries, 1F);\n                     }\n                 }\n                 return;\n             }\n         }\n         /*\n          * we walk all possible ways and for each path down the MPQ we create a PhraseQuery this is what FieldQuery supports.\n          * It seems expensive but most queries will pretty small.\n          */\n         if (currentPos \u003d\u003d terms.size()) {\n             PhraseQuery.Builder queryBuilder \u003d new PhraseQuery.Builder();\n             queryBuilder.setSlop(orig.getSlop());\n             for (int i \u003d 0; i \u003c termsIdx.length; i++) {\n                 queryBuilder.add(terms.get(i)[termsIdx[i]], pos[i]);\n             }\n             Query query \u003d queryBuilder.build();\n-            this.flatten(query, reader, flatQueries, orig.getBoost());\n+            this.flatten(query, reader, flatQueries, 1F);\n         } else {\n             Term[] t \u003d terms.get(currentPos);\n             for (int i \u003d 0; i \u003c t.length; i++) {\n                 termsIdx[currentPos] \u003d i;\n                 convertMultiPhraseQuery(currentPos+1, termsIdx, orig, terms, pos, reader, flatQueries);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "10ddd691a36fa3a8199fac8da43da540af19a697": {
      "type": "Ybodychange",
      "commitMessage": "Internal: move to lucene BoostQuery\n\nLatest version of lucene deprecated Query#setBoost and Query#getBoost which made queries effectively immutable. Those methods need to be replaced with `BoostQuery` that wraps any query that needs boosting.\n\nThis commit replaces usages of setBoost with BoostQuery and adds it to forbidden-apis for prod code.\n\nUsages of `getBoost` are only partially removed, as some will have to stay for backwards compatibility.\n\nCloses #14264\n",
      "commitDate": 1447077695000,
      "commitName": "10ddd691a36fa3a8199fac8da43da540af19a697",
      "commitAuthor": "javanna",
      "commitDateOld": 1445350186000,
      "commitNameOld": "57310fc45100ee8ecd35e038c2ab3f1d4d2874f3",
      "commitAuthorOld": "Adrien Grand",
      "daysBetweenCommits": 19.99,
      "commitsBetweenForRepo": 299,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,36 @@\n     private void convertMultiPhraseQuery(int currentPos, int[] termsIdx, MultiPhraseQuery orig, List\u003cTerm[]\u003e terms, int[] pos, IndexReader reader, Collection\u003cQuery\u003e flatQueries) throws IOException {\n         if (currentPos \u003d\u003d 0) {\n             // if we have more than 16 terms \n             int numTerms \u003d 0;\n             for (Term[] currentPosTerm : terms) {\n                 numTerms +\u003d currentPosTerm.length;\n             }\n             if (numTerms \u003e 16) {\n                 for (Term[] currentPosTerm : terms) {\n                     for (Term term : currentPosTerm) {\n                         super.flatten(new TermQuery(term), reader, flatQueries, orig.getBoost());    \n                     }\n                 }\n                 return;\n             }\n         }\n         /*\n          * we walk all possible ways and for each path down the MPQ we create a PhraseQuery this is what FieldQuery supports.\n          * It seems expensive but most queries will pretty small.\n          */\n         if (currentPos \u003d\u003d terms.size()) {\n             PhraseQuery.Builder queryBuilder \u003d new PhraseQuery.Builder();\n             queryBuilder.setSlop(orig.getSlop());\n             for (int i \u003d 0; i \u003c termsIdx.length; i++) {\n                 queryBuilder.add(terms.get(i)[termsIdx[i]], pos[i]);\n             }\n-            PhraseQuery query \u003d queryBuilder.build();\n-            query.setBoost(orig.getBoost());\n+            Query query \u003d queryBuilder.build();\n             this.flatten(query, reader, flatQueries, orig.getBoost());\n         } else {\n             Term[] t \u003d terms.get(currentPos);\n             for (int i \u003d 0; i \u003c t.length; i++) {\n                 termsIdx[currentPos] \u003d i;\n                 convertMultiPhraseQuery(currentPos+1, termsIdx, orig, terms, pos, reader, flatQueries);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "c1f2fc76c27acd6f1637993115269eae1023686b": {
      "type": "Ybodychange",
      "commitMessage": "Upgrade lucene to r1702090\n\nThe semantics of the `boost` parameter for `function_score` changed. This is\ndue to the fact that Lucene now requires that query boosts and top-level boosts\nare applied the same way.\n",
      "commitDate": 1441921003000,
      "commitName": "c1f2fc76c27acd6f1637993115269eae1023686b",
      "commitAuthor": "Robert Muir",
      "commitDateOld": 1441354561000,
      "commitNameOld": "4f5591be8d704868876856a53615ee71c588b07c",
      "commitAuthorOld": "Adrien Grand",
      "daysBetweenCommits": 6.56,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     private void convertMultiPhraseQuery(int currentPos, int[] termsIdx, MultiPhraseQuery orig, List\u003cTerm[]\u003e terms, int[] pos, IndexReader reader, Collection\u003cQuery\u003e flatQueries) throws IOException {\n         if (currentPos \u003d\u003d 0) {\n             // if we have more than 16 terms \n             int numTerms \u003d 0;\n             for (Term[] currentPosTerm : terms) {\n                 numTerms +\u003d currentPosTerm.length;\n             }\n             if (numTerms \u003e 16) {\n                 for (Term[] currentPosTerm : terms) {\n                     for (Term term : currentPosTerm) {\n-                        super.flatten(new TermQuery(term), reader, flatQueries);    \n+                        super.flatten(new TermQuery(term), reader, flatQueries, orig.getBoost());    \n                     }\n                 }\n                 return;\n             }\n         }\n         /*\n          * we walk all possible ways and for each path down the MPQ we create a PhraseQuery this is what FieldQuery supports.\n          * It seems expensive but most queries will pretty small.\n          */\n         if (currentPos \u003d\u003d terms.size()) {\n             PhraseQuery.Builder queryBuilder \u003d new PhraseQuery.Builder();\n             queryBuilder.setSlop(orig.getSlop());\n             for (int i \u003d 0; i \u003c termsIdx.length; i++) {\n                 queryBuilder.add(terms.get(i)[termsIdx[i]], pos[i]);\n             }\n             PhraseQuery query \u003d queryBuilder.build();\n             query.setBoost(orig.getBoost());\n-            this.flatten(query, reader, flatQueries);\n+            this.flatten(query, reader, flatQueries, orig.getBoost());\n         } else {\n             Term[] t \u003d terms.get(currentPos);\n             for (int i \u003d 0; i \u003c t.length; i++) {\n                 termsIdx[currentPos] \u003d i;\n                 convertMultiPhraseQuery(currentPos+1, termsIdx, orig, terms, pos, reader, flatQueries);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "4f5591be8d704868876856a53615ee71c588b07c": {
      "type": "Ybodychange",
      "commitMessage": "Fix deprecations introduced by the upgrade to Lucene 5.3\n\nThis changes construction of Phrase and Boolean queries to use the builder,\nand replaces BitDocIdSetFilter with BitSetProducer for nested and parent/child\nqueries. I had to remove the ParentIdsFilter for the case when there was a\nsingle parent as it was using the source of BitSets for parents as a regular\nFilter, which is not possible anymore now. I don\u0027t think this is an issue since\nthis case rarely occurs, and the alternative logic for when there are several\nmatching parent ids should not be much worse.\n",
      "commitDate": 1441354561000,
      "commitName": "4f5591be8d704868876856a53615ee71c588b07c",
      "commitAuthor": "Adrien Grand",
      "commitDateOld": 1433502723000,
      "commitNameOld": "15a62448343fd24f8e63f43b1e4b16f50005e4a5",
      "commitAuthorOld": "Simon Willnauer",
      "daysBetweenCommits": 90.88,
      "commitsBetweenForRepo": 1384,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,37 @@\n     private void convertMultiPhraseQuery(int currentPos, int[] termsIdx, MultiPhraseQuery orig, List\u003cTerm[]\u003e terms, int[] pos, IndexReader reader, Collection\u003cQuery\u003e flatQueries) throws IOException {\n         if (currentPos \u003d\u003d 0) {\n             // if we have more than 16 terms \n             int numTerms \u003d 0;\n             for (Term[] currentPosTerm : terms) {\n                 numTerms +\u003d currentPosTerm.length;\n             }\n             if (numTerms \u003e 16) {\n                 for (Term[] currentPosTerm : terms) {\n                     for (Term term : currentPosTerm) {\n                         super.flatten(new TermQuery(term), reader, flatQueries);    \n                     }\n                 }\n                 return;\n             }\n         }\n         /*\n          * we walk all possible ways and for each path down the MPQ we create a PhraseQuery this is what FieldQuery supports.\n          * It seems expensive but most queries will pretty small.\n          */\n         if (currentPos \u003d\u003d terms.size()) {\n-            PhraseQuery query \u003d new PhraseQuery();\n-            query.setBoost(orig.getBoost());\n-            query.setSlop(orig.getSlop());\n+            PhraseQuery.Builder queryBuilder \u003d new PhraseQuery.Builder();\n+            queryBuilder.setSlop(orig.getSlop());\n             for (int i \u003d 0; i \u003c termsIdx.length; i++) {\n-                query.add(terms.get(i)[termsIdx[i]], pos[i]);\n+                queryBuilder.add(terms.get(i)[termsIdx[i]], pos[i]);\n             }\n+            PhraseQuery query \u003d queryBuilder.build();\n+            query.setBoost(orig.getBoost());\n             this.flatten(query, reader, flatQueries);\n         } else {\n             Term[] t \u003d terms.get(currentPos);\n             for (int i \u003d 0; i \u003c t.length; i++) {\n                 termsIdx[currentPos] \u003d i;\n                 convertMultiPhraseQuery(currentPos+1, termsIdx, orig, terms, pos, reader, flatQueries);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "15a62448343fd24f8e63f43b1e4b16f50005e4a5": {
      "type": "Yfilerename",
      "commitMessage": "create core module\n",
      "commitDate": 1433502723000,
      "commitName": "15a62448343fd24f8e63f43b1e4b16f50005e4a5",
      "commitAuthor": "Simon Willnauer",
      "commitDateOld": 1433502668000,
      "commitNameOld": "7ccc193a666e2ae888e7ac93d677a2143e5e07c3",
      "commitAuthorOld": "Simon Willnauer",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "1c513bc262efa9f76be2a957d666088998c3661a": {
      "type": "Ybodychange",
      "commitMessage": "Fallback to extract terms if MultiPhraseQuery is large\n\nCurrently if MPQ is very large highlighing can take down a node\nor cause high CPU / RAM consumption. If the query grows \u003e 16 terms\nwe just extract the terms and do term by term highlighting.\n\nCloses  #3142 #3128\n",
      "commitDate": 1370510569000,
      "commitName": "1c513bc262efa9f76be2a957d666088998c3661a",
      "commitAuthor": "Simon Willnauer",
      "commitDateOld": 1366999478000,
      "commitNameOld": "8a7f81104fb4b5f9830c23a7ce101388e1cc627c",
      "commitAuthorOld": "Simon Willnauer",
      "daysBetweenCommits": 40.64,
      "commitsBetweenForRepo": 141,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,36 @@\n     private void convertMultiPhraseQuery(int currentPos, int[] termsIdx, MultiPhraseQuery orig, List\u003cTerm[]\u003e terms, int[] pos, IndexReader reader, Collection\u003cQuery\u003e flatQueries) throws IOException {\n+        if (currentPos \u003d\u003d 0) {\n+            // if we have more than 16 terms \n+            int numTerms \u003d 0;\n+            for (Term[] currentPosTerm : terms) {\n+                numTerms +\u003d currentPosTerm.length;\n+            }\n+            if (numTerms \u003e 16) {\n+                for (Term[] currentPosTerm : terms) {\n+                    for (Term term : currentPosTerm) {\n+                        super.flatten(new TermQuery(term), reader, flatQueries);    \n+                    }\n+                }\n+                return;\n+            }\n+        }\n         /*\n          * we walk all possible ways and for each path down the MPQ we create a PhraseQuery this is what FieldQuery supports.\n          * It seems expensive but most queries will pretty small.\n          */\n         if (currentPos \u003d\u003d terms.size()) {\n             PhraseQuery query \u003d new PhraseQuery();\n             query.setBoost(orig.getBoost());\n             query.setSlop(orig.getSlop());\n             for (int i \u003d 0; i \u003c termsIdx.length; i++) {\n                 query.add(terms.get(i)[termsIdx[i]], pos[i]);\n             }\n             this.flatten(query, reader, flatQueries);\n         } else {\n             Term[] t \u003d terms.get(currentPos);\n             for (int i \u003d 0; i \u003c t.length; i++) {\n                 termsIdx[currentPos] \u003d i;\n                 convertMultiPhraseQuery(currentPos+1, termsIdx, orig, terms, pos, reader, flatQueries);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "72a2416a8c6abbef318bc243a230774ff2578e71": {
      "type": "Yintroduced",
      "commitMessage": "Support MultiPhrasePrefixQuery and MultiPhraseQuery in highlighters\n\nCloses #2596\n",
      "commitDate": 1359384085000,
      "commitName": "72a2416a8c6abbef318bc243a230774ff2578e71",
      "commitAuthor": "Simon Willnauer"
    }
  }
}