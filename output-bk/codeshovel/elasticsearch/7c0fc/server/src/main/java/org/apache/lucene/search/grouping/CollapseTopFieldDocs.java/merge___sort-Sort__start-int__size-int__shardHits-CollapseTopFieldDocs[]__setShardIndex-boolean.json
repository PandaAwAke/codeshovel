{
  "origin": "codeshovel",
  "repositoryName": "elasticsearch",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/elasticsearch/.git",
  "startCommitName": "7c0fc209bf78e4824ca1f232b84a1dab22bc2dfa",
  "sourceFileName": "CollapseTopFieldDocs.java",
  "functionName": "merge",
  "functionId": "merge___sort-Sort__start-int__size-int__shardHits-CollapseTopFieldDocs[]__setShardIndex-boolean",
  "sourceFilePath": "server/src/main/java/org/apache/lucene/search/grouping/CollapseTopFieldDocs.java",
  "functionStartLine": 162,
  "functionEndLine": 241,
  "changeHistory": [
    "99f88f15c5febbca2d13b5b5fda27b844153bf1a",
    "e7e5216382a4988cba47df95ab7b2a5f9a27c695",
    "998eeb7687826e76c4c860eea7f5a72294838e68",
    "e48bc2eed71b1808e5d98960976ec60e6e722d78"
  ],
  "changeHistoryShort": {
    "99f88f15c5febbca2d13b5b5fda27b844153bf1a": "Yfilerename",
    "e7e5216382a4988cba47df95ab7b2a5f9a27c695": "Ybodychange",
    "998eeb7687826e76c4c860eea7f5a72294838e68": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "e48bc2eed71b1808e5d98960976ec60e6e722d78": "Yintroduced"
  },
  "changeHistoryDetails": {
    "99f88f15c5febbca2d13b5b5fda27b844153bf1a": {
      "type": "Yfilerename",
      "commitMessage": "Rename core module to server (#28180)\n\nThis is related to #27933. It renames the core module to server. This is\r\nthe first step towards introducing an elasticsearch-core jar.",
      "commitDate": 1515695443000,
      "commitName": "99f88f15c5febbca2d13b5b5fda27b844153bf1a",
      "commitAuthor": "Tim Brooks",
      "commitDateOld": 1515688270000,
      "commitNameOld": "7d0eb3292b8f8ba27ef50dbbf38783dc68c70728",
      "commitAuthorOld": "Martijn van Groningen",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "e7e5216382a4988cba47df95ab7b2a5f9a27c695": {
      "type": "Ybodychange",
      "commitMessage": "Make totalHits a long in CollapseTopFieldDocs.\n\nRelates to #25349.\n",
      "commitDate": 1499186151000,
      "commitName": "e7e5216382a4988cba47df95ab7b2a5f9a27c695",
      "commitAuthor": "Adrien Grand",
      "commitDateOld": 1491205844000,
      "commitNameOld": "998eeb7687826e76c4c860eea7f5a72294838e68",
      "commitAuthorOld": "Simon Willnauer",
      "daysBetweenCommits": 92.36,
      "commitsBetweenForRepo": 1161,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,80 @@\n     public static CollapseTopFieldDocs merge(Sort sort, int start, int size,\n                                              CollapseTopFieldDocs[] shardHits, boolean setShardIndex) {\n         String collapseField \u003d shardHits[0].field;\n         for (int i \u003d 1; i \u003c shardHits.length; i++) {\n             if (collapseField.equals(shardHits[i].field) \u003d\u003d false) {\n                 throw new IllegalArgumentException(\"collapse field differ across shards [\" +\n                     collapseField + \"] !\u003d [\" + shardHits[i].field + \"]\");\n             }\n         }\n         final PriorityQueue\u003cShardRef\u003e queue \u003d new MergeSortQueue(sort, shardHits);\n \n-        int totalHitCount \u003d 0;\n+        long totalHitCount \u003d 0;\n         int availHitCount \u003d 0;\n         float maxScore \u003d Float.MIN_VALUE;\n         for(int shardIDX\u003d0;shardIDX\u003cshardHits.length;shardIDX++) {\n             final CollapseTopFieldDocs shard \u003d shardHits[shardIDX];\n             // totalHits can be non-zero even if no hits were\n             // collected, when searchAfter was used:\n             totalHitCount +\u003d shard.totalHits;\n             if (shard.scoreDocs !\u003d null \u0026\u0026 shard.scoreDocs.length \u003e 0) {\n                 availHitCount +\u003d shard.scoreDocs.length;\n                 queue.add(new ShardRef(shardIDX, setShardIndex \u003d\u003d false));\n                 maxScore \u003d Math.max(maxScore, shard.getMaxScore());\n             }\n         }\n \n         if (availHitCount \u003d\u003d 0) {\n             maxScore \u003d Float.NaN;\n         }\n \n         final ScoreDoc[] hits;\n         final Object[] values;\n         if (availHitCount \u003c\u003d start) {\n             hits \u003d new ScoreDoc[0];\n             values \u003d new Object[0];\n         } else {\n             List\u003cScoreDoc\u003e hitList \u003d new ArrayList\u003c\u003e();\n             List\u003cObject\u003e collapseList \u003d new ArrayList\u003c\u003e();\n             int requestedResultWindow \u003d start + size;\n             int numIterOnHits \u003d Math.min(availHitCount, requestedResultWindow);\n             int hitUpto \u003d 0;\n             Set\u003cObject\u003e seen \u003d new HashSet\u003c\u003e();\n             while (hitUpto \u003c numIterOnHits) {\n                 if (queue.size() \u003d\u003d 0) {\n                     break;\n                 }\n                 ShardRef ref \u003d queue.top();\n                 final ScoreDoc hit \u003d shardHits[ref.shardIndex].scoreDocs[ref.hitIndex];\n                 final Object collapseValue \u003d shardHits[ref.shardIndex].collapseValues[ref.hitIndex++];\n                 if (seen.contains(collapseValue)) {\n                     if (ref.hitIndex \u003c shardHits[ref.shardIndex].scoreDocs.length) {\n                         queue.updateTop();\n                     } else {\n                         queue.pop();\n                     }\n                     continue;\n                 }\n                 seen.add(collapseValue);\n                 if (setShardIndex) {\n                     hit.shardIndex \u003d ref.shardIndex;\n                 }\n                 if (hitUpto \u003e\u003d start) {\n                     hitList.add(hit);\n                     collapseList.add(collapseValue);\n                 }\n \n                 hitUpto++;\n \n                 if (ref.hitIndex \u003c shardHits[ref.shardIndex].scoreDocs.length) {\n                     // Not done with this these TopDocs yet:\n                     queue.updateTop();\n                 } else {\n                     queue.pop();\n                 }\n             }\n             hits \u003d hitList.toArray(new ScoreDoc[0]);\n             values \u003d collapseList.toArray(new Object[0]);\n         }\n         return new CollapseTopFieldDocs(collapseField, totalHitCount, hits, sort.getSort(), values, maxScore);\n     }\n\\ No newline at end of file\n"
    },
    "998eeb7687826e76c4c860eea7f5a72294838e68": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "Synchronized CollapseTopFieldDocs with lucenes relatives (#23854)\n\nTopDocs et.al. got additional parameters to incrementally reduce\r\ntop docs. In order to add incremental reduction `CollapseTopFieldDocs`\r\nneeds to have the same properties.",
      "commitDate": 1491205844000,
      "commitName": "998eeb7687826e76c4c860eea7f5a72294838e68",
      "commitAuthor": "Simon Willnauer",
      "subchanges": [
        "Yparameterchange",
        "Yexceptionschange",
        "Ybodychange"
      ]
    },
    "e48bc2eed71b1808e5d98960976ec60e6e722d78": {
      "type": "Yintroduced",
      "commitMessage": "Add field collapsing for search request (#22337)\n\n* Add top hits collapsing to search request\r\n\r\nThe field collapsing is done with a custom top docs collector that \"collapse\" search hits with same field value.\r\nThe distributed aspect is resolve using the two passes that the regular search uses. The first pass \"collapse\" the top hits, then the coordinating node merge/collapse the top hits from each shard.\r\n\r\n```\r\nGET _search\r\n{\r\n   \"collapse\": {\r\n      \"field\": \"category\",\r\n   }\r\n}\r\n```\r\n\r\nThis change also adds an ExpandCollapseSearchResponseListener that intercepts the search response and expands collapsed hits using the CollapseBuilder#innerHit} options.\r\nThe retrieval of each inner_hits is done by sending a query to all shards filtered by the collapse key.\r\n\r\n```\r\nGET _search\r\n{\r\n   \"collapse\": {\r\n      \"field\": \"category\",\r\n      \"inner_hits\": {\r\n\t\"size\": 2\r\n      }\r\n   }\r\n}\r\n```\r\n",
      "commitDate": 1485185631000,
      "commitName": "e48bc2eed71b1808e5d98960976ec60e6e722d78",
      "commitAuthor": "Jim Ferenczi"
    }
  }
}