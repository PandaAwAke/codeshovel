{
  "origin": "codeshovel",
  "repositoryName": "okhttp",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/okhttp/.git",
  "startCommitName": "8e2116fddcc1f9ad2b15d03fbc8918e30831d6a2",
  "sourceFileName": "JavaNetAuthenticator.java",
  "functionName": "authenticate",
  "functionId": "authenticate___route-Route__response-Response",
  "sourceFilePath": "okhttp-urlconnection/src/main/java/okhttp3/JavaNetAuthenticator.java",
  "functionStartLine": 32,
  "functionEndLine": 66,
  "changeHistory": [
    "b3ecb0a6c9bf3a213377b889f2b3077a940363e2",
    "d9abee71f870d31d992402d2b855313987bf53ee",
    "0bfd6048574d61c138fd417051ae2a1bcb44638f",
    "c9a89876de476983f273edbf108c365127c18c5e",
    "c07f55ac92d1e931260711edae987b51bee0be3d",
    "93d547dcdaecddfa456aee0571131db2342e5abb",
    "4c90a2e04a83646597a506a80b5a885d5c515bf0",
    "2b236fd66abbfffeb1c07a22dde5dcb8d3a2032c",
    "0676d8b1733589a869098b9980118644b3bade4f",
    "d111f4cd19d3d69558dd2186d778efb69b90b1e3",
    "e920196fbd71822fc284ab76204bf75f95d3265a",
    "bd26cf927a8ee69aab11890c5d0bfe9b9312404d",
    "f2a6a6496fb90f71d2f7facdc1798e28b0737248",
    "155a516b54ed60ec796cf5b9f2d8705012c5ceae",
    "cb7ade556c9ce90e861e947380a2bb380101b05e"
  ],
  "changeHistoryShort": {
    "b3ecb0a6c9bf3a213377b889f2b3077a940363e2": "Ybodychange",
    "d9abee71f870d31d992402d2b855313987bf53ee": "Yfilerename",
    "0bfd6048574d61c138fd417051ae2a1bcb44638f": "Ymultichange(Yparameterchange,Ybodychange)",
    "c9a89876de476983f273edbf108c365127c18c5e": "Ymovefromfile",
    "c07f55ac92d1e931260711edae987b51bee0be3d": "Ybodychange",
    "93d547dcdaecddfa456aee0571131db2342e5abb": "Ybodychange",
    "4c90a2e04a83646597a506a80b5a885d5c515bf0": "Ybodychange",
    "2b236fd66abbfffeb1c07a22dde5dcb8d3a2032c": "Ybodychange",
    "0676d8b1733589a869098b9980118644b3bade4f": "Yfilerename",
    "d111f4cd19d3d69558dd2186d778efb69b90b1e3": "Ybodychange",
    "e920196fbd71822fc284ab76204bf75f95d3265a": "Ymultichange(Ymovefromfile,Yreturntypechange,Ybodychange,Yparameterchange)",
    "bd26cf927a8ee69aab11890c5d0bfe9b9312404d": "Ybodychange",
    "f2a6a6496fb90f71d2f7facdc1798e28b0737248": "Ybodychange",
    "155a516b54ed60ec796cf5b9f2d8705012c5ceae": "Ybodychange",
    "cb7ade556c9ce90e861e947380a2bb380101b05e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b3ecb0a6c9bf3a213377b889f2b3077a940363e2": {
      "type": "Ybodychange",
      "commitMessage": "Add charset support for RFC 7617 challenges\n",
      "commitDate": 1504210735000,
      "commitName": "b3ecb0a6c9bf3a213377b889f2b3077a940363e2",
      "commitAuthor": "Erik Ghonyan",
      "commitDateOld": 1451684541000,
      "commitNameOld": "0c3e06764069ea601df5ee7db30721fdf70a42af",
      "commitAuthorOld": "jwilson",
      "daysBetweenCommits": 607.94,
      "commitsBetweenForRepo": 431,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,35 @@\n   @Override public Request authenticate(Route route, Response response) throws IOException {\n     List\u003cChallenge\u003e challenges \u003d response.challenges();\n     Request request \u003d response.request();\n     HttpUrl url \u003d request.url();\n     boolean proxyAuthorization \u003d response.code() \u003d\u003d 407;\n     Proxy proxy \u003d route.proxy();\n \n     for (int i \u003d 0, size \u003d challenges.size(); i \u003c size; i++) {\n       Challenge challenge \u003d challenges.get(i);\n       if (!\"Basic\".equalsIgnoreCase(challenge.scheme())) continue;\n \n       PasswordAuthentication auth;\n       if (proxyAuthorization) {\n         InetSocketAddress proxyAddress \u003d (InetSocketAddress) proxy.address();\n         auth \u003d java.net.Authenticator.requestPasswordAuthentication(\n             proxyAddress.getHostName(), getConnectToInetAddress(proxy, url), proxyAddress.getPort(),\n             url.scheme(), challenge.realm(), challenge.scheme(), url.url(),\n             RequestorType.PROXY);\n       } else {\n         auth \u003d java.net.Authenticator.requestPasswordAuthentication(\n             url.host(), getConnectToInetAddress(proxy, url), url.port(), url.scheme(),\n             challenge.realm(), challenge.scheme(), url.url(), RequestorType.SERVER);\n       }\n \n       if (auth !\u003d null) {\n-        String credential \u003d Credentials.basic(auth.getUserName(), new String(auth.getPassword()));\n+        String credential \u003d Credentials.basic(\n+            auth.getUserName(), new String(auth.getPassword()), challenge.charset());\n         return request.newBuilder()\n             .header(proxyAuthorization ? \"Proxy-Authorization\" : \"Authorization\", credential)\n             .build();\n       }\n     }\n \n     return null; // No challenges were satisfied!\n   }\n\\ No newline at end of file\n"
    },
    "d9abee71f870d31d992402d2b855313987bf53ee": {
      "type": "Yfilerename",
      "commitMessage": "Change the default authenticator to be no authenticator.\n\nPreviously we were using the system-wide default authenticator.\n",
      "commitDate": 1451325537000,
      "commitName": "d9abee71f870d31d992402d2b855313987bf53ee",
      "commitAuthor": "jwilson",
      "commitDateOld": 1451287171000,
      "commitNameOld": "937bedf91995ead193beeb94178143f694aead21",
      "commitAuthorOld": "Jake Wharton",
      "daysBetweenCommits": 0.44,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "0bfd6048574d61c138fd417051ae2a1bcb44638f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "One authenticate method on the authenticator interface.\n\nInstead of having one instance of Authenticator, and that interface\ndefines two methods, we now have two instances of Authenticator and\nthat interface defines one method.\n\nThis prevents leaking request-specific configuration (the authenticator)\ninto shared connection configuration (the proxy authenticator).\n",
      "commitDate": 1450450613000,
      "commitName": "0bfd6048574d61c138fd417051ae2a1bcb44638f",
      "commitAuthor": "jwilson",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "c9a89876de476983f273edbf108c365127c18c5e": {
      "type": "Ymovefromfile",
      "commitMessage": "Rename com.squareup.okhttp to okhttp3\n\nMaven group changes will come in follow up.\n",
      "commitDate": 1450247699000,
      "commitName": "c9a89876de476983f273edbf108c365127c18c5e",
      "commitAuthor": "jwilson",
      "commitDateOld": 1450233392000,
      "commitNameOld": "54dc2df914f2aae37fb48cc2c2f7560ee664bc2b",
      "commitAuthorOld": "Jake Wharton",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "c07f55ac92d1e931260711edae987b51bee0be3d": {
      "type": "Ybodychange",
      "commitMessage": "Drop \u0027get\u0027 prefix on Challenge value type.\n",
      "commitDate": 1450157856000,
      "commitName": "c07f55ac92d1e931260711edae987b51bee0be3d",
      "commitAuthor": "Jake Wharton",
      "commitDateOld": 1450123908000,
      "commitNameOld": "93d547dcdaecddfa456aee0571131db2342e5abb",
      "commitAuthorOld": "Jake Wharton",
      "daysBetweenCommits": 0.39,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   @Override public Request authenticate(Proxy proxy, Response response) throws IOException {\n     List\u003cChallenge\u003e challenges \u003d response.challenges();\n     Request request \u003d response.request();\n     HttpUrl url \u003d request.url();\n     for (int i \u003d 0, size \u003d challenges.size(); i \u003c size; i++) {\n       Challenge challenge \u003d challenges.get(i);\n-      if (!\"Basic\".equalsIgnoreCase(challenge.getScheme())) continue;\n+      if (!\"Basic\".equalsIgnoreCase(challenge.scheme())) continue;\n \n       PasswordAuthentication auth \u003d java.net.Authenticator.requestPasswordAuthentication(\n           url.host(), getConnectToInetAddress(proxy, url), url.port(), url.scheme(),\n-          challenge.getRealm(), challenge.getScheme(), url.url(), RequestorType.SERVER);\n+          challenge.realm(), challenge.scheme(), url.url(), RequestorType.SERVER);\n       if (auth \u003d\u003d null) continue;\n \n       String credential \u003d Credentials.basic(auth.getUserName(), new String(auth.getPassword()));\n       return request.newBuilder()\n           .header(\"Authorization\", credential)\n           .build();\n     }\n     return null;\n \n   }\n\\ No newline at end of file\n"
    },
    "93d547dcdaecddfa456aee0571131db2342e5abb": {
      "type": "Ybodychange",
      "commitMessage": "Make HttpUrl the blessed URL method of Request.\n",
      "commitDate": 1450123908000,
      "commitName": "93d547dcdaecddfa456aee0571131db2342e5abb",
      "commitAuthor": "Jake Wharton",
      "commitDateOld": 1438563686000,
      "commitNameOld": "4c90a2e04a83646597a506a80b5a885d5c515bf0",
      "commitAuthorOld": "jwilson",
      "daysBetweenCommits": 133.8,
      "commitsBetweenForRepo": 122,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   @Override public Request authenticate(Proxy proxy, Response response) throws IOException {\n     List\u003cChallenge\u003e challenges \u003d response.challenges();\n     Request request \u003d response.request();\n-    HttpUrl url \u003d request.httpUrl();\n+    HttpUrl url \u003d request.url();\n     for (int i \u003d 0, size \u003d challenges.size(); i \u003c size; i++) {\n       Challenge challenge \u003d challenges.get(i);\n       if (!\"Basic\".equalsIgnoreCase(challenge.getScheme())) continue;\n \n       PasswordAuthentication auth \u003d java.net.Authenticator.requestPasswordAuthentication(\n           url.host(), getConnectToInetAddress(proxy, url), url.port(), url.scheme(),\n           challenge.getRealm(), challenge.getScheme(), url.url(), RequestorType.SERVER);\n       if (auth \u003d\u003d null) continue;\n \n       String credential \u003d Credentials.basic(auth.getUserName(), new String(auth.getPassword()));\n       return request.newBuilder()\n           .header(\"Authorization\", credential)\n           .build();\n     }\n     return null;\n \n   }\n\\ No newline at end of file\n"
    },
    "4c90a2e04a83646597a506a80b5a885d5c515bf0": {
      "type": "Ybodychange",
      "commitMessage": "Use HttpUrl internally.\n",
      "commitDate": 1438563686000,
      "commitName": "4c90a2e04a83646597a506a80b5a885d5c515bf0",
      "commitAuthor": "jwilson",
      "commitDateOld": 1431452360000,
      "commitNameOld": "2b236fd66abbfffeb1c07a22dde5dcb8d3a2032c",
      "commitAuthorOld": "jwilson",
      "daysBetweenCommits": 82.31,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,21 @@\n   @Override public Request authenticate(Proxy proxy, Response response) throws IOException {\n     List\u003cChallenge\u003e challenges \u003d response.challenges();\n     Request request \u003d response.request();\n-    URL url \u003d request.url();\n+    HttpUrl url \u003d request.httpUrl();\n     for (int i \u003d 0, size \u003d challenges.size(); i \u003c size; i++) {\n       Challenge challenge \u003d challenges.get(i);\n       if (!\"Basic\".equalsIgnoreCase(challenge.getScheme())) continue;\n \n       PasswordAuthentication auth \u003d java.net.Authenticator.requestPasswordAuthentication(\n-          url.getHost(), getConnectToInetAddress(proxy, url), Util.getEffectivePort(url),\n-          url.getProtocol(), challenge.getRealm(), challenge.getScheme(), url,\n-          RequestorType.SERVER);\n+          url.host(), getConnectToInetAddress(proxy, url), url.port(), url.scheme(),\n+          challenge.getRealm(), challenge.getScheme(), url.url(), RequestorType.SERVER);\n       if (auth \u003d\u003d null) continue;\n \n       String credential \u003d Credentials.basic(auth.getUserName(), new String(auth.getPassword()));\n       return request.newBuilder()\n           .header(\"Authorization\", credential)\n           .build();\n     }\n     return null;\n \n   }\n\\ No newline at end of file\n"
    },
    "2b236fd66abbfffeb1c07a22dde5dcb8d3a2032c": {
      "type": "Ybodychange",
      "commitMessage": "Use HttpUrl in Request.\n",
      "commitDate": 1431452360000,
      "commitName": "2b236fd66abbfffeb1c07a22dde5dcb8d3a2032c",
      "commitAuthor": "jwilson",
      "commitDateOld": 1400374846000,
      "commitNameOld": "0676d8b1733589a869098b9980118644b3bade4f",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 359.69,
      "commitsBetweenForRepo": 373,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,22 @@\n   @Override public Request authenticate(Proxy proxy, Response response) throws IOException {\n     List\u003cChallenge\u003e challenges \u003d response.challenges();\n     Request request \u003d response.request();\n     URL url \u003d request.url();\n     for (int i \u003d 0, size \u003d challenges.size(); i \u003c size; i++) {\n       Challenge challenge \u003d challenges.get(i);\n       if (!\"Basic\".equalsIgnoreCase(challenge.getScheme())) continue;\n \n       PasswordAuthentication auth \u003d java.net.Authenticator.requestPasswordAuthentication(\n-          url.getHost(), getConnectToInetAddress(proxy, url), url.getPort(), url.getProtocol(),\n-          challenge.getRealm(), challenge.getScheme(), url, RequestorType.SERVER);\n+          url.getHost(), getConnectToInetAddress(proxy, url), Util.getEffectivePort(url),\n+          url.getProtocol(), challenge.getRealm(), challenge.getScheme(), url,\n+          RequestorType.SERVER);\n       if (auth \u003d\u003d null) continue;\n \n       String credential \u003d Credentials.basic(auth.getUserName(), new String(auth.getPassword()));\n       return request.newBuilder()\n           .header(\"Authorization\", credential)\n           .build();\n     }\n     return null;\n \n   }\n\\ No newline at end of file\n"
    },
    "0676d8b1733589a869098b9980118644b3bade4f": {
      "type": "Yfilerename",
      "commitMessage": "Move code to the urlconnection module.\n\nWe don\u0027t need this code for the core OkHttp API.\n",
      "commitDate": 1400374846000,
      "commitName": "0676d8b1733589a869098b9980118644b3bade4f",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": 1400366429000,
      "commitNameOld": "85a3e9bfc58040c9ffb2ee906b39702bb26a84a5",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "d111f4cd19d3d69558dd2186d778efb69b90b1e3": {
      "type": "Ybodychange",
      "commitMessage": "Rename OkAuthenticator to Authenticator.\n",
      "commitDate": 1399736107000,
      "commitName": "d111f4cd19d3d69558dd2186d778efb69b90b1e3",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": 1398096023000,
      "commitNameOld": "e920196fbd71822fc284ab76204bf75f95d3265a",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 18.98,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   @Override public Request authenticate(Proxy proxy, Response response) throws IOException {\n     List\u003cChallenge\u003e challenges \u003d response.challenges();\n     Request request \u003d response.request();\n     URL url \u003d request.url();\n     for (int i \u003d 0, size \u003d challenges.size(); i \u003c size; i++) {\n       Challenge challenge \u003d challenges.get(i);\n       if (!\"Basic\".equalsIgnoreCase(challenge.getScheme())) continue;\n \n-      PasswordAuthentication auth \u003d Authenticator.requestPasswordAuthentication(url.getHost(),\n-          getConnectToInetAddress(proxy, url), url.getPort(), url.getProtocol(),\n-          challenge.getRealm(), challenge.getScheme(), url, Authenticator.RequestorType.SERVER);\n+      PasswordAuthentication auth \u003d java.net.Authenticator.requestPasswordAuthentication(\n+          url.getHost(), getConnectToInetAddress(proxy, url), url.getPort(), url.getProtocol(),\n+          challenge.getRealm(), challenge.getScheme(), url, RequestorType.SERVER);\n       if (auth \u003d\u003d null) continue;\n \n       String credential \u003d Credentials.basic(auth.getUserName(), new String(auth.getPassword()));\n       return request.newBuilder()\n           .header(\"Authorization\", credential)\n           .build();\n     }\n     return null;\n \n   }\n\\ No newline at end of file\n"
    },
    "e920196fbd71822fc284ab76204bf75f95d3265a": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ybodychange,Yparameterchange)",
      "commitMessage": "Change the authenticator API to take request and response.\n\nThe previous API takes challenges and returns credentials. This isn\u0027t\nvery flexible because it means our challenge and credentials classes\nmust model everything.\n",
      "commitDate": 1398096023000,
      "commitName": "e920196fbd71822fc284ab76204bf75f95d3265a",
      "commitAuthor": "Jesse Wilson",
      "subchanges": [
        "Ymovefromfile",
        "Yreturntypechange",
        "Ybodychange",
        "Yparameterchange"
      ]
    },
    "bd26cf927a8ee69aab11890c5d0bfe9b9312404d": {
      "type": "Ybodychange",
      "commitMessage": "Switch list iteration to index-based as it is more efficient on android.\n",
      "commitDate": 1389041041000,
      "commitName": "bd26cf927a8ee69aab11890c5d0bfe9b9312404d",
      "commitAuthor": "Adrian Cole",
      "commitDateOld": 1388788596000,
      "commitNameOld": "9417fa5c2e84580411e0fa4905b1f109e2d49533",
      "commitAuthorOld": "jwilson",
      "daysBetweenCommits": 2.92,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,17 @@\n     @Override public Credential authenticate(\n         Proxy proxy, URL url, List\u003cChallenge\u003e challenges) throws IOException {\n-      for (Challenge challenge : challenges) {\n+      for (int i \u003d 0, size \u003d challenges.size(); i \u003c size; i++) {\n+        Challenge challenge \u003d challenges.get(i);\n         if (!\"Basic\".equalsIgnoreCase(challenge.getScheme())) {\n           continue;\n         }\n \n         PasswordAuthentication auth \u003d Authenticator.requestPasswordAuthentication(url.getHost(),\n             getConnectToInetAddress(proxy, url), url.getPort(), url.getProtocol(),\n             challenge.getRealm(), challenge.getScheme(), url, Authenticator.RequestorType.SERVER);\n         if (auth !\u003d null) {\n           return Credential.basic(auth.getUserName(), new String(auth.getPassword()));\n         }\n       }\n       return null;\n     }\n\\ No newline at end of file\n"
    },
    "f2a6a6496fb90f71d2f7facdc1798e28b0737248": {
      "type": "Ybodychange",
      "commitMessage": "Fix a bug where authentication was incorrectly case sensitive.\n",
      "commitDate": 1383505088000,
      "commitName": "f2a6a6496fb90f71d2f7facdc1798e28b0737248",
      "commitAuthor": "jwilson",
      "commitDateOld": 1378129410000,
      "commitNameOld": "155a516b54ed60ec796cf5b9f2d8705012c5ceae",
      "commitAuthorOld": "Narayan Kamath",
      "daysBetweenCommits": 62.22,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n     @Override public Credential authenticate(\n         Proxy proxy, URL url, List\u003cChallenge\u003e challenges) throws IOException {\n       for (Challenge challenge : challenges) {\n-        if (!\"Basic\".equals(challenge.getScheme())) {\n+        if (!\"Basic\".equalsIgnoreCase(challenge.getScheme())) {\n           continue;\n         }\n \n         PasswordAuthentication auth \u003d Authenticator.requestPasswordAuthentication(url.getHost(),\n             getConnectToInetAddress(proxy, url), url.getPort(), url.getProtocol(),\n             challenge.getRealm(), challenge.getScheme(), url, Authenticator.RequestorType.SERVER);\n         if (auth !\u003d null) {\n           return Credential.basic(auth.getUserName(), new String(auth.getPassword()));\n         }\n       }\n       return null;\n     }\n\\ No newline at end of file\n"
    },
    "155a516b54ed60ec796cf5b9f2d8705012c5ceae": {
      "type": "Ybodychange",
      "commitMessage": "Upstream changes made directly to AOSP.\n\nThis change is a combination of 4 separate commits\nto fix various bugs observed during android platform\ntesting.\n\nhttps://android-review.googlesource.com/#/c/63781/\n--------------------------------------------\nAllow certificate inspections after connect.\n\nWe don\u0027t have to wait for the request to be sent\nbefore allowing inspection of SSL certs. They can be\ninspected as soon as the connection is established.\n\nFixes CTS test UrlConnectionTest#testInspectSslAfterConnect\n\nhttps://android-review.googlesource.com/#/c/63821/\n---------------------------------------------\nRespect read timeout on recycled connections.\n\nPartial fix for CTS test : URLConnectionTest#testGetKeepAlive.\n\nhttps://android-review.googlesource.com/#/c/63782/\n-----------------------------------\nFix HttpUrlConnection#isUsingProxy.\n\nThe earlier implementation disregarded what the\nProxySelector had to say. We now query the selected\nroute (if one has been established).\n\nFixes compatibility test:\nHttpURLConnectionTest#testUsingProxySelector\n\nhttps://android-review.googlesource.com/#/c/63872/\n--------------------------------------------\nDon\u0027t support anything other than Basic auth.\n\nWe should disregard authentication schemes other than\n\"Basic\" and let clients handle them themselves.\n\nThe java Authenticator API gives us a user name and\npassword combination, but we can\u0027t know how to format\nthat information for any scheme other than basic.\n\nHistorically:\n\nThe JB implementation responds to challenges from an\narbitrary scheme \"X\" by sending a header with scheme\n\"X\" but formatted like the \"Basic\" scheme.\n\nThe current implementation responds to challenges from\nan arbitrary scheme \"X\" by sending a header with scheme\n\"Basic\" and formatter like the \"Basic scheme\".\n\nPartial fix for test cases in URLConnectionTest:\n- testAuthenticateWithCommaSeparatedAuthenticationMethods\n- testAuthenticateWithMultipleAuthenticationHeaders\n",
      "commitDate": 1378129410000,
      "commitName": "155a516b54ed60ec796cf5b9f2d8705012c5ceae",
      "commitAuthor": "Narayan Kamath",
      "commitDateOld": 1367094329000,
      "commitNameOld": "cb7ade556c9ce90e861e947380a2bb380101b05e",
      "commitAuthorOld": "jwilson",
      "daysBetweenCommits": 127.72,
      "commitsBetweenForRepo": 124,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,16 @@\n     @Override public Credential authenticate(\n         Proxy proxy, URL url, List\u003cChallenge\u003e challenges) throws IOException {\n       for (Challenge challenge : challenges) {\n+        if (!\"Basic\".equals(challenge.getScheme())) {\n+          continue;\n+        }\n+\n         PasswordAuthentication auth \u003d Authenticator.requestPasswordAuthentication(url.getHost(),\n             getConnectToInetAddress(proxy, url), url.getPort(), url.getProtocol(),\n             challenge.getRealm(), challenge.getScheme(), url, Authenticator.RequestorType.SERVER);\n         if (auth !\u003d null) {\n           return Credential.basic(auth.getUserName(), new String(auth.getPassword()));\n         }\n       }\n       return null;\n     }\n\\ No newline at end of file\n"
    },
    "cb7ade556c9ce90e861e947380a2bb380101b05e": {
      "type": "Yintroduced",
      "commitMessage": "Non-static authenticators.\n\nThis avoids the problems of HttpURLConnection\u0027s authenticator\nwhere multiple concurrent uses of HTTP require a single shared\nauthenticator.\n",
      "commitDate": 1367094329000,
      "commitName": "cb7ade556c9ce90e861e947380a2bb380101b05e",
      "commitAuthor": "jwilson"
    }
  }
}