{
  "origin": "codeshovel",
  "repositoryName": "guava",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/guava/.git",
  "startCommitName": "34c1616279efe08089960aafd3df486cf8a04820",
  "sourceFileName": "IndexedImmutableSet.java",
  "functionName": "createAsList",
  "functionId": "createAsList",
  "sourceFilePath": "android/guava/src/com/google/common/collect/IndexedImmutableSet.java",
  "functionStartLine": 38,
  "functionEndLine": 55,
  "changeHistory": [
    "a98632ee83a6c4c93f4b31820437f68ddde041dd"
  ],
  "changeHistoryShort": {
    "a98632ee83a6c4c93f4b31820437f68ddde041dd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a98632ee83a6c4c93f4b31820437f68ddde041dd": {
      "type": "Yintroduced",
      "commitMessage": "In Java 8 branch, fall back to an ImmutableSet backed by j.u.HashSet (and its binary tree magic) if apparent hash flooding is detected.\n\nAs part of this restructuring, we redesign Immutable{Set,SortedSet}.Builder to always allocate O(distinct) memory instead of O(insertions), deduplicating as elements come in (somewhat lazily in ISS.B\u0027s case).\n\nRELNOTES\u003dProtect against hash flooding in ImmutableSet, addressing https://github.com/google/guava/issues/3016.  Additionally, use only O(distinct) memory in Immutable{Set,SortedSet}.Builder, rather than O(insertions).\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID\u003d185156965\n",
      "commitDate": 1518200430000,
      "commitName": "a98632ee83a6c4c93f4b31820437f68ddde041dd",
      "commitAuthor": "lowasser"
    }
  }
}