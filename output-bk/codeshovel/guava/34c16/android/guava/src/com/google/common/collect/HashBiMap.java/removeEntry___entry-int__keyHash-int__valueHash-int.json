{
  "origin": "codeshovel",
  "repositoryName": "guava",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/guava/.git",
  "startCommitName": "34c1616279efe08089960aafd3df486cf8a04820",
  "sourceFileName": "HashBiMap.java",
  "functionName": "removeEntry",
  "functionId": "removeEntry___entry-int__keyHash-int__valueHash-int",
  "sourceFilePath": "android/guava/src/com/google/common/collect/HashBiMap.java",
  "functionStartLine": 553,
  "functionEndLine": 567,
  "changeHistory": [
    "8b4789c403e9f4e6554852228c5a701a098040ef"
  ],
  "changeHistoryShort": {
    "8b4789c403e9f4e6554852228c5a701a098040ef": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8b4789c403e9f4e6554852228c5a701a098040ef": {
      "type": "Yintroduced",
      "commitMessage": "I tripped and rewrote HashBiMap in the fully compact form, with no redundant code or storage, like I had assumed was too much work.\n\nMemory consumption effects:\nUnsized: 52 bytes/entry vs. 64 for server-side implementation vs. 74 for CompactHash* implementation\nSized: 40 bytes/entry vs. 64 for server-side implementation vs. 56 for CompactHash* implementation\n\n(NB: I did not include storage of hash codes, as included in the other implementations.  If we wanted that it\u0027d add another 8 bytes/entry sized, and probably 12 bytes/entry unsized.)\n\nEffects on HashBiMapProGuard:\n17833 bytes vs. 30172 bytes for server-side implementation vs. 31159 bytes for CompactHash* implementation\n13 classes vs. 29 classes for server-side implementation vs. 27 classes for CompactHash* implementation\n99 methods vs. 132 methods for server-side implementation vs. 173 methods for CompactHash* implementation\n\nRELNOTES\u003dRewrites Java 7 HashBiMap, and fixes some bugs in both versions.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID\u003d177814345\n",
      "commitDate": 1512404471000,
      "commitName": "8b4789c403e9f4e6554852228c5a701a098040ef",
      "commitAuthor": "lowasser"
    }
  }
}