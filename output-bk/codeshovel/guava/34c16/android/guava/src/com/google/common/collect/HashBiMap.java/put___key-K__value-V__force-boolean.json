{
  "origin": "codeshovel",
  "repositoryName": "guava",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/guava/.git",
  "startCommitName": "34c1616279efe08089960aafd3df486cf8a04820",
  "sourceFileName": "HashBiMap.java",
  "functionName": "put",
  "functionId": "put___key-K__value-V__force-boolean",
  "sourceFilePath": "android/guava/src/com/google/common/collect/HashBiMap.java",
  "functionStartLine": 260,
  "functionEndLine": 295,
  "changeHistory": [
    "8b4789c403e9f4e6554852228c5a701a098040ef",
    "0c81386a239370c073572212079efc727c911d0b",
    "9b94fb3965c6869b0ac47420958a4bbae0b2d54c"
  ],
  "changeHistoryShort": {
    "8b4789c403e9f4e6554852228c5a701a098040ef": "Ymultichange(Ymodifierchange,Ybodychange)",
    "0c81386a239370c073572212079efc727c911d0b": "Ybodychange",
    "9b94fb3965c6869b0ac47420958a4bbae0b2d54c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8b4789c403e9f4e6554852228c5a701a098040ef": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "I tripped and rewrote HashBiMap in the fully compact form, with no redundant code or storage, like I had assumed was too much work.\n\nMemory consumption effects:\nUnsized: 52 bytes/entry vs. 64 for server-side implementation vs. 74 for CompactHash* implementation\nSized: 40 bytes/entry vs. 64 for server-side implementation vs. 56 for CompactHash* implementation\n\n(NB: I did not include storage of hash codes, as included in the other implementations.  If we wanted that it\u0027d add another 8 bytes/entry sized, and probably 12 bytes/entry unsized.)\n\nEffects on HashBiMapProGuard:\n17833 bytes vs. 30172 bytes for server-side implementation vs. 31159 bytes for CompactHash* implementation\n13 classes vs. 29 classes for server-side implementation vs. 27 classes for CompactHash* implementation\n99 methods vs. 132 methods for server-side implementation vs. 173 methods for CompactHash* implementation\n\nRELNOTES\u003dRewrites Java 7 HashBiMap, and fixes some bugs in both versions.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID\u003d177814345\n",
      "commitDate": 1512404471000,
      "commitName": "8b4789c403e9f4e6554852228c5a701a098040ef",
      "commitAuthor": "lowasser",
      "subchanges": [
        "Ymodifierchange",
        "Ybodychange"
      ]
    },
    "0c81386a239370c073572212079efc727c911d0b": {
      "type": "Ybodychange",
      "commitMessage": "Use diamond operator in collect\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID\u003d165450412\n",
      "commitDate": 1502905310000,
      "commitName": "0c81386a239370c073572212079efc727c911d0b",
      "commitAuthor": "jijiang",
      "commitDateOld": 1492741671000,
      "commitNameOld": "9b94fb3965c6869b0ac47420958a4bbae0b2d54c",
      "commitAuthorOld": "zhenghua",
      "daysBetweenCommits": 117.63,
      "commitsBetweenForRepo": 211,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   private V put(@Nullable K key, @Nullable V value, boolean force) {\n     int keyHash \u003d smearedHash(key);\n     int valueHash \u003d smearedHash(value);\n \n     BiEntry\u003cK, V\u003e oldEntryForKey \u003d seekByKey(key, keyHash);\n     if (oldEntryForKey !\u003d null\n         \u0026\u0026 valueHash \u003d\u003d oldEntryForKey.valueHash\n         \u0026\u0026 Objects.equal(value, oldEntryForKey.value)) {\n       return value;\n     }\n \n     BiEntry\u003cK, V\u003e oldEntryForValue \u003d seekByValue(value, valueHash);\n     if (oldEntryForValue !\u003d null) {\n       if (force) {\n         delete(oldEntryForValue);\n       } else {\n         throw new IllegalArgumentException(\"value already present: \" + value);\n       }\n     }\n \n-    BiEntry\u003cK, V\u003e newEntry \u003d new BiEntry\u003cK, V\u003e(key, keyHash, value, valueHash);\n+    BiEntry\u003cK, V\u003e newEntry \u003d new BiEntry\u003c\u003e(key, keyHash, value, valueHash);\n     if (oldEntryForKey !\u003d null) {\n       delete(oldEntryForKey);\n       insert(newEntry, oldEntryForKey);\n       oldEntryForKey.prevInKeyInsertionOrder \u003d null;\n       oldEntryForKey.nextInKeyInsertionOrder \u003d null;\n       rehashIfNecessary();\n       return oldEntryForKey.value;\n     } else {\n       insert(newEntry, null);\n       rehashIfNecessary();\n       return null;\n     }\n   }\n\\ No newline at end of file\n"
    },
    "9b94fb3965c6869b0ac47420958a4bbae0b2d54c": {
      "type": "Yintroduced",
      "commitMessage": "Begin exporting sources of Guava for Android.\n\npom.xml files to come.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID\u003d153757913\n",
      "commitDate": 1492741671000,
      "commitName": "9b94fb3965c6869b0ac47420958a4bbae0b2d54c",
      "commitAuthor": "zhenghua"
    }
  }
}