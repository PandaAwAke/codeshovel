{
  "origin": "codeshovel",
  "repositoryName": "guava",
  "repositoryPath": "/home/ncbradley/cs-repos/guava/.git",
  "startCommitName": "34c1616279efe08089960aafd3df486cf8a04820",
  "sourceFileName": "MapMakerInternalMap.java",
  "functionName": "createWithDummyValues",
  "functionId": "createWithDummyValues___builder-MapMaker",
  "sourceFilePath": "android/guava/src/com/google/common/collect/MapMakerInternalMap.java",
  "functionStartLine": 229,
  "functionEndLine": 243,
  "changeHistory": [
    "0c81386a239370c073572212079efc727c911d0b",
    "cd8fb02a9c762707e5b7bbc22507dc8569efe430"
  ],
  "changeHistoryShort": {
    "0c81386a239370c073572212079efc727c911d0b": "Ybodychange",
    "cd8fb02a9c762707e5b7bbc22507dc8569efe430": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0c81386a239370c073572212079efc727c911d0b": {
      "type": "Ybodychange",
      "commitMessage": "Use diamond operator in collect\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID\u003d165450412\n",
      "commitDate": 1502905310000,
      "commitName": "0c81386a239370c073572212079efc727c911d0b",
      "commitAuthor": "jijiang",
      "commitDateOld": 1501080336000,
      "commitNameOld": "934e3840945d3b866f80c28135a0369cb32d7163",
      "commitAuthorOld": "cpovirk",
      "daysBetweenCommits": 21.12,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,15 @@\n       MapMakerInternalMap\u003cK, Dummy, ? extends InternalEntry\u003cK, Dummy, ?\u003e, ?\u003e createWithDummyValues(\n           MapMaker builder) {\n     if (builder.getKeyStrength() \u003d\u003d Strength.STRONG\n         \u0026\u0026 builder.getValueStrength() \u003d\u003d Strength.STRONG) {\n-      return new MapMakerInternalMap\u003c\n-          K, Dummy, StrongKeyDummyValueEntry\u003cK\u003e, StrongKeyDummyValueSegment\u003cK\u003e\u003e(\n-          builder, StrongKeyDummyValueEntry.Helper.\u003cK\u003einstance());\n+      return new MapMakerInternalMap\u003c\u003e(builder, StrongKeyDummyValueEntry.Helper.\u003cK\u003einstance());\n     }\n     if (builder.getKeyStrength() \u003d\u003d Strength.WEAK\n         \u0026\u0026 builder.getValueStrength() \u003d\u003d Strength.STRONG) {\n-      return new MapMakerInternalMap\u003c\n-          K, Dummy, WeakKeyDummyValueEntry\u003cK\u003e, WeakKeyDummyValueSegment\u003cK\u003e\u003e(\n-          builder, WeakKeyDummyValueEntry.Helper.\u003cK\u003einstance());\n+      return new MapMakerInternalMap\u003c\u003e(builder, WeakKeyDummyValueEntry.Helper.\u003cK\u003einstance());\n     }\n     if (builder.getValueStrength() \u003d\u003d Strength.WEAK) {\n       throw new IllegalArgumentException(\"Map cannot have both weak and dummy values\");\n     }\n     throw new AssertionError();\n   }\n\\ No newline at end of file\n"
    },
    "cd8fb02a9c762707e5b7bbc22507dc8569efe430": {
      "type": "Yintroduced",
      "commitMessage": "Provide specializations of MapMakerInternalMap\u0027s internal data structures, notably InternalEntry, for the case where the value type is a singleton. This is Interners\u0027s exact use case.\n\nThis CL is a pure refactor that results in a strict memory win. No public apis are changed.\n\nI am very happy that my design made this refactor very easy :)\n\nThere are the following Interners use cases:\n- Interners#newStrongInterner\n- Interners#newWeakInterner\nand the following relevant jvm flags:\n- -XX:+UseCompressedOops\n- -XX:-UseCompressedOops\n\nOf the four combinations of interner type and pointer size, the most important use case is probably Interners#newWeakInterner, since users tend to put lots of stuff in weak interners. On a 64-bit jvm with +UseCompressedOops, there\u0027s actually no win because of the way the current object alignment for WeakKeyStrongValueEntry works out. However, the current object alignment works out unfavorably on a jvm with -UseCompressedOops, and so this CL gives a sizeable win there.\n\nThe CL also gives very large savings for Interners#newStrongInterner, but I reckon that use case isn\u0027t too important.\n\nSummary of results:\n-------------------\nStrongInternerImpl w/ +UseCompressedOops --\u003e 19.8% savings\nWeakInternerImpl w/ +UseCompressedOops --\u003e 0.00016% savings\nStrongInternerImpl w/ -UseCompressedOops --\u003e 12.3% savings\nWeakInternerImpl w/ -UseCompressedOops --\u003e 9.0%% savings\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID\u003d154450505\n",
      "commitDate": 1493319581000,
      "commitName": "cd8fb02a9c762707e5b7bbc22507dc8569efe430",
      "commitAuthor": "nharmata"
    }
  }
}