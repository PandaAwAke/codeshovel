{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "AbstractIndentationTestSupport.java",
  "functionName": "isCommentConsistent",
  "functionId": "isCommentConsistent___comment-String",
  "sourceFilePath": "src/it/java/com/google/checkstyle/test/base/AbstractIndentationTestSupport.java",
  "functionStartLine": 122,
  "functionEndLine": 148,
  "changeHistory": [
    "6d290adcd7efb8e9f07d2730e9960c6dc3e713ba",
    "0d8e93ce79ea33b72b3e904d8796984271ee3d8d",
    "7a4ec11d123dc0bbf7db943af715d19814d2e332",
    "344ea5c012d1814441b5758013a2b035c6e1613a",
    "d1a6a437100b26d4f3932472ca3241b3f4b05da2",
    "e9ec5bfbd5ab91852c3ec1b30492df5c06cdd3b1",
    "d345f3beb27f3d8e3fde06f7e2c7612ddf691b95",
    "2071f9b5421f853e8515f309b2874399c895c43a",
    "074b36894e7926817ff85703854bd4d87bbfd6d4",
    "4a56989f8ea633b6dfacd1f1ef0a12f5ef6358ba",
    "437986510709d7abc64b59c72779343ac5e77599"
  ],
  "changeHistoryShort": {
    "6d290adcd7efb8e9f07d2730e9960c6dc3e713ba": "Yfilerename",
    "0d8e93ce79ea33b72b3e904d8796984271ee3d8d": "Ybodychange",
    "7a4ec11d123dc0bbf7db943af715d19814d2e332": "Yfilerename",
    "344ea5c012d1814441b5758013a2b035c6e1613a": "Ybodychange",
    "d1a6a437100b26d4f3932472ca3241b3f4b05da2": "Ybodychange",
    "e9ec5bfbd5ab91852c3ec1b30492df5c06cdd3b1": "Ybodychange",
    "d345f3beb27f3d8e3fde06f7e2c7612ddf691b95": "Ybodychange",
    "2071f9b5421f853e8515f309b2874399c895c43a": "Ybodychange",
    "074b36894e7926817ff85703854bd4d87bbfd6d4": "Ybodychange",
    "4a56989f8ea633b6dfacd1f1ef0a12f5ef6358ba": "Ybodychange",
    "437986510709d7abc64b59c72779343ac5e77599": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6d290adcd7efb8e9f07d2730e9960c6dc3e713ba": {
      "type": "Yfilerename",
      "commitMessage": "Issue #4592: Added AbstractPathTestSupport, AbstractModuleTestSupport, AbstractIndentationTestSupport and all tests in ITs extend them\n",
      "commitDate": 1501610201000,
      "commitName": "6d290adcd7efb8e9f07d2730e9960c6dc3e713ba",
      "commitAuthor": "Subbu Dantu",
      "commitDateOld": 1501592797000,
      "commitNameOld": "29e131f949950d26e7880da5891d1754776fdeee",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "0d8e93ce79ea33b72b3e904d8796984271ee3d8d": {
      "type": "Ybodychange",
      "commitMessage": "minor: enforce FinalLocalVariableCheck on checkstyle code\n",
      "commitDate": 1453646135000,
      "commitName": "0d8e93ce79ea33b72b3e904d8796984271ee3d8d",
      "commitAuthor": "Bhavik Patel",
      "commitDateOld": 1451953543000,
      "commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 19.59,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n     private static boolean isCommentConsistent(String comment) {\n         final int indentInComment \u003d getIndentFromComment(comment);\n         final boolean isWarnComment \u003d isWarnComment(comment);\n \n-        boolean result;\n+        final boolean result;\n         final CommentType type \u003d getCommentType(comment);\n         switch (type) {\n             case MULTILEVEL:\n                 result \u003d isMultiLevelCommentConsistent(comment, indentInComment, isWarnComment);\n                 break;\n \n             case SINGLE_LEVEL:\n                 result \u003d isSingleLevelCommentConsistent(comment, indentInComment, isWarnComment);\n                 break;\n \n             case NON_STRICT_LEVEL:\n                 result \u003d isNonStrictCommentConsistent(comment, indentInComment, isWarnComment);\n                 break;\n \n             case UNKNOWN:\n                 throw new IllegalArgumentException(\"Cannot determine comment consistent\");\n \n             default:\n                 throw new IllegalStateException(\"Cannot determine comment is consistent\");\n \n         }\n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "7a4ec11d123dc0bbf7db943af715d19814d2e332": {
      "type": "Yfilerename",
      "commitMessage": "Issue #2589: Unify IT test code.",
      "commitDate": 1447384120000,
      "commitName": "7a4ec11d123dc0bbf7db943af715d19814d2e332",
      "commitAuthor": "rnveach",
      "commitDateOld": 1447378958000,
      "commitNameOld": "41044d42b8f21ae00792f101a63101bf87d7fd61",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "344ea5c012d1814441b5758013a2b035c6e1613a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2421: enabling checking on it folder",
      "commitDate": 1445797820000,
      "commitName": "344ea5c012d1814441b5758013a2b035c6e1613a",
      "commitAuthor": "rnveach",
      "commitDateOld": 1445797200000,
      "commitNameOld": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n     private static boolean isCommentConsistent(String comment) {\n         final int indentInComment \u003d getIndentFromComment(comment);\n         final boolean isWarnComment \u003d isWarnComment(comment);\n \n         boolean result;\n-        CommentType type \u003d getCommentType(comment);\n+        final CommentType type \u003d getCommentType(comment);\n         switch (type) {\n             case MULTILEVEL:\n                 result \u003d isMultiLevelCommentConsistent(comment, indentInComment, isWarnComment);\n                 break;\n \n             case SINGLE_LEVEL:\n                 result \u003d isSingleLevelCommentConsistent(comment, indentInComment, isWarnComment);\n                 break;\n \n             case NON_STRICT_LEVEL:\n                 result \u003d isNonStrictCommentConsistent(comment, indentInComment, isWarnComment);\n                 break;\n \n             case UNKNOWN:\n                 throw new IllegalArgumentException(\"Cannot determine comment consistent\");\n \n             default:\n                 throw new IllegalStateException(\"Cannot determine comment is consistent\");\n \n         }\n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "d1a6a437100b26d4f3932472ca3241b3f4b05da2": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2421: Cyclomatic Complexity and ReturnCount violations are resovled\n",
      "commitDate": 1445790111000,
      "commitName": "d1a6a437100b26d4f3932472ca3241b3f4b05da2",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": 1445782886000,
      "commitNameOld": "a2ae6fa3a82abc0562772af74de80bee2f927cd8",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,28 @@\n     private static boolean isCommentConsistent(String comment) {\n         final int indentInComment \u003d getIndentFromComment(comment);\n         final boolean isWarnComment \u003d isWarnComment(comment);\n \n-        Matcher multilevelMatch \u003d MULTILEVEL_COMMENT_REGEX.matcher(comment);\n-        if (multilevelMatch.matches()) {\n-            final String[] levels \u003d multilevelMatch.group(1).split(\",\");\n-            final String indentInCommentStr \u003d String.valueOf(indentInComment);\n-            final boolean containsActualLevel \u003d\n-                            Arrays.asList(levels).contains(indentInCommentStr);\n+        boolean result;\n+        CommentType type \u003d getCommentType(comment);\n+        switch (type) {\n+            case MULTILEVEL:\n+                result \u003d isMultiLevelCommentConsistent(comment, indentInComment, isWarnComment);\n+                break;\n \n-            return containsActualLevel \u0026\u0026 !isWarnComment\n-                    || !containsActualLevel \u0026\u0026 isWarnComment;\n+            case SINGLE_LEVEL:\n+                result \u003d isSingleLevelCommentConsistent(comment, indentInComment, isWarnComment);\n+                break;\n+\n+            case NON_STRICT_LEVEL:\n+                result \u003d isNonStrictCommentConsistent(comment, indentInComment, isWarnComment);\n+                break;\n+\n+            case UNKNOWN:\n+                throw new IllegalArgumentException(\"Cannot determine comment consistent\");\n+\n+            default:\n+                throw new IllegalStateException(\"Cannot determine comment is consistent\");\n+\n         }\n-\n-        Matcher singleLevelMatch \u003d SINGLE_LEVEL_COMMENT_REGEX.matcher(comment);\n-        if (singleLevelMatch.matches()) {\n-            final int expectedLevel \u003d Integer.parseInt(singleLevelMatch.group(1));\n-\n-            return expectedLevel \u003d\u003d indentInComment \u0026\u0026 !isWarnComment\n-                    || expectedLevel !\u003d indentInComment \u0026\u0026 isWarnComment;\n-        }\n-\n-        Matcher nonStrictLevelMatch \u003d NON_STRICT_LEVEL_COMMENT_REGEX.matcher(comment);\n-        if (nonStrictLevelMatch.matches()) {\n-            final int expectedMinimalIndent \u003d Integer.parseInt(nonStrictLevelMatch.group(1));\n-\n-            return indentInComment \u003e\u003d expectedMinimalIndent \u0026\u0026 !isWarnComment\n-                    || indentInComment \u003c expectedMinimalIndent \u0026\u0026 isWarnComment;\n-        }\n-\n-        throw new IllegalArgumentException(\"Cannot determine if commit is consistent\");\n+        return result;\n     }\n\\ No newline at end of file\n"
    },
    "e9ec5bfbd5ab91852c3ec1b30492df5c06cdd3b1": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1555: Avoid reusing variables\n\nFixes some `ReuseOfLocalVariable` inspection violations.\n\nDescription:\n\u003eReports local variables that are \"reused\", overwriting their values with new values unrelated to their original use. Such local variable reuse may be confusing, as the intended semantics of the local variable may vary with each use. It may also be prone to bugs, if code changes result in values that were thought to be overwritten actually being live. It is good practices to keep variable lifetimes as short as possible, and not reuse local variables for the sake of brevity.\n",
      "commitDate": 1440827352000,
      "commitName": "e9ec5bfbd5ab91852c3ec1b30492df5c06cdd3b1",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440827292000,
      "commitNameOld": "9cc86b38df9a086713d1fcdf01b451b41c0d6f65",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     private static boolean isCommentConsistent(String comment)\n     {\n         final int indentInComment \u003d getIndentFromComment(comment);\n         final boolean isWarnComment \u003d isWarnComment(comment);\n \n-        Matcher match \u003d MULTILEVEL_COMMENT_REGEX.matcher(comment);\n-        if (match.matches()) {\n-            final String[] levels \u003d match.group(1).split(\",\");\n+        Matcher multilevelMatch \u003d MULTILEVEL_COMMENT_REGEX.matcher(comment);\n+        if (multilevelMatch.matches()) {\n+            final String[] levels \u003d multilevelMatch.group(1).split(\",\");\n             final String indentInCommentStr \u003d String.valueOf(indentInComment);\n             final boolean containsActualLevel \u003d\n                             Arrays.asList(levels).contains(indentInCommentStr);\n \n             return containsActualLevel \u0026\u0026 !isWarnComment\n                     || !containsActualLevel \u0026\u0026 isWarnComment;\n         }\n \n-        match \u003d SINGLE_LEVEL_COMMENT_REGEX.matcher(comment);\n-        if (match.matches()) {\n-            final int expectedLevel \u003d Integer.parseInt(match.group(1));\n+        Matcher singleLevelMatch \u003d SINGLE_LEVEL_COMMENT_REGEX.matcher(comment);\n+        if (singleLevelMatch.matches()) {\n+            final int expectedLevel \u003d Integer.parseInt(singleLevelMatch.group(1));\n \n             return expectedLevel \u003d\u003d indentInComment \u0026\u0026 !isWarnComment\n                     || expectedLevel !\u003d indentInComment \u0026\u0026 isWarnComment;\n         }\n \n-        match \u003d NON_STRICT_LEVEL_COMMENT_REGEX.matcher(comment);\n-        if (match.matches()) {\n-            final int expectedMinimalIndent \u003d Integer.parseInt(match.group(1));\n+        Matcher nonStrictLevelMatch \u003d NON_STRICT_LEVEL_COMMENT_REGEX.matcher(comment);\n+        if (nonStrictLevelMatch.matches()) {\n+            final int expectedMinimalIndent \u003d Integer.parseInt(nonStrictLevelMatch.group(1));\n \n             return indentInComment \u003e\u003d expectedMinimalIndent \u0026\u0026 !isWarnComment\n                     || indentInComment \u003c expectedMinimalIndent \u0026\u0026 isWarnComment;\n         }\n \n         throw new IllegalArgumentException(\"Cannot determine if commit is consistent\");\n     }\n\\ No newline at end of file\n"
    },
    "d345f3beb27f3d8e3fde06f7e2c7612ddf691b95": {
      "type": "Ybodychange",
      "commitMessage": "Fix typos in code and Javadoc. #1555\n\nFixes some `SpellCheckingInspection` inspection violations.\n\nDescription:\n\u003eSpellchecker inspection helps locate typos and misspelling in your code, comments and literals, and fix them in one click.\n",
      "commitDate": 1440502770000,
      "commitName": "d345f3beb27f3d8e3fde06f7e2c7612ddf691b95",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440499762000,
      "commitNameOld": "2071f9b5421f853e8515f309b2874399c895c43a",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     private static boolean isCommentConsistent(String comment)\n     {\n         final int indentInComment \u003d getIndentFromComment(comment);\n         final boolean isWarnComment \u003d isWarnComment(comment);\n \n         Matcher match \u003d MULTILEVEL_COMMENT_REGEX.matcher(comment);\n         if (match.matches()) {\n             final String[] levels \u003d match.group(1).split(\",\");\n             final String indentInCommentStr \u003d String.valueOf(indentInComment);\n             final boolean containsActualLevel \u003d\n                             Arrays.asList(levels).contains(indentInCommentStr);\n \n             return containsActualLevel \u0026\u0026 !isWarnComment\n                     || !containsActualLevel \u0026\u0026 isWarnComment;\n         }\n \n-        match \u003d SINGLELEVEL_COMMENT_REGEX.matcher(comment);\n+        match \u003d SINGLE_LEVEL_COMMENT_REGEX.matcher(comment);\n         if (match.matches()) {\n             final int expectedLevel \u003d Integer.parseInt(match.group(1));\n \n             return expectedLevel \u003d\u003d indentInComment \u0026\u0026 !isWarnComment\n                     || expectedLevel !\u003d indentInComment \u0026\u0026 isWarnComment;\n         }\n \n-        match \u003d NONSTRICT_LEVEL_COMMENT_REGEX.matcher(comment);\n+        match \u003d NON_STRICT_LEVEL_COMMENT_REGEX.matcher(comment);\n         if (match.matches()) {\n             final int expectedMinimalIndent \u003d Integer.parseInt(match.group(1));\n \n             return indentInComment \u003e\u003d expectedMinimalIndent \u0026\u0026 !isWarnComment\n                     || indentInComment \u003c expectedMinimalIndent \u0026\u0026 isWarnComment;\n         }\n \n         throw new IllegalArgumentException(\"Cannot determine if commit is consistent\");\n     }\n\\ No newline at end of file\n"
    },
    "2071f9b5421f853e8515f309b2874399c895c43a": {
      "type": "Ybodychange",
      "commitMessage": "Add arguments to created exceptions. #1555\n\nFixes `NewExceptionWithoutArguments` inspection violations.\n\nDescription:\n\u003eReports exception instance creation without any arguments specified. When an exception is constructed without arguments it contains no information about the fault that happened, which makes debugging needlessly hard.\n",
      "commitDate": 1440499762000,
      "commitName": "2071f9b5421f853e8515f309b2874399c895c43a",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440162705000,
      "commitNameOld": "074b36894e7926817ff85703854bd4d87bbfd6d4",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 3.9,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     private static boolean isCommentConsistent(String comment)\n     {\n         final int indentInComment \u003d getIndentFromComment(comment);\n         final boolean isWarnComment \u003d isWarnComment(comment);\n \n         Matcher match \u003d MULTILEVEL_COMMENT_REGEX.matcher(comment);\n         if (match.matches()) {\n             final String[] levels \u003d match.group(1).split(\",\");\n             final String indentInCommentStr \u003d String.valueOf(indentInComment);\n             final boolean containsActualLevel \u003d\n                             Arrays.asList(levels).contains(indentInCommentStr);\n \n             return containsActualLevel \u0026\u0026 !isWarnComment\n                     || !containsActualLevel \u0026\u0026 isWarnComment;\n         }\n \n         match \u003d SINGLELEVEL_COMMENT_REGEX.matcher(comment);\n         if (match.matches()) {\n             final int expectedLevel \u003d Integer.parseInt(match.group(1));\n \n             return expectedLevel \u003d\u003d indentInComment \u0026\u0026 !isWarnComment\n                     || expectedLevel !\u003d indentInComment \u0026\u0026 isWarnComment;\n         }\n \n         match \u003d NONSTRICT_LEVEL_COMMENT_REGEX.matcher(comment);\n         if (match.matches()) {\n             final int expectedMinimalIndent \u003d Integer.parseInt(match.group(1));\n \n             return indentInComment \u003e\u003d expectedMinimalIndent \u0026\u0026 !isWarnComment\n                     || indentInComment \u003c expectedMinimalIndent \u0026\u0026 isWarnComment;\n         }\n \n-        throw new IllegalArgumentException();\n+        throw new IllegalArgumentException(\"Cannot determine if commit is consistent\");\n     }\n\\ No newline at end of file\n"
    },
    "074b36894e7926817ff85703854bd4d87bbfd6d4": {
      "type": "Ybodychange",
      "commitMessage": "Remove unnecessary parentheses in test code. #1555\n\nFixes `UnnecessaryParentheses` inspection violations in test code.\n\nDescription:\n\u003eReports on any instance of unnecessary parentheses. Parentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": 1440162705000,
      "commitName": "074b36894e7926817ff85703854bd4d87bbfd6d4",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440047415000,
      "commitNameOld": "4a56989f8ea633b6dfacd1f1ef0a12f5ef6358ba",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 1.33,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     private static boolean isCommentConsistent(String comment)\n     {\n         final int indentInComment \u003d getIndentFromComment(comment);\n         final boolean isWarnComment \u003d isWarnComment(comment);\n \n         Matcher match \u003d MULTILEVEL_COMMENT_REGEX.matcher(comment);\n         if (match.matches()) {\n             final String[] levels \u003d match.group(1).split(\",\");\n             final String indentInCommentStr \u003d String.valueOf(indentInComment);\n             final boolean containsActualLevel \u003d\n                             Arrays.asList(levels).contains(indentInCommentStr);\n \n             return containsActualLevel \u0026\u0026 !isWarnComment\n                     || !containsActualLevel \u0026\u0026 isWarnComment;\n         }\n \n         match \u003d SINGLELEVEL_COMMENT_REGEX.matcher(comment);\n         if (match.matches()) {\n             final int expectedLevel \u003d Integer.parseInt(match.group(1));\n \n-            return (expectedLevel \u003d\u003d indentInComment) \u0026\u0026 !isWarnComment\n-                    || (expectedLevel !\u003d indentInComment) \u0026\u0026 isWarnComment;\n+            return expectedLevel \u003d\u003d indentInComment \u0026\u0026 !isWarnComment\n+                    || expectedLevel !\u003d indentInComment \u0026\u0026 isWarnComment;\n         }\n \n         match \u003d NONSTRICT_LEVEL_COMMENT_REGEX.matcher(comment);\n         if (match.matches()) {\n             final int expectedMinimalIndent \u003d Integer.parseInt(match.group(1));\n \n-            return (indentInComment \u003e\u003d expectedMinimalIndent) \u0026\u0026 !isWarnComment\n-                    || (indentInComment \u003c expectedMinimalIndent) \u0026\u0026 isWarnComment;\n+            return indentInComment \u003e\u003d expectedMinimalIndent \u0026\u0026 !isWarnComment\n+                    || indentInComment \u003c expectedMinimalIndent \u0026\u0026 isWarnComment;\n         }\n \n         throw new IllegalArgumentException();\n     }\n\\ No newline at end of file\n"
    },
    "4a56989f8ea633b6dfacd1f1ef0a12f5ef6358ba": {
      "type": "Ybodychange",
      "commitMessage": "Fix too broad scope of variables. #1555\n\nAdditionally, obsolete assertions were removed.\n\nFixes `TooBroadScope` inspection violations.\n\nDescription:\n\u003eReports any variable declarations of which the scope can be narrowed. Especially useful for \"Pascal style\" declarations at the start of a method, but variables with too broad a scope are also often left over after refactorings.\n",
      "commitDate": 1440047415000,
      "commitName": "4a56989f8ea633b6dfacd1f1ef0a12f5ef6358ba",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440041625000,
      "commitNameOld": "0b52fefcc898f6f82c627bba9fcdd38a62583b22",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,34 @@\n     private static boolean isCommentConsistent(String comment)\n     {\n         final int indentInComment \u003d getIndentFromComment(comment);\n         final boolean isWarnComment \u003d isWarnComment(comment);\n \n-        Matcher match;\n-\n-        match \u003d MULTILEVEL_COMMENT_REGEX.matcher(comment);\n+        Matcher match \u003d MULTILEVEL_COMMENT_REGEX.matcher(comment);\n         if (match.matches()) {\n             final String[] levels \u003d match.group(1).split(\",\");\n             final String indentInCommentStr \u003d String.valueOf(indentInComment);\n             final boolean containsActualLevel \u003d\n                             Arrays.asList(levels).contains(indentInCommentStr);\n \n             return containsActualLevel \u0026\u0026 !isWarnComment\n                     || !containsActualLevel \u0026\u0026 isWarnComment;\n         }\n \n         match \u003d SINGLELEVEL_COMMENT_REGEX.matcher(comment);\n         if (match.matches()) {\n             final int expectedLevel \u003d Integer.parseInt(match.group(1));\n \n             return (expectedLevel \u003d\u003d indentInComment) \u0026\u0026 !isWarnComment\n                     || (expectedLevel !\u003d indentInComment) \u0026\u0026 isWarnComment;\n         }\n \n         match \u003d NONSTRICT_LEVEL_COMMENT_REGEX.matcher(comment);\n         if (match.matches()) {\n             final int expectedMinimalIndent \u003d Integer.parseInt(match.group(1));\n \n             return (indentInComment \u003e\u003d expectedMinimalIndent) \u0026\u0026 !isWarnComment\n                     || (indentInComment \u003c expectedMinimalIndent) \u0026\u0026 isWarnComment;\n         }\n \n         throw new IllegalArgumentException();\n     }\n\\ No newline at end of file\n"
    },
    "437986510709d7abc64b59c72779343ac5e77599": {
      "type": "Yintroduced",
      "commitMessage": "Integrate google-style-config-test as Integration Test. #863\n",
      "commitDate": 1433731038000,
      "commitName": "437986510709d7abc64b59c72779343ac5e77599",
      "commitAuthor": "Roman Ivanov"
    }
  }
}