{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "AbstractIndentationTestSupport.java",
  "functionName": "getLinesWithWarnAndCheckComments",
  "functionId": "getLinesWithWarnAndCheckComments___aFileName-String__tabWidth-int",
  "sourceFilePath": "src/it/java/com/google/checkstyle/test/base/AbstractIndentationTestSupport.java",
  "functionStartLine": 63,
  "functionEndLine": 110,
  "changeHistory": [
    "6d290adcd7efb8e9f07d2730e9960c6dc3e713ba",
    "7a4ec11d123dc0bbf7db943af715d19814d2e332",
    "344ea5c012d1814441b5758013a2b035c6e1613a",
    "7d5db23ad528c95e0fbdfcd1293424c6240db07b",
    "9cc86b38df9a086713d1fcdf01b451b41c0d6f65",
    "8142c804e90f6d24a3a5db736f3f1f576766a9a5",
    "4a56989f8ea633b6dfacd1f1ef0a12f5ef6358ba",
    "0b52fefcc898f6f82c627bba9fcdd38a62583b22",
    "437986510709d7abc64b59c72779343ac5e77599"
  ],
  "changeHistoryShort": {
    "6d290adcd7efb8e9f07d2730e9960c6dc3e713ba": "Yfilerename",
    "7a4ec11d123dc0bbf7db943af715d19814d2e332": "Yfilerename",
    "344ea5c012d1814441b5758013a2b035c6e1613a": "Ybodychange",
    "7d5db23ad528c95e0fbdfcd1293424c6240db07b": "Ybodychange",
    "9cc86b38df9a086713d1fcdf01b451b41c0d6f65": "Ybodychange",
    "8142c804e90f6d24a3a5db736f3f1f576766a9a5": "Ymodifierchange",
    "4a56989f8ea633b6dfacd1f1ef0a12f5ef6358ba": "Ybodychange",
    "0b52fefcc898f6f82c627bba9fcdd38a62583b22": "Ybodychange",
    "437986510709d7abc64b59c72779343ac5e77599": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6d290adcd7efb8e9f07d2730e9960c6dc3e713ba": {
      "type": "Yfilerename",
      "commitMessage": "Issue #4592: Added AbstractPathTestSupport, AbstractModuleTestSupport, AbstractIndentationTestSupport and all tests in ITs extend them\n",
      "commitDate": 1501610201000,
      "commitName": "6d290adcd7efb8e9f07d2730e9960c6dc3e713ba",
      "commitAuthor": "Subbu Dantu",
      "commitDateOld": 1501592797000,
      "commitNameOld": "29e131f949950d26e7880da5891d1754776fdeee",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "7a4ec11d123dc0bbf7db943af715d19814d2e332": {
      "type": "Yfilerename",
      "commitMessage": "Issue #2589: Unify IT test code.",
      "commitDate": 1447384120000,
      "commitName": "7a4ec11d123dc0bbf7db943af715d19814d2e332",
      "commitAuthor": "rnveach",
      "commitDateOld": 1447378958000,
      "commitNameOld": "41044d42b8f21ae00792f101a63101bf87d7fd61",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "344ea5c012d1814441b5758013a2b035c6e1613a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2421: enabling checking on it folder",
      "commitDate": 1445797820000,
      "commitName": "344ea5c012d1814441b5758013a2b035c6e1613a",
      "commitAuthor": "rnveach",
      "commitDateOld": 1445797200000,
      "commitNameOld": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n     private static Integer[] getLinesWithWarnAndCheckComments(String aFileName,\n             final int tabWidth)\n                     throws IOException {\n-        List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n+        final List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n         try (BufferedReader br \u003d new BufferedReader(new InputStreamReader(\n                 new FileInputStream(aFileName), StandardCharsets.UTF_8))) {\n             int lineNumber \u003d 1;\n             for (String line \u003d br.readLine(); line !\u003d null; line \u003d br.readLine()) {\n-                Matcher match \u003d LINE_WITH_COMMENT_REGEX.matcher(line);\n+                final Matcher match \u003d LINE_WITH_COMMENT_REGEX.matcher(line);\n                 if (match.matches()) {\n                     final String comment \u003d match.group(1);\n                     final int indentInComment \u003d getIndentFromComment(comment);\n                     final int actualIndent \u003d getLineStart(line, tabWidth);\n \n                     if (actualIndent !\u003d indentInComment) {\n                         throw new IllegalStateException(String.format(Locale.ROOT,\n                                         \"File \\\"%1$s\\\" has incorrect indentation in comment.\"\n                                                         + \"Line %2$d: comment:%3$d, actual:%4$d.\",\n                                         aFileName,\n                                         lineNumber,\n                                         indentInComment,\n                                         actualIndent));\n                     }\n \n                     if (isWarnComment(comment)) {\n                         result.add(lineNumber);\n                     }\n \n                     if (!isCommentConsistent(comment)) {\n                         throw new IllegalStateException(String.format(Locale.ROOT,\n                                         \"File \\\"%1$s\\\" has inconsistent comment on line %2$d\",\n                                         aFileName,\n                                         lineNumber));\n                     }\n                 }\n                 else if (NONEMPTY_LINE_REGEX.matcher(line).matches()) {\n                     throw new IllegalStateException(String.format(Locale.ROOT,\n                                     \"File \\\"%1$s\\\" has no indentation comment or its format \"\n                                                     + \"malformed. Error on line: %2$d(%3$s)\",\n                                     aFileName,\n                                     lineNumber,\n                                     line));\n                 }\n                 lineNumber++;\n             }\n         }\n         return result.toArray(new Integer[result.size()]);\n     }\n\\ No newline at end of file\n"
    },
    "7d5db23ad528c95e0fbdfcd1293424c6240db07b": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1217: goal \u0027testCheck\u0027 was activated in \u0027forbiddenapis\u0027 plugin, violations fixed\n",
      "commitDate": 1444780326000,
      "commitName": "7d5db23ad528c95e0fbdfcd1293424c6240db07b",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": 1440912798000,
      "commitNameOld": "2ed00e0af3ede8d8a276bbde08c5492a42df842d",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 44.76,
      "commitsBetweenForRepo": 348,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n     private static Integer[] getLinesWithWarnAndCheckComments(String aFileName,\n             final int tabWidth)\n                     throws IOException\n     {\n         List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n         try (BufferedReader br \u003d new BufferedReader(new InputStreamReader(\n                 new FileInputStream(aFileName), StandardCharsets.UTF_8))) {\n             int lineNumber \u003d 1;\n             for (String line \u003d br.readLine(); line !\u003d null; line \u003d br.readLine()) {\n                 Matcher match \u003d LINE_WITH_COMMENT_REGEX.matcher(line);\n                 if (match.matches()) {\n                     final String comment \u003d match.group(1);\n                     final int indentInComment \u003d getIndentFromComment(comment);\n                     final int actualIndent \u003d getLineStart(line, tabWidth);\n \n                     if (actualIndent !\u003d indentInComment) {\n-                        throw new IllegalStateException(String.format(\n+                        throw new IllegalStateException(String.format(Locale.ROOT,\n                                         \"File \\\"%1$s\\\" has incorrect indentation in comment.\"\n                                                         + \"Line %2$d: comment:%3$d, actual:%4$d.\",\n                                         aFileName,\n                                         lineNumber,\n                                         indentInComment,\n                                         actualIndent));\n                     }\n \n                     if (isWarnComment(comment)) {\n                         result.add(lineNumber);\n                     }\n \n                     if (!isCommentConsistent(comment)) {\n-                        throw new IllegalStateException(String.format(\n+                        throw new IllegalStateException(String.format(Locale.ROOT,\n                                         \"File \\\"%1$s\\\" has inconsistent comment on line %2$d\",\n                                         aFileName,\n                                         lineNumber));\n                     }\n                 }\n                 else if (NONEMPTY_LINE_REGEX.matcher(line).matches()) {\n-                    throw new IllegalStateException(String.format(\n+                    throw new IllegalStateException(String.format(Locale.ROOT,\n                                     \"File \\\"%1$s\\\" has no indentation comment or its format \"\n                                                     + \"malformed. Error on line: %2$d(%3$s)\",\n                                     aFileName,\n                                     lineNumber,\n                                     line));\n                 }\n                 lineNumber++;\n             }\n         }\n         return result.toArray(new Integer[result.size()]);\n     }\n\\ No newline at end of file\n"
    },
    "9cc86b38df9a086713d1fcdf01b451b41c0d6f65": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1555: Specify encoding explicitly\n\nFixes `ImplicitDefaultCharsetUsage` inspection violations.\n\nDescription:\n\u003eReports method and constructor calls which implicitly use the platform\u0027s default charset. These can produce different results on (e.g. foreign language) systems that use a different default charset, resulting in unexpected behaviour.\n",
      "commitDate": 1440827292000,
      "commitName": "9cc86b38df9a086713d1fcdf01b451b41c0d6f65",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440706791000,
      "commitNameOld": "bf6966b145dc81a08480d9c2e0ee735dc9bf67ad",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 1.39,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,49 @@\n     private static Integer[] getLinesWithWarnAndCheckComments(String aFileName,\n             final int tabWidth)\n                     throws IOException\n     {\n         List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n-        try (BufferedReader br \u003d new BufferedReader(new FileReader(aFileName))) {\n+        try (BufferedReader br \u003d new BufferedReader(new InputStreamReader(\n+                new FileInputStream(aFileName), StandardCharsets.UTF_8))) {\n             int lineNumber \u003d 1;\n             for (String line \u003d br.readLine(); line !\u003d null; line \u003d br.readLine()) {\n                 Matcher match \u003d LINE_WITH_COMMENT_REGEX.matcher(line);\n                 if (match.matches()) {\n                     final String comment \u003d match.group(1);\n                     final int indentInComment \u003d getIndentFromComment(comment);\n                     final int actualIndent \u003d getLineStart(line, tabWidth);\n \n                     if (actualIndent !\u003d indentInComment) {\n                         throw new IllegalStateException(String.format(\n                                         \"File \\\"%1$s\\\" has incorrect indentation in comment.\"\n                                                         + \"Line %2$d: comment:%3$d, actual:%4$d.\",\n                                         aFileName,\n                                         lineNumber,\n                                         indentInComment,\n                                         actualIndent));\n                     }\n \n                     if (isWarnComment(comment)) {\n                         result.add(lineNumber);\n                     }\n \n                     if (!isCommentConsistent(comment)) {\n                         throw new IllegalStateException(String.format(\n                                         \"File \\\"%1$s\\\" has inconsistent comment on line %2$d\",\n                                         aFileName,\n                                         lineNumber));\n                     }\n                 }\n                 else if (NONEMPTY_LINE_REGEX.matcher(line).matches()) {\n                     throw new IllegalStateException(String.format(\n                                     \"File \\\"%1$s\\\" has no indentation comment or its format \"\n                                                     + \"malformed. Error on line: %2$d(%3$s)\",\n                                     aFileName,\n                                     lineNumber,\n                                     line));\n                 }\n                 lineNumber++;\n             }\n         }\n         return result.toArray(new Integer[result.size()]);\n     }\n\\ No newline at end of file\n"
    },
    "8142c804e90f6d24a3a5db736f3f1f576766a9a5": {
      "type": "Ymodifierchange",
      "commitMessage": "Decrease visibility of fields and methods where applicable. #1555\n\nFixes some `WeakerAccess` inspection violations.\n\nDescription:\n\u003eThis inspection reports all fields, methods or classes, found in the specified inspection scope, that may have their access modifier narrowed down.\n",
      "commitDate": 1440705174000,
      "commitName": "8142c804e90f6d24a3a5db736f3f1f576766a9a5",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440679624000,
      "commitNameOld": "15d0f87f156190d739a1ef4903c82c4442923b8a",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.3,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n-    protected static Integer[] getLinesWithWarnAndCheckComments(String aFileName,\n-                    final int tabWidth)\n+    private static Integer[] getLinesWithWarnAndCheckComments(String aFileName,\n+            final int tabWidth)\n                     throws IOException\n     {\n         List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n         try (BufferedReader br \u003d new BufferedReader(new FileReader(aFileName))) {\n             int lineNumber \u003d 1;\n             for (String line \u003d br.readLine(); line !\u003d null; line \u003d br.readLine()) {\n                 Matcher match \u003d LINE_WITH_COMMENT_REGEX.matcher(line);\n                 if (match.matches()) {\n                     final String comment \u003d match.group(1);\n                     final int indentInComment \u003d getIndentFromComment(comment);\n                     final int actualIndent \u003d getLineStart(line, tabWidth);\n \n                     if (actualIndent !\u003d indentInComment) {\n                         throw new IllegalStateException(String.format(\n                                         \"File \\\"%1$s\\\" has incorrect indentation in comment.\"\n                                                         + \"Line %2$d: comment:%3$d, actual:%4$d.\",\n                                         aFileName,\n                                         lineNumber,\n                                         indentInComment,\n                                         actualIndent));\n                     }\n \n                     if (isWarnComment(comment)) {\n                         result.add(lineNumber);\n                     }\n \n                     if (!isCommentConsistent(comment)) {\n                         throw new IllegalStateException(String.format(\n                                         \"File \\\"%1$s\\\" has inconsistent comment on line %2$d\",\n                                         aFileName,\n                                         lineNumber));\n                     }\n                 }\n                 else if (NONEMPTY_LINE_REGEX.matcher(line).matches()) {\n                     throw new IllegalStateException(String.format(\n                                     \"File \\\"%1$s\\\" has no indentation comment or its format \"\n                                                     + \"malformed. Error on line: %2$d(%3$s)\",\n                                     aFileName,\n                                     lineNumber,\n                                     line));\n                 }\n                 lineNumber++;\n             }\n         }\n         return result.toArray(new Integer[result.size()]);\n     }\n\\ No newline at end of file\n"
    },
    "4a56989f8ea633b6dfacd1f1ef0a12f5ef6358ba": {
      "type": "Ybodychange",
      "commitMessage": "Fix too broad scope of variables. #1555\n\nAdditionally, obsolete assertions were removed.\n\nFixes `TooBroadScope` inspection violations.\n\nDescription:\n\u003eReports any variable declarations of which the scope can be narrowed. Especially useful for \"Pascal style\" declarations at the start of a method, but variables with too broad a scope are also often left over after refactorings.\n",
      "commitDate": 1440047415000,
      "commitName": "4a56989f8ea633b6dfacd1f1ef0a12f5ef6358ba",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440041625000,
      "commitNameOld": "0b52fefcc898f6f82c627bba9fcdd38a62583b22",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n     protected static Integer[] getLinesWithWarnAndCheckComments(String aFileName,\n                     final int tabWidth)\n                     throws IOException\n     {\n-        int lineNumber \u003d 1;\n         List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n         try (BufferedReader br \u003d new BufferedReader(new FileReader(aFileName))) {\n+            int lineNumber \u003d 1;\n             for (String line \u003d br.readLine(); line !\u003d null; line \u003d br.readLine()) {\n                 Matcher match \u003d LINE_WITH_COMMENT_REGEX.matcher(line);\n                 if (match.matches()) {\n                     final String comment \u003d match.group(1);\n                     final int indentInComment \u003d getIndentFromComment(comment);\n                     final int actualIndent \u003d getLineStart(line, tabWidth);\n \n                     if (actualIndent !\u003d indentInComment) {\n                         throw new IllegalStateException(String.format(\n                                         \"File \\\"%1$s\\\" has incorrect indentation in comment.\"\n                                                         + \"Line %2$d: comment:%3$d, actual:%4$d.\",\n                                         aFileName,\n                                         lineNumber,\n                                         indentInComment,\n                                         actualIndent));\n                     }\n \n                     if (isWarnComment(comment)) {\n                         result.add(lineNumber);\n                     }\n \n                     if (!isCommentConsistent(comment)) {\n                         throw new IllegalStateException(String.format(\n                                         \"File \\\"%1$s\\\" has inconsistent comment on line %2$d\",\n                                         aFileName,\n                                         lineNumber));\n                     }\n                 }\n                 else if (NONEMPTY_LINE_REGEX.matcher(line).matches()) {\n                     throw new IllegalStateException(String.format(\n                                     \"File \\\"%1$s\\\" has no indentation comment or its format \"\n                                                     + \"malformed. Error on line: %2$d(%3$s)\",\n                                     aFileName,\n                                     lineNumber,\n                                     line));\n                 }\n                 lineNumber++;\n             }\n         }\n         return result.toArray(new Integer[result.size()]);\n     }\n\\ No newline at end of file\n"
    },
    "0b52fefcc898f6f82c627bba9fcdd38a62583b22": {
      "type": "Ybodychange",
      "commitMessage": "Remove usage of prohibited exceptions in test code. #1555\n\nFixes `BadExceptionThrown` inspection violations in test code.\n\nDescription:\n\u003eReports throw statements which throw inappropriate exceptions. One use of this inspection would be to warn of throw statements which throw overly generic exceptions (e.g. java.lang.Exception or java.io.IOException).\n",
      "commitDate": 1440041625000,
      "commitName": "0b52fefcc898f6f82c627bba9fcdd38a62583b22",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1437631122000,
      "commitNameOld": "acbd47a66b01acc392a7bd37ad3a2e65eecd308a",
      "commitAuthorOld": "Aleksandr Ivanov",
      "daysBetweenCommits": 27.9,
      "commitsBetweenForRepo": 370,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n     protected static Integer[] getLinesWithWarnAndCheckComments(String aFileName,\n                     final int tabWidth)\n                     throws IOException\n     {\n         int lineNumber \u003d 1;\n         List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n         try (BufferedReader br \u003d new BufferedReader(new FileReader(aFileName))) {\n             for (String line \u003d br.readLine(); line !\u003d null; line \u003d br.readLine()) {\n                 Matcher match \u003d LINE_WITH_COMMENT_REGEX.matcher(line);\n                 if (match.matches()) {\n                     final String comment \u003d match.group(1);\n                     final int indentInComment \u003d getIndentFromComment(comment);\n                     final int actualIndent \u003d getLineStart(line, tabWidth);\n \n                     if (actualIndent !\u003d indentInComment) {\n-                        throw new RuntimeException(String.format(\n+                        throw new IllegalStateException(String.format(\n                                         \"File \\\"%1$s\\\" has incorrect indentation in comment.\"\n                                                         + \"Line %2$d: comment:%3$d, actual:%4$d.\",\n                                         aFileName,\n                                         lineNumber,\n                                         indentInComment,\n                                         actualIndent));\n                     }\n \n                     if (isWarnComment(comment)) {\n                         result.add(lineNumber);\n                     }\n \n                     if (!isCommentConsistent(comment)) {\n-                        throw new RuntimeException(String.format(\n+                        throw new IllegalStateException(String.format(\n                                         \"File \\\"%1$s\\\" has inconsistent comment on line %2$d\",\n                                         aFileName,\n                                         lineNumber));\n                     }\n                 }\n                 else if (NONEMPTY_LINE_REGEX.matcher(line).matches()) {\n-                    throw new RuntimeException(String.format(\n+                    throw new IllegalStateException(String.format(\n                                     \"File \\\"%1$s\\\" has no indentation comment or its format \"\n                                                     + \"malformed. Error on line: %2$d(%3$s)\",\n                                     aFileName,\n                                     lineNumber,\n                                     line));\n                 }\n                 lineNumber++;\n             }\n         }\n         return result.toArray(new Integer[result.size()]);\n     }\n\\ No newline at end of file\n"
    },
    "437986510709d7abc64b59c72779343ac5e77599": {
      "type": "Yintroduced",
      "commitMessage": "Integrate google-style-config-test as Integration Test. #863\n",
      "commitDate": 1433731038000,
      "commitName": "437986510709d7abc64b59c72779343ac5e77599",
      "commitAuthor": "Roman Ivanov"
    }
  }
}