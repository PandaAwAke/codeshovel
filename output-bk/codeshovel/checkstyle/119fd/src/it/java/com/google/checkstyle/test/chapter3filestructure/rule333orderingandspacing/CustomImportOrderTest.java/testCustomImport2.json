{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "CustomImportOrderTest.java",
  "functionName": "testCustomImport2",
  "functionId": "testCustomImport2",
  "sourceFilePath": "src/it/java/com/google/checkstyle/test/chapter3filestructure/rule333orderingandspacing/CustomImportOrderTest.java",
  "functionStartLine": 69,
  "functionEndLine": 91,
  "changeHistory": [
    "a0273f9f0a68a5ddf5a638cdef383192807bd433",
    "cf436f1d9806016cb1886b5d7ec397f56aedc824",
    "dbd98074e85974695a1ebd5ea1fcd2d0369e6de7",
    "81ad4595fe3a916551d73e467044c87d8462dba6",
    "7a4ec11d123dc0bbf7db943af715d19814d2e332",
    "35ecc0b03fc1b4ad5454873c77a8b2694ee92e74",
    "21c8c76f930874dd6556ac5ad059c69a2c32642f",
    "344ea5c012d1814441b5758013a2b035c6e1613a",
    "58b28a75e171b7a0f0186a8f1161824a82cc5c8e",
    "80f66e1c88a92925c9e44a99792ac6b23ef22447",
    "dc0a1a2fccdf6a642b05dee98206c7dd487162bd",
    "cd12de2a24713a494393912e2277b67770eb79fe",
    "437986510709d7abc64b59c72779343ac5e77599"
  ],
  "changeHistoryShort": {
    "a0273f9f0a68a5ddf5a638cdef383192807bd433": "Ybodychange",
    "cf436f1d9806016cb1886b5d7ec397f56aedc824": "Ybodychange",
    "dbd98074e85974695a1ebd5ea1fcd2d0369e6de7": "Yrename",
    "81ad4595fe3a916551d73e467044c87d8462dba6": "Ybodychange",
    "7a4ec11d123dc0bbf7db943af715d19814d2e332": "Ybodychange",
    "35ecc0b03fc1b4ad5454873c77a8b2694ee92e74": "Yfilerename",
    "21c8c76f930874dd6556ac5ad059c69a2c32642f": "Ybodychange",
    "344ea5c012d1814441b5758013a2b035c6e1613a": "Ybodychange",
    "58b28a75e171b7a0f0186a8f1161824a82cc5c8e": "Yrename",
    "80f66e1c88a92925c9e44a99792ac6b23ef22447": "Yexceptionschange",
    "dc0a1a2fccdf6a642b05dee98206c7dd487162bd": "Ybodychange",
    "cd12de2a24713a494393912e2277b67770eb79fe": "Ybodychange",
    "437986510709d7abc64b59c72779343ac5e77599": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a0273f9f0a68a5ddf5a638cdef383192807bd433": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5431: Remove dependencies of tools.jar\n",
      "commitDate": 1519568864000,
      "commitName": "a0273f9f0a68a5ddf5a638cdef383192807bd433",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": 1515079236000,
      "commitNameOld": "746a9d69125211ff44af1cb37732e919368ba620",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 51.96,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,23 @@\n     public void testCustomImport2() throws Exception {\n         final String[] expected \u003d {\n             \"4: \" + getCheckMessage(clazz, MSG_LEX, \"java.awt.Button.ABORT\",\n                 \"java.io.File.createTempFile\"),\n             \"9: \" + getCheckMessage(clazz, MSG_LEX, \"java.util.*\", \"java.util.StringTokenizer\"),\n             \"11: \" + getCheckMessage(clazz, MSG_LEX, \"java.util.concurrent.*\",\n                 \"java.util.concurrent.AbstractExecutorService\"),\n             \"13: \" + getCheckMessage(clazz, MSG_LEX,\n                 \"com.google.checkstyle.test.chapter2filebasic.rule21filename.*\",\n                 \"java.util.concurrent.AbstractExecutorService\"),\n-            \"14: \" + getCheckMessage(clazz, MSG_LEX, \"com.sun.xml.internal.xsom.impl.scd.Iterators\",\n+            \"14: \" + getCheckMessage(clazz, MSG_LEX,\n+                \"com.google.checkstyle.test.chapter3filestructure.rule3sourcefile.*\",\n                 \"java.util.concurrent.AbstractExecutorService\"),\n             \"16: \" + getCheckMessage(clazz, MSG_LEX, \"com.google.common.reflect.*\",\n                 \"java.util.concurrent.AbstractExecutorService\"),\n         };\n \n         final Configuration checkConfig \u003d getModuleConfig(\"CustomImportOrder\");\n         final String filePath \u003d getPath(\"InputCustomImportOrder2.java\");\n \n         final Integer[] warnList \u003d getLinesWithWarn(filePath);\n         verify(checkConfig, filePath, expected, warnList);\n     }\n\\ No newline at end of file\n"
    },
    "cf436f1d9806016cb1886b5d7ec397f56aedc824": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4592: merged module test support and fileset test support",
      "commitDate": 1501657005000,
      "commitName": "cf436f1d9806016cb1886b5d7ec397f56aedc824",
      "commitAuthor": "rnveach",
      "commitDateOld": 1501610201000,
      "commitNameOld": "6d290adcd7efb8e9f07d2730e9960c6dc3e713ba",
      "commitAuthorOld": "Subbu Dantu",
      "daysBetweenCommits": 0.54,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     public void testCustomImport2() throws Exception {\n \n         final String[] expected \u003d {\n             \"4: \" + getCheckMessage(clazz, MSG_LEX, \"java.awt.Button.ABORT\",\n                 \"java.io.File.createTempFile\"),\n             \"9: \" + getCheckMessage(clazz, MSG_LEX, \"java.util.*\", \"java.util.StringTokenizer\"),\n             \"11: \" + getCheckMessage(clazz, MSG_LEX, \"java.util.concurrent.*\",\n                 \"java.util.concurrent.AbstractExecutorService\"),\n             \"13: \" + getCheckMessage(clazz, MSG_LEX,\n                 \"com.google.checkstyle.test.chapter2filebasic.rule21filename.*\",\n                 \"java.util.concurrent.AbstractExecutorService\"),\n             \"14: \" + getCheckMessage(clazz, MSG_LEX, \"com.sun.xml.internal.xsom.impl.scd.Iterators\",\n                 \"java.util.concurrent.AbstractExecutorService\"),\n             \"16: \" + getCheckMessage(clazz, MSG_LEX, \"com.google.common.reflect.*\",\n                 \"java.util.concurrent.AbstractExecutorService\"),\n         };\n \n-        final Configuration checkConfig \u003d getCheckConfig(\"CustomImportOrder\");\n+        final Configuration checkConfig \u003d getModuleConfig(\"CustomImportOrder\");\n         final String filePath \u003d getPath(\"InputCustomImportOrder2.java\");\n \n         final Integer[] warnList \u003d getLinesWithWarn(filePath);\n         verify(checkConfig, filePath, expected, warnList);\n     }\n\\ No newline at end of file\n"
    },
    "dbd98074e85974695a1ebd5ea1fcd2d0369e6de7": {
      "type": "Yrename",
      "commitMessage": "Issue #4518: fix pmd violations for TestClassWithoutTestCases\n",
      "commitDate": 1498315848000,
      "commitName": "dbd98074e85974695a1ebd5ea1fcd2d0369e6de7",
      "commitAuthor": "vasilyeva",
      "commitDateOld": 1485527514000,
      "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 148.01,
      "commitsBetweenForRepo": 501,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n-    public void customImportTest2() throws Exception {\n+    public void testCustomImport2() throws Exception {\n \n         final String[] expected \u003d {\n             \"4: \" + getCheckMessage(clazz, MSG_LEX, \"java.awt.Button.ABORT\",\n                 \"java.io.File.createTempFile\"),\n             \"9: \" + getCheckMessage(clazz, MSG_LEX, \"java.util.*\", \"java.util.StringTokenizer\"),\n             \"11: \" + getCheckMessage(clazz, MSG_LEX, \"java.util.concurrent.*\",\n                 \"java.util.concurrent.AbstractExecutorService\"),\n             \"13: \" + getCheckMessage(clazz, MSG_LEX,\n                 \"com.google.checkstyle.test.chapter2filebasic.rule21filename.*\",\n                 \"java.util.concurrent.AbstractExecutorService\"),\n             \"14: \" + getCheckMessage(clazz, MSG_LEX, \"com.sun.xml.internal.xsom.impl.scd.Iterators\",\n                 \"java.util.concurrent.AbstractExecutorService\"),\n             \"16: \" + getCheckMessage(clazz, MSG_LEX, \"com.google.common.reflect.*\",\n                 \"java.util.concurrent.AbstractExecutorService\"),\n         };\n \n         final Configuration checkConfig \u003d getCheckConfig(\"CustomImportOrder\");\n         final String filePath \u003d getPath(\"InputCustomImportOrder2.java\");\n \n         final Integer[] warnList \u003d getLinesWithWarn(filePath);\n         verify(checkConfig, filePath, expected, warnList);\n     }\n\\ No newline at end of file\n"
    },
    "81ad4595fe3a916551d73e467044c87d8462dba6": {
      "type": "Ybodychange",
      "commitMessage": "Issue #941: Update import ordering in google_checks.xml according to changes in Google Style guide\n",
      "commitDate": 1478388318000,
      "commitName": "81ad4595fe3a916551d73e467044c87d8462dba6",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": 1458221995000,
      "commitNameOld": "167dd96d8ca503a472bf003f187191d6b0ce586c",
      "commitAuthorOld": "Rasmus Kaj",
      "daysBetweenCommits": 233.41,
      "commitsBetweenForRepo": 407,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     public void customImportTest2() throws Exception {\n \n         final String[] expected \u003d {\n             \"4: \" + getCheckMessage(clazz, MSG_LEX, \"java.awt.Button.ABORT\",\n                 \"java.io.File.createTempFile\"),\n-            \"7: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.List\"),\n-            \"8: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.StringTokenizer\"),\n-            \"9: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.*\"),\n-            \"10: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL,\n+            \"9: \" + getCheckMessage(clazz, MSG_LEX, \"java.util.*\", \"java.util.StringTokenizer\"),\n+            \"11: \" + getCheckMessage(clazz, MSG_LEX, \"java.util.concurrent.*\",\n                 \"java.util.concurrent.AbstractExecutorService\"),\n-            \"11: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.concurrent.*\"),\n-            \"14: \" + getCheckMessage(clazz, MSG_SEPARATOR,\n-                \"com.sun.xml.internal.xsom.impl.scd.Iterators\"),\n-            \"16: \" + getCheckMessage(clazz, MSG_ORDER, SPECIAL, STD,\n-                \"com.google.common.reflect.*\"),\n+            \"13: \" + getCheckMessage(clazz, MSG_LEX,\n+                \"com.google.checkstyle.test.chapter2filebasic.rule21filename.*\",\n+                \"java.util.concurrent.AbstractExecutorService\"),\n+            \"14: \" + getCheckMessage(clazz, MSG_LEX, \"com.sun.xml.internal.xsom.impl.scd.Iterators\",\n+                \"java.util.concurrent.AbstractExecutorService\"),\n+            \"16: \" + getCheckMessage(clazz, MSG_LEX, \"com.google.common.reflect.*\",\n+                \"java.util.concurrent.AbstractExecutorService\"),\n         };\n \n         final Configuration checkConfig \u003d getCheckConfig(\"CustomImportOrder\");\n         final String filePath \u003d getPath(\"InputCustomImportOrder2.java\");\n \n         final Integer[] warnList \u003d getLinesWithWarn(filePath);\n         verify(checkConfig, filePath, expected, warnList);\n     }\n\\ No newline at end of file\n"
    },
    "7a4ec11d123dc0bbf7db943af715d19814d2e332": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2589: Unify IT test code.",
      "commitDate": 1447384120000,
      "commitName": "7a4ec11d123dc0bbf7db943af715d19814d2e332",
      "commitAuthor": "rnveach",
      "commitDateOld": 1447252721000,
      "commitNameOld": "6c49a05cb65fe91c3d71ebd301f6b3a3a49f020f",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.52,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     public void customImportTest2() throws Exception {\n \n         final String[] expected \u003d {\n             \"4: \" + getCheckMessage(clazz, MSG_LEX, \"java.awt.Button.ABORT\",\n                 \"java.io.File.createTempFile\"),\n             \"7: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.List\"),\n             \"8: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.StringTokenizer\"),\n             \"9: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.*\"),\n             \"10: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL,\n                 \"java.util.concurrent.AbstractExecutorService\"),\n             \"11: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.concurrent.*\"),\n             \"14: \" + getCheckMessage(clazz, MSG_SEPARATOR,\n                 \"com.sun.xml.internal.xsom.impl.scd.Iterators\"),\n             \"16: \" + getCheckMessage(clazz, MSG_ORDER, SPECIAL, STD,\n                 \"com.google.common.reflect.*\"),\n         };\n \n-        final Configuration checkConfig \u003d builder.getCheckConfig(\"CustomImportOrder\");\n-        final String filePath \u003d builder.getFilePath(\"InputCustomImportOrder2\");\n+        final Configuration checkConfig \u003d getCheckConfig(\"CustomImportOrder\");\n+        final String filePath \u003d getPath(\"InputCustomImportOrder2.java\");\n \n-        final Integer[] warnList \u003d builder.getLinesWithWarn(filePath);\n+        final Integer[] warnList \u003d getLinesWithWarn(filePath);\n         verify(checkConfig, filePath, expected, warnList);\n     }\n\\ No newline at end of file\n"
    },
    "35ecc0b03fc1b4ad5454873c77a8b2694ee92e74": {
      "type": "Yfilerename",
      "commitMessage": "Issue #2540: fix spelling errors in it packages",
      "commitDate": 1446999267000,
      "commitName": "35ecc0b03fc1b4ad5454873c77a8b2694ee92e74",
      "commitAuthor": "rnveach",
      "commitDateOld": 1446989033000,
      "commitNameOld": "339e0ff9a6694e2724027c5e41028d2cd7b138cb",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "21c8c76f930874dd6556ac5ad059c69a2c32642f": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2161: unify it input file names for chapter3filestructure",
      "commitDate": 1446988168000,
      "commitName": "21c8c76f930874dd6556ac5ad059c69a2c32642f",
      "commitAuthor": "rnveach",
      "commitDateOld": 1445797820000,
      "commitNameOld": "344ea5c012d1814441b5758013a2b035c6e1613a",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 13.78,
      "commitsBetweenForRepo": 104,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     public void customImportTest2() throws Exception {\n \n         final String[] expected \u003d {\n             \"4: \" + getCheckMessage(clazz, MSG_LEX, \"java.awt.Button.ABORT\",\n                 \"java.io.File.createTempFile\"),\n             \"7: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.List\"),\n             \"8: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.StringTokenizer\"),\n             \"9: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.*\"),\n             \"10: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL,\n                 \"java.util.concurrent.AbstractExecutorService\"),\n             \"11: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.concurrent.*\"),\n             \"14: \" + getCheckMessage(clazz, MSG_SEPARATOR,\n                 \"com.sun.xml.internal.xsom.impl.scd.Iterators\"),\n             \"16: \" + getCheckMessage(clazz, MSG_ORDER, SPECIAL, STD,\n                 \"com.google.common.reflect.*\"),\n         };\n \n         final Configuration checkConfig \u003d builder.getCheckConfig(\"CustomImportOrder\");\n-        final String filePath \u003d builder.getFilePath(\"CustomImportOrderInput_2\");\n+        final String filePath \u003d builder.getFilePath(\"InputCustomImportOrder2\");\n \n         final Integer[] warnList \u003d builder.getLinesWithWarn(filePath);\n         verify(checkConfig, filePath, expected, warnList);\n     }\n\\ No newline at end of file\n"
    },
    "344ea5c012d1814441b5758013a2b035c6e1613a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2421: enabling checking on it folder",
      "commitDate": 1445797820000,
      "commitName": "344ea5c012d1814441b5758013a2b035c6e1613a",
      "commitAuthor": "rnveach",
      "commitDateOld": 1445782886000,
      "commitNameOld": "a2ae6fa3a82abc0562772af74de80bee2f927cd8",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,23 @@\n     public void customImportTest2() throws Exception {\n \n         final String[] expected \u003d {\n-            \"4: \" + getCheckMessage(clazz, MSG_LEX, \"java.awt.Button.ABORT\", \"java.io.File.createTempFile\"),\n+            \"4: \" + getCheckMessage(clazz, MSG_LEX, \"java.awt.Button.ABORT\",\n+                \"java.io.File.createTempFile\"),\n             \"7: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.List\"),\n             \"8: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.StringTokenizer\"),\n             \"9: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.*\"),\n-            \"10: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.concurrent.AbstractExecutorService\"),\n+            \"10: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL,\n+                \"java.util.concurrent.AbstractExecutorService\"),\n             \"11: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.concurrent.*\"),\n-            \"14: \" + getCheckMessage(clazz, MSG_SEPARATOR, \"com.sun.xml.internal.xsom.impl.scd.Iterators\"),\n-            \"16: \" + getCheckMessage(clazz, MSG_ORDER, SPECIAL, STD, \"com.google.common.reflect.*\"),\n+            \"14: \" + getCheckMessage(clazz, MSG_SEPARATOR,\n+                \"com.sun.xml.internal.xsom.impl.scd.Iterators\"),\n+            \"16: \" + getCheckMessage(clazz, MSG_ORDER, SPECIAL, STD,\n+                \"com.google.common.reflect.*\"),\n         };\n \n-        Configuration checkConfig \u003d builder.getCheckConfig(\"CustomImportOrder\");\n-        String filePath \u003d builder.getFilePath(\"CustomImportOrderInput_2\");\n+        final Configuration checkConfig \u003d builder.getCheckConfig(\"CustomImportOrder\");\n+        final String filePath \u003d builder.getFilePath(\"CustomImportOrderInput_2\");\n \n-        Integer[] warnList \u003d builder.getLinesWithWarn(filePath);\n+        final Integer[] warnList \u003d builder.getLinesWithWarn(filePath);\n         verify(checkConfig, filePath, expected, warnList);\n     }\n\\ No newline at end of file\n"
    },
    "58b28a75e171b7a0f0186a8f1161824a82cc5c8e": {
      "type": "Yrename",
      "commitMessage": "Issue #2271: Remove underscores from method names\n",
      "commitDate": 1444162220000,
      "commitName": "58b28a75e171b7a0f0186a8f1161824a82cc5c8e",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1441541856000,
      "commitNameOld": "4d8d047f465f9eb101390da63ee62a735fbedba5",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 30.33,
      "commitsBetweenForRepo": 147,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n-    public void customImportTest_2() throws Exception {\n+    public void customImportTest2() throws Exception {\n         \n         final String[] expected \u003d {\n             \"4: \" + getCheckMessage(clazz, MSG_LEX, \"java.awt.Button.ABORT\", \"java.io.File.createTempFile\"),\n             \"7: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.List\"),\n             \"8: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.StringTokenizer\"),\n             \"9: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.*\"),\n             \"10: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.concurrent.AbstractExecutorService\"),\n             \"11: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.concurrent.*\"),\n             \"14: \" + getCheckMessage(clazz, MSG_SEPARATOR, \"com.sun.xml.internal.xsom.impl.scd.Iterators\"),\n             \"16: \" + getCheckMessage(clazz, MSG_ORDER, SPECIAL, STD, \"com.google.common.reflect.*\"),\n         };\n \n         Configuration checkConfig \u003d builder.getCheckConfig(\"CustomImportOrder\");\n         String filePath \u003d builder.getFilePath(\"CustomImportOrderInput_2\");\n         \n         Integer[] warnList \u003d builder.getLinesWithWarn(filePath);\n         verify(checkConfig, filePath, expected, warnList);\n     }\n\\ No newline at end of file\n"
    },
    "80f66e1c88a92925c9e44a99792ac6b23ef22447": {
      "type": "Yexceptionschange",
      "commitMessage": "Use only one exception on throws list for tests. #1555\n\nFixes `MultipleExceptionsDeclaredOnTestMethod` inspection violation\n\nDescription:\n\u003eReports JUnit test methods with more than one exception declared in the throws clause. Such a throws clause can be more concisely declared as `throws Exception`.\n",
      "commitDate": 1440498266000,
      "commitName": "80f66e1c88a92925c9e44a99792ac6b23ef22447",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440498001000,
      "commitNameOld": "dc0a1a2fccdf6a642b05dee98206c7dd487162bd",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n-    public void customImportTest_2() throws IOException, Exception {\n+    public void customImportTest_2() throws Exception {\n         \n         final String[] expected \u003d {\n             \"4: \" + getCheckMessage(clazz, MSG_LEX, \"java.awt.Button.ABORT\", \"java.io.File.createTempFile\"),\n             \"7: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.List\"),\n             \"8: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.StringTokenizer\"),\n             \"9: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.*\"),\n             \"10: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.concurrent.AbstractExecutorService\"),\n             \"11: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.concurrent.*\"),\n             \"14: \" + getCheckMessage(clazz, MSG_SEPARATOR, \"com.sun.xml.internal.xsom.impl.scd.Iterators\"),\n             \"16: \" + getCheckMessage(clazz, MSG_ORDER, SPECIAL, STD, \"com.google.common.reflect.*\"),\n         };\n \n         Configuration checkConfig \u003d builder.getCheckConfig(\"CustomImportOrder\");\n         String filePath \u003d builder.getFilePath(\"CustomImportOrderInput_2\");\n         \n         Integer[] warnList \u003d builder.getLinesWithWarn(filePath);\n         verify(checkConfig, filePath, expected, warnList);\n     }\n\\ No newline at end of file\n"
    },
    "dc0a1a2fccdf6a642b05dee98206c7dd487162bd": {
      "type": "Ybodychange",
      "commitMessage": "Mark fields as private static final in test code. #1555\n\nFixes `FieldMayBeStatic` inspection violations in test code.\n\nDescription:\n\u003eReports any instance variables which may safely be made static. A field may be static if it is declared final, and is initialized with a constant\n",
      "commitDate": 1440498001000,
      "commitName": "dc0a1a2fccdf6a642b05dee98206c7dd487162bd",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440243521000,
      "commitNameOld": "a13ebd482ce5dd891ba99d4c22a7cd5ff7d8e2dc",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 2.95,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n     public void customImportTest_2() throws IOException, Exception {\n         \n         final String[] expected \u003d {\n-            \"4: \" + getCheckMessage(clazz, msgLex, \"java.awt.Button.ABORT\", \"java.io.File.createTempFile\"),\n-            \"7: \" + getCheckMessage(clazz, msgOrder, STD, SPECIAL, \"java.util.List\"),\n-            \"8: \" + getCheckMessage(clazz, msgOrder, STD, SPECIAL, \"java.util.StringTokenizer\"),\n-            \"9: \" + getCheckMessage(clazz, msgOrder, STD, SPECIAL, \"java.util.*\"),\n-            \"10: \" + getCheckMessage(clazz, msgOrder, STD, SPECIAL, \"java.util.concurrent.AbstractExecutorService\"),\n-            \"11: \" + getCheckMessage(clazz, msgOrder, STD, SPECIAL, \"java.util.concurrent.*\"),\n-            \"14: \" + getCheckMessage(clazz, msgSeparator, \"com.sun.xml.internal.xsom.impl.scd.Iterators\"),\n-            \"16: \" + getCheckMessage(clazz, msgOrder, SPECIAL, STD, \"com.google.common.reflect.*\"),\n+            \"4: \" + getCheckMessage(clazz, MSG_LEX, \"java.awt.Button.ABORT\", \"java.io.File.createTempFile\"),\n+            \"7: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.List\"),\n+            \"8: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.StringTokenizer\"),\n+            \"9: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.*\"),\n+            \"10: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.concurrent.AbstractExecutorService\"),\n+            \"11: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.concurrent.*\"),\n+            \"14: \" + getCheckMessage(clazz, MSG_SEPARATOR, \"com.sun.xml.internal.xsom.impl.scd.Iterators\"),\n+            \"16: \" + getCheckMessage(clazz, MSG_ORDER, SPECIAL, STD, \"com.google.common.reflect.*\"),\n         };\n \n         Configuration checkConfig \u003d builder.getCheckConfig(\"CustomImportOrder\");\n         String filePath \u003d builder.getFilePath(\"CustomImportOrderInput_2\");\n         \n         Integer[] warnList \u003d builder.getLinesWithWarn(filePath);\n         verify(checkConfig, filePath, expected, warnList);\n     }\n\\ No newline at end of file\n"
    },
    "cd12de2a24713a494393912e2277b67770eb79fe": {
      "type": "Ybodychange",
      "commitMessage": "Extended messages for CustomImportOrder #1648\n",
      "commitDate": 1439698510000,
      "commitName": "cd12de2a24713a494393912e2277b67770eb79fe",
      "commitAuthor": "Aleksandr Ivanov",
      "commitDateOld": 1438566092000,
      "commitNameOld": "fd794d428cc0854ddd4d416f0208d49f1ee9cbe1",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 13.11,
      "commitsBetweenForRepo": 185,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n     public void customImportTest_2() throws IOException, Exception {\n         \n         final String[] expected \u003d {\n-            \"4: \" + getCheckMessage(clazz, msgLex, \"java.awt.Button.ABORT\"),\n-            \"7: \" + getCheckMessage(clazz, msgOrder, \"STANDARD_JAVA_PACKAGE\"),\n-            \"8: \" + getCheckMessage(clazz, msgOrder, \"STANDARD_JAVA_PACKAGE\"),\n-            \"9: \" + getCheckMessage(clazz, msgOrder, \"STANDARD_JAVA_PACKAGE\"),\n-            \"10: \" + getCheckMessage(clazz, msgOrder, \"STANDARD_JAVA_PACKAGE\"),\n-            \"11: \" + getCheckMessage(clazz, msgOrder, \"STANDARD_JAVA_PACKAGE\"),\n+            \"4: \" + getCheckMessage(clazz, msgLex, \"java.awt.Button.ABORT\", \"java.io.File.createTempFile\"),\n+            \"7: \" + getCheckMessage(clazz, msgOrder, STD, SPECIAL, \"java.util.List\"),\n+            \"8: \" + getCheckMessage(clazz, msgOrder, STD, SPECIAL, \"java.util.StringTokenizer\"),\n+            \"9: \" + getCheckMessage(clazz, msgOrder, STD, SPECIAL, \"java.util.*\"),\n+            \"10: \" + getCheckMessage(clazz, msgOrder, STD, SPECIAL, \"java.util.concurrent.AbstractExecutorService\"),\n+            \"11: \" + getCheckMessage(clazz, msgOrder, STD, SPECIAL, \"java.util.concurrent.*\"),\n             \"14: \" + getCheckMessage(clazz, msgSeparator, \"com.sun.xml.internal.xsom.impl.scd.Iterators\"),\n-            \"16: \" + getCheckMessage(clazz, msgOrder, \"SPECIAL_IMPORTS\"),\n+            \"16: \" + getCheckMessage(clazz, msgOrder, SPECIAL, STD, \"com.google.common.reflect.*\"),\n         };\n \n         Configuration checkConfig \u003d builder.getCheckConfig(\"CustomImportOrder\");\n         String filePath \u003d builder.getFilePath(\"CustomImportOrderInput_2\");\n         \n         Integer[] warnList \u003d builder.getLinesWithWarn(filePath);\n         verify(checkConfig, filePath, expected, warnList);\n     }\n\\ No newline at end of file\n"
    },
    "437986510709d7abc64b59c72779343ac5e77599": {
      "type": "Yintroduced",
      "commitMessage": "Integrate google-style-config-test as Integration Test. #863\n",
      "commitDate": 1433731038000,
      "commitName": "437986510709d7abc64b59c72779343ac5e77599",
      "commitAuthor": "Roman Ivanov"
    }
  }
}