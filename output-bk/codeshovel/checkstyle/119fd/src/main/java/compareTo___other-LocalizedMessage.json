{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "java",
  "functionId": "compareTo___other-LocalizedMessage",
  "sourceFilePath": "src/main/java",
  "functionStartLine": 0,
  "functionEndLine": 490,
  "changeHistory": [
    "78de3dc771531cfee50a60ff2cee80c46b83c43b",
    "a244f057057913003dd17e952ee76a844f0fb76b",
    "0da1e4d980420f6abb465af441e5ced254698273",
    "23c8774d2e2fd245de1e5df02758fd23702c565e",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "b94bac0719851b65b59b4aafc5bd3ef029321ed7",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "f1afaf83f39b83cc3bd07a2388448b262652a76b",
    "8d6a11074ccb67a8f5cf8abe7969c75afa208dbd",
    "bf31a252e3e45d28fd7ae7971bbe925d3ab03489",
    "672b27dd5551de63a1fb08d8ea80376d70f2aa60",
    "c682b5725d22afc38bf19d9667b23a7deab6d8c3"
  ],
  "changeHistoryShort": {
    "78de3dc771531cfee50a60ff2cee80c46b83c43b": "Ybodychange",
    "a244f057057913003dd17e952ee76a844f0fb76b": "Ybodychange",
    "0da1e4d980420f6abb465af441e5ced254698273": "Ybodychange",
    "23c8774d2e2fd245de1e5df02758fd23702c565e": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "b94bac0719851b65b59b4aafc5bd3ef029321ed7": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "f1afaf83f39b83cc3bd07a2388448b262652a76b": "Ymultichange(Yparameterchange,Ybodychange)",
    "8d6a11074ccb67a8f5cf8abe7969c75afa208dbd": "Ybodychange",
    "bf31a252e3e45d28fd7ae7971bbe925d3ab03489": "Ybodychange",
    "672b27dd5551de63a1fb08d8ea80376d70f2aa60": "Yfilerename",
    "c682b5725d22afc38bf19d9667b23a7deab6d8c3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "78de3dc771531cfee50a60ff2cee80c46b83c43b": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4607: Added moduleId to violation messages\n",
      "commitDate": 1502399664000,
      "commitName": "78de3dc771531cfee50a60ff2cee80c46b83c43b",
      "commitAuthor": "Luolc",
      "commitDateOld": 1501133009000,
      "commitNameOld": "e0f764de8962100ff1fc3ab96f33e7ef5fb7fd03",
      "commitAuthorOld": "Timur",
      "daysBetweenCommits": 14.66,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,27 @@\n     public int compareTo(LocalizedMessage other) {\n-        int result \u003d Integer.compare(lineNo, other.lineNo);\n+        final int result;\n \n         if (lineNo \u003d\u003d other.lineNo) {\n             if (columnNo \u003d\u003d other.columnNo) {\n-                result \u003d getMessage().compareTo(other.getMessage());\n+                if (Objects.equals(moduleId, other.moduleId)) {\n+                    result \u003d getMessage().compareTo(other.getMessage());\n+                }\n+                else if (moduleId \u003d\u003d null) {\n+                    result \u003d -1;\n+                }\n+                else if (other.moduleId \u003d\u003d null) {\n+                    result \u003d 1;\n+                }\n+                else {\n+                    result \u003d moduleId.compareTo(other.moduleId);\n+                }\n             }\n             else {\n                 result \u003d Integer.compare(columnNo, other.columnNo);\n             }\n         }\n+        else {\n+            result \u003d Integer.compare(lineNo, other.lineNo);\n+        }\n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "a244f057057913003dd17e952ee76a844f0fb76b": {
      "type": "Ybodychange",
      "commitMessage": "Remove calls to simple getters withing classes. #1555\n\nFixes `CallToSimpleGetterInClass` inspection violations.\n\nDescription:\n\u003eReports any calls to a simple property getter from within the property\u0027s class. A simple property getter is defined as one which simply returns the value of a field, and does no other calculation. Such simple getter calls may be safely inlined, at a small performance improvement. Some coding standards also suggest against the use of simple getters for code clarity reasons.\n",
      "commitDate": 1440497151000,
      "commitName": "a244f057057913003dd17e952ee76a844f0fb76b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440243789000,
      "commitNameOld": "abfc952fd0ed88f6246b1d969a8a980ea63f0bd6",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 2.93,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n     public int compareTo(LocalizedMessage other) {\n-        int result \u003d Integer.compare(getLineNo(), other.getLineNo());\n+        int result \u003d Integer.compare(lineNo, other.lineNo);\n \n-        if (getLineNo() \u003d\u003d other.getLineNo()) {\n-            if (getColumnNo() \u003d\u003d other.getColumnNo()) {\n+        if (lineNo \u003d\u003d other.lineNo) {\n+            if (columnNo \u003d\u003d other.columnNo) {\n                 result \u003d getMessage().compareTo(other.getMessage());\n             }\n             else {\n-                result \u003d Integer.compare(getColumnNo(), other.getColumnNo());\n+                result \u003d Integer.compare(columnNo, other.columnNo);\n             }\n         }\n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "0da1e4d980420f6abb465af441e5ced254698273": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: ReturnCount violations (partial fix)\n",
      "commitDate": 1440047165000,
      "commitName": "0da1e4d980420f6abb465af441e5ced254698273",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": 1439955956000,
      "commitNameOld": "bf3e77cc87f01b9ea0d205933749770398fa623b",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 1.06,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,13 @@\n     public int compareTo(LocalizedMessage other) {\n+        int result \u003d Integer.compare(getLineNo(), other.getLineNo());\n+\n         if (getLineNo() \u003d\u003d other.getLineNo()) {\n             if (getColumnNo() \u003d\u003d other.getColumnNo()) {\n-                return getMessage().compareTo(other.getMessage());\n+                result \u003d getMessage().compareTo(other.getMessage());\n             }\n-            return Integer.compare(getColumnNo(), other.getColumnNo());\n+            else {\n+                result \u003d Integer.compare(getColumnNo(), other.getColumnNo());\n+            }\n         }\n-        return Integer.compare(getLineNo(), other.getLineNo());\n+        return result;\n     }\n\\ No newline at end of file\n"
    },
    "23c8774d2e2fd245de1e5df02758fd23702c565e": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: AvoidInlineConditional violations fixed\n",
      "commitDate": 1439784080000,
      "commitName": "23c8774d2e2fd245de1e5df02758fd23702c565e",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": 1439356761000,
      "commitNameOld": "3bd699bd593414d63c7139aa410f13ec8341a027",
      "commitAuthorOld": "Ruslan Diachenko",
      "daysBetweenCommits": 4.95,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,9 @@\n     public int compareTo(LocalizedMessage other) {\n         if (getLineNo() \u003d\u003d other.getLineNo()) {\n             if (getColumnNo() \u003d\u003d other.getColumnNo()) {\n                 return getMessage().compareTo(other.getMessage());\n             }\n-            return getColumnNo() \u003c other.getColumnNo() ? -1 : 1;\n+            return Integer.compare(getColumnNo(), other.getColumnNo());\n         }\n-\n-        return getLineNo() \u003c other.getLineNo() ? -1 : 1;\n+        return Integer.compare(getLineNo(), other.getLineNo());\n     }\n\\ No newline at end of file\n"
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": 1426023398000,
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1425602876000,
      "commitNameOld": "f7828693395f71a6ae99710f3fab44cb8a66ea51",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 4.87,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,11 @@\n     public int compareTo(LocalizedMessage other)\n     {\n         if (getLineNo() \u003d\u003d other.getLineNo()) {\n             if (getColumnNo() \u003d\u003d other.getColumnNo()) {\n                 return getMessage().compareTo(other.getMessage());\n             }\n-            return (getColumnNo() \u003c other.getColumnNo()) ? -1 : 1;\n+            return getColumnNo() \u003c other.getColumnNo() ? -1 : 1;\n         }\n \n-        return (getLineNo() \u003c other.getLineNo()) ? -1 : 1;\n+        return getLineNo() \u003c other.getLineNo() ? -1 : 1;\n     }\n\\ No newline at end of file\n"
    },
    "b94bac0719851b65b59b4aafc5bd3ef029321ed7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, api, #512\n",
      "commitDate": 1421677181000,
      "commitName": "b94bac0719851b65b59b4aafc5bd3ef029321ed7",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "f1afaf83f39b83cc3bd07a2388448b262652a76b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Finish of adding generics.\n",
      "commitDate": 1197706480000,
      "commitName": "f1afaf83f39b83cc3bd07a2388448b262652a76b",
      "commitAuthor": "Oliver Burn",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "8d6a11074ccb67a8f5cf8abe7969c75afa208dbd": {
      "type": "Ybodychange",
      "commitMessage": "Fixed bug in which a check logs multiple LocalizedMessages with identical\n line, column, and key; and only the first such message is added. For\nexample, this occurs with TranslationCheck.\n",
      "commitDate": 1052223407000,
      "commitName": "8d6a11074ccb67a8f5cf8abe7969c75afa208dbd",
      "commitAuthor": "Rick Giles",
      "commitDateOld": 1048708350000,
      "commitNameOld": "d216ec75255a120ce7c24e51da7df63a2b9864de",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 40.68,
      "commitsBetweenForRepo": 73,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,12 @@\n     public int compareTo(Object aOther)\n     {\n         final LocalizedMessage lt \u003d (LocalizedMessage) aOther;\n         if (getLineNo() \u003d\u003d lt.getLineNo()) {\n             if (getColumnNo() \u003d\u003d lt.getColumnNo()) {\n-                return mKey.compareTo(lt.mKey);\n+                return getMessage().compareTo(lt.getMessage());\n             }\n             return (getColumnNo() \u003c lt.getColumnNo()) ? -1 : 1;\n         }\n \n         return (getLineNo() \u003c lt.getLineNo()) ? -1 : 1;\n     }\n\\ No newline at end of file\n"
    },
    "bf31a252e3e45d28fd7ae7971bbe925d3ab03489": {
      "type": "Ybodychange",
      "commitMessage": "ensure that equals() is consistent with compareTo()\nas advised in the documentation of compareTo()\n",
      "commitDate": 1041435910000,
      "commitName": "bf31a252e3e45d28fd7ae7971bbe925d3ab03489",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": 1041433786000,
      "commitNameOld": "ac04a4e9fb3ea0434a615322a18afd4f65921133",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,12 @@\n     public int compareTo(Object aOther)\n     {\n         final LocalizedMessage lt \u003d (LocalizedMessage) aOther;\n         if (getLineNo() \u003d\u003d lt.getLineNo()) {\n             if (getColumnNo() \u003d\u003d lt.getColumnNo()) {\n-                return 0;\n+                return mKey.compareTo(lt.mKey);\n             }\n             return (getColumnNo() \u003c lt.getColumnNo()) ? -1 : 1;\n         }\n \n         return (getLineNo() \u003c lt.getLineNo()) ? -1 : 1;\n     }\n\\ No newline at end of file\n"
    },
    "672b27dd5551de63a1fb08d8ea80376d70f2aa60": {
      "type": "Yfilerename",
      "commitMessage": "Moved all the Localization stuff into the api directory. The plan is reused\nthe localisation support in the checks.\n",
      "commitDate": 1032266010000,
      "commitName": "672b27dd5551de63a1fb08d8ea80376d70f2aa60",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1032152891000,
      "commitNameOld": "ffb17cde0f6351bdf2f2e8cf655fa7f7a3cae827",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 1.31,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "c682b5725d22afc38bf19d9667b23a7deab6d8c3": {
      "type": "Yintroduced",
      "commitMessage": "Major rework to support localized error messages. Inspired by patch 580410. At\nthe moment it is not possible to override the system locale, this probably\nshould be added.\n",
      "commitDate": 1028988900000,
      "commitName": "c682b5725d22afc38bf19d9667b23a7deab6d8c3",
      "commitAuthor": "Oliver Burn"
    }
  }
}