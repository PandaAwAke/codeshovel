{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "MethodNameCheck.java",
  "functionName": "visitToken",
  "functionId": "visitToken___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheck.java",
  "functionStartLine": 116,
  "functionEndLine": 143,
  "changeHistory": [
    "4d6e2376db89b69167de867bfc28f8d8624a6b78",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "8ad4aebb66a1b90ac135e05f8062423028e3be8e",
    "750b733bd124eaea34d4692a1bb8d0fd0fe90976",
    "55435babb6bc6640bc66161743ffbde93a3c458b",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "a6471e8a2608cbe29b26da7c442aff2ebe4de236",
    "7cb8afb266fbada9792b9e04eeb9cef3ec10a3cc"
  ],
  "changeHistoryShort": {
    "4d6e2376db89b69167de867bfc28f8d8624a6b78": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "8ad4aebb66a1b90ac135e05f8062423028e3be8e": "Ybodychange",
    "750b733bd124eaea34d4692a1bb8d0fd0fe90976": "Ymultichange(Yparameterchange,Ybodychange)",
    "55435babb6bc6640bc66161743ffbde93a3c458b": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "a6471e8a2608cbe29b26da7c442aff2ebe4de236": "Ybodychange",
    "7cb8afb266fbada9792b9e04eeb9cef3ec10a3cc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4d6e2376db89b69167de867bfc28f8d8624a6b78": {
      "type": "Ybodychange",
      "commitMessage": "Move constants to left side of comparison. #1555\n\nFixes `ConstantOnLHSOfComparison` inspection violations.\n\nDescription:\n\u003eReports on comparison operations with constant values on their left-hand side. Some coding conventions specify that constants should be on the right-hand side of comparisons.\n",
      "commitDate": 1439084780000,
      "commitName": "4d6e2376db89b69167de867bfc28f8d8624a6b78",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1439011412000,
      "commitNameOld": "186625600d7678f597f56aa6a83d4b0a89e1fe35",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 0.85,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n     public void visitToken(DetailAST ast) {\n         if (!AnnotationUtility.containsAnnotation(ast, OVERRIDE)\n             \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, CANONICAL_OVERRIDE)) {\n             super.visitToken(ast); // Will check the name against the format.\n         }\n \n         if (!allowClassName) {\n             final DetailAST method \u003d\n                 ast.findFirstToken(TokenTypes.IDENT);\n             //in all cases this will be the classDef type except anon inner\n             //with anon inner classes this will be the Literal_New keyword\n             final DetailAST classDefOrNew \u003d ast.getParent().getParent();\n             final DetailAST classIdent \u003d\n                 classDefOrNew.findFirstToken(TokenTypes.IDENT);\n             // Following logic is to handle when a classIdent can not be\n             // found. This is when you have a Literal_New keyword followed\n             // a DOT, which is when you have:\n             // new Outclass.InnerInterface(x) { ... }\n             // Such a rare case, will not have the logic to handle parsing\n             // down the tree looking for the first ident.\n-            if (null !\u003d classIdent\n+            if (classIdent !\u003d null\n                 \u0026\u0026 method.getText().equals(classIdent.getText())) {\n                 log(method.getLineNo(), method.getColumnNo(),\n                     MSG_KEY, method.getText());\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": 1426023398000,
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1425602876000,
      "commitNameOld": "f7828693395f71a6ae99710f3fab44cb8a66ea51",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 4.87,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     public void visitToken(DetailAST ast)\n     {\n         if (!AnnotationUtility.containsAnnotation(ast, OVERRIDE)\n             \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, CANONICAL_OVERRIDE))\n         {\n             super.visitToken(ast); // Will check the name against the format.\n         }\n \n         if (!allowClassName) {\n             final DetailAST method \u003d\n                 ast.findFirstToken(TokenTypes.IDENT);\n             //in all cases this will be the classDef type except anon inner\n             //with anon inner classes this will be the Literal_New keyword\n             final DetailAST classDefOrNew \u003d ast.getParent().getParent();\n             final DetailAST classIdent \u003d\n                 classDefOrNew.findFirstToken(TokenTypes.IDENT);\n             // Following logic is to handle when a classIdent can not be\n             // found. This is when you have a Literal_New keyword followed\n             // a DOT, which is when you have:\n             // new Outclass.InnerInterface(x) { ... }\n             // Such a rare case, will not have the logic to handle parsing\n             // down the tree looking for the first ident.\n-            if ((null !\u003d classIdent)\n+            if (null !\u003d classIdent\n                 \u0026\u0026 method.getText().equals(classIdent.getText()))\n             {\n                 log(method.getLineNo(), method.getColumnNo(),\n                     MSG_KEY, method.getText());\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "8ad4aebb66a1b90ac135e05f8062423028e3be8e": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, naming package, issue #537\n",
      "commitDate": 1424437366000,
      "commitName": "8ad4aebb66a1b90ac135e05f8062423028e3be8e",
      "commitAuthor": "alexkravin",
      "commitDateOld": 1424294072000,
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     public void visitToken(DetailAST ast)\n     {\n         if (!AnnotationUtility.containsAnnotation(ast, OVERRIDE)\n             \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, CANONICAL_OVERRIDE))\n         {\n             super.visitToken(ast); // Will check the name against the format.\n         }\n \n         if (!allowClassName) {\n             final DetailAST method \u003d\n                 ast.findFirstToken(TokenTypes.IDENT);\n             //in all cases this will be the classDef type except anon inner\n             //with anon inner classes this will be the Literal_New keyword\n             final DetailAST classDefOrNew \u003d ast.getParent().getParent();\n             final DetailAST classIdent \u003d\n                 classDefOrNew.findFirstToken(TokenTypes.IDENT);\n             // Following logic is to handle when a classIdent can not be\n             // found. This is when you have a Literal_New keyword followed\n             // a DOT, which is when you have:\n             // new Outclass.InnerInterface(x) { ... }\n             // Such a rare case, will not have the logic to handle parsing\n             // down the tree looking for the first ident.\n             if ((null !\u003d classIdent)\n                 \u0026\u0026 method.getText().equals(classIdent.getText()))\n             {\n                 log(method.getLineNo(), method.getColumnNo(),\n-                    \"method.name.equals.class.name\", method.getText());\n+                    MSG_KEY, method.getText());\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "750b733bd124eaea34d4692a1bb8d0fd0fe90976": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, naming, #512\n",
      "commitDate": 1421677299000,
      "commitName": "750b733bd124eaea34d4692a1bb8d0fd0fe90976",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "55435babb6bc6640bc66161743ffbde93a3c458b": {
      "type": "Ybodychange",
      "commitMessage": "Extended Method Name Check to ignore overriden methods, issue #430\n",
      "commitDate": 1419868057000,
      "commitName": "55435babb6bc6640bc66161743ffbde93a3c458b",
      "commitAuthor": "alexkravin",
      "commitDateOld": 1393953491000,
      "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthorOld": "Ivan Sopov",
      "daysBetweenCommits": 299.94,
      "commitsBetweenForRepo": 423,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,30 @@\n     public void visitToken(DetailAST aAst)\n     {\n-        super.visitToken(aAst); // Will check the name against the format.\n+        if (!AnnotationUtility.containsAnnotation(aAst, OVERRIDE)\n+            \u0026\u0026 !AnnotationUtility.containsAnnotation(aAst, CANONICAL_OVERRIDE))\n+        {\n+            super.visitToken(aAst); // Will check the name against the format.\n+        }\n \n         if (!mAllowClassName) {\n             final DetailAST method \u003d\n                 aAst.findFirstToken(TokenTypes.IDENT);\n             //in all cases this will be the classDef type except anon inner\n             //with anon inner classes this will be the Literal_New keyword\n             final DetailAST classDefOrNew \u003d aAst.getParent().getParent();\n             final DetailAST classIdent \u003d\n                 classDefOrNew.findFirstToken(TokenTypes.IDENT);\n             // Following logic is to handle when a classIdent can not be\n             // found. This is when you have a Literal_New keyword followed\n             // a DOT, which is when you have:\n             // new Outclass.InnerInterface(x) { ... }\n             // Such a rare case, will not have the logic to handle parsing\n             // down the tree looking for the first ident.\n             if ((null !\u003d classIdent)\n                 \u0026\u0026 method.getText().equals(classIdent.getText()))\n             {\n                 log(method.getLineNo(), method.getColumnNo(),\n                     \"method.name.equals.class.name\", method.getText());\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "a6471e8a2608cbe29b26da7c442aff2ebe4de236": {
      "type": "Ybodychange",
      "commitMessage": "fix a bug found with inner definitions.\n",
      "commitDate": 1216196582000,
      "commitName": "a6471e8a2608cbe29b26da7c442aff2ebe4de236",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1208780560000,
      "commitNameOld": "7cb8afb266fbada9792b9e04eeb9cef3ec10a3cc",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 85.83,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,26 @@\n     public void visitToken(DetailAST aAst)\n     {\n         super.visitToken(aAst); // Will check the name against the format.\n \n         if (!mAllowClassName) {\n             final DetailAST method \u003d\n                 aAst.findFirstToken(TokenTypes.IDENT);\n             //in all cases this will be the classDef type except anon inner\n             //with anon inner classes this will be the Literal_New keyword\n             final DetailAST classDefOrNew \u003d aAst.getParent().getParent();\n             final DetailAST classIdent \u003d\n                 classDefOrNew.findFirstToken(TokenTypes.IDENT);\n-            if (method.getText().equals(classIdent.getText())) {\n+            // Following logic is to handle when a classIdent can not be\n+            // found. This is when you have a Literal_New keyword followed\n+            // a DOT, which is when you have:\n+            // new Outclass.InnerInterface(x) { ... }\n+            // Such a rare case, will not have the logic to handle parsing\n+            // down the tree looking for the first ident.\n+            if ((null !\u003d classIdent)\n+                \u0026\u0026 method.getText().equals(classIdent.getText()))\n+            {\n                 log(method.getLineNo(), method.getColumnNo(),\n                     \"method.name.equals.class.name\", method.getText());\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "7cb8afb266fbada9792b9e04eeb9cef3ec10a3cc": {
      "type": "Yintroduced",
      "commitMessage": "Enhanced the MethodName check to detect when a method name is the same as the residing class name. Thanks to Travis Schneeberger for providing patch #1892364.\n",
      "commitDate": 1208780560000,
      "commitName": "7cb8afb266fbada9792b9e04eeb9cef3ec10a3cc",
      "commitAuthor": "Oliver Burn"
    }
  }
}