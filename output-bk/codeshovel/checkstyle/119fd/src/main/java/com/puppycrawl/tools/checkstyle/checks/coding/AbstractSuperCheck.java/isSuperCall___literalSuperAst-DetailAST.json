{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "AbstractSuperCheck.java",
  "functionName": "isSuperCall",
  "functionId": "isSuperCall___literalSuperAst-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java",
  "functionStartLine": 98,
  "functionEndLine": 111,
  "changeHistory": [
    "e4fc9bb1292ae805283222b76b297a04fa7a9f28",
    "5a3f05ec8038daa674666bbaa82d59127aa74f92",
    "6fd60de0a4363b806d37d4129d9a430f8f3dee6b",
    "af52963008a800390e8b356db5811886572f37a3",
    "cc6caa71f55ae33ad8c018e3b7915e6b93b7de81",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878",
    "770e3a12f73dc1d2b8b46cac8780ac7d837ae645",
    "bb52a25c6c5d9d6099713cac6fcacea9e0ec2bdd",
    "18718ffeab8bac25b8352145a4f805c5e5099c4b"
  ],
  "changeHistoryShort": {
    "e4fc9bb1292ae805283222b76b297a04fa7a9f28": "Ybodychange",
    "5a3f05ec8038daa674666bbaa82d59127aa74f92": "Ybodychange",
    "6fd60de0a4363b806d37d4129d9a430f8f3dee6b": "Ybodychange",
    "af52963008a800390e8b356db5811886572f37a3": "Ymultichange(Yparameterchange,Ybodychange)",
    "cc6caa71f55ae33ad8c018e3b7915e6b93b7de81": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878": "Ybodychange",
    "770e3a12f73dc1d2b8b46cac8780ac7d837ae645": "Ybodychange",
    "bb52a25c6c5d9d6099713cac6fcacea9e0ec2bdd": "Ymultichange(Ymovefromfile,Ybodychange,Yrename)",
    "18718ffeab8bac25b8352145a4f805c5e5099c4b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e4fc9bb1292ae805283222b76b297a04fa7a9f28": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2904: fixed SuperCloneCheck from bad code in input",
      "commitDate": 1455629505000,
      "commitName": "e4fc9bb1292ae805283222b76b297a04fa7a9f28",
      "commitAuthor": "rnveach",
      "commitDateOld": 1454680863000,
      "commitNameOld": "cf96dd9adcf0c3c8f8f05a9ffdcb765cafe17479",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 10.98,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,14 @@\n     private boolean isSuperCall(DetailAST literalSuperAst) {\n         boolean superCall \u003d false;\n \n         if (literalSuperAst.getType() \u003d\u003d TokenTypes.LITERAL_SUPER) {\n             // dot operator?\n             final DetailAST dotAst \u003d literalSuperAst.getParent();\n \n-            if (dotAst.getType() \u003d\u003d TokenTypes.DOT\n-                \u0026\u0026 !isSameNameMethod(literalSuperAst)\n+            if (!isSameNameMethod(literalSuperAst)\n                 \u0026\u0026 !hasArguments(dotAst)) {\n                 superCall \u003d isSuperCallInOverridingMethod(dotAst);\n             }\n         }\n         return superCall;\n     }\n\\ No newline at end of file\n"
    },
    "5a3f05ec8038daa674666bbaa82d59127aa74f92": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: ReturnCount violation fixed for AbstractSuperCheck\n",
      "commitDate": 1440741320000,
      "commitName": "5a3f05ec8038daa674666bbaa82d59127aa74f92",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": 1440705239000,
      "commitNameOld": "4d2e6647f9e8385749c382bcab5e64965a943178",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.42,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,15 @@\n     private boolean isSuperCall(DetailAST literalSuperAst) {\n-        if (literalSuperAst.getType() !\u003d TokenTypes.LITERAL_SUPER) {\n-            return false;\n-        }\n-        // dot operator?\n-        DetailAST dotAst \u003d literalSuperAst.getParent();\n-        if (dotAst.getType() !\u003d TokenTypes.DOT\n-            || isSameNameMethod(literalSuperAst)\n-            || hasArguments(dotAst)) {\n-            return false;\n-        }\n+        boolean superCall \u003d false;\n \n-        // in an overriding method for this check?\n-        while (dotAst !\u003d null) {\n-            if (dotAst.getType() \u003d\u003d TokenTypes.METHOD_DEF) {\n-                return isOverridingMethod(dotAst);\n+        if (literalSuperAst.getType() \u003d\u003d TokenTypes.LITERAL_SUPER) {\n+            // dot operator?\n+            final DetailAST dotAst \u003d literalSuperAst.getParent();\n+\n+            if (dotAst.getType() \u003d\u003d TokenTypes.DOT\n+                \u0026\u0026 !isSameNameMethod(literalSuperAst)\n+                \u0026\u0026 !hasArguments(dotAst)) {\n+                superCall \u003d isSuperCallInOverridingMethod(dotAst);\n             }\n-            if (dotAst.getType() \u003d\u003d TokenTypes.CTOR_DEF\n-                || dotAst.getType() \u003d\u003d TokenTypes.INSTANCE_INIT) {\n-                return false;\n-            }\n-            dotAst \u003d dotAst.getParent();\n         }\n-        return false;\n+        return superCall;\n     }\n\\ No newline at end of file\n"
    },
    "6fd60de0a4363b806d37d4129d9a430f8f3dee6b": {
      "type": "Ybodychange",
      "commitMessage": "Remove confusing else branches. #1538\n",
      "commitDate": 1438566538000,
      "commitName": "6fd60de0a4363b806d37d4129d9a430f8f3dee6b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1438460103000,
      "commitNameOld": "af52963008a800390e8b356db5811886572f37a3",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 1.23,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n     private boolean isSuperCall(DetailAST literalSuperAst) {\n         if (literalSuperAst.getType() !\u003d TokenTypes.LITERAL_SUPER) {\n             return false;\n         }\n         // dot operator?\n         DetailAST dotAst \u003d literalSuperAst.getParent();\n         if (dotAst.getType() !\u003d TokenTypes.DOT\n             || isSameNameMethod(literalSuperAst)\n             || hasArguments(dotAst)) {\n             return false;\n         }\n \n         // in an overriding method for this check?\n         while (dotAst !\u003d null) {\n             if (dotAst.getType() \u003d\u003d TokenTypes.METHOD_DEF) {\n                 return isOverridingMethod(dotAst);\n             }\n-            else if (dotAst.getType() \u003d\u003d TokenTypes.CTOR_DEF\n+            if (dotAst.getType() \u003d\u003d TokenTypes.CTOR_DEF\n                 || dotAst.getType() \u003d\u003d TokenTypes.INSTANCE_INIT) {\n                 return false;\n             }\n             dotAst \u003d dotAst.getParent();\n         }\n         return false;\n     }\n\\ No newline at end of file\n"
    },
    "af52963008a800390e8b356db5811886572f37a3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Issue #1293: Refactoring of AbstractSuperCheck. Code coverage has been improved.\n",
      "commitDate": 1438460103000,
      "commitName": "af52963008a800390e8b356db5811886572f37a3",
      "commitAuthor": "Baratali Izmailov",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "cc6caa71f55ae33ad8c018e3b7915e6b93b7de81": {
      "type": "Ybodychange",
      "commitMessage": "AbstractSuperCheck updated to follow Cyclomatic Complexity rule. #954\n",
      "commitDate": 1434261690000,
      "commitName": "cc6caa71f55ae33ad8c018e3b7915e6b93b7de81",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": 1431863229000,
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 27.76,
      "commitsBetweenForRepo": 136,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,30 @@\n     private boolean isSuperCall(DetailAST ast) {\n         if (ast.getType() !\u003d TokenTypes.LITERAL_SUPER) {\n             return false;\n         }\n         // dot operator?\n         DetailAST parent \u003d ast.getParent();\n         if (parent \u003d\u003d null || parent.getType() !\u003d TokenTypes.DOT) {\n             return false;\n         }\n \n-        // same name of method\n-        AST sibling \u003d ast.getNextSibling();\n-        // ignore type parameters\n-        if (sibling !\u003d null\n-            \u0026\u0026 sibling.getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS) {\n-            sibling \u003d sibling.getNextSibling();\n-        }\n-        if (sibling \u003d\u003d null || sibling.getType() !\u003d TokenTypes.IDENT) {\n+        if (isSameNameMethod(ast)) {\n             return false;\n         }\n-        final String name \u003d sibling.getText();\n-        if (!getMethodName().equals(name)) {\n-            return false;\n-        }\n-\n-        // 0 parameters?\n-        final DetailAST args \u003d parent.getNextSibling();\n-        if (args \u003d\u003d null || args.getType() !\u003d TokenTypes.ELIST) {\n-            return false;\n-        }\n-        if (args.getChildCount() !\u003d 0) {\n+        if (isZeroParameters(parent)) {\n             return false;\n         }\n \n         // in an overriding method for this check?\n         while (parent !\u003d null) {\n             if (parent.getType() \u003d\u003d TokenTypes.METHOD_DEF) {\n                 return isOverridingMethod(parent);\n             }\n             else if (parent.getType() \u003d\u003d TokenTypes.CTOR_DEF\n                 || parent.getType() \u003d\u003d TokenTypes.INSTANCE_INIT) {\n                 return false;\n             }\n             parent \u003d parent.getParent();\n         }\n         return false;\n     }\n\\ No newline at end of file\n"
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": 1426023398000,
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1424437367000,
      "commitNameOld": "27149f3504a2f350b74f456a9bffbae76a460060",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 18.36,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n     private boolean isSuperCall(DetailAST ast)\n     {\n         if (ast.getType() !\u003d TokenTypes.LITERAL_SUPER) {\n             return false;\n         }\n         // dot operator?\n         DetailAST parent \u003d ast.getParent();\n-        if ((parent \u003d\u003d null) || (parent.getType() !\u003d TokenTypes.DOT)) {\n+        if (parent \u003d\u003d null || parent.getType() !\u003d TokenTypes.DOT) {\n             return false;\n         }\n \n         // same name of method\n         AST sibling \u003d ast.getNextSibling();\n         // ignore type parameters\n-        if ((sibling !\u003d null)\n-            \u0026\u0026 (sibling.getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS))\n+        if (sibling !\u003d null\n+            \u0026\u0026 sibling.getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS)\n         {\n             sibling \u003d sibling.getNextSibling();\n         }\n-        if ((sibling \u003d\u003d null) || (sibling.getType() !\u003d TokenTypes.IDENT)) {\n+        if (sibling \u003d\u003d null || sibling.getType() !\u003d TokenTypes.IDENT) {\n             return false;\n         }\n         final String name \u003d sibling.getText();\n         if (!getMethodName().equals(name)) {\n             return false;\n         }\n \n         // 0 parameters?\n         final DetailAST args \u003d parent.getNextSibling();\n-        if ((args \u003d\u003d null) || (args.getType() !\u003d TokenTypes.ELIST)) {\n+        if (args \u003d\u003d null || args.getType() !\u003d TokenTypes.ELIST) {\n             return false;\n         }\n         if (args.getChildCount() !\u003d 0) {\n             return false;\n         }\n \n         // in an overriding method for this check?\n         while (parent !\u003d null) {\n             if (parent.getType() \u003d\u003d TokenTypes.METHOD_DEF) {\n                 return isOverridingMethod(parent);\n             }\n-            else if ((parent.getType() \u003d\u003d TokenTypes.CTOR_DEF)\n-                || (parent.getType() \u003d\u003d TokenTypes.INSTANCE_INIT))\n+            else if (parent.getType() \u003d\u003d TokenTypes.CTOR_DEF\n+                || parent.getType() \u003d\u003d TokenTypes.INSTANCE_INIT)\n             {\n                 return false;\n             }\n             parent \u003d parent.getParent();\n         }\n         return false;\n     }\n\\ No newline at end of file\n"
    },
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, coding, #512\n",
      "commitDate": 1421677214000,
      "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878": {
      "type": "Ybodychange",
      "commitMessage": "Inspired by patch# 2111354 - changes to remove casting. Neat trick\n",
      "commitDate": 1221737656000,
      "commitName": "d62a2cc02092cb6c1a1666630a51a6ec7c50a878",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1209181531000,
      "commitNameOld": "911065320fb39299f442ea08f775cfe08ba2a2ed",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 145.33,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n     private boolean isSuperCall(DetailAST aAST)\n     {\n         if (aAST.getType() !\u003d TokenTypes.LITERAL_SUPER) {\n             return false;\n         }\n         // dot operator?\n         DetailAST parent \u003d aAST.getParent();\n         if ((parent \u003d\u003d null) || (parent.getType() !\u003d TokenTypes.DOT)) {\n             return false;\n         }\n \n         // same name of method\n         AST sibling \u003d aAST.getNextSibling();\n         // ignore type parameters\n         if ((sibling !\u003d null)\n             \u0026\u0026 (sibling.getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS))\n         {\n             sibling \u003d sibling.getNextSibling();\n         }\n         if ((sibling \u003d\u003d null) || (sibling.getType() !\u003d TokenTypes.IDENT)) {\n             return false;\n         }\n         final String name \u003d sibling.getText();\n         if (!getMethodName().equals(name)) {\n             return false;\n         }\n \n         // 0 parameters?\n-        final DetailAST args \u003d (DetailAST) parent.getNextSibling();\n+        final DetailAST args \u003d parent.getNextSibling();\n         if ((args \u003d\u003d null) || (args.getType() !\u003d TokenTypes.ELIST)) {\n             return false;\n         }\n         if (args.getChildCount() !\u003d 0) {\n             return false;\n         }\n \n         // in an overriding method for this check?\n         while (parent !\u003d null) {\n             if (parent.getType() \u003d\u003d TokenTypes.METHOD_DEF) {\n                 return isOverridingMethod(parent);\n             }\n             else if ((parent.getType() \u003d\u003d TokenTypes.CTOR_DEF)\n                 || (parent.getType() \u003d\u003d TokenTypes.INSTANCE_INIT))\n             {\n                 return false;\n             }\n             parent \u003d parent.getParent();\n         }\n         return false;\n     }\n\\ No newline at end of file\n"
    },
    "770e3a12f73dc1d2b8b46cac8780ac7d837ae645": {
      "type": "Ybodychange",
      "commitMessage": "Fixed problem where super.*() invocations with type parameters would be unecessarily flagged.\n",
      "commitDate": 1113855904000,
      "commitName": "770e3a12f73dc1d2b8b46cac8780ac7d837ae645",
      "commitAuthor": "Michael Studman",
      "commitDateOld": 1105267857000,
      "commitNameOld": "0d887cde58e54d920644ee543dab346b93e8aae9",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 99.4,
      "commitsBetweenForRepo": 105,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,50 @@\n     private boolean isSuperCall(DetailAST aAST)\n     {\n         if (aAST.getType() !\u003d TokenTypes.LITERAL_SUPER) {\n             return false;\n         }\n         // dot operator?\n         DetailAST parent \u003d aAST.getParent();\n         if ((parent \u003d\u003d null) || (parent.getType() !\u003d TokenTypes.DOT)) {\n             return false;\n         }\n \n-        // same name of method?\n-        final AST sibling \u003d aAST.getNextSibling();\n+        // same name of method\n+        AST sibling \u003d aAST.getNextSibling();\n+        // ignore type parameters\n+        if ((sibling !\u003d null)\n+            \u0026\u0026 (sibling.getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS))\n+        {\n+            sibling \u003d sibling.getNextSibling();\n+        }\n         if ((sibling \u003d\u003d null) || (sibling.getType() !\u003d TokenTypes.IDENT)) {\n             return false;\n         }\n         final String name \u003d sibling.getText();\n         if (!getMethodName().equals(name)) {\n             return false;\n         }\n \n         // 0 parameters?\n         final DetailAST args \u003d (DetailAST) parent.getNextSibling();\n         if ((args \u003d\u003d null) || (args.getType() !\u003d TokenTypes.ELIST)) {\n             return false;\n         }\n         if (args.getChildCount() !\u003d 0) {\n             return false;\n         }\n \n         // in an overriding method for this check?\n         while (parent !\u003d null) {\n             if (parent.getType() \u003d\u003d TokenTypes.METHOD_DEF) {\n                 return isOverridingMethod(parent);\n             }\n             else if ((parent.getType() \u003d\u003d TokenTypes.CTOR_DEF)\n                 || (parent.getType() \u003d\u003d TokenTypes.INSTANCE_INIT))\n             {\n                 return false;\n             }\n             parent \u003d parent.getParent();\n         }\n         return false;\n     }\n\\ No newline at end of file\n"
    },
    "bb52a25c6c5d9d6099713cac6fcacea9e0ec2bdd": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yrename)",
      "commitMessage": "added check that overriding finalize method calls super.finalize\n",
      "commitDate": 1057569450000,
      "commitName": "bb52a25c6c5d9d6099713cac6fcacea9e0ec2bdd",
      "commitAuthor": "Rick Giles",
      "subchanges": [
        "Ymovefromfile",
        "Ybodychange",
        "Yrename"
      ]
    },
    "18718ffeab8bac25b8352145a4f805c5e5099c4b": {
      "type": "Yintroduced",
      "commitMessage": "added check that an overriding clone() method calls super.clone().\n",
      "commitDate": 1057530839000,
      "commitName": "18718ffeab8bac25b8352145a4f805c5e5099c4b",
      "commitAuthor": "Rick Giles"
    }
  }
}