{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "HeaderCheck.java",
  "functionName": "processFiltered",
  "functionId": "processFiltered___file-File__fileText-FileText",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheck.java",
  "functionStartLine": 94,
  "functionEndLine": 106,
  "changeHistory": [
    "0c2abadbb7f2887f31011157d62edf40bea131c3",
    "82979737c4201b4913ea30b9c9431e71783d1c02",
    "23a1b6253f6296c1a3888361953da47f2808ca3d",
    "5d698f4a58b66958b13cb04735fefa3f4fa4b9e7",
    "29027109bf962f47b6a6000fdca69b5679ce4b43",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "bf16d371dab210594755d04afc4697269ed088c0",
    "aca96ae1b180a8036cc23e93840c4161ae8f8927",
    "0340dcb26d5db9625e8e1f093f39165b8bdb18bf",
    "04b0bd64047e8eee752405a01de145b67f5fb845",
    "b8c558e473c0a9a75c41312e31df34b8572a271b",
    "eb522eece2f04cefd75931be5066eaebf2b34b51",
    "2b36d7dec160fdd7f5a92366709ddc2d586ebef5",
    "4b209708c6823dabedb3ba74bbfa92fe638f11be",
    "f24c8ee834e006c406c0538dbfccc2fe6c07279c",
    "9fdee8a722d4d2d72796a1bc8397d5f23a342843"
  ],
  "changeHistoryShort": {
    "0c2abadbb7f2887f31011157d62edf40bea131c3": "Ybodychange",
    "82979737c4201b4913ea30b9c9431e71783d1c02": "Ymultichange(Yparameterchange,Ybodychange)",
    "23a1b6253f6296c1a3888361953da47f2808ca3d": "Ybodychange",
    "5d698f4a58b66958b13cb04735fefa3f4fa4b9e7": "Ybodychange",
    "29027109bf962f47b6a6000fdca69b5679ce4b43": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "bf16d371dab210594755d04afc4697269ed088c0": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
    "aca96ae1b180a8036cc23e93840c4161ae8f8927": "Yfilerename",
    "0340dcb26d5db9625e8e1f093f39165b8bdb18bf": "Ybodychange",
    "04b0bd64047e8eee752405a01de145b67f5fb845": "Yparameterchange",
    "b8c558e473c0a9a75c41312e31df34b8572a271b": "Ybodychange",
    "eb522eece2f04cefd75931be5066eaebf2b34b51": "Ybodychange",
    "2b36d7dec160fdd7f5a92366709ddc2d586ebef5": "Ybodychange",
    "4b209708c6823dabedb3ba74bbfa92fe638f11be": "Ybodychange",
    "f24c8ee834e006c406c0538dbfccc2fe6c07279c": "Ybodychange",
    "9fdee8a722d4d2d72796a1bc8397d5f23a342843": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0c2abadbb7f2887f31011157d62edf40bea131c3": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4641: Avoid usage of getLines method from FileText\n",
      "commitDate": 1499716651000,
      "commitName": "0c2abadbb7f2887f31011157d62edf40bea131c3",
      "commitAuthor": "Timur",
      "commitDateOld": 1499372568000,
      "commitNameOld": "82979737c4201b4913ea30b9c9431e71783d1c02",
      "commitAuthorOld": "Timur",
      "daysBetweenCommits": 3.98,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,13 @@\n     protected void processFiltered(File file, FileText fileText) {\n-        final List\u003cString\u003e lines \u003d fileText.getLines();\n-        if (getHeaderLines().size() \u003e lines.size()) {\n+        if (getHeaderLines().size() \u003e fileText.size()) {\n             log(1, MSG_MISSING);\n         }\n         else {\n             for (int i \u003d 0; i \u003c getHeaderLines().size(); i++) {\n-                if (!isMatch(i, lines.get(i))) {\n+                if (!isMatch(i, fileText.get(i))) {\n                     log(i + 1, MSG_MISMATCH, getHeaderLines().get(i));\n                     break;\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "82979737c4201b4913ea30b9c9431e71783d1c02": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Issue #3034: FileText should not extends AbstractList\n",
      "commitDate": 1499372568000,
      "commitName": "82979737c4201b4913ea30b9c9431e71783d1c02",
      "commitAuthor": "Timur",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "23a1b6253f6296c1a3888361953da47f2808ca3d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: Fix for \u0027Don\u0027t use trailing comments\u0027 (partial)\n",
      "commitDate": 1440158741000,
      "commitName": "23a1b6253f6296c1a3888361953da47f2808ca3d",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": 1439886329000,
      "commitNameOld": "54ccca18635a4aeea90da86d30590df498f76b08",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 3.15,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n     protected void processFiltered(File file, List\u003cString\u003e lines) {\n         if (getHeaderLines().size() \u003e lines.size()) {\n             log(1, MSG_MISSING);\n         }\n         else {\n             for (int i \u003d 0; i \u003c getHeaderLines().size(); i++) {\n                 if (!isMatch(i, lines.get(i))) {\n                     log(i + 1, MSG_MISMATCH, getHeaderLines().get(i));\n-                    break; // stop checking\n+                    break;\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "5d698f4a58b66958b13cb04735fefa3f4fa4b9e7": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, header package, issue #537\n",
      "commitDate": 1424437367000,
      "commitName": "5d698f4a58b66958b13cb04735fefa3f4fa4b9e7",
      "commitAuthor": "alexkravin",
      "commitDateOld": 1424294072000,
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n     protected void processFiltered(File file, List\u003cString\u003e lines)\n     {\n         if (getHeaderLines().size() \u003e lines.size()) {\n-            log(1, \"header.missing\");\n+            log(1, MSG_MISSING);\n         }\n         else {\n             for (int i \u003d 0; i \u003c getHeaderLines().size(); i++) {\n                 if (!isMatch(i, lines.get(i))) {\n-                    log(i + 1, \"header.mismatch\", getHeaderLines().get(i));\n+                    log(i + 1, MSG_MISMATCH, getHeaderLines().get(i));\n                     break; // stop checking\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "29027109bf962f47b6a6000fdca69b5679ce4b43": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, header, #512\n",
      "commitDate": 1421678132000,
      "commitName": "29027109bf962f47b6a6000fdca69b5679ce4b43",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "bf16d371dab210594755d04afc4697269ed088c0": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "converting the header checks to be fileset based.\n",
      "commitDate": 1226831412000,
      "commitName": "bf16d371dab210594755d04afc4697269ed088c0",
      "commitAuthor": "Oliver Burn",
      "subchanges": [
        "Yrename",
        "Yparameterchange",
        "Ymodifierchange",
        "Ybodychange"
      ]
    },
    "aca96ae1b180a8036cc23e93840c4161ae8f8927": {
      "type": "Yfilerename",
      "commitMessage": "moved header checks to their own package\nremoved duplicate usage documentation in javadoc along the way\n",
      "commitDate": 1107084770000,
      "commitName": "aca96ae1b180a8036cc23e93840c4161ae8f8927",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": 1107083225000,
      "commitNameOld": "0a60a189ed4236fd9be3c26bbb2f27be95e5d967",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "0340dcb26d5db9625e8e1f093f39165b8bdb18bf": {
      "type": "Ybodychange",
      "commitMessage": "Added multiLines property for RegexpHeaderCheck. Added AbstractHeaderCheck - superclass for header checks.\n",
      "commitDate": 1073795780000,
      "commitName": "0340dcb26d5db9625e8e1f093f39165b8bdb18bf",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1065635218000,
      "commitNameOld": "984eb8d7427038effd8ee8d2d9c90c74eee57e2b",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 94.45,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,14 @@\n     public void beginTree(DetailAST aRootAST)\n     {\n-\n-        final String[] lines \u003d getLines();\n-\n-        if (mHeaderLines.length \u003e lines.length) {\n+        if (getHeaderLines().length \u003e getLines().length) {\n             log(1, \"header.missing\");\n         }\n         else {\n-            for (int i \u003d 0; i \u003c mHeaderLines.length; i++) {\n-                // skip lines we are meant to ignore\n-                if (isIgnoreLine(i + 1)) {\n-                    continue;\n-                }\n-\n+            for (int i \u003d 0; i \u003c getHeaderLines().length; i++) {\n                 if (!isMatch(i)) {\n-                    log(i + 1, \"header.mismatch\", mHeaderLines[i]);\n+                    log(i + 1, \"header.mismatch\", getHeaderLines()[i]);\n                     break; // stop checking\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "04b0bd64047e8eee752405a01de145b67f5fb845": {
      "type": "Yparameterchange",
      "commitMessage": "Last API change before release (I hope:-). Now when notifying of the start and\nfinish of tree, based the root node. Maybe useful to some checks.\n",
      "commitDate": 1045363824000,
      "commitName": "04b0bd64047e8eee752405a01de145b67f5fb845",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1040977006000,
      "commitNameOld": "b8c558e473c0a9a75c41312e31df34b8572a271b",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 50.77,
      "commitsBetweenForRepo": 100,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n-    public void beginTree()\n+    public void beginTree(DetailAST aRootAST)\n     {\n \n         final String[] lines \u003d getLines();\n \n         if (mHeaderLines.length \u003e lines.length) {\n             log(1, \"header.missing\");\n         }\n         else {\n             for (int i \u003d 0; i \u003c mHeaderLines.length; i++) {\n                 // skip lines we are meant to ignore\n                 if (isIgnoreLine(i + 1)) {\n                     continue;\n                 }\n \n                 if (!isMatch(i)) {\n                     log(i + 1, \"header.mismatch\", mHeaderLines[i]);\n                     break; // stop checking\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "b8c558e473c0a9a75c41312e31df34b8572a271b": {
      "type": "Ybodychange",
      "commitMessage": "Moved detection of missing headerFile property to configuration phase\nThis means that Checkstyle will not run, until now it was writing\na configuration error in the audit log file.\n\nAlso fixes bug #629139, Empty value ignores file\n",
      "commitDate": 1040977006000,
      "commitName": "b8c558e473c0a9a75c41312e31df34b8572a271b",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": 1039999056000,
      "commitNameOld": "fa0c0353c280c30f2d1cfda01ecfe6597ff46f6b",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 11.32,
      "commitsBetweenForRepo": 85,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,22 @@\n     public void beginTree()\n     {\n-        if (mHeaderLines \u003d\u003d null) {\n-            log(1, \"header.spec.missing\");\n-            return;\n-        }\n \n         final String[] lines \u003d getLines();\n \n         if (mHeaderLines.length \u003e lines.length) {\n             log(1, \"header.missing\");\n         }\n         else {\n             for (int i \u003d 0; i \u003c mHeaderLines.length; i++) {\n                 // skip lines we are meant to ignore\n                 if (isIgnoreLine(i + 1)) {\n                     continue;\n                 }\n \n                 if (!isMatch(i)) {\n                     log(i + 1, \"header.mismatch\", mHeaderLines[i]);\n                     break; // stop checking\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "eb522eece2f04cefd75931be5066eaebf2b34b51": {
      "type": "Ybodychange",
      "commitMessage": "fixed i18n issues\n",
      "commitDate": 1039415260000,
      "commitName": "eb522eece2f04cefd75931be5066eaebf2b34b51",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": 1039173826000,
      "commitNameOld": "419d9243861ac99e80a7783547a51adf8b284817",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 2.79,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n     public void beginTree()\n     {\n         if (mHeaderLines \u003d\u003d null) {\n-            log(1, \"Unable to check as missing lines to check.\");\n+            log(1, \"header.spec.missing\");\n             return;\n         }\n \n         final String[] lines \u003d getLines();\n \n         if (mHeaderLines.length \u003e lines.length) {\n             log(1, \"header.missing\");\n         }\n         else {\n             for (int i \u003d 0; i \u003c mHeaderLines.length; i++) {\n                 // skip lines we are meant to ignore\n                 if (isIgnoreLine(i + 1)) {\n                     continue;\n                 }\n \n                 if (!isMatch(i)) {\n                     log(i + 1, \"header.mismatch\", mHeaderLines[i]);\n                     break; // stop checking\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "2b36d7dec160fdd7f5a92366709ddc2d586ebef5": {
      "type": "Ybodychange",
      "commitMessage": "Fixed to complain if no lines to check with.\n",
      "commitDate": 1038290394000,
      "commitName": "2b36d7dec160fdd7f5a92366709ddc2d586ebef5",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1037970001000,
      "commitNameOld": "303352fe2d7b467edce0bf02064e0a519a139250",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 3.71,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,26 @@\n     public void beginTree()\n     {\n-        if (mHeaderLines !\u003d null) {\n+        if (mHeaderLines \u003d\u003d null) {\n+            log(1, \"Unable to check as missing lines to check.\");\n+            return;\n+        }\n \n-            final String[] lines \u003d getLines();\n+        final String[] lines \u003d getLines();\n \n-            if (mHeaderLines.length \u003e lines.length) {\n-                log(1, \"header.missing\");\n-            }\n-            else {\n-                for (int i \u003d 0; i \u003c mHeaderLines.length; i++) {\n-                    // skip lines we are meant to ignore\n-                    if (isIgnoreLine(i + 1)) {\n-                        continue;\n-                    }\n+        if (mHeaderLines.length \u003e lines.length) {\n+            log(1, \"header.missing\");\n+        }\n+        else {\n+            for (int i \u003d 0; i \u003c mHeaderLines.length; i++) {\n+                // skip lines we are meant to ignore\n+                if (isIgnoreLine(i + 1)) {\n+                    continue;\n+                }\n \n-                    if (!isMatch(i)) {\n-                        log(i + 1, \"header.mismatch\", mHeaderLines[i]);\n-                        break; // stop checking\n-                    }\n+                if (!isMatch(i)) {\n+                    log(i + 1, \"header.mismatch\", mHeaderLines[i]);\n+                    break; // stop checking\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "4b209708c6823dabedb3ba74bbfa92fe638f11be": {
      "type": "Ybodychange",
      "commitMessage": "ported FileLengthCheck and TabCharacterCheck, tests still missing\n",
      "commitDate": 1033246543000,
      "commitName": "4b209708c6823dabedb3ba74bbfa92fe638f11be",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": 1033240174000,
      "commitNameOld": "f24c8ee834e006c406c0538dbfccc2fe6c07279c",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,24 @@\n     public void beginTree()\n     {\n-        System.out.println(\"HeaderCheck.beginTree\");\n         if (mHeaderLines !\u003d null) {\n \n             final String[] lines \u003d getLines();\n \n             if (mHeaderLines.length \u003e lines.length) {\n                 log(1, \"header.missing\");\n             }\n             else {\n                 for (int i \u003d 0; i \u003c mHeaderLines.length; i++) {\n                     // skip lines we are meant to ignore\n                     if (isIgnoreLine(i + 1)) {\n                         continue;\n                     }\n \n                     if (!isMatch(i)) {\n                         log(i + 1, \"header.mismatch\", mHeaderLines[i]);\n                         break; // stop checking\n                     }\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "f24c8ee834e006c406c0538dbfccc2fe6c07279c": {
      "type": "Ybodychange",
      "commitMessage": "implemented header checks, still need to remove old code\n",
      "commitDate": 1033240174000,
      "commitName": "f24c8ee834e006c406c0538dbfccc2fe6c07279c",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": 1033108888000,
      "commitNameOld": "d077a402da51bb238a7da99d5e2542437b145192",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 1.52,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,5 +1,25 @@\n     public void beginTree()\n     {\n-        String[] lines \u003d getLines();\n-        log(0, \"file has \" + lines.length + \" lines\");\n+        System.out.println(\"HeaderCheck.beginTree\");\n+        if (mHeaderLines !\u003d null) {\n+\n+            final String[] lines \u003d getLines();\n+\n+            if (mHeaderLines.length \u003e lines.length) {\n+                log(1, \"header.missing\");\n+            }\n+            else {\n+                for (int i \u003d 0; i \u003c mHeaderLines.length; i++) {\n+                    // skip lines we are meant to ignore\n+                    if (isIgnoreLine(i + 1)) {\n+                        continue;\n+                    }\n+\n+                    if (!isMatch(i)) {\n+                        log(i + 1, \"header.mismatch\", mHeaderLines[i]);\n+                        break; // stop checking\n+                    }\n+                }\n+            }\n+        }\n     }\n\\ No newline at end of file\n"
    },
    "9fdee8a722d4d2d72796a1bc8397d5f23a342843": {
      "type": "Yintroduced",
      "commitMessage": "Started converting the header check.\n\nOliver, this checkin is mainly to keep you informed what I am doing so\nthat we avoid duplicate work. Please email me once your ISP starts working\nagain (do you have an alternate email address or a webmail account?)\n",
      "commitDate": 1032932121000,
      "commitName": "9fdee8a722d4d2d72796a1bc8397d5f23a342843",
      "commitAuthor": "Lars Kühne"
    }
  }
}