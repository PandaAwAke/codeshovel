{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "TranslationCheck.java",
  "functionName": "getBaseName",
  "functionId": "getBaseName",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java",
  "functionStartLine": 550,
  "functionEndLine": 552,
  "changeHistory": [
    "d843dd8439cc5163bcd743443f970c392f4ae30e",
    "b8f2d25b644bf719774c5516e0681d54e38f6e36",
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "7552a0b72e07c9a0070e84789b5abe6d293de6e0",
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
    "08638b5f739d9929698860048c052da2d5f80209",
    "35d1673788bbbac8263fdb69275dc6a63b095a24",
    "18f4f7efe927bef2c50ce97c860a64b8198cbb07",
    "3215661e63d0022c2790c92fa269a2255cefcc33",
    "3430721be200cbe2acf55c3b3d52a528638123b3",
    "54a09706ec1db32435b09e6b6910813325558f8d",
    "cb2862b73a3aa9192fad25015da2c2fed87f8a91",
    "a4ce4c6bb4714ff0b51d071509d2683d9e623a36"
  ],
  "changeHistoryShort": {
    "d843dd8439cc5163bcd743443f970c392f4ae30e": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
    "b8f2d25b644bf719774c5516e0681d54e38f6e36": "Ymultichange(Yparameterchange,Ybodychange)",
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "7552a0b72e07c9a0070e84789b5abe6d293de6e0": "Ybodychange",
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1": "Ybodychange",
    "08638b5f739d9929698860048c052da2d5f80209": "Ymultichange(Yparameterchange,Ybodychange)",
    "35d1673788bbbac8263fdb69275dc6a63b095a24": "Ybodychange",
    "18f4f7efe927bef2c50ce97c860a64b8198cbb07": "Ybodychange",
    "3215661e63d0022c2790c92fa269a2255cefcc33": "Ybodychange",
    "3430721be200cbe2acf55c3b3d52a528638123b3": "Ymultichange(Yparameterchange,Ybodychange)",
    "54a09706ec1db32435b09e6b6910813325558f8d": "Ymultichange(Yreturntypechange,Ymodifierchange,Ybodychange)",
    "cb2862b73a3aa9192fad25015da2c2fed87f8a91": "Ybodychange",
    "a4ce4c6bb4714ff0b51d071509d2683d9e623a36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d843dd8439cc5163bcd743443f970c392f4ae30e": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
      "commitMessage": "Issue #2204: Add \u0027baseName\u0027 option for TranslationCheck\n",
      "commitDate": 1457803906000,
      "commitName": "d843dd8439cc5163bcd743443f970c392f4ae30e",
      "commitAuthor": "Andrei Selkin",
      "subchanges": [
        "Yrename",
        "Yparameterchange",
        "Yreturntypechange",
        "Ymodifierchange",
        "Ybodychange"
      ]
    },
    "b8f2d25b644bf719774c5516e0681d54e38f6e36": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Issue #2166: Add \u0027requiredTranslations\u0027 option to Translation check\n",
      "commitDate": 1443304979000,
      "commitName": "b8f2d25b644bf719774c5516e0681d54e38f6e36",
      "commitAuthor": "Andrei Selkin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, checks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java\n",
      "commitDate": 1421678220000,
      "commitName": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "7552a0b72e07c9a0070e84789b5abe6d293de6e0": {
      "type": "Ybodychange",
      "commitMessage": "Drinking the \"Google Collections\" Kool-Aid.\n\nI like the reduced duplication.\n",
      "commitDate": 1208867287000,
      "commitName": "7552a0b72e07c9a0070e84789b5abe6d293de6e0",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1200192438000,
      "commitNameOld": "5a7e221b757e91d49be1aea105eb4b839e653fbd",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 100.4,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,23 @@\n     private void checkPropertyFileSets(Map\u003cString, Set\u003cFile\u003e\u003e aPropFiles)\n     {\n         final Set\u003cEntry\u003cString, Set\u003cFile\u003e\u003e\u003e entrySet \u003d aPropFiles.entrySet();\n \n         for (Entry\u003cString, Set\u003cFile\u003e\u003e entry : entrySet) {\n             final Set\u003cFile\u003e files \u003d entry.getValue();\n \n             if (files.size() \u003e\u003d 2) {\n                 // build a map from files to the keys they contain\n-                final Set\u003cObject\u003e keys \u003d new HashSet\u003cObject\u003e();\n-                final Map\u003cFile, Set\u003cObject\u003e\u003e fileMap \u003d\n-                    new HashMap\u003cFile, Set\u003cObject\u003e\u003e();\n+                final Set\u003cObject\u003e keys \u003d Sets.newHashSet();\n+                final Map\u003cFile, Set\u003cObject\u003e\u003e fileMap \u003d Maps.newHashMap();\n \n                 for (File file : files) {\n                     final Set\u003cObject\u003e fileKeys \u003d loadKeys(file);\n                     keys.addAll(fileKeys);\n                     fileMap.put(file, fileKeys);\n                 }\n \n                 // check the map for consistency\n                 compareKeySets(keys, fileMap);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1": {
      "type": "Ybodychange",
      "commitMessage": "Use the new syntactic sugar \"for loop\".\n\nEnd of the cosmetic changes.\n",
      "commitDate": 1197714527000,
      "commitName": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1197700618000,
      "commitNameOld": "08638b5f739d9929698860048c052da2d5f80209",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.16,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,24 @@\n     private void checkPropertyFileSets(Map\u003cString, Set\u003cFile\u003e\u003e aPropFiles)\n     {\n         final Set\u003cEntry\u003cString, Set\u003cFile\u003e\u003e\u003e entrySet \u003d aPropFiles.entrySet();\n \n-        for (final Iterator\u003cEntry\u003cString, Set\u003cFile\u003e\u003e\u003e iterator \u003d entrySet\n-                .iterator(); iterator.hasNext();)\n-        {\n-            final Entry\u003cString, Set\u003cFile\u003e\u003e entry \u003d iterator.next();\n+        for (Entry\u003cString, Set\u003cFile\u003e\u003e entry : entrySet) {\n             final Set\u003cFile\u003e files \u003d entry.getValue();\n \n             if (files.size() \u003e\u003d 2) {\n                 // build a map from files to the keys they contain\n                 final Set\u003cObject\u003e keys \u003d new HashSet\u003cObject\u003e();\n                 final Map\u003cFile, Set\u003cObject\u003e\u003e fileMap \u003d\n                     new HashMap\u003cFile, Set\u003cObject\u003e\u003e();\n \n-                for (final Iterator\u003cFile\u003e iter \u003d files.iterator(); iter\n-                        .hasNext();)\n-                {\n-                    final File file \u003d iter.next();\n+                for (File file : files) {\n                     final Set\u003cObject\u003e fileKeys \u003d loadKeys(file);\n                     keys.addAll(fileKeys);\n                     fileMap.put(file, fileKeys);\n                 }\n \n                 // check the map for consistency\n                 compareKeySets(keys, fileMap);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "08638b5f739d9929698860048c052da2d5f80209": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Start of adding generics.\n",
      "commitDate": 1197700618000,
      "commitName": "08638b5f739d9929698860048c052da2d5f80209",
      "commitAuthor": "Oliver Burn",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "35d1673788bbbac8263fdb69275dc6a63b095a24": {
      "type": "Ybodychange",
      "commitMessage": "Making local variables final where possible.\n",
      "commitDate": 1152243856000,
      "commitName": "35d1673788bbbac8263fdb69275dc6a63b095a24",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1135859700000,
      "commitNameOld": "788b41973d5747c7b4699a853b62168cf0001df6",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 189.63,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n     private void checkPropertyFileSets(Map aPropFiles)\n     {\n         final Set entrySet \u003d aPropFiles.entrySet();\n \n-        for (Iterator iterator \u003d entrySet.iterator(); iterator.hasNext();) {\n+        for (final Iterator iterator \u003d entrySet.iterator(); iterator.hasNext();)\n+        {\n             final Map.Entry entry \u003d (Map.Entry) iterator.next();\n             final Set files \u003d (Set) entry.getValue();\n \n             if (files.size() \u003e\u003d 2) {\n                 // build a map from files to the keys they contain\n                 final Set keys \u003d new HashSet();\n                 final Map fileMap \u003d new HashMap();\n \n-                for (Iterator iter \u003d files.iterator(); iter.hasNext();) {\n+                for (final Iterator iter \u003d files.iterator(); iter.hasNext();) {\n                     final File file \u003d (File) iter.next();\n                     final Set fileKeys \u003d loadKeys(file);\n                     keys.addAll(fileKeys);\n                     fileMap.put(file, fileKeys);\n                 }\n \n                 // check the map for consistency\n                 compareKeySets(keys, fileMap);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "18f4f7efe927bef2c50ce97c860a64b8198cbb07": {
      "type": "Ybodychange",
      "commitMessage": "patch #1078748, contributed by Dave Brosius:\nGuard against NPEs, improve map traversal algos\n",
      "commitDate": 1102147393000,
      "commitName": "18f4f7efe927bef2c50ce97c860a64b8198cbb07",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": 1093527252000,
      "commitNameOld": "5d7063c660b241bce251f1a8c89394619f2791fb",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 99.77,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n     private void checkPropertyFileSets(Map aPropFiles)\n     {\n-        final Set keySet \u003d aPropFiles.keySet();\n+        final Set entrySet \u003d aPropFiles.entrySet();\n \n-        for (Iterator iterator \u003d keySet.iterator(); iterator.hasNext();) {\n-            final String baseName \u003d (String) iterator.next();\n-            final Set files \u003d (Set) aPropFiles.get(baseName);\n+        for (Iterator iterator \u003d entrySet.iterator(); iterator.hasNext();) {\n+            final Map.Entry entry \u003d (Map.Entry) iterator.next();\n+            final Set files \u003d (Set) entry.getValue();\n \n             if (files.size() \u003e\u003d 2) {\n                 // build a map from files to the keys they contain\n                 final Set keys \u003d new HashSet();\n                 final Map fileMap \u003d new HashMap();\n \n                 for (Iterator iter \u003d files.iterator(); iter.hasNext();) {\n                     final File file \u003d (File) iter.next();\n                     final Set fileKeys \u003d loadKeys(file);\n                     keys.addAll(fileKeys);\n                     fileMap.put(file, fileKeys);\n                 }\n \n                 // check the map for consistency\n                 compareKeySets(keys, fileMap);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "3215661e63d0022c2790c92fa269a2255cefcc33": {
      "type": "Ybodychange",
      "commitMessage": "minor changes found will trying to debug why the tests\nare failing.\n",
      "commitDate": 1039317505000,
      "commitName": "3215661e63d0022c2790c92fa269a2255cefcc33",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1039254058000,
      "commitNameOld": "f16dd37dbad0a96df88283974a591770a236803b",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 0.73,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n     private void checkPropertyFileSets(Map aPropFiles)\n     {\n-        Set keySet \u003d aPropFiles.keySet();\n+        final Set keySet \u003d aPropFiles.keySet();\n \n         for (Iterator iterator \u003d keySet.iterator(); iterator.hasNext();) {\n-            String baseName \u003d (String) iterator.next();\n-            Set files \u003d (Set) aPropFiles.get(baseName);\n+            final String baseName \u003d (String) iterator.next();\n+            final Set files \u003d (Set) aPropFiles.get(baseName);\n \n             if (files.size() \u003e\u003d 2) {\n                 // build a map from files to the keys they contain\n-                Set keys \u003d new HashSet();\n-                Map fileMap \u003d new HashMap();\n+                final Set keys \u003d new HashSet();\n+                final Map fileMap \u003d new HashMap();\n \n                 for (Iterator iter \u003d files.iterator(); iter.hasNext();) {\n-                    File file \u003d (File) iter.next();\n-                    Set fileKeys \u003d loadKeys(file);\n+                    final File file \u003d (File) iter.next();\n+                    final Set fileKeys \u003d loadKeys(file);\n                     keys.addAll(fileKeys);\n                     fileMap.put(file, fileKeys);\n                 }\n \n                 // check the map for consistency\n                 compareKeySets(keys, fileMap);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "3430721be200cbe2acf55c3b3d52a528638123b3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "fixed checkstyle errors\n",
      "commitDate": 1037969184000,
      "commitName": "3430721be200cbe2acf55c3b3d52a528638123b3",
      "commitAuthor": "Oliver Burn",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "54a09706ec1db32435b09e6b6910813325558f8d": {
      "type": "Ymultichange(Yreturntypechange,Ymodifierchange,Ybodychange)",
      "commitMessage": "Introduced MessageDispatcher interface so\nFileSetChecks do not need to be tightly coupled\nwith Checker to report errors.\n\nFileSetCheck implementations report errors now.\n\nError counting in Checker is now done via an\nAuditListener, no need to bother about that in\neach individual FileSetCheck.\n",
      "commitDate": 1037733445000,
      "commitName": "54a09706ec1db32435b09e6b6910813325558f8d",
      "commitAuthor": "Lars Kühne",
      "subchanges": [
        "Yreturntypechange",
        "Ymodifierchange",
        "Ybodychange"
      ]
    },
    "cb2862b73a3aa9192fad25015da2c2fed87f8a91": {
      "type": "Ybodychange",
      "commitMessage": "fixed checkstyle errors\n",
      "commitDate": 1037515658000,
      "commitName": "cb2862b73a3aa9192fad25015da2c2fed87f8a91",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": 1037467916000,
      "commitNameOld": "a4ce4c6bb4714ff0b51d071509d2683d9e623a36",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 0.55,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,27 @@\n     private static int checkPropertyFileSets(Map propFiles)\n     {\n         int res \u003d 0;\n         Set keySet \u003d propFiles.keySet();\n \n-        // Go through all property file sets\n         for (Iterator iterator \u003d keySet.iterator(); iterator.hasNext();) {\n             String baseName \u003d (String) iterator.next();\n             Set files \u003d (Set) propFiles.get(baseName);\n \n-            // If there are at least two files in one set start comparing them\n             if (files.size() \u003e\u003d 2) {\n-                // Collect all keys in a set and save files and corresponding keys in a map construct\n+                // build a map from files to the keys they contain\n                 Set keys \u003d new HashSet();\n                 Map fileMap \u003d new HashMap();\n \n                 for (Iterator iter \u003d files.iterator(); iter.hasNext();) {\n                     File file \u003d (File) iter.next();\n                     Set fileKeys \u003d loadKeys(file);\n                     keys.addAll(fileKeys);\n                     fileMap.put(file, fileKeys);\n                 }\n \n-                // Go through all files and compare their keys,\n-                // sum up the number of errors\n+                // check the map for consistency\n                 res \u003d res + compareKeySets(keys, fileMap);\n             }\n         }\n         return res;\n     }\n\\ No newline at end of file\n"
    },
    "a4ce4c6bb4714ff0b51d071509d2683d9e623a36": {
      "type": "Yintroduced",
      "commitMessage": "added initial core implementation of TranslationCheck (rfe #634966)\nintegration into checker and tests is still missing\n",
      "commitDate": 1037467916000,
      "commitName": "a4ce4c6bb4714ff0b51d071509d2683d9e623a36",
      "commitAuthor": "Lars Kühne"
    }
  }
}