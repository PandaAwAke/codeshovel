{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "RightCurlyCheck.java",
  "functionName": "visitToken",
  "functionId": "visitToken___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java",
  "functionStartLine": 177,
  "functionEndLine": 187,
  "changeHistory": [
    "59aa0915eae4629a5787edba5eb487389e27cf72",
    "70ab9f4af3d163b940e025bc4665f2f23892525a",
    "4cda2565674ea4260547e663e9660df0029709d1",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
    "9faf80abaee2a2e224c7d0f9d4a45307b37a398e",
    "d282d5b8db9eba5943d1cb0269315744d5344a47",
    "f1dced161ab0c818f0e1e125fc5b88b71f5b171e",
    "c99f34002b7340ec8d0888f8f9b3992df798e408",
    "dba746ba9387bee04ed362254abb5d9ed35169cd",
    "c9cf116fcb4d295c3dd6fa80d73648bc7f34301c",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "cea86a6cad3098ebcdb4a88db2e49477b07e0d93",
    "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5",
    "12a1aec08012575b94c262d2b825a439bd69fde3",
    "39ad631113210aadd4ab2a1e58514f55c7012328",
    "ec19316322d0540f0734f3812c9a16394dae9c3a",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878",
    "c2d3932843e70e4bb5df7161800aca248f9af778",
    "c38185458ab824874b8465c46b4dc42646440aaa",
    "78e9ce870170ca3ef88fd78f8e0af0681c958eb3",
    "5d7063c660b241bce251f1a8c89394619f2791fb",
    "3bd6412e39a141b980901f291391ff1bcc4a61f3",
    "7f9839943c55dbff0b1d42661fb312b625d35228",
    "8a75a5feecc94d5f22f5850d2efe05cc9b3075bd",
    "267bdf541787643fbe6126605cbfb91dbcde1e91",
    "eecd476fa8c6dba62f919a5ff1740d108848c867",
    "84eddc36730c1eca845257201c71a0d1fb2d40cf",
    "5fd3fab179d700d68281fee316519fdd907bbcd6",
    "b1cfd257eb46dba42033984145134eae5880f657"
  ],
  "changeHistoryShort": {
    "59aa0915eae4629a5787edba5eb487389e27cf72": "Ybodychange",
    "70ab9f4af3d163b940e025bc4665f2f23892525a": "Ybodychange",
    "4cda2565674ea4260547e663e9660df0029709d1": "Ybodychange",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": "Ybodychange",
    "9faf80abaee2a2e224c7d0f9d4a45307b37a398e": "Ybodychange",
    "d282d5b8db9eba5943d1cb0269315744d5344a47": "Ybodychange",
    "f1dced161ab0c818f0e1e125fc5b88b71f5b171e": "Ybodychange",
    "c99f34002b7340ec8d0888f8f9b3992df798e408": "Ybodychange",
    "dba746ba9387bee04ed362254abb5d9ed35169cd": "Ybodychange",
    "c9cf116fcb4d295c3dd6fa80d73648bc7f34301c": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "cea86a6cad3098ebcdb4a88db2e49477b07e0d93": "Ymultichange(Yparameterchange,Ybodychange)",
    "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5": "Ybodychange",
    "12a1aec08012575b94c262d2b825a439bd69fde3": "Ybodychange",
    "39ad631113210aadd4ab2a1e58514f55c7012328": "Ybodychange",
    "ec19316322d0540f0734f3812c9a16394dae9c3a": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878": "Ybodychange",
    "c2d3932843e70e4bb5df7161800aca248f9af778": "Ybodychange",
    "c38185458ab824874b8465c46b4dc42646440aaa": "Ybodychange",
    "78e9ce870170ca3ef88fd78f8e0af0681c958eb3": "Ybodychange",
    "5d7063c660b241bce251f1a8c89394619f2791fb": "Ybodychange",
    "3bd6412e39a141b980901f291391ff1bcc4a61f3": "Yfilerename",
    "7f9839943c55dbff0b1d42661fb312b625d35228": "Ybodychange",
    "8a75a5feecc94d5f22f5850d2efe05cc9b3075bd": "Ybodychange",
    "267bdf541787643fbe6126605cbfb91dbcde1e91": "Ybodychange",
    "eecd476fa8c6dba62f919a5ff1740d108848c867": "Ybodychange",
    "84eddc36730c1eca845257201c71a0d1fb2d40cf": "Ybodychange",
    "5fd3fab179d700d68281fee316519fdd907bbcd6": "Ybodychange",
    "b1cfd257eb46dba42033984145134eae5880f657": "Yintroduced"
  },
  "changeHistoryDetails": {
    "59aa0915eae4629a5787edba5eb487389e27cf72": {
      "type": "Ybodychange",
      "commitMessage": "minor: Refactored getDetails method of RightCurlyCheck\n",
      "commitDate": 1493732429000,
      "commitName": "59aa0915eae4629a5787edba5eb487389e27cf72",
      "commitAuthor": "Piyush Sharma",
      "commitDateOld": 1492451466000,
      "commitNameOld": "8de64da1a00da618106b03c68400a5b265ec2580",
      "commitAuthorOld": "Vladislav Lisetskii",
      "daysBetweenCommits": 14.83,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,11 @@\n     public void visitToken(DetailAST ast) {\n-        final Details details \u003d getDetails(ast);\n+        final Details details \u003d Details.getDetails(ast);\n         final DetailAST rcurly \u003d details.rcurly;\n \n         if (rcurly !\u003d null) {\n             final String violation \u003d validate(details);\n             if (!violation.isEmpty()) {\n                 log(rcurly, violation, \"}\", rcurly.getColumnNo() + 1);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "70ab9f4af3d163b940e025bc4665f2f23892525a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3685: Refactoring for RightCurlyCheck.java\n",
      "commitDate": 1489375704000,
      "commitName": "70ab9f4af3d163b940e025bc4665f2f23892525a",
      "commitAuthor": "Sagar",
      "commitDateOld": 1488165925000,
      "commitNameOld": "ce21086e087661553f3a774c38362327ee88996a",
      "commitAuthorOld": "Vladislav Lisetskii",
      "daysBetweenCommits": 14.0,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,11 @@\n     public void visitToken(DetailAST ast) {\n         final Details details \u003d getDetails(ast);\n         final DetailAST rcurly \u003d details.rcurly;\n \n         if (rcurly !\u003d null) {\n-            final String violation;\n-            if (shouldStartLine) {\n-                final String targetSourceLine \u003d getLines()[rcurly.getLineNo() - 1];\n-                violation \u003d validate(details, option, true, targetSourceLine);\n-            }\n-            else {\n-                violation \u003d validate(details, option, false, \"\");\n-            }\n-\n+            final String violation \u003d validate(details);\n             if (!violation.isEmpty()) {\n                 log(rcurly, violation, \"}\", rcurly.getColumnNo() + 1);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "4cda2565674ea4260547e663e9660df0029709d1": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3764: removed garbage placed in RightCurlyCheck\u0027s rcurly",
      "commitDate": 1485547897000,
      "commitName": "4cda2565674ea4260547e663e9660df0029709d1",
      "commitAuthor": "rnveach",
      "commitDateOld": 1485527514000,
      "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 0.24,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n     public void visitToken(DetailAST ast) {\n         final Details details \u003d getDetails(ast);\n         final DetailAST rcurly \u003d details.rcurly;\n \n-        if (rcurly !\u003d null \u0026\u0026 rcurly.getType() \u003d\u003d TokenTypes.RCURLY) {\n+        if (rcurly !\u003d null) {\n             final String violation;\n             if (shouldStartLine) {\n                 final String targetSourceLine \u003d getLines()[rcurly.getLineNo() - 1];\n                 violation \u003d validate(details, option, true, targetSourceLine);\n             }\n             else {\n                 violation \u003d validate(details, option, false, \"\");\n             }\n \n             if (!violation.isEmpty()) {\n                 log(rcurly, violation, \"}\", rcurly.getColumnNo() + 1);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3143: forbid empty return statements and fixed violations",
      "commitDate": 1464356569000,
      "commitName": "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
      "commitAuthor": "rnveach",
      "commitDateOld": 1458221995000,
      "commitNameOld": "167dd96d8ca503a472bf003f187191d6b0ce586c",
      "commitAuthorOld": "Rasmus Kaj",
      "daysBetweenCommits": 71.0,
      "commitsBetweenForRepo": 145,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,19 @@\n     public void visitToken(DetailAST ast) {\n         final Details details \u003d getDetails(ast);\n         final DetailAST rcurly \u003d details.rcurly;\n \n-        if (rcurly \u003d\u003d null || rcurly.getType() !\u003d TokenTypes.RCURLY) {\n-            // we need to have both tokens to perform the check\n-            return;\n-        }\n+        if (rcurly !\u003d null \u0026\u0026 rcurly.getType() \u003d\u003d TokenTypes.RCURLY) {\n+            final String violation;\n+            if (shouldStartLine) {\n+                final String targetSourceLine \u003d getLines()[rcurly.getLineNo() - 1];\n+                violation \u003d validate(details, option, true, targetSourceLine);\n+            }\n+            else {\n+                violation \u003d validate(details, option, false, \"\");\n+            }\n \n-        final String violation;\n-        if (shouldStartLine) {\n-            final String targetSourceLine \u003d getLines()[rcurly.getLineNo() - 1];\n-            violation \u003d validate(details, option, true, targetSourceLine);\n-        }\n-        else {\n-            violation \u003d validate(details, option, false, \"\");\n-        }\n-\n-        if (!violation.isEmpty()) {\n-            log(rcurly, violation, \"}\", rcurly.getColumnNo() + 1);\n+            if (!violation.isEmpty()) {\n+                log(rcurly, violation, \"}\", rcurly.getColumnNo() + 1);\n+            }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "9faf80abaee2a2e224c7d0f9d4a45307b37a398e": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2451: removed excess hierarchy from RightCurlyCheck",
      "commitDate": 1447384577000,
      "commitName": "9faf80abaee2a2e224c7d0f9d4a45307b37a398e",
      "commitAuthor": "rnveach",
      "commitDateOld": 1444265756000,
      "commitNameOld": "423ed9e469db620671459827b58c89025d8f6c66",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 36.1,
      "commitsBetweenForRepo": 285,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n     public void visitToken(DetailAST ast) {\n         final Details details \u003d getDetails(ast);\n         final DetailAST rcurly \u003d details.rcurly;\n \n         if (rcurly \u003d\u003d null || rcurly.getType() !\u003d TokenTypes.RCURLY) {\n             // we need to have both tokens to perform the check\n             return;\n         }\n \n         final String violation;\n         if (shouldStartLine) {\n             final String targetSourceLine \u003d getLines()[rcurly.getLineNo() - 1];\n-            violation \u003d validate(details, getAbstractOption(), true, targetSourceLine);\n+            violation \u003d validate(details, option, true, targetSourceLine);\n         }\n         else {\n-            violation \u003d validate(details, getAbstractOption(), false, \"\");\n+            violation \u003d validate(details, option, false, \"\");\n         }\n \n         if (!violation.isEmpty()) {\n             log(rcurly, violation, \"}\", rcurly.getColumnNo() + 1);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "d282d5b8db9eba5943d1cb0269315744d5344a47": {
      "type": "Ybodychange",
      "commitMessage": "Refactoring of RightCurlyCheck, issue #1511.\n",
      "commitDate": 1438592589000,
      "commitName": "d282d5b8db9eba5943d1cb0269315744d5344a47",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": 1438460185000,
      "commitNameOld": "3a5a73d5c110418f712f5a9a838c6b4106506fdd",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 1.53,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,22 @@\n     public void visitToken(DetailAST ast) {\n         final Details details \u003d getDetails(ast);\n         final DetailAST rcurly \u003d details.rcurly;\n \n         if (rcurly \u003d\u003d null || rcurly.getType() !\u003d TokenTypes.RCURLY) {\n             // we need to have both tokens to perform the check\n             return;\n         }\n \n-        final DetailAST lcurly \u003d details.lcurly;\n+        final String violation;\n+        if (shouldStartLine) {\n+            final String targetSourceLine \u003d getLines()[rcurly.getLineNo() - 1];\n+            violation \u003d validate(details, getAbstractOption(), true, targetSourceLine);\n+        }\n+        else {\n+            violation \u003d validate(details, getAbstractOption(), false, \"\");\n+        }\n \n-        validate(details, rcurly, lcurly);\n+        if (!violation.isEmpty()) {\n+            log(rcurly, violation, \"}\", rcurly.getColumnNo() + 1);\n+        }\n     }\n\\ No newline at end of file\n"
    },
    "f1dced161ab0c818f0e1e125fc5b88b71f5b171e": {
      "type": "Ybodychange",
      "commitMessage": "Add new option for RightCurlyCheck, issue #1019.\n",
      "commitDate": 1438285211000,
      "commitName": "f1dced161ab0c818f0e1e125fc5b88b71f5b171e",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": 1438050838000,
      "commitNameOld": "f1dc9b205d1ccdba85e34f4cb7adf9ffd4af2361",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 2.71,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,13 @@\n     public void visitToken(DetailAST ast) {\n         final Details details \u003d getDetails(ast);\n         final DetailAST rcurly \u003d details.rcurly;\n \n         if (rcurly \u003d\u003d null || rcurly.getType() !\u003d TokenTypes.RCURLY) {\n             // we need to have both tokens to perform the check\n             return;\n         }\n \n         final DetailAST lcurly \u003d details.lcurly;\n \n         validate(details, rcurly, lcurly);\n-\n-        if (!shouldStartLine) {\n-            return;\n-        }\n-        final boolean startsLine \u003d\n-                Utils.whitespaceBefore(rcurly.getColumnNo(),\n-                        getLines()[rcurly.getLineNo() - 1]);\n-\n-        if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n-            log(rcurly, MSG_KEY_LINE_NEW, \"}\");\n-        }\n     }\n\\ No newline at end of file\n"
    },
    "c99f34002b7340ec8d0888f8f9b3992df798e408": {
      "type": "Ybodychange",
      "commitMessage": "RightCurlyCheck updated to follow Cyclomatic Complexity rule. #954\n",
      "commitDate": 1434261690000,
      "commitName": "c99f34002b7340ec8d0888f8f9b3992df798e408",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": 1431863229000,
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 27.76,
      "commitsBetweenForRepo": 133,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,24 @@\n     public void visitToken(DetailAST ast) {\n         final Details details \u003d getDetails(ast);\n         final DetailAST rcurly \u003d details.rcurly;\n \n         if (rcurly \u003d\u003d null || rcurly.getType() !\u003d TokenTypes.RCURLY) {\n             // we need to have both tokens to perform the check\n             return;\n         }\n \n         final DetailAST lcurly \u003d details.lcurly;\n-        final DetailAST nextToken \u003d details.nextToken;\n-        final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n \n-        if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME \u0026\u0026 !hasLineBreakBefore(rcurly)) {\n-            log(rcurly, MSG_KEY_LINE_BREAK_BEFORE);\n-        }\n-\n-        if (shouldCheckLastRcurly) {\n-            if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n-                log(rcurly, MSG_KEY_LINE_ALONE, \"}\");\n-            }\n-        }\n-        else if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME\n-                \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo()) {\n-            log(rcurly, MSG_KEY_LINE_SAME, \"}\");\n-        }\n-        else if (getAbstractOption() \u003d\u003d RightCurlyOption.ALONE\n-                \u0026\u0026 rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()\n-                \u0026\u0026 !isEmptyBody(lcurly)) {\n-            log(rcurly, MSG_KEY_LINE_ALONE, \"}\");\n-        }\n+        validate(details, rcurly, lcurly);\n \n         if (!shouldStartLine) {\n             return;\n         }\n         final boolean startsLine \u003d\n                 Utils.whitespaceBefore(rcurly.getColumnNo(),\n                         getLines()[rcurly.getLineNo() - 1]);\n \n         if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n             log(rcurly, MSG_KEY_LINE_NEW, \"}\");\n         }\n     }\n\\ No newline at end of file\n"
    },
    "dba746ba9387bee04ed362254abb5d9ed35169cd": {
      "type": "Ybodychange",
      "commitMessage": "Fix PMD violations from PrematureDeclaration rule. #948\n",
      "commitDate": 1431536292000,
      "commitName": "dba746ba9387bee04ed362254abb5d9ed35169cd",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1430634431000,
      "commitNameOld": "0f543a21fee9dec9b388bb6f2c42540fe8bf02ec",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 10.44,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,46 @@\n     public void visitToken(DetailAST ast)\n     {\n         final Details details \u003d getDetails(ast);\n         final DetailAST rcurly \u003d details.rcurly;\n-        final DetailAST lcurly \u003d details.lcurly;\n-        final DetailAST nextToken \u003d details.nextToken;\n-        final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n \n         if (rcurly \u003d\u003d null || rcurly.getType() !\u003d TokenTypes.RCURLY) {\n             // we need to have both tokens to perform the check\n             return;\n         }\n \n+        final DetailAST lcurly \u003d details.lcurly;\n+        final DetailAST nextToken \u003d details.nextToken;\n+        final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n+\n         if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME \u0026\u0026 !hasLineBreakBefore(rcurly)) {\n             log(rcurly, MSG_KEY_LINE_BREAK_BEFORE);\n         }\n \n         if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 log(rcurly, MSG_KEY_LINE_ALONE, \"}\");\n             }\n         }\n         else if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo())\n         {\n             log(rcurly, MSG_KEY_LINE_SAME, \"}\");\n         }\n         else if (getAbstractOption() \u003d\u003d RightCurlyOption.ALONE\n                 \u0026\u0026 rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()\n                 \u0026\u0026 !isEmptyBody(lcurly))\n         {\n             log(rcurly, MSG_KEY_LINE_ALONE, \"}\");\n         }\n \n         if (!shouldStartLine) {\n             return;\n         }\n         final boolean startsLine \u003d\n                 Utils.whitespaceBefore(rcurly.getColumnNo(),\n                         getLines()[rcurly.getLineNo() - 1]);\n \n         if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n             log(rcurly, MSG_KEY_LINE_NEW, \"}\");\n         }\n     }\n\\ No newline at end of file\n"
    },
    "c9cf116fcb4d295c3dd6fa80d73648bc7f34301c": {
      "type": "Ybodychange",
      "commitMessage": "PMD Rule:ExcessiveMethodLength Priority:3 Avoid really long methods. Issue #744\n",
      "commitDate": 1429638508000,
      "commitName": "c9cf116fcb4d295c3dd6fa80d73648bc7f34301c",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": 1426454536000,
      "commitNameOld": "1c15b6a36baa68dc3f2ebdf9baac131e98bb9e04",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 36.85,
      "commitsBetweenForRepo": 139,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,115 +1,45 @@\n     public void visitToken(DetailAST ast)\n     {\n-        // Attempt to locate the tokens to do the check\n-        DetailAST rcurly;\n-        DetailAST lcurly;\n-        DetailAST nextToken;\n-        boolean shouldCheckLastRcurly \u003d false;\n-\n-        switch (ast.getType()) {\n-            case TokenTypes.LITERAL_TRY:\n-                lcurly \u003d ast.getFirstChild();\n-                nextToken \u003d lcurly.getNextSibling();\n-                rcurly \u003d lcurly.getLastChild();\n-                break;\n-            case TokenTypes.LITERAL_CATCH:\n-                nextToken \u003d ast.getNextSibling();\n-                lcurly \u003d ast.getLastChild();\n-                rcurly \u003d lcurly.getLastChild();\n-                if (nextToken \u003d\u003d null) {\n-                    shouldCheckLastRcurly \u003d true;\n-                    nextToken \u003d getNextToken(ast);\n-                }\n-                break;\n-            case TokenTypes.LITERAL_IF:\n-                nextToken \u003d ast.findFirstToken(TokenTypes.LITERAL_ELSE);\n-                if (nextToken !\u003d null) {\n-                    lcurly \u003d nextToken.getPreviousSibling();\n-                    rcurly \u003d lcurly.getLastChild();\n-                }\n-                else {\n-                    shouldCheckLastRcurly \u003d true;\n-                    nextToken \u003d getNextToken(ast);\n-                    lcurly \u003d ast.getLastChild();\n-                    rcurly \u003d lcurly.getLastChild();\n-                }\n-                break;\n-            case TokenTypes.LITERAL_ELSE:\n-                shouldCheckLastRcurly \u003d true;\n-                nextToken \u003d getNextToken(ast);\n-                lcurly \u003d ast.getFirstChild();\n-                rcurly \u003d lcurly.getLastChild();\n-                break;\n-            case TokenTypes.LITERAL_FINALLY:\n-                shouldCheckLastRcurly \u003d true;\n-                nextToken \u003d getNextToken(ast);\n-                lcurly \u003d ast.getFirstChild();\n-                rcurly \u003d lcurly.getLastChild();\n-                break;\n-            case TokenTypes.CLASS_DEF:\n-                final DetailAST child \u003d ast.getLastChild();\n-                lcurly \u003d child.getFirstChild();\n-                rcurly \u003d child.getLastChild();\n-                nextToken \u003d ast;\n-                break;\n-            case TokenTypes.CTOR_DEF:\n-            case TokenTypes.STATIC_INIT:\n-            case TokenTypes.INSTANCE_INIT:\n-                lcurly \u003d ast.findFirstToken(TokenTypes.SLIST);\n-                rcurly \u003d lcurly.getLastChild();\n-                nextToken \u003d ast;\n-                break;\n-            case TokenTypes.METHOD_DEF:\n-            case TokenTypes.LITERAL_FOR:\n-            case TokenTypes.LITERAL_WHILE:\n-            case TokenTypes.LITERAL_DO:\n-                lcurly \u003d ast.findFirstToken(TokenTypes.SLIST);\n-                //SLIST could be absent if method is abstract, and code like \"while(true);\"\n-                if (lcurly \u003d\u003d null) {\n-                    return;\n-                }\n-                rcurly \u003d lcurly.getLastChild();\n-                nextToken \u003d ast;\n-                break;\n-            default:\n-                throw new RuntimeException(\"Unexpected token type (\"\n-                    + TokenTypes.getTokenName(ast.getType()) + \")\");\n-        }\n+        final Details details \u003d getDetails(ast);\n+        final DetailAST rcurly \u003d details.rcurly;\n+        final DetailAST lcurly \u003d details.lcurly;\n+        final DetailAST nextToken \u003d details.nextToken;\n+        final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n \n         if (rcurly \u003d\u003d null || rcurly.getType() !\u003d TokenTypes.RCURLY) {\n             // we need to have both tokens to perform the check\n             return;\n         }\n \n         if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME \u0026\u0026 !hasLineBreakBefore(rcurly)) {\n             log(rcurly, MSG_KEY_LINE_BREAK_BEFORE);\n         }\n \n         if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 log(rcurly, MSG_KEY_LINE_ALONE, \"}\");\n             }\n         }\n         else if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo())\n         {\n             log(rcurly, MSG_KEY_LINE_SAME, \"}\");\n         }\n         else if (getAbstractOption() \u003d\u003d RightCurlyOption.ALONE\n                 \u0026\u0026 rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()\n                 \u0026\u0026 !isEmptyBody(lcurly))\n         {\n             log(rcurly, MSG_KEY_LINE_ALONE, \"}\");\n         }\n \n         if (!shouldStartLine) {\n             return;\n         }\n         final boolean startsLine \u003d\n                 Utils.whitespaceBefore(rcurly.getColumnNo(),\n                         getLines()[rcurly.getLineNo() - 1]);\n \n         if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n             log(rcurly, MSG_KEY_LINE_NEW, \"}\");\n         }\n     }\n\\ No newline at end of file\n"
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": 1426023398000,
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1425602876000,
      "commitNameOld": "f7828693395f71a6ae99710f3fab44cb8a66ea51",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 4.87,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,115 +1,115 @@\n     public void visitToken(DetailAST ast)\n     {\n         // Attempt to locate the tokens to do the check\n         DetailAST rcurly;\n         DetailAST lcurly;\n         DetailAST nextToken;\n         boolean shouldCheckLastRcurly \u003d false;\n \n         switch (ast.getType()) {\n             case TokenTypes.LITERAL_TRY:\n                 lcurly \u003d ast.getFirstChild();\n                 nextToken \u003d lcurly.getNextSibling();\n                 rcurly \u003d lcurly.getLastChild();\n                 break;\n             case TokenTypes.LITERAL_CATCH:\n                 nextToken \u003d ast.getNextSibling();\n                 lcurly \u003d ast.getLastChild();\n                 rcurly \u003d lcurly.getLastChild();\n                 if (nextToken \u003d\u003d null) {\n                     shouldCheckLastRcurly \u003d true;\n                     nextToken \u003d getNextToken(ast);\n                 }\n                 break;\n             case TokenTypes.LITERAL_IF:\n                 nextToken \u003d ast.findFirstToken(TokenTypes.LITERAL_ELSE);\n                 if (nextToken !\u003d null) {\n                     lcurly \u003d nextToken.getPreviousSibling();\n                     rcurly \u003d lcurly.getLastChild();\n                 }\n                 else {\n                     shouldCheckLastRcurly \u003d true;\n                     nextToken \u003d getNextToken(ast);\n                     lcurly \u003d ast.getLastChild();\n                     rcurly \u003d lcurly.getLastChild();\n                 }\n                 break;\n             case TokenTypes.LITERAL_ELSE:\n                 shouldCheckLastRcurly \u003d true;\n                 nextToken \u003d getNextToken(ast);\n                 lcurly \u003d ast.getFirstChild();\n                 rcurly \u003d lcurly.getLastChild();\n                 break;\n             case TokenTypes.LITERAL_FINALLY:\n                 shouldCheckLastRcurly \u003d true;\n                 nextToken \u003d getNextToken(ast);\n                 lcurly \u003d ast.getFirstChild();\n                 rcurly \u003d lcurly.getLastChild();\n                 break;\n             case TokenTypes.CLASS_DEF:\n                 final DetailAST child \u003d ast.getLastChild();\n                 lcurly \u003d child.getFirstChild();\n                 rcurly \u003d child.getLastChild();\n                 nextToken \u003d ast;\n                 break;\n             case TokenTypes.CTOR_DEF:\n             case TokenTypes.STATIC_INIT:\n             case TokenTypes.INSTANCE_INIT:\n                 lcurly \u003d ast.findFirstToken(TokenTypes.SLIST);\n                 rcurly \u003d lcurly.getLastChild();\n                 nextToken \u003d ast;\n                 break;\n             case TokenTypes.METHOD_DEF:\n             case TokenTypes.LITERAL_FOR:\n             case TokenTypes.LITERAL_WHILE:\n             case TokenTypes.LITERAL_DO:\n                 lcurly \u003d ast.findFirstToken(TokenTypes.SLIST);\n                 //SLIST could be absent if method is abstract, and code like \"while(true);\"\n                 if (lcurly \u003d\u003d null) {\n                     return;\n                 }\n                 rcurly \u003d lcurly.getLastChild();\n                 nextToken \u003d ast;\n                 break;\n             default:\n                 throw new RuntimeException(\"Unexpected token type (\"\n                     + TokenTypes.getTokenName(ast.getType()) + \")\");\n         }\n \n-        if ((rcurly \u003d\u003d null) || (rcurly.getType() !\u003d TokenTypes.RCURLY)) {\n+        if (rcurly \u003d\u003d null || rcurly.getType() !\u003d TokenTypes.RCURLY) {\n             // we need to have both tokens to perform the check\n             return;\n         }\n \n         if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME \u0026\u0026 !hasLineBreakBefore(rcurly)) {\n             log(rcurly, MSG_KEY_LINE_BREAK_BEFORE);\n         }\n \n         if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 log(rcurly, MSG_KEY_LINE_ALONE, \"}\");\n             }\n         }\n-        else if ((getAbstractOption() \u003d\u003d RightCurlyOption.SAME)\n-                \u0026\u0026 (rcurly.getLineNo() !\u003d nextToken.getLineNo()))\n+        else if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME\n+                \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo())\n         {\n             log(rcurly, MSG_KEY_LINE_SAME, \"}\");\n         }\n-        else if ((getAbstractOption() \u003d\u003d RightCurlyOption.ALONE)\n-                \u0026\u0026 (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo())\n+        else if (getAbstractOption() \u003d\u003d RightCurlyOption.ALONE\n+                \u0026\u0026 rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()\n                 \u0026\u0026 !isEmptyBody(lcurly))\n         {\n             log(rcurly, MSG_KEY_LINE_ALONE, \"}\");\n         }\n \n         if (!shouldStartLine) {\n             return;\n         }\n         final boolean startsLine \u003d\n                 Utils.whitespaceBefore(rcurly.getColumnNo(),\n                         getLines()[rcurly.getLineNo() - 1]);\n \n-        if (!startsLine \u0026\u0026 (lcurly.getLineNo() !\u003d rcurly.getLineNo())) {\n+        if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n             log(rcurly, MSG_KEY_LINE_NEW, \"}\");\n         }\n     }\n\\ No newline at end of file\n"
    },
    "cea86a6cad3098ebcdb4a88db2e49477b07e0d93": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, blocks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheck.java\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java\n",
      "commitDate": 1421677949000,
      "commitName": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5": {
      "type": "Ybodychange",
      "commitMessage": "Issue #537 refactored tests from blocks package.\n",
      "commitDate": 1421431669000,
      "commitName": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5",
      "commitAuthor": "ychulovskyy",
      "commitDateOld": 1408036302000,
      "commitNameOld": "12a1aec08012575b94c262d2b825a439bd69fde3",
      "commitAuthorOld": "Max",
      "daysBetweenCommits": 155.04,
      "commitsBetweenForRepo": 353,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,115 +1,115 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // Attempt to locate the tokens to do the check\n         DetailAST rcurly;\n         DetailAST lcurly;\n         DetailAST nextToken;\n         boolean shouldCheckLastRcurly \u003d false;\n \n         switch (aAST.getType()) {\n         case TokenTypes.LITERAL_TRY:\n             lcurly \u003d aAST.getFirstChild();\n             nextToken \u003d lcurly.getNextSibling();\n             rcurly \u003d lcurly.getLastChild();\n             break;\n         case TokenTypes.LITERAL_CATCH:\n             nextToken \u003d aAST.getNextSibling();\n             lcurly \u003d aAST.getLastChild();\n             rcurly \u003d lcurly.getLastChild();\n             if (nextToken \u003d\u003d null) {\n                 shouldCheckLastRcurly \u003d true;\n                 nextToken \u003d getNextToken(aAST);\n             }\n             break;\n         case TokenTypes.LITERAL_IF:\n             nextToken \u003d aAST.findFirstToken(TokenTypes.LITERAL_ELSE);\n             if (nextToken !\u003d null) {\n                 lcurly \u003d nextToken.getPreviousSibling();\n                 rcurly \u003d lcurly.getLastChild();\n             }\n             else {\n                 shouldCheckLastRcurly \u003d true;\n                 nextToken \u003d getNextToken(aAST);\n                 lcurly \u003d aAST.getLastChild();\n                 rcurly \u003d lcurly.getLastChild();\n             }\n             break;\n         case TokenTypes.LITERAL_ELSE:\n             shouldCheckLastRcurly \u003d true;\n             nextToken \u003d getNextToken(aAST);\n             lcurly \u003d aAST.getFirstChild();\n             rcurly \u003d lcurly.getLastChild();\n             break;\n         case TokenTypes.LITERAL_FINALLY:\n             shouldCheckLastRcurly \u003d true;\n             nextToken \u003d getNextToken(aAST);\n             lcurly \u003d aAST.getFirstChild();\n             rcurly \u003d lcurly.getLastChild();\n             break;\n         case TokenTypes.CLASS_DEF:\n             final DetailAST child \u003d aAST.getLastChild();\n             lcurly \u003d child.getFirstChild();\n             rcurly \u003d child.getLastChild();\n             nextToken \u003d aAST;\n             break;\n         case TokenTypes.CTOR_DEF:\n         case TokenTypes.STATIC_INIT:\n         case TokenTypes.INSTANCE_INIT:\n             lcurly \u003d aAST.findFirstToken(TokenTypes.SLIST);\n             rcurly \u003d lcurly.getLastChild();\n             nextToken \u003d aAST;\n             break;\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.LITERAL_WHILE:\n         case TokenTypes.LITERAL_DO:\n             lcurly \u003d aAST.findFirstToken(TokenTypes.SLIST);\n             //SLIST could be absent if method is abstract, and code like \"while(true);\"\n             if (lcurly \u003d\u003d null) {\n                 return;\n             }\n             rcurly \u003d lcurly.getLastChild();\n             nextToken \u003d aAST;\n             break;\n         default:\n             throw new RuntimeException(\"Unexpected token type (\"\n                     + TokenTypes.getTokenName(aAST.getType()) + \")\");\n         }\n \n         if ((rcurly \u003d\u003d null) || (rcurly.getType() !\u003d TokenTypes.RCURLY)) {\n             // we need to have both tokens to perform the check\n             return;\n         }\n \n         if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME \u0026\u0026 !hasLineBreakBefore(rcurly)) {\n-            log(rcurly, \"line.break.before\");\n+            log(rcurly, MSG_KEY_LINE_BREAK_BEFORE);\n         }\n \n         if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n-                log(rcurly, \"line.alone\", \"}\");\n+                log(rcurly, MSG_KEY_LINE_ALONE, \"}\");\n             }\n         }\n         else if ((getAbstractOption() \u003d\u003d RightCurlyOption.SAME)\n                 \u0026\u0026 (rcurly.getLineNo() !\u003d nextToken.getLineNo()))\n         {\n-            log(rcurly, \"line.same\", \"}\");\n+            log(rcurly, MSG_KEY_LINE_SAME, \"}\");\n         }\n         else if ((getAbstractOption() \u003d\u003d RightCurlyOption.ALONE)\n                 \u0026\u0026 (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo())\n                 \u0026\u0026 !isEmptyBody(lcurly))\n         {\n-            log(rcurly, \"line.alone\", \"}\");\n+            log(rcurly, MSG_KEY_LINE_ALONE, \"}\");\n         }\n \n         if (!mShouldStartLine) {\n             return;\n         }\n         final boolean startsLine \u003d\n                 Utils.whitespaceBefore(rcurly.getColumnNo(),\n                         getLines()[rcurly.getLineNo() - 1]);\n \n         if (!startsLine \u0026\u0026 (lcurly.getLineNo() !\u003d rcurly.getLineNo())) {\n-            log(rcurly, \"line.new\", \"}\");\n+            log(rcurly, MSG_KEY_LINE_NEW, \"}\");\n         }\n     }\n\\ No newline at end of file\n"
    },
    "12a1aec08012575b94c262d2b825a439bd69fde3": {
      "type": "Ybodychange",
      "commitMessage": "RightCurly. Force line break before \u0027}\u0027 in case SAME option. #250\n",
      "commitDate": 1408036302000,
      "commitName": "12a1aec08012575b94c262d2b825a439bd69fde3",
      "commitAuthor": "Max",
      "commitDateOld": 1406761773000,
      "commitNameOld": "39ad631113210aadd4ab2a1e58514f55c7012328",
      "commitAuthorOld": "Max",
      "daysBetweenCommits": 14.75,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,101 +1,115 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // Attempt to locate the tokens to do the check\n         DetailAST rcurly;\n         DetailAST lcurly;\n         DetailAST nextToken;\n         boolean shouldCheckLastRcurly \u003d false;\n \n         switch (aAST.getType()) {\n         case TokenTypes.LITERAL_TRY:\n             lcurly \u003d aAST.getFirstChild();\n             nextToken \u003d lcurly.getNextSibling();\n             rcurly \u003d lcurly.getLastChild();\n             break;\n         case TokenTypes.LITERAL_CATCH:\n             nextToken \u003d aAST.getNextSibling();\n             lcurly \u003d aAST.getLastChild();\n             rcurly \u003d lcurly.getLastChild();\n             if (nextToken \u003d\u003d null) {\n                 shouldCheckLastRcurly \u003d true;\n                 nextToken \u003d getNextToken(aAST);\n             }\n             break;\n         case TokenTypes.LITERAL_IF:\n             nextToken \u003d aAST.findFirstToken(TokenTypes.LITERAL_ELSE);\n             if (nextToken !\u003d null) {\n                 lcurly \u003d nextToken.getPreviousSibling();\n                 rcurly \u003d lcurly.getLastChild();\n             }\n             else {\n                 shouldCheckLastRcurly \u003d true;\n                 nextToken \u003d getNextToken(aAST);\n                 lcurly \u003d aAST.getLastChild();\n                 rcurly \u003d lcurly.getLastChild();\n             }\n             break;\n         case TokenTypes.LITERAL_ELSE:\n             shouldCheckLastRcurly \u003d true;\n             nextToken \u003d getNextToken(aAST);\n             lcurly \u003d aAST.getFirstChild();\n             rcurly \u003d lcurly.getLastChild();\n             break;\n         case TokenTypes.LITERAL_FINALLY:\n             shouldCheckLastRcurly \u003d true;\n             nextToken \u003d getNextToken(aAST);\n             lcurly \u003d aAST.getFirstChild();\n             rcurly \u003d lcurly.getLastChild();\n             break;\n         case TokenTypes.CLASS_DEF:\n-            lcurly \u003d aAST.getLastChild().getFirstChild();\n-            rcurly \u003d aAST.getLastChild().getLastChild();\n+            final DetailAST child \u003d aAST.getLastChild();\n+            lcurly \u003d child.getFirstChild();\n+            rcurly \u003d child.getLastChild();\n             nextToken \u003d aAST;\n             break;\n         case TokenTypes.CTOR_DEF:\n-            lcurly \u003d aAST.getLastChild();\n+        case TokenTypes.STATIC_INIT:\n+        case TokenTypes.INSTANCE_INIT:\n+            lcurly \u003d aAST.findFirstToken(TokenTypes.SLIST);\n             rcurly \u003d lcurly.getLastChild();\n             nextToken \u003d aAST;\n             break;\n         case TokenTypes.METHOD_DEF:\n-            lcurly \u003d aAST.getLastChild();\n+        case TokenTypes.LITERAL_FOR:\n+        case TokenTypes.LITERAL_WHILE:\n+        case TokenTypes.LITERAL_DO:\n+            lcurly \u003d aAST.findFirstToken(TokenTypes.SLIST);\n+            //SLIST could be absent if method is abstract, and code like \"while(true);\"\n+            if (lcurly \u003d\u003d null) {\n+                return;\n+            }\n             rcurly \u003d lcurly.getLastChild();\n             nextToken \u003d aAST;\n             break;\n         default:\n             throw new RuntimeException(\"Unexpected token type (\"\n                     + TokenTypes.getTokenName(aAST.getType()) + \")\");\n         }\n \n         if ((rcurly \u003d\u003d null) || (rcurly.getType() !\u003d TokenTypes.RCURLY)) {\n             // we need to have both tokens to perform the check\n             return;\n         }\n \n+        if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME \u0026\u0026 !hasLineBreakBefore(rcurly)) {\n+            log(rcurly, \"line.break.before\");\n+        }\n+\n         if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 log(rcurly, \"line.alone\", \"}\");\n             }\n         }\n         else if ((getAbstractOption() \u003d\u003d RightCurlyOption.SAME)\n                 \u0026\u0026 (rcurly.getLineNo() !\u003d nextToken.getLineNo()))\n         {\n             log(rcurly, \"line.same\", \"}\");\n         }\n         else if ((getAbstractOption() \u003d\u003d RightCurlyOption.ALONE)\n                 \u0026\u0026 (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo())\n                 \u0026\u0026 !isEmptyBody(lcurly))\n         {\n             log(rcurly, \"line.alone\", \"}\");\n         }\n \n         if (!mShouldStartLine) {\n             return;\n         }\n         final boolean startsLine \u003d\n                 Utils.whitespaceBefore(rcurly.getColumnNo(),\n                         getLines()[rcurly.getLineNo() - 1]);\n \n         if (!startsLine \u0026\u0026 (lcurly.getLineNo() !\u003d rcurly.getLineNo())) {\n             log(rcurly, \"line.new\", \"}\");\n         }\n     }\n\\ No newline at end of file\n"
    },
    "39ad631113210aadd4ab2a1e58514f55c7012328": {
      "type": "Ybodychange",
      "commitMessage": "Fixed false positive. #213\n",
      "commitDate": 1406761773000,
      "commitName": "39ad631113210aadd4ab2a1e58514f55c7012328",
      "commitAuthor": "Max",
      "commitDateOld": 1405555974000,
      "commitNameOld": "ec19316322d0540f0734f3812c9a16394dae9c3a",
      "commitAuthorOld": "Max",
      "daysBetweenCommits": 13.96,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,100 +1,101 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // Attempt to locate the tokens to do the check\n         DetailAST rcurly;\n         DetailAST lcurly;\n         DetailAST nextToken;\n         boolean shouldCheckLastRcurly \u003d false;\n \n         switch (aAST.getType()) {\n         case TokenTypes.LITERAL_TRY:\n             lcurly \u003d aAST.getFirstChild();\n             nextToken \u003d lcurly.getNextSibling();\n             rcurly \u003d lcurly.getLastChild();\n             break;\n         case TokenTypes.LITERAL_CATCH:\n             nextToken \u003d aAST.getNextSibling();\n             lcurly \u003d aAST.getLastChild();\n             rcurly \u003d lcurly.getLastChild();\n             if (nextToken \u003d\u003d null) {\n                 shouldCheckLastRcurly \u003d true;\n                 nextToken \u003d getNextToken(aAST);\n             }\n             break;\n         case TokenTypes.LITERAL_IF:\n             nextToken \u003d aAST.findFirstToken(TokenTypes.LITERAL_ELSE);\n             if (nextToken !\u003d null) {\n                 lcurly \u003d nextToken.getPreviousSibling();\n                 rcurly \u003d lcurly.getLastChild();\n             }\n             else {\n                 shouldCheckLastRcurly \u003d true;\n                 nextToken \u003d getNextToken(aAST);\n                 lcurly \u003d aAST.getLastChild();\n                 rcurly \u003d lcurly.getLastChild();\n             }\n             break;\n         case TokenTypes.LITERAL_ELSE:\n             shouldCheckLastRcurly \u003d true;\n             nextToken \u003d getNextToken(aAST);\n             lcurly \u003d aAST.getFirstChild();\n             rcurly \u003d lcurly.getLastChild();\n             break;\n         case TokenTypes.LITERAL_FINALLY:\n             shouldCheckLastRcurly \u003d true;\n             nextToken \u003d getNextToken(aAST);\n             lcurly \u003d aAST.getFirstChild();\n             rcurly \u003d lcurly.getLastChild();\n             break;\n         case TokenTypes.CLASS_DEF:\n             lcurly \u003d aAST.getLastChild().getFirstChild();\n             rcurly \u003d aAST.getLastChild().getLastChild();\n             nextToken \u003d aAST;\n             break;\n         case TokenTypes.CTOR_DEF:\n             lcurly \u003d aAST.getLastChild();\n             rcurly \u003d lcurly.getLastChild();\n             nextToken \u003d aAST;\n             break;\n         case TokenTypes.METHOD_DEF:\n             lcurly \u003d aAST.getLastChild();\n             rcurly \u003d lcurly.getLastChild();\n             nextToken \u003d aAST;\n             break;\n         default:\n             throw new RuntimeException(\"Unexpected token type (\"\n                     + TokenTypes.getTokenName(aAST.getType()) + \")\");\n         }\n \n         if ((rcurly \u003d\u003d null) || (rcurly.getType() !\u003d TokenTypes.RCURLY)) {\n             // we need to have both tokens to perform the check\n             return;\n         }\n \n         if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 log(rcurly, \"line.alone\", \"}\");\n             }\n         }\n         else if ((getAbstractOption() \u003d\u003d RightCurlyOption.SAME)\n                 \u0026\u0026 (rcurly.getLineNo() !\u003d nextToken.getLineNo()))\n         {\n             log(rcurly, \"line.same\", \"}\");\n         }\n         else if ((getAbstractOption() \u003d\u003d RightCurlyOption.ALONE)\n-                \u0026\u0026 (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()))\n+                \u0026\u0026 (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo())\n+                \u0026\u0026 !isEmptyBody(lcurly))\n         {\n             log(rcurly, \"line.alone\", \"}\");\n         }\n \n         if (!mShouldStartLine) {\n             return;\n         }\n         final boolean startsLine \u003d\n                 Utils.whitespaceBefore(rcurly.getColumnNo(),\n                         getLines()[rcurly.getLineNo() - 1]);\n \n         if (!startsLine \u0026\u0026 (lcurly.getLineNo() !\u003d rcurly.getLineNo())) {\n             log(rcurly, \"line.new\", \"}\");\n         }\n     }\n\\ No newline at end of file\n"
    },
    "ec19316322d0540f0734f3812c9a16394dae9c3a": {
      "type": "Ybodychange",
      "commitMessage": "RightCurly was updated #182. Added option to check line break after the closing brace if that brace terminates a statement or the body of a method, constructor or named class.\n",
      "commitDate": 1405555974000,
      "commitName": "ec19316322d0540f0734f3812c9a16394dae9c3a",
      "commitAuthor": "Max",
      "commitDateOld": 1393953491000,
      "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthorOld": "Ivan Sopov",
      "daysBetweenCommits": 134.29,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,100 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // Attempt to locate the tokens to do the check\n         DetailAST rcurly;\n         DetailAST lcurly;\n         DetailAST nextToken;\n         boolean shouldCheckLastRcurly \u003d false;\n \n         switch (aAST.getType()) {\n         case TokenTypes.LITERAL_TRY:\n             lcurly \u003d aAST.getFirstChild();\n             nextToken \u003d lcurly.getNextSibling();\n             rcurly \u003d lcurly.getLastChild();\n             break;\n         case TokenTypes.LITERAL_CATCH:\n             nextToken \u003d aAST.getNextSibling();\n             lcurly \u003d aAST.getLastChild();\n             rcurly \u003d lcurly.getLastChild();\n             if (nextToken \u003d\u003d null) {\n                 shouldCheckLastRcurly \u003d true;\n                 nextToken \u003d getNextToken(aAST);\n             }\n             break;\n         case TokenTypes.LITERAL_IF:\n             nextToken \u003d aAST.findFirstToken(TokenTypes.LITERAL_ELSE);\n             if (nextToken !\u003d null) {\n                 lcurly \u003d nextToken.getPreviousSibling();\n                 rcurly \u003d lcurly.getLastChild();\n             }\n             else {\n                 shouldCheckLastRcurly \u003d true;\n                 nextToken \u003d getNextToken(aAST);\n                 lcurly \u003d aAST.getLastChild();\n                 rcurly \u003d lcurly.getLastChild();\n             }\n             break;\n         case TokenTypes.LITERAL_ELSE:\n             shouldCheckLastRcurly \u003d true;\n             nextToken \u003d getNextToken(aAST);\n             lcurly \u003d aAST.getFirstChild();\n             rcurly \u003d lcurly.getLastChild();\n             break;\n         case TokenTypes.LITERAL_FINALLY:\n             shouldCheckLastRcurly \u003d true;\n             nextToken \u003d getNextToken(aAST);\n             lcurly \u003d aAST.getFirstChild();\n             rcurly \u003d lcurly.getLastChild();\n             break;\n+        case TokenTypes.CLASS_DEF:\n+            lcurly \u003d aAST.getLastChild().getFirstChild();\n+            rcurly \u003d aAST.getLastChild().getLastChild();\n+            nextToken \u003d aAST;\n+            break;\n+        case TokenTypes.CTOR_DEF:\n+            lcurly \u003d aAST.getLastChild();\n+            rcurly \u003d lcurly.getLastChild();\n+            nextToken \u003d aAST;\n+            break;\n+        case TokenTypes.METHOD_DEF:\n+            lcurly \u003d aAST.getLastChild();\n+            rcurly \u003d lcurly.getLastChild();\n+            nextToken \u003d aAST;\n+            break;\n         default:\n             throw new RuntimeException(\"Unexpected token type (\"\n                     + TokenTypes.getTokenName(aAST.getType()) + \")\");\n         }\n \n         if ((rcurly \u003d\u003d null) || (rcurly.getType() !\u003d TokenTypes.RCURLY)) {\n             // we need to have both tokens to perform the check\n             return;\n         }\n \n         if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 log(rcurly, \"line.alone\", \"}\");\n             }\n         }\n         else if ((getAbstractOption() \u003d\u003d RightCurlyOption.SAME)\n-            \u0026\u0026 (rcurly.getLineNo() !\u003d nextToken.getLineNo()))\n+                \u0026\u0026 (rcurly.getLineNo() !\u003d nextToken.getLineNo()))\n         {\n             log(rcurly, \"line.same\", \"}\");\n         }\n         else if ((getAbstractOption() \u003d\u003d RightCurlyOption.ALONE)\n-                 \u0026\u0026 (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()))\n+                \u0026\u0026 (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()))\n         {\n             log(rcurly, \"line.alone\", \"}\");\n         }\n \n         if (!mShouldStartLine) {\n             return;\n         }\n         final boolean startsLine \u003d\n-            Utils.whitespaceBefore(rcurly.getColumnNo(),\n-                                   getLines()[rcurly.getLineNo() - 1]);\n+                Utils.whitespaceBefore(rcurly.getColumnNo(),\n+                        getLines()[rcurly.getLineNo() - 1]);\n \n         if (!startsLine \u0026\u0026 (lcurly.getLineNo() !\u003d rcurly.getLineNo())) {\n             log(rcurly, \"line.new\", \"}\");\n         }\n     }\n\\ No newline at end of file\n"
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878": {
      "type": "Ybodychange",
      "commitMessage": "Inspired by patch# 2111354 - changes to remove casting. Neat trick\n",
      "commitDate": 1221737656000,
      "commitName": "d62a2cc02092cb6c1a1666630a51a6ec7c50a878",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1214975994000,
      "commitNameOld": "d4b933799af120cf4a8490db98f396b6348430e9",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 78.26,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,85 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // Attempt to locate the tokens to do the check\n         DetailAST rcurly;\n         DetailAST lcurly;\n         DetailAST nextToken;\n         boolean shouldCheckLastRcurly \u003d false;\n \n         switch (aAST.getType()) {\n         case TokenTypes.LITERAL_TRY:\n-            lcurly \u003d (DetailAST) aAST.getFirstChild();\n-            nextToken \u003d (DetailAST) lcurly.getNextSibling();\n+            lcurly \u003d aAST.getFirstChild();\n+            nextToken \u003d lcurly.getNextSibling();\n             rcurly \u003d lcurly.getLastChild();\n             break;\n         case TokenTypes.LITERAL_CATCH:\n-            nextToken \u003d (DetailAST) aAST.getNextSibling();\n+            nextToken \u003d aAST.getNextSibling();\n             lcurly \u003d aAST.getLastChild();\n             rcurly \u003d lcurly.getLastChild();\n             if (nextToken \u003d\u003d null) {\n                 shouldCheckLastRcurly \u003d true;\n                 nextToken \u003d getNextToken(aAST);\n             }\n             break;\n         case TokenTypes.LITERAL_IF:\n             nextToken \u003d aAST.findFirstToken(TokenTypes.LITERAL_ELSE);\n             if (nextToken !\u003d null) {\n                 lcurly \u003d nextToken.getPreviousSibling();\n                 rcurly \u003d lcurly.getLastChild();\n             }\n             else {\n                 shouldCheckLastRcurly \u003d true;\n                 nextToken \u003d getNextToken(aAST);\n                 lcurly \u003d aAST.getLastChild();\n                 rcurly \u003d lcurly.getLastChild();\n             }\n             break;\n         case TokenTypes.LITERAL_ELSE:\n             shouldCheckLastRcurly \u003d true;\n             nextToken \u003d getNextToken(aAST);\n-            lcurly \u003d (DetailAST) aAST.getFirstChild();\n+            lcurly \u003d aAST.getFirstChild();\n             rcurly \u003d lcurly.getLastChild();\n             break;\n         case TokenTypes.LITERAL_FINALLY:\n             shouldCheckLastRcurly \u003d true;\n             nextToken \u003d getNextToken(aAST);\n-            lcurly \u003d (DetailAST) aAST.getFirstChild();\n+            lcurly \u003d aAST.getFirstChild();\n             rcurly \u003d lcurly.getLastChild();\n             break;\n         default:\n             throw new RuntimeException(\"Unexpected token type (\"\n                     + TokenTypes.getTokenName(aAST.getType()) + \")\");\n         }\n \n         if ((rcurly \u003d\u003d null) || (rcurly.getType() !\u003d TokenTypes.RCURLY)) {\n             // we need to have both tokens to perform the check\n             return;\n         }\n \n         if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 log(rcurly, \"line.alone\", \"}\");\n             }\n         }\n         else if ((getAbstractOption() \u003d\u003d RightCurlyOption.SAME)\n             \u0026\u0026 (rcurly.getLineNo() !\u003d nextToken.getLineNo()))\n         {\n             log(rcurly, \"line.same\", \"}\");\n         }\n         else if ((getAbstractOption() \u003d\u003d RightCurlyOption.ALONE)\n                  \u0026\u0026 (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()))\n         {\n             log(rcurly, \"line.alone\", \"}\");\n         }\n \n         if (!mShouldStartLine) {\n             return;\n         }\n         final boolean startsLine \u003d\n             Utils.whitespaceBefore(rcurly.getColumnNo(),\n                                    getLines()[rcurly.getLineNo() - 1]);\n \n         if (!startsLine \u0026\u0026 (lcurly.getLineNo() !\u003d rcurly.getLineNo())) {\n             log(rcurly, \"line.new\", \"}\");\n         }\n     }\n\\ No newline at end of file\n"
    },
    "c2d3932843e70e4bb5df7161800aca248f9af778": {
      "type": "Ybodychange",
      "commitMessage": "Clean up the use of ()\u0027s\n",
      "commitDate": 1152242806000,
      "commitName": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1137847382000,
      "commitNameOld": "c38185458ab824874b8465c46b4dc42646440aaa",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 166.61,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,85 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // Attempt to locate the tokens to do the check\n         DetailAST rcurly;\n         DetailAST lcurly;\n         DetailAST nextToken;\n         boolean shouldCheckLastRcurly \u003d false;\n \n         switch (aAST.getType()) {\n         case TokenTypes.LITERAL_TRY:\n             lcurly \u003d (DetailAST) aAST.getFirstChild();\n             nextToken \u003d (DetailAST) lcurly.getNextSibling();\n             rcurly \u003d lcurly.getLastChild();\n             break;\n         case TokenTypes.LITERAL_CATCH:\n             nextToken \u003d (DetailAST) aAST.getNextSibling();\n             lcurly \u003d aAST.getLastChild();\n             rcurly \u003d lcurly.getLastChild();\n             if (nextToken \u003d\u003d null) {\n                 shouldCheckLastRcurly \u003d true;\n                 nextToken \u003d getNextToken(aAST);\n             }\n             break;\n         case TokenTypes.LITERAL_IF:\n             nextToken \u003d aAST.findFirstToken(TokenTypes.LITERAL_ELSE);\n             if (nextToken !\u003d null) {\n                 lcurly \u003d nextToken.getPreviousSibling();\n                 rcurly \u003d lcurly.getLastChild();\n             }\n             else {\n                 shouldCheckLastRcurly \u003d true;\n                 nextToken \u003d getNextToken(aAST);\n                 lcurly \u003d aAST.getLastChild();\n                 rcurly \u003d lcurly.getLastChild();\n             }\n             break;\n         case TokenTypes.LITERAL_ELSE:\n             shouldCheckLastRcurly \u003d true;\n             nextToken \u003d getNextToken(aAST);\n             lcurly \u003d (DetailAST) aAST.getFirstChild();\n             rcurly \u003d lcurly.getLastChild();\n             break;\n         case TokenTypes.LITERAL_FINALLY:\n             shouldCheckLastRcurly \u003d true;\n             nextToken \u003d getNextToken(aAST);\n             lcurly \u003d (DetailAST) aAST.getFirstChild();\n             rcurly \u003d lcurly.getLastChild();\n             break;\n         default:\n             throw new RuntimeException(\"Unexpected token type (\"\n                     + TokenTypes.getTokenName(aAST.getType()) + \")\");\n         }\n \n-        if (rcurly \u003d\u003d null || rcurly.getType() !\u003d TokenTypes.RCURLY) {\n+        if ((rcurly \u003d\u003d null) || (rcurly.getType() !\u003d TokenTypes.RCURLY)) {\n             // we need to have both tokens to perform the check\n             return;\n         }\n \n         if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 log(rcurly, \"line.alone\", \"}\");\n             }\n         }\n         else if ((getAbstractOption() \u003d\u003d RightCurlyOption.SAME)\n             \u0026\u0026 (rcurly.getLineNo() !\u003d nextToken.getLineNo()))\n         {\n             log(rcurly, \"line.same\", \"}\");\n         }\n         else if ((getAbstractOption() \u003d\u003d RightCurlyOption.ALONE)\n                  \u0026\u0026 (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()))\n         {\n             log(rcurly, \"line.alone\", \"}\");\n         }\n \n         if (!mShouldStartLine) {\n             return;\n         }\n         final boolean startsLine \u003d\n             Utils.whitespaceBefore(rcurly.getColumnNo(),\n                                    getLines()[rcurly.getLineNo() - 1]);\n \n         if (!startsLine \u0026\u0026 (lcurly.getLineNo() !\u003d rcurly.getLineNo())) {\n             log(rcurly, \"line.new\", \"}\");\n         }\n     }\n\\ No newline at end of file\n"
    },
    "c38185458ab824874b8465c46b4dc42646440aaa": {
      "type": "Ybodychange",
      "commitMessage": "Code cleanup\n",
      "commitDate": 1137847382000,
      "commitName": "c38185458ab824874b8465c46b4dc42646440aaa",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1134846213000,
      "commitNameOld": "78e9ce870170ca3ef88fd78f8e0af0681c958eb3",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 34.74,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,85 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // Attempt to locate the tokens to do the check\n-        DetailAST rcurly \u003d null;\n-        DetailAST lcurly \u003d null;\n-        DetailAST nextToken \u003d null;\n+        DetailAST rcurly;\n+        DetailAST lcurly;\n+        DetailAST nextToken;\n         boolean shouldCheckLastRcurly \u003d false;\n \n         switch (aAST.getType()) {\n         case TokenTypes.LITERAL_TRY:\n             lcurly \u003d (DetailAST) aAST.getFirstChild();\n             nextToken \u003d (DetailAST) lcurly.getNextSibling();\n             rcurly \u003d lcurly.getLastChild();\n             break;\n         case TokenTypes.LITERAL_CATCH:\n             nextToken \u003d (DetailAST) aAST.getNextSibling();\n             lcurly \u003d aAST.getLastChild();\n             rcurly \u003d lcurly.getLastChild();\n             if (nextToken \u003d\u003d null) {\n                 shouldCheckLastRcurly \u003d true;\n                 nextToken \u003d getNextToken(aAST);\n             }\n             break;\n         case TokenTypes.LITERAL_IF:\n             nextToken \u003d aAST.findFirstToken(TokenTypes.LITERAL_ELSE);\n             if (nextToken !\u003d null) {\n                 lcurly \u003d nextToken.getPreviousSibling();\n                 rcurly \u003d lcurly.getLastChild();\n             }\n             else {\n                 shouldCheckLastRcurly \u003d true;\n                 nextToken \u003d getNextToken(aAST);\n                 lcurly \u003d aAST.getLastChild();\n                 rcurly \u003d lcurly.getLastChild();\n             }\n             break;\n         case TokenTypes.LITERAL_ELSE:\n             shouldCheckLastRcurly \u003d true;\n             nextToken \u003d getNextToken(aAST);\n             lcurly \u003d (DetailAST) aAST.getFirstChild();\n             rcurly \u003d lcurly.getLastChild();\n             break;\n         case TokenTypes.LITERAL_FINALLY:\n             shouldCheckLastRcurly \u003d true;\n             nextToken \u003d getNextToken(aAST);\n             lcurly \u003d (DetailAST) aAST.getFirstChild();\n             rcurly \u003d lcurly.getLastChild();\n             break;\n         default:\n             throw new RuntimeException(\"Unexpected token type (\"\n                     + TokenTypes.getTokenName(aAST.getType()) + \")\");\n         }\n \n         if (rcurly \u003d\u003d null || rcurly.getType() !\u003d TokenTypes.RCURLY) {\n             // we need to have both tokens to perform the check\n             return;\n         }\n \n         if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 log(rcurly, \"line.alone\", \"}\");\n             }\n         }\n         else if ((getAbstractOption() \u003d\u003d RightCurlyOption.SAME)\n             \u0026\u0026 (rcurly.getLineNo() !\u003d nextToken.getLineNo()))\n         {\n             log(rcurly, \"line.same\", \"}\");\n         }\n         else if ((getAbstractOption() \u003d\u003d RightCurlyOption.ALONE)\n                  \u0026\u0026 (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()))\n         {\n             log(rcurly, \"line.alone\", \"}\");\n         }\n \n         if (!mShouldStartLine) {\n             return;\n         }\n         final boolean startsLine \u003d\n             Utils.whitespaceBefore(rcurly.getColumnNo(),\n                                    getLines()[rcurly.getLineNo() - 1]);\n \n         if (!startsLine \u0026\u0026 (lcurly.getLineNo() !\u003d rcurly.getLineNo())) {\n             log(rcurly, \"line.new\", \"}\");\n         }\n     }\n\\ No newline at end of file\n"
    },
    "78e9ce870170ca3ef88fd78f8e0af0681c958eb3": {
      "type": "Ybodychange",
      "commitMessage": "Fix for 1000092 (RightCurlyCheck misbehaves for LIT_CATCH)\nNow the check verifies the placement of rcurly after all IFs, ELSEs,\nCATCHes and FINALLYs.  Also it could check that rcurly starts the\nline.\n\nAlso minor fix for typos in all AllTests.main(): we need to call\nrunner with AllTests.suite(), not with AllTests.class\n",
      "commitDate": 1134846213000,
      "commitName": "78e9ce870170ca3ef88fd78f8e0af0681c958eb3",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1130786628000,
      "commitNameOld": "1aee9d55cc5bd8cca011e17369f6e370efcc85bb",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 46.99,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,85 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // Attempt to locate the tokens to do the check\n         DetailAST rcurly \u003d null;\n+        DetailAST lcurly \u003d null;\n         DetailAST nextToken \u003d null;\n-        if (aAST.getType() \u003d\u003d TokenTypes.LITERAL_ELSE) {\n-            nextToken \u003d aAST;\n-            final DetailAST thenAST \u003d aAST.getPreviousSibling();\n-            rcurly \u003d thenAST.getLastChild();\n-        }\n-        else if (aAST.getType() \u003d\u003d TokenTypes.LITERAL_CATCH) {\n+        boolean shouldCheckLastRcurly \u003d false;\n+\n+        switch (aAST.getType()) {\n+        case TokenTypes.LITERAL_TRY:\n+            lcurly \u003d (DetailAST) aAST.getFirstChild();\n+            nextToken \u003d (DetailAST) lcurly.getNextSibling();\n+            rcurly \u003d lcurly.getLastChild();\n+            break;\n+        case TokenTypes.LITERAL_CATCH:\n             nextToken \u003d (DetailAST) aAST.getNextSibling();\n-            rcurly \u003d aAST.getLastChild().getLastChild();\n-        }\n-        else if (aAST.getType() \u003d\u003d TokenTypes.LITERAL_TRY) {\n-            final DetailAST firstChild \u003d (DetailAST) aAST.getFirstChild();\n-            nextToken \u003d (DetailAST) firstChild.getNextSibling();\n-            rcurly \u003d firstChild.getLastChild();\n+            lcurly \u003d aAST.getLastChild();\n+            rcurly \u003d lcurly.getLastChild();\n+            if (nextToken \u003d\u003d null) {\n+                shouldCheckLastRcurly \u003d true;\n+                nextToken \u003d getNextToken(aAST);\n+            }\n+            break;\n+        case TokenTypes.LITERAL_IF:\n+            nextToken \u003d aAST.findFirstToken(TokenTypes.LITERAL_ELSE);\n+            if (nextToken !\u003d null) {\n+                lcurly \u003d nextToken.getPreviousSibling();\n+                rcurly \u003d lcurly.getLastChild();\n+            }\n+            else {\n+                shouldCheckLastRcurly \u003d true;\n+                nextToken \u003d getNextToken(aAST);\n+                lcurly \u003d aAST.getLastChild();\n+                rcurly \u003d lcurly.getLastChild();\n+            }\n+            break;\n+        case TokenTypes.LITERAL_ELSE:\n+            shouldCheckLastRcurly \u003d true;\n+            nextToken \u003d getNextToken(aAST);\n+            lcurly \u003d (DetailAST) aAST.getFirstChild();\n+            rcurly \u003d lcurly.getLastChild();\n+            break;\n+        case TokenTypes.LITERAL_FINALLY:\n+            shouldCheckLastRcurly \u003d true;\n+            nextToken \u003d getNextToken(aAST);\n+            lcurly \u003d (DetailAST) aAST.getFirstChild();\n+            rcurly \u003d lcurly.getLastChild();\n+            break;\n+        default:\n+            throw new RuntimeException(\"Unexpected token type (\"\n+                    + TokenTypes.getTokenName(aAST.getType()) + \")\");\n         }\n \n-        // handle if-then-else without curlies:\n-        // if (cond)\n-        //     return 1;\n-        // else\n-        //     return 2;\n         if (rcurly \u003d\u003d null || rcurly.getType() !\u003d TokenTypes.RCURLY) {\n+            // we need to have both tokens to perform the check\n             return;\n         }\n \n-        // If have both tokens, perform the check\n-        if (nextToken !\u003d null) {\n-            if ((getAbstractOption() \u003d\u003d RightCurlyOption.SAME)\n-                \u0026\u0026 (rcurly.getLineNo() !\u003d nextToken.getLineNo()))\n-            {\n-                log(rcurly.getLineNo(), rcurly.getColumnNo(),\n-                    \"line.same\", \"}\");\n+        if (shouldCheckLastRcurly) {\n+            if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n+                log(rcurly, \"line.alone\", \"}\");\n             }\n-            else if ((getAbstractOption() \u003d\u003d RightCurlyOption.ALONE)\n-                       \u0026\u0026 (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()))\n-            {\n-                log(rcurly.getLineNo(), rcurly.getColumnNo(),\n-                    \"line.alone\", \"}\");\n-            }\n+        }\n+        else if ((getAbstractOption() \u003d\u003d RightCurlyOption.SAME)\n+            \u0026\u0026 (rcurly.getLineNo() !\u003d nextToken.getLineNo()))\n+        {\n+            log(rcurly, \"line.same\", \"}\");\n+        }\n+        else if ((getAbstractOption() \u003d\u003d RightCurlyOption.ALONE)\n+                 \u0026\u0026 (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()))\n+        {\n+            log(rcurly, \"line.alone\", \"}\");\n+        }\n+\n+        if (!mShouldStartLine) {\n+            return;\n+        }\n+        final boolean startsLine \u003d\n+            Utils.whitespaceBefore(rcurly.getColumnNo(),\n+                                   getLines()[rcurly.getLineNo() - 1]);\n+\n+        if (!startsLine \u0026\u0026 (lcurly.getLineNo() !\u003d rcurly.getLineNo())) {\n+            log(rcurly, \"line.new\", \"}\");\n         }\n     }\n\\ No newline at end of file\n"
    },
    "5d7063c660b241bce251f1a8c89394619f2791fb": {
      "type": "Ybodychange",
      "commitMessage": "Tighten up code\n",
      "commitDate": 1093527252000,
      "commitName": "5d7063c660b241bce251f1a8c89394619f2791fb",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1074114639000,
      "commitNameOld": "5670252b46f4915b276e647fa000361915eb4ff4",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 224.68,
      "commitsBetweenForRepo": 137,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // Attempt to locate the tokens to do the check\n         DetailAST rcurly \u003d null;\n         DetailAST nextToken \u003d null;\n         if (aAST.getType() \u003d\u003d TokenTypes.LITERAL_ELSE) {\n             nextToken \u003d aAST;\n             final DetailAST thenAST \u003d aAST.getPreviousSibling();\n             rcurly \u003d thenAST.getLastChild();\n         }\n         else if (aAST.getType() \u003d\u003d TokenTypes.LITERAL_CATCH) {\n             nextToken \u003d (DetailAST) aAST.getNextSibling();\n             rcurly \u003d aAST.getLastChild().getLastChild();\n         }\n         else if (aAST.getType() \u003d\u003d TokenTypes.LITERAL_TRY) {\n-            DetailAST firstChild \u003d (DetailAST) aAST.getFirstChild();\n+            final DetailAST firstChild \u003d (DetailAST) aAST.getFirstChild();\n             nextToken \u003d (DetailAST) firstChild.getNextSibling();\n             rcurly \u003d firstChild.getLastChild();\n         }\n \n         // handle if-then-else without curlies:\n         // if (cond)\n         //     return 1;\n         // else\n         //     return 2;\n         if (rcurly \u003d\u003d null || rcurly.getType() !\u003d TokenTypes.RCURLY) {\n             return;\n         }\n \n         // If have both tokens, perform the check\n         if (nextToken !\u003d null) {\n             if ((getAbstractOption() \u003d\u003d RightCurlyOption.SAME)\n                 \u0026\u0026 (rcurly.getLineNo() !\u003d nextToken.getLineNo()))\n             {\n                 log(rcurly.getLineNo(), rcurly.getColumnNo(),\n                     \"line.same\", \"}\");\n             }\n             else if ((getAbstractOption() \u003d\u003d RightCurlyOption.ALONE)\n                        \u0026\u0026 (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()))\n             {\n                 log(rcurly.getLineNo(), rcurly.getColumnNo(),\n                     \"line.alone\", \"}\");\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "3bd6412e39a141b980901f291391ff1bcc4a61f3": {
      "type": "Yfilerename",
      "commitMessage": "Refactored the Block checks\n",
      "commitDate": 1054723367000,
      "commitName": "3bd6412e39a141b980901f291391ff1bcc4a61f3",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1054719060000,
      "commitNameOld": "a0844ab125394605a6970a23132daa41ed5cecb1",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "7f9839943c55dbff0b1d42661fb312b625d35228": {
      "type": "Ybodychange",
      "commitMessage": "fixed bug reported by Joe Comuzzi\n",
      "commitDate": 1045600924000,
      "commitName": "7f9839943c55dbff0b1d42661fb312b625d35228",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": 1040256277000,
      "commitNameOld": "8ccfddcd2dd9955b035104d2e363406028d8a00d",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 61.86,
      "commitsBetweenForRepo": 170,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,45 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // Attempt to locate the tokens to do the check\n         DetailAST rcurly \u003d null;\n         DetailAST nextToken \u003d null;\n         if (aAST.getType() \u003d\u003d TokenTypes.LITERAL_ELSE) {\n             nextToken \u003d aAST;\n             final DetailAST thenAST \u003d aAST.getPreviousSibling();\n             rcurly \u003d thenAST.getLastChild();\n         }\n         else if (aAST.getType() \u003d\u003d TokenTypes.LITERAL_CATCH) {\n             nextToken \u003d (DetailAST) aAST.getNextSibling();\n             rcurly \u003d aAST.getLastChild().getLastChild();\n         }\n         else if (aAST.getType() \u003d\u003d TokenTypes.LITERAL_TRY) {\n             DetailAST firstChild \u003d (DetailAST) aAST.getFirstChild();\n             nextToken \u003d (DetailAST) firstChild.getNextSibling();\n             rcurly \u003d firstChild.getLastChild();\n         }\n \n+        // handle if-then-else without curlies:\n+        // if (cond)\n+        //     return 1;\n+        // else\n+        //     return 2;\n+        if (rcurly \u003d\u003d null || rcurly.getType() !\u003d TokenTypes.RCURLY) {\n+            return;\n+        }\n+\n         // If have both tokens, perform the check\n-        if ((rcurly !\u003d null) \u0026\u0026 (nextToken !\u003d null)) {\n+        if (nextToken !\u003d null) {\n             if ((getAbstractOption() \u003d\u003d RightCurlyOption.SAME)\n                 \u0026\u0026 (rcurly.getLineNo() !\u003d nextToken.getLineNo()))\n             {\n                 log(rcurly.getLineNo(), rcurly.getColumnNo(),\n                     \"line.same\", \"}\");\n             }\n             else if ((getAbstractOption() \u003d\u003d RightCurlyOption.ALONE)\n                        \u0026\u0026 (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()))\n             {\n                 log(rcurly.getLineNo(), rcurly.getColumnNo(),\n                     \"line.alone\", \"}\");\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "8a75a5feecc94d5f22f5850d2efe05cc9b3075bd": {
      "type": "Ybodychange",
      "commitMessage": "improve code coverage\n",
      "commitDate": 1039320555000,
      "commitName": "8a75a5feecc94d5f22f5850d2efe05cc9b3075bd",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1036543226000,
      "commitNameOld": "267bdf541787643fbe6126605cbfb91dbcde1e91",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 32.15,
      "commitsBetweenForRepo": 264,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // Attempt to locate the tokens to do the check\n         DetailAST rcurly \u003d null;\n         DetailAST nextToken \u003d null;\n         if (aAST.getType() \u003d\u003d TokenTypes.LITERAL_ELSE) {\n             nextToken \u003d aAST;\n-            DetailAST thenAST \u003d aAST.getPreviousSibling();\n+            final DetailAST thenAST \u003d aAST.getPreviousSibling();\n             rcurly \u003d thenAST.getLastChild();\n         }\n         else if (aAST.getType() \u003d\u003d TokenTypes.LITERAL_CATCH) {\n             nextToken \u003d (DetailAST) aAST.getNextSibling();\n             rcurly \u003d aAST.getLastChild().getLastChild();\n         }\n         else if (aAST.getType() \u003d\u003d TokenTypes.LITERAL_TRY) {\n             DetailAST firstChild \u003d (DetailAST) aAST.getFirstChild();\n             nextToken \u003d (DetailAST) firstChild.getNextSibling();\n             rcurly \u003d firstChild.getLastChild();\n         }\n \n         // If have both tokens, perform the check\n         if ((rcurly !\u003d null) \u0026\u0026 (nextToken !\u003d null)) {\n             if ((getAbstractOption() \u003d\u003d RightCurlyOption.SAME)\n                 \u0026\u0026 (rcurly.getLineNo() !\u003d nextToken.getLineNo()))\n             {\n                 log(rcurly.getLineNo(), rcurly.getColumnNo(),\n                     \"line.same\", \"}\");\n             }\n             else if ((getAbstractOption() \u003d\u003d RightCurlyOption.ALONE)\n                        \u0026\u0026 (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()))\n             {\n                 log(rcurly.getLineNo(), rcurly.getColumnNo(),\n                     \"line.alone\", \"}\");\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "267bdf541787643fbe6126605cbfb91dbcde1e91": {
      "type": "Ybodychange",
      "commitMessage": "Refactor to improve the AbstractOptionCheck code.\n",
      "commitDate": 1036543226000,
      "commitName": "267bdf541787643fbe6126605cbfb91dbcde1e91",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1036361604000,
      "commitNameOld": "065c1d3bc59e10d0235d8732652d2f2787fbbcd7",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 2.1,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // Attempt to locate the tokens to do the check\n         DetailAST rcurly \u003d null;\n         DetailAST nextToken \u003d null;\n         if (aAST.getType() \u003d\u003d TokenTypes.LITERAL_ELSE) {\n             nextToken \u003d aAST;\n             DetailAST thenAST \u003d aAST.getPreviousSibling();\n             rcurly \u003d thenAST.getLastChild();\n         }\n         else if (aAST.getType() \u003d\u003d TokenTypes.LITERAL_CATCH) {\n             nextToken \u003d (DetailAST) aAST.getNextSibling();\n             rcurly \u003d aAST.getLastChild().getLastChild();\n         }\n         else if (aAST.getType() \u003d\u003d TokenTypes.LITERAL_TRY) {\n             DetailAST firstChild \u003d (DetailAST) aAST.getFirstChild();\n             nextToken \u003d (DetailAST) firstChild.getNextSibling();\n             rcurly \u003d firstChild.getLastChild();\n         }\n \n         // If have both tokens, perform the check\n         if ((rcurly !\u003d null) \u0026\u0026 (nextToken !\u003d null)) {\n-            if ((mOption \u003d\u003d RightCurlyOption.SAME)\n+            if ((getAbstractOption() \u003d\u003d RightCurlyOption.SAME)\n                 \u0026\u0026 (rcurly.getLineNo() !\u003d nextToken.getLineNo()))\n             {\n                 log(rcurly.getLineNo(), rcurly.getColumnNo(),\n                     \"line.same\", \"}\");\n             }\n-            else if ((mOption \u003d\u003d RightCurlyOption.ALONE)\n+            else if ((getAbstractOption() \u003d\u003d RightCurlyOption.ALONE)\n                        \u0026\u0026 (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()))\n             {\n                 log(rcurly.getLineNo(), rcurly.getColumnNo(),\n                     \"line.alone\", \"}\");\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "eecd476fa8c6dba62f919a5ff1740d108848c867": {
      "type": "Ybodychange",
      "commitMessage": "moved static AST helpers in Util to DetailAST\n",
      "commitDate": 1035797514000,
      "commitName": "eecd476fa8c6dba62f919a5ff1740d108848c867",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": 1035008886000,
      "commitNameOld": "84eddc36730c1eca845257201c71a0d1fb2d40cf",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 9.13,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,36 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // Attempt to locate the tokens to do the check\n         DetailAST rcurly \u003d null;\n         DetailAST nextToken \u003d null;\n         if (aAST.getType() \u003d\u003d TokenTypes.LITERAL_ELSE) {\n             nextToken \u003d aAST;\n-            rcurly \u003d Utils.getLastSibling(\n-                aAST.getParent().getFirstChild().getNextSibling()\n-                .getNextSibling().getNextSibling().getFirstChild());\n+            DetailAST thenAST \u003d aAST.getPreviousSibling();\n+            rcurly \u003d thenAST.getLastChild();\n         }\n         else if (aAST.getType() \u003d\u003d TokenTypes.LITERAL_CATCH) {\n             nextToken \u003d (DetailAST) aAST.getNextSibling();\n-            rcurly \u003d Utils.getLastSibling(\n-                Utils.getLastSibling(aAST.getFirstChild()).getFirstChild());\n+            rcurly \u003d aAST.getLastChild().getLastChild();\n         }\n         else if (aAST.getType() \u003d\u003d TokenTypes.LITERAL_TRY) {\n-            nextToken \u003d (DetailAST) aAST.getFirstChild().getNextSibling();\n-            rcurly \u003d Utils.getLastSibling(aAST.getFirstChild().getFirstChild());\n+            DetailAST firstChild \u003d (DetailAST) aAST.getFirstChild();\n+            nextToken \u003d (DetailAST) firstChild.getNextSibling();\n+            rcurly \u003d firstChild.getLastChild();\n         }\n \n         // If have both tokens, perform the check\n         if ((rcurly !\u003d null) \u0026\u0026 (nextToken !\u003d null)) {\n             if ((mOption \u003d\u003d RightCurlyOption.SAME)\n                 \u0026\u0026 (rcurly.getLineNo() !\u003d nextToken.getLineNo()))\n             {\n                 log(rcurly.getLineNo(), rcurly.getColumnNo(),\n                     \"line.same\", \"}\");\n             }\n             else if ((mOption \u003d\u003d RightCurlyOption.ALONE)\n                        \u0026\u0026 (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()))\n             {\n                 log(rcurly.getLineNo(), rcurly.getColumnNo(),\n                     \"line.alone\", \"}\");\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "84eddc36730c1eca845257201c71a0d1fb2d40cf": {
      "type": "Ybodychange",
      "commitMessage": "Added a new class TokenTypes that contains all the type constants. This class\nbreaks the circular dependencies - the cost is needing to maintain this class\nwhen a new grammar is introduced.\n",
      "commitDate": 1035008886000,
      "commitName": "84eddc36730c1eca845257201c71a0d1fb2d40cf",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1034552460000,
      "commitNameOld": "63664e0b012593e18c5bb93ba528f27fd93fe0d4",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 5.28,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // Attempt to locate the tokens to do the check\n         DetailAST rcurly \u003d null;\n         DetailAST nextToken \u003d null;\n-        if (aAST.getType() \u003d\u003d JavaTokenTypes.LITERAL_else) {\n+        if (aAST.getType() \u003d\u003d TokenTypes.LITERAL_ELSE) {\n             nextToken \u003d aAST;\n             rcurly \u003d Utils.getLastSibling(\n                 aAST.getParent().getFirstChild().getNextSibling()\n                 .getNextSibling().getNextSibling().getFirstChild());\n         }\n-        else if (aAST.getType() \u003d\u003d JavaTokenTypes.LITERAL_catch) {\n+        else if (aAST.getType() \u003d\u003d TokenTypes.LITERAL_CATCH) {\n             nextToken \u003d (DetailAST) aAST.getNextSibling();\n             rcurly \u003d Utils.getLastSibling(\n                 Utils.getLastSibling(aAST.getFirstChild()).getFirstChild());\n         }\n-        else if (aAST.getType() \u003d\u003d JavaTokenTypes.LITERAL_try) {\n+        else if (aAST.getType() \u003d\u003d TokenTypes.LITERAL_TRY) {\n             nextToken \u003d (DetailAST) aAST.getFirstChild().getNextSibling();\n             rcurly \u003d Utils.getLastSibling(aAST.getFirstChild().getFirstChild());\n         }\n \n         // If have both tokens, perform the check\n         if ((rcurly !\u003d null) \u0026\u0026 (nextToken !\u003d null)) {\n             if ((mOption \u003d\u003d RightCurlyOption.SAME)\n                 \u0026\u0026 (rcurly.getLineNo() !\u003d nextToken.getLineNo()))\n             {\n                 log(rcurly.getLineNo(), rcurly.getColumnNo(),\n                     \"line.same\", \"}\");\n             }\n             else if ((mOption \u003d\u003d RightCurlyOption.ALONE)\n                        \u0026\u0026 (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()))\n             {\n                 log(rcurly.getLineNo(), rcurly.getColumnNo(),\n                     \"line.alone\", \"}\");\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "5fd3fab179d700d68281fee316519fdd907bbcd6": {
      "type": "Ybodychange",
      "commitMessage": "Stopped the tokens LPAREN and RPAREN being silently eaten by the grammar. Now\nneed to implement the ParenPad check. Should be easy.\n\nAlso need to refactor some the existing tests to use utility methods for\nlocating tokens in the tree. Currently hard code the positions, which is not\nideal.\n",
      "commitDate": 1034515902000,
      "commitName": "5fd3fab179d700d68281fee316519fdd907bbcd6",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1033982236000,
      "commitNameOld": "b1cfd257eb46dba42033984145134eae5880f657",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 6.18,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // Attempt to locate the tokens to do the check\n         DetailAST rcurly \u003d null;\n         DetailAST nextToken \u003d null;\n         if (aAST.getType() \u003d\u003d JavaTokenTypes.LITERAL_else) {\n             nextToken \u003d aAST;\n             rcurly \u003d Utils.getLastSibling(\n                 aAST.getParent().getFirstChild().getNextSibling()\n-                .getFirstChild());\n+                .getNextSibling().getNextSibling().getFirstChild());\n         }\n         else if (aAST.getType() \u003d\u003d JavaTokenTypes.LITERAL_catch) {\n             nextToken \u003d (DetailAST) aAST.getNextSibling();\n             rcurly \u003d Utils.getLastSibling(\n-                aAST.getFirstChild().getNextSibling().getFirstChild());\n+                Utils.getLastSibling(aAST.getFirstChild()).getFirstChild());\n         }\n         else if (aAST.getType() \u003d\u003d JavaTokenTypes.LITERAL_try) {\n             nextToken \u003d (DetailAST) aAST.getFirstChild().getNextSibling();\n             rcurly \u003d Utils.getLastSibling(aAST.getFirstChild().getFirstChild());\n         }\n \n         // If have both tokens, perform the check\n         if ((rcurly !\u003d null) \u0026\u0026 (nextToken !\u003d null)) {\n             if ((mOption \u003d\u003d RightCurlyOption.SAME)\n                 \u0026\u0026 (rcurly.getLineNo() !\u003d nextToken.getLineNo()))\n             {\n                 log(rcurly.getLineNo(), rcurly.getColumnNo(),\n                     \"line.same\", \"}\");\n             }\n             else if ((mOption \u003d\u003d RightCurlyOption.ALONE)\n                        \u0026\u0026 (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()))\n             {\n                 log(rcurly.getLineNo(), rcurly.getColumnNo(),\n                     \"line.alone\", \"}\");\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "b1cfd257eb46dba42033984145134eae5880f657": {
      "type": "Yintroduced",
      "commitMessage": "Major refactor to implement the RightCurly check. Required the ANTLR grammar\nto be worked to:\n\n- Not silently eat tokens (more to be done)\n\n- Not get the token tree out of order for try/finally\n",
      "commitDate": 1033982236000,
      "commitName": "b1cfd257eb46dba42033984145134eae5880f657",
      "commitAuthor": "Oliver Burn"
    }
  }
}