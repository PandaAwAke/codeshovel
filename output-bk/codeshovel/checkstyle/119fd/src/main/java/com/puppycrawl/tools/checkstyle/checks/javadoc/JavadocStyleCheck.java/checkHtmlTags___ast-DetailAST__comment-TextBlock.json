{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "JavadocStyleCheck.java",
  "functionName": "checkHtmlTags",
  "functionId": "checkHtmlTags___ast-DetailAST__comment-TextBlock",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
  "functionStartLine": 351,
  "functionEndLine": 406,
  "changeHistory": [
    "2c71b5433175f9689c308c47207f03d029671d11",
    "77733a452387aa2ee99fdc9a737633566cc7af3d",
    "1487e5161886d95cb8c82e4fb1a8b447fa7e32d0",
    "d282053d9ce02c13c779decfd079a8305086f752",
    "0aec69c702a43a0219a7cc1e3d0c2a21d8d871f0",
    "86826e1fa3fe3d793ee4723bb84ee0fc4ca38df1",
    "2880edd6554400955fb950bf8127311c436d2a7a",
    "dba746ba9387bee04ed362254abb5d9ed35169cd",
    "7dd24c8c35572b5db3e5c905d440e813cfe2538c",
    "303d7cc6182e72f5472c8bcd9aa37432986793d1",
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc",
    "89a51ba032fd9126651fa9efad31baf10c006ddf",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "7823165cce4d7978fe928d8ada0a4861c950ff0f",
    "06e8a4eaa00e548f52b2483864a31ba9defd0989",
    "ef58eba6d1b95443ff240ed05634c7e373b3445a",
    "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
    "a031901307ecd3b1ae035d7ac185bc221472b396",
    "8fb2acd39b7db6223486f5e06126c7f0a2642a72",
    "24ba45a971569b9702e6bf78c5c07c48beb25464",
    "fd6a743fd4b3c9283d62174327dd978bda694892",
    "927ec62235d97ab741aae3954b9a771843df724c",
    "51dae59b8dcfb5a34f2a8a5b3e788eb6599a1df3"
  ],
  "changeHistoryShort": {
    "2c71b5433175f9689c308c47207f03d029671d11": "Ybodychange",
    "77733a452387aa2ee99fdc9a737633566cc7af3d": "Ybodychange",
    "1487e5161886d95cb8c82e4fb1a8b447fa7e32d0": "Ybodychange",
    "d282053d9ce02c13c779decfd079a8305086f752": "Ybodychange",
    "0aec69c702a43a0219a7cc1e3d0c2a21d8d871f0": "Yrename",
    "86826e1fa3fe3d793ee4723bb84ee0fc4ca38df1": "Ybodychange",
    "2880edd6554400955fb950bf8127311c436d2a7a": "Ybodychange",
    "dba746ba9387bee04ed362254abb5d9ed35169cd": "Ybodychange",
    "7dd24c8c35572b5db3e5c905d440e813cfe2538c": "Ybodychange",
    "303d7cc6182e72f5472c8bcd9aa37432986793d1": "Ybodychange",
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc": "Ybodychange",
    "89a51ba032fd9126651fa9efad31baf10c006ddf": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "7823165cce4d7978fe928d8ada0a4861c950ff0f": "Ybodychange",
    "06e8a4eaa00e548f52b2483864a31ba9defd0989": "Ybodychange",
    "ef58eba6d1b95443ff240ed05634c7e373b3445a": "Ybodychange",
    "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d": "Ybodychange",
    "a031901307ecd3b1ae035d7ac185bc221472b396": "Ymultichange(Yparameterchange,Ybodychange)",
    "8fb2acd39b7db6223486f5e06126c7f0a2642a72": "Ymultichange(Yparameterchange,Ybodychange)",
    "24ba45a971569b9702e6bf78c5c07c48beb25464": "Ymultichange(Yparameterchange,Ybodychange)",
    "fd6a743fd4b3c9283d62174327dd978bda694892": "Ybodychange",
    "927ec62235d97ab741aae3954b9a771843df724c": "Ybodychange",
    "51dae59b8dcfb5a34f2a8a5b3e788eb6599a1df3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2c71b5433175f9689c308c47207f03d029671d11": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4724: fix FieldNotUsedInToString IDEA violations\n",
      "commitDate": 1500824788000,
      "commitName": "2c71b5433175f9689c308c47207f03d029671d11",
      "commitAuthor": "vasilyeva",
      "commitDateOld": 1500613458000,
      "commitNameOld": "b1a0f2b5f61a997e0b7e3fdff8f19a0ae0180ac6",
      "commitAuthorOld": "vasilyeva",
      "daysBetweenCommits": 2.45,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,56 @@\n     private void checkHtmlTags(final DetailAST ast, final TextBlock comment) {\n         final int lineNo \u003d comment.getStartLineNo();\n         final Deque\u003cHtmlTag\u003e htmlStack \u003d new ArrayDeque\u003c\u003e();\n         final String[] text \u003d comment.getText();\n \n         final TagParser parser \u003d new TagParser(text, lineNo);\n \n         while (parser.hasNextTag()) {\n             final HtmlTag tag \u003d parser.nextTag();\n \n             if (tag.isIncompleteTag()) {\n                 log(tag.getLineNo(), MSG_INCOMPLETE_TAG,\n                     text[tag.getLineNo() - lineNo]);\n                 return;\n             }\n             if (tag.isClosedTag()) {\n                 //do nothing\n                 continue;\n             }\n             if (tag.isCloseTag()) {\n                 // We have found a close tag.\n                 if (isExtraHtml(tag.getId(), htmlStack)) {\n                     // No corresponding open tag was found on the stack.\n                     log(tag.getLineNo(),\n                         tag.getPosition(),\n                         MSG_EXTRA_HTML,\n-                        tag);\n+                        tag.getText());\n                 }\n                 else {\n                     // See if there are any unclosed tags that were opened\n                     // after this one.\n                     checkUnclosedTags(htmlStack, tag.getId());\n                 }\n             }\n             else {\n                 //We only push html tags that are allowed\n                 if (isAllowedTag(tag)) {\n                     htmlStack.push(tag);\n                 }\n             }\n         }\n \n         // Identify any tags left on the stack.\n         // Skip multiples, like \u003cb\u003e...\u003cb\u003e\n         String lastFound \u003d \"\";\n         final List\u003cString\u003e typeParameters \u003d CheckUtils.getTypeParameterNames(ast);\n         for (final HtmlTag htmlTag : htmlStack) {\n             if (!isSingleTag(htmlTag)\n                 \u0026\u0026 !htmlTag.getId().equals(lastFound)\n                 \u0026\u0026 !typeParameters.contains(htmlTag.getId())) {\n-                log(htmlTag.getLineNo(), htmlTag.getPosition(), MSG_UNCLOSED_HTML, htmlTag);\n+                log(htmlTag.getLineNo(), htmlTag.getPosition(),\n+                        MSG_UNCLOSED_HTML, htmlTag.getText());\n                 lastFound \u003d htmlTag.getId();\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "77733a452387aa2ee99fdc9a737633566cc7af3d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2836: renamed error message fields to match standard naming",
      "commitDate": 1453387259000,
      "commitName": "77733a452387aa2ee99fdc9a737633566cc7af3d",
      "commitAuthor": "rnveach",
      "commitDateOld": 1451953543000,
      "commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 16.59,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,55 @@\n     private void checkHtmlTags(final DetailAST ast, final TextBlock comment) {\n         final int lineNo \u003d comment.getStartLineNo();\n         final Deque\u003cHtmlTag\u003e htmlStack \u003d new ArrayDeque\u003c\u003e();\n         final String[] text \u003d comment.getText();\n \n         final TagParser parser \u003d new TagParser(text, lineNo);\n \n         while (parser.hasNextTag()) {\n             final HtmlTag tag \u003d parser.nextTag();\n \n             if (tag.isIncompleteTag()) {\n-                log(tag.getLineNo(), INCOMPLETE_TAG,\n+                log(tag.getLineNo(), MSG_INCOMPLETE_TAG,\n                     text[tag.getLineNo() - lineNo]);\n                 return;\n             }\n             if (tag.isClosedTag()) {\n                 //do nothing\n                 continue;\n             }\n             if (tag.isCloseTag()) {\n                 // We have found a close tag.\n                 if (isExtraHtml(tag.getId(), htmlStack)) {\n                     // No corresponding open tag was found on the stack.\n                     log(tag.getLineNo(),\n                         tag.getPosition(),\n-                        EXTRA_HTML,\n+                        MSG_EXTRA_HTML,\n                         tag);\n                 }\n                 else {\n                     // See if there are any unclosed tags that were opened\n                     // after this one.\n                     checkUnclosedTags(htmlStack, tag.getId());\n                 }\n             }\n             else {\n                 //We only push html tags that are allowed\n                 if (isAllowedTag(tag)) {\n                     htmlStack.push(tag);\n                 }\n             }\n         }\n \n         // Identify any tags left on the stack.\n         // Skip multiples, like \u003cb\u003e...\u003cb\u003e\n         String lastFound \u003d \"\";\n         final List\u003cString\u003e typeParameters \u003d CheckUtils.getTypeParameterNames(ast);\n         for (final HtmlTag htmlTag : htmlStack) {\n             if (!isSingleTag(htmlTag)\n                 \u0026\u0026 !htmlTag.getId().equals(lastFound)\n                 \u0026\u0026 !typeParameters.contains(htmlTag.getId())) {\n-                log(htmlTag.getLineNo(), htmlTag.getPosition(), UNCLOSED_HTML, htmlTag);\n+                log(htmlTag.getLineNo(), htmlTag.getPosition(), MSG_UNCLOSED_HTML, htmlTag);\n                 lastFound \u003d htmlTag.getId();\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "1487e5161886d95cb8c82e4fb1a8b447fa7e32d0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2080: Fix typos in code\n",
      "commitDate": 1445173437000,
      "commitName": "1487e5161886d95cb8c82e4fb1a8b447fa7e32d0",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1445038509000,
      "commitNameOld": "ce196814d857a4244a80c51d5151cc35e90b6749",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 1.56,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,55 @@\n     private void checkHtmlTags(final DetailAST ast, final TextBlock comment) {\n         final int lineNo \u003d comment.getStartLineNo();\n         final Deque\u003cHtmlTag\u003e htmlStack \u003d new ArrayDeque\u003c\u003e();\n         final String[] text \u003d comment.getText();\n \n         final TagParser parser \u003d new TagParser(text, lineNo);\n \n         while (parser.hasNextTag()) {\n             final HtmlTag tag \u003d parser.nextTag();\n \n             if (tag.isIncompleteTag()) {\n                 log(tag.getLineNo(), INCOMPLETE_TAG,\n                     text[tag.getLineNo() - lineNo]);\n                 return;\n             }\n             if (tag.isClosedTag()) {\n                 //do nothing\n                 continue;\n             }\n             if (tag.isCloseTag()) {\n                 // We have found a close tag.\n                 if (isExtraHtml(tag.getId(), htmlStack)) {\n                     // No corresponding open tag was found on the stack.\n                     log(tag.getLineNo(),\n                         tag.getPosition(),\n                         EXTRA_HTML,\n                         tag);\n                 }\n                 else {\n                     // See if there are any unclosed tags that were opened\n                     // after this one.\n                     checkUnclosedTags(htmlStack, tag.getId());\n                 }\n             }\n             else {\n                 //We only push html tags that are allowed\n                 if (isAllowedTag(tag)) {\n                     htmlStack.push(tag);\n                 }\n             }\n         }\n \n         // Identify any tags left on the stack.\n         // Skip multiples, like \u003cb\u003e...\u003cb\u003e\n         String lastFound \u003d \"\";\n         final List\u003cString\u003e typeParameters \u003d CheckUtils.getTypeParameterNames(ast);\n-        for (final HtmlTag htag : htmlStack) {\n-            if (!isSingleTag(htag)\n-                \u0026\u0026 !htag.getId().equals(lastFound)\n-                \u0026\u0026 !typeParameters.contains(htag.getId())) {\n-                log(htag.getLineNo(), htag.getPosition(), UNCLOSED_HTML, htag);\n-                lastFound \u003d htag.getId();\n+        for (final HtmlTag htmlTag : htmlStack) {\n+            if (!isSingleTag(htmlTag)\n+                \u0026\u0026 !htmlTag.getId().equals(lastFound)\n+                \u0026\u0026 !typeParameters.contains(htmlTag.getId())) {\n+                log(htmlTag.getLineNo(), htmlTag.getPosition(), UNCLOSED_HTML, htmlTag);\n+                lastFound \u003d htmlTag.getId();\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "d282053d9ce02c13c779decfd079a8305086f752": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2080: Fix typos in code\n",
      "commitDate": 1443132627000,
      "commitName": "d282053d9ce02c13c779decfd079a8305086f752",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1441491854000,
      "commitNameOld": "6f1406f980409df12958e2426217c6988fa74fdb",
      "commitAuthorOld": "Vladislav Lisetskiy",
      "daysBetweenCommits": 18.99,
      "commitsBetweenForRepo": 86,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,55 @@\n     private void checkHtmlTags(final DetailAST ast, final TextBlock comment) {\n-        final int lineno \u003d comment.getStartLineNo();\n+        final int lineNo \u003d comment.getStartLineNo();\n         final Deque\u003cHtmlTag\u003e htmlStack \u003d new ArrayDeque\u003c\u003e();\n         final String[] text \u003d comment.getText();\n \n-        final TagParser parser \u003d new TagParser(text, lineno);\n+        final TagParser parser \u003d new TagParser(text, lineNo);\n \n         while (parser.hasNextTag()) {\n             final HtmlTag tag \u003d parser.nextTag();\n \n             if (tag.isIncompleteTag()) {\n                 log(tag.getLineNo(), INCOMPLETE_TAG,\n-                    text[tag.getLineNo() - lineno]);\n+                    text[tag.getLineNo() - lineNo]);\n                 return;\n             }\n             if (tag.isClosedTag()) {\n                 //do nothing\n                 continue;\n             }\n             if (tag.isCloseTag()) {\n                 // We have found a close tag.\n                 if (isExtraHtml(tag.getId(), htmlStack)) {\n                     // No corresponding open tag was found on the stack.\n                     log(tag.getLineNo(),\n                         tag.getPosition(),\n                         EXTRA_HTML,\n                         tag);\n                 }\n                 else {\n                     // See if there are any unclosed tags that were opened\n                     // after this one.\n                     checkUnclosedTags(htmlStack, tag.getId());\n                 }\n             }\n             else {\n                 //We only push html tags that are allowed\n                 if (isAllowedTag(tag)) {\n                     htmlStack.push(tag);\n                 }\n             }\n         }\n \n         // Identify any tags left on the stack.\n         // Skip multiples, like \u003cb\u003e...\u003cb\u003e\n         String lastFound \u003d \"\";\n         final List\u003cString\u003e typeParameters \u003d CheckUtils.getTypeParameterNames(ast);\n         for (final HtmlTag htag : htmlStack) {\n             if (!isSingleTag(htag)\n                 \u0026\u0026 !htag.getId().equals(lastFound)\n                 \u0026\u0026 !typeParameters.contains(htag.getId())) {\n                 log(htag.getLineNo(), htag.getPosition(), UNCLOSED_HTML, htag);\n                 lastFound \u003d htag.getId();\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "0aec69c702a43a0219a7cc1e3d0c2a21d8d871f0": {
      "type": "Yrename",
      "commitMessage": "Fix suspicious getters and setters. #1555\n\nFixes `SuspiciousGetterSetter` inspection violations.\n\nDescription:\n\u003eReports suspicious getter or setter methods. A getter or setter is suspicious if it accesses a different field than would be expected by its name.\n",
      "commitDate": 1440498848000,
      "commitName": "0aec69c702a43a0219a7cc1e3d0c2a21d8d871f0",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440158741000,
      "commitNameOld": "23a1b6253f6296c1a3888361953da47f2808ca3d",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 3.94,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,55 @@\n-    private void checkHtml(final DetailAST ast, final TextBlock comment) {\n+    private void checkHtmlTags(final DetailAST ast, final TextBlock comment) {\n         final int lineno \u003d comment.getStartLineNo();\n         final Deque\u003cHtmlTag\u003e htmlStack \u003d new ArrayDeque\u003c\u003e();\n         final String[] text \u003d comment.getText();\n \n         final TagParser parser \u003d new TagParser(text, lineno);\n \n         while (parser.hasNextTag()) {\n             final HtmlTag tag \u003d parser.nextTag();\n \n             if (tag.isIncompleteTag()) {\n                 log(tag.getLineNo(), INCOMPLETE_TAG,\n                     text[tag.getLineNo() - lineno]);\n                 return;\n             }\n             if (tag.isClosedTag()) {\n                 //do nothing\n                 continue;\n             }\n             if (tag.isCloseTag()) {\n                 // We have found a close tag.\n                 if (isExtraHtml(tag.getId(), htmlStack)) {\n                     // No corresponding open tag was found on the stack.\n                     log(tag.getLineNo(),\n                         tag.getPosition(),\n                         EXTRA_HTML,\n                         tag);\n                 }\n                 else {\n                     // See if there are any unclosed tags that were opened\n                     // after this one.\n                     checkUnclosedTags(htmlStack, tag.getId());\n                 }\n             }\n             else {\n                 //We only push html tags that are allowed\n                 if (isAllowedTag(tag)) {\n                     htmlStack.push(tag);\n                 }\n             }\n         }\n \n         // Identify any tags left on the stack.\n         // Skip multiples, like \u003cb\u003e...\u003cb\u003e\n         String lastFound \u003d \"\";\n         final List\u003cString\u003e typeParameters \u003d CheckUtils.getTypeParameterNames(ast);\n         for (final HtmlTag htag : htmlStack) {\n             if (!isSingleTag(htag)\n                 \u0026\u0026 !htag.getId().equals(lastFound)\n                 \u0026\u0026 !typeParameters.contains(htag.getId())) {\n                 log(htag.getLineNo(), htag.getPosition(), UNCLOSED_HTML, htag);\n                 lastFound \u003d htag.getId();\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "86826e1fa3fe3d793ee4723bb84ee0fc4ca38df1": {
      "type": "Ybodychange",
      "commitMessage": "Invert if statements with negated conditions. #1555\n\nFixes `NegatedIfElse` inspection violations.\n\nDescription:\n\u003eReports if statements which contain else branches and whose conditions are negated. Flipping the order of the if and else branches will usually increase the clarity of such statements.\n",
      "commitDate": 1439189206000,
      "commitName": "86826e1fa3fe3d793ee4723bb84ee0fc4ca38df1",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1438566538000,
      "commitNameOld": "2880edd6554400955fb950bf8127311c436d2a7a",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 7.21,
      "commitsBetweenForRepo": 95,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n     private void checkHtml(final DetailAST ast, final TextBlock comment) {\n         final int lineno \u003d comment.getStartLineNo();\n         final Deque\u003cHtmlTag\u003e htmlStack \u003d new ArrayDeque\u003c\u003e();\n         final String[] text \u003d comment.getText();\n \n         final TagParser parser \u003d new TagParser(text, lineno);\n \n         while (parser.hasNextTag()) {\n             final HtmlTag tag \u003d parser.nextTag();\n \n             if (tag.isIncompleteTag()) {\n                 log(tag.getLineNo(), INCOMPLETE_TAG,\n                     text[tag.getLineNo() - lineno]);\n                 return;\n             }\n             if (tag.isClosedTag()) {\n                 //do nothing\n                 continue;\n             }\n-            if (!tag.isCloseTag()) {\n-                //We only push html tags that are allowed\n-                if (isAllowedTag(tag)) {\n-                    htmlStack.push(tag);\n-                }\n-            }\n-            else {\n+            if (tag.isCloseTag()) {\n                 // We have found a close tag.\n                 if (isExtraHtml(tag.getId(), htmlStack)) {\n                     // No corresponding open tag was found on the stack.\n                     log(tag.getLineNo(),\n                         tag.getPosition(),\n                         EXTRA_HTML,\n                         tag);\n                 }\n                 else {\n                     // See if there are any unclosed tags that were opened\n                     // after this one.\n                     checkUnclosedTags(htmlStack, tag.getId());\n                 }\n             }\n+            else {\n+                //We only push html tags that are allowed\n+                if (isAllowedTag(tag)) {\n+                    htmlStack.push(tag);\n+                }\n+            }\n         }\n \n         // Identify any tags left on the stack.\n         String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e...\u003cb\u003e\n         final List\u003cString\u003e typeParameters \u003d CheckUtils.getTypeParameterNames(ast);\n         for (final HtmlTag htag : htmlStack) {\n             if (!isSingleTag(htag)\n                 \u0026\u0026 !htag.getId().equals(lastFound)\n                 \u0026\u0026 !typeParameters.contains(htag.getId())) {\n                 log(htag.getLineNo(), htag.getPosition(), UNCLOSED_HTML, htag);\n                 lastFound \u003d htag.getId();\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "2880edd6554400955fb950bf8127311c436d2a7a": {
      "type": "Ybodychange",
      "commitMessage": "Decrease scope of variables. #1538\n",
      "commitDate": 1438566538000,
      "commitName": "2880edd6554400955fb950bf8127311c436d2a7a",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1438566537000,
      "commitNameOld": "5c9e55ae70af0456e1634211ccac54c40a92cfba",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,54 @@\n     private void checkHtml(final DetailAST ast, final TextBlock comment) {\n         final int lineno \u003d comment.getStartLineNo();\n         final Deque\u003cHtmlTag\u003e htmlStack \u003d new ArrayDeque\u003c\u003e();\n         final String[] text \u003d comment.getText();\n \n-        TagParser parser \u003d null;\n-        parser \u003d new TagParser(text, lineno);\n+        final TagParser parser \u003d new TagParser(text, lineno);\n \n         while (parser.hasNextTag()) {\n             final HtmlTag tag \u003d parser.nextTag();\n \n             if (tag.isIncompleteTag()) {\n                 log(tag.getLineNo(), INCOMPLETE_TAG,\n                     text[tag.getLineNo() - lineno]);\n                 return;\n             }\n             if (tag.isClosedTag()) {\n                 //do nothing\n                 continue;\n             }\n             if (!tag.isCloseTag()) {\n                 //We only push html tags that are allowed\n                 if (isAllowedTag(tag)) {\n                     htmlStack.push(tag);\n                 }\n             }\n             else {\n                 // We have found a close tag.\n                 if (isExtraHtml(tag.getId(), htmlStack)) {\n                     // No corresponding open tag was found on the stack.\n                     log(tag.getLineNo(),\n                         tag.getPosition(),\n                         EXTRA_HTML,\n                         tag);\n                 }\n                 else {\n                     // See if there are any unclosed tags that were opened\n                     // after this one.\n                     checkUnclosedTags(htmlStack, tag.getId());\n                 }\n             }\n         }\n \n         // Identify any tags left on the stack.\n         String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e...\u003cb\u003e\n         final List\u003cString\u003e typeParameters \u003d CheckUtils.getTypeParameterNames(ast);\n         for (final HtmlTag htag : htmlStack) {\n             if (!isSingleTag(htag)\n                 \u0026\u0026 !htag.getId().equals(lastFound)\n                 \u0026\u0026 !typeParameters.contains(htag.getId())) {\n                 log(htag.getLineNo(), htag.getPosition(), UNCLOSED_HTML, htag);\n                 lastFound \u003d htag.getId();\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "dba746ba9387bee04ed362254abb5d9ed35169cd": {
      "type": "Ybodychange",
      "commitMessage": "Fix PMD violations from PrematureDeclaration rule. #948\n",
      "commitDate": 1431536292000,
      "commitName": "dba746ba9387bee04ed362254abb5d9ed35169cd",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1431536088000,
      "commitNameOld": "5ff1834a224cefac74b80a47efff15d113f76a1e",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,57 @@\n     private void checkHtml(final DetailAST ast, final TextBlock comment)\n     {\n         final int lineno \u003d comment.getStartLineNo();\n         final Deque\u003cHtmlTag\u003e htmlStack \u003d new ArrayDeque\u003c\u003e();\n         final String[] text \u003d comment.getText();\n-        final List\u003cString\u003e typeParameters \u003d\n-            CheckUtils.getTypeParameterNames(ast);\n \n         TagParser parser \u003d null;\n         parser \u003d new TagParser(text, lineno);\n \n         while (parser.hasNextTag()) {\n             final HtmlTag tag \u003d parser.nextTag();\n \n             if (tag.isIncompleteTag()) {\n                 log(tag.getLineNo(), INCOMPLETE_TAG,\n                     text[tag.getLineNo() - lineno]);\n                 return;\n             }\n             if (tag.isClosedTag()) {\n                 //do nothing\n                 continue;\n             }\n             if (!tag.isCloseTag()) {\n                 //We only push html tags that are allowed\n                 if (isAllowedTag(tag)) {\n                     htmlStack.push(tag);\n                 }\n             }\n             else {\n                 // We have found a close tag.\n                 if (isExtraHtml(tag.getId(), htmlStack)) {\n                     // No corresponding open tag was found on the stack.\n                     log(tag.getLineNo(),\n                         tag.getPosition(),\n                         EXTRA_HTML,\n                         tag);\n                 }\n                 else {\n                     // See if there are any unclosed tags that were opened\n                     // after this one.\n                     checkUnclosedTags(htmlStack, tag.getId());\n                 }\n             }\n         }\n \n         // Identify any tags left on the stack.\n         String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e...\u003cb\u003e\n+        final List\u003cString\u003e typeParameters \u003d CheckUtils.getTypeParameterNames(ast);\n         for (final HtmlTag htag : htmlStack) {\n             if (!isSingleTag(htag)\n                 \u0026\u0026 !htag.getId().equals(lastFound)\n                 \u0026\u0026 !typeParameters.contains(htag.getId()))\n             {\n                 log(htag.getLineNo(), htag.getPosition(), UNCLOSED_HTML, htag);\n                 lastFound \u003d htag.getId();\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "7dd24c8c35572b5db3e5c905d440e813cfe2538c": {
      "type": "Ybodychange",
      "commitMessage": "fix for Findbugs violations NM_CONFUSING. Issue #912\n",
      "commitDate": 1428792106000,
      "commitName": "7dd24c8c35572b5db3e5c905d440e813cfe2538c",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": 1426740846000,
      "commitNameOld": "303d7cc6182e72f5472c8bcd9aa37432986793d1",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 23.74,
      "commitsBetweenForRepo": 80,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n     private void checkHtml(final DetailAST ast, final TextBlock comment)\n     {\n         final int lineno \u003d comment.getStartLineNo();\n         final Deque\u003cHtmlTag\u003e htmlStack \u003d new ArrayDeque\u003c\u003e();\n         final String[] text \u003d comment.getText();\n         final List\u003cString\u003e typeParameters \u003d\n             CheckUtils.getTypeParameterNames(ast);\n \n         TagParser parser \u003d null;\n         parser \u003d new TagParser(text, lineno);\n \n         while (parser.hasNextTag()) {\n             final HtmlTag tag \u003d parser.nextTag();\n \n             if (tag.isIncompleteTag()) {\n-                log(tag.getLineno(), INCOMPLETE_TAG,\n-                    text[tag.getLineno() - lineno]);\n+                log(tag.getLineNo(), INCOMPLETE_TAG,\n+                    text[tag.getLineNo() - lineno]);\n                 return;\n             }\n             if (tag.isClosedTag()) {\n                 //do nothing\n                 continue;\n             }\n             if (!tag.isCloseTag()) {\n                 //We only push html tags that are allowed\n                 if (isAllowedTag(tag)) {\n                     htmlStack.push(tag);\n                 }\n             }\n             else {\n                 // We have found a close tag.\n                 if (isExtraHtml(tag.getId(), htmlStack)) {\n                     // No corresponding open tag was found on the stack.\n-                    log(tag.getLineno(),\n+                    log(tag.getLineNo(),\n                         tag.getPosition(),\n                         EXTRA_HTML,\n                         tag);\n                 }\n                 else {\n                     // See if there are any unclosed tags that were opened\n                     // after this one.\n                     checkUnclosedTags(htmlStack, tag.getId());\n                 }\n             }\n         }\n \n         // Identify any tags left on the stack.\n         String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e...\u003cb\u003e\n         for (final HtmlTag htag : htmlStack) {\n             if (!isSingleTag(htag)\n                 \u0026\u0026 !htag.getId().equals(lastFound)\n                 \u0026\u0026 !typeParameters.contains(htag.getId()))\n             {\n-                log(htag.getLineno(), htag.getPosition(), UNCLOSED_HTML, htag);\n+                log(htag.getLineNo(), htag.getPosition(), UNCLOSED_HTML, htag);\n                 lastFound \u003d htag.getId();\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "303d7cc6182e72f5472c8bcd9aa37432986793d1": {
      "type": "Ybodychange",
      "commitMessage": "Replace FastStack with ArrayDeque where possible, issue #86\n",
      "commitDate": 1426740846000,
      "commitName": "303d7cc6182e72f5472c8bcd9aa37432986793d1",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1426023398000,
      "commitNameOld": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 8.3,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n     private void checkHtml(final DetailAST ast, final TextBlock comment)\n     {\n         final int lineno \u003d comment.getStartLineNo();\n-        final FastStack\u003cHtmlTag\u003e htmlStack \u003d FastStack.newInstance();\n+        final Deque\u003cHtmlTag\u003e htmlStack \u003d new ArrayDeque\u003c\u003e();\n         final String[] text \u003d comment.getText();\n         final List\u003cString\u003e typeParameters \u003d\n             CheckUtils.getTypeParameterNames(ast);\n \n         TagParser parser \u003d null;\n         parser \u003d new TagParser(text, lineno);\n \n         while (parser.hasNextTag()) {\n             final HtmlTag tag \u003d parser.nextTag();\n \n             if (tag.isIncompleteTag()) {\n                 log(tag.getLineno(), INCOMPLETE_TAG,\n                     text[tag.getLineno() - lineno]);\n                 return;\n             }\n             if (tag.isClosedTag()) {\n                 //do nothing\n                 continue;\n             }\n             if (!tag.isCloseTag()) {\n                 //We only push html tags that are allowed\n                 if (isAllowedTag(tag)) {\n                     htmlStack.push(tag);\n                 }\n             }\n             else {\n                 // We have found a close tag.\n                 if (isExtraHtml(tag.getId(), htmlStack)) {\n                     // No corresponding open tag was found on the stack.\n                     log(tag.getLineno(),\n                         tag.getPosition(),\n                         EXTRA_HTML,\n                         tag);\n                 }\n                 else {\n                     // See if there are any unclosed tags that were opened\n                     // after this one.\n                     checkUnclosedTags(htmlStack, tag.getId());\n                 }\n             }\n         }\n \n         // Identify any tags left on the stack.\n         String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e...\u003cb\u003e\n         for (final HtmlTag htag : htmlStack) {\n             if (!isSingleTag(htag)\n                 \u0026\u0026 !htag.getId().equals(lastFound)\n                 \u0026\u0026 !typeParameters.contains(htag.getId()))\n             {\n                 log(htag.getLineno(), htag.getPosition(), UNCLOSED_HTML, htag);\n                 lastFound \u003d htag.getId();\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, javadoc package, issue #537\n",
      "commitDate": 1424437366000,
      "commitName": "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc",
      "commitAuthor": "alexkravin",
      "commitDateOld": 1424294072000,
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n     private void checkHtml(final DetailAST ast, final TextBlock comment)\n     {\n         final int lineno \u003d comment.getStartLineNo();\n         final FastStack\u003cHtmlTag\u003e htmlStack \u003d FastStack.newInstance();\n         final String[] text \u003d comment.getText();\n         final List\u003cString\u003e typeParameters \u003d\n             CheckUtils.getTypeParameterNames(ast);\n \n         TagParser parser \u003d null;\n         parser \u003d new TagParser(text, lineno);\n \n         while (parser.hasNextTag()) {\n             final HtmlTag tag \u003d parser.nextTag();\n \n             if (tag.isIncompleteTag()) {\n-                log(tag.getLineno(), \"javadoc.incompleteTag\",\n+                log(tag.getLineno(), INCOMPLETE_TAG,\n                     text[tag.getLineno() - lineno]);\n                 return;\n             }\n             if (tag.isClosedTag()) {\n                 //do nothing\n                 continue;\n             }\n             if (!tag.isCloseTag()) {\n                 //We only push html tags that are allowed\n                 if (isAllowedTag(tag)) {\n                     htmlStack.push(tag);\n                 }\n             }\n             else {\n                 // We have found a close tag.\n                 if (isExtraHtml(tag.getId(), htmlStack)) {\n                     // No corresponding open tag was found on the stack.\n                     log(tag.getLineno(),\n                         tag.getPosition(),\n                         EXTRA_HTML,\n                         tag);\n                 }\n                 else {\n                     // See if there are any unclosed tags that were opened\n                     // after this one.\n                     checkUnclosedTags(htmlStack, tag.getId());\n                 }\n             }\n         }\n \n         // Identify any tags left on the stack.\n         String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e...\u003cb\u003e\n         for (final HtmlTag htag : htmlStack) {\n             if (!isSingleTag(htag)\n                 \u0026\u0026 !htag.getId().equals(lastFound)\n                 \u0026\u0026 !typeParameters.contains(htag.getId()))\n             {\n                 log(htag.getLineno(), htag.getPosition(), UNCLOSED_HTML, htag);\n                 lastFound \u003d htag.getId();\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "89a51ba032fd9126651fa9efad31baf10c006ddf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, javadoc, #512\n",
      "commitDate": 1421677262000,
      "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "7823165cce4d7978fe928d8ada0a4861c950ff0f": {
      "type": "Ybodychange",
      "commitMessage": "Enhanced JavadocStyle to check for allowed HTML tags. Thanks to Nicolas Dordet for providing patch #2214251.\n",
      "commitDate": 1231479924000,
      "commitName": "7823165cce4d7978fe928d8ada0a4861c950ff0f",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1213677669000,
      "commitNameOld": "428c1a057e8c8e5cc1fe8a16b53a0a9bb75becec",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 206.04,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,58 @@\n     private void checkHtml(final DetailAST aAST, final TextBlock aComment)\n     {\n         final int lineno \u003d aComment.getStartLineNo();\n         final FastStack\u003cHtmlTag\u003e htmlStack \u003d FastStack.newInstance();\n         final String[] text \u003d aComment.getText();\n         final List\u003cString\u003e typeParameters \u003d\n             CheckUtils.getTypeParameterNames(aAST);\n \n         TagParser parser \u003d null;\n         parser \u003d new TagParser(text, lineno);\n \n         while (parser.hasNextTag()) {\n             final HtmlTag tag \u003d parser.nextTag();\n \n             if (tag.isIncompleteTag()) {\n                 log(tag.getLineno(), \"javadoc.incompleteTag\",\n                     text[tag.getLineno() - lineno]);\n                 return;\n             }\n             if (tag.isClosedTag()) {\n                 //do nothing\n                 continue;\n             }\n             if (!tag.isCloseTag()) {\n-                htmlStack.push(tag);\n+                //We only push html tags that are allowed\n+                if (isAllowedTag(tag)) {\n+                    htmlStack.push(tag);\n+                }\n             }\n             else {\n                 // We have found a close tag.\n                 if (isExtraHtml(tag.getId(), htmlStack)) {\n                     // No corresponding open tag was found on the stack.\n                     log(tag.getLineno(),\n                         tag.getPosition(),\n                         EXTRA_HTML,\n                         tag);\n                 }\n                 else {\n                     // See if there are any unclosed tags that were opened\n                     // after this one.\n                     checkUnclosedTags(htmlStack, tag.getId());\n                 }\n             }\n         }\n \n         // Identify any tags left on the stack.\n         String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e...\u003cb\u003e\n         for (final HtmlTag htag : htmlStack) {\n             if (!isSingleTag(htag)\n                 \u0026\u0026 !htag.getId().equals(lastFound)\n                 \u0026\u0026 !typeParameters.contains(htag.getId()))\n             {\n                 log(htag.getLineno(), htag.getPosition(), UNCLOSED_HTML, htag);\n                 lastFound \u003d htag.getId();\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "06e8a4eaa00e548f52b2483864a31ba9defd0989": {
      "type": "Ybodychange",
      "commitMessage": "Simple implementation of a LIFO Stack that can be used instead of java.util.Vector which is synchronized. Will help performance.\n",
      "commitDate": 1209024589000,
      "commitName": "06e8a4eaa00e548f52b2483864a31ba9defd0989",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1200296548000,
      "commitNameOld": "fd90bd5aa5cd623b08a2e44ef05e8fac8045d333",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 101.02,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,55 @@\n     private void checkHtml(final DetailAST aAST, final TextBlock aComment)\n     {\n         final int lineno \u003d aComment.getStartLineNo();\n-        final Stack\u003cHtmlTag\u003e htmlStack \u003d new Stack\u003cHtmlTag\u003e();\n+        final FastStack\u003cHtmlTag\u003e htmlStack \u003d FastStack.newInstance();\n         final String[] text \u003d aComment.getText();\n         final List\u003cString\u003e typeParameters \u003d\n             CheckUtils.getTypeParameterNames(aAST);\n \n         TagParser parser \u003d null;\n         parser \u003d new TagParser(text, lineno);\n \n         while (parser.hasNextTag()) {\n             final HtmlTag tag \u003d parser.nextTag();\n \n             if (tag.isIncompleteTag()) {\n                 log(tag.getLineno(), \"javadoc.incompleteTag\",\n                     text[tag.getLineno() - lineno]);\n                 return;\n             }\n             if (tag.isClosedTag()) {\n                 //do nothing\n                 continue;\n             }\n             if (!tag.isCloseTag()) {\n                 htmlStack.push(tag);\n             }\n             else {\n                 // We have found a close tag.\n                 if (isExtraHtml(tag.getId(), htmlStack)) {\n                     // No corresponding open tag was found on the stack.\n                     log(tag.getLineno(),\n                         tag.getPosition(),\n                         EXTRA_HTML,\n                         tag);\n                 }\n                 else {\n                     // See if there are any unclosed tags that were opened\n                     // after this one.\n                     checkUnclosedTags(htmlStack, tag.getId());\n                 }\n             }\n         }\n \n         // Identify any tags left on the stack.\n         String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e...\u003cb\u003e\n-        for (int i \u003d 0; i \u003c htmlStack.size(); i++) {\n-            final HtmlTag htag \u003d htmlStack.elementAt(i);\n+        for (final HtmlTag htag : htmlStack) {\n             if (!isSingleTag(htag)\n                 \u0026\u0026 !htag.getId().equals(lastFound)\n                 \u0026\u0026 !typeParameters.contains(htag.getId()))\n             {\n                 log(htag.getLineno(), htag.getPosition(), UNCLOSED_HTML, htag);\n                 lastFound \u003d htag.getId();\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "ef58eba6d1b95443ff240ed05634c7e373b3445a": {
      "type": "Ybodychange",
      "commitMessage": "General clean up with the new logging.\n",
      "commitDate": 1198148921000,
      "commitName": "ef58eba6d1b95443ff240ed05634c7e373b3445a",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1197714527000,
      "commitNameOld": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 5.03,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n     private void checkHtml(final DetailAST aAST, final TextBlock aComment)\n     {\n         final int lineno \u003d aComment.getStartLineNo();\n         final Stack\u003cHtmlTag\u003e htmlStack \u003d new Stack\u003cHtmlTag\u003e();\n         final String[] text \u003d aComment.getText();\n         final List\u003cString\u003e typeParameters \u003d\n             CheckUtils.getTypeParameterNames(aAST);\n \n         TagParser parser \u003d null;\n         parser \u003d new TagParser(text, lineno);\n \n         while (parser.hasNextTag()) {\n             final HtmlTag tag \u003d parser.nextTag();\n \n             if (tag.isIncompleteTag()) {\n                 log(tag.getLineno(), \"javadoc.incompleteTag\",\n-                    new Object[] {text[tag.getLineno() - lineno]});\n+                    text[tag.getLineno() - lineno]);\n                 return;\n             }\n             if (tag.isClosedTag()) {\n                 //do nothing\n                 continue;\n             }\n             if (!tag.isCloseTag()) {\n                 htmlStack.push(tag);\n             }\n             else {\n                 // We have found a close tag.\n                 if (isExtraHtml(tag.getId(), htmlStack)) {\n                     // No corresponding open tag was found on the stack.\n                     log(tag.getLineno(),\n                         tag.getPosition(),\n                         EXTRA_HTML,\n                         tag);\n                 }\n                 else {\n                     // See if there are any unclosed tags that were opened\n                     // after this one.\n                     checkUnclosedTags(htmlStack, tag.getId());\n                 }\n             }\n         }\n \n         // Identify any tags left on the stack.\n         String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e...\u003cb\u003e\n         for (int i \u003d 0; i \u003c htmlStack.size(); i++) {\n             final HtmlTag htag \u003d htmlStack.elementAt(i);\n             if (!isSingleTag(htag)\n                 \u0026\u0026 !htag.getId().equals(lastFound)\n                 \u0026\u0026 !typeParameters.contains(htag.getId()))\n             {\n                 log(htag.getLineno(), htag.getPosition(), UNCLOSED_HTML, htag);\n                 lastFound \u003d htag.getId();\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d": {
      "type": "Ybodychange",
      "commitMessage": "Start of adding generics.\n",
      "commitDate": 1197694270000,
      "commitName": "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1169909494000,
      "commitNameOld": "1efc394250b8f1c79bd7f8344b738a7d13396ed3",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 321.58,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n     private void checkHtml(final DetailAST aAST, final TextBlock aComment)\n     {\n         final int lineno \u003d aComment.getStartLineNo();\n-        final Stack htmlStack \u003d new Stack();\n+        final Stack\u003cHtmlTag\u003e htmlStack \u003d new Stack\u003cHtmlTag\u003e();\n         final String[] text \u003d aComment.getText();\n-        final List typeParameters \u003d\n+        final List\u003cString\u003e typeParameters \u003d\n             CheckUtils.getTypeParameterNames(aAST);\n \n         TagParser parser \u003d null;\n         parser \u003d new TagParser(text, lineno);\n \n         while (parser.hasNextTag()) {\n             final HtmlTag tag \u003d parser.nextTag();\n \n             if (tag.isIncompleteTag()) {\n                 log(tag.getLineno(), \"javadoc.incompleteTag\",\n                     new Object[] {text[tag.getLineno() - lineno]});\n                 return;\n             }\n             if (tag.isClosedTag()) {\n                 //do nothing\n                 continue;\n             }\n             if (!tag.isCloseTag()) {\n                 htmlStack.push(tag);\n             }\n             else {\n                 // We have found a close tag.\n                 if (isExtraHtml(tag.getId(), htmlStack)) {\n                     // No corresponding open tag was found on the stack.\n                     log(tag.getLineno(),\n                         tag.getPosition(),\n                         EXTRA_HTML,\n                         tag);\n                 }\n                 else {\n                     // See if there are any unclosed tags that were opened\n                     // after this one.\n                     checkUnclosedTags(htmlStack, tag.getId());\n                 }\n             }\n         }\n \n         // Identify any tags left on the stack.\n         String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e...\u003cb\u003e\n         for (int i \u003d 0; i \u003c htmlStack.size(); i++) {\n-            final HtmlTag htag \u003d (HtmlTag) htmlStack.elementAt(i);\n+            final HtmlTag htag \u003d htmlStack.elementAt(i);\n             if (!isSingleTag(htag)\n                 \u0026\u0026 !htag.getId().equals(lastFound)\n                 \u0026\u0026 !typeParameters.contains(htag.getId()))\n             {\n                 log(htag.getLineno(), htag.getPosition(), UNCLOSED_HTML, htag);\n                 lastFound \u003d htag.getId();\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "a031901307ecd3b1ae035d7ac185bc221472b396": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Fix for 1185501.\n",
      "commitDate": 1117930286000,
      "commitName": "a031901307ecd3b1ae035d7ac185bc221472b396",
      "commitAuthor": "Michael Studman",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "8fb2acd39b7db6223486f5e06126c7f0a2642a72": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "replaced Comment class with TextBlock interface, Comment is now a package private implementation\n",
      "commitDate": 1069656302000,
      "commitName": "8fb2acd39b7db6223486f5e06126c7f0a2642a72",
      "commitAuthor": "Lars Kühne",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "24ba45a971569b9702e6bf78c5c07c48beb25464": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Fix for ArrayIndexOutOfBounds in JavadocStyle (bug 841942 )\n",
      "commitDate": 1069576421000,
      "commitName": "24ba45a971569b9702e6bf78c5c07c48beb25464",
      "commitAuthor": "Oleg Sukhodolsky",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "fd6a743fd4b3c9283d62174327dd978bda694892": {
      "type": "Ybodychange",
      "commitMessage": "Draft fix for 843887 (XHTML not handled correctly in JavadocStyle).  Feel free to improve it.\n",
      "commitDate": 1069327160000,
      "commitName": "fd6a743fd4b3c9283d62174327dd978bda694892",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1062411040000,
      "commitNameOld": "611722a893e0c6362b693f5c629a902a83590cbf",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 80.05,
      "commitsBetweenForRepo": 75,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,58 @@\n     private void checkHtml(DetailAST aAST, String[] aComment)\n     {\n         final int lineno \u003d aAST.getLineNo() - aComment.length;\n         final Stack htmlStack \u003d new Stack();\n \n-        for (int i \u003d 0; i \u003c aComment.length; i++) {\n-            TagParser parser \u003d null;\n-            try {\n-                // Can throw NoSuchElementException when tokenizing encounters\n-                // \"\u003c\" at end of aComment[i].\n-                parser \u003d new TagParser(aComment[i], lineno + i);\n-            }\n-            catch (NoSuchElementException e) {\n-                log(\n-                    lineno + i,\n-                    \"javadoc.incompleteTag\",\n-                    new Object[] {aComment[i]});\n+        TagParser parser \u003d null;\n+        try {\n+            // Can throw NoSuchElementException when tokenizing encounters\n+            // \"\u003c\" at end of aComment[i].\n+            parser \u003d new TagParser(aComment, lineno);\n+        }\n+        catch (NoSuchElementException e) {\n+            log(lineno, \"javadoc.incompleteTag\", new Object[] {aComment[0]});\n+            return;\n+        }\n+\n+        while (parser.hasNextTag()) {\n+            final HtmlTag tag \u003d parser.nextTag();\n+\n+            if (tag.isIncompleteTag()) {\n+                log(tag.getLineno(), \"javadoc.incompleteTag\",\n+                    new Object[] {aComment[tag.getLineno() - lineno]});\n                 return;\n             }\n-            while (parser.hasNextTag()) {\n-                final HtmlTag tag \u003d parser.nextTag();\n-\n-                if (!tag.isCloseTag()) {\n-                    htmlStack.push(tag);\n+            if (tag.isClosedTag()) {\n+                //do nothing\n+                continue;\n+            }\n+            if (!tag.isCloseTag()) {\n+                htmlStack.push(tag);\n+            }\n+            else {\n+                // We have found a close tag.\n+                if (isExtraHtml(tag.getId(), htmlStack)) {\n+                    // No corresponding open tag was found on the stack.\n+                    log(tag.getLineno(),\n+                        tag.getPosition(),\n+                        EXTRA_HTML,\n+                        tag);\n                 }\n                 else {\n-                    // We have found a close tag.\n-                    if (isExtraHtml(tag.getId(), htmlStack)) {\n-                        // No corresponding open tag was found on the stack.\n-                        log(tag.getLineno(),\n-                            tag.getPosition(),\n-                            EXTRA_HTML,\n-                            tag);\n-                    }\n-                    else {\n-                        // See if there are any unclosed tags that were opened\n-                        // after this one.\n-                        checkUnclosedTags(htmlStack, tag.getId());\n-                    }\n+                    // See if there are any unclosed tags that were opened\n+                    // after this one.\n+                    checkUnclosedTags(htmlStack, tag.getId());\n                 }\n             }\n         }\n \n         // Identify any tags left on the stack.\n         String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e...\u003cb\u003e\n         for (int i \u003d 0; i \u003c htmlStack.size(); i++) {\n             final HtmlTag htag \u003d (HtmlTag) htmlStack.elementAt(i);\n             if (!isSingleTag(htag) \u0026\u0026 !htag.getId().equals(lastFound)) {\n                 log(htag.getLineno(), htag.getPosition(), UNCLOSED_HTML, htag);\n                 lastFound \u003d htag.getId();\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "927ec62235d97ab741aae3954b9a771843df724c": {
      "type": "Ybodychange",
      "commitMessage": "fixed NoSuchElementException in JavadocStyleCheck (bug 785514)\n",
      "commitDate": 1060447585000,
      "commitName": "927ec62235d97ab741aae3954b9a771843df724c",
      "commitAuthor": "Rick Giles",
      "commitDateOld": 1058185912000,
      "commitNameOld": "51dae59b8dcfb5a34f2a8a5b3e788eb6599a1df3",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 26.18,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,53 @@\n     private void checkHtml(DetailAST aAST, String[] aComment)\n     {\n         final int lineno \u003d aAST.getLineNo() - aComment.length;\n         final Stack htmlStack \u003d new Stack();\n \n         for (int i \u003d 0; i \u003c aComment.length; i++) {\n-            final TagParser parser \u003d new TagParser(aComment[i], lineno + i);\n+            TagParser parser \u003d null;\n+            try {\n+                // Can throw NoSuchElementException when tokenizing encounters\n+                // \"\u003c\" at end of aComment[i].\n+                parser \u003d new TagParser(aComment[i], lineno + i);\n+            }\n+            catch (NoSuchElementException e) {\n+                log(\n+                    lineno + i,\n+                    \"javadoc.incompleteTag\",\n+                    new Object[] {aComment[i]});\n+                return;\n+            }\n             while (parser.hasNextTag()) {\n                 final HtmlTag tag \u003d parser.nextTag();\n \n                 if (!tag.isCloseTag()) {\n                     htmlStack.push(tag);\n                 }\n                 else {\n                     // We have found a close tag.\n                     if (isExtraHtml(tag.getId(), htmlStack)) {\n                         // No corresponding open tag was found on the stack.\n                         log(tag.getLineno(),\n                             tag.getPosition(),\n                             EXTRA_HTML,\n                             tag);\n                     }\n                     else {\n                         // See if there are any unclosed tags that were opened\n                         // after this one.\n                         checkUnclosedTags(htmlStack, tag.getId());\n                     }\n                 }\n             }\n         }\n \n         // Identify any tags left on the stack.\n         String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e...\u003cb\u003e\n         for (int i \u003d 0; i \u003c htmlStack.size(); i++) {\n             final HtmlTag htag \u003d (HtmlTag) htmlStack.elementAt(i);\n             if (!isSingleTag(htag) \u0026\u0026 !htag.getId().equals(lastFound)) {\n                 log(htag.getLineno(), htag.getPosition(), UNCLOSED_HTML, htag);\n                 lastFound \u003d htag.getId();\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "51dae59b8dcfb5a34f2a8a5b3e788eb6599a1df3": {
      "type": "Yintroduced",
      "commitMessage": "New Javadoc style check from Chris Stillwell.\n",
      "commitDate": 1058185912000,
      "commitName": "51dae59b8dcfb5a34f2a8a5b3e788eb6599a1df3",
      "commitAuthor": "Oliver Burn"
    }
  }
}