{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "AbstractHeaderCheck.java",
  "functionName": "setHeader",
  "functionId": "setHeader___header-String",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java",
  "functionStartLine": 146,
  "functionEndLine": 164,
  "changeHistory": [
    "ce21086e087661553f3a774c38362327ee88996a",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
    "9777146e28e6457160a7f91d897776f9fe4af10a",
    "167dd96d8ca503a472bf003f187191d6b0ce586c",
    "7b14802231d6031a6b31565328dc0ddd80c7d2c6",
    "1c42e3eeb9aeebc47b2373541c1cc8d311d8b671",
    "06865630aa3da0b36064b9e00e0e95ff681f234e",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "29027109bf962f47b6a6000fdca69b5679ce4b43",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "b83c9aceef9577eaada5cfd78bc7b2cd04a176d1",
    "6f1f7bd3fdcca84404e97964b3e48de6db5024ec",
    "aca96ae1b180a8036cc23e93840c4161ae8f8927",
    "d1a297476448ea9feec80af04416f198dc462bca"
  ],
  "changeHistoryShort": {
    "ce21086e087661553f3a774c38362327ee88996a": "Ybodychange",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": "Ybodychange",
    "9777146e28e6457160a7f91d897776f9fe4af10a": "Ybodychange",
    "167dd96d8ca503a472bf003f187191d6b0ce586c": "Ybodychange",
    "7b14802231d6031a6b31565328dc0ddd80c7d2c6": "Ybodychange",
    "1c42e3eeb9aeebc47b2373541c1cc8d311d8b671": "Ybodychange",
    "06865630aa3da0b36064b9e00e0e95ff681f234e": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "29027109bf962f47b6a6000fdca69b5679ce4b43": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "b83c9aceef9577eaada5cfd78bc7b2cd04a176d1": "Ybodychange",
    "6f1f7bd3fdcca84404e97964b3e48de6db5024ec": "Ymultichange(Ymovefromfile,Ybodychange)",
    "aca96ae1b180a8036cc23e93840c4161ae8f8927": "Yfilerename",
    "d1a297476448ea9feec80af04416f198dc462bca": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ce21086e087661553f3a774c38362327ee88996a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3763: Try to avoid non-jdk runtime exceptions in code\n",
      "commitDate": 1488165925000,
      "commitName": "ce21086e087661553f3a774c38362327ee88996a",
      "commitAuthor": "Vladislav Lisetskii",
      "commitDateOld": 1485633565000,
      "commitNameOld": "4cff2eb7149113cd7549e9c4db97a189bbd1f3f3",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 29.31,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n     public void setHeader(String header) {\n         if (!CommonUtils.isBlank(header)) {\n             checkHeaderNotInitialized();\n \n             final String headerExpandedNewLines \u003d ESCAPED_LINE_FEED_PATTERN\n                     .matcher(header).replaceAll(\"\\n\");\n \n             final Reader headerReader \u003d new StringReader(headerExpandedNewLines);\n             try {\n                 loadHeader(headerReader);\n             }\n             catch (final IOException ex) {\n-                throw new ConversionException(\"unable to load header\", ex);\n+                throw new IllegalArgumentException(\"unable to load header\", ex);\n             }\n             finally {\n                 Closeables.closeQuietly(headerReader);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3143: forbid empty return statements and fixed violations",
      "commitDate": 1464356569000,
      "commitName": "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
      "commitAuthor": "rnveach",
      "commitDateOld": 1463431992000,
      "commitNameOld": "ecbeaa6e1df7cb021745e111b04395b9fbd509c7",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 10.7,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,19 @@\n     public void setHeader(String header) {\n-        if (CommonUtils.isBlank(header)) {\n-            return;\n-        }\n+        if (!CommonUtils.isBlank(header)) {\n+            checkHeaderNotInitialized();\n \n-        checkHeaderNotInitialized();\n+            final String headerExpandedNewLines \u003d ESCAPED_LINE_FEED_PATTERN\n+                    .matcher(header).replaceAll(\"\\n\");\n \n-        final String headerExpandedNewLines \u003d ESCAPED_LINE_FEED_PATTERN\n-                .matcher(header).replaceAll(\"\\n\");\n-\n-        final Reader headerReader \u003d new StringReader(headerExpandedNewLines);\n-        try {\n-            loadHeader(headerReader);\n-        }\n-        catch (final IOException ex) {\n-            throw new ConversionException(\"unable to load header\", ex);\n-        }\n-        finally {\n-            Closeables.closeQuietly(headerReader);\n+            final Reader headerReader \u003d new StringReader(headerExpandedNewLines);\n+            try {\n+                loadHeader(headerReader);\n+            }\n+            catch (final IOException ex) {\n+                throw new ConversionException(\"unable to load header\", ex);\n+            }\n+            finally {\n+                Closeables.closeQuietly(headerReader);\n+            }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "9777146e28e6457160a7f91d897776f9fe4af10a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2428: remove dependency to commons-lang3 library\n",
      "commitDate": 1458509698000,
      "commitName": "9777146e28e6457160a7f91d897776f9fe4af10a",
      "commitAuthor": "Rasmus Kaj",
      "commitDateOld": 1458221995000,
      "commitNameOld": "167dd96d8ca503a472bf003f187191d6b0ce586c",
      "commitAuthorOld": "Rasmus Kaj",
      "daysBetweenCommits": 3.33,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n     public void setHeader(String header) {\n-        if (header \u003d\u003d null || CharMatcher.WHITESPACE.matchesAllOf(header)) {\n+        if (CommonUtils.isBlank(header)) {\n             return;\n         }\n \n         checkHeaderNotInitialized();\n \n         final String headerExpandedNewLines \u003d ESCAPED_LINE_FEED_PATTERN\n                 .matcher(header).replaceAll(\"\\n\");\n \n         final Reader headerReader \u003d new StringReader(headerExpandedNewLines);\n         try {\n             loadHeader(headerReader);\n         }\n         catch (final IOException ex) {\n             throw new ConversionException(\"unable to load header\", ex);\n         }\n         finally {\n             Closeables.closeQuietly(headerReader);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "167dd96d8ca503a472bf003f187191d6b0ce586c": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2428: remove dependency to commons-lang3 library\n",
      "commitDate": 1458221995000,
      "commitName": "167dd96d8ca503a472bf003f187191d6b0ce586c",
      "commitAuthor": "Rasmus Kaj",
      "commitDateOld": 1451953543000,
      "commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 72.55,
      "commitsBetweenForRepo": 198,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n     public void setHeader(String header) {\n-        if (StringUtils.isBlank(header)) {\n+        if (header \u003d\u003d null || CharMatcher.WHITESPACE.matchesAllOf(header)) {\n             return;\n         }\n \n         checkHeaderNotInitialized();\n \n         final String headerExpandedNewLines \u003d ESCAPED_LINE_FEED_PATTERN\n                 .matcher(header).replaceAll(\"\\n\");\n \n         final Reader headerReader \u003d new StringReader(headerExpandedNewLines);\n         try {\n             loadHeader(headerReader);\n         }\n         catch (final IOException ex) {\n             throw new ConversionException(\"unable to load header\", ex);\n         }\n         finally {\n             Closeables.closeQuietly(headerReader);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "7b14802231d6031a6b31565328dc0ddd80c7d2c6": {
      "type": "Ybodychange",
      "commitMessage": "Use compiled pattern instead of dynamic regexp. #1555\n\nFixes some `SpellDynamicRegexReplaceableByCompiledPattern` inspection violations.\n\nDescription:\n\u003eReports calls to the regular expression methods of java.lang.String using constants arguments. Such calls may be profitably replaced with a private static final Pattern field so that the regular expression does not have to be compiled each time it is used.\n",
      "commitDate": 1440502318000,
      "commitName": "7b14802231d6031a6b31565328dc0ddd80c7d2c6",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1439886329000,
      "commitNameOld": "54ccca18635a4aeea90da86d30590df498f76b08",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 7.13,
      "commitsBetweenForRepo": 114,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,21 @@\n     public void setHeader(String header) {\n         if (StringUtils.isBlank(header)) {\n             return;\n         }\n \n         checkHeaderNotInitialized();\n \n-        final String headerExpandedNewLines \u003d header.replaceAll(\"\\\\\\\\n\", \"\\n\");\n+        final String headerExpandedNewLines \u003d ESCAPED_LINE_FEED_PATTERN\n+                .matcher(header).replaceAll(\"\\n\");\n \n         final Reader headerReader \u003d new StringReader(headerExpandedNewLines);\n         try {\n             loadHeader(headerReader);\n         }\n         catch (final IOException ex) {\n             throw new ConversionException(\"unable to load header\", ex);\n         }\n         finally {\n             Closeables.closeQuietly(headerReader);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "1c42e3eeb9aeebc47b2373541c1cc8d311d8b671": {
      "type": "Ybodychange",
      "commitMessage": "Fix PMD violations from \u0027strings\u0027 ruleset, issue #873\n",
      "commitDate": 1429113367000,
      "commitName": "1c42e3eeb9aeebc47b2373541c1cc8d311d8b671",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1427398517000,
      "commitNameOld": "06865630aa3da0b36064b9e00e0e95ff681f234e",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 19.85,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n     public void setHeader(String header)\n     {\n-        if (header \u003d\u003d null || header.trim().length() \u003d\u003d 0) {\n+        if (StringUtils.isBlank(header)) {\n             return;\n         }\n \n         checkHeaderNotInitialized();\n \n         final String headerExpandedNewLines \u003d header.replaceAll(\"\\\\\\\\n\", \"\\n\");\n \n         final Reader headerReader \u003d new StringReader(headerExpandedNewLines);\n         try {\n             loadHeader(headerReader);\n         }\n         catch (final IOException ex) {\n             throw new ConversionException(\"unable to load header\", ex);\n         }\n         finally {\n             Closeables.closeQuietly(headerReader);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "06865630aa3da0b36064b9e00e0e95ff681f234e": {
      "type": "Ybodychange",
      "commitMessage": "Use Guava Closeables to manage closing exceptions\n\n\u003eWhile it\u0027s not safe in the general case to ignore exceptions that are thrown when closing an I/O resource, it should generally be safe in the case of a resource that\u0027s being used only for reading, such as a Reader. Unlike with writable resources, there\u0027s no chance that a failure that occurs when closing the reader indicates a meaningful problem such as a failure to flush all bytes to the underlying resource.\n\n`Reader` and `InputStream` instances are closed using `Closeables.closeQuietly()`, while `RandomAccessFile` is closed with `Closeables.close()` that throws `IOException` and needs to be handled.\n\nFrom Javadoc:\n\u003e```java\npublic static void close(@Nullable\n         Closeable closeable,\n         boolean swallowIOException)\n                  throws IOException\n```\n\u003eCloses a Closeable, with control over whether an IOException may be thrown. This is primarily useful in a finally block, where a thrown exception needs to be logged but not propagated (otherwise the original exception will be lost).\nIf swallowIOException is true then we never throw IOException but merely log it.\n\n\u003eExample:\n```java\n   public void useStreamNicely() throws IOException {\n     SomeStream stream \u003d new SomeStream(\"foo\");\n     boolean threw \u003d true;\n     try {\n       // ... code which does something with the stream ...\n       threw \u003d false;\n     } finally {\n       // If an exception occurs, rethrow it only if threw\u003d\u003dfalse:\n       Closeables.close(stream, threw);\n     }\n   }\n```\n\nMoreover, `Closeables.close()` and  `Flushables.flush()` are used to flush and close `OutputStream`.\n",
      "commitDate": 1427398517000,
      "commitName": "06865630aa3da0b36064b9e00e0e95ff681f234e",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1426454536000,
      "commitNameOld": "1c15b6a36baa68dc3f2ebdf9baac131e98bb9e04",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 10.93,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n     public void setHeader(String header)\n     {\n         if (header \u003d\u003d null || header.trim().length() \u003d\u003d 0) {\n             return;\n         }\n \n         checkHeaderNotInitialized();\n \n         final String headerExpandedNewLines \u003d header.replaceAll(\"\\\\\\\\n\", \"\\n\");\n \n         final Reader headerReader \u003d new StringReader(headerExpandedNewLines);\n         try {\n             loadHeader(headerReader);\n         }\n         catch (final IOException ex) {\n             throw new ConversionException(\"unable to load header\", ex);\n         }\n         finally {\n-            Utils.closeQuietly(headerReader);\n+            Closeables.closeQuietly(headerReader);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": 1426023398000,
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1424294072000,
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 20.02,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n     public void setHeader(String header)\n     {\n-        if ((header \u003d\u003d null) || (header.trim().length() \u003d\u003d 0)) {\n+        if (header \u003d\u003d null || header.trim().length() \u003d\u003d 0) {\n             return;\n         }\n \n         checkHeaderNotInitialized();\n \n         final String headerExpandedNewLines \u003d header.replaceAll(\"\\\\\\\\n\", \"\\n\");\n \n         final Reader headerReader \u003d new StringReader(headerExpandedNewLines);\n         try {\n             loadHeader(headerReader);\n         }\n         catch (final IOException ex) {\n             throw new ConversionException(\"unable to load header\", ex);\n         }\n         finally {\n             Utils.closeQuietly(headerReader);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "29027109bf962f47b6a6000fdca69b5679ce4b43": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, header, #512\n",
      "commitDate": 1421678132000,
      "commitName": "29027109bf962f47b6a6000fdca69b5679ce4b43",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "b83c9aceef9577eaada5cfd78bc7b2cd04a176d1": {
      "type": "Ybodychange",
      "commitMessage": "Simplified the code by removing HeaderInfo classes, they were introduced to avoid code duplication between header checks in two separate inheritance trees (Java Check vs. FileSetCheck). Now that we have only FileSetChecks as Header checks, this delegation is no longer necessary.\n",
      "commitDate": 1233868969000,
      "commitName": "b83c9aceef9577eaada5cfd78bc7b2cd04a176d1",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": 1226831412000,
      "commitNameOld": "bf16d371dab210594755d04afc4697269ed088c0",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 81.45,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,4 +1,21 @@\n     public void setHeader(String aHeader)\n     {\n-        mHeaderInfo.setHeader(aHeader);\n+        if ((aHeader \u003d\u003d null) || (aHeader.trim().length() \u003d\u003d 0)) {\n+            return;\n+        }\n+\n+        checkHeaderNotInitialized();\n+\n+        final String headerExpandedNewLines \u003d aHeader.replaceAll(\"\\\\\\\\n\", \"\\n\");\n+\n+        final Reader headerReader \u003d new StringReader(headerExpandedNewLines);\n+        try {\n+            loadHeader(headerReader);\n+        }\n+        catch (final IOException ex) {\n+            throw new ConversionException(\"unable to load header\", ex);\n+        }\n+        finally {\n+            Utils.closeQuietly(headerReader);\n+        }\n     }\n\\ No newline at end of file\n"
    },
    "6f1f7bd3fdcca84404e97964b3e48de6db5024ec": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "Added CrossLanguageRegexpHeaderCheck. This involved some refactorings to avoid duplicate code, so lots of files are affected\n- moved AbstractHeaderCheck to header package\n- moved file extension filtering code to Utils, so it\u0027s available not only from FileSetChecks\n- moved regexp header checking logic to RegexpHeaderChecker bean\n- moved check initialization logic and parameter checking to HeaderInfo classes\n",
      "commitDate": 1161290108000,
      "commitName": "6f1f7bd3fdcca84404e97964b3e48de6db5024ec",
      "commitAuthor": "Lars Kühne",
      "subchanges": [
        "Ymovefromfile",
        "Ybodychange"
      ]
    },
    "aca96ae1b180a8036cc23e93840c4161ae8f8927": {
      "type": "Yfilerename",
      "commitMessage": "moved header checks to their own package\nremoved duplicate usage documentation in javadoc along the way\n",
      "commitDate": 1107084770000,
      "commitName": "aca96ae1b180a8036cc23e93840c4161ae8f8927",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": 1107083225000,
      "commitNameOld": "0a60a189ed4236fd9be3c26bbb2f27be95e5d967",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "d1a297476448ea9feec80af04416f198dc462bca": {
      "type": "Yintroduced",
      "commitMessage": "rfe #1041590, allow header specification directly in checkstyle config file\n",
      "commitDate": 1097946784000,
      "commitName": "d1a297476448ea9feec80af04416f198dc462bca",
      "commitAuthor": "Lars Kühne"
    }
  }
}