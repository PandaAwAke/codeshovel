{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "VariableDeclarationUsageDistanceCheck.java",
  "functionName": "calculateDistanceBetweenScopes",
  "functionId": "calculateDistanceBetweenScopes___ast-DetailAST__variable-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java",
  "functionStartLine": 473,
  "functionEndLine": 541,
  "changeHistory": [
    "2f00020063cbce94643fdc198dc69b7693382f58",
    "f4e5c1e2b27b975c6e7c08380fadb669d6a92b65",
    "ee84bccfe190e288447b417bc5e1a3cf94d7b218",
    "4c078ba710068498ca513ce115993e30dab4562a",
    "c1ce1f8f0c8c9ef84d71fbe47ea671adcd87043a",
    "ff5cbc39c4882b3a3dcdbedcad9393e170148725",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
    "c4e886312aae13b6cfadceed25b1b8aec18d4a96"
  ],
  "changeHistoryShort": {
    "2f00020063cbce94643fdc198dc69b7693382f58": "Ybodychange",
    "f4e5c1e2b27b975c6e7c08380fadb669d6a92b65": "Ybodychange",
    "ee84bccfe190e288447b417bc5e1a3cf94d7b218": "Ybodychange",
    "4c078ba710068498ca513ce115993e30dab4562a": "Ymodifierchange",
    "c1ce1f8f0c8c9ef84d71fbe47ea671adcd87043a": "Ybodychange",
    "ff5cbc39c4882b3a3dcdbedcad9393e170148725": "Ybodychange",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": "Ymultichange(Yparameterchange,Ybodychange)",
    "c4e886312aae13b6cfadceed25b1b8aec18d4a96": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2f00020063cbce94643fdc198dc69b7693382f58": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5008: increased pitest of coding package",
      "commitDate": 1512743008000,
      "commitName": "2f00020063cbce94643fdc198dc69b7693382f58",
      "commitAuthor": "rnveach",
      "commitDateOld": 1511736703000,
      "commitNameOld": "4784b98f2f5daae5a543b6a2bab13e861bf2136e",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 11.65,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,69 @@\n     private static Entry\u003cDetailAST, Integer\u003e calculateDistanceBetweenScopes(\n             DetailAST ast, DetailAST variable) {\n         int dist \u003d 0;\n         DetailAST currentScopeAst \u003d ast;\n         DetailAST variableUsageAst \u003d null;\n         while (currentScopeAst !\u003d null) {\n             final Entry\u003cList\u003cDetailAST\u003e, Integer\u003e searchResult \u003d\n                     searchVariableUsageExpressions(variable, currentScopeAst);\n \n             currentScopeAst \u003d null;\n \n             final List\u003cDetailAST\u003e variableUsageExpressions \u003d searchResult.getKey();\n             dist +\u003d searchResult.getValue();\n \n             // If variable usage exists in a single scope, then look into\n             // this scope and count distance until variable usage.\n             if (variableUsageExpressions.size() \u003d\u003d 1) {\n                 final DetailAST blockWithVariableUsage \u003d variableUsageExpressions\n                         .get(0);\n                 DetailAST exprWithVariableUsage \u003d null;\n                 switch (blockWithVariableUsage.getType()) {\n                     case TokenTypes.VARIABLE_DEF:\n                     case TokenTypes.EXPR:\n                         dist++;\n                         break;\n                     case TokenTypes.LITERAL_FOR:\n                     case TokenTypes.LITERAL_WHILE:\n                     case TokenTypes.LITERAL_DO:\n                         exprWithVariableUsage \u003d getFirstNodeInsideForWhileDoWhileBlocks(\n                             blockWithVariableUsage, variable);\n                         break;\n                     case TokenTypes.LITERAL_IF:\n                         exprWithVariableUsage \u003d getFirstNodeInsideIfBlock(\n                             blockWithVariableUsage, variable);\n                         break;\n                     case TokenTypes.LITERAL_SWITCH:\n                         exprWithVariableUsage \u003d getFirstNodeInsideSwitchBlock(\n                             blockWithVariableUsage, variable);\n                         break;\n                     case TokenTypes.LITERAL_TRY:\n                         exprWithVariableUsage \u003d\n                             getFirstNodeInsideTryCatchFinallyBlocks(blockWithVariableUsage,\n                                 variable);\n                         break;\n                     default:\n                         exprWithVariableUsage \u003d blockWithVariableUsage.getFirstChild();\n                 }\n                 currentScopeAst \u003d exprWithVariableUsage;\n                 if (exprWithVariableUsage \u003d\u003d null) {\n                     variableUsageAst \u003d blockWithVariableUsage;\n                 }\n                 else {\n                     variableUsageAst \u003d exprWithVariableUsage;\n                 }\n             }\n+\n+            // If there\u0027s no any variable usage, then distance \u003d 0.\n+            else if (variableUsageExpressions.isEmpty()) {\n+                variableUsageAst \u003d null;\n+            }\n             // If variable usage exists in different scopes, then distance \u003d\n             // distance until variable first usage.\n-            else if (variableUsageExpressions.size() \u003e 1) {\n+            else {\n                 dist++;\n                 variableUsageAst \u003d variableUsageExpressions.get(0);\n             }\n-            // If there\u0027s no any variable usage, then distance \u003d 0.\n-            else {\n-                variableUsageAst \u003d null;\n-            }\n         }\n         return new SimpleEntry\u003c\u003e(variableUsageAst, dist);\n     }\n\\ No newline at end of file\n"
    },
    "f4e5c1e2b27b975c6e7c08380fadb669d6a92b65": {
      "type": "Ybodychange",
      "commitMessage": "Issue #974: PMD violation ConfusingTernary (partial fix)\n",
      "commitDate": 1444265760000,
      "commitName": "f4e5c1e2b27b975c6e7c08380fadb669d6a92b65",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": 1441403297000,
      "commitNameOld": "31f6765fdcf2233ca6c53730c2fc196576557f66",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 33.13,
      "commitsBetweenForRepo": 169,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,68 @@\n     private static Entry\u003cDetailAST, Integer\u003e calculateDistanceBetweenScopes(\n             DetailAST ast, DetailAST variable) {\n         int dist \u003d 0;\n         DetailAST currentScopeAst \u003d ast;\n         DetailAST variableUsageAst \u003d null;\n         while (currentScopeAst !\u003d null) {\n             final Entry\u003cList\u003cDetailAST\u003e, Integer\u003e searchResult \u003d\n                     searchVariableUsageExpressions(variable, currentScopeAst);\n \n             currentScopeAst \u003d null;\n \n             final List\u003cDetailAST\u003e variableUsageExpressions \u003d searchResult.getKey();\n             dist +\u003d searchResult.getValue();\n \n             // If variable usage exists in a single scope, then look into\n             // this scope and count distance until variable usage.\n             if (variableUsageExpressions.size() \u003d\u003d 1) {\n                 final DetailAST blockWithVariableUsage \u003d variableUsageExpressions\n                         .get(0);\n                 DetailAST exprWithVariableUsage \u003d null;\n                 switch (blockWithVariableUsage.getType()) {\n                     case TokenTypes.VARIABLE_DEF:\n                     case TokenTypes.EXPR:\n                         dist++;\n                         break;\n                     case TokenTypes.LITERAL_FOR:\n                     case TokenTypes.LITERAL_WHILE:\n                     case TokenTypes.LITERAL_DO:\n                         exprWithVariableUsage \u003d getFirstNodeInsideForWhileDoWhileBlocks(\n                             blockWithVariableUsage, variable);\n                         break;\n                     case TokenTypes.LITERAL_IF:\n                         exprWithVariableUsage \u003d getFirstNodeInsideIfBlock(\n                             blockWithVariableUsage, variable);\n                         break;\n                     case TokenTypes.LITERAL_SWITCH:\n                         exprWithVariableUsage \u003d getFirstNodeInsideSwitchBlock(\n                             blockWithVariableUsage, variable);\n                         break;\n                     case TokenTypes.LITERAL_TRY:\n                         exprWithVariableUsage \u003d\n                             getFirstNodeInsideTryCatchFinallyBlocks(blockWithVariableUsage,\n                                 variable);\n                         break;\n                     default:\n                         exprWithVariableUsage \u003d blockWithVariableUsage.getFirstChild();\n                 }\n                 currentScopeAst \u003d exprWithVariableUsage;\n-                if (exprWithVariableUsage !\u003d null) {\n-                    variableUsageAst \u003d exprWithVariableUsage;\n+                if (exprWithVariableUsage \u003d\u003d null) {\n+                    variableUsageAst \u003d blockWithVariableUsage;\n                 }\n                 else {\n-                    variableUsageAst \u003d blockWithVariableUsage;\n+                    variableUsageAst \u003d exprWithVariableUsage;\n                 }\n             }\n             // If variable usage exists in different scopes, then distance \u003d\n             // distance until variable first usage.\n             else if (variableUsageExpressions.size() \u003e 1) {\n                 dist++;\n                 variableUsageAst \u003d variableUsageExpressions.get(0);\n             }\n             // If there\u0027s no any variable usage, then distance \u003d 0.\n             else {\n                 variableUsageAst \u003d null;\n             }\n         }\n         return new SimpleEntry\u003c\u003e(variableUsageAst, dist);\n     }\n\\ No newline at end of file\n"
    },
    "ee84bccfe190e288447b417bc5e1a3cf94d7b218": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: Fixed JavaNSCC violations\n",
      "commitDate": 1440783959000,
      "commitName": "ee84bccfe190e288447b417bc5e1a3cf94d7b218",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": 1440677821000,
      "commitNameOld": "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 1.23,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,78 +1,68 @@\n     private static Entry\u003cDetailAST, Integer\u003e calculateDistanceBetweenScopes(\n             DetailAST ast, DetailAST variable) {\n         int dist \u003d 0;\n         DetailAST currentScopeAst \u003d ast;\n         DetailAST variableUsageAst \u003d null;\n         while (currentScopeAst !\u003d null) {\n-            final List\u003cDetailAST\u003e variableUsageExpressions \u003d new ArrayList\u003c\u003e();\n-            DetailAST currentStatementAst \u003d currentScopeAst;\n+            final Entry\u003cList\u003cDetailAST\u003e, Integer\u003e searchResult \u003d\n+                    searchVariableUsageExpressions(variable, currentScopeAst);\n+\n             currentScopeAst \u003d null;\n-            while (currentStatementAst !\u003d null\n-                    \u0026\u0026 currentStatementAst.getType() !\u003d TokenTypes.RCURLY) {\n-                if (currentStatementAst.getFirstChild() !\u003d null) {\n-                    if (isChild(currentStatementAst, variable)) {\n-                        variableUsageExpressions.add(currentStatementAst);\n-                    }\n-                    // If expression doesn\u0027t contain variable and this variable\n-                    // hasn\u0027t been met yet, than distance + 1.\n-                    else if (variableUsageExpressions.isEmpty()\n-                            \u0026\u0026 currentStatementAst.getType() !\u003d TokenTypes.VARIABLE_DEF) {\n-                        dist++;\n-                    }\n-                }\n-                currentStatementAst \u003d currentStatementAst.getNextSibling();\n-            }\n+\n+            final List\u003cDetailAST\u003e variableUsageExpressions \u003d searchResult.getKey();\n+            dist +\u003d searchResult.getValue();\n+\n             // If variable usage exists in a single scope, then look into\n             // this scope and count distance until variable usage.\n             if (variableUsageExpressions.size() \u003d\u003d 1) {\n                 final DetailAST blockWithVariableUsage \u003d variableUsageExpressions\n                         .get(0);\n                 DetailAST exprWithVariableUsage \u003d null;\n                 switch (blockWithVariableUsage.getType()) {\n                     case TokenTypes.VARIABLE_DEF:\n                     case TokenTypes.EXPR:\n                         dist++;\n                         break;\n                     case TokenTypes.LITERAL_FOR:\n                     case TokenTypes.LITERAL_WHILE:\n                     case TokenTypes.LITERAL_DO:\n                         exprWithVariableUsage \u003d getFirstNodeInsideForWhileDoWhileBlocks(\n                             blockWithVariableUsage, variable);\n                         break;\n                     case TokenTypes.LITERAL_IF:\n                         exprWithVariableUsage \u003d getFirstNodeInsideIfBlock(\n                             blockWithVariableUsage, variable);\n                         break;\n                     case TokenTypes.LITERAL_SWITCH:\n                         exprWithVariableUsage \u003d getFirstNodeInsideSwitchBlock(\n                             blockWithVariableUsage, variable);\n                         break;\n                     case TokenTypes.LITERAL_TRY:\n                         exprWithVariableUsage \u003d\n                             getFirstNodeInsideTryCatchFinallyBlocks(blockWithVariableUsage,\n                                 variable);\n                         break;\n                     default:\n                         exprWithVariableUsage \u003d blockWithVariableUsage.getFirstChild();\n                 }\n                 currentScopeAst \u003d exprWithVariableUsage;\n                 if (exprWithVariableUsage !\u003d null) {\n                     variableUsageAst \u003d exprWithVariableUsage;\n                 }\n                 else {\n                     variableUsageAst \u003d blockWithVariableUsage;\n                 }\n             }\n             // If variable usage exists in different scopes, then distance \u003d\n             // distance until variable first usage.\n             else if (variableUsageExpressions.size() \u003e 1) {\n                 dist++;\n                 variableUsageAst \u003d variableUsageExpressions.get(0);\n             }\n             // If there\u0027s no any variable usage, then distance \u003d 0.\n             else {\n                 variableUsageAst \u003d null;\n             }\n         }\n         return new SimpleEntry\u003c\u003e(variableUsageAst, dist);\n     }\n\\ No newline at end of file\n"
    },
    "4c078ba710068498ca513ce115993e30dab4562a": {
      "type": "Ymodifierchange",
      "commitMessage": "Make \"private\" methods \"static\" where possible. #46\n\nSonarQube rule: [\"private\" methods that don\u0027t access instance data should be \"static\"](http://nemo.sonarqube.org/coding_rules#rule_key\u003dsquid%3AS2325).\n\nRationale: private methods that don\u0027t access instance data can be static to prevent any misunderstanding about the contract of the method.\n",
      "commitDate": 1437195084000,
      "commitName": "4c078ba710068498ca513ce115993e30dab4562a",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1431863229000,
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 61.71,
      "commitsBetweenForRepo": 387,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,78 +1,78 @@\n-    private Entry\u003cDetailAST, Integer\u003e calculateDistanceBetweenScopes(\n+    private static Entry\u003cDetailAST, Integer\u003e calculateDistanceBetweenScopes(\n             DetailAST ast, DetailAST variable) {\n         int dist \u003d 0;\n         DetailAST currentScopeAst \u003d ast;\n         DetailAST variableUsageAst \u003d null;\n         while (currentScopeAst !\u003d null) {\n             final List\u003cDetailAST\u003e variableUsageExpressions \u003d new ArrayList\u003c\u003e();\n             DetailAST currentStatementAst \u003d currentScopeAst;\n             currentScopeAst \u003d null;\n             while (currentStatementAst !\u003d null\n                     \u0026\u0026 currentStatementAst.getType() !\u003d TokenTypes.RCURLY) {\n                 if (currentStatementAst.getFirstChild() !\u003d null) {\n                     if (isChild(currentStatementAst, variable)) {\n                         variableUsageExpressions.add(currentStatementAst);\n                     }\n                     // If expression doesn\u0027t contain variable and this variable\n                     // hasn\u0027t been met yet, than distance + 1.\n                     else if (variableUsageExpressions.isEmpty()\n                             \u0026\u0026 currentStatementAst.getType() !\u003d TokenTypes.VARIABLE_DEF) {\n                         dist++;\n                     }\n                 }\n                 currentStatementAst \u003d currentStatementAst.getNextSibling();\n             }\n             // If variable usage exists in a single scope, then look into\n             // this scope and count distance until variable usage.\n             if (variableUsageExpressions.size() \u003d\u003d 1) {\n                 final DetailAST blockWithVariableUsage \u003d variableUsageExpressions\n                         .get(0);\n                 DetailAST exprWithVariableUsage \u003d null;\n                 switch (blockWithVariableUsage.getType()) {\n                     case TokenTypes.VARIABLE_DEF:\n                     case TokenTypes.EXPR:\n                         dist++;\n                         break;\n                     case TokenTypes.LITERAL_FOR:\n                     case TokenTypes.LITERAL_WHILE:\n                     case TokenTypes.LITERAL_DO:\n                         exprWithVariableUsage \u003d getFirstNodeInsideForWhileDoWhileBlocks(\n                             blockWithVariableUsage, variable);\n                         break;\n                     case TokenTypes.LITERAL_IF:\n                         exprWithVariableUsage \u003d getFirstNodeInsideIfBlock(\n                             blockWithVariableUsage, variable);\n                         break;\n                     case TokenTypes.LITERAL_SWITCH:\n                         exprWithVariableUsage \u003d getFirstNodeInsideSwitchBlock(\n                             blockWithVariableUsage, variable);\n                         break;\n                     case TokenTypes.LITERAL_TRY:\n                         exprWithVariableUsage \u003d\n                             getFirstNodeInsideTryCatchFinallyBlocks(blockWithVariableUsage,\n                                 variable);\n                         break;\n                     default:\n                         exprWithVariableUsage \u003d blockWithVariableUsage.getFirstChild();\n                 }\n                 currentScopeAst \u003d exprWithVariableUsage;\n                 if (exprWithVariableUsage !\u003d null) {\n                     variableUsageAst \u003d exprWithVariableUsage;\n                 }\n                 else {\n                     variableUsageAst \u003d blockWithVariableUsage;\n                 }\n             }\n             // If variable usage exists in different scopes, then distance \u003d\n             // distance until variable first usage.\n             else if (variableUsageExpressions.size() \u003e 1) {\n                 dist++;\n                 variableUsageAst \u003d variableUsageExpressions.get(0);\n             }\n             // If there\u0027s no any variable usage, then distance \u003d 0.\n             else {\n                 variableUsageAst \u003d null;\n             }\n         }\n         return new SimpleEntry\u003c\u003e(variableUsageAst, dist);\n     }\n\\ No newline at end of file\n"
    },
    "c1ce1f8f0c8c9ef84d71fbe47ea671adcd87043a": {
      "type": "Ybodychange",
      "commitMessage": "fixed violations for PMD rule UseCollectionIsEmpty. Issue #744\n",
      "commitDate": 1430066975000,
      "commitName": "c1ce1f8f0c8c9ef84d71fbe47ea671adcd87043a",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": 1427492342000,
      "commitNameOld": "ebd4afdebe8ee09c0e6c7d1239e2ca982f87e51c",
      "commitAuthorOld": "Damian Szczepanik",
      "daysBetweenCommits": 29.8,
      "commitsBetweenForRepo": 132,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,81 +1,81 @@\n     private Entry\u003cDetailAST, Integer\u003e calculateDistanceBetweenScopes(\n             DetailAST ast, DetailAST variable)\n     {\n         int dist \u003d 0;\n         DetailAST currentScopeAst \u003d ast;\n         DetailAST variableUsageAst \u003d null;\n         while (currentScopeAst !\u003d null) {\n             final List\u003cDetailAST\u003e variableUsageExpressions \u003d new ArrayList\u003c\u003e();\n             DetailAST currentStatementAst \u003d currentScopeAst;\n             currentScopeAst \u003d null;\n             while (currentStatementAst !\u003d null\n                     \u0026\u0026 currentStatementAst.getType() !\u003d TokenTypes.RCURLY)\n             {\n                 if (currentStatementAst.getFirstChild() !\u003d null) {\n                     if (isChild(currentStatementAst, variable)) {\n                         variableUsageExpressions.add(currentStatementAst);\n                     }\n                     // If expression doesn\u0027t contain variable and this variable\n                     // hasn\u0027t been met yet, than distance + 1.\n-                    else if (variableUsageExpressions.size() \u003d\u003d 0\n+                    else if (variableUsageExpressions.isEmpty()\n                             \u0026\u0026 currentStatementAst.getType() !\u003d TokenTypes.VARIABLE_DEF)\n                     {\n                         dist++;\n                     }\n                 }\n                 currentStatementAst \u003d currentStatementAst.getNextSibling();\n             }\n             // If variable usage exists in a single scope, then look into\n             // this scope and count distance until variable usage.\n             if (variableUsageExpressions.size() \u003d\u003d 1) {\n                 final DetailAST blockWithVariableUsage \u003d variableUsageExpressions\n                         .get(0);\n                 DetailAST exprWithVariableUsage \u003d null;\n                 switch (blockWithVariableUsage.getType()) {\n                     case TokenTypes.VARIABLE_DEF:\n                     case TokenTypes.EXPR:\n                         dist++;\n                         break;\n                     case TokenTypes.LITERAL_FOR:\n                     case TokenTypes.LITERAL_WHILE:\n                     case TokenTypes.LITERAL_DO:\n                         exprWithVariableUsage \u003d getFirstNodeInsideForWhileDoWhileBlocks(\n                             blockWithVariableUsage, variable);\n                         break;\n                     case TokenTypes.LITERAL_IF:\n                         exprWithVariableUsage \u003d getFirstNodeInsideIfBlock(\n                             blockWithVariableUsage, variable);\n                         break;\n                     case TokenTypes.LITERAL_SWITCH:\n                         exprWithVariableUsage \u003d getFirstNodeInsideSwitchBlock(\n                             blockWithVariableUsage, variable);\n                         break;\n                     case TokenTypes.LITERAL_TRY:\n                         exprWithVariableUsage \u003d\n                             getFirstNodeInsideTryCatchFinallyBlocks(blockWithVariableUsage,\n                                 variable);\n                         break;\n                     default:\n                         exprWithVariableUsage \u003d blockWithVariableUsage.getFirstChild();\n                 }\n                 currentScopeAst \u003d exprWithVariableUsage;\n                 if (exprWithVariableUsage !\u003d null) {\n                     variableUsageAst \u003d exprWithVariableUsage;\n                 }\n                 else {\n                     variableUsageAst \u003d blockWithVariableUsage;\n                 }\n             }\n             // If variable usage exists in different scopes, then distance \u003d\n             // distance until variable first usage.\n             else if (variableUsageExpressions.size() \u003e 1) {\n                 dist++;\n                 variableUsageAst \u003d variableUsageExpressions.get(0);\n             }\n             // If there\u0027s no any variable usage, then distance \u003d 0.\n             else {\n                 variableUsageAst \u003d null;\n             }\n         }\n         return new SimpleEntry\u003c\u003e(variableUsageAst, dist);\n     }\n\\ No newline at end of file\n"
    },
    "ff5cbc39c4882b3a3dcdbedcad9393e170148725": {
      "type": "Ybodychange",
      "commitMessage": "Replace verbose type arguments with diamond type \u003c\u003e\n\nThis syntax is not supported under Java 6 or earlier, but Checkstyle codebase uses Java 7 already.\n",
      "commitDate": 1424017336000,
      "commitName": "ff5cbc39c4882b3a3dcdbedcad9393e170148725",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1423431987000,
      "commitNameOld": "abe2b200312ee72aa552026b1a34e8bd72bfdc4e",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 6.77,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,81 +1,81 @@\n     private Entry\u003cDetailAST, Integer\u003e calculateDistanceBetweenScopes(\n             DetailAST ast, DetailAST variable)\n     {\n         int dist \u003d 0;\n         DetailAST currentScopeAst \u003d ast;\n         DetailAST variableUsageAst \u003d null;\n         while (currentScopeAst !\u003d null) {\n-            final List\u003cDetailAST\u003e variableUsageExpressions \u003d new ArrayList\u003cDetailAST\u003e();\n+            final List\u003cDetailAST\u003e variableUsageExpressions \u003d new ArrayList\u003c\u003e();\n             DetailAST currentStatementAst \u003d currentScopeAst;\n             currentScopeAst \u003d null;\n             while (currentStatementAst !\u003d null\n                     \u0026\u0026 currentStatementAst.getType() !\u003d TokenTypes.RCURLY)\n             {\n                 if (currentStatementAst.getFirstChild() !\u003d null) {\n                     if (isChild(currentStatementAst, variable)) {\n                         variableUsageExpressions.add(currentStatementAst);\n                     }\n                     // If expression doesn\u0027t contain variable and this variable\n                     // hasn\u0027t been met yet, than distance + 1.\n                     else if (variableUsageExpressions.size() \u003d\u003d 0\n                             \u0026\u0026 currentStatementAst.getType() !\u003d TokenTypes.VARIABLE_DEF)\n                     {\n                         dist++;\n                     }\n                 }\n                 currentStatementAst \u003d currentStatementAst.getNextSibling();\n             }\n             // If variable usage exists in a single scope, then look into\n             // this scope and count distance until variable usage.\n             if (variableUsageExpressions.size() \u003d\u003d 1) {\n                 final DetailAST blockWithVariableUsage \u003d variableUsageExpressions\n                         .get(0);\n                 DetailAST exprWithVariableUsage \u003d null;\n                 switch (blockWithVariableUsage.getType()) {\n                     case TokenTypes.VARIABLE_DEF:\n                     case TokenTypes.EXPR:\n                         dist++;\n                         break;\n                     case TokenTypes.LITERAL_FOR:\n                     case TokenTypes.LITERAL_WHILE:\n                     case TokenTypes.LITERAL_DO:\n                         exprWithVariableUsage \u003d getFirstNodeInsideForWhileDoWhileBlocks(\n                             blockWithVariableUsage, variable);\n                         break;\n                     case TokenTypes.LITERAL_IF:\n                         exprWithVariableUsage \u003d getFirstNodeInsideIfBlock(\n                             blockWithVariableUsage, variable);\n                         break;\n                     case TokenTypes.LITERAL_SWITCH:\n                         exprWithVariableUsage \u003d getFirstNodeInsideSwitchBlock(\n                             blockWithVariableUsage, variable);\n                         break;\n                     case TokenTypes.LITERAL_TRY:\n                         exprWithVariableUsage \u003d\n                             getFirstNodeInsideTryCatchFinallyBlocks(blockWithVariableUsage,\n                                 variable);\n                         break;\n                     default:\n                         exprWithVariableUsage \u003d blockWithVariableUsage.getFirstChild();\n                 }\n                 currentScopeAst \u003d exprWithVariableUsage;\n                 if (exprWithVariableUsage !\u003d null) {\n                     variableUsageAst \u003d exprWithVariableUsage;\n                 }\n                 else {\n                     variableUsageAst \u003d blockWithVariableUsage;\n                 }\n             }\n             // If variable usage exists in different scopes, then distance \u003d\n             // distance until variable first usage.\n             else if (variableUsageExpressions.size() \u003e 1) {\n                 dist++;\n                 variableUsageAst \u003d variableUsageExpressions.get(0);\n             }\n             // If there\u0027s no any variable usage, then distance \u003d 0.\n             else {\n                 variableUsageAst \u003d null;\n             }\n         }\n-        return new SimpleEntry\u003cDetailAST, Integer\u003e(variableUsageAst, dist);\n+        return new SimpleEntry\u003c\u003e(variableUsageAst, dist);\n     }\n\\ No newline at end of file\n"
    },
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, coding, #512\n",
      "commitDate": 1421677214000,
      "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "c4e886312aae13b6cfadceed25b1b8aec18d4a96": {
      "type": "Yintroduced",
      "commitMessage": "VariableDeclarationUsageDistanceCheck was imported #223\n",
      "commitDate": 1407390645000,
      "commitName": "c4e886312aae13b6cfadceed25b1b8aec18d4a96",
      "commitAuthor": "Max"
    }
  }
}