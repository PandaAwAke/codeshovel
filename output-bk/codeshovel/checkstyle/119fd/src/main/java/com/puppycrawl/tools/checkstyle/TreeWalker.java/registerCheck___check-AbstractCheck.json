{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "TreeWalker.java",
  "functionName": "registerCheck",
  "functionId": "registerCheck___check-AbstractCheck",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java",
  "functionStartLine": 229,
  "functionEndLine": 265,
  "changeHistory": [
    "cf96dd9adcf0c3c8f8f05a9ffdcb765cafe17479",
    "be3e035ce39a610881cd2c1bfdce3eef101c2e3c",
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
    "085ce12db0983590844ccc24ea49f91686a30ed8",
    "afd9a5c3e56d942eaa7ff6393a2ecb5e9ec2a231",
    "15c91c8ec20f1349e6f8eea2beb16e922bb03a89",
    "86826e1fa3fe3d793ee4723bb84ee0fc4ca38df1",
    "5e0b6286ac1e4f52c9769c764bc2978ab0fc0037",
    "abe2b200312ee72aa552026b1a34e8bd72bfdc4e",
    "39ce82b920cf83358bf0c291e9ed826b5662c7e8",
    "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
    "a24df47cafeab03fd65cf72b460aad3d2fafce3d",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "911065320fb39299f442ea08f775cfe08ba2a2ed",
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
    "f1afaf83f39b83cc3bd07a2388448b262652a76b",
    "35d1673788bbbac8263fdb69275dc6a63b095a24",
    "eeba08c1028a79bdc2140476b24ce8d60f04657a",
    "2149a9c42dce7a3913cca83755c8f562b0442929",
    "0dc5dd977b1cec9709a775c69979e6c6296d340b",
    "95a5040ccc98d1138a82c9e0ebcfe983651219b6",
    "b3caa3b7ad0a135038c2c1c5bda4fccb897a00c4",
    "64daa21b1c30061bba4c0d030f4df913f53c4f17",
    "5ce7d2562fa583fdb812c6742b1198d0c99ccd6a",
    "a47526404dfcbf638b937ce8a35357151dc12369",
    "6ffc8dd26075456b055ffcd35d3915c23049bfbb",
    "a2fded8ed742d341c47b818d79aaa90cc849273e",
    "eb7b7bfd3e63a926c3f3b2801d519caa0e1fffc3",
    "d28a2aa39ef15132757260a5e0b3ec03d6ae28f3",
    "7e570084e62eda58f3c4fa7e75e26a1a41d255cf",
    "19257b2cdb950aac0b729ee8a3a979e5605163f9"
  ],
  "changeHistoryShort": {
    "cf96dd9adcf0c3c8f8f05a9ffdcb765cafe17479": "Yparameterchange",
    "be3e035ce39a610881cd2c1bfdce3eef101c2e3c": "Ybodychange",
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970": "Ybodychange",
    "085ce12db0983590844ccc24ea49f91686a30ed8": "Ybodychange",
    "afd9a5c3e56d942eaa7ff6393a2ecb5e9ec2a231": "Ybodychange",
    "15c91c8ec20f1349e6f8eea2beb16e922bb03a89": "Ybodychange",
    "86826e1fa3fe3d793ee4723bb84ee0fc4ca38df1": "Ybodychange",
    "5e0b6286ac1e4f52c9769c764bc2978ab0fc0037": "Ybodychange",
    "abe2b200312ee72aa552026b1a34e8bd72bfdc4e": "Ybodychange",
    "39ce82b920cf83358bf0c291e9ed826b5662c7e8": "Ybodychange",
    "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1": "Ymultichange(Yparameterchange,Ybodychange)",
    "a24df47cafeab03fd65cf72b460aad3d2fafce3d": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "911065320fb39299f442ea08f775cfe08ba2a2ed": "Ybodychange",
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1": "Ybodychange",
    "f1afaf83f39b83cc3bd07a2388448b262652a76b": "Ybodychange",
    "35d1673788bbbac8263fdb69275dc6a63b095a24": "Ybodychange",
    "eeba08c1028a79bdc2140476b24ce8d60f04657a": "Ybodychange",
    "2149a9c42dce7a3913cca83755c8f562b0442929": "Ybodychange",
    "0dc5dd977b1cec9709a775c69979e6c6296d340b": "Ybodychange",
    "95a5040ccc98d1138a82c9e0ebcfe983651219b6": "Ybodychange",
    "b3caa3b7ad0a135038c2c1c5bda4fccb897a00c4": "Ymodifierchange",
    "64daa21b1c30061bba4c0d030f4df913f53c4f17": "Ybodychange",
    "5ce7d2562fa583fdb812c6742b1198d0c99ccd6a": "Ybodychange",
    "a47526404dfcbf638b937ce8a35357151dc12369": "Ybodychange",
    "6ffc8dd26075456b055ffcd35d3915c23049bfbb": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "a2fded8ed742d341c47b818d79aaa90cc849273e": "Ybodychange",
    "eb7b7bfd3e63a926c3f3b2801d519caa0e1fffc3": "Ybodychange",
    "d28a2aa39ef15132757260a5e0b3ec03d6ae28f3": "Ybodychange",
    "7e570084e62eda58f3c4fa7e75e26a1a41d255cf": "Ybodychange",
    "19257b2cdb950aac0b729ee8a3a979e5605163f9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cf96dd9adcf0c3c8f8f05a9ffdcb765cafe17479": {
      "type": "Yparameterchange",
      "commitMessage": "Issue #2551: renamed Check to AbstractCheck",
      "commitDate": 1454680863000,
      "commitName": "cf96dd9adcf0c3c8f8f05a9ffdcb765cafe17479",
      "commitAuthor": "rnveach",
      "commitDateOld": 1453646135000,
      "commitNameOld": "0d8e93ce79ea33b72b3e904d8796984271ee3d8d",
      "commitAuthorOld": "Bhavik Patel",
      "daysBetweenCommits": 11.98,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n-    private void registerCheck(Check check)\n+    private void registerCheck(AbstractCheck check)\n         throws CheckstyleException {\n         validateDefaultTokens(check);\n         final int[] tokens;\n         final Set\u003cString\u003e checkTokens \u003d check.getTokenNames();\n         if (checkTokens.isEmpty()) {\n             tokens \u003d check.getDefaultTokens();\n         }\n         else {\n             tokens \u003d check.getRequiredTokens();\n \n             //register configured tokens\n             final int[] acceptableTokens \u003d check.getAcceptableTokens();\n             Arrays.sort(acceptableTokens);\n             for (String token : checkTokens) {\n                 final int tokenId \u003d TokenUtils.getTokenId(token);\n                 if (Arrays.binarySearch(acceptableTokens, tokenId) \u003e\u003d 0) {\n                     registerCheck(token, check);\n                 }\n                 else {\n                     final String message \u003d String.format(Locale.ROOT, \"Token \\\"%s\\\" was \"\n                             + \"not found in Acceptable tokens list in check %s\",\n                             token, check.getClass().getName());\n                     throw new CheckstyleException(message);\n                 }\n             }\n         }\n         for (int element : tokens) {\n             registerCheck(element, check);\n         }\n         if (check.isCommentNodesRequired()) {\n             commentChecks.add(check);\n         }\n         else {\n             ordinaryChecks.add(check);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "be3e035ce39a610881cd2c1bfdce3eef101c2e3c": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1217: fixes for violations from \u0027forbiddenapis\u0027 verification tool\n",
      "commitDate": 1444779430000,
      "commitName": "be3e035ce39a610881cd2c1bfdce3eef101c2e3c",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": 1444178762000,
      "commitNameOld": "30c3a362d45721e6925fe89ba71f0fe69d0fc471",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 6.95,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     private void registerCheck(Check check)\n         throws CheckstyleException {\n         validateDefaultTokens(check);\n         final int[] tokens;\n         final Set\u003cString\u003e checkTokens \u003d check.getTokenNames();\n         if (checkTokens.isEmpty()) {\n             tokens \u003d check.getDefaultTokens();\n         }\n         else {\n             tokens \u003d check.getRequiredTokens();\n \n             //register configured tokens\n             final int[] acceptableTokens \u003d check.getAcceptableTokens();\n             Arrays.sort(acceptableTokens);\n             for (String token : checkTokens) {\n                 final int tokenId \u003d TokenUtils.getTokenId(token);\n                 if (Arrays.binarySearch(acceptableTokens, tokenId) \u003e\u003d 0) {\n                     registerCheck(token, check);\n                 }\n                 else {\n-                    final String message \u003d String.format(\"Token \\\"%s\\\" was not found in \"\n-                            + \"Acceptable tokens list in check %s\",\n+                    final String message \u003d String.format(Locale.ROOT, \"Token \\\"%s\\\" was \"\n+                            + \"not found in Acceptable tokens list in check %s\",\n                             token, check.getClass().getName());\n                     throw new CheckstyleException(message);\n                 }\n             }\n         }\n         for (int element : tokens) {\n             registerCheck(element, check);\n         }\n         if (check.isCommentNodesRequired()) {\n             commentChecks.add(check);\n         }\n         else {\n             ordinaryChecks.add(check);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970": {
      "type": "Ybodychange",
      "commitMessage": "Utils class has been splitted to CommonUtils and TokenUtils. Issue #1898\n",
      "commitDate": 1440677821000,
      "commitName": "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": 1440677821000,
      "commitNameOld": "ed595de84fba2db507adaf01d04cb089a5e0bac5",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     private void registerCheck(Check check)\n         throws CheckstyleException {\n         validateDefaultTokens(check);\n         final int[] tokens;\n         final Set\u003cString\u003e checkTokens \u003d check.getTokenNames();\n         if (checkTokens.isEmpty()) {\n             tokens \u003d check.getDefaultTokens();\n         }\n         else {\n             tokens \u003d check.getRequiredTokens();\n \n             //register configured tokens\n             final int[] acceptableTokens \u003d check.getAcceptableTokens();\n             Arrays.sort(acceptableTokens);\n             for (String token : checkTokens) {\n-                final int tokenId \u003d Utils.getTokenId(token);\n+                final int tokenId \u003d TokenUtils.getTokenId(token);\n                 if (Arrays.binarySearch(acceptableTokens, tokenId) \u003e\u003d 0) {\n                     registerCheck(token, check);\n                 }\n                 else {\n                     final String message \u003d String.format(\"Token \\\"%s\\\" was not found in \"\n                             + \"Acceptable tokens list in check %s\",\n                             token, check.getClass().getName());\n                     throw new CheckstyleException(message);\n                 }\n             }\n         }\n         for (int element : tokens) {\n             registerCheck(element, check);\n         }\n         if (check.isCommentNodesRequired()) {\n             commentChecks.add(check);\n         }\n         else {\n             ordinaryChecks.add(check);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "085ce12db0983590844ccc24ea49f91686a30ed8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: MultipleStringLiterals violations fixed\n",
      "commitDate": 1440543609000,
      "commitName": "085ce12db0983590844ccc24ea49f91686a30ed8",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": 1440505796000,
      "commitNameOld": "afd9a5c3e56d942eaa7ff6393a2ecb5e9ec2a231",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 0.44,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,37 @@\n     private void registerCheck(Check check)\n         throws CheckstyleException {\n         validateDefaultTokens(check);\n         final int[] tokens;\n         final Set\u003cString\u003e checkTokens \u003d check.getTokenNames();\n         if (checkTokens.isEmpty()) {\n             tokens \u003d check.getDefaultTokens();\n         }\n         else {\n             tokens \u003d check.getRequiredTokens();\n \n             //register configured tokens\n             final int[] acceptableTokens \u003d check.getAcceptableTokens();\n             Arrays.sort(acceptableTokens);\n             for (String token : checkTokens) {\n                 final int tokenId \u003d Utils.getTokenId(token);\n                 if (Arrays.binarySearch(acceptableTokens, tokenId) \u003e\u003d 0) {\n                     registerCheck(token, check);\n                 }\n                 else {\n-                    throw new CheckstyleException(\"Token \\\"\"\n-                        + token + \"\\\" was not found in Acceptable tokens list\"\n-                                + \" in check \" + check.getClass().getName());\n+                    final String message \u003d String.format(\"Token \\\"%s\\\" was not found in \"\n+                            + \"Acceptable tokens list in check %s\",\n+                            token, check.getClass().getName());\n+                    throw new CheckstyleException(message);\n                 }\n             }\n         }\n         for (int element : tokens) {\n             registerCheck(element, check);\n         }\n         if (check.isCommentNodesRequired()) {\n             commentChecks.add(check);\n         }\n         else {\n             ordinaryChecks.add(check);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "afd9a5c3e56d942eaa7ff6393a2ecb5e9ec2a231": {
      "type": "Ybodychange",
      "commitMessage": "Ensured that check\u0027s required tokens are subset of default tokens, issue #655\n",
      "commitDate": 1440505796000,
      "commitName": "afd9a5c3e56d942eaa7ff6393a2ecb5e9ec2a231",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": 1440158741000,
      "commitNameOld": "23a1b6253f6296c1a3888361953da47f2808ca3d",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 4.02,
      "commitsBetweenForRepo": 82,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,36 @@\n     private void registerCheck(Check check)\n         throws CheckstyleException {\n+        validateDefaultTokens(check);\n         final int[] tokens;\n         final Set\u003cString\u003e checkTokens \u003d check.getTokenNames();\n         if (checkTokens.isEmpty()) {\n             tokens \u003d check.getDefaultTokens();\n         }\n         else {\n             tokens \u003d check.getRequiredTokens();\n \n             //register configured tokens\n             final int[] acceptableTokens \u003d check.getAcceptableTokens();\n             Arrays.sort(acceptableTokens);\n             for (String token : checkTokens) {\n                 final int tokenId \u003d Utils.getTokenId(token);\n                 if (Arrays.binarySearch(acceptableTokens, tokenId) \u003e\u003d 0) {\n                     registerCheck(token, check);\n                 }\n                 else {\n                     throw new CheckstyleException(\"Token \\\"\"\n                         + token + \"\\\" was not found in Acceptable tokens list\"\n                                 + \" in check \" + check.getClass().getName());\n                 }\n             }\n         }\n         for (int element : tokens) {\n             registerCheck(element, check);\n         }\n         if (check.isCommentNodesRequired()) {\n             commentChecks.add(check);\n         }\n         else {\n             ordinaryChecks.add(check);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "15c91c8ec20f1349e6f8eea2beb16e922bb03a89": {
      "type": "Ybodychange",
      "commitMessage": "Add missing toString() methods. #1555\n\nFixes `ObjectToString` inspection violations.\n\nDescription:\n\u003eReports any calls to .toString() which use the default implementation from java.lang.Object. The default implementation is rarely desired, but easy to use by accident. Calls to .toString() on objects of type java.lang.Object are ignored by this inspection.\n",
      "commitDate": 1439872439000,
      "commitName": "15c91c8ec20f1349e6f8eea2beb16e922bb03a89",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1439355282000,
      "commitNameOld": "c4928f486c67afa62e7e8fbd5d8f731be7186985",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 5.99,
      "commitsBetweenForRepo": 80,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     private void registerCheck(Check check)\n         throws CheckstyleException {\n         final int[] tokens;\n         final Set\u003cString\u003e checkTokens \u003d check.getTokenNames();\n         if (checkTokens.isEmpty()) {\n             tokens \u003d check.getDefaultTokens();\n         }\n         else {\n             tokens \u003d check.getRequiredTokens();\n \n             //register configured tokens\n             final int[] acceptableTokens \u003d check.getAcceptableTokens();\n             Arrays.sort(acceptableTokens);\n             for (String token : checkTokens) {\n                 final int tokenId \u003d Utils.getTokenId(token);\n                 if (Arrays.binarySearch(acceptableTokens, tokenId) \u003e\u003d 0) {\n                     registerCheck(token, check);\n                 }\n                 else {\n                     throw new CheckstyleException(\"Token \\\"\"\n                         + token + \"\\\" was not found in Acceptable tokens list\"\n-                                + \" in check \" + check);\n+                                + \" in check \" + check.getClass().getName());\n                 }\n             }\n         }\n         for (int element : tokens) {\n             registerCheck(element, check);\n         }\n         if (check.isCommentNodesRequired()) {\n             commentChecks.add(check);\n         }\n         else {\n             ordinaryChecks.add(check);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "86826e1fa3fe3d793ee4723bb84ee0fc4ca38df1": {
      "type": "Ybodychange",
      "commitMessage": "Invert if statements with negated conditions. #1555\n\nFixes `NegatedIfElse` inspection violations.\n\nDescription:\n\u003eReports if statements which contain else branches and whose conditions are negated. Flipping the order of the if and else branches will usually increase the clarity of such statements.\n",
      "commitDate": 1439189206000,
      "commitName": "86826e1fa3fe3d793ee4723bb84ee0fc4ca38df1",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1439131302000,
      "commitNameOld": "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.67,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     private void registerCheck(Check check)\n         throws CheckstyleException {\n         final int[] tokens;\n         final Set\u003cString\u003e checkTokens \u003d check.getTokenNames();\n-        if (!checkTokens.isEmpty()) {\n+        if (checkTokens.isEmpty()) {\n+            tokens \u003d check.getDefaultTokens();\n+        }\n+        else {\n             tokens \u003d check.getRequiredTokens();\n \n             //register configured tokens\n             final int[] acceptableTokens \u003d check.getAcceptableTokens();\n             Arrays.sort(acceptableTokens);\n             for (String token : checkTokens) {\n                 final int tokenId \u003d Utils.getTokenId(token);\n                 if (Arrays.binarySearch(acceptableTokens, tokenId) \u003e\u003d 0) {\n                     registerCheck(token, check);\n                 }\n                 else {\n                     throw new CheckstyleException(\"Token \\\"\"\n                         + token + \"\\\" was not found in Acceptable tokens list\"\n                                 + \" in check \" + check);\n                 }\n             }\n         }\n-        else {\n-            tokens \u003d check.getDefaultTokens();\n-        }\n         for (int element : tokens) {\n             registerCheck(element, check);\n         }\n         if (check.isCommentNodesRequired()) {\n             commentChecks.add(check);\n         }\n         else {\n             ordinaryChecks.add(check);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "5e0b6286ac1e4f52c9769c764bc2978ab0fc0037": {
      "type": "Ybodychange",
      "commitMessage": "Findbugs violation: api.TokenTypes do System.exit(...). #923\n",
      "commitDate": 1431729119000,
      "commitName": "5e0b6286ac1e4f52c9769c764bc2978ab0fc0037",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": 1431535637000,
      "commitNameOld": "466b1ebb31bcfda5cf2bbf3091b6bccb5fa8f000",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 2.24,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n     private void registerCheck(Check check)\n         throws CheckstyleException\n     {\n         final int[] tokens;\n         final Set\u003cString\u003e checkTokens \u003d check.getTokenNames();\n         if (!checkTokens.isEmpty()) {\n             tokens \u003d check.getRequiredTokens();\n \n             //register configured tokens\n             final int[] acceptableTokens \u003d check.getAcceptableTokens();\n             Arrays.sort(acceptableTokens);\n             for (String token : checkTokens) {\n-                final int tokenId \u003d TokenTypes.getTokenId(token);\n+                final int tokenId \u003d Utils.getTokenId(token);\n                 if (Arrays.binarySearch(acceptableTokens, tokenId) \u003e\u003d 0) {\n                     registerCheck(token, check);\n                 }\n                 else {\n                     throw new CheckstyleException(\"Token \\\"\"\n                         + token + \"\\\" was not found in Acceptable tokens list\"\n                                 + \" in check \" + check);\n                 }\n             }\n         }\n         else {\n             tokens \u003d check.getDefaultTokens();\n         }\n         for (int element : tokens) {\n             registerCheck(element, check);\n         }\n         if (check.isCommentNodesRequired()) {\n             commentChecks.add(check);\n         }\n         else {\n             ordinaryChecks.add(check);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "abe2b200312ee72aa552026b1a34e8bd72bfdc4e": {
      "type": "Ybodychange",
      "commitMessage": "Acceptable tokens are specified for all checks, issue #342\n",
      "commitDate": 1423431987000,
      "commitName": "abe2b200312ee72aa552026b1a34e8bd72bfdc4e",
      "commitAuthor": "alexkravin",
      "commitDateOld": 1423431987000,
      "commitNameOld": "39ce82b920cf83358bf0c291e9ed826b5662c7e8",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,36 @@\n     private void registerCheck(Check check)\n         throws CheckstyleException\n     {\n         final int[] tokens;\n         final Set\u003cString\u003e checkTokens \u003d check.getTokenNames();\n         if (!checkTokens.isEmpty()) {\n             tokens \u003d check.getRequiredTokens();\n \n             //register configured tokens\n             final int[] acceptableTokens \u003d check.getAcceptableTokens();\n             Arrays.sort(acceptableTokens);\n             for (String token : checkTokens) {\n-                try {\n-                    final int tokenId \u003d TokenTypes.getTokenId(token);\n-                    if (Arrays.binarySearch(acceptableTokens, tokenId) \u003e\u003d 0) {\n-                        registerCheck(token, check);\n-                    }\n-                    else {\n-                        throw new IllegalArgumentException(\"Token \\\"\"\n-                            + token + \"\\\" was not found in Acceptable tokens list\"\n-                                    + \" in check \" + check);\n-                    }\n+                final int tokenId \u003d TokenTypes.getTokenId(token);\n+                if (Arrays.binarySearch(acceptableTokens, tokenId) \u003e\u003d 0) {\n+                    registerCheck(token, check);\n                 }\n-                catch (final IllegalArgumentException ex) {\n+                else {\n                     throw new CheckstyleException(\"Token \\\"\"\n                         + token + \"\\\" was not found in Acceptable tokens list\"\n-                                + \" in check \" + check, ex);\n+                                + \" in check \" + check);\n                 }\n             }\n         }\n         else {\n             tokens \u003d check.getDefaultTokens();\n         }\n         for (int element : tokens) {\n             registerCheck(element, check);\n         }\n         if (check.isCommentNodesRequired()) {\n             commentChecks.add(check);\n         }\n         else {\n             ordinaryChecks.add(check);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "39ce82b920cf83358bf0c291e9ed826b5662c7e8": {
      "type": "Ybodychange",
      "commitMessage": "TreeWalker update, added logging warning if AcceptableTokens are broken, issue #342\n",
      "commitDate": 1423431987000,
      "commitName": "39ce82b920cf83358bf0c291e9ed826b5662c7e8",
      "commitAuthor": "alexkravin",
      "commitDateOld": 1422178221000,
      "commitNameOld": "204c073294cdca6756bcd546d6af85a797ad7d79",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 14.51,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,43 @@\n     private void registerCheck(Check check)\n         throws CheckstyleException\n     {\n         final int[] tokens;\n         final Set\u003cString\u003e checkTokens \u003d check.getTokenNames();\n         if (!checkTokens.isEmpty()) {\n             tokens \u003d check.getRequiredTokens();\n \n             //register configured tokens\n             final int[] acceptableTokens \u003d check.getAcceptableTokens();\n             Arrays.sort(acceptableTokens);\n             for (String token : checkTokens) {\n                 try {\n                     final int tokenId \u003d TokenTypes.getTokenId(token);\n                     if (Arrays.binarySearch(acceptableTokens, tokenId) \u003e\u003d 0) {\n                         registerCheck(token, check);\n                     }\n-                    // TODO: else log warning\n+                    else {\n+                        throw new IllegalArgumentException(\"Token \\\"\"\n+                            + token + \"\\\" was not found in Acceptable tokens list\"\n+                                    + \" in check \" + check);\n+                    }\n                 }\n                 catch (final IllegalArgumentException ex) {\n-                    throw new CheckstyleException(\"illegal token \\\"\"\n-                        + token + \"\\\" in check \" + check, ex);\n+                    throw new CheckstyleException(\"Token \\\"\"\n+                        + token + \"\\\" was not found in Acceptable tokens list\"\n+                                + \" in check \" + check, ex);\n                 }\n             }\n         }\n         else {\n             tokens \u003d check.getDefaultTokens();\n         }\n         for (int element : tokens) {\n             registerCheck(element, check);\n         }\n         if (check.isCommentNodesRequired()) {\n             commentChecks.add(check);\n         }\n         else {\n             ordinaryChecks.add(check);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, checkstyle, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java\n",
      "commitDate": 1421678312000,
      "commitName": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "a24df47cafeab03fd65cf72b460aad3d2fafce3d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #49. Added support of single-line and block comments\n",
      "commitDate": 1413609550000,
      "commitName": "a24df47cafeab03fd65cf72b460aad3d2fafce3d",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": 1413609550000,
      "commitNameOld": "59014fa7539bdbaacda4325454964492db0c6109",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,38 @@\n     private void registerCheck(Check aCheck)\n         throws CheckstyleException\n     {\n         final int[] tokens;\n         final Set\u003cString\u003e checkTokens \u003d aCheck.getTokenNames();\n         if (!checkTokens.isEmpty()) {\n             tokens \u003d aCheck.getRequiredTokens();\n \n             //register configured tokens\n             final int acceptableTokens[] \u003d aCheck.getAcceptableTokens();\n             Arrays.sort(acceptableTokens);\n             for (String token : checkTokens) {\n                 try {\n                     final int tokenId \u003d TokenTypes.getTokenId(token);\n                     if (Arrays.binarySearch(acceptableTokens, tokenId) \u003e\u003d 0) {\n                         registerCheck(token, aCheck);\n                     }\n                     // TODO: else log warning\n                 }\n                 catch (final IllegalArgumentException ex) {\n                     throw new CheckstyleException(\"illegal token \\\"\"\n                         + token + \"\\\" in check \" + aCheck, ex);\n                 }\n             }\n         }\n         else {\n             tokens \u003d aCheck.getDefaultTokens();\n         }\n         for (int element : tokens) {\n             registerCheck(element, aCheck);\n         }\n-        mAllChecks.add(aCheck);\n+        if (aCheck.isCommentNodesRequired()) {\n+            mCommentChecks.add(aCheck);\n+        }\n+        else {\n+            mOrdinaryChecks.add(aCheck);\n+        }\n     }\n\\ No newline at end of file\n"
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "911065320fb39299f442ea08f775cfe08ba2a2ed": {
      "type": "Ybodychange",
      "commitMessage": "fixing things reported by FindBugs\n",
      "commitDate": 1209181531000,
      "commitName": "911065320fb39299f442ea08f775cfe08ba2a2ed",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1208867287000,
      "commitNameOld": "7552a0b72e07c9a0070e84789b5abe6d293de6e0",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 3.64,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n     private void registerCheck(Check aCheck)\n         throws CheckstyleException\n     {\n-        int[] tokens \u003d new int[] {}; //safety initialization\n+        final int[] tokens;\n         final Set\u003cString\u003e checkTokens \u003d aCheck.getTokenNames();\n         if (!checkTokens.isEmpty()) {\n             tokens \u003d aCheck.getRequiredTokens();\n \n             //register configured tokens\n             final int acceptableTokens[] \u003d aCheck.getAcceptableTokens();\n             Arrays.sort(acceptableTokens);\n             for (String token : checkTokens) {\n                 try {\n                     final int tokenId \u003d TokenTypes.getTokenId(token);\n                     if (Arrays.binarySearch(acceptableTokens, tokenId) \u003e\u003d 0) {\n                         registerCheck(token, aCheck);\n                     }\n                     // TODO: else log warning\n                 }\n                 catch (final IllegalArgumentException ex) {\n                     throw new CheckstyleException(\"illegal token \\\"\"\n                         + token + \"\\\" in check \" + aCheck, ex);\n                 }\n             }\n         }\n         else {\n             tokens \u003d aCheck.getDefaultTokens();\n         }\n         for (int element : tokens) {\n             registerCheck(element, aCheck);\n         }\n         mAllChecks.add(aCheck);\n     }\n\\ No newline at end of file\n"
    },
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1": {
      "type": "Ybodychange",
      "commitMessage": "Use the new syntactic sugar \"for loop\".\n\nEnd of the cosmetic changes.\n",
      "commitDate": 1197714527000,
      "commitName": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1197706480000,
      "commitNameOld": "f1afaf83f39b83cc3bd07a2388448b262652a76b",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n     private void registerCheck(Check aCheck)\n         throws CheckstyleException\n     {\n         int[] tokens \u003d new int[] {}; //safety initialization\n         final Set\u003cString\u003e checkTokens \u003d aCheck.getTokenNames();\n         if (!checkTokens.isEmpty()) {\n             tokens \u003d aCheck.getRequiredTokens();\n \n             //register configured tokens\n             final int acceptableTokens[] \u003d aCheck.getAcceptableTokens();\n             Arrays.sort(acceptableTokens);\n             for (String token : checkTokens) {\n                 try {\n                     final int tokenId \u003d TokenTypes.getTokenId(token);\n                     if (Arrays.binarySearch(acceptableTokens, tokenId) \u003e\u003d 0) {\n                         registerCheck(token, aCheck);\n                     }\n                     // TODO: else log warning\n                 }\n                 catch (final IllegalArgumentException ex) {\n                     throw new CheckstyleException(\"illegal token \\\"\"\n                         + token + \"\\\" in check \" + aCheck, ex);\n                 }\n             }\n         }\n         else {\n             tokens \u003d aCheck.getDefaultTokens();\n         }\n-        for (int i \u003d 0; i \u003c tokens.length; i++) {\n-            registerCheck(tokens[i], aCheck);\n+        for (int element : tokens) {\n+            registerCheck(element, aCheck);\n         }\n         mAllChecks.add(aCheck);\n     }\n\\ No newline at end of file\n"
    },
    "f1afaf83f39b83cc3bd07a2388448b262652a76b": {
      "type": "Ybodychange",
      "commitMessage": "Finish of adding generics.\n",
      "commitDate": 1197706480000,
      "commitName": "f1afaf83f39b83cc3bd07a2388448b262652a76b",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1169909494000,
      "commitNameOld": "1efc394250b8f1c79bd7f8344b738a7d13396ed3",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 321.72,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,33 @@\n     private void registerCheck(Check aCheck)\n         throws CheckstyleException\n     {\n         int[] tokens \u003d new int[] {}; //safety initialization\n-        final Set checkTokens \u003d aCheck.getTokenNames();\n+        final Set\u003cString\u003e checkTokens \u003d aCheck.getTokenNames();\n         if (!checkTokens.isEmpty()) {\n             tokens \u003d aCheck.getRequiredTokens();\n \n             //register configured tokens\n             final int acceptableTokens[] \u003d aCheck.getAcceptableTokens();\n             Arrays.sort(acceptableTokens);\n-            final Iterator it \u003d checkTokens.iterator();\n-            while (it.hasNext()) {\n-                final String token \u003d (String) it.next();\n+            for (String token : checkTokens) {\n                 try {\n                     final int tokenId \u003d TokenTypes.getTokenId(token);\n                     if (Arrays.binarySearch(acceptableTokens, tokenId) \u003e\u003d 0) {\n                         registerCheck(token, aCheck);\n                     }\n                     // TODO: else log warning\n                 }\n                 catch (final IllegalArgumentException ex) {\n                     throw new CheckstyleException(\"illegal token \\\"\"\n                         + token + \"\\\" in check \" + aCheck, ex);\n                 }\n             }\n         }\n         else {\n             tokens \u003d aCheck.getDefaultTokens();\n         }\n         for (int i \u003d 0; i \u003c tokens.length; i++) {\n             registerCheck(tokens[i], aCheck);\n         }\n         mAllChecks.add(aCheck);\n     }\n\\ No newline at end of file\n"
    },
    "35d1673788bbbac8263fdb69275dc6a63b095a24": {
      "type": "Ybodychange",
      "commitMessage": "Making local variables final where possible.\n",
      "commitDate": 1152243856000,
      "commitName": "35d1673788bbbac8263fdb69275dc6a63b095a24",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1152243235000,
      "commitNameOld": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     private void registerCheck(Check aCheck)\n         throws CheckstyleException\n     {\n         int[] tokens \u003d new int[] {}; //safety initialization\n         final Set checkTokens \u003d aCheck.getTokenNames();\n         if (!checkTokens.isEmpty()) {\n             tokens \u003d aCheck.getRequiredTokens();\n \n             //register configured tokens\n             final int acceptableTokens[] \u003d aCheck.getAcceptableTokens();\n             Arrays.sort(acceptableTokens);\n             final Iterator it \u003d checkTokens.iterator();\n             while (it.hasNext()) {\n                 final String token \u003d (String) it.next();\n                 try {\n                     final int tokenId \u003d TokenTypes.getTokenId(token);\n                     if (Arrays.binarySearch(acceptableTokens, tokenId) \u003e\u003d 0) {\n                         registerCheck(token, aCheck);\n                     }\n                     // TODO: else log warning\n                 }\n-                catch (IllegalArgumentException ex) {\n+                catch (final IllegalArgumentException ex) {\n                     throw new CheckstyleException(\"illegal token \\\"\"\n                         + token + \"\\\" in check \" + aCheck, ex);\n                 }\n             }\n         }\n         else {\n             tokens \u003d aCheck.getDefaultTokens();\n         }\n         for (int i \u003d 0; i \u003c tokens.length; i++) {\n             registerCheck(tokens[i], aCheck);\n         }\n         mAllChecks.add(aCheck);\n     }\n\\ No newline at end of file\n"
    },
    "eeba08c1028a79bdc2140476b24ce8d60f04657a": {
      "type": "Ybodychange",
      "commitMessage": "CheckstyleException now supports nested exceptions\n",
      "commitDate": 1044387167000,
      "commitName": "eeba08c1028a79bdc2140476b24ce8d60f04657a",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": 1041927327000,
      "commitNameOld": "9074e6953f601352d6e0829ea67d194a1fdf4a1a",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 28.47,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     private void registerCheck(Check aCheck)\n         throws CheckstyleException\n     {\n         int[] tokens \u003d new int[] {}; //safety initialization\n         final Set checkTokens \u003d aCheck.getTokenNames();\n         if (!checkTokens.isEmpty()) {\n             tokens \u003d aCheck.getRequiredTokens();\n \n             //register configured tokens\n             final int acceptableTokens[] \u003d aCheck.getAcceptableTokens();\n             Arrays.sort(acceptableTokens);\n             final Iterator it \u003d checkTokens.iterator();\n             while (it.hasNext()) {\n                 final String token \u003d (String) it.next();\n                 try {\n                     final int tokenId \u003d TokenTypes.getTokenId(token);\n                     if (Arrays.binarySearch(acceptableTokens, tokenId) \u003e\u003d 0) {\n                         registerCheck(token, aCheck);\n                     }\n                     // TODO: else log warning\n                 }\n                 catch (IllegalArgumentException ex) {\n                     throw new CheckstyleException(\"illegal token \\\"\"\n-                        + token + \"\\\" in check \" + aCheck);\n+                        + token + \"\\\" in check \" + aCheck, ex);\n                 }\n             }\n         }\n         else {\n             tokens \u003d aCheck.getDefaultTokens();\n         }\n         for (int i \u003d 0; i \u003c tokens.length; i++) {\n             registerCheck(tokens[i], aCheck);\n         }\n         mAllChecks.add(aCheck);\n     }\n\\ No newline at end of file\n"
    },
    "2149a9c42dce7a3913cca83755c8f562b0442929": {
      "type": "Ybodychange",
      "commitMessage": "removed todo items that have already been resolved\n",
      "commitDate": 1040983106000,
      "commitName": "2149a9c42dce7a3913cca83755c8f562b0442929",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": 1040923304000,
      "commitNameOld": "2a71cac7e02c012add5e75f35aaf6aca7c561401",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 0.69,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     private void registerCheck(Check aCheck)\n         throws CheckstyleException\n     {\n         int[] tokens \u003d new int[] {}; //safety initialization\n         final Set checkTokens \u003d aCheck.getTokenNames();\n         if (!checkTokens.isEmpty()) {\n             tokens \u003d aCheck.getRequiredTokens();\n \n             //register configured tokens\n             final int acceptableTokens[] \u003d aCheck.getAcceptableTokens();\n             Arrays.sort(acceptableTokens);\n             final Iterator it \u003d checkTokens.iterator();\n             while (it.hasNext()) {\n                 final String token \u003d (String) it.next();\n                 try {\n                     final int tokenId \u003d TokenTypes.getTokenId(token);\n                     if (Arrays.binarySearch(acceptableTokens, tokenId) \u003e\u003d 0) {\n                         registerCheck(token, aCheck);\n                     }\n-                    // TODO: else error message?\n+                    // TODO: else log warning\n                 }\n                 catch (IllegalArgumentException ex) {\n                     throw new CheckstyleException(\"illegal token \\\"\"\n                         + token + \"\\\" in check \" + aCheck);\n                 }\n             }\n         }\n         else {\n             tokens \u003d aCheck.getDefaultTokens();\n         }\n         for (int i \u003d 0; i \u003c tokens.length; i++) {\n             registerCheck(tokens[i], aCheck);\n         }\n         mAllChecks.add(aCheck);\n     }\n\\ No newline at end of file\n"
    },
    "0dc5dd977b1cec9709a775c69979e6c6296d340b": {
      "type": "Ybodychange",
      "commitMessage": "allocate acceptable tokens only when necessary\n",
      "commitDate": 1040210342000,
      "commitName": "0dc5dd977b1cec9709a775c69979e6c6296d340b",
      "commitAuthor": "Rick Giles",
      "commitDateOld": 1040208936000,
      "commitNameOld": "95a5040ccc98d1138a82c9e0ebcfe983651219b6",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,35 @@\n     private void registerCheck(Check aCheck)\n         throws CheckstyleException\n     {\n-        int[] tokens \u003d aCheck.getDefaultTokens();\n+        int[] tokens \u003d new int[] {}; //safety initialization\n         final Set checkTokens \u003d aCheck.getTokenNames();\n         if (!checkTokens.isEmpty()) {\n             tokens \u003d aCheck.getRequiredTokens();\n \n             //register configured tokens\n             final int acceptableTokens[] \u003d aCheck.getAcceptableTokens();\n             Arrays.sort(acceptableTokens);\n             final Iterator it \u003d checkTokens.iterator();\n             while (it.hasNext()) {\n                 final String token \u003d (String) it.next();\n                 try {\n                     final int tokenId \u003d TokenTypes.getTokenId(token);\n                     if (Arrays.binarySearch(acceptableTokens, tokenId) \u003e\u003d 0) {\n                         registerCheck(token, aCheck);\n                     }\n                     // TODO: else error message?\n                 }\n                 catch (IllegalArgumentException ex) {\n                     throw new CheckstyleException(\"illegal token \\\"\"\n                         + token + \"\\\" in check \" + aCheck);\n                 }\n             }\n         }\n+        else {\n+            tokens \u003d aCheck.getDefaultTokens();\n+        }\n         for (int i \u003d 0; i \u003c tokens.length; i++) {\n             registerCheck(tokens[i], aCheck);\n         }\n         mAllChecks.add(aCheck);\n     }\n\\ No newline at end of file\n"
    },
    "95a5040ccc98d1138a82c9e0ebcfe983651219b6": {
      "type": "Ybodychange",
      "commitMessage": "Added required tokens.\n",
      "commitDate": 1040208936000,
      "commitName": "95a5040ccc98d1138a82c9e0ebcfe983651219b6",
      "commitAuthor": "Rick Giles",
      "commitDateOld": 1040020006000,
      "commitNameOld": "88e89a138aa39f50f7642106cde6568f6e07783f",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 2.19,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,32 @@\n     private void registerCheck(Check aCheck)\n         throws CheckstyleException\n     {\n+        int[] tokens \u003d aCheck.getDefaultTokens();\n         final Set checkTokens \u003d aCheck.getTokenNames();\n         if (!checkTokens.isEmpty()) {\n+            tokens \u003d aCheck.getRequiredTokens();\n+\n+            //register configured tokens\n             final int acceptableTokens[] \u003d aCheck.getAcceptableTokens();\n             Arrays.sort(acceptableTokens);\n             final Iterator it \u003d checkTokens.iterator();\n             while (it.hasNext()) {\n                 final String token \u003d (String) it.next();\n                 try {\n                     final int tokenId \u003d TokenTypes.getTokenId(token);\n                     if (Arrays.binarySearch(acceptableTokens, tokenId) \u003e\u003d 0) {\n                         registerCheck(token, aCheck);\n                     }\n                     // TODO: else error message?\n                 }\n                 catch (IllegalArgumentException ex) {\n                     throw new CheckstyleException(\"illegal token \\\"\"\n                         + token + \"\\\" in check \" + aCheck);\n                 }\n             }\n         }\n-        else {\n-            final int[] tokens \u003d aCheck.getDefaultTokens();\n-            for (int i \u003d 0; i \u003c tokens.length; i++) {\n-                registerCheck(tokens[i], aCheck);\n-            }\n+        for (int i \u003d 0; i \u003c tokens.length; i++) {\n+            registerCheck(tokens[i], aCheck);\n         }\n         mAllChecks.add(aCheck);\n     }\n\\ No newline at end of file\n"
    },
    "b3caa3b7ad0a135038c2c1c5bda4fccb897a00c4": {
      "type": "Ymodifierchange",
      "commitMessage": "Fix bug where init/destroy not called for Checks.\n",
      "commitDate": 1039666751000,
      "commitName": "b3caa3b7ad0a135038c2c1c5bda4fccb897a00c4",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1039547615000,
      "commitNameOld": "08d6efe49d2960d9bd61bfb9cca65910f0c19b58",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 1.38,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n-    void registerCheck(Check aCheck)\n-           throws CheckstyleException\n+    private void registerCheck(Check aCheck)\n+        throws CheckstyleException\n     {\n         final Set checkTokens \u003d aCheck.getTokenNames();\n         if (!checkTokens.isEmpty()) {\n             final int acceptableTokens[] \u003d aCheck.getAcceptableTokens();\n             Arrays.sort(acceptableTokens);\n             final Iterator it \u003d checkTokens.iterator();\n             while (it.hasNext()) {\n                 final String token \u003d (String) it.next();\n                 try {\n                     final int tokenId \u003d TokenTypes.getTokenId(token);\n                     if (Arrays.binarySearch(acceptableTokens, tokenId) \u003e\u003d 0) {\n                         registerCheck(token, aCheck);\n                     }\n                     // TODO: else error message?\n                 }\n                 catch (IllegalArgumentException ex) {\n                     throw new CheckstyleException(\"illegal token \\\"\"\n                         + token + \"\\\" in check \" + aCheck);\n                 }\n             }\n         }\n         else {\n             final int[] tokens \u003d aCheck.getDefaultTokens();\n             for (int i \u003d 0; i \u003c tokens.length; i++) {\n                 registerCheck(tokens[i], aCheck);\n             }\n         }\n         mAllChecks.add(aCheck);\n     }\n\\ No newline at end of file\n"
    },
    "64daa21b1c30061bba4c0d030f4df913f53c4f17": {
      "type": "Ybodychange",
      "commitMessage": "Cosmetic changes - but unable to run the tests to see if I\nbroke anything. :-(\n",
      "commitDate": 1039134694000,
      "commitName": "64daa21b1c30061bba4c0d030f4df913f53c4f17",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1039133445000,
      "commitNameOld": "5ce7d2562fa583fdb812c6742b1198d0c99ccd6a",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n     void registerCheck(Check aCheck)\n            throws CheckstyleException\n     {\n         final Set checkTokens \u003d aCheck.getTokenNames();\n         if (!checkTokens.isEmpty()) {\n-            int acceptableTokens[] \u003d aCheck.getAcceptableTokens();\n+            final int acceptableTokens[] \u003d aCheck.getAcceptableTokens();\n             Arrays.sort(acceptableTokens);\n             final Iterator it \u003d checkTokens.iterator();\n             while (it.hasNext()) {\n                 final String token \u003d (String) it.next();\n                 try {\n-                    int tokenId \u003d TokenTypes.getTokenId(token);                    \n+                    final int tokenId \u003d TokenTypes.getTokenId(token);                    \n                     if (Arrays.binarySearch(acceptableTokens, tokenId) \u003e\u003d 0) {\n                         registerCheck(token, aCheck);\n                     }\n                     // TODO: else error message?\n                 }\n                 catch (IllegalArgumentException ex) {\n                     throw new CheckstyleException(\"illegal token \\\"\"\n                         + token + \"\\\" in check \" + aCheck);\n                 }\n             }\n         }\n         else {\n             final int[] tokens \u003d aCheck.getDefaultTokens();\n             for (int i \u003d 0; i \u003c tokens.length; i++) {\n                 registerCheck(tokens[i], aCheck);\n             }\n         }\n         mAllChecks.add(aCheck);\n     }\n\\ No newline at end of file\n"
    },
    "5ce7d2562fa583fdb812c6742b1198d0c99ccd6a": {
      "type": "Ybodychange",
      "commitMessage": "Improved exception message for the case that a registering\nCheck has an invalid token.\n",
      "commitDate": 1039133445000,
      "commitName": "5ce7d2562fa583fdb812c6742b1198d0c99ccd6a",
      "commitAuthor": "Rick Giles",
      "commitDateOld": 1039121857000,
      "commitNameOld": "06f9b6d2558f73962f2e7d984001db0086819c1d",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,31 @@\n     void registerCheck(Check aCheck)\n            throws CheckstyleException\n     {\n         final Set checkTokens \u003d aCheck.getTokenNames();\n         if (!checkTokens.isEmpty()) {\n             int acceptableTokens[] \u003d aCheck.getAcceptableTokens();\n             Arrays.sort(acceptableTokens);\n             final Iterator it \u003d checkTokens.iterator();\n             while (it.hasNext()) {\n-                String token \u003d (String) it.next();\n-                int tokenId \u003d TokenTypes.getTokenId(token);\n-                if (Arrays.binarySearch(acceptableTokens, tokenId) \u003e\u003d 0) {\n-                    registerCheck(token, aCheck);\n+                final String token \u003d (String) it.next();\n+                try {\n+                    int tokenId \u003d TokenTypes.getTokenId(token);                    \n+                    if (Arrays.binarySearch(acceptableTokens, tokenId) \u003e\u003d 0) {\n+                        registerCheck(token, aCheck);\n+                    }\n+                    // TODO: else error message?\n                 }\n-                // TODO: else error message?\n+                catch (IllegalArgumentException ex) {\n+                    throw new CheckstyleException(\"illegal token \\\"\"\n+                        + token + \"\\\" in check \" + aCheck);\n+                }\n             }\n         }\n         else {\n             final int[] tokens \u003d aCheck.getDefaultTokens();\n             for (int i \u003d 0; i \u003c tokens.length; i++) {\n                 registerCheck(tokens[i], aCheck);\n             }\n         }\n         mAllChecks.add(aCheck);\n     }\n\\ No newline at end of file\n"
    },
    "a47526404dfcbf638b937ce8a35357151dc12369": {
      "type": "Ybodychange",
      "commitMessage": "rename Check.getTokens() to getTokenNames() so BeanUtils\ncan find the setter method and is not confused about\nthe type of the bean property\n",
      "commitDate": 1038739599000,
      "commitName": "a47526404dfcbf638b937ce8a35357151dc12369",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": 1038680984000,
      "commitNameOld": "6ffc8dd26075456b055ffcd35d3915c23049bfbb",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 0.68,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n     void registerCheck(Check aCheck)\n            throws CheckstyleException\n     {\n-        final Set checkTokens \u003d aCheck.getTokens();\n+        final Set checkTokens \u003d aCheck.getTokenNames();\n         if (!checkTokens.isEmpty()) {\n             int acceptableTokens[] \u003d aCheck.getAcceptableTokens();\n             Arrays.sort(acceptableTokens);\n             final Iterator it \u003d checkTokens.iterator();\n             while (it.hasNext()) {\n                 String token \u003d (String) it.next();\n                 int tokenId \u003d TokenTypes.getTokenId(token);\n                 if (Arrays.binarySearch(acceptableTokens, tokenId) \u003e\u003d 0) {\n                     registerCheck(token, aCheck);\n                 }\n                 // TODO: else error message?\n             }\n         }\n         else {\n             final int[] tokens \u003d aCheck.getDefaultTokens();\n             for (int i \u003d 0; i \u003c tokens.length; i++) {\n                 registerCheck(tokens[i], aCheck);\n             }\n         }\n         mAllChecks.add(aCheck);\n     }\n\\ No newline at end of file\n"
    },
    "6ffc8dd26075456b055ffcd35d3915c23049bfbb": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "avalonization\n",
      "commitDate": 1038680984000,
      "commitName": "6ffc8dd26075456b055ffcd35d3915c23049bfbb",
      "commitAuthor": "Lars Kühne",
      "subchanges": [
        "Yparameterchange",
        "Yexceptionschange",
        "Ybodychange"
      ]
    },
    "a2fded8ed742d341c47b818d79aaa90cc849273e": {
      "type": "Ybodychange",
      "commitMessage": "Added getAcceptableTokens to Check.\nPrevent registration for tokens the Check is not\ndesigned for\n",
      "commitDate": 1036219732000,
      "commitName": "a2fded8ed742d341c47b818d79aaa90cc849273e",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": 1035466470000,
      "commitNameOld": "7af9e82fc16545a8153b529fba91df0fb310e2e6",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 8.72,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,25 @@\n     void registerCheck(Check aCheck, CheckConfiguration aConfig)\n     {\n         aCheck.setMessages(mMessages);\n         aCheck.setTabWidth(mTabWidth);\n         if (!aConfig.getTokens().isEmpty()) {\n+            int acceptableTokens[] \u003d aCheck.getAcceptableTokens();\n+            Arrays.sort(acceptableTokens);\n             final Iterator it \u003d aConfig.getTokens().iterator();\n             while (it.hasNext()) {\n-                registerCheck((String) it.next(), aCheck);\n+                String token \u003d (String) it.next();\n+                int tokenId \u003d TokenTypes.getTokenId(token);\n+                if (Arrays.binarySearch(acceptableTokens, tokenId) \u003e\u003d 0) {\n+                    registerCheck(token, aCheck);\n+                }\n+                // TODO: else error message?\n             }\n         }\n         else {\n             final int[] tokens \u003d aCheck.getDefaultTokens();\n             for (int i \u003d 0; i \u003c tokens.length; i++) {\n                 registerCheck(tokens[i], aCheck);\n             }\n         }\n         mAllChecks.add(aCheck);\n     }\n\\ No newline at end of file\n"
    },
    "eb7b7bfd3e63a926c3f3b2801d519caa0e1fffc3": {
      "type": "Ybodychange",
      "commitMessage": "Major refactoring to support correct column numbers. Also removed all the old\ncode for whitespace checking around things. This required fixing the grammar\nto not consume COLON tokens. Looks like you are onto something Lars with your\nprevious email (made it easy to find the bug).\n",
      "commitDate": 1033462046000,
      "commitName": "eb7b7bfd3e63a926c3f3b2801d519caa0e1fffc3",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1033235208000,
      "commitNameOld": "d28a2aa39ef15132757260a5e0b3ec03d6ae28f3",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 2.63,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,18 @@\n     void registerCheck(Check aCheck, CheckConfiguration aConfig)\n     {\n         aCheck.setMessages(mMessages);\n+        aCheck.setTabWidth(mTabWidth);\n         if (!aConfig.getTokens().isEmpty()) {\n             final Iterator it \u003d aConfig.getTokens().iterator();\n             while (it.hasNext()) {\n                 registerCheck((String) it.next(), aCheck);\n             }\n         }\n         else {\n             final int[] tokens \u003d aCheck.getDefaultTokens();\n             for (int i \u003d 0; i \u003c tokens.length; i++) {\n                 registerCheck(tokens[i], aCheck);\n             }\n         }\n         mAllChecks.add(aCheck);\n     }\n\\ No newline at end of file\n"
    },
    "d28a2aa39ef15132757260a5e0b3ec03d6ae28f3": {
      "type": "Ybodychange",
      "commitMessage": "Call the lifecycle methods (beginTree, ...) of a\nCheck even if the Check does not visit any tokens.\n\nThis is required for Checks that do not operate on\nthe parse tree, e.g. the Header Checks\n",
      "commitDate": 1033235208000,
      "commitName": "d28a2aa39ef15132757260a5e0b3ec03d6ae28f3",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": 1033108888000,
      "commitNameOld": "d077a402da51bb238a7da99d5e2542437b145192",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 1.46,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,17 @@\n     void registerCheck(Check aCheck, CheckConfiguration aConfig)\n     {\n         aCheck.setMessages(mMessages);\n         if (!aConfig.getTokens().isEmpty()) {\n             final Iterator it \u003d aConfig.getTokens().iterator();\n             while (it.hasNext()) {\n                 registerCheck((String) it.next(), aCheck);\n             }\n         }\n         else {\n             final int[] tokens \u003d aCheck.getDefaultTokens();\n             for (int i \u003d 0; i \u003c tokens.length; i++) {\n                 registerCheck(tokens[i], aCheck);\n             }\n         }\n+        mAllChecks.add(aCheck);\n     }\n\\ No newline at end of file\n"
    },
    "7e570084e62eda58f3c4fa7e75e26a1a41d255cf": {
      "type": "Ybodychange",
      "commitMessage": "Nearly for the first test to run. Having problems with loading resource\nbundles.\n",
      "commitDate": 1032616141000,
      "commitName": "7e570084e62eda58f3c4fa7e75e26a1a41d255cf",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1032266010000,
      "commitNameOld": "672b27dd5551de63a1fb08d8ea80376d70f2aa60",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 4.05,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,16 @@\n     void registerCheck(Check aCheck, CheckConfiguration aConfig)\n     {\n+        aCheck.setMessages(mMessages);\n         if (!aConfig.getTokens().isEmpty()) {\n             final Iterator it \u003d aConfig.getTokens().iterator();\n             while (it.hasNext()) {\n                 registerCheck((String) it.next(), aCheck);\n             }\n         }\n         else {\n             final int[] tokens \u003d aCheck.getDefaultTokens();\n             for (int i \u003d 0; i \u003c tokens.length; i++) {\n                 registerCheck(tokens[i], aCheck);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "19257b2cdb950aac0b729ee8a3a979e5605163f9": {
      "type": "Yintroduced",
      "commitMessage": "Added the tree walker (with all the bugs hopefully marked with TODO:\ncomments). Currently keeping the old grammars around so we can checkstyle the\nnew checkstyle will old version. Kind of a version of boot strapping. :-)\n",
      "commitDate": 1032093857000,
      "commitName": "19257b2cdb950aac0b729ee8a3a979e5605163f9",
      "commitAuthor": "Oliver Burn"
    }
  }
}