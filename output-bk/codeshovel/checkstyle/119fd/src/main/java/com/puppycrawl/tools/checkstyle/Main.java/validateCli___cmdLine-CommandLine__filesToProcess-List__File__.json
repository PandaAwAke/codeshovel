{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "Main.java",
  "functionName": "validateCli",
  "functionId": "validateCli___cmdLine-CommandLine__filesToProcess-List__File__",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
  "functionStartLine": 292,
  "functionEndLine": 348,
  "changeHistory": [
    "036582d728d2e2bb37f360bb3a74f899f04d587d",
    "980e53562ac1f29d2d9e8c434ada60515e9890e5",
    "1549ea4822139938296a58f59c38ae14f633c5aa",
    "68b49fd2843f23f55dc711a89213d59f2acf3a0a",
    "25621a3c3391ddf4bc0bb56535d23e73cd293657",
    "1b72b4905bf3520aa47697cc7d1bcdad8b7ad1e6",
    "c225479c7d3a7b82fec7d26131ac27496d336853",
    "1c5d01c3b48ab48fcfb0e7f3764e98d46727870e",
    "8c3e4a50749044ae3177fc4c84db9c4fd93abca2",
    "86826e1fa3fe3d793ee4723bb84ee0fc4ca38df1",
    "88f75f5413914bea5b39ba318edf912ee706226d",
    "bff2e1754acddcbf199986d8796e88fb7bf7bf25",
    "3004b4d8810fae5956864d1493ea94f183b9442c",
    "8a3ccee4918bc1ce5f6bc2dfea51389a59684eb0",
    "1a2c318e22a0b2b22ccc76019217c0892fe2d59b"
  ],
  "changeHistoryShort": {
    "036582d728d2e2bb37f360bb3a74f899f04d587d": "Ybodychange",
    "980e53562ac1f29d2d9e8c434ada60515e9890e5": "Ybodychange",
    "1549ea4822139938296a58f59c38ae14f633c5aa": "Ybodychange",
    "68b49fd2843f23f55dc711a89213d59f2acf3a0a": "Ybodychange",
    "25621a3c3391ddf4bc0bb56535d23e73cd293657": "Ybodychange",
    "1b72b4905bf3520aa47697cc7d1bcdad8b7ad1e6": "Ymultichange(Yparameterchange,Ybodychange)",
    "c225479c7d3a7b82fec7d26131ac27496d336853": "Ybodychange",
    "1c5d01c3b48ab48fcfb0e7f3764e98d46727870e": "Ybodychange",
    "8c3e4a50749044ae3177fc4c84db9c4fd93abca2": "Ybodychange",
    "86826e1fa3fe3d793ee4723bb84ee0fc4ca38df1": "Ybodychange",
    "88f75f5413914bea5b39ba318edf912ee706226d": "Ybodychange",
    "bff2e1754acddcbf199986d8796e88fb7bf7bf25": "Ybodychange",
    "3004b4d8810fae5956864d1493ea94f183b9442c": "Ybodychange",
    "8a3ccee4918bc1ce5f6bc2dfea51389a59684eb0": "Ybodychange",
    "1a2c318e22a0b2b22ccc76019217c0892fe2d59b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "036582d728d2e2bb37f360bb3a74f899f04d587d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4370: Add multi thread mode to checkstyle launcher\n",
      "commitDate": 1499049797000,
      "commitName": "036582d728d2e2bb37f360bb3a74f899f04d587d",
      "commitAuthor": "Andrew Kuchev",
      "commitDateOld": 1497909220000,
      "commitNameOld": "fe7655e7d82152b57fd68d37df621d22b47132ad",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 13.2,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,57 @@\n     private static List\u003cString\u003e validateCli(CommandLine cmdLine, List\u003cFile\u003e filesToProcess) {\n         final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n \n         if (filesToProcess.isEmpty()) {\n             result.add(\"Files to process must be specified, found 0.\");\n         }\n         // ensure there is no conflicting options\n         else if (cmdLine.hasOption(OPTION_T_NAME) || cmdLine.hasOption(OPTION_CAPITAL_T_NAME)\n                 || cmdLine.hasOption(OPTION_J_NAME) || cmdLine.hasOption(OPTION_CAPITAL_J_NAME)) {\n             if (cmdLine.hasOption(OPTION_C_NAME) || cmdLine.hasOption(OPTION_P_NAME)\n                     || cmdLine.hasOption(OPTION_F_NAME) || cmdLine.hasOption(OPTION_O_NAME)) {\n                 result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n             }\n             else if (filesToProcess.size() \u003e 1) {\n                 result.add(\"Printing AST is allowed for only one file.\");\n             }\n         }\n         // ensure a configuration file is specified\n         else if (cmdLine.hasOption(OPTION_C_NAME)) {\n             final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n             try {\n                 // test location only\n                 CommonUtils.getUriByFilename(configLocation);\n             }\n             catch (CheckstyleException ignored) {\n                 result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n             }\n \n             // validate optional parameters\n             if (cmdLine.hasOption(OPTION_F_NAME)) {\n                 final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n                 if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                     result.add(String.format(\"Invalid output format.\"\n                             + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n                             format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                 }\n             }\n             if (cmdLine.hasOption(OPTION_P_NAME)) {\n                 final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                 final File file \u003d new File(propertiesLocation);\n                 if (!file.exists()) {\n                     result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                 }\n             }\n+            verifyThreadsNumberParameter(cmdLine, result, OPTION_CAPITAL_C_NAME,\n+                \"Checker threads number must be greater than zero\",\n+                \"Invalid Checker threads number\");\n+            verifyThreadsNumberParameter(cmdLine, result, OPTION_CAPITAL_W_NAME,\n+                \"TreeWalker threads number must be greater than zero\",\n+                \"Invalid TreeWalker threads number\");\n         }\n         else {\n             result.add(\"Must specify a config XML file.\");\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "980e53562ac1f29d2d9e8c434ada60515e9890e5": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3177: Remove validation of rw access for output file in Main#validateCli (#3284)\n\n",
      "commitDate": 1466185694000,
      "commitName": "980e53562ac1f29d2d9e8c434ada60515e9890e5",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": 1464355091000,
      "commitNameOld": "a6ab6053e6b3d421d19764418cba3858c683e6e8",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 21.19,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,51 @@\n     private static List\u003cString\u003e validateCli(CommandLine cmdLine, List\u003cFile\u003e filesToProcess) {\n         final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n \n         if (filesToProcess.isEmpty()) {\n             result.add(\"Files to process must be specified, found 0.\");\n         }\n         // ensure there is no conflicting options\n         else if (cmdLine.hasOption(OPTION_T_NAME) || cmdLine.hasOption(OPTION_CAPITAL_T_NAME)\n                 || cmdLine.hasOption(OPTION_J_NAME) || cmdLine.hasOption(OPTION_CAPITAL_J_NAME)) {\n             if (cmdLine.hasOption(OPTION_C_NAME) || cmdLine.hasOption(OPTION_P_NAME)\n                     || cmdLine.hasOption(OPTION_F_NAME) || cmdLine.hasOption(OPTION_O_NAME)) {\n                 result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n             }\n             else if (filesToProcess.size() \u003e 1) {\n                 result.add(\"Printing AST is allowed for only one file.\");\n             }\n         }\n         // ensure a configuration file is specified\n         else if (cmdLine.hasOption(OPTION_C_NAME)) {\n             final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n             try {\n                 // test location only\n                 CommonUtils.getUriByFilename(configLocation);\n             }\n             catch (CheckstyleException ignored) {\n                 result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n             }\n \n             // validate optional parameters\n             if (cmdLine.hasOption(OPTION_F_NAME)) {\n                 final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n                 if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                     result.add(String.format(\"Invalid output format.\"\n                             + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n                             format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                 }\n             }\n             if (cmdLine.hasOption(OPTION_P_NAME)) {\n                 final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                 final File file \u003d new File(propertiesLocation);\n                 if (!file.exists()) {\n                     result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                 }\n             }\n-            if (cmdLine.hasOption(OPTION_O_NAME)) {\n-                final String outputLocation \u003d cmdLine.getOptionValue(OPTION_O_NAME);\n-                final File file \u003d new File(outputLocation);\n-                if (file.exists() \u0026\u0026 !file.canWrite()) {\n-                    result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n-                }\n-            }\n         }\n         else {\n             result.add(\"Must specify a config XML file.\");\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "1549ea4822139938296a58f59c38ae14f633c5aa": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3040: New CLI option to print full tree (java+comments+javadoc). (#3078)",
      "commitDate": 1460322482000,
      "commitName": "1549ea4822139938296a58f59c38ae14f633c5aa",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": 1458220789000,
      "commitNameOld": "68b49fd2843f23f55dc711a89213d59f2acf3a0a",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 24.33,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n     private static List\u003cString\u003e validateCli(CommandLine cmdLine, List\u003cFile\u003e filesToProcess) {\n         final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n \n         if (filesToProcess.isEmpty()) {\n             result.add(\"Files to process must be specified, found 0.\");\n         }\n         // ensure there is no conflicting options\n         else if (cmdLine.hasOption(OPTION_T_NAME) || cmdLine.hasOption(OPTION_CAPITAL_T_NAME)\n-                || cmdLine.hasOption(OPTION_J_NAME)) {\n+                || cmdLine.hasOption(OPTION_J_NAME) || cmdLine.hasOption(OPTION_CAPITAL_J_NAME)) {\n             if (cmdLine.hasOption(OPTION_C_NAME) || cmdLine.hasOption(OPTION_P_NAME)\n                     || cmdLine.hasOption(OPTION_F_NAME) || cmdLine.hasOption(OPTION_O_NAME)) {\n                 result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n             }\n             else if (filesToProcess.size() \u003e 1) {\n                 result.add(\"Printing AST is allowed for only one file.\");\n             }\n         }\n         // ensure a configuration file is specified\n         else if (cmdLine.hasOption(OPTION_C_NAME)) {\n             final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n             try {\n                 // test location only\n                 CommonUtils.getUriByFilename(configLocation);\n             }\n             catch (CheckstyleException ignored) {\n                 result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n             }\n \n             // validate optional parameters\n             if (cmdLine.hasOption(OPTION_F_NAME)) {\n                 final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n                 if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                     result.add(String.format(\"Invalid output format.\"\n                             + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n                             format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                 }\n             }\n             if (cmdLine.hasOption(OPTION_P_NAME)) {\n                 final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                 final File file \u003d new File(propertiesLocation);\n                 if (!file.exists()) {\n                     result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                 }\n             }\n             if (cmdLine.hasOption(OPTION_O_NAME)) {\n                 final String outputLocation \u003d cmdLine.getOptionValue(OPTION_O_NAME);\n                 final File file \u003d new File(outputLocation);\n                 if (file.exists() \u0026\u0026 !file.canWrite()) {\n                     result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                 }\n             }\n         }\n         else {\n             result.add(\"Must specify a config XML file.\");\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "68b49fd2843f23f55dc711a89213d59f2acf3a0a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #652: New CLI option to print Javadoc comment parse tree\n",
      "commitDate": 1458220789000,
      "commitName": "68b49fd2843f23f55dc711a89213d59f2acf3a0a",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": 1456240030000,
      "commitNameOld": "25621a3c3391ddf4bc0bb56535d23e73cd293657",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 22.93,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,58 @@\n     private static List\u003cString\u003e validateCli(CommandLine cmdLine, List\u003cFile\u003e filesToProcess) {\n         final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n \n         if (filesToProcess.isEmpty()) {\n             result.add(\"Files to process must be specified, found 0.\");\n         }\n         // ensure there is no conflicting options\n-        else if (cmdLine.hasOption(OPTION_T_NAME) || cmdLine.hasOption(OPTION_CAPITAL_T_NAME)) {\n+        else if (cmdLine.hasOption(OPTION_T_NAME) || cmdLine.hasOption(OPTION_CAPITAL_T_NAME)\n+                || cmdLine.hasOption(OPTION_J_NAME)) {\n             if (cmdLine.hasOption(OPTION_C_NAME) || cmdLine.hasOption(OPTION_P_NAME)\n                     || cmdLine.hasOption(OPTION_F_NAME) || cmdLine.hasOption(OPTION_O_NAME)) {\n                 result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n             }\n             else if (filesToProcess.size() \u003e 1) {\n                 result.add(\"Printing AST is allowed for only one file.\");\n             }\n         }\n         // ensure a configuration file is specified\n         else if (cmdLine.hasOption(OPTION_C_NAME)) {\n             final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n             try {\n                 // test location only\n                 CommonUtils.getUriByFilename(configLocation);\n             }\n             catch (CheckstyleException ignored) {\n                 result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n             }\n \n             // validate optional parameters\n             if (cmdLine.hasOption(OPTION_F_NAME)) {\n                 final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n                 if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                     result.add(String.format(\"Invalid output format.\"\n                             + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n                             format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                 }\n             }\n             if (cmdLine.hasOption(OPTION_P_NAME)) {\n                 final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                 final File file \u003d new File(propertiesLocation);\n                 if (!file.exists()) {\n                     result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                 }\n             }\n             if (cmdLine.hasOption(OPTION_O_NAME)) {\n                 final String outputLocation \u003d cmdLine.getOptionValue(OPTION_O_NAME);\n                 final File file \u003d new File(outputLocation);\n                 if (file.exists() \u0026\u0026 !file.canWrite()) {\n                     result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                 }\n             }\n         }\n         else {\n             result.add(\"Must specify a config XML file.\");\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "25621a3c3391ddf4bc0bb56535d23e73cd293657": {
      "type": "Ybodychange",
      "commitMessage": "Issue #652: New option to print AST with comment nodes.\n",
      "commitDate": 1456240030000,
      "commitName": "25621a3c3391ddf4bc0bb56535d23e73cd293657",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": 1455113230000,
      "commitNameOld": "1b72b4905bf3520aa47697cc7d1bcdad8b7ad1e6",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 13.04,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n     private static List\u003cString\u003e validateCli(CommandLine cmdLine, List\u003cFile\u003e filesToProcess) {\n         final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n \n         if (filesToProcess.isEmpty()) {\n             result.add(\"Files to process must be specified, found 0.\");\n         }\n         // ensure there is no conflicting options\n-        else if (cmdLine.hasOption(OPTION_T_NAME)) {\n+        else if (cmdLine.hasOption(OPTION_T_NAME) || cmdLine.hasOption(OPTION_CAPITAL_T_NAME)) {\n             if (cmdLine.hasOption(OPTION_C_NAME) || cmdLine.hasOption(OPTION_P_NAME)\n                     || cmdLine.hasOption(OPTION_F_NAME) || cmdLine.hasOption(OPTION_O_NAME)) {\n                 result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n             }\n             else if (filesToProcess.size() \u003e 1) {\n                 result.add(\"Printing AST is allowed for only one file.\");\n             }\n         }\n         // ensure a configuration file is specified\n         else if (cmdLine.hasOption(OPTION_C_NAME)) {\n             final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n             try {\n                 // test location only\n                 CommonUtils.getUriByFilename(configLocation);\n             }\n             catch (CheckstyleException ignored) {\n                 result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n             }\n \n             // validate optional parameters\n             if (cmdLine.hasOption(OPTION_F_NAME)) {\n                 final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n                 if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                     result.add(String.format(\"Invalid output format.\"\n                             + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n                             format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                 }\n             }\n             if (cmdLine.hasOption(OPTION_P_NAME)) {\n                 final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                 final File file \u003d new File(propertiesLocation);\n                 if (!file.exists()) {\n                     result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                 }\n             }\n             if (cmdLine.hasOption(OPTION_O_NAME)) {\n                 final String outputLocation \u003d cmdLine.getOptionValue(OPTION_O_NAME);\n                 final File file \u003d new File(outputLocation);\n                 if (file.exists() \u0026\u0026 !file.canWrite()) {\n                     result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                 }\n             }\n         }\n         else {\n             result.add(\"Must specify a config XML file.\");\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "1b72b4905bf3520aa47697cc7d1bcdad8b7ad1e6": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Issue #2103: removed excess file gathering in main",
      "commitDate": 1455113230000,
      "commitName": "1b72b4905bf3520aa47697cc7d1bcdad8b7ad1e6",
      "commitAuthor": "rnveach",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "c225479c7d3a7b82fec7d26131ac27496d336853": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2638: Print parse tree from CLI to terminal\n",
      "commitDate": 1454581973000,
      "commitName": "c225479c7d3a7b82fec7d26131ac27496d336853",
      "commitAuthor": "Vladislav Lisetskiy",
      "commitDateOld": 1453646135000,
      "commitNameOld": "0d8e93ce79ea33b72b3e904d8796984271ee3d8d",
      "commitAuthorOld": "Bhavik Patel",
      "daysBetweenCommits": 10.83,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,58 @@\n     private static List\u003cString\u003e validateCli(CommandLine cmdLine) {\n         final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n+        final List\u003cFile\u003e filesToProcess \u003d getFilesToProcess(cmdLine.getArgs());\n+\n+        if (filesToProcess.isEmpty()) {\n+            result.add(\"Files to process must be specified, found 0.\");\n+        }\n+        // ensure there is no conflicting options\n+        else if (cmdLine.hasOption(OPTION_T_NAME)) {\n+            if (cmdLine.hasOption(OPTION_C_NAME) || cmdLine.hasOption(OPTION_P_NAME)\n+                    || cmdLine.hasOption(OPTION_F_NAME) || cmdLine.hasOption(OPTION_O_NAME)) {\n+                result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n+            }\n+            else if (filesToProcess.size() \u003e 1) {\n+                result.add(\"Printing AST is allowed for only one file.\");\n+            }\n+        }\n         // ensure a configuration file is specified\n-        if (cmdLine.hasOption(OPTION_C_NAME)) {\n+        else if (cmdLine.hasOption(OPTION_C_NAME)) {\n             final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n             try {\n                 // test location only\n                 CommonUtils.getUriByFilename(configLocation);\n             }\n             catch (CheckstyleException ignored) {\n                 result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n             }\n \n             // validate optional parameters\n             if (cmdLine.hasOption(OPTION_F_NAME)) {\n                 final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n                 if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                     result.add(String.format(\"Invalid output format.\"\n                             + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n                             format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                 }\n             }\n             if (cmdLine.hasOption(OPTION_P_NAME)) {\n                 final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                 final File file \u003d new File(propertiesLocation);\n                 if (!file.exists()) {\n                     result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                 }\n             }\n             if (cmdLine.hasOption(OPTION_O_NAME)) {\n                 final String outputLocation \u003d cmdLine.getOptionValue(OPTION_O_NAME);\n                 final File file \u003d new File(outputLocation);\n                 if (file.exists() \u0026\u0026 !file.canWrite()) {\n                     result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                 }\n             }\n-            final List\u003cFile\u003e files \u003d getFilesToProcess(cmdLine.getArgs());\n-            if (files.isEmpty()) {\n-                result.add(\"Must specify files to process, found 0.\");\n-            }\n         }\n         else {\n             result.add(\"Must specify a config XML file.\");\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "1c5d01c3b48ab48fcfb0e7f3764e98d46727870e": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1267: validate existence of config file sooner",
      "commitDate": 1446559490000,
      "commitName": "1c5d01c3b48ab48fcfb0e7f3764e98d46727870e",
      "commitAuthor": "rnveach",
      "commitDateOld": 1446385952000,
      "commitNameOld": "f020066f8bdfb378df36904af3df8b5bc48858fd",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 2.01,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,47 @@\n     private static List\u003cString\u003e validateCli(CommandLine cmdLine) {\n         final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n         // ensure a configuration file is specified\n         if (cmdLine.hasOption(OPTION_C_NAME)) {\n+            final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n+            try {\n+                // test location only\n+                CommonUtils.getUriByFilename(configLocation);\n+            }\n+            catch (CheckstyleException ignored) {\n+                result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n+            }\n+\n             // validate optional parameters\n             if (cmdLine.hasOption(OPTION_F_NAME)) {\n                 final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n                 if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                     result.add(String.format(\"Invalid output format.\"\n                             + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n                             format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                 }\n             }\n             if (cmdLine.hasOption(OPTION_P_NAME)) {\n                 final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                 final File file \u003d new File(propertiesLocation);\n                 if (!file.exists()) {\n                     result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                 }\n             }\n             if (cmdLine.hasOption(OPTION_O_NAME)) {\n                 final String outputLocation \u003d cmdLine.getOptionValue(OPTION_O_NAME);\n                 final File file \u003d new File(outputLocation);\n                 if (file.exists() \u0026\u0026 !file.canWrite()) {\n                     result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                 }\n             }\n             final List\u003cFile\u003e files \u003d getFilesToProcess(cmdLine.getArgs());\n             if (files.isEmpty()) {\n                 result.add(\"Must specify files to process, found 0.\");\n             }\n         }\n         else {\n             result.add(\"Must specify a config XML file.\");\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "8c3e4a50749044ae3177fc4c84db9c4fd93abca2": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: MultipleStringLiterals violations partial fix\n",
      "commitDate": 1440504773000,
      "commitName": "8c3e4a50749044ae3177fc4c84db9c4fd93abca2",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": 1440042157000,
      "commitNameOld": "da6a8d083cb82a94707146de559911578f39affe",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 5.35,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,38 @@\n     private static List\u003cString\u003e validateCli(CommandLine cmdLine) {\n         final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n         // ensure a configuration file is specified\n-        if (cmdLine.hasOption(\"c\")) {\n+        if (cmdLine.hasOption(OPTION_C_NAME)) {\n             // validate optional parameters\n-            if (cmdLine.hasOption(\"f\")) {\n-                final String format \u003d cmdLine.getOptionValue(\"f\");\n-                if (!\"plain\".equals(format) \u0026\u0026 !\"xml\".equals(format)) {\n+            if (cmdLine.hasOption(OPTION_F_NAME)) {\n+                final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n+                if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                     result.add(String.format(\"Invalid output format.\"\n-                            + \" Found \u0027%s\u0027 but expected \u0027plain\u0027 or \u0027xml\u0027.\", format));\n+                            + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n+                            format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                 }\n             }\n-            if (cmdLine.hasOption(\"p\")) {\n-                final String propertiesLocation \u003d cmdLine.getOptionValue(\"p\");\n+            if (cmdLine.hasOption(OPTION_P_NAME)) {\n+                final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                 final File file \u003d new File(propertiesLocation);\n                 if (!file.exists()) {\n                     result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                 }\n             }\n-            if (cmdLine.hasOption(\"o\")) {\n-                final String outputLocation \u003d cmdLine.getOptionValue(\"o\");\n+            if (cmdLine.hasOption(OPTION_O_NAME)) {\n+                final String outputLocation \u003d cmdLine.getOptionValue(OPTION_O_NAME);\n                 final File file \u003d new File(outputLocation);\n                 if (file.exists() \u0026\u0026 !file.canWrite()) {\n                     result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                 }\n             }\n             final List\u003cFile\u003e files \u003d getFilesToProcess(cmdLine.getArgs());\n             if (files.isEmpty()) {\n                 result.add(\"Must specify files to process, found 0.\");\n             }\n         }\n         else {\n             result.add(\"Must specify a config XML file.\");\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "86826e1fa3fe3d793ee4723bb84ee0fc4ca38df1": {
      "type": "Ybodychange",
      "commitMessage": "Invert if statements with negated conditions. #1555\n\nFixes `NegatedIfElse` inspection violations.\n\nDescription:\n\u003eReports if statements which contain else branches and whose conditions are negated. Flipping the order of the if and else branches will usually increase the clarity of such statements.\n",
      "commitDate": 1439189206000,
      "commitName": "86826e1fa3fe3d793ee4723bb84ee0fc4ca38df1",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1439011412000,
      "commitNameOld": "186625600d7678f597f56aa6a83d4b0a89e1fe35",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 2.06,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     private static List\u003cString\u003e validateCli(CommandLine cmdLine) {\n         final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n         // ensure a configuration file is specified\n-        if (!cmdLine.hasOption(\"c\")) {\n-            result.add(\"Must specify a config XML file.\");\n-        }\n-        else {\n+        if (cmdLine.hasOption(\"c\")) {\n             // validate optional parameters\n             if (cmdLine.hasOption(\"f\")) {\n                 final String format \u003d cmdLine.getOptionValue(\"f\");\n                 if (!\"plain\".equals(format) \u0026\u0026 !\"xml\".equals(format)) {\n                     result.add(String.format(\"Invalid output format.\"\n                             + \" Found \u0027%s\u0027 but expected \u0027plain\u0027 or \u0027xml\u0027.\", format));\n                 }\n             }\n             if (cmdLine.hasOption(\"p\")) {\n                 final String propertiesLocation \u003d cmdLine.getOptionValue(\"p\");\n                 final File file \u003d new File(propertiesLocation);\n                 if (!file.exists()) {\n                     result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                 }\n             }\n             if (cmdLine.hasOption(\"o\")) {\n                 final String outputLocation \u003d cmdLine.getOptionValue(\"o\");\n                 final File file \u003d new File(outputLocation);\n                 if (file.exists() \u0026\u0026 !file.canWrite()) {\n                     result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                 }\n             }\n             final List\u003cFile\u003e files \u003d getFilesToProcess(cmdLine.getArgs());\n             if (files.isEmpty()) {\n                 result.add(\"Must specify files to process, found 0.\");\n             }\n         }\n+        else {\n+            result.add(\"Must specify a config XML file.\");\n+        }\n \n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "88f75f5413914bea5b39ba318edf912ee706226d": {
      "type": "Ybodychange",
      "commitMessage": "Investigate UTs failure to MainTest on Windows. #1510\n",
      "commitDate": 1438251815000,
      "commitName": "88f75f5413914bea5b39ba318edf912ee706226d",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": 1438154965000,
      "commitNameOld": "aaf39002ac7fa00b95f4719beca058f6f7445574",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.12,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     private static List\u003cString\u003e validateCli(CommandLine cmdLine) {\n         final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n         // ensure a configuration file is specified\n         if (!cmdLine.hasOption(\"c\")) {\n             result.add(\"Must specify a config XML file.\");\n         }\n         else {\n             // validate optional parameters\n             if (cmdLine.hasOption(\"f\")) {\n                 final String format \u003d cmdLine.getOptionValue(\"f\");\n                 if (!\"plain\".equals(format) \u0026\u0026 !\"xml\".equals(format)) {\n                     result.add(String.format(\"Invalid output format.\"\n                             + \" Found \u0027%s\u0027 but expected \u0027plain\u0027 or \u0027xml\u0027.\", format));\n                 }\n             }\n             if (cmdLine.hasOption(\"p\")) {\n                 final String propertiesLocation \u003d cmdLine.getOptionValue(\"p\");\n                 final File file \u003d new File(propertiesLocation);\n                 if (!file.exists()) {\n                     result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                 }\n             }\n             if (cmdLine.hasOption(\"o\")) {\n                 final String outputLocation \u003d cmdLine.getOptionValue(\"o\");\n                 final File file \u003d new File(outputLocation);\n-                if (file.exists() \u0026\u0026 !(file.canRead() \u0026\u0026 file.canWrite())) {\n+                if (file.exists() \u0026\u0026 !file.canWrite()) {\n                     result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                 }\n             }\n             final List\u003cFile\u003e files \u003d getFilesToProcess(cmdLine.getArgs());\n             if (files.isEmpty()) {\n                 result.add(\"Must specify files to process, found 0.\");\n             }\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "bff2e1754acddcbf199986d8796e88fb7bf7bf25": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"Checking existance of config file before processing target file.\", due to #1267\n\nThis reverts commit 3004b4d8810fae5956864d1493ea94f183b9442c.\n",
      "commitDate": 1435720232000,
      "commitName": "bff2e1754acddcbf199986d8796e88fb7bf7bf25",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": 1434292672000,
      "commitNameOld": "4299a4b408304cd0bcad6c25b4a322dbd94169a3",
      "commitAuthorOld": "Bhavik Patel",
      "daysBetweenCommits": 16.52,
      "commitsBetweenForRepo": 103,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,37 @@\n     private static List\u003cString\u003e validateCli(CommandLine cmdLine) {\n         final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n         // ensure a configuration file is specified\n-        if (cmdLine.hasOption(\"c\")) {\n-            final String configLocation \u003d cmdLine.getOptionValue(\"c\");\n-            final File configFile \u003d  new File(configLocation);\n-            if (!configFile.exists()) {\n-                result.add(String.format(\"unable to find \u0027%s\u0027.\", configLocation));\n-            }\n-\n+        if (!cmdLine.hasOption(\"c\")) {\n+            result.add(\"Must specify a config XML file.\");\n+        }\n+        else {\n             // validate optional parameters\n             if (cmdLine.hasOption(\"f\")) {\n                 final String format \u003d cmdLine.getOptionValue(\"f\");\n                 if (!\"plain\".equals(format) \u0026\u0026 !\"xml\".equals(format)) {\n                     result.add(String.format(\"Invalid output format.\"\n                             + \" Found \u0027%s\u0027 but expected \u0027plain\u0027 or \u0027xml\u0027.\", format));\n                 }\n             }\n-\n             if (cmdLine.hasOption(\"p\")) {\n                 final String propertiesLocation \u003d cmdLine.getOptionValue(\"p\");\n                 final File file \u003d new File(propertiesLocation);\n                 if (!file.exists()) {\n                     result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                 }\n             }\n-\n             if (cmdLine.hasOption(\"o\")) {\n                 final String outputLocation \u003d cmdLine.getOptionValue(\"o\");\n                 final File file \u003d new File(outputLocation);\n                 if (file.exists() \u0026\u0026 !(file.canRead() \u0026\u0026 file.canWrite())) {\n                     result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                 }\n             }\n-\n             final List\u003cFile\u003e files \u003d getFilesToProcess(cmdLine.getArgs());\n             if (files.isEmpty()) {\n                 result.add(\"Must specify files to process, found 0.\");\n             }\n         }\n-        else {\n-            result.add(\"Must specify a config XML file.\");\n-        }\n \n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "3004b4d8810fae5956864d1493ea94f183b9442c": {
      "type": "Ybodychange",
      "commitMessage": "Checking existance of config file before processing target file.\n",
      "commitDate": 1434210109000,
      "commitName": "3004b4d8810fae5956864d1493ea94f183b9442c",
      "commitAuthor": "Bhavik Patel",
      "commitDateOld": 1433788956000,
      "commitNameOld": "fe6db3ab8a864e11eebfb0496f6a41852bdee019",
      "commitAuthorOld": "Bhavik Patel",
      "daysBetweenCommits": 4.87,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,46 @@\n     private static List\u003cString\u003e validateCli(CommandLine cmdLine) {\n         final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n         // ensure a configuration file is specified\n-        if (!cmdLine.hasOption(\"c\")) {\n-            result.add(\"Must specify a config XML file.\");\n-        }\n-        else {\n+        if (cmdLine.hasOption(\"c\")) {\n+            final String configLocation \u003d cmdLine.getOptionValue(\"c\");\n+            final File configFile \u003d  new File(configLocation);\n+            if (!configFile.exists()) {\n+                result.add(String.format(\"unable to find \u0027%s\u0027.\", configLocation));\n+            }\n+\n             // validate optional parameters\n             if (cmdLine.hasOption(\"f\")) {\n                 final String format \u003d cmdLine.getOptionValue(\"f\");\n                 if (!\"plain\".equals(format) \u0026\u0026 !\"xml\".equals(format)) {\n                     result.add(String.format(\"Invalid output format.\"\n                             + \" Found \u0027%s\u0027 but expected \u0027plain\u0027 or \u0027xml\u0027.\", format));\n                 }\n             }\n+\n             if (cmdLine.hasOption(\"p\")) {\n                 final String propertiesLocation \u003d cmdLine.getOptionValue(\"p\");\n                 final File file \u003d new File(propertiesLocation);\n                 if (!file.exists()) {\n                     result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                 }\n             }\n+\n             if (cmdLine.hasOption(\"o\")) {\n                 final String outputLocation \u003d cmdLine.getOptionValue(\"o\");\n                 final File file \u003d new File(outputLocation);\n                 if (file.exists() \u0026\u0026 !(file.canRead() \u0026\u0026 file.canWrite())) {\n                     result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                 }\n             }\n+\n             final List\u003cFile\u003e files \u003d getFilesToProcess(cmdLine.getArgs());\n             if (files.isEmpty()) {\n                 result.add(\"Must specify files to process, found 0.\");\n             }\n         }\n+        else {\n+            result.add(\"Must specify a config XML file.\");\n+        }\n \n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "8a3ccee4918bc1ce5f6bc2dfea51389a59684eb0": {
      "type": "Ybodychange",
      "commitMessage": "solution to CLI fails when it could not find output file. solves #1181\n",
      "commitDate": 1433691729000,
      "commitName": "8a3ccee4918bc1ce5f6bc2dfea51389a59684eb0",
      "commitAuthor": "Bhavik Patel",
      "commitDateOld": 1432246567000,
      "commitNameOld": "f786378e2325aaa95974d70b7df07f8dc109648e",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 16.73,
      "commitsBetweenForRepo": 81,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     private static List\u003cString\u003e validateCli(CommandLine cmdLine) {\n         final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n         // ensure a configuration file is specified\n         if (!cmdLine.hasOption(\"c\")) {\n             result.add(\"Must specify a config XML file.\");\n         }\n         else {\n             // validate optional parameters\n             if (cmdLine.hasOption(\"f\")) {\n                 final String format \u003d cmdLine.getOptionValue(\"f\");\n                 if (!\"plain\".equals(format) \u0026\u0026 !\"xml\".equals(format)) {\n                     result.add(String.format(\"Invalid output format.\"\n                             + \" Found \u0027%s\u0027 but expected \u0027plain\u0027 or \u0027xml\u0027.\", format));\n                 }\n             }\n             if (cmdLine.hasOption(\"p\")) {\n                 final String propertiesLocation \u003d cmdLine.getOptionValue(\"p\");\n                 final File file \u003d new File(propertiesLocation);\n                 if (!file.exists()) {\n                     result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                 }\n             }\n             if (cmdLine.hasOption(\"o\")) {\n                 final String outputLocation \u003d cmdLine.getOptionValue(\"o\");\n                 final File file \u003d new File(outputLocation);\n-                if (!file.exists()) {\n-                    result.add(String.format(\"Could not find file \u0027%s\u0027.\", outputLocation));\n+                if (file.exists() \u0026\u0026 !(file.canRead() \u0026\u0026 file.canWrite())) {\n+                    result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                 }\n             }\n             final List\u003cFile\u003e files \u003d getFilesToProcess(cmdLine.getArgs());\n             if (files.isEmpty()) {\n                 result.add(\"Must specify files to process, found 0.\");\n             }\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "1a2c318e22a0b2b22ccc76019217c0892fe2d59b": {
      "type": "Yintroduced",
      "commitMessage": "huge refactoring for CLI Main class. Issue #596\n",
      "commitDate": 1430849532000,
      "commitName": "1a2c318e22a0b2b22ccc76019217c0892fe2d59b",
      "commitAuthor": "Roman Ivanov"
    }
  }
}