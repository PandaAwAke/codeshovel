{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "WhitespaceAroundCheck.java",
  "functionName": "visitToken",
  "functionId": "visitToken___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java",
  "functionStartLine": 379,
  "functionEndLine": 404,
  "changeHistory": [
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
    "e545ce56a19877ef98f367b3aa20fd6098bbeca9",
    "77733a452387aa2ee99fdc9a737633566cc7af3d",
    "55c92042eb6986e905529de841d3d1c9a7b2b6dd",
    "779aa37ffc447d1d85ea1b082759e4040657191d",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf",
    "d97a2df674716efb7deda50180ae933bdc46d68a",
    "cba6fc8b0a653a795107566f895d2b8f73e2c6c9",
    "f43e7ca4cad1a299768742ff895a0547344e4ab1",
    "55c2560774f0624afeae9e6c29fd19ae59e8c24b",
    "208e0208ca5f1b7966aa82747069b85ddb680c18",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "09f1ba2f35f928d4377637fa284d1ac334617a22",
    "ef58eba6d1b95443ff240ed05634c7e373b3445a",
    "c2d3932843e70e4bb5df7161800aca248f9af778",
    "89ee699fae396abf7706ecaa59e8dbe6c833a67d",
    "865ba5284aace7651f93dc81b0c196d1316a9fdd",
    "e55435125ea57e96f0bf876dd13e78b0ae02cd52",
    "2e8126e99047befc39560342981b0b8e7cabea21",
    "d31d4220cc7f9cf03fe9e4cd0fe7d9e305ffe096",
    "6a5a68f6d8768a7dcec7c1a4b6e1cd478cd02c46",
    "e4a4b6dc01240034cacf0886862805e3dcc58a93",
    "59378eb655ad45ca3f6e32b050882c85156d62ff",
    "b787d5ed90d64e3475286ff2ca5a8cbf65d5487e",
    "4cbd709c019cf1b69796858506d673f7b66d37c7",
    "a298a50d48358e58be31eaea6b9f0e263f5f046e",
    "b1cfd257eb46dba42033984145134eae5880f657",
    "d077a402da51bb238a7da99d5e2542437b145192",
    "8313819dcbf3e9cc0700120014c78a99706d88bb",
    "0fdfc2f36086a108407fc7d51edc5b8c934b658a",
    "ffb17cde0f6351bdf2f2e8cf655fa7f7a3cae827",
    "15b4a0f888fb1d5b374fdd5ae11ec1865113c30d"
  ],
  "changeHistoryShort": {
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": "Ybodychange",
    "e545ce56a19877ef98f367b3aa20fd6098bbeca9": "Ybodychange",
    "77733a452387aa2ee99fdc9a737633566cc7af3d": "Ybodychange",
    "55c92042eb6986e905529de841d3d1c9a7b2b6dd": "Ybodychange",
    "779aa37ffc447d1d85ea1b082759e4040657191d": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf": "Ybodychange",
    "d97a2df674716efb7deda50180ae933bdc46d68a": "Ymultichange(Yparameterchange,Ybodychange)",
    "cba6fc8b0a653a795107566f895d2b8f73e2c6c9": "Ybodychange",
    "f43e7ca4cad1a299768742ff895a0547344e4ab1": "Ybodychange",
    "55c2560774f0624afeae9e6c29fd19ae59e8c24b": "Ybodychange",
    "208e0208ca5f1b7966aa82747069b85ddb680c18": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "09f1ba2f35f928d4377637fa284d1ac334617a22": "Ybodychange",
    "ef58eba6d1b95443ff240ed05634c7e373b3445a": "Ybodychange",
    "c2d3932843e70e4bb5df7161800aca248f9af778": "Ybodychange",
    "89ee699fae396abf7706ecaa59e8dbe6c833a67d": "Ybodychange",
    "865ba5284aace7651f93dc81b0c196d1316a9fdd": "Ybodychange",
    "e55435125ea57e96f0bf876dd13e78b0ae02cd52": "Ybodychange",
    "2e8126e99047befc39560342981b0b8e7cabea21": "Yfilerename",
    "d31d4220cc7f9cf03fe9e4cd0fe7d9e305ffe096": "Ybodychange",
    "6a5a68f6d8768a7dcec7c1a4b6e1cd478cd02c46": "Ybodychange",
    "e4a4b6dc01240034cacf0886862805e3dcc58a93": "Ybodychange",
    "59378eb655ad45ca3f6e32b050882c85156d62ff": "Ybodychange",
    "b787d5ed90d64e3475286ff2ca5a8cbf65d5487e": "Ybodychange",
    "4cbd709c019cf1b69796858506d673f7b66d37c7": "Ybodychange",
    "a298a50d48358e58be31eaea6b9f0e263f5f046e": "Ybodychange",
    "b1cfd257eb46dba42033984145134eae5880f657": "Ybodychange",
    "d077a402da51bb238a7da99d5e2542437b145192": "Ybodychange",
    "8313819dcbf3e9cc0700120014c78a99706d88bb": "Ybodychange",
    "0fdfc2f36086a108407fc7d51edc5b8c934b658a": "Ybodychange",
    "ffb17cde0f6351bdf2f2e8cf655fa7f7a3cae827": "Ybodychange",
    "15b4a0f888fb1d5b374fdd5ae11ec1865113c30d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3143: forbid empty return statements and fixed violations",
      "commitDate": 1464356569000,
      "commitName": "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
      "commitAuthor": "rnveach",
      "commitDateOld": 1459107677000,
      "commitNameOld": "88bd2e4055506771ca31567c134d620843b81f33",
      "commitAuthorOld": "Vladislav Lisetskiy",
      "daysBetweenCommits": 60.75,
      "commitsBetweenForRepo": 120,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,26 @@\n     public void visitToken(DetailAST ast) {\n         final int currentType \u003d ast.getType();\n-        if (isNotRelevantSituation(ast, currentType)) {\n-            return;\n-        }\n+        if (!isNotRelevantSituation(ast, currentType)) {\n+            final String line \u003d getLine(ast.getLineNo() - 1);\n+            final int before \u003d ast.getColumnNo() - 1;\n+            final int after \u003d ast.getColumnNo() + ast.getText().length();\n \n-        final String line \u003d getLine(ast.getLineNo() - 1);\n-        final int before \u003d ast.getColumnNo() - 1;\n-        final int after \u003d ast.getColumnNo() + ast.getText().length();\n-\n-        if (before \u003e\u003d 0) {\n-            final char prevChar \u003d line.charAt(before);\n-            if (shouldCheckSeparationFromPreviousToken(ast)\n-                    \u0026\u0026 !Character.isWhitespace(prevChar)) {\n-                log(ast.getLineNo(), ast.getColumnNo(),\n-                        MSG_WS_NOT_PRECEDED, ast.getText());\n+            if (before \u003e\u003d 0) {\n+                final char prevChar \u003d line.charAt(before);\n+                if (shouldCheckSeparationFromPreviousToken(ast)\n+                        \u0026\u0026 !Character.isWhitespace(prevChar)) {\n+                    log(ast.getLineNo(), ast.getColumnNo(),\n+                            MSG_WS_NOT_PRECEDED, ast.getText());\n+                }\n             }\n-        }\n \n-        if (after \u003c line.length()) {\n-            final char nextChar \u003d line.charAt(after);\n-            if (shouldCheckSeparationFromNextToken(ast, nextChar)\n-                    \u0026\u0026 !Character.isWhitespace(nextChar)) {\n-                log(ast.getLineNo(), ast.getColumnNo() + ast.getText().length(),\n-                        MSG_WS_NOT_FOLLOWED, ast.getText());\n+            if (after \u003c line.length()) {\n+                final char nextChar \u003d line.charAt(after);\n+                if (shouldCheckSeparationFromNextToken(ast, nextChar)\n+                        \u0026\u0026 !Character.isWhitespace(nextChar)) {\n+                    log(ast.getLineNo(), ast.getColumnNo() + ast.getText().length(),\n+                            MSG_WS_NOT_FOLLOWED, ast.getText());\n+                }\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "e545ce56a19877ef98f367b3aa20fd6098bbeca9": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2838: Make WhitespaceAround allow double-brace initialization.\n",
      "commitDate": 1455132109000,
      "commitName": "e545ce56a19877ef98f367b3aa20fd6098bbeca9",
      "commitAuthor": "liscju",
      "commitDateOld": 1454680863000,
      "commitNameOld": "cf96dd9adcf0c3c8f8f05a9ffdcb765cafe17479",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 5.22,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,28 @@\n     public void visitToken(DetailAST ast) {\n         final int currentType \u003d ast.getType();\n         if (isNotRelevantSituation(ast, currentType)) {\n             return;\n         }\n \n         final String line \u003d getLine(ast.getLineNo() - 1);\n         final int before \u003d ast.getColumnNo() - 1;\n         final int after \u003d ast.getColumnNo() + ast.getText().length();\n \n-        if (before \u003e\u003d 0 \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n-            log(ast.getLineNo(), ast.getColumnNo(),\n-                    MSG_WS_NOT_PRECEDED, ast.getText());\n+        if (before \u003e\u003d 0) {\n+            final char prevChar \u003d line.charAt(before);\n+            if (shouldCheckSeparationFromPreviousToken(ast)\n+                    \u0026\u0026 !Character.isWhitespace(prevChar)) {\n+                log(ast.getLineNo(), ast.getColumnNo(),\n+                        MSG_WS_NOT_PRECEDED, ast.getText());\n+            }\n         }\n \n-        if (after \u003e\u003d line.length()) {\n-            return;\n-        }\n-\n-        final char nextChar \u003d line.charAt(after);\n-        if (!Character.isWhitespace(nextChar)\n-            // Check for \"return;\"\n-            \u0026\u0026 !(currentType \u003d\u003d TokenTypes.LITERAL_RETURN\n-                \u0026\u0026 ast.getFirstChild().getType() \u003d\u003d TokenTypes.SEMI)\n-            \u0026\u0026 !isAnonymousInnerClassEnd(currentType, nextChar)) {\n-\n-            log(ast.getLineNo(), ast.getColumnNo() + ast.getText().length(),\n-                    MSG_WS_NOT_FOLLOWED, ast.getText());\n+        if (after \u003c line.length()) {\n+            final char nextChar \u003d line.charAt(after);\n+            if (shouldCheckSeparationFromNextToken(ast, nextChar)\n+                    \u0026\u0026 !Character.isWhitespace(nextChar)) {\n+                log(ast.getLineNo(), ast.getColumnNo() + ast.getText().length(),\n+                        MSG_WS_NOT_FOLLOWED, ast.getText());\n+            }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "77733a452387aa2ee99fdc9a737633566cc7af3d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2836: renamed error message fields to match standard naming",
      "commitDate": 1453387259000,
      "commitName": "77733a452387aa2ee99fdc9a737633566cc7af3d",
      "commitAuthor": "rnveach",
      "commitDateOld": 1451953543000,
      "commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 16.59,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     public void visitToken(DetailAST ast) {\n         final int currentType \u003d ast.getType();\n         if (isNotRelevantSituation(ast, currentType)) {\n             return;\n         }\n \n         final String line \u003d getLine(ast.getLineNo() - 1);\n         final int before \u003d ast.getColumnNo() - 1;\n         final int after \u003d ast.getColumnNo() + ast.getText().length();\n \n         if (before \u003e\u003d 0 \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n             log(ast.getLineNo(), ast.getColumnNo(),\n-                    WS_NOT_PRECEDED, ast.getText());\n+                    MSG_WS_NOT_PRECEDED, ast.getText());\n         }\n \n         if (after \u003e\u003d line.length()) {\n             return;\n         }\n \n         final char nextChar \u003d line.charAt(after);\n         if (!Character.isWhitespace(nextChar)\n             // Check for \"return;\"\n             \u0026\u0026 !(currentType \u003d\u003d TokenTypes.LITERAL_RETURN\n                 \u0026\u0026 ast.getFirstChild().getType() \u003d\u003d TokenTypes.SEMI)\n             \u0026\u0026 !isAnonymousInnerClassEnd(currentType, nextChar)) {\n \n             log(ast.getLineNo(), ast.getColumnNo() + ast.getText().length(),\n-                    WS_NOT_FOLLOWED, ast.getText());\n+                    MSG_WS_NOT_FOLLOWED, ast.getText());\n         }\n     }\n\\ No newline at end of file\n"
    },
    "55c92042eb6986e905529de841d3d1c9a7b2b6dd": {
      "type": "Ybodychange",
      "commitMessage": "Fix various typos in Java code. #1555\n\nFixes some `SpellCheckingInspection` inspection violations.\n\nDescription:\n\u003eSpellchecker inspection helps locate typos and misspelling in your code, comments and literals, and fix them in one click.\n",
      "commitDate": 1440679848000,
      "commitName": "55c92042eb6986e905529de841d3d1c9a7b2b6dd",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440498848000,
      "commitNameOld": "0aec69c702a43a0219a7cc1e3d0c2a21d8d871f0",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 2.09,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     public void visitToken(DetailAST ast) {\n         final int currentType \u003d ast.getType();\n         if (isNotRelevantSituation(ast, currentType)) {\n             return;\n         }\n \n         final String line \u003d getLine(ast.getLineNo() - 1);\n         final int before \u003d ast.getColumnNo() - 1;\n         final int after \u003d ast.getColumnNo() + ast.getText().length();\n \n         if (before \u003e\u003d 0 \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n             log(ast.getLineNo(), ast.getColumnNo(),\n                     WS_NOT_PRECEDED, ast.getText());\n         }\n \n         if (after \u003e\u003d line.length()) {\n             return;\n         }\n \n         final char nextChar \u003d line.charAt(after);\n         if (!Character.isWhitespace(nextChar)\n             // Check for \"return;\"\n             \u0026\u0026 !(currentType \u003d\u003d TokenTypes.LITERAL_RETURN\n                 \u0026\u0026 ast.getFirstChild().getType() \u003d\u003d TokenTypes.SEMI)\n-            \u0026\u0026 !isAnnonimousInnerClassEnd(currentType, nextChar)) {\n+            \u0026\u0026 !isAnonymousInnerClassEnd(currentType, nextChar)) {\n \n             log(ast.getLineNo(), ast.getColumnNo() + ast.getText().length(),\n                     WS_NOT_FOLLOWED, ast.getText());\n         }\n     }\n\\ No newline at end of file\n"
    },
    "779aa37ffc447d1d85ea1b082759e4040657191d": {
      "type": "Ybodychange",
      "commitMessage": "WhitespaceAroundCheck updated to follow Cyclomatic Complexity rule. #954\n",
      "commitDate": 1434344165000,
      "commitName": "779aa37ffc447d1d85ea1b082759e4040657191d",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": 1431863229000,
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 28.71,
      "commitsBetweenForRepo": 157,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,30 @@\n     public void visitToken(DetailAST ast) {\n         final int currentType \u003d ast.getType();\n-        final int parentType \u003d ast.getParent().getType();\n-\n-        // Check for CURLY in array initializer\n-        if ((currentType \u003d\u003d TokenTypes.RCURLY\n-                || currentType \u003d\u003d TokenTypes.LCURLY)\n-            \u0026\u0026 (parentType \u003d\u003d TokenTypes.ARRAY_INIT\n-                || parentType \u003d\u003d TokenTypes.ANNOTATION_ARRAY_INIT)) {\n-            return;\n-        }\n-\n-        // Check for import pkg.name.*;\n-        if (currentType \u003d\u003d TokenTypes.STAR\n-            \u0026\u0026 parentType \u003d\u003d TokenTypes.DOT) {\n-            return;\n-        }\n-\n-        // Check for an SLIST that has a parent CASE_GROUP. It is not a \u0027{\u0027.\n-        if (currentType \u003d\u003d TokenTypes.SLIST\n-            \u0026\u0026 parentType \u003d\u003d TokenTypes.CASE_GROUP) {\n-            return;\n-        }\n-\n-        if (currentType \u003d\u003d TokenTypes.COLON) {\n-            //we do not want to check colon for cases and defaults\n-            if (parentType \u003d\u003d TokenTypes.LITERAL_DEFAULT\n-                || parentType \u003d\u003d TokenTypes.LITERAL_CASE) {\n-                return;\n-            }\n-            else if (parentType \u003d\u003d TokenTypes.FOR_EACH_CLAUSE\n-                \u0026\u0026 this.ignoreEnhancedForColon) {\n-                return;\n-            }\n-        }\n-\n-        // Checks if empty methods, ctors or loops are allowed.\n-        if (isEmptyMethodBlock(ast, parentType)\n-                || isEmptyCtorBlock(ast, parentType)\n-                || isEmptyLoop(ast, parentType)) {\n-            return;\n-        }\n-\n-        // Checks if empty classes, interfaces or enums are allowed\n-        if (allowEmptyTypes \u0026\u0026 isEmptyType(ast, parentType)) {\n+        if (isNotRelevantSituation(ast, currentType)) {\n             return;\n         }\n \n         final String line \u003d getLine(ast.getLineNo() - 1);\n         final int before \u003d ast.getColumnNo() - 1;\n         final int after \u003d ast.getColumnNo() + ast.getText().length();\n \n         if (before \u003e\u003d 0 \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n             log(ast.getLineNo(), ast.getColumnNo(),\n                     WS_NOT_PRECEDED, ast.getText());\n         }\n \n         if (after \u003e\u003d line.length()) {\n             return;\n         }\n \n         final char nextChar \u003d line.charAt(after);\n         if (!Character.isWhitespace(nextChar)\n             // Check for \"return;\"\n             \u0026\u0026 !(currentType \u003d\u003d TokenTypes.LITERAL_RETURN\n                 \u0026\u0026 ast.getFirstChild().getType() \u003d\u003d TokenTypes.SEMI)\n-            // Check for \"})\" or \"};\" or \"},\". Happens with anon-inners\n-            \u0026\u0026 !(currentType \u003d\u003d TokenTypes.RCURLY\n-                \u0026\u0026 (nextChar \u003d\u003d \u0027)\u0027\n-                    || nextChar \u003d\u003d \u0027;\u0027\n-                    || nextChar \u003d\u003d \u0027,\u0027\n-                    || nextChar \u003d\u003d \u0027.\u0027))) {\n+            \u0026\u0026 !isAnnonimousInnerClassEnd(currentType, nextChar)) {\n+\n             log(ast.getLineNo(), ast.getColumnNo() + ast.getText().length(),\n                     WS_NOT_FOLLOWED, ast.getText());\n         }\n     }\n\\ No newline at end of file\n"
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": 1426023398000,
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1425602876000,
      "commitNameOld": "f7828693395f71a6ae99710f3fab44cb8a66ea51",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 4.87,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,84 +1,84 @@\n     public void visitToken(DetailAST ast)\n     {\n         final int currentType \u003d ast.getType();\n         final int parentType \u003d ast.getParent().getType();\n \n         // Check for CURLY in array initializer\n-        if (((currentType \u003d\u003d TokenTypes.RCURLY)\n-                || (currentType \u003d\u003d TokenTypes.LCURLY))\n-            \u0026\u0026 ((parentType \u003d\u003d TokenTypes.ARRAY_INIT)\n-                || (parentType \u003d\u003d TokenTypes.ANNOTATION_ARRAY_INIT)))\n+        if ((currentType \u003d\u003d TokenTypes.RCURLY\n+                || currentType \u003d\u003d TokenTypes.LCURLY)\n+            \u0026\u0026 (parentType \u003d\u003d TokenTypes.ARRAY_INIT\n+                || parentType \u003d\u003d TokenTypes.ANNOTATION_ARRAY_INIT))\n         {\n             return;\n         }\n \n         // Check for import pkg.name.*;\n-        if ((currentType \u003d\u003d TokenTypes.STAR)\n-            \u0026\u0026 (parentType \u003d\u003d TokenTypes.DOT))\n+        if (currentType \u003d\u003d TokenTypes.STAR\n+            \u0026\u0026 parentType \u003d\u003d TokenTypes.DOT)\n         {\n             return;\n         }\n \n         // Check for an SLIST that has a parent CASE_GROUP. It is not a \u0027{\u0027.\n-        if ((currentType \u003d\u003d TokenTypes.SLIST)\n-            \u0026\u0026 (parentType \u003d\u003d TokenTypes.CASE_GROUP))\n+        if (currentType \u003d\u003d TokenTypes.SLIST\n+            \u0026\u0026 parentType \u003d\u003d TokenTypes.CASE_GROUP)\n         {\n             return;\n         }\n \n-        if ((currentType \u003d\u003d TokenTypes.COLON)) {\n+        if (currentType \u003d\u003d TokenTypes.COLON) {\n             //we do not want to check colon for cases and defaults\n             if (parentType \u003d\u003d TokenTypes.LITERAL_DEFAULT\n                 || parentType \u003d\u003d TokenTypes.LITERAL_CASE)\n             {\n                 return;\n             }\n             else if (parentType \u003d\u003d TokenTypes.FOR_EACH_CLAUSE\n                 \u0026\u0026 this.ignoreEnhancedForColon)\n             {\n                 return;\n             }\n         }\n \n         // Checks if empty methods, ctors or loops are allowed.\n         if (isEmptyMethodBlock(ast, parentType)\n                 || isEmptyCtorBlock(ast, parentType)\n                 || isEmptyLoop(ast, parentType))\n         {\n             return;\n         }\n \n         // Checks if empty classes, interfaces or enums are allowed\n-        if (allowEmptyTypes \u0026\u0026 (isEmptyType(ast, parentType))) {\n+        if (allowEmptyTypes \u0026\u0026 isEmptyType(ast, parentType)) {\n             return;\n         }\n \n         final String line \u003d getLine(ast.getLineNo() - 1);\n         final int before \u003d ast.getColumnNo() - 1;\n         final int after \u003d ast.getColumnNo() + ast.getText().length();\n \n-        if ((before \u003e\u003d 0) \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n+        if (before \u003e\u003d 0 \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n             log(ast.getLineNo(), ast.getColumnNo(),\n                     WS_NOT_PRECEDED, ast.getText());\n         }\n \n         if (after \u003e\u003d line.length()) {\n             return;\n         }\n \n         final char nextChar \u003d line.charAt(after);\n         if (!Character.isWhitespace(nextChar)\n             // Check for \"return;\"\n-            \u0026\u0026 !((currentType \u003d\u003d TokenTypes.LITERAL_RETURN)\n-                \u0026\u0026 (ast.getFirstChild().getType() \u003d\u003d TokenTypes.SEMI))\n+            \u0026\u0026 !(currentType \u003d\u003d TokenTypes.LITERAL_RETURN\n+                \u0026\u0026 ast.getFirstChild().getType() \u003d\u003d TokenTypes.SEMI)\n             // Check for \"})\" or \"};\" or \"},\". Happens with anon-inners\n-            \u0026\u0026 !((currentType \u003d\u003d TokenTypes.RCURLY)\n-                \u0026\u0026 ((nextChar \u003d\u003d \u0027)\u0027)\n-                    || (nextChar \u003d\u003d \u0027;\u0027)\n-                    || (nextChar \u003d\u003d \u0027,\u0027)\n-                    || (nextChar \u003d\u003d \u0027.\u0027))))\n+            \u0026\u0026 !(currentType \u003d\u003d TokenTypes.RCURLY\n+                \u0026\u0026 (nextChar \u003d\u003d \u0027)\u0027\n+                    || nextChar \u003d\u003d \u0027;\u0027\n+                    || nextChar \u003d\u003d \u0027,\u0027\n+                    || nextChar \u003d\u003d \u0027.\u0027)))\n         {\n             log(ast.getLineNo(), ast.getColumnNo() + ast.getText().length(),\n                     WS_NOT_FOLLOWED, ast.getText());\n         }\n     }\n\\ No newline at end of file\n"
    },
    "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, whitespace package, issue #537\n",
      "commitDate": 1424437365000,
      "commitName": "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf",
      "commitAuthor": "alexkravin",
      "commitDateOld": 1424294072000,
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,84 +1,84 @@\n     public void visitToken(DetailAST ast)\n     {\n         final int currentType \u003d ast.getType();\n         final int parentType \u003d ast.getParent().getType();\n \n         // Check for CURLY in array initializer\n         if (((currentType \u003d\u003d TokenTypes.RCURLY)\n                 || (currentType \u003d\u003d TokenTypes.LCURLY))\n             \u0026\u0026 ((parentType \u003d\u003d TokenTypes.ARRAY_INIT)\n                 || (parentType \u003d\u003d TokenTypes.ANNOTATION_ARRAY_INIT)))\n         {\n             return;\n         }\n \n         // Check for import pkg.name.*;\n         if ((currentType \u003d\u003d TokenTypes.STAR)\n             \u0026\u0026 (parentType \u003d\u003d TokenTypes.DOT))\n         {\n             return;\n         }\n \n         // Check for an SLIST that has a parent CASE_GROUP. It is not a \u0027{\u0027.\n         if ((currentType \u003d\u003d TokenTypes.SLIST)\n             \u0026\u0026 (parentType \u003d\u003d TokenTypes.CASE_GROUP))\n         {\n             return;\n         }\n \n         if ((currentType \u003d\u003d TokenTypes.COLON)) {\n             //we do not want to check colon for cases and defaults\n             if (parentType \u003d\u003d TokenTypes.LITERAL_DEFAULT\n                 || parentType \u003d\u003d TokenTypes.LITERAL_CASE)\n             {\n                 return;\n             }\n             else if (parentType \u003d\u003d TokenTypes.FOR_EACH_CLAUSE\n                 \u0026\u0026 this.ignoreEnhancedForColon)\n             {\n                 return;\n             }\n         }\n \n         // Checks if empty methods, ctors or loops are allowed.\n         if (isEmptyMethodBlock(ast, parentType)\n                 || isEmptyCtorBlock(ast, parentType)\n                 || isEmptyLoop(ast, parentType))\n         {\n             return;\n         }\n \n         // Checks if empty classes, interfaces or enums are allowed\n         if (allowEmptyTypes \u0026\u0026 (isEmptyType(ast, parentType))) {\n             return;\n         }\n \n         final String line \u003d getLine(ast.getLineNo() - 1);\n         final int before \u003d ast.getColumnNo() - 1;\n         final int after \u003d ast.getColumnNo() + ast.getText().length();\n \n         if ((before \u003e\u003d 0) \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n             log(ast.getLineNo(), ast.getColumnNo(),\n-                    \"ws.notPreceded\", ast.getText());\n+                    WS_NOT_PRECEDED, ast.getText());\n         }\n \n         if (after \u003e\u003d line.length()) {\n             return;\n         }\n \n         final char nextChar \u003d line.charAt(after);\n         if (!Character.isWhitespace(nextChar)\n             // Check for \"return;\"\n             \u0026\u0026 !((currentType \u003d\u003d TokenTypes.LITERAL_RETURN)\n                 \u0026\u0026 (ast.getFirstChild().getType() \u003d\u003d TokenTypes.SEMI))\n             // Check for \"})\" or \"};\" or \"},\". Happens with anon-inners\n             \u0026\u0026 !((currentType \u003d\u003d TokenTypes.RCURLY)\n                 \u0026\u0026 ((nextChar \u003d\u003d \u0027)\u0027)\n                     || (nextChar \u003d\u003d \u0027;\u0027)\n                     || (nextChar \u003d\u003d \u0027,\u0027)\n                     || (nextChar \u003d\u003d \u0027.\u0027))))\n         {\n             log(ast.getLineNo(), ast.getColumnNo() + ast.getText().length(),\n-                    \"ws.notFollowed\", ast.getText());\n+                    WS_NOT_FOLLOWED, ast.getText());\n         }\n     }\n\\ No newline at end of file\n"
    },
    "d97a2df674716efb7deda50180ae933bdc46d68a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, whitespace, #512\n",
      "commitDate": 1421677248000,
      "commitName": "d97a2df674716efb7deda50180ae933bdc46d68a",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "cba6fc8b0a653a795107566f895d2b8f73e2c6c9": {
      "type": "Ybodychange",
      "commitMessage": "FileContents.getLines performance fix\n",
      "commitDate": 1414957696000,
      "commitName": "cba6fc8b0a653a795107566f895d2b8f73e2c6c9",
      "commitAuthor": "sopov.ivan",
      "commitDateOld": 1410620217000,
      "commitNameOld": "f43e7ca4cad1a299768742ff895a0547344e4ab1",
      "commitAuthorOld": "ychulovskyy",
      "daysBetweenCommits": 50.2,
      "commitsBetweenForRepo": 94,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,84 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final int currentType \u003d aAST.getType();\n         final int parentType \u003d aAST.getParent().getType();\n \n         // Check for CURLY in array initializer\n         if (((currentType \u003d\u003d TokenTypes.RCURLY)\n                 || (currentType \u003d\u003d TokenTypes.LCURLY))\n             \u0026\u0026 ((parentType \u003d\u003d TokenTypes.ARRAY_INIT)\n                 || (parentType \u003d\u003d TokenTypes.ANNOTATION_ARRAY_INIT)))\n         {\n             return;\n         }\n \n         // Check for import pkg.name.*;\n         if ((currentType \u003d\u003d TokenTypes.STAR)\n             \u0026\u0026 (parentType \u003d\u003d TokenTypes.DOT))\n         {\n             return;\n         }\n \n         // Check for an SLIST that has a parent CASE_GROUP. It is not a \u0027{\u0027.\n         if ((currentType \u003d\u003d TokenTypes.SLIST)\n             \u0026\u0026 (parentType \u003d\u003d TokenTypes.CASE_GROUP))\n         {\n             return;\n         }\n \n         if ((currentType \u003d\u003d TokenTypes.COLON)) {\n             //we do not want to check colon for cases and defaults\n             if (parentType \u003d\u003d TokenTypes.LITERAL_DEFAULT\n                 || parentType \u003d\u003d TokenTypes.LITERAL_CASE)\n             {\n                 return;\n             }\n             else if (parentType \u003d\u003d TokenTypes.FOR_EACH_CLAUSE\n                 \u0026\u0026 this.mIgnoreEnhancedForColon)\n             {\n                 return;\n             }\n         }\n \n         // Checks if empty methods, ctors or loops are allowed.\n         if (isEmptyMethodBlock(aAST, parentType)\n                 || isEmptyCtorBlock(aAST, parentType)\n                 || isEmptyLoop(aAST, parentType))\n         {\n             return;\n         }\n \n         // Checks if empty classes, interfaces or enums are allowed\n         if (mAllowEmptyTypes \u0026\u0026 (isEmptyType(aAST, parentType))) {\n             return;\n         }\n \n-        final String[] lines \u003d getLines();\n-        final String line \u003d lines[aAST.getLineNo() - 1];\n+        final String line \u003d getLine(aAST.getLineNo() - 1);\n         final int before \u003d aAST.getColumnNo() - 1;\n         final int after \u003d aAST.getColumnNo() + aAST.getText().length();\n \n         if ((before \u003e\u003d 0) \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n                     \"ws.notPreceded\", aAST.getText());\n         }\n \n         if (after \u003e\u003d line.length()) {\n             return;\n         }\n \n         final char nextChar \u003d line.charAt(after);\n         if (!Character.isWhitespace(nextChar)\n             // Check for \"return;\"\n             \u0026\u0026 !((currentType \u003d\u003d TokenTypes.LITERAL_RETURN)\n                 \u0026\u0026 (aAST.getFirstChild().getType() \u003d\u003d TokenTypes.SEMI))\n             // Check for \"})\" or \"};\" or \"},\". Happens with anon-inners\n             \u0026\u0026 !((currentType \u003d\u003d TokenTypes.RCURLY)\n                 \u0026\u0026 ((nextChar \u003d\u003d \u0027)\u0027)\n                     || (nextChar \u003d\u003d \u0027;\u0027)\n                     || (nextChar \u003d\u003d \u0027,\u0027)\n                     || (nextChar \u003d\u003d \u0027.\u0027))))\n         {\n             log(aAST.getLineNo(), aAST.getColumnNo() + aAST.getText().length(),\n                     \"ws.notFollowed\", aAST.getText());\n         }\n     }\n\\ No newline at end of file\n"
    },
    "f43e7ca4cad1a299768742ff895a0547344e4ab1": {
      "type": "Ybodychange",
      "commitMessage": "Fixed issue #105 WhitespaceAroundCheck: fix for anonymous inner class\n",
      "commitDate": 1410620217000,
      "commitName": "f43e7ca4cad1a299768742ff895a0547344e4ab1",
      "commitAuthor": "ychulovskyy",
      "commitDateOld": 1410151281000,
      "commitNameOld": "f768a8f8cca599d460e3c2da5369add062b6ead0",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 5.43,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,84 +1,85 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final int currentType \u003d aAST.getType();\n         final int parentType \u003d aAST.getParent().getType();\n \n         // Check for CURLY in array initializer\n         if (((currentType \u003d\u003d TokenTypes.RCURLY)\n                 || (currentType \u003d\u003d TokenTypes.LCURLY))\n             \u0026\u0026 ((parentType \u003d\u003d TokenTypes.ARRAY_INIT)\n                 || (parentType \u003d\u003d TokenTypes.ANNOTATION_ARRAY_INIT)))\n         {\n             return;\n         }\n \n         // Check for import pkg.name.*;\n         if ((currentType \u003d\u003d TokenTypes.STAR)\n             \u0026\u0026 (parentType \u003d\u003d TokenTypes.DOT))\n         {\n             return;\n         }\n \n         // Check for an SLIST that has a parent CASE_GROUP. It is not a \u0027{\u0027.\n         if ((currentType \u003d\u003d TokenTypes.SLIST)\n             \u0026\u0026 (parentType \u003d\u003d TokenTypes.CASE_GROUP))\n         {\n             return;\n         }\n \n         if ((currentType \u003d\u003d TokenTypes.COLON)) {\n             //we do not want to check colon for cases and defaults\n             if (parentType \u003d\u003d TokenTypes.LITERAL_DEFAULT\n                 || parentType \u003d\u003d TokenTypes.LITERAL_CASE)\n             {\n                 return;\n             }\n             else if (parentType \u003d\u003d TokenTypes.FOR_EACH_CLAUSE\n                 \u0026\u0026 this.mIgnoreEnhancedForColon)\n             {\n                 return;\n             }\n         }\n \n         // Checks if empty methods, ctors or loops are allowed.\n         if (isEmptyMethodBlock(aAST, parentType)\n                 || isEmptyCtorBlock(aAST, parentType)\n                 || isEmptyLoop(aAST, parentType))\n         {\n             return;\n         }\n \n         // Checks if empty classes, interfaces or enums are allowed\n         if (mAllowEmptyTypes \u0026\u0026 (isEmptyType(aAST, parentType))) {\n             return;\n         }\n \n         final String[] lines \u003d getLines();\n         final String line \u003d lines[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         final int after \u003d aAST.getColumnNo() + aAST.getText().length();\n \n         if ((before \u003e\u003d 0) \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n                     \"ws.notPreceded\", aAST.getText());\n         }\n \n         if (after \u003e\u003d line.length()) {\n             return;\n         }\n \n         final char nextChar \u003d line.charAt(after);\n         if (!Character.isWhitespace(nextChar)\n             // Check for \"return;\"\n             \u0026\u0026 !((currentType \u003d\u003d TokenTypes.LITERAL_RETURN)\n                 \u0026\u0026 (aAST.getFirstChild().getType() \u003d\u003d TokenTypes.SEMI))\n             // Check for \"})\" or \"};\" or \"},\". Happens with anon-inners\n             \u0026\u0026 !((currentType \u003d\u003d TokenTypes.RCURLY)\n                 \u0026\u0026 ((nextChar \u003d\u003d \u0027)\u0027)\n                     || (nextChar \u003d\u003d \u0027;\u0027)\n-                    || (nextChar \u003d\u003d \u0027,\u0027))))\n+                    || (nextChar \u003d\u003d \u0027,\u0027)\n+                    || (nextChar \u003d\u003d \u0027.\u0027))))\n         {\n             log(aAST.getLineNo(), aAST.getColumnNo() + aAST.getText().length(),\n                     \"ws.notFollowed\", aAST.getText());\n         }\n     }\n\\ No newline at end of file\n"
    },
    "55c2560774f0624afeae9e6c29fd19ae59e8c24b": {
      "type": "Ybodychange",
      "commitMessage": "Update for existing Check: WhitespaceAround #170\n",
      "commitDate": 1404577816000,
      "commitName": "55c2560774f0624afeae9e6c29fd19ae59e8c24b",
      "commitAuthor": "Max",
      "commitDateOld": 1395962392000,
      "commitNameOld": "208e0208ca5f1b7966aa82747069b85ddb680c18",
      "commitAuthorOld": "Jacob Tomaw",
      "daysBetweenCommits": 99.72,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,84 @@\n     public void visitToken(DetailAST aAST)\n     {\n-        final int type \u003d aAST.getType();\n+        final int currentType \u003d aAST.getType();\n         final int parentType \u003d aAST.getParent().getType();\n \n         // Check for CURLY in array initializer\n-        if (((type \u003d\u003d TokenTypes.RCURLY) || (type \u003d\u003d TokenTypes.LCURLY))\n+        if (((currentType \u003d\u003d TokenTypes.RCURLY)\n+                || (currentType \u003d\u003d TokenTypes.LCURLY))\n             \u0026\u0026 ((parentType \u003d\u003d TokenTypes.ARRAY_INIT)\n                 || (parentType \u003d\u003d TokenTypes.ANNOTATION_ARRAY_INIT)))\n         {\n             return;\n         }\n \n         // Check for import pkg.name.*;\n-        if ((type \u003d\u003d TokenTypes.STAR)\n+        if ((currentType \u003d\u003d TokenTypes.STAR)\n             \u0026\u0026 (parentType \u003d\u003d TokenTypes.DOT))\n         {\n             return;\n         }\n \n         // Check for an SLIST that has a parent CASE_GROUP. It is not a \u0027{\u0027.\n-        if ((type \u003d\u003d TokenTypes.SLIST)\n+        if ((currentType \u003d\u003d TokenTypes.SLIST)\n             \u0026\u0026 (parentType \u003d\u003d TokenTypes.CASE_GROUP))\n         {\n             return;\n         }\n \n-        if ((type \u003d\u003d TokenTypes.COLON)) {\n+        if ((currentType \u003d\u003d TokenTypes.COLON)) {\n             //we do not want to check colon for cases and defaults\n             if (parentType \u003d\u003d TokenTypes.LITERAL_DEFAULT\n                 || parentType \u003d\u003d TokenTypes.LITERAL_CASE)\n             {\n                 return;\n             }\n             else if (parentType \u003d\u003d TokenTypes.FOR_EACH_CLAUSE\n                 \u0026\u0026 this.mIgnoreEnhancedForColon)\n             {\n                 return;\n             }\n         }\n \n-        // Check for allowed empty method or ctor blocks.\n-        if (emptyMethodBlockCheck(aAST, parentType)\n-            || emptyCtorBlockCheck(aAST, parentType))\n+        // Checks if empty methods, ctors or loops are allowed.\n+        if (isEmptyMethodBlock(aAST, parentType)\n+                || isEmptyCtorBlock(aAST, parentType)\n+                || isEmptyLoop(aAST, parentType))\n         {\n             return;\n         }\n \n+        // Checks if empty classes, interfaces or enums are allowed\n+        if (mAllowEmptyTypes \u0026\u0026 (isEmptyType(aAST, parentType))) {\n+            return;\n+        }\n+\n         final String[] lines \u003d getLines();\n         final String line \u003d lines[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         final int after \u003d aAST.getColumnNo() + aAST.getText().length();\n \n         if ((before \u003e\u003d 0) \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n                     \"ws.notPreceded\", aAST.getText());\n         }\n \n         if (after \u003e\u003d line.length()) {\n             return;\n         }\n \n         final char nextChar \u003d line.charAt(after);\n         if (!Character.isWhitespace(nextChar)\n             // Check for \"return;\"\n-            \u0026\u0026 !((type \u003d\u003d TokenTypes.LITERAL_RETURN)\n+            \u0026\u0026 !((currentType \u003d\u003d TokenTypes.LITERAL_RETURN)\n                 \u0026\u0026 (aAST.getFirstChild().getType() \u003d\u003d TokenTypes.SEMI))\n             // Check for \"})\" or \"};\" or \"},\". Happens with anon-inners\n-            \u0026\u0026 !((type \u003d\u003d TokenTypes.RCURLY)\n+            \u0026\u0026 !((currentType \u003d\u003d TokenTypes.RCURLY)\n                 \u0026\u0026 ((nextChar \u003d\u003d \u0027)\u0027)\n                     || (nextChar \u003d\u003d \u0027;\u0027)\n                     || (nextChar \u003d\u003d \u0027,\u0027))))\n         {\n             log(aAST.getLineNo(), aAST.getColumnNo() + aAST.getText().length(),\n                     \"ws.notFollowed\", aAST.getText());\n         }\n     }\n\\ No newline at end of file\n"
    },
    "208e0208ca5f1b7966aa82747069b85ddb680c18": {
      "type": "Ybodychange",
      "commitMessage": "Enhance WhitespaceAroundCheck to ignore Annotation Array Initialization curlies as it does for Array Initialization outside of annotations.\n",
      "commitDate": 1395962392000,
      "commitName": "208e0208ca5f1b7966aa82747069b85ddb680c18",
      "commitAuthor": "Jacob Tomaw",
      "commitDateOld": 1393953491000,
      "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthorOld": "Ivan Sopov",
      "daysBetweenCommits": 23.25,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,77 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final int type \u003d aAST.getType();\n         final int parentType \u003d aAST.getParent().getType();\n \n         // Check for CURLY in array initializer\n         if (((type \u003d\u003d TokenTypes.RCURLY) || (type \u003d\u003d TokenTypes.LCURLY))\n-            \u0026\u0026 (parentType \u003d\u003d TokenTypes.ARRAY_INIT))\n+            \u0026\u0026 ((parentType \u003d\u003d TokenTypes.ARRAY_INIT)\n+                || (parentType \u003d\u003d TokenTypes.ANNOTATION_ARRAY_INIT)))\n         {\n             return;\n         }\n \n         // Check for import pkg.name.*;\n         if ((type \u003d\u003d TokenTypes.STAR)\n             \u0026\u0026 (parentType \u003d\u003d TokenTypes.DOT))\n         {\n             return;\n         }\n \n         // Check for an SLIST that has a parent CASE_GROUP. It is not a \u0027{\u0027.\n         if ((type \u003d\u003d TokenTypes.SLIST)\n             \u0026\u0026 (parentType \u003d\u003d TokenTypes.CASE_GROUP))\n         {\n             return;\n         }\n \n         if ((type \u003d\u003d TokenTypes.COLON)) {\n             //we do not want to check colon for cases and defaults\n             if (parentType \u003d\u003d TokenTypes.LITERAL_DEFAULT\n                 || parentType \u003d\u003d TokenTypes.LITERAL_CASE)\n             {\n                 return;\n             }\n             else if (parentType \u003d\u003d TokenTypes.FOR_EACH_CLAUSE\n                 \u0026\u0026 this.mIgnoreEnhancedForColon)\n             {\n                 return;\n             }\n         }\n \n         // Check for allowed empty method or ctor blocks.\n         if (emptyMethodBlockCheck(aAST, parentType)\n             || emptyCtorBlockCheck(aAST, parentType))\n         {\n             return;\n         }\n \n         final String[] lines \u003d getLines();\n         final String line \u003d lines[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         final int after \u003d aAST.getColumnNo() + aAST.getText().length();\n \n         if ((before \u003e\u003d 0) \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n                     \"ws.notPreceded\", aAST.getText());\n         }\n \n         if (after \u003e\u003d line.length()) {\n             return;\n         }\n \n         final char nextChar \u003d line.charAt(after);\n         if (!Character.isWhitespace(nextChar)\n             // Check for \"return;\"\n             \u0026\u0026 !((type \u003d\u003d TokenTypes.LITERAL_RETURN)\n                 \u0026\u0026 (aAST.getFirstChild().getType() \u003d\u003d TokenTypes.SEMI))\n             // Check for \"})\" or \"};\" or \"},\". Happens with anon-inners\n             \u0026\u0026 !((type \u003d\u003d TokenTypes.RCURLY)\n                 \u0026\u0026 ((nextChar \u003d\u003d \u0027)\u0027)\n                     || (nextChar \u003d\u003d \u0027;\u0027)\n                     || (nextChar \u003d\u003d \u0027,\u0027))))\n         {\n             log(aAST.getLineNo(), aAST.getColumnNo() + aAST.getText().length(),\n                     \"ws.notFollowed\", aAST.getText());\n         }\n     }\n\\ No newline at end of file\n"
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "09f1ba2f35f928d4377637fa284d1ac334617a22": {
      "type": "Ybodychange",
      "commitMessage": "ignoreEnhancedForColon property added to WhitespaceAround.\nThanks to Travis Schneeberger for patch #1921815 (bug #1649038\n",
      "commitDate": 1319831972000,
      "commitName": "09f1ba2f35f928d4377637fa284d1ac334617a22",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1310618763000,
      "commitNameOld": "a9c2910a9d58a4b1b8c2d5555fff9cea297c6df5",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 106.63,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,76 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final int type \u003d aAST.getType();\n         final int parentType \u003d aAST.getParent().getType();\n \n         // Check for CURLY in array initializer\n         if (((type \u003d\u003d TokenTypes.RCURLY) || (type \u003d\u003d TokenTypes.LCURLY))\n             \u0026\u0026 (parentType \u003d\u003d TokenTypes.ARRAY_INIT))\n         {\n             return;\n         }\n \n         // Check for import pkg.name.*;\n         if ((type \u003d\u003d TokenTypes.STAR)\n             \u0026\u0026 (parentType \u003d\u003d TokenTypes.DOT))\n         {\n             return;\n         }\n \n         // Check for an SLIST that has a parent CASE_GROUP. It is not a \u0027{\u0027.\n         if ((type \u003d\u003d TokenTypes.SLIST)\n             \u0026\u0026 (parentType \u003d\u003d TokenTypes.CASE_GROUP))\n         {\n             return;\n         }\n \n-        //we do not want to check colon for cases and defaults\n-        if ((type \u003d\u003d TokenTypes.COLON)\n-            \u0026\u0026 ((parentType \u003d\u003d TokenTypes.LITERAL_DEFAULT)\n-                || (parentType \u003d\u003d TokenTypes.LITERAL_CASE)))\n-        {\n-            return;\n+        if ((type \u003d\u003d TokenTypes.COLON)) {\n+            //we do not want to check colon for cases and defaults\n+            if (parentType \u003d\u003d TokenTypes.LITERAL_DEFAULT\n+                || parentType \u003d\u003d TokenTypes.LITERAL_CASE)\n+            {\n+                return;\n+            }\n+            else if (parentType \u003d\u003d TokenTypes.FOR_EACH_CLAUSE\n+                \u0026\u0026 this.mIgnoreEnhancedForColon)\n+            {\n+                return;\n+            }\n         }\n \n         // Check for allowed empty method or ctor blocks.\n         if (emptyMethodBlockCheck(aAST, parentType)\n             || emptyCtorBlockCheck(aAST, parentType))\n         {\n             return;\n         }\n \n         final String[] lines \u003d getLines();\n         final String line \u003d lines[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         final int after \u003d aAST.getColumnNo() + aAST.getText().length();\n \n         if ((before \u003e\u003d 0) \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n                     \"ws.notPreceded\", aAST.getText());\n         }\n \n         if (after \u003e\u003d line.length()) {\n             return;\n         }\n \n         final char nextChar \u003d line.charAt(after);\n         if (!Character.isWhitespace(nextChar)\n             // Check for \"return;\"\n             \u0026\u0026 !((type \u003d\u003d TokenTypes.LITERAL_RETURN)\n                 \u0026\u0026 (aAST.getFirstChild().getType() \u003d\u003d TokenTypes.SEMI))\n             // Check for \"})\" or \"};\" or \"},\". Happens with anon-inners\n             \u0026\u0026 !((type \u003d\u003d TokenTypes.RCURLY)\n                 \u0026\u0026 ((nextChar \u003d\u003d \u0027)\u0027)\n                     || (nextChar \u003d\u003d \u0027;\u0027)\n                     || (nextChar \u003d\u003d \u0027,\u0027))))\n         {\n             log(aAST.getLineNo(), aAST.getColumnNo() + aAST.getText().length(),\n                     \"ws.notFollowed\", aAST.getText());\n         }\n     }\n\\ No newline at end of file\n"
    },
    "ef58eba6d1b95443ff240ed05634c7e373b3445a": {
      "type": "Ybodychange",
      "commitMessage": "General clean up with the new logging.\n",
      "commitDate": 1198148921000,
      "commitName": "ef58eba6d1b95443ff240ed05634c7e373b3445a",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1197777583000,
      "commitNameOld": "ac596b1c3ab07d52cafd96abf471016900861100",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 4.3,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,70 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final int type \u003d aAST.getType();\n         final int parentType \u003d aAST.getParent().getType();\n \n         // Check for CURLY in array initializer\n         if (((type \u003d\u003d TokenTypes.RCURLY) || (type \u003d\u003d TokenTypes.LCURLY))\n             \u0026\u0026 (parentType \u003d\u003d TokenTypes.ARRAY_INIT))\n         {\n             return;\n         }\n \n         // Check for import pkg.name.*;\n         if ((type \u003d\u003d TokenTypes.STAR)\n             \u0026\u0026 (parentType \u003d\u003d TokenTypes.DOT))\n         {\n             return;\n         }\n \n         // Check for an SLIST that has a parent CASE_GROUP. It is not a \u0027{\u0027.\n         if ((type \u003d\u003d TokenTypes.SLIST)\n             \u0026\u0026 (parentType \u003d\u003d TokenTypes.CASE_GROUP))\n         {\n             return;\n         }\n \n         //we do not want to check colon for cases and defaults\n         if ((type \u003d\u003d TokenTypes.COLON)\n             \u0026\u0026 ((parentType \u003d\u003d TokenTypes.LITERAL_DEFAULT)\n                 || (parentType \u003d\u003d TokenTypes.LITERAL_CASE)))\n         {\n             return;\n         }\n \n         // Check for allowed empty method or ctor blocks.\n         if (emptyMethodBlockCheck(aAST, parentType)\n             || emptyCtorBlockCheck(aAST, parentType))\n         {\n             return;\n         }\n \n         final String[] lines \u003d getLines();\n         final String line \u003d lines[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         final int after \u003d aAST.getColumnNo() + aAST.getText().length();\n \n         if ((before \u003e\u003d 0) \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n-                    \"ws.notPreceded\", new Object[]{aAST.getText()});\n+                    \"ws.notPreceded\", aAST.getText());\n         }\n \n         if (after \u003e\u003d line.length()) {\n             return;\n         }\n \n         final char nextChar \u003d line.charAt(after);\n         if (!Character.isWhitespace(nextChar)\n             // Check for \"return;\"\n             \u0026\u0026 !((type \u003d\u003d TokenTypes.LITERAL_RETURN)\n                 \u0026\u0026 (aAST.getFirstChild().getType() \u003d\u003d TokenTypes.SEMI))\n             // Check for \"})\" or \"};\" or \"},\". Happens with anon-inners\n             \u0026\u0026 !((type \u003d\u003d TokenTypes.RCURLY)\n                 \u0026\u0026 ((nextChar \u003d\u003d \u0027)\u0027)\n                     || (nextChar \u003d\u003d \u0027;\u0027)\n                     || (nextChar \u003d\u003d \u0027,\u0027))))\n         {\n-            log(\n-                aAST.getLineNo(),\n-                aAST.getColumnNo() + aAST.getText().length(),\n-                \"ws.notFollowed\",\n-                new Object[] {aAST.getText()});\n+            log(aAST.getLineNo(), aAST.getColumnNo() + aAST.getText().length(),\n+                    \"ws.notFollowed\", aAST.getText());\n         }\n     }\n\\ No newline at end of file\n"
    },
    "c2d3932843e70e4bb5df7161800aca248f9af778": {
      "type": "Ybodychange",
      "commitMessage": "Clean up the use of ()\u0027s\n",
      "commitDate": 1152242806000,
      "commitName": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1130859512000,
      "commitNameOld": "89ee699fae396abf7706ecaa59e8dbe6c833a67d",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 247.49,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,73 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final int type \u003d aAST.getType();\n         final int parentType \u003d aAST.getParent().getType();\n \n         // Check for CURLY in array initializer\n-        if ((type \u003d\u003d TokenTypes.RCURLY || type \u003d\u003d TokenTypes.LCURLY)\n+        if (((type \u003d\u003d TokenTypes.RCURLY) || (type \u003d\u003d TokenTypes.LCURLY))\n             \u0026\u0026 (parentType \u003d\u003d TokenTypes.ARRAY_INIT))\n         {\n             return;\n         }\n \n         // Check for import pkg.name.*;\n         if ((type \u003d\u003d TokenTypes.STAR)\n             \u0026\u0026 (parentType \u003d\u003d TokenTypes.DOT))\n         {\n             return;\n         }\n \n         // Check for an SLIST that has a parent CASE_GROUP. It is not a \u0027{\u0027.\n         if ((type \u003d\u003d TokenTypes.SLIST)\n             \u0026\u0026 (parentType \u003d\u003d TokenTypes.CASE_GROUP))\n         {\n             return;\n         }\n \n         //we do not want to check colon for cases and defaults\n-        if (type \u003d\u003d TokenTypes.COLON\n-            \u0026\u0026 (parentType \u003d\u003d TokenTypes.LITERAL_DEFAULT\n-                || parentType \u003d\u003d TokenTypes.LITERAL_CASE))\n+        if ((type \u003d\u003d TokenTypes.COLON)\n+            \u0026\u0026 ((parentType \u003d\u003d TokenTypes.LITERAL_DEFAULT)\n+                || (parentType \u003d\u003d TokenTypes.LITERAL_CASE)))\n         {\n             return;\n         }\n \n         // Check for allowed empty method or ctor blocks.\n         if (emptyMethodBlockCheck(aAST, parentType)\n             || emptyCtorBlockCheck(aAST, parentType))\n         {\n             return;\n         }\n \n         final String[] lines \u003d getLines();\n         final String line \u003d lines[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         final int after \u003d aAST.getColumnNo() + aAST.getText().length();\n \n         if ((before \u003e\u003d 0) \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n                     \"ws.notPreceded\", new Object[]{aAST.getText()});\n         }\n \n         if (after \u003e\u003d line.length()) {\n             return;\n         }\n \n         final char nextChar \u003d line.charAt(after);\n         if (!Character.isWhitespace(nextChar)\n             // Check for \"return;\"\n             \u0026\u0026 !((type \u003d\u003d TokenTypes.LITERAL_RETURN)\n                 \u0026\u0026 (aAST.getFirstChild().getType() \u003d\u003d TokenTypes.SEMI))\n             // Check for \"})\" or \"};\" or \"},\". Happens with anon-inners\n             \u0026\u0026 !((type \u003d\u003d TokenTypes.RCURLY)\n                 \u0026\u0026 ((nextChar \u003d\u003d \u0027)\u0027)\n                     || (nextChar \u003d\u003d \u0027;\u0027)\n                     || (nextChar \u003d\u003d \u0027,\u0027))))\n         {\n             log(\n                 aAST.getLineNo(),\n                 aAST.getColumnNo() + aAST.getText().length(),\n                 \"ws.notFollowed\",\n                 new Object[] {aAST.getText()});\n         }\n     }\n\\ No newline at end of file\n"
    },
    "89ee699fae396abf7706ecaa59e8dbe6c833a67d": {
      "type": "Ybodychange",
      "commitMessage": "Applied patch 906531 (WhitespaceAround allows empty method/ctor bodies.)  Thanks to  Eric Roe\n",
      "commitDate": 1130859512000,
      "commitName": "89ee699fae396abf7706ecaa59e8dbe6c833a67d",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1130786628000,
      "commitNameOld": "1aee9d55cc5bd8cca011e17369f6e370efcc85bb",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 0.84,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,73 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final int type \u003d aAST.getType();\n         final int parentType \u003d aAST.getParent().getType();\n \n         // Check for CURLY in array initializer\n         if ((type \u003d\u003d TokenTypes.RCURLY || type \u003d\u003d TokenTypes.LCURLY)\n             \u0026\u0026 (parentType \u003d\u003d TokenTypes.ARRAY_INIT))\n         {\n             return;\n         }\n \n         // Check for import pkg.name.*;\n         if ((type \u003d\u003d TokenTypes.STAR)\n             \u0026\u0026 (parentType \u003d\u003d TokenTypes.DOT))\n         {\n             return;\n         }\n \n         // Check for an SLIST that has a parent CASE_GROUP. It is not a \u0027{\u0027.\n         if ((type \u003d\u003d TokenTypes.SLIST)\n             \u0026\u0026 (parentType \u003d\u003d TokenTypes.CASE_GROUP))\n         {\n             return;\n         }\n \n         //we do not want to check colon for cases and defaults\n         if (type \u003d\u003d TokenTypes.COLON\n             \u0026\u0026 (parentType \u003d\u003d TokenTypes.LITERAL_DEFAULT\n                 || parentType \u003d\u003d TokenTypes.LITERAL_CASE))\n         {\n             return;\n         }\n \n+        // Check for allowed empty method or ctor blocks.\n+        if (emptyMethodBlockCheck(aAST, parentType)\n+            || emptyCtorBlockCheck(aAST, parentType))\n+        {\n+            return;\n+        }\n+\n         final String[] lines \u003d getLines();\n         final String line \u003d lines[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         final int after \u003d aAST.getColumnNo() + aAST.getText().length();\n \n         if ((before \u003e\u003d 0) \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n                     \"ws.notPreceded\", new Object[]{aAST.getText()});\n         }\n \n         if (after \u003e\u003d line.length()) {\n             return;\n         }\n \n         final char nextChar \u003d line.charAt(after);\n         if (!Character.isWhitespace(nextChar)\n             // Check for \"return;\"\n             \u0026\u0026 !((type \u003d\u003d TokenTypes.LITERAL_RETURN)\n                 \u0026\u0026 (aAST.getFirstChild().getType() \u003d\u003d TokenTypes.SEMI))\n             // Check for \"})\" or \"};\" or \"},\". Happens with anon-inners\n             \u0026\u0026 !((type \u003d\u003d TokenTypes.RCURLY)\n                 \u0026\u0026 ((nextChar \u003d\u003d \u0027)\u0027)\n                     || (nextChar \u003d\u003d \u0027;\u0027)\n                     || (nextChar \u003d\u003d \u0027,\u0027))))\n         {\n             log(\n                 aAST.getLineNo(),\n                 aAST.getColumnNo() + aAST.getText().length(),\n                 \"ws.notFollowed\",\n                 new Object[] {aAST.getText()});\n         }\n     }\n\\ No newline at end of file\n"
    },
    "865ba5284aace7651f93dc81b0c196d1316a9fdd": {
      "type": "Ybodychange",
      "commitMessage": "Changes for grammer to keep as much text in AST tree as we can.\nFor now I do nothing with this/super in (SUPER_)CTOR_CALL.\nShould think more about this.\n\nAlso I\u0027ve changed grammer to not generate extends/implement cleases\nif there is no such in the code.\n\nMade some refactoring for build.xml to make possible to redirect build\noutput to custom directory (and we used too much hardcoded paths there\n:)\n\nIt looks like this is my last commit before vacation, so I hope\nI will break nothing :)\n",
      "commitDate": 1124261720000,
      "commitName": "865ba5284aace7651f93dc81b0c196d1316a9fdd",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1113353891000,
      "commitNameOld": "d7df762a65d0b123331588b5da385ac00c40b598",
      "commitAuthorOld": "Michael Studman",
      "daysBetweenCommits": 126.25,
      "commitsBetweenForRepo": 110,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,66 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final int type \u003d aAST.getType();\n         final int parentType \u003d aAST.getParent().getType();\n \n         // Check for CURLY in array initializer\n         if ((type \u003d\u003d TokenTypes.RCURLY || type \u003d\u003d TokenTypes.LCURLY)\n             \u0026\u0026 (parentType \u003d\u003d TokenTypes.ARRAY_INIT))\n         {\n             return;\n         }\n \n         // Check for import pkg.name.*;\n         if ((type \u003d\u003d TokenTypes.STAR)\n             \u0026\u0026 (parentType \u003d\u003d TokenTypes.DOT))\n         {\n             return;\n         }\n \n         // Check for an SLIST that has a parent CASE_GROUP. It is not a \u0027{\u0027.\n         if ((type \u003d\u003d TokenTypes.SLIST)\n             \u0026\u0026 (parentType \u003d\u003d TokenTypes.CASE_GROUP))\n         {\n             return;\n         }\n \n+        //we do not want to check colon for cases and defaults\n+        if (type \u003d\u003d TokenTypes.COLON\n+            \u0026\u0026 (parentType \u003d\u003d TokenTypes.LITERAL_DEFAULT\n+                || parentType \u003d\u003d TokenTypes.LITERAL_CASE))\n+        {\n+            return;\n+        }\n+\n         final String[] lines \u003d getLines();\n         final String line \u003d lines[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         final int after \u003d aAST.getColumnNo() + aAST.getText().length();\n \n         if ((before \u003e\u003d 0) \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n                     \"ws.notPreceded\", new Object[]{aAST.getText()});\n         }\n \n         if (after \u003e\u003d line.length()) {\n             return;\n         }\n \n         final char nextChar \u003d line.charAt(after);\n         if (!Character.isWhitespace(nextChar)\n             // Check for \"return;\"\n             \u0026\u0026 !((type \u003d\u003d TokenTypes.LITERAL_RETURN)\n                 \u0026\u0026 (aAST.getFirstChild().getType() \u003d\u003d TokenTypes.SEMI))\n             // Check for \"})\" or \"};\" or \"},\". Happens with anon-inners\n             \u0026\u0026 !((type \u003d\u003d TokenTypes.RCURLY)\n                 \u0026\u0026 ((nextChar \u003d\u003d \u0027)\u0027)\n                     || (nextChar \u003d\u003d \u0027;\u0027)\n                     || (nextChar \u003d\u003d \u0027,\u0027))))\n         {\n             log(\n                 aAST.getLineNo(),\n                 aAST.getColumnNo() + aAST.getText().length(),\n                 \"ws.notFollowed\",\n                 new Object[] {aAST.getText()});\n         }\n     }\n\\ No newline at end of file\n"
    },
    "e55435125ea57e96f0bf876dd13e78b0ae02cd52": {
      "type": "Ybodychange",
      "commitMessage": "corrected misspelling of \"precede\", bug 744342\n",
      "commitDate": 1058178241000,
      "commitName": "e55435125ea57e96f0bf876dd13e78b0ae02cd52",
      "commitAuthor": "Rick Giles",
      "commitDateOld": 1056711878000,
      "commitNameOld": "768256c32a3e397f837ce27602bda49e3c5e0062",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 16.97,
      "commitsBetweenForRepo": 66,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final int type \u003d aAST.getType();\n         final int parentType \u003d aAST.getParent().getType();\n \n         // Check for CURLY in array initializer\n         if ((type \u003d\u003d TokenTypes.RCURLY || type \u003d\u003d TokenTypes.LCURLY)\n             \u0026\u0026 (parentType \u003d\u003d TokenTypes.ARRAY_INIT))\n         {\n             return;\n         }\n \n         // Check for import pkg.name.*;\n         if ((type \u003d\u003d TokenTypes.STAR)\n             \u0026\u0026 (parentType \u003d\u003d TokenTypes.DOT))\n         {\n             return;\n         }\n \n         // Check for an SLIST that has a parent CASE_GROUP. It is not a \u0027{\u0027.\n         if ((type \u003d\u003d TokenTypes.SLIST)\n             \u0026\u0026 (parentType \u003d\u003d TokenTypes.CASE_GROUP))\n         {\n             return;\n         }\n \n         final String[] lines \u003d getLines();\n         final String line \u003d lines[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         final int after \u003d aAST.getColumnNo() + aAST.getText().length();\n \n         if ((before \u003e\u003d 0) \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n-                    \"ws.notPreceeded\", new Object[]{aAST.getText()});\n+                    \"ws.notPreceded\", new Object[]{aAST.getText()});\n         }\n \n         if (after \u003e\u003d line.length()) {\n             return;\n         }\n \n         final char nextChar \u003d line.charAt(after);\n         if (!Character.isWhitespace(nextChar)\n             // Check for \"return;\"\n             \u0026\u0026 !((type \u003d\u003d TokenTypes.LITERAL_RETURN)\n                 \u0026\u0026 (aAST.getFirstChild().getType() \u003d\u003d TokenTypes.SEMI))\n             // Check for \"})\" or \"};\" or \"},\". Happens with anon-inners\n             \u0026\u0026 !((type \u003d\u003d TokenTypes.RCURLY)\n                 \u0026\u0026 ((nextChar \u003d\u003d \u0027)\u0027)\n                     || (nextChar \u003d\u003d \u0027;\u0027)\n                     || (nextChar \u003d\u003d \u0027,\u0027))))\n         {\n             log(\n                 aAST.getLineNo(),\n                 aAST.getColumnNo() + aAST.getText().length(),\n                 \"ws.notFollowed\",\n                 new Object[] {aAST.getText()});\n         }\n     }\n\\ No newline at end of file\n"
    },
    "2e8126e99047befc39560342981b0b8e7cabea21": {
      "type": "Yfilerename",
      "commitMessage": "Refactored the Whitespace checks\n",
      "commitDate": 1054727729000,
      "commitName": "2e8126e99047befc39560342981b0b8e7cabea21",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1054723367000,
      "commitNameOld": "3bd6412e39a141b980901f291391ff1bcc4a61f3",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "d31d4220cc7f9cf03fe9e4cd0fe7d9e305ffe096": {
      "type": "Ybodychange",
      "commitMessage": "changed the logic for LCURLY/RCURLY a bit\nfixes the problems reported on devel mailing list\n",
      "commitDate": 1042981350000,
      "commitName": "d31d4220cc7f9cf03fe9e4cd0fe7d9e305ffe096",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": 1039999056000,
      "commitNameOld": "fa0c0353c280c30f2d1cfda01ecfe6597ff46f6b",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 34.52,
      "commitsBetweenForRepo": 146,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,58 @@\n     public void visitToken(DetailAST aAST)\n     {\n-        // Check for RCURLY in array initializer\n-        if ((aAST.getType() \u003d\u003d TokenTypes.RCURLY)\n-            \u0026\u0026 (aAST.getParent().getType() \u003d\u003d TokenTypes.ARRAY_INIT))\n+        final int type \u003d aAST.getType();\n+        final int parentType \u003d aAST.getParent().getType();\n+\n+        // Check for CURLY in array initializer\n+        if ((type \u003d\u003d TokenTypes.RCURLY || type \u003d\u003d TokenTypes.LCURLY)\n+            \u0026\u0026 (parentType \u003d\u003d TokenTypes.ARRAY_INIT))\n         {\n             return;\n         }\n \n         // Check for import pkg.name.*;\n-        if ((aAST.getType() \u003d\u003d TokenTypes.STAR)\n-            \u0026\u0026 (aAST.getParent().getType() \u003d\u003d TokenTypes.DOT))\n+        if ((type \u003d\u003d TokenTypes.STAR)\n+            \u0026\u0026 (parentType \u003d\u003d TokenTypes.DOT))\n         {\n             return;\n         }\n \n         // Check for an SLIST that has a parent CASE_GROUP. It is not a \u0027{\u0027.\n-        if ((aAST.getType() \u003d\u003d TokenTypes.SLIST)\n-            \u0026\u0026 (aAST.getParent().getType() \u003d\u003d TokenTypes.CASE_GROUP))\n+        if ((type \u003d\u003d TokenTypes.SLIST)\n+            \u0026\u0026 (parentType \u003d\u003d TokenTypes.CASE_GROUP))\n         {\n             return;\n         }\n         \n         final String[] lines \u003d getLines();\n         final String line \u003d lines[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         final int after \u003d aAST.getColumnNo() + aAST.getText().length();\n \n         if ((before \u003e\u003d 0) \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n                     \"ws.notPreceeded\", new Object[]{aAST.getText()});\n         }\n \n-        if ((after \u003c line.length())\n-            \u0026\u0026 !Character.isWhitespace(\n-                line.charAt(after)) // Check for \"return;\"\n-            \u0026\u0026 !((aAST.getType() \u003d\u003d TokenTypes.LITERAL_RETURN)\n+        if (after \u003e\u003d line.length()) {\n+            return;\n+        }\n+\n+        final char nextChar \u003d line.charAt(after);\n+        if (!Character.isWhitespace(nextChar)\n+            // Check for \"return;\"\n+            \u0026\u0026 !((type \u003d\u003d TokenTypes.LITERAL_RETURN)\n                 \u0026\u0026 (aAST.getFirstChild().getType() \u003d\u003d TokenTypes.SEMI))\n-            // Check for \"})\" or \"};\". Happens with anon-inners\n-            \u0026\u0026 !((aAST.getType() \u003d\u003d TokenTypes.RCURLY)\n-                \u0026\u0026 ((line.charAt(after) \u003d\u003d \u0027)\u0027)\n-                    || (line.charAt(after) \u003d\u003d \u0027;\u0027))))\n+            // Check for \"})\" or \"};\" or \"},\". Happens with anon-inners\n+            \u0026\u0026 !((type \u003d\u003d TokenTypes.RCURLY)\n+                \u0026\u0026 ((nextChar \u003d\u003d \u0027)\u0027)\n+                    || (nextChar \u003d\u003d \u0027;\u0027)\n+                    || (nextChar \u003d\u003d \u0027,\u0027))))\n         {\n             log(\n                 aAST.getLineNo(),\n                 aAST.getColumnNo() + aAST.getText().length(),\n                 \"ws.notFollowed\",\n                 new Object[] {aAST.getText()});\n         }\n     }\n\\ No newline at end of file\n"
    },
    "6a5a68f6d8768a7dcec7c1a4b6e1cd478cd02c46": {
      "type": "Ybodychange",
      "commitMessage": "Fixed bug in handling \u0027{\u0027 for whitespace checking.\n",
      "commitDate": 1038038930000,
      "commitName": "6a5a68f6d8768a7dcec7c1a4b6e1cd478cd02c46",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1038038065000,
      "commitNameOld": "aa1032931c3bcb327e77c5d21f63f48a27e947a5",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,50 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // Check for RCURLY in array initializer\n         if ((aAST.getType() \u003d\u003d TokenTypes.RCURLY)\n             \u0026\u0026 (aAST.getParent().getType() \u003d\u003d TokenTypes.ARRAY_INIT))\n         {\n             return;\n         }\n \n         // Check for import pkg.name.*;\n         if ((aAST.getType() \u003d\u003d TokenTypes.STAR)\n             \u0026\u0026 (aAST.getParent().getType() \u003d\u003d TokenTypes.DOT))\n         {\n             return;\n         }\n \n+        // Check for an SLIST that has a parent CASE_GROUP. It is not a \u0027{\u0027.\n+        if ((aAST.getType() \u003d\u003d TokenTypes.SLIST)\n+            \u0026\u0026 (aAST.getParent().getType() \u003d\u003d TokenTypes.CASE_GROUP))\n+        {\n+            return;\n+        }\n+        \n         final String[] lines \u003d getLines();\n         final String line \u003d lines[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         final int after \u003d aAST.getColumnNo() + aAST.getText().length();\n \n         if ((before \u003e\u003d 0) \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n                     \"ws.notPreceeded\", new Object[]{aAST.getText()});\n         }\n \n         if ((after \u003c line.length())\n             \u0026\u0026 !Character.isWhitespace(\n                 line.charAt(after)) // Check for \"return;\"\n             \u0026\u0026 !((aAST.getType() \u003d\u003d TokenTypes.LITERAL_RETURN)\n                 \u0026\u0026 (aAST.getFirstChild().getType() \u003d\u003d TokenTypes.SEMI))\n             // Check for \"})\" or \"};\". Happens with anon-inners\n             \u0026\u0026 !((aAST.getType() \u003d\u003d TokenTypes.RCURLY)\n                 \u0026\u0026 ((line.charAt(after) \u003d\u003d \u0027)\u0027)\n                     || (line.charAt(after) \u003d\u003d \u0027;\u0027))))\n         {\n             log(\n                 aAST.getLineNo(),\n                 aAST.getColumnNo() + aAST.getText().length(),\n                 \"ws.notFollowed\",\n                 new Object[] {aAST.getText()});\n         }\n     }\n\\ No newline at end of file\n"
    },
    "e4a4b6dc01240034cacf0886862805e3dcc58a93": {
      "type": "Ybodychange",
      "commitMessage": "Small bugfix\n",
      "commitDate": 1038019905000,
      "commitName": "e4a4b6dc01240034cacf0886862805e3dcc58a93",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1038012820000,
      "commitNameOld": "59378eb655ad45ca3f6e32b050882c85156d62ff",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,43 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // Check for RCURLY in array initializer\n         if ((aAST.getType() \u003d\u003d TokenTypes.RCURLY)\n             \u0026\u0026 (aAST.getParent().getType() \u003d\u003d TokenTypes.ARRAY_INIT))\n         {\n             return;\n         }\n \n         // Check for import pkg.name.*;\n         if ((aAST.getType() \u003d\u003d TokenTypes.STAR)\n             \u0026\u0026 (aAST.getParent().getType() \u003d\u003d TokenTypes.DOT))\n         {\n             return;\n         }\n         \n         final String[] lines \u003d getLines();\n         final String line \u003d lines[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         final int after \u003d aAST.getColumnNo() + aAST.getText().length();\n \n         if ((before \u003e\u003d 0) \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n                     \"ws.notPreceeded\", new Object[]{aAST.getText()});\n         }\n \n         if ((after \u003c line.length())\n-            \u0026\u0026 !Character.isWhitespace(line.charAt(after))\n-            // Check for \"return;\"\n+            \u0026\u0026 !Character.isWhitespace(\n+                line.charAt(after)) // Check for \"return;\"\n             \u0026\u0026 !((aAST.getType() \u003d\u003d TokenTypes.LITERAL_RETURN)\n                 \u0026\u0026 (aAST.getFirstChild().getType() \u003d\u003d TokenTypes.SEMI))\n-            // Check for \"})\". Happens with anon-inners\n+            // Check for \"})\" or \"};\". Happens with anon-inners\n             \u0026\u0026 !((aAST.getType() \u003d\u003d TokenTypes.RCURLY)\n-                \u0026\u0026 (line.charAt(after) \u003d\u003d \u0027)\u0027)))\n+                \u0026\u0026 ((line.charAt(after) \u003d\u003d \u0027)\u0027)\n+                    || (line.charAt(after) \u003d\u003d \u0027;\u0027))))\n         {\n-            log(aAST.getLineNo(), aAST.getColumnNo() + aAST.getText().length(),\n-                    \"ws.notFollowed\", new Object[]{aAST.getText()});\n+            log(\n+                aAST.getLineNo(),\n+                aAST.getColumnNo() + aAST.getText().length(),\n+                \"ws.notFollowed\",\n+                new Object[] { aAST.getText()});\n         }\n     }\n\\ No newline at end of file\n"
    },
    "59378eb655ad45ca3f6e32b050882c85156d62ff": {
      "type": "Ybodychange",
      "commitMessage": "Small bugfix\n",
      "commitDate": 1038012820000,
      "commitName": "59378eb655ad45ca3f6e32b050882c85156d62ff",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1037974477000,
      "commitNameOld": "b787d5ed90d64e3475286ff2ca5a8cbf65d5487e",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.44,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,39 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // Check for RCURLY in array initializer\n         if ((aAST.getType() \u003d\u003d TokenTypes.RCURLY)\n             \u0026\u0026 (aAST.getParent().getType() \u003d\u003d TokenTypes.ARRAY_INIT))\n         {\n             return;\n         }\n \n         // Check for import pkg.name.*;\n         if ((aAST.getType() \u003d\u003d TokenTypes.STAR)\n             \u0026\u0026 (aAST.getParent().getType() \u003d\u003d TokenTypes.DOT))\n         {\n             return;\n         }\n         \n         final String[] lines \u003d getLines();\n         final String line \u003d lines[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         final int after \u003d aAST.getColumnNo() + aAST.getText().length();\n \n         if ((before \u003e\u003d 0) \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n                     \"ws.notPreceeded\", new Object[]{aAST.getText()});\n         }\n \n         if ((after \u003c line.length())\n             \u0026\u0026 !Character.isWhitespace(line.charAt(after))\n+            // Check for \"return;\"\n             \u0026\u0026 !((aAST.getType() \u003d\u003d TokenTypes.LITERAL_RETURN)\n-                 \u0026\u0026 (aAST.getFirstChild().getType() \u003d\u003d TokenTypes.SEMI)))\n+                \u0026\u0026 (aAST.getFirstChild().getType() \u003d\u003d TokenTypes.SEMI))\n+            // Check for \"})\". Happens with anon-inners\n+            \u0026\u0026 !((aAST.getType() \u003d\u003d TokenTypes.RCURLY)\n+                \u0026\u0026 (line.charAt(after) \u003d\u003d \u0027)\u0027)))\n         {\n             log(aAST.getLineNo(), aAST.getColumnNo() + aAST.getText().length(),\n                     \"ws.notFollowed\", new Object[]{aAST.getText()});\n         }\n     }\n\\ No newline at end of file\n"
    },
    "b787d5ed90d64e3475286ff2ca5a8cbf65d5487e": {
      "type": "Ybodychange",
      "commitMessage": "Fix bug with needing whitespace around \u0027*\u0027 using in import blah.*;\n",
      "commitDate": 1037974477000,
      "commitName": "b787d5ed90d64e3475286ff2ca5a8cbf65d5487e",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1037161281000,
      "commitNameOld": "4cbd709c019cf1b69796858506d673f7b66d37c7",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 9.41,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,35 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // Check for RCURLY in array initializer\n         if ((aAST.getType() \u003d\u003d TokenTypes.RCURLY)\n             \u0026\u0026 (aAST.getParent().getType() \u003d\u003d TokenTypes.ARRAY_INIT))\n         {\n             return;\n         }\n \n+        // Check for import pkg.name.*;\n+        if ((aAST.getType() \u003d\u003d TokenTypes.STAR)\n+            \u0026\u0026 (aAST.getParent().getType() \u003d\u003d TokenTypes.DOT))\n+        {\n+            return;\n+        }\n+        \n         final String[] lines \u003d getLines();\n         final String line \u003d lines[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         final int after \u003d aAST.getColumnNo() + aAST.getText().length();\n \n         if ((before \u003e\u003d 0) \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n                     \"ws.notPreceeded\", new Object[]{aAST.getText()});\n         }\n \n         if ((after \u003c line.length())\n             \u0026\u0026 !Character.isWhitespace(line.charAt(after))\n             \u0026\u0026 !((aAST.getType() \u003d\u003d TokenTypes.LITERAL_RETURN)\n                  \u0026\u0026 (aAST.getFirstChild().getType() \u003d\u003d TokenTypes.SEMI)))\n         {\n             log(aAST.getLineNo(), aAST.getColumnNo() + aAST.getText().length(),\n                     \"ws.notFollowed\", new Object[]{aAST.getText()});\n         }\n     }\n\\ No newline at end of file\n"
    },
    "4cbd709c019cf1b69796858506d673f7b66d37c7": {
      "type": "Ybodychange",
      "commitMessage": "This is a really enjoyable commit to make. I have finally got to remove the\nugly Verifier class. The only remaining check are based on the new fileset\ncheck that Lars putting together. Magic. :-)\n",
      "commitDate": 1037161281000,
      "commitName": "4cbd709c019cf1b69796858506d673f7b66d37c7",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1037059315000,
      "commitNameOld": "a298a50d48358e58be31eaea6b9f0e263f5f046e",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 1.18,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // Check for RCURLY in array initializer\n-        if ((aAST.getType() \u003d\u003d RCURLY)\n-            \u0026\u0026 (aAST.getParent().getType() \u003d\u003d ARRAY_INIT))\n+        if ((aAST.getType() \u003d\u003d TokenTypes.RCURLY)\n+            \u0026\u0026 (aAST.getParent().getType() \u003d\u003d TokenTypes.ARRAY_INIT))\n         {\n             return;\n         }\n \n         final String[] lines \u003d getLines();\n         final String line \u003d lines[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         final int after \u003d aAST.getColumnNo() + aAST.getText().length();\n \n         if ((before \u003e\u003d 0) \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n                     \"ws.notPreceeded\", new Object[]{aAST.getText()});\n         }\n \n         if ((after \u003c line.length())\n             \u0026\u0026 !Character.isWhitespace(line.charAt(after))\n-            \u0026\u0026 !((aAST.getType() \u003d\u003d LITERAL_return)\n+            \u0026\u0026 !((aAST.getType() \u003d\u003d TokenTypes.LITERAL_RETURN)\n                  \u0026\u0026 (aAST.getFirstChild().getType() \u003d\u003d TokenTypes.SEMI)))\n         {\n             log(aAST.getLineNo(), aAST.getColumnNo() + aAST.getText().length(),\n                     \"ws.notFollowed\", new Object[]{aAST.getText()});\n         }\n     }\n\\ No newline at end of file\n"
    },
    "a298a50d48358e58be31eaea6b9f0e263f5f046e": {
      "type": "Ybodychange",
      "commitMessage": "correction to handle SEMI after LITERAL_RETURN\n",
      "commitDate": 1037059315000,
      "commitName": "a298a50d48358e58be31eaea6b9f0e263f5f046e",
      "commitAuthor": "Rick Giles",
      "commitDateOld": 1034638571000,
      "commitNameOld": "696e7f063faa55192160fc78c7f06c4ccbbc1fcf",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 28.02,
      "commitsBetweenForRepo": 154,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // Check for RCURLY in array initializer\n         if ((aAST.getType() \u003d\u003d RCURLY)\n             \u0026\u0026 (aAST.getParent().getType() \u003d\u003d ARRAY_INIT))\n         {\n             return;\n         }\n \n         final String[] lines \u003d getLines();\n         final String line \u003d lines[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         final int after \u003d aAST.getColumnNo() + aAST.getText().length();\n \n         if ((before \u003e\u003d 0) \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n                     \"ws.notPreceeded\", new Object[]{aAST.getText()});\n         }\n \n         if ((after \u003c line.length())\n             \u0026\u0026 !Character.isWhitespace(line.charAt(after))\n             \u0026\u0026 !((aAST.getType() \u003d\u003d LITERAL_return)\n-                 \u0026\u0026 (aAST.getFirstChild() \u003d\u003d null)))\n+                 \u0026\u0026 (aAST.getFirstChild().getType() \u003d\u003d TokenTypes.SEMI)))\n         {\n             log(aAST.getLineNo(), aAST.getColumnNo() + aAST.getText().length(),\n                     \"ws.notFollowed\", new Object[]{aAST.getText()});\n         }\n     }\n\\ No newline at end of file\n"
    },
    "b1cfd257eb46dba42033984145134eae5880f657": {
      "type": "Ybodychange",
      "commitMessage": "Major refactor to implement the RightCurly check. Required the ANTLR grammar\nto be worked to:\n\n- Not silently eat tokens (more to be done)\n\n- Not get the token tree out of order for try/finally\n",
      "commitDate": 1033982236000,
      "commitName": "b1cfd257eb46dba42033984145134eae5880f657",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1033462046000,
      "commitNameOld": "eb7b7bfd3e63a926c3f3b2801d519caa0e1fffc3",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 6.02,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,28 @@\n     public void visitToken(DetailAST aAST)\n     {\n+        // Check for RCURLY in array initializer\n+        if ((aAST.getType() \u003d\u003d RCURLY)\n+            \u0026\u0026 (aAST.getParent().getType() \u003d\u003d ARRAY_INIT))\n+        {\n+            return;\n+        }\n+\n         final String[] lines \u003d getLines();\n         final String line \u003d lines[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         final int after \u003d aAST.getColumnNo() + aAST.getText().length();\n \n         if ((before \u003e\u003d 0) \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n                     \"ws.notPreceeded\", new Object[]{aAST.getText()});\n         }\n \n         if ((after \u003c line.length())\n             \u0026\u0026 !Character.isWhitespace(line.charAt(after))\n             \u0026\u0026 !((aAST.getType() \u003d\u003d LITERAL_return)\n                  \u0026\u0026 (aAST.getFirstChild() \u003d\u003d null)))\n         {\n             log(aAST.getLineNo(), aAST.getColumnNo() + aAST.getText().length(),\n                     \"ws.notFollowed\", new Object[]{aAST.getText()});\n         }\n     }\n\\ No newline at end of file\n"
    },
    "d077a402da51bb238a7da99d5e2542437b145192": {
      "type": "Ybodychange",
      "commitMessage": "Added a lot more checks for name format. Also endeavouring to get Checkstyle\npassing Javadoc again before it gets out of control.\n",
      "commitDate": 1033108888000,
      "commitName": "d077a402da51bb238a7da99d5e2542437b145192",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1032703232000,
      "commitNameOld": "daf94e4e8e5b97ccbf9cdf7b45b2f054772f7de1",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 4.7,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,21 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final String[] lines \u003d getLines();\n         final String line \u003d lines[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         final int after \u003d aAST.getColumnNo() + aAST.getText().length();\n \n         if ((before \u003e\u003d 0) \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n                     \"ws.notPreceeded\", new Object[]{aAST.getText()});\n         }\n \n         if ((after \u003c line.length())\n             \u0026\u0026 !Character.isWhitespace(line.charAt(after))\n-            \u0026\u0026 !(aAST.getType() \u003d\u003d LITERAL_return \u0026\u0026 aAST.getFirstChild() \u003d\u003d null))\n+            \u0026\u0026 !((aAST.getType() \u003d\u003d LITERAL_return)\n+                 \u0026\u0026 (aAST.getFirstChild() \u003d\u003d null)))\n         {\n             log(aAST.getLineNo(), aAST.getColumnNo() + aAST.getText().length(),\n                     \"ws.notFollowed\", new Object[]{aAST.getText()});\n         }\n     }\n\\ No newline at end of file\n"
    },
    "8313819dcbf3e9cc0700120014c78a99706d88bb": {
      "type": "Ybodychange",
      "commitMessage": "WhitespaceAround deals with \u0027return;\u0027\n",
      "commitDate": 1032701397000,
      "commitName": "8313819dcbf3e9cc0700120014c78a99706d88bb",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": 1032697675000,
      "commitNameOld": "0fdfc2f36086a108407fc7d51edc5b8c934b658a",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,20 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final String[] lines \u003d getLines();\n         final String line \u003d lines[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         final int after \u003d aAST.getColumnNo() + aAST.getText().length();\n \n         if ((before \u003e\u003d 0) \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n                     \"ws.notPreceeded\", new Object[]{aAST.getText()});\n         }\n \n         if ((after \u003c line.length())\n-            \u0026\u0026 !Character.isWhitespace(line.charAt(after)))\n+            \u0026\u0026 !Character.isWhitespace(line.charAt(after))\n+            \u0026\u0026 !(aAST.getType() \u003d\u003d LITERAL_return \u0026\u0026 aAST.getFirstChild() \u003d\u003d null))\n         {\n             log(aAST.getLineNo(), aAST.getColumnNo() + aAST.getText().length(),\n                     \"ws.notFollowed\", new Object[]{aAST.getText()});\n         }\n     }\n\\ No newline at end of file\n"
    },
    "0fdfc2f36086a108407fc7d51edc5b8c934b658a": {
      "type": "Ybodychange",
      "commitMessage": "intruduced AbstractCheckTestCase to provide common functionality for\nall tests for Checks\n\nuse Java14 grammar in TreeWalker to be able to parse InputWhitespace.java\n\nimproved WhitespaceAroundCheck and added test\n",
      "commitDate": 1032697675000,
      "commitName": "0fdfc2f36086a108407fc7d51edc5b8c934b658a",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": 1032152891000,
      "commitNameOld": "ffb17cde0f6351bdf2f2e8cf655fa7f7a3cae827",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 6.31,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,19 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final String[] lines \u003d getLines();\n         final String line \u003d lines[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         final int after \u003d aAST.getColumnNo() + aAST.getText().length();\n \n-        // TODO: i18n\n         if ((before \u003e\u003d 0) \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n-            log(aAST.getLineNo(), \"NO LEADING SPACE for \" + aAST.getText());\n+            log(aAST.getLineNo(), aAST.getColumnNo(),\n+                    \"ws.notPreceeded\", new Object[]{aAST.getText()});\n         }\n \n         if ((after \u003c line.length())\n             \u0026\u0026 !Character.isWhitespace(line.charAt(after)))\n         {\n-            log(aAST.getLineNo(), \"NO TRAILING SPACE for \" + aAST.getText());\n+            log(aAST.getLineNo(), aAST.getColumnNo() + aAST.getText().length(),\n+                    \"ws.notFollowed\", new Object[]{aAST.getText()});\n         }\n     }\n\\ No newline at end of file\n"
    },
    "ffb17cde0f6351bdf2f2e8cf655fa7f7a3cae827": {
      "type": "Ybodychange",
      "commitMessage": "some javadoc and TODO comments\n",
      "commitDate": 1032152891000,
      "commitName": "ffb17cde0f6351bdf2f2e8cf655fa7f7a3cae827",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": 1032108959000,
      "commitNameOld": "1d528505f9e45f64c40700871823fa3f774abd5c",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 0.51,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,18 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final String[] lines \u003d getLines();\n         final String line \u003d lines[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         final int after \u003d aAST.getColumnNo() + aAST.getText().length();\n \n+        // TODO: i18n\n         if ((before \u003e\u003d 0) \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n             log(aAST.getLineNo(), \"NO LEADING SPACE for \" + aAST.getText());\n         }\n \n         if ((after \u003c line.length())\n             \u0026\u0026 !Character.isWhitespace(line.charAt(after)))\n         {\n             log(aAST.getLineNo(), \"NO TRAILING SPACE for \" + aAST.getText());\n         }\n     }\n\\ No newline at end of file\n"
    },
    "15b4a0f888fb1d5b374fdd5ae11ec1865113c30d": {
      "type": "Yintroduced",
      "commitMessage": "initial checkin of check implementations\n",
      "commitDate": 1032107737000,
      "commitName": "15b4a0f888fb1d5b374fdd5ae11ec1865113c30d",
      "commitAuthor": "Lars Kühne"
    }
  }
}