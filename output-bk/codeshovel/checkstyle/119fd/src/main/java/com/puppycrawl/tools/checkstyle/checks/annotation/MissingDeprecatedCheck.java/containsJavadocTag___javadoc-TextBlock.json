{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "MissingDeprecatedCheck.java",
  "functionName": "containsJavadocTag",
  "functionId": "containsJavadocTag___javadoc-TextBlock",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java",
  "functionStartLine": 204,
  "functionEndLine": 230,
  "changeHistory": [
    "e7c746899d1369f942388375b43b93fbef883f57",
    "07b24dd81c7648f093f2a789a7fa288d8e7eeef4",
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
    "82d8e91024a57a96fbb6410dacb29d6a3f582903",
    "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86",
    "0868085098dfde138eee8817c66cd4d214633403",
    "1bd7f9bdf3dc678b70e79481971aebc50db69dc7",
    "09a7ca60414ea04b64f45bb190eaa26c767086be",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767"
  ],
  "changeHistoryShort": {
    "e7c746899d1369f942388375b43b93fbef883f57": "Ybodychange",
    "07b24dd81c7648f093f2a789a7fa288d8e7eeef4": "Ybodychange",
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7": "Ybodychange",
    "82d8e91024a57a96fbb6410dacb29d6a3f582903": "Ybodychange",
    "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86": "Ybodychange",
    "0868085098dfde138eee8817c66cd4d214633403": "Ybodychange",
    "1bd7f9bdf3dc678b70e79481971aebc50db69dc7": "Ymultichange(Yparameterchange,Ybodychange)",
    "09a7ca60414ea04b64f45bb190eaa26c767086be": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e7c746899d1369f942388375b43b93fbef883f57": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3496: Enforce ReturnCount max\u003d1 in com.puppycrawl.tools.checkstyle.checks.annotation, com.puppycrawl.tools.checkstyle.ant\n",
      "commitDate": 1493349546000,
      "commitName": "e7c746899d1369f942388375b43b93fbef883f57",
      "commitAuthor": "Vladislav Lisetskii",
      "commitDateOld": 1485527514000,
      "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 90.53,
      "commitsBetweenForRepo": 334,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,27 @@\n     private boolean containsJavadocTag(final TextBlock javadoc) {\n-        if (javadoc \u003d\u003d null) {\n-            return false;\n-        }\n-\n-        final String[] lines \u003d javadoc.getText();\n-\n         boolean found \u003d false;\n+        if (javadoc !\u003d null) {\n+            final String[] lines \u003d javadoc.getText();\n+            int currentLine \u003d javadoc.getStartLineNo() - 1;\n \n-        int currentLine \u003d javadoc.getStartLineNo() - 1;\n+            for (int i \u003d 0; i \u003c lines.length; i++) {\n+                currentLine++;\n+                final String line \u003d lines[i];\n \n-        for (int i \u003d 0; i \u003c lines.length; i++) {\n-            currentLine++;\n-            final String line \u003d lines[i];\n+                final Matcher javadocNoArgMatcher \u003d MATCH_DEPRECATED.matcher(line);\n+                final Matcher noArgMultilineStart \u003d MATCH_DEPRECATED_MULTILINE_START.matcher(line);\n \n-            final Matcher javadocNoArgMatcher \u003d\n-                MATCH_DEPRECATED.matcher(line);\n-            final Matcher noArgMultilineStart \u003d MATCH_DEPRECATED_MULTILINE_START.matcher(line);\n-\n-            if (javadocNoArgMatcher.find()) {\n-                if (found) {\n-                    log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,\n-                        JavadocTagInfo.DEPRECATED.getText());\n+                if (javadocNoArgMatcher.find()) {\n+                    if (found) {\n+                        log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,\n+                                JavadocTagInfo.DEPRECATED.getText());\n+                    }\n+                    found \u003d true;\n                 }\n-                found \u003d true;\n-            }\n-            else if (noArgMultilineStart.find()) {\n-                found \u003d checkTagAtTheRestOfComment(lines, found, currentLine, i);\n+                else if (noArgMultilineStart.find()) {\n+                    found \u003d checkTagAtTheRestOfComment(lines, found, currentLine, i);\n+                }\n             }\n         }\n         return found;\n     }\n\\ No newline at end of file\n"
    },
    "07b24dd81c7648f093f2a789a7fa288d8e7eeef4": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1555: Fix various typos\n\nFixes some `SpellCheckingInspection` inspection violations.\n\nDescription:\n\u003eSpellchecker inspection helps locate typos and misspelling in your code, comments and literals.\n",
      "commitDate": 1440827623000,
      "commitName": "07b24dd81c7648f093f2a789a7fa288d8e7eeef4",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440827451000,
      "commitNameOld": "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,32 @@\n     private boolean containsJavadocTag(final TextBlock javadoc) {\n         if (javadoc \u003d\u003d null) {\n             return false;\n         }\n \n         final String[] lines \u003d javadoc.getText();\n \n         boolean found \u003d false;\n \n         int currentLine \u003d javadoc.getStartLineNo() - 1;\n \n         for (int i \u003d 0; i \u003c lines.length; i++) {\n             currentLine++;\n             final String line \u003d lines[i];\n \n-            final Matcher javadocNoargMatcher \u003d\n+            final Matcher javadocNoArgMatcher \u003d\n                 MATCH_DEPRECATED.matcher(line);\n-            final Matcher noargMultilineStart \u003d MATCH_DEPRECATED_MULTILINE_START.matcher(line);\n+            final Matcher noArgMultilineStart \u003d MATCH_DEPRECATED_MULTILINE_START.matcher(line);\n \n-            if (javadocNoargMatcher.find()) {\n+            if (javadocNoArgMatcher.find()) {\n                 if (found) {\n                     log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,\n                         JavadocTagInfo.DEPRECATED.getText());\n                 }\n                 found \u003d true;\n             }\n-            else if (noargMultilineStart.find()) {\n+            else if (noArgMultilineStart.find()) {\n                 found \u003d checkTagAtTheRestOfComment(lines, found, currentLine, i);\n-\n             }\n         }\n         return found;\n     }\n\\ No newline at end of file\n"
    },
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1555: Rename methods returning boolean to use question word\n\nFixes some `BooleanMethodNameMustStartWithQuestion` inspection violations.\n\nDescription:\n\u003eReports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection.\n",
      "commitDate": 1440827451000,
      "commitName": "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440677821000,
      "commitNameOld": "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 1.73,
      "commitsBetweenForRepo": 92,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n     private boolean containsJavadocTag(final TextBlock javadoc) {\n         if (javadoc \u003d\u003d null) {\n             return false;\n         }\n \n         final String[] lines \u003d javadoc.getText();\n \n         boolean found \u003d false;\n \n         int currentLine \u003d javadoc.getStartLineNo() - 1;\n \n         for (int i \u003d 0; i \u003c lines.length; i++) {\n             currentLine++;\n             final String line \u003d lines[i];\n \n             final Matcher javadocNoargMatcher \u003d\n                 MATCH_DEPRECATED.matcher(line);\n             final Matcher noargMultilineStart \u003d MATCH_DEPRECATED_MULTILINE_START.matcher(line);\n \n             if (javadocNoargMatcher.find()) {\n                 if (found) {\n                     log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,\n                         JavadocTagInfo.DEPRECATED.getText());\n                 }\n                 found \u003d true;\n             }\n             else if (noargMultilineStart.find()) {\n-                found \u003d validateTagAtTheRestOfComment(lines, found, currentLine, i);\n+                found \u003d checkTagAtTheRestOfComment(lines, found, currentLine, i);\n \n             }\n         }\n         return found;\n     }\n\\ No newline at end of file\n"
    },
    "82d8e91024a57a96fbb6410dacb29d6a3f582903": {
      "type": "Ybodychange",
      "commitMessage": "Remove unnecessary qualifiers. #1555\n\nFixes `UnnecessarilyQualifiedStaticUsage` inspection violations.\n\nDescription:\n\u003eReports calls to static methods or accesses of static fields on the current class which are qualified with the class name. Such qualification is unnecessary, and may be safely removed.\n",
      "commitDate": 1439324041000,
      "commitName": "82d8e91024a57a96fbb6410dacb29d6a3f582903",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1439295751000,
      "commitNameOld": "f5f1d754e28ee1e3c5472fd4d5292f24a335e64e",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.33,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,33 @@\n     private boolean containsJavadocTag(final TextBlock javadoc) {\n         if (javadoc \u003d\u003d null) {\n             return false;\n         }\n \n         final String[] lines \u003d javadoc.getText();\n \n         boolean found \u003d false;\n \n         int currentLine \u003d javadoc.getStartLineNo() - 1;\n \n         for (int i \u003d 0; i \u003c lines.length; i++) {\n             currentLine++;\n             final String line \u003d lines[i];\n \n             final Matcher javadocNoargMatcher \u003d\n-                MissingDeprecatedCheck.MATCH_DEPRECATED.matcher(line);\n-            final Matcher noargMultilineStart \u003d\n-                MissingDeprecatedCheck\n-                    .MATCH_DEPRECATED_MULTILINE_START.matcher(line);\n+                MATCH_DEPRECATED.matcher(line);\n+            final Matcher noargMultilineStart \u003d MATCH_DEPRECATED_MULTILINE_START.matcher(line);\n \n             if (javadocNoargMatcher.find()) {\n                 if (found) {\n                     log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,\n                         JavadocTagInfo.DEPRECATED.getText());\n                 }\n                 found \u003d true;\n             }\n             else if (noargMultilineStart.find()) {\n                 found \u003d validateTagAtTheRestOfComment(lines, found, currentLine, i);\n \n             }\n         }\n         return found;\n     }\n\\ No newline at end of file\n"
    },
    "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86": {
      "type": "Ybodychange",
      "commitMessage": "Remove unnecessary this keyword. #1555\n\nFixes `UnnecessaryThis` inspection violations.\n\nDescription:\n\u003eReports on any unnecessary uses of this in the code. Using this to disambiguate a code reference may easily become unnecessary via automatic refactorings, and is discouraged by many coding styles.\n For example:\n ```\n this.a \u003d 3;\n ```\n",
      "commitDate": 1439131302000,
      "commitName": "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1438566537000,
      "commitNameOld": "693e8820d5a9fefebb8a3fb1661e5fbcb4432cfd",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 6.54,
      "commitsBetweenForRepo": 103,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     private boolean containsJavadocTag(final TextBlock javadoc) {\n         if (javadoc \u003d\u003d null) {\n             return false;\n         }\n \n         final String[] lines \u003d javadoc.getText();\n \n         boolean found \u003d false;\n \n         int currentLine \u003d javadoc.getStartLineNo() - 1;\n \n         for (int i \u003d 0; i \u003c lines.length; i++) {\n             currentLine++;\n             final String line \u003d lines[i];\n \n             final Matcher javadocNoargMatcher \u003d\n                 MissingDeprecatedCheck.MATCH_DEPRECATED.matcher(line);\n             final Matcher noargMultilineStart \u003d\n                 MissingDeprecatedCheck\n                     .MATCH_DEPRECATED_MULTILINE_START.matcher(line);\n \n             if (javadocNoargMatcher.find()) {\n                 if (found) {\n-                    this.log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,\n+                    log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,\n                         JavadocTagInfo.DEPRECATED.getText());\n                 }\n                 found \u003d true;\n             }\n             else if (noargMultilineStart.find()) {\n                 found \u003d validateTagAtTheRestOfComment(lines, found, currentLine, i);\n \n             }\n         }\n         return found;\n     }\n\\ No newline at end of file\n"
    },
    "0868085098dfde138eee8817c66cd4d214633403": {
      "type": "Ybodychange",
      "commitMessage": "MissingDeprecatedCheck  updated to follow Cyclomatic Complexity rule. #954\n",
      "commitDate": 1434261690000,
      "commitName": "0868085098dfde138eee8817c66cd4d214633403",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": 1431863229000,
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 27.76,
      "commitsBetweenForRepo": 131,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,35 @@\n     private boolean containsJavadocTag(final TextBlock javadoc) {\n         if (javadoc \u003d\u003d null) {\n             return false;\n         }\n \n         final String[] lines \u003d javadoc.getText();\n \n         boolean found \u003d false;\n \n         int currentLine \u003d javadoc.getStartLineNo() - 1;\n \n         for (int i \u003d 0; i \u003c lines.length; i++) {\n             currentLine++;\n             final String line \u003d lines[i];\n \n             final Matcher javadocNoargMatcher \u003d\n                 MissingDeprecatedCheck.MATCH_DEPRECATED.matcher(line);\n             final Matcher noargMultilineStart \u003d\n                 MissingDeprecatedCheck\n                     .MATCH_DEPRECATED_MULTILINE_START.matcher(line);\n \n             if (javadocNoargMatcher.find()) {\n                 if (found) {\n                     this.log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,\n                         JavadocTagInfo.DEPRECATED.getText());\n                 }\n                 found \u003d true;\n             }\n             else if (noargMultilineStart.find()) {\n-                // Look for the rest of the comment if all we saw was\n-                // the tag and the name. Stop when we see \u0027*/\u0027 (end of\n-                // Javadoc), \u0027@\u0027 (start of next tag), or anything that\u0027s\n-                // not whitespace or \u0027*\u0027 characters.\n+                found \u003d validateTagAtTheRestOfComment(lines, found, currentLine, i);\n \n-                for (int reindex \u003d i + 1;\n-                    reindex \u003c lines.length; reindex++) {\n-                    final Matcher multilineCont \u003d\n-                        MissingDeprecatedCheck.MATCH_DEPRECATED_MULTILINE_CONT\n-                        .matcher(lines[reindex]);\n-\n-                    if (multilineCont.find()) {\n-                        reindex \u003d lines.length;\n-                        final String lFin \u003d multilineCont.group(1);\n-                        if (!lFin.equals(MissingDeprecatedCheck.NEXT_TAG)\n-                            \u0026\u0026 !lFin.equals(MissingDeprecatedCheck.END_JAVADOC)) {\n-                            if (found) {\n-                                this.log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,\n-                                    JavadocTagInfo.DEPRECATED.getText());\n-                            }\n-                            found \u003d true;\n-                        }\n-                        else {\n-                            this.log(currentLine, MSG_KEY_JAVADOC_MISSING);\n-                            if (found) {\n-                                this.log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,\n-                                    JavadocTagInfo.DEPRECATED.getText());\n-                            }\n-                            found \u003d true;\n-                        }\n-                    }\n-                }\n             }\n         }\n         return found;\n     }\n\\ No newline at end of file\n"
    },
    "1bd7f9bdf3dc678b70e79481971aebc50db69dc7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, annotation, #512\n",
      "commitDate": 1421678156000,
      "commitName": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "09a7ca60414ea04b64f45bb190eaa26c767086be": {
      "type": "Ybodychange",
      "commitMessage": "Issue #537 refactoring: remove copy-paste of messages from UTests\n",
      "commitDate": 1419808443000,
      "commitName": "09a7ca60414ea04b64f45bb190eaa26c767086be",
      "commitAuthor": "ychulovskyy",
      "commitDateOld": 1393953491000,
      "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthorOld": "Ivan Sopov",
      "daysBetweenCommits": 299.25,
      "commitsBetweenForRepo": 421,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,68 @@\n     private boolean containsJavadocTag(final TextBlock aJavadoc)\n     {\n         if (aJavadoc \u003d\u003d null) {\n             return false;\n         }\n \n         final String[] lines \u003d aJavadoc.getText();\n \n         boolean found \u003d false;\n \n         int currentLine \u003d aJavadoc.getStartLineNo() - 1;\n \n         for (int i \u003d 0; i \u003c lines.length; i++) {\n             currentLine++;\n             final String line \u003d lines[i];\n \n             final Matcher javadocNoargMatcher \u003d\n                 MissingDeprecatedCheck.MATCH_DEPRECATED.matcher(line);\n             final Matcher noargMultilineStart \u003d\n                 MissingDeprecatedCheck.\n                     MATCH_DEPRECATED_MULTILINE_START.matcher(line);\n \n             if (javadocNoargMatcher.find()) {\n                 if (found) {\n-                    this.log(currentLine, \"javadoc.duplicateTag\",\n+                    this.log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,\n                         JavadocTagInfo.DEPRECATED.getText());\n                 }\n                 found \u003d true;\n             }\n             else if (noargMultilineStart.find()) {\n                 // Look for the rest of the comment if all we saw was\n                 // the tag and the name. Stop when we see \u0027*/\u0027 (end of\n                 // Javadoc), \u0027@\u0027 (start of next tag), or anything that\u0027s\n                 // not whitespace or \u0027*\u0027 characters.\n \n                 for (int remIndex \u003d i + 1;\n                     remIndex \u003c lines.length; remIndex++)\n                 {\n                     final Matcher multilineCont \u003d\n                         MissingDeprecatedCheck.MATCH_DEPRECATED_MULTILINE_CONT\n                         .matcher(lines[remIndex]);\n \n                     if (multilineCont.find()) {\n                         remIndex \u003d lines.length;\n                         final String lFin \u003d multilineCont.group(1);\n                         if (!lFin.equals(MissingDeprecatedCheck.NEXT_TAG)\n                             \u0026\u0026 !lFin.equals(MissingDeprecatedCheck.END_JAVADOC))\n                         {\n                             if (found) {\n-                                this.log(currentLine, \"javadoc.duplicateTag\",\n+                                this.log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,\n                                     JavadocTagInfo.DEPRECATED.getText());\n                             }\n                             found \u003d true;\n                         }\n                         else {\n-                            this.log(currentLine, \"javadoc.missing\");\n+                            this.log(currentLine, MSG_KEY_JAVADOC_MISSING);\n                             if (found) {\n-                                this.log(currentLine, \"javadoc.duplicateTag\",\n+                                this.log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,\n                                     JavadocTagInfo.DEPRECATED.getText());\n                             }\n                             found \u003d true;\n                         }\n                     }\n                 }\n             }\n         }\n         return found;\n     }\n\\ No newline at end of file\n"
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767": {
      "type": "Yintroduced",
      "commitMessage": "record work on patch #2534038 from Travis for new annotation checks. Very good patch as usual from Travis. Shame on me for taking so long to apply it.\n",
      "commitDate": 1237805379000,
      "commitName": "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767",
      "commitAuthor": "Oliver Burn"
    }
  }
}