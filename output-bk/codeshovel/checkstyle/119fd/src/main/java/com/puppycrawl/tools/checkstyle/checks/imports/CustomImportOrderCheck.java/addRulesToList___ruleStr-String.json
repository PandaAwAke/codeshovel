{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "CustomImportOrderCheck.java",
  "functionName": "addRulesToList",
  "functionId": "addRulesToList___ruleStr-String",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java",
  "functionStartLine": 745,
  "functionEndLine": 765,
  "changeHistory": [
    "c57ee4b58a2758a3b8a83a1d14dc3c4835ae2077",
    "f24916302751c0e48d107b68a1b0d61aa81d32a8",
    "6f51fa7e63d3af55e2a6900d9aadb183ecf0cde8",
    "ac5dbc736320f6e5807cef97964a8a2928123687",
    "4ea1896f464b0f6c0ddfca3d8d9c9f84703bae5e",
    "1c42e3eeb9aeebc47b2373541c1cc8d311d8b671",
    "16dac636b246c658cad31ee9b2e45c53b851d4f2",
    "2a3be6769c4a97d090970ed52ca2333cb9aea706"
  ],
  "changeHistoryShort": {
    "c57ee4b58a2758a3b8a83a1d14dc3c4835ae2077": "Yrename",
    "f24916302751c0e48d107b68a1b0d61aa81d32a8": "Ybodychange",
    "6f51fa7e63d3af55e2a6900d9aadb183ecf0cde8": "Ybodychange",
    "ac5dbc736320f6e5807cef97964a8a2928123687": "Ybodychange",
    "4ea1896f464b0f6c0ddfca3d8d9c9f84703bae5e": "Ybodychange",
    "1c42e3eeb9aeebc47b2373541c1cc8d311d8b671": "Ybodychange",
    "16dac636b246c658cad31ee9b2e45c53b851d4f2": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "2a3be6769c4a97d090970ed52ca2333cb9aea706": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c57ee4b58a2758a3b8a83a1d14dc3c4835ae2077": {
      "type": "Yrename",
      "commitMessage": "Fix typos in import and java8 packages. #1555\n\nFixes some `SpellCheckingInspection` inspection violations.\n\nDescription:\n\u003eSpellchecker inspection helps locate typos and misspelling in your code, comments and literals.\n",
      "commitDate": 1440739618000,
      "commitName": "c57ee4b58a2758a3b8a83a1d14dc3c4835ae2077",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440677821000,
      "commitNameOld": "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 0.72,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n-    private void addRuleastoList(String ruleStr) {\n+    private void addRulesToList(String ruleStr) {\n         if (STATIC_RULE_GROUP.equals(ruleStr)\n                 || THIRD_PARTY_PACKAGE_RULE_GROUP.equals(ruleStr)\n                 || STANDARD_JAVA_PACKAGE_RULE_GROUP.equals(ruleStr)\n                 || SPECIAL_IMPORTS_RULE_GROUP.equals(ruleStr)) {\n             customImportOrderRules.add(ruleStr);\n \n         }\n         else if (ruleStr.startsWith(SAME_PACKAGE_RULE_GROUP)) {\n \n             final String rule \u003d ruleStr.substring(ruleStr.indexOf(\u0027(\u0027) + 1,\n                     ruleStr.indexOf(\u0027)\u0027));\n             samePackageMatchingDepth \u003d Integer.parseInt(rule);\n             if (samePackageMatchingDepth \u003c\u003d 0) {\n                 throw new IllegalArgumentException(\n                         \"SAME_PACKAGE rule parameter should be positive integer: \" + ruleStr);\n             }\n             customImportOrderRules.add(SAME_PACKAGE_RULE_GROUP);\n \n         }\n         else {\n             throw new IllegalStateException(\"Unexpected rule: \" + ruleStr);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "f24916302751c0e48d107b68a1b0d61aa81d32a8": {
      "type": "Ybodychange",
      "commitMessage": "Replace RuntimeException with IllegalStateException. #1555\n\nFixes `BadExceptionThrown` inspection violations.\n\nDescription:\n\u003eReports throw statements which throw inappropriate exceptions. One use of this inspection would be to warn of throw statements which throw overly generic exceptions (e.g. java.lang.Exception or java.io.IOException).\n",
      "commitDate": 1439011156000,
      "commitName": "f24916302751c0e48d107b68a1b0d61aa81d32a8",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1438566537000,
      "commitNameOld": "30438ebdf9fd28a94613e2aaecde776d906349a7",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 5.15,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n     private void addRuleastoList(String ruleStr) {\n         if (STATIC_RULE_GROUP.equals(ruleStr)\n                 || THIRD_PARTY_PACKAGE_RULE_GROUP.equals(ruleStr)\n                 || STANDARD_JAVA_PACKAGE_RULE_GROUP.equals(ruleStr)\n                 || SPECIAL_IMPORTS_RULE_GROUP.equals(ruleStr)) {\n             customImportOrderRules.add(ruleStr);\n \n         }\n         else if (ruleStr.startsWith(SAME_PACKAGE_RULE_GROUP)) {\n \n             final String rule \u003d ruleStr.substring(ruleStr.indexOf(\u0027(\u0027) + 1,\n                     ruleStr.indexOf(\u0027)\u0027));\n             samePackageMatchingDepth \u003d Integer.parseInt(rule);\n             if (samePackageMatchingDepth \u003c\u003d 0) {\n                 throw new IllegalArgumentException(\n                         \"SAME_PACKAGE rule parameter should be positive integer: \" + ruleStr);\n             }\n             customImportOrderRules.add(SAME_PACKAGE_RULE_GROUP);\n \n         }\n         else {\n-            throw new RuntimeException(\"Unexpected rule: \" + ruleStr);\n+            throw new IllegalStateException(\"Unexpected rule: \" + ruleStr);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "6f51fa7e63d3af55e2a6900d9aadb183ecf0cde8": {
      "type": "Ybodychange",
      "commitMessage": "Improved UT coverage for CustomImportOrder #1128\n",
      "commitDate": 1436323037000,
      "commitName": "6f51fa7e63d3af55e2a6900d9aadb183ecf0cde8",
      "commitAuthor": "Aleksandr Ivanov",
      "commitDateOld": 1436122690000,
      "commitNameOld": "ac5dbc736320f6e5807cef97964a8a2928123687",
      "commitAuthorOld": "Aleksandr Ivanov",
      "daysBetweenCommits": 2.32,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,24 @@\n     private void addRuleastoList(String ruleStr) {\n         if (STATIC_RULE_GROUP.equals(ruleStr)\n                 || THIRD_PARTY_PACKAGE_RULE_GROUP.equals(ruleStr)\n                 || STANDARD_JAVA_PACKAGE_RULE_GROUP.equals(ruleStr)\n                 || SPECIAL_IMPORTS_RULE_GROUP.equals(ruleStr)) {\n             customImportOrderRules.add(ruleStr);\n \n         }\n         else if (ruleStr.startsWith(SAME_PACKAGE_RULE_GROUP)) {\n \n             final String rule \u003d ruleStr.substring(ruleStr.indexOf(\u0027(\u0027) + 1,\n                     ruleStr.indexOf(\u0027)\u0027));\n-            try {\n-                samePackageMatchingDepth \u003d Integer.parseInt(rule);\n-            }\n-            catch (NumberFormatException e) {\n-                samePackageDomainsRegExp \u003d rule;\n-            }\n+            samePackageMatchingDepth \u003d Integer.parseInt(rule);\n             if (samePackageMatchingDepth \u003c\u003d 0) {\n                 throw new IllegalArgumentException(\n                         \"SAME_PACKAGE rule parameter should be positive integer: \" + ruleStr);\n             }\n             customImportOrderRules.add(SAME_PACKAGE_RULE_GROUP);\n \n         }\n         else {\n             throw new RuntimeException(\"Unexpected rule: \" + ruleStr);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "ac5dbc736320f6e5807cef97964a8a2928123687": {
      "type": "Ybodychange",
      "commitMessage": "Raising exception for CustomImportOrder.SAME_PACKAGE #1282\n",
      "commitDate": 1436122690000,
      "commitName": "ac5dbc736320f6e5807cef97964a8a2928123687",
      "commitAuthor": "Aleksandr Ivanov",
      "commitDateOld": 1435511623000,
      "commitNameOld": "4ea1896f464b0f6c0ddfca3d8d9c9f84703bae5e",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 7.07,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,29 @@\n     private void addRuleastoList(String ruleStr) {\n         if (STATIC_RULE_GROUP.equals(ruleStr)\n                 || THIRD_PARTY_PACKAGE_RULE_GROUP.equals(ruleStr)\n                 || STANDARD_JAVA_PACKAGE_RULE_GROUP.equals(ruleStr)\n                 || SPECIAL_IMPORTS_RULE_GROUP.equals(ruleStr)) {\n             customImportOrderRules.add(ruleStr);\n \n         }\n         else if (ruleStr.startsWith(SAME_PACKAGE_RULE_GROUP)) {\n \n             final String rule \u003d ruleStr.substring(ruleStr.indexOf(\u0027(\u0027) + 1,\n                     ruleStr.indexOf(\u0027)\u0027));\n             try {\n                 samePackageMatchingDepth \u003d Integer.parseInt(rule);\n             }\n             catch (NumberFormatException e) {\n                 samePackageDomainsRegExp \u003d rule;\n             }\n+            if (samePackageMatchingDepth \u003c\u003d 0) {\n+                throw new IllegalArgumentException(\n+                        \"SAME_PACKAGE rule parameter should be positive integer: \" + ruleStr);\n+            }\n             customImportOrderRules.add(SAME_PACKAGE_RULE_GROUP);\n \n         }\n         else {\n             throw new RuntimeException(\"Unexpected rule: \" + ruleStr);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "4ea1896f464b0f6c0ddfca3d8d9c9f84703bae5e": {
      "type": "Ybodychange",
      "commitMessage": "Fix PMD violations of AvoidCatchingGenericException rule. #959\n",
      "commitDate": 1435511623000,
      "commitName": "4ea1896f464b0f6c0ddfca3d8d9c9f84703bae5e",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1431863229000,
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 42.23,
      "commitsBetweenForRepo": 219,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n     private void addRuleastoList(String ruleStr) {\n         if (STATIC_RULE_GROUP.equals(ruleStr)\n                 || THIRD_PARTY_PACKAGE_RULE_GROUP.equals(ruleStr)\n                 || STANDARD_JAVA_PACKAGE_RULE_GROUP.equals(ruleStr)\n                 || SPECIAL_IMPORTS_RULE_GROUP.equals(ruleStr)) {\n             customImportOrderRules.add(ruleStr);\n \n         }\n         else if (ruleStr.startsWith(SAME_PACKAGE_RULE_GROUP)) {\n \n             final String rule \u003d ruleStr.substring(ruleStr.indexOf(\u0027(\u0027) + 1,\n                     ruleStr.indexOf(\u0027)\u0027));\n             try {\n                 samePackageMatchingDepth \u003d Integer.parseInt(rule);\n             }\n-            catch (Exception e) {\n+            catch (NumberFormatException e) {\n                 samePackageDomainsRegExp \u003d rule;\n             }\n             customImportOrderRules.add(SAME_PACKAGE_RULE_GROUP);\n \n         }\n         else {\n             throw new RuntimeException(\"Unexpected rule: \" + ruleStr);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "1c42e3eeb9aeebc47b2373541c1cc8d311d8b671": {
      "type": "Ybodychange",
      "commitMessage": "Fix PMD violations from \u0027strings\u0027 ruleset, issue #873\n",
      "commitDate": 1429113367000,
      "commitName": "1c42e3eeb9aeebc47b2373541c1cc8d311d8b671",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1427492342000,
      "commitNameOld": "ebd4afdebe8ee09c0e6c7d1239e2ca982f87e51c",
      "commitAuthorOld": "Damian Szczepanik",
      "daysBetweenCommits": 18.76,
      "commitsBetweenForRepo": 62,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n     private void addRuleastoList(String ruleStr)\n     {\n         if (STATIC_RULE_GROUP.equals(ruleStr)\n                 || THIRD_PARTY_PACKAGE_RULE_GROUP.equals(ruleStr)\n                 || STANDARD_JAVA_PACKAGE_RULE_GROUP.equals(ruleStr)\n                 || SPECIAL_IMPORTS_RULE_GROUP.equals(ruleStr))\n         {\n             customImportOrderRules.add(ruleStr);\n \n         }\n         else if (ruleStr.startsWith(SAME_PACKAGE_RULE_GROUP)) {\n \n-            final String rule \u003d ruleStr.substring(ruleStr.indexOf(\"(\") + 1,\n-                    ruleStr.indexOf(\")\"));\n+            final String rule \u003d ruleStr.substring(ruleStr.indexOf(\u0027(\u0027) + 1,\n+                    ruleStr.indexOf(\u0027)\u0027));\n             try {\n                 samePackageMatchingDepth \u003d Integer.parseInt(rule);\n             }\n             catch (Exception e) {\n                 samePackageDomainsRegExp \u003d rule;\n             }\n             customImportOrderRules.add(SAME_PACKAGE_RULE_GROUP);\n \n         }\n         else {\n             throw new RuntimeException(\"Unexpected rule: \" + ruleStr);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "16dac636b246c658cad31ee9b2e45c53b851d4f2": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, imports, #512\n",
      "commitDate": 1421678111000,
      "commitName": "16dac636b246c658cad31ee9b2e45c53b851d4f2",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yrename",
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "2a3be6769c4a97d090970ed52ca2333cb9aea706": {
      "type": "Yintroduced",
      "commitMessage": "CustomImportOrder was introduced #231\n",
      "commitDate": 1407671579000,
      "commitName": "2a3be6769c4a97d090970ed52ca2333cb9aea706",
      "commitAuthor": "Max"
    }
  }
}