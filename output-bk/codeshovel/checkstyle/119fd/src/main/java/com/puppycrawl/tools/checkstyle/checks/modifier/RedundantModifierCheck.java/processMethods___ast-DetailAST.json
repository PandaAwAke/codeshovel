{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "RedundantModifierCheck.java",
  "functionName": "processMethods",
  "functionId": "processMethods___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java",
  "functionStartLine": 283,
  "functionEndLine": 318,
  "changeHistory": [
    "4724dde1e531d9def217c7b20317d64100457fa3",
    "f0ed29b5cfef6adcec791cfdc236a5b850b685ee",
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22",
    "39cafcc5bbe8b18ca95026e76cdaa3d846db2d6d",
    "b1eced12b2be801d2f68de4e1f404e1c04b10ae8",
    "2f3b62ed73997bf1bceb5ca91530d04ec9a66a01",
    "b2df33a98ae154144af521fa9e302ac73aea8653",
    "c966129879cba9ba1e5afc1a371ff9df0c6d7613",
    "e030d1463c307836bbb201a202d15e81a41bcb0b"
  ],
  "changeHistoryShort": {
    "4724dde1e531d9def217c7b20317d64100457fa3": "Ybodychange",
    "f0ed29b5cfef6adcec791cfdc236a5b850b685ee": "Ybodychange",
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22": "Ybodychange",
    "39cafcc5bbe8b18ca95026e76cdaa3d846db2d6d": "Ybodychange",
    "b1eced12b2be801d2f68de4e1f404e1c04b10ae8": "Ybodychange",
    "2f3b62ed73997bf1bceb5ca91530d04ec9a66a01": "Ybodychange",
    "b2df33a98ae154144af521fa9e302ac73aea8653": "Ybodychange",
    "c966129879cba9ba1e5afc1a371ff9df0c6d7613": "Ybodychange",
    "e030d1463c307836bbb201a202d15e81a41bcb0b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4724dde1e531d9def217c7b20317d64100457fa3": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5268: False RedundantModifier violation for final method of enum inside final class\n",
      "commitDate": 1512567875000,
      "commitName": "4724dde1e531d9def217c7b20317d64100457fa3",
      "commitAuthor": "BBG",
      "commitDateOld": 1510238731000,
      "commitNameOld": "f0ed29b5cfef6adcec791cfdc236a5b850b685ee",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 26.96,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,36 @@\n     private void processMethods(DetailAST ast) {\n         final DetailAST modifiers \u003d\n                         ast.findFirstToken(TokenTypes.MODIFIERS);\n         // private method?\n         boolean checkFinal \u003d\n             modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) !\u003d null;\n         // declared in a final class?\n         DetailAST parent \u003d ast.getParent();\n-        while (parent !\u003d null) {\n+        while (parent !\u003d null \u0026\u0026 !checkFinal) {\n             if (parent.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n                 final DetailAST classModifiers \u003d\n                     parent.findFirstToken(TokenTypes.MODIFIERS);\n-                checkFinal \u003d checkFinal || classModifiers.findFirstToken(TokenTypes.FINAL) !\u003d null;\n+                checkFinal \u003d classModifiers.findFirstToken(TokenTypes.FINAL) !\u003d null;\n                 parent \u003d null;\n             }\n             else if (parent.getType() \u003d\u003d TokenTypes.LITERAL_NEW\n                     || parent.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n                 checkFinal \u003d true;\n                 parent \u003d null;\n             }\n+            else if (parent.getType() \u003d\u003d TokenTypes.ENUM_DEF) {\n+                checkFinal \u003d modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null;\n+                parent \u003d null;\n+            }\n             else {\n                 parent \u003d parent.getParent();\n             }\n         }\n         if (checkFinal \u0026\u0026 !isAnnotatedWithSafeVarargs(ast)) {\n             checkForRedundantModifier(ast, TokenTypes.FINAL);\n         }\n \n         if (ast.findFirstToken(TokenTypes.SLIST) \u003d\u003d null) {\n             processAbstractMethodParameters(ast);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "f0ed29b5cfef6adcec791cfdc236a5b850b685ee": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5124: removed usage of branchContains for simple cases",
      "commitDate": 1510238731000,
      "commitName": "f0ed29b5cfef6adcec791cfdc236a5b850b685ee",
      "commitAuthor": "rnveach",
      "commitDateOld": 1509412562000,
      "commitNameOld": "5cdbb191a17c65c2956b35d71513e9b59b6d2166",
      "commitAuthorOld": "Andrew Kuchev",
      "daysBetweenCommits": 9.56,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n     private void processMethods(DetailAST ast) {\n         final DetailAST modifiers \u003d\n                         ast.findFirstToken(TokenTypes.MODIFIERS);\n         // private method?\n         boolean checkFinal \u003d\n             modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) !\u003d null;\n         // declared in a final class?\n         DetailAST parent \u003d ast.getParent();\n         while (parent !\u003d null) {\n             if (parent.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n                 final DetailAST classModifiers \u003d\n                     parent.findFirstToken(TokenTypes.MODIFIERS);\n                 checkFinal \u003d checkFinal || classModifiers.findFirstToken(TokenTypes.FINAL) !\u003d null;\n                 parent \u003d null;\n             }\n             else if (parent.getType() \u003d\u003d TokenTypes.LITERAL_NEW\n                     || parent.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n                 checkFinal \u003d true;\n                 parent \u003d null;\n             }\n             else {\n                 parent \u003d parent.getParent();\n             }\n         }\n         if (checkFinal \u0026\u0026 !isAnnotatedWithSafeVarargs(ast)) {\n             checkForRedundantModifier(ast, TokenTypes.FINAL);\n         }\n \n-        if (!ast.branchContains(TokenTypes.SLIST)) {\n+        if (ast.findFirstToken(TokenTypes.SLIST) \u003d\u003d null) {\n             processAbstractMethodParameters(ast);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5124: removed usage of branchContains for modifiers",
      "commitDate": 1508986494000,
      "commitName": "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22",
      "commitAuthor": "rnveach",
      "commitDateOld": 1502397376000,
      "commitNameOld": "91b02ec505055beef266b9b5ec389d4d350d881e",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 76.26,
      "commitsBetweenForRepo": 220,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n     private void processMethods(DetailAST ast) {\n         final DetailAST modifiers \u003d\n                         ast.findFirstToken(TokenTypes.MODIFIERS);\n         // private method?\n         boolean checkFinal \u003d\n-            modifiers.branchContains(TokenTypes.LITERAL_PRIVATE);\n+            modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) !\u003d null;\n         // declared in a final class?\n         DetailAST parent \u003d ast.getParent();\n         while (parent !\u003d null) {\n             if (parent.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n                 final DetailAST classModifiers \u003d\n                     parent.findFirstToken(TokenTypes.MODIFIERS);\n-                checkFinal \u003d checkFinal || classModifiers.branchContains(TokenTypes.FINAL);\n+                checkFinal \u003d checkFinal || classModifiers.findFirstToken(TokenTypes.FINAL) !\u003d null;\n                 parent \u003d null;\n             }\n             else if (parent.getType() \u003d\u003d TokenTypes.LITERAL_NEW\n                     || parent.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n                 checkFinal \u003d true;\n                 parent \u003d null;\n             }\n             else {\n                 parent \u003d parent.getParent();\n             }\n         }\n         if (checkFinal \u0026\u0026 !isAnnotatedWithSafeVarargs(ast)) {\n             checkForRedundantModifier(ast, TokenTypes.FINAL);\n         }\n \n         if (!ast.branchContains(TokenTypes.SLIST)) {\n             processAbstractMethodParameters(ast);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "39cafcc5bbe8b18ca95026e76cdaa3d846db2d6d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3582: marked enum field\u0027s final method as redundant",
      "commitDate": 1483652043000,
      "commitName": "39cafcc5bbe8b18ca95026e76cdaa3d846db2d6d",
      "commitAuthor": "rnveach",
      "commitDateOld": 1480139765000,
      "commitNameOld": "825e6a8fcd85e1d77ba86b39aa3834b03344a055",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 40.65,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,32 @@\n     private void processMethods(DetailAST ast) {\n         final DetailAST modifiers \u003d\n                         ast.findFirstToken(TokenTypes.MODIFIERS);\n         // private method?\n         boolean checkFinal \u003d\n             modifiers.branchContains(TokenTypes.LITERAL_PRIVATE);\n         // declared in a final class?\n         DetailAST parent \u003d ast.getParent();\n         while (parent !\u003d null) {\n             if (parent.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n                 final DetailAST classModifiers \u003d\n                     parent.findFirstToken(TokenTypes.MODIFIERS);\n                 checkFinal \u003d checkFinal || classModifiers.branchContains(TokenTypes.FINAL);\n                 parent \u003d null;\n             }\n-            else if (parent.getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n+            else if (parent.getType() \u003d\u003d TokenTypes.LITERAL_NEW\n+                    || parent.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n                 checkFinal \u003d true;\n                 parent \u003d null;\n             }\n             else {\n                 parent \u003d parent.getParent();\n             }\n         }\n         if (checkFinal \u0026\u0026 !isAnnotatedWithSafeVarargs(ast)) {\n             checkForRedundantModifier(ast, TokenTypes.FINAL);\n         }\n \n         if (!ast.branchContains(TokenTypes.SLIST)) {\n             processAbstractMethodParameters(ast);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "b1eced12b2be801d2f68de4e1f404e1c04b10ae8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3322: added RedundantModifiers for final in abstract methods",
      "commitDate": 1470314986000,
      "commitName": "b1eced12b2be801d2f68de4e1f404e1c04b10ae8",
      "commitAuthor": "rnveach",
      "commitDateOld": 1469589545000,
      "commitNameOld": "b415ce007ba73732ecfaa9ed7d4ec6dc65f4d354",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 8.4,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,31 @@\n     private void processMethods(DetailAST ast) {\n         final DetailAST modifiers \u003d\n                         ast.findFirstToken(TokenTypes.MODIFIERS);\n         // private method?\n         boolean checkFinal \u003d\n             modifiers.branchContains(TokenTypes.LITERAL_PRIVATE);\n         // declared in a final class?\n         DetailAST parent \u003d ast.getParent();\n         while (parent !\u003d null) {\n             if (parent.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n                 final DetailAST classModifiers \u003d\n                     parent.findFirstToken(TokenTypes.MODIFIERS);\n                 checkFinal \u003d checkFinal || classModifiers.branchContains(TokenTypes.FINAL);\n                 parent \u003d null;\n             }\n             else if (parent.getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n                 checkFinal \u003d true;\n                 parent \u003d null;\n             }\n             else {\n                 parent \u003d parent.getParent();\n             }\n         }\n         if (checkFinal \u0026\u0026 !isAnnotatedWithSafeVarargs(ast)) {\n-            DetailAST modifier \u003d modifiers.getFirstChild();\n-            while (modifier !\u003d null) {\n-                final int type \u003d modifier.getType();\n-                if (type \u003d\u003d TokenTypes.FINAL) {\n-                    log(modifier.getLineNo(), modifier.getColumnNo(),\n-                            MSG_KEY, modifier.getText());\n-                    break;\n-                }\n-                modifier \u003d modifier.getNextSibling();\n-            }\n+            checkForRedundantModifier(ast, TokenTypes.FINAL);\n+        }\n+\n+        if (!ast.branchContains(TokenTypes.SLIST)) {\n+            processAbstractMethodParameters(ast);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "2f3b62ed73997bf1bceb5ca91530d04ec9a66a01": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2661: Enforce SingleBreakOrContinueCheck of sevntu-checkstyle over Checkstyle source code\n",
      "commitDate": 1453083173000,
      "commitName": "2f3b62ed73997bf1bceb5ca91530d04ec9a66a01",
      "commitAuthor": "Yasser Aziza",
      "commitDateOld": 1451953543000,
      "commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 13.07,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,36 @@\n     private void processMethods(DetailAST ast) {\n         final DetailAST modifiers \u003d\n                         ast.findFirstToken(TokenTypes.MODIFIERS);\n         // private method?\n         boolean checkFinal \u003d\n             modifiers.branchContains(TokenTypes.LITERAL_PRIVATE);\n         // declared in a final class?\n         DetailAST parent \u003d ast.getParent();\n         while (parent !\u003d null) {\n             if (parent.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n                 final DetailAST classModifiers \u003d\n                     parent.findFirstToken(TokenTypes.MODIFIERS);\n                 checkFinal \u003d checkFinal || classModifiers.branchContains(TokenTypes.FINAL);\n-                break;\n+                parent \u003d null;\n             }\n-            if (parent.getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n+            else if (parent.getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n                 checkFinal \u003d true;\n-                break;\n+                parent \u003d null;\n             }\n-            parent \u003d parent.getParent();\n+            else {\n+                parent \u003d parent.getParent();\n+            }\n         }\n         if (checkFinal \u0026\u0026 !isAnnotatedWithSafeVarargs(ast)) {\n             DetailAST modifier \u003d modifiers.getFirstChild();\n             while (modifier !\u003d null) {\n                 final int type \u003d modifier.getType();\n                 if (type \u003d\u003d TokenTypes.FINAL) {\n                     log(modifier.getLineNo(), modifier.getColumnNo(),\n                             MSG_KEY, modifier.getText());\n                     break;\n                 }\n                 modifier \u003d modifier.getNextSibling();\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "b2df33a98ae154144af521fa9e302ac73aea8653": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2661: Enforce AvoidNotShortCircuitOperatorsForBoolean of sevntu-checkstyle over Checkstyle source code\n",
      "commitDate": 1450446133000,
      "commitName": "b2df33a98ae154144af521fa9e302ac73aea8653",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": 1446558591000,
      "commitNameOld": "c966129879cba9ba1e5afc1a371ff9df0c6d7613",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 44.99,
      "commitsBetweenForRepo": 222,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,34 @@\n     private void processMethods(DetailAST ast) {\n         final DetailAST modifiers \u003d\n                         ast.findFirstToken(TokenTypes.MODIFIERS);\n         // private method?\n         boolean checkFinal \u003d\n             modifiers.branchContains(TokenTypes.LITERAL_PRIVATE);\n         // declared in a final class?\n         DetailAST parent \u003d ast.getParent();\n         while (parent !\u003d null) {\n             if (parent.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n                 final DetailAST classModifiers \u003d\n                     parent.findFirstToken(TokenTypes.MODIFIERS);\n-                checkFinal |\u003d\n-                    classModifiers.branchContains(TokenTypes.FINAL);\n+                checkFinal \u003d checkFinal || classModifiers.branchContains(TokenTypes.FINAL);\n                 break;\n             }\n             if (parent.getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n                 checkFinal \u003d true;\n                 break;\n             }\n             parent \u003d parent.getParent();\n         }\n         if (checkFinal \u0026\u0026 !isAnnotatedWithSafeVarargs(ast)) {\n             DetailAST modifier \u003d modifiers.getFirstChild();\n             while (modifier !\u003d null) {\n                 final int type \u003d modifier.getType();\n                 if (type \u003d\u003d TokenTypes.FINAL) {\n                     log(modifier.getLineNo(), modifier.getColumnNo(),\n                             MSG_KEY, modifier.getText());\n                     break;\n                 }\n                 modifier \u003d modifier.getNextSibling();\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "c966129879cba9ba1e5afc1a371ff9df0c6d7613": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2122: Fix RedundantModifier at final methods in anonymous class",
      "commitDate": 1446558591000,
      "commitName": "c966129879cba9ba1e5afc1a371ff9df0c6d7613",
      "commitAuthor": "rnveach",
      "commitDateOld": 1442753415000,
      "commitNameOld": "dbcca4f428fbab2d34e19db05b9bbfb145d20b85",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 44.04,
      "commitsBetweenForRepo": 280,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,35 @@\n     private void processMethods(DetailAST ast) {\n         final DetailAST modifiers \u003d\n                         ast.findFirstToken(TokenTypes.MODIFIERS);\n         // private method?\n         boolean checkFinal \u003d\n             modifiers.branchContains(TokenTypes.LITERAL_PRIVATE);\n         // declared in a final class?\n         DetailAST parent \u003d ast.getParent();\n         while (parent !\u003d null) {\n             if (parent.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n                 final DetailAST classModifiers \u003d\n                     parent.findFirstToken(TokenTypes.MODIFIERS);\n                 checkFinal |\u003d\n                     classModifiers.branchContains(TokenTypes.FINAL);\n                 break;\n             }\n+            if (parent.getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n+                checkFinal \u003d true;\n+                break;\n+            }\n             parent \u003d parent.getParent();\n         }\n         if (checkFinal \u0026\u0026 !isAnnotatedWithSafeVarargs(ast)) {\n             DetailAST modifier \u003d modifiers.getFirstChild();\n             while (modifier !\u003d null) {\n                 final int type \u003d modifier.getType();\n                 if (type \u003d\u003d TokenTypes.FINAL) {\n                     log(modifier.getLineNo(), modifier.getColumnNo(),\n                             MSG_KEY, modifier.getText());\n                     break;\n                 }\n                 modifier \u003d modifier.getNextSibling();\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "e030d1463c307836bbb201a202d15e81a41bcb0b": {
      "type": "Yintroduced",
      "commitMessage": "RedundantModifierCheck updated to follow Cyclomatic Complexity rule. #954\n",
      "commitDate": 1434344165000,
      "commitName": "e030d1463c307836bbb201a202d15e81a41bcb0b",
      "commitAuthor": "Roman Ivanov"
    }
  }
}