{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "JavadocMethodCheck.java",
  "functionName": "checkReturnTag",
  "functionId": "checkReturnTag___tags-List__JavadocTag____lineNo-int__reportExpectedTags-boolean",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
  "functionStartLine": 841,
  "functionEndLine": 865,
  "changeHistory": [
    "5f5142b2325051f9ed31130167c73d154d547211",
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc",
    "89a51ba032fd9126651fa9efad31baf10c006ddf",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767",
    "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
    "cbe38280adb03f058f89e8ea81bc0e3be2fc5b94",
    "72be23f288369fdd9e562999bb9b0e2ff646c897",
    "04ac5dd87c11a2bf7b908b45bbca7933382df515",
    "4cddf4771cd0b3bb2318912a06ae2ca8089e0f49",
    "c75f97dbc2123f550a1acc64886a8bebf4b888cf"
  ],
  "changeHistoryShort": {
    "5f5142b2325051f9ed31130167c73d154d547211": "Ybodychange",
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc": "Ybodychange",
    "89a51ba032fd9126651fa9efad31baf10c006ddf": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767": "Ybodychange",
    "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d": "Ymultichange(Yparameterchange,Ybodychange)",
    "cbe38280adb03f058f89e8ea81bc0e3be2fc5b94": "Ybodychange",
    "72be23f288369fdd9e562999bb9b0e2ff646c897": "Ymultichange(Yparameterchange,Ybodychange)",
    "04ac5dd87c11a2bf7b908b45bbca7933382df515": "Yfilerename",
    "4cddf4771cd0b3bb2318912a06ae2ca8089e0f49": "Ybodychange",
    "c75f97dbc2123f550a1acc64886a8bebf4b888cf": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5f5142b2325051f9ed31130167c73d154d547211": {
      "type": "Ybodychange",
      "commitMessage": "Issue #985: Fix PMD violations for ShortVariable rule\n",
      "commitDate": 1444185186000,
      "commitName": "5f5142b2325051f9ed31130167c73d154d547211",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": 1444139777000,
      "commitNameOld": "e2b4e687d7b8f9d6d5e1346d874b90e4567aff81",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 0.53,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n     private void checkReturnTag(List\u003cJavadocTag\u003e tags, int lineNo,\n         boolean reportExpectedTags) {\n         // Loop over tags finding return tags. After the first one, report an\n         // error.\n         boolean found \u003d false;\n         final ListIterator\u003cJavadocTag\u003e it \u003d tags.listIterator();\n         while (it.hasNext()) {\n-            final JavadocTag jt \u003d it.next();\n-            if (jt.isReturnTag()) {\n+            final JavadocTag javadocTag \u003d it.next();\n+            if (javadocTag.isReturnTag()) {\n                 if (found) {\n-                    log(jt.getLineNo(), jt.getColumnNo(),\n-                        MSG_DUPLICATE_TAG,\n-                        JavadocTagInfo.RETURN.getText());\n+                    log(javadocTag.getLineNo(), javadocTag.getColumnNo(),\n+                            MSG_DUPLICATE_TAG,\n+                            JavadocTagInfo.RETURN.getText());\n                 }\n                 found \u003d true;\n                 it.remove();\n             }\n         }\n \n         // Handle there being no @return tags :- unless\n         // the user has chosen to suppress these problems\n         if (!found \u0026\u0026 !allowMissingReturnTag \u0026\u0026 reportExpectedTags) {\n             log(lineNo, MSG_RETURN_EXPECTED);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, javadoc package, issue #537\n",
      "commitDate": 1424437366000,
      "commitName": "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc",
      "commitAuthor": "alexkravin",
      "commitDateOld": 1424294072000,
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n     private void checkReturnTag(List\u003cJavadocTag\u003e tags, int lineNo,\n         boolean reportExpectedTags)\n     {\n         // Loop over tags finding return tags. After the first one, report an\n         // error.\n         boolean found \u003d false;\n         final ListIterator\u003cJavadocTag\u003e it \u003d tags.listIterator();\n         while (it.hasNext()) {\n             final JavadocTag jt \u003d it.next();\n             if (jt.isReturnTag()) {\n                 if (found) {\n                     log(jt.getLineNo(), jt.getColumnNo(),\n-                        \"javadoc.duplicateTag\",\n+                        MSG_DUPLICATE_TAG,\n                         JavadocTagInfo.RETURN.getText());\n                 }\n                 found \u003d true;\n                 it.remove();\n             }\n         }\n \n         // Handle there being no @return tags :- unless\n         // the user has chosen to suppress these problems\n         if (!found \u0026\u0026 !allowMissingReturnTag \u0026\u0026 reportExpectedTags) {\n-            log(lineNo, \"javadoc.return.expected\");\n+            log(lineNo, MSG_RETURN_EXPECTED);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "89a51ba032fd9126651fa9efad31baf10c006ddf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, javadoc, #512\n",
      "commitDate": 1421677262000,
      "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767": {
      "type": "Ybodychange",
      "commitMessage": "record work on patch #2534038 from Travis for new annotation checks. Very good patch as usual from Travis. Shame on me for taking so long to apply it.\n",
      "commitDate": 1237805379000,
      "commitName": "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1237695418000,
      "commitNameOld": "216fcb79f9f5bbd05244364e926f261a90e697d1",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 1.27,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n     private void checkReturnTag(List\u003cJavadocTag\u003e aTags, int aLineNo,\n         boolean aReportExpectedTags)\n     {\n         // Loop over tags finding return tags. After the first one, report an\n         // error.\n         boolean found \u003d false;\n         final ListIterator\u003cJavadocTag\u003e it \u003d aTags.listIterator();\n         while (it.hasNext()) {\n             final JavadocTag jt \u003d it.next();\n             if (jt.isReturnTag()) {\n                 if (found) {\n                     log(jt.getLineNo(), jt.getColumnNo(),\n-                            \"javadoc.return.duplicate\");\n+                        \"javadoc.duplicateTag\",\n+                        JavadocTagInfo.RETURN.getText());\n                 }\n                 found \u003d true;\n                 it.remove();\n             }\n         }\n \n         // Handle there being no @return tags :- unless\n         // the user has chosen to suppress these problems\n         if (!found \u0026\u0026 !mAllowMissingReturnTag \u0026\u0026 aReportExpectedTags) {\n             log(aLineNo, \"javadoc.return.expected\");\n         }\n     }\n\\ No newline at end of file\n"
    },
    "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Start of adding generics.\n",
      "commitDate": 1197694270000,
      "commitName": "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
      "commitAuthor": "Oliver Burn",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "cbe38280adb03f058f89e8ea81bc0e3be2fc5b94": {
      "type": "Ybodychange",
      "commitMessage": "Fixed 1249707: AbstractTypeAwareCheck doesn\u0027t work with types from typeparm\n\nSome pretty big refactoring for typeaware checks performed.\nAlso added handling for type params.  Current handling algorithm\nhas some preconditions and restriction, but it works for most cases\n(not sure I\u0027ve covered all situation when type param will have name\nof real exception, but I do not think it is critical for now :)\n\nAlso, I\u0027ve added column number for JavadocTag (mainly to be able use\nClassInfo for it).  So, JavadocTypeCheck also affected.\n\nAnd I\u0027ve added new logger for TreeWalker (if we have loggers we should\nuse them :)\n",
      "commitDate": 1123248811000,
      "commitName": "cbe38280adb03f058f89e8ea81bc0e3be2fc5b94",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1120383479000,
      "commitNameOld": "b106eab0414affa16fbc0e2dfce511e3aed9d557",
      "commitAuthorOld": "Lars KÃ¼hne",
      "daysBetweenCommits": 33.16,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n     private void checkReturnTag(List aTags, int aLineNo,\n                                 boolean aReportExpectedTags)\n     {\n         // Loop over tags finding return tags. After the first one, report an\n         // error.\n         boolean found \u003d false;\n         final ListIterator it \u003d aTags.listIterator();\n         while (it.hasNext()) {\n             final JavadocTag jt \u003d (JavadocTag) it.next();\n             if (jt.isReturnTag()) {\n                 if (found) {\n-                    log(jt.getLineNo(), \"javadoc.return.duplicate\");\n+                    log(jt.getLineNo(), jt.getColumnNo(),\n+                        \"javadoc.return.duplicate\");\n                 }\n                 found \u003d true;\n                 it.remove();\n             }\n         }\n \n         // Handle there being no @return tags :- unless\n         // the user has chosen to suppress these problems\n         if (!found \u0026\u0026 !mAllowMissingReturnTag \u0026\u0026 aReportExpectedTags) {\n             log(aLineNo, \"javadoc.return.expected\");\n         }\n     }\n\\ No newline at end of file\n"
    },
    "72be23f288369fdd9e562999bb9b0e2ff646c897": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Fix for 855839 - JavadocMethod does not correctly treat {@inheritDoc}.\n",
      "commitDate": 1070909885000,
      "commitName": "72be23f288369fdd9e562999bb9b0e2ff646c897",
      "commitAuthor": "Oleg Sukhodolsky",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "04ac5dd87c11a2bf7b908b45bbca7933382df515": {
      "type": "Yfilerename",
      "commitMessage": "Moving another Javadoc check to see what is involved.\nA suprisingly small amount. Love the Eclipse refactoring\nsupport having the smarts to do the CVS operations.\n",
      "commitDate": 1054648289000,
      "commitName": "04ac5dd87c11a2bf7b908b45bbca7933382df515",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1054647239000,
      "commitNameOld": "2ef6dc6a43ede89c5b5b9091dee83e1e58bb5edc",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "4cddf4771cd0b3bb2318912a06ae2ca8089e0f49": {
      "type": "Ybodychange",
      "commitMessage": "Patch from Simon Kitching to allow more configuration control over the\nJavadocMethodCheck.\n",
      "commitDate": 1047422998000,
      "commitName": "4cddf4771cd0b3bb2318912a06ae2ca8089e0f49",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1045363824000,
      "commitNameOld": "04b0bd64047e8eee752405a01de145b67f5fb845",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 23.83,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,23 @@\n     private void checkReturnTag(List aTags, int aLineNo)\n     {\n         // Loop over tags finding return tags. After the first one, report an\n         // error.\n         boolean found \u003d false;\n         final ListIterator it \u003d aTags.listIterator();\n         while (it.hasNext()) {\n             final JavadocTag jt \u003d (JavadocTag) it.next();\n             if (jt.isReturnTag()) {\n                 if (found) {\n                     log(jt.getLineNo(), \"javadoc.return.duplicate\");\n                 }\n                 found \u003d true;\n                 it.remove();\n             }\n         }\n \n-        // Handle there being no @return tags\n-        if (!found) {\n+        // Handle there being no @return tags :- unless\n+        // the user has chosen to suppress these problems\n+        if (!found \u0026\u0026 !mAllowMissingReturnTag) {\n             log(aLineNo, \"javadoc.return.expected\");\n         }\n     }\n\\ No newline at end of file\n"
    },
    "c75f97dbc2123f550a1acc64886a8bebf4b888cf": {
      "type": "Yintroduced",
      "commitMessage": "Javadoc method check\n",
      "commitDate": 1036501994000,
      "commitName": "c75f97dbc2123f550a1acc64886a8bebf4b888cf",
      "commitAuthor": "Rick Giles"
    }
  }
}