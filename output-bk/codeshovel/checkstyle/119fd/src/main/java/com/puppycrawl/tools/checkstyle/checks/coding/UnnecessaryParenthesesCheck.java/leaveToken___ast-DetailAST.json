{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "UnnecessaryParenthesesCheck.java",
  "functionName": "leaveToken",
  "functionId": "leaveToken___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/UnnecessaryParenthesesCheck.java",
  "functionStartLine": 243,
  "functionEndLine": 274,
  "changeHistory": [
    "b0493771961c1fd89c96271b397da62699877551",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
    "4d2e6647f9e8385749c382bcab5e64965a943178",
    "b433c987fa86905ffa686d6b45180508d759d450",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "27149f3504a2f350b74f456a9bffbae76a460060",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "c2d3932843e70e4bb5df7161800aca248f9af778",
    "7dd31794bcc6258ffaa1ed5533a3b5a7c2f2af1a",
    "8e5c074c4403492df21fce8ca2c86eddd7dff9d2"
  ],
  "changeHistoryShort": {
    "b0493771961c1fd89c96271b397da62699877551": "Ybodychange",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": "Ybodychange",
    "4d2e6647f9e8385749c382bcab5e64965a943178": "Ybodychange",
    "b433c987fa86905ffa686d6b45180508d759d450": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "27149f3504a2f350b74f456a9bffbae76a460060": "Ybodychange",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "c2d3932843e70e4bb5df7161800aca248f9af778": "Ybodychange",
    "7dd31794bcc6258ffaa1ed5533a3b5a7c2f2af1a": "Ybodychange",
    "8e5c074c4403492df21fce8ca2c86eddd7dff9d2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b0493771961c1fd89c96271b397da62699877551": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5008: increase coverage of pitest-checks-coding to 97%\n",
      "commitDate": 1506259735000,
      "commitName": "b0493771961c1fd89c96271b397da62699877551",
      "commitAuthor": "vasilyeva",
      "commitDateOld": 1503403207000,
      "commitNameOld": "8174ea2a778fbd3e75c790f89f83f979ad8e3c9a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 33.06,
      "commitsBetweenForRepo": 142,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,33 @@\n     public void leaveToken(DetailAST ast) {\n         final int type \u003d ast.getType();\n         final DetailAST parent \u003d ast.getParent();\n \n         // shouldn\u0027t process assign in annotation pairs\n         if (type !\u003d TokenTypes.ASSIGN\n             || parent.getType() !\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR) {\n             // An expression is surrounded by parentheses.\n             if (type \u003d\u003d TokenTypes.EXPR) {\n \n                 // If \u0027parentToSkip\u0027 \u003d\u003d \u0027ast\u0027, then we\u0027ve already logged a\n                 // warning about an immediate child node in visitToken, so we don\u0027t\n                 // need to log another one here.\n \n                 if (parentToSkip !\u003d ast \u0026\u0026 isExprSurrounded(ast)) {\n                     if (assignDepth \u003e\u003d 1) {\n                         log(ast, MSG_ASSIGN);\n                     }\n                     else if (ast.getParent().getType() \u003d\u003d TokenTypes.LITERAL_RETURN) {\n                         log(ast, MSG_RETURN);\n                     }\n                     else {\n                         log(ast, MSG_EXPR);\n                     }\n                 }\n \n                 parentToSkip \u003d null;\n             }\n             else if (isInTokenList(type, ASSIGNMENTS)) {\n                 assignDepth--;\n             }\n-\n-            super.leaveToken(ast);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3143: forbid empty return statements and fixed violations",
      "commitDate": 1464356569000,
      "commitName": "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
      "commitAuthor": "rnveach",
      "commitDateOld": 1458221995000,
      "commitNameOld": "167dd96d8ca503a472bf003f187191d6b0ce586c",
      "commitAuthorOld": "Rasmus Kaj",
      "daysBetweenCommits": 71.0,
      "commitsBetweenForRepo": 145,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,35 @@\n     public void leaveToken(DetailAST ast) {\n         final int type \u003d ast.getType();\n         final DetailAST parent \u003d ast.getParent();\n \n-        if (type \u003d\u003d TokenTypes.ASSIGN\n-            \u0026\u0026 parent.getType() \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR) {\n-            // shouldn\u0027t process assign in annotation pairs\n-            return;\n-        }\n+        // shouldn\u0027t process assign in annotation pairs\n+        if (type !\u003d TokenTypes.ASSIGN\n+            || parent.getType() !\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR) {\n+            // An expression is surrounded by parentheses.\n+            if (type \u003d\u003d TokenTypes.EXPR) {\n \n-        // An expression is surrounded by parentheses.\n-        if (type \u003d\u003d TokenTypes.EXPR) {\n+                // If \u0027parentToSkip\u0027 \u003d\u003d \u0027ast\u0027, then we\u0027ve already logged a\n+                // warning about an immediate child node in visitToken, so we don\u0027t\n+                // need to log another one here.\n \n-            // If \u0027parentToSkip\u0027 \u003d\u003d \u0027ast\u0027, then we\u0027ve already logged a\n-            // warning about an immediate child node in visitToken, so we don\u0027t\n-            // need to log another one here.\n+                if (parentToSkip !\u003d ast \u0026\u0026 isExprSurrounded(ast)) {\n+                    if (assignDepth \u003e\u003d 1) {\n+                        log(ast, MSG_ASSIGN);\n+                    }\n+                    else if (ast.getParent().getType() \u003d\u003d TokenTypes.LITERAL_RETURN) {\n+                        log(ast, MSG_RETURN);\n+                    }\n+                    else {\n+                        log(ast, MSG_EXPR);\n+                    }\n+                }\n \n-            if (parentToSkip !\u003d ast \u0026\u0026 isExprSurrounded(ast)) {\n-                if (assignDepth \u003e\u003d 1) {\n-                    log(ast, MSG_ASSIGN);\n-                }\n-                else if (ast.getParent().getType() \u003d\u003d TokenTypes.LITERAL_RETURN) {\n-                    log(ast, MSG_RETURN);\n-                }\n-                else {\n-                    log(ast, MSG_EXPR);\n-                }\n+                parentToSkip \u003d null;\n+            }\n+            else if (isInTokenList(type, ASSIGNMENTS)) {\n+                assignDepth--;\n             }\n \n-            parentToSkip \u003d null;\n+            super.leaveToken(ast);\n         }\n-        else if (isInTokenList(type, ASSIGNMENTS)) {\n-            assignDepth--;\n-        }\n-\n-        super.leaveToken(ast);\n     }\n\\ No newline at end of file\n"
    },
    "4d2e6647f9e8385749c382bcab5e64965a943178": {
      "type": "Ybodychange",
      "commitMessage": "Rename boolean methods to start with question word. #1555\n\nFixes `BooleanMethodNameMustStartWithQuestion` inspection violations.\n\nDescription:\n\u003eReports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection.\n",
      "commitDate": 1440705239000,
      "commitName": "4d2e6647f9e8385749c382bcab5e64965a943178",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440498222000,
      "commitNameOld": "07ffe4625fe9df98233c9e72f4e7948c55b454a1",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 2.4,
      "commitsBetweenForRepo": 81,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     public void leaveToken(DetailAST ast) {\n         final int type \u003d ast.getType();\n         final DetailAST parent \u003d ast.getParent();\n \n         if (type \u003d\u003d TokenTypes.ASSIGN\n             \u0026\u0026 parent.getType() \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR) {\n             // shouldn\u0027t process assign in annotation pairs\n             return;\n         }\n \n         // An expression is surrounded by parentheses.\n         if (type \u003d\u003d TokenTypes.EXPR) {\n \n             // If \u0027parentToSkip\u0027 \u003d\u003d \u0027ast\u0027, then we\u0027ve already logged a\n             // warning about an immediate child node in visitToken, so we don\u0027t\n             // need to log another one here.\n \n             if (parentToSkip !\u003d ast \u0026\u0026 isExprSurrounded(ast)) {\n                 if (assignDepth \u003e\u003d 1) {\n                     log(ast, MSG_ASSIGN);\n                 }\n                 else if (ast.getParent().getType() \u003d\u003d TokenTypes.LITERAL_RETURN) {\n                     log(ast, MSG_RETURN);\n                 }\n                 else {\n                     log(ast, MSG_EXPR);\n                 }\n             }\n \n             parentToSkip \u003d null;\n         }\n-        else if (inTokenList(type, ASSIGNMENTS)) {\n+        else if (isInTokenList(type, ASSIGNMENTS)) {\n             assignDepth--;\n         }\n \n         super.leaveToken(ast);\n     }\n\\ No newline at end of file\n"
    },
    "b433c987fa86905ffa686d6b45180508d759d450": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1293: Refactoring of UnnecessaryParanthesesCheck. UT coverage was increased up to 100%.\n",
      "commitDate": 1436222773000,
      "commitName": "b433c987fa86905ffa686d6b45180508d759d450",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": 1431863229000,
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 50.46,
      "commitsBetweenForRepo": 273,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n     public void leaveToken(DetailAST ast) {\n         final int type \u003d ast.getType();\n         final DetailAST parent \u003d ast.getParent();\n \n         if (type \u003d\u003d TokenTypes.ASSIGN\n             \u0026\u0026 parent.getType() \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR) {\n             // shouldn\u0027t process assign in annotation pairs\n             return;\n         }\n \n         // An expression is surrounded by parentheses.\n         if (type \u003d\u003d TokenTypes.EXPR) {\n \n             // If \u0027parentToSkip\u0027 \u003d\u003d \u0027ast\u0027, then we\u0027ve already logged a\n             // warning about an immediate child node in visitToken, so we don\u0027t\n             // need to log another one here.\n \n-            if (parentToSkip !\u003d ast \u0026\u0026 exprSurrounded(ast)) {\n+            if (parentToSkip !\u003d ast \u0026\u0026 isExprSurrounded(ast)) {\n                 if (assignDepth \u003e\u003d 1) {\n                     log(ast, MSG_ASSIGN);\n                 }\n                 else if (ast.getParent().getType()\n                     \u003d\u003d TokenTypes.LITERAL_RETURN) {\n                     log(ast, MSG_RETURN);\n                 }\n                 else {\n                     log(ast, MSG_EXPR);\n                 }\n             }\n \n             parentToSkip \u003d null;\n         }\n         else if (inTokenList(type, ASSIGNMENTS)) {\n             assignDepth--;\n         }\n \n         super.leaveToken(ast);\n     }\n\\ No newline at end of file\n"
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": 1426023398000,
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1424437367000,
      "commitNameOld": "27149f3504a2f350b74f456a9bffbae76a460060",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 18.36,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n     public void leaveToken(DetailAST ast)\n     {\n         final int type \u003d ast.getType();\n         final DetailAST parent \u003d ast.getParent();\n \n-        if ((type \u003d\u003d TokenTypes.ASSIGN)\n-            \u0026\u0026 (parent.getType() \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR))\n+        if (type \u003d\u003d TokenTypes.ASSIGN\n+            \u0026\u0026 parent.getType() \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR)\n         {\n             // shouldn\u0027t process assign in annotation pairs\n             return;\n         }\n \n         // An expression is surrounded by parentheses.\n         if (type \u003d\u003d TokenTypes.EXPR) {\n \n             // If \u0027parentToSkip\u0027 \u003d\u003d \u0027ast\u0027, then we\u0027ve already logged a\n             // warning about an immediate child node in visitToken, so we don\u0027t\n             // need to log another one here.\n \n-            if ((parentToSkip !\u003d ast) \u0026\u0026 exprSurrounded(ast)) {\n+            if (parentToSkip !\u003d ast \u0026\u0026 exprSurrounded(ast)) {\n                 if (assignDepth \u003e\u003d 1) {\n                     log(ast, MSG_ASSIGN);\n                 }\n                 else if (ast.getParent().getType()\n                     \u003d\u003d TokenTypes.LITERAL_RETURN)\n                 {\n                     log(ast, MSG_RETURN);\n                 }\n                 else {\n                     log(ast, MSG_EXPR);\n                 }\n             }\n \n             parentToSkip \u003d null;\n         }\n         else if (inTokenList(type, ASSIGNMENTS)) {\n             assignDepth--;\n         }\n \n         super.leaveToken(ast);\n     }\n\\ No newline at end of file\n"
    },
    "27149f3504a2f350b74f456a9bffbae76a460060": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, coding package, issue #537\n",
      "commitDate": 1424437367000,
      "commitName": "27149f3504a2f350b74f456a9bffbae76a460060",
      "commitAuthor": "alexkravin",
      "commitDateOld": 1424294072000,
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n     public void leaveToken(DetailAST ast)\n     {\n         final int type \u003d ast.getType();\n         final DetailAST parent \u003d ast.getParent();\n \n         if ((type \u003d\u003d TokenTypes.ASSIGN)\n             \u0026\u0026 (parent.getType() \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR))\n         {\n             // shouldn\u0027t process assign in annotation pairs\n             return;\n         }\n \n         // An expression is surrounded by parentheses.\n         if (type \u003d\u003d TokenTypes.EXPR) {\n \n             // If \u0027parentToSkip\u0027 \u003d\u003d \u0027ast\u0027, then we\u0027ve already logged a\n             // warning about an immediate child node in visitToken, so we don\u0027t\n             // need to log another one here.\n \n             if ((parentToSkip !\u003d ast) \u0026\u0026 exprSurrounded(ast)) {\n                 if (assignDepth \u003e\u003d 1) {\n-                    log(ast, \"unnecessary.paren.assign\");\n+                    log(ast, MSG_ASSIGN);\n                 }\n                 else if (ast.getParent().getType()\n                     \u003d\u003d TokenTypes.LITERAL_RETURN)\n                 {\n-                    log(ast, \"unnecessary.paren.return\");\n+                    log(ast, MSG_RETURN);\n                 }\n                 else {\n-                    log(ast, \"unnecessary.paren.expr\");\n+                    log(ast, MSG_EXPR);\n                 }\n             }\n \n             parentToSkip \u003d null;\n         }\n         else if (inTokenList(type, ASSIGNMENTS)) {\n             assignDepth--;\n         }\n \n         super.leaveToken(ast);\n     }\n\\ No newline at end of file\n"
    },
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, coding, #512\n",
      "commitDate": 1421677214000,
      "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "c2d3932843e70e4bb5df7161800aca248f9af778": {
      "type": "Ybodychange",
      "commitMessage": "Clean up the use of ()\u0027s\n",
      "commitDate": 1152242806000,
      "commitName": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1130786628000,
      "commitNameOld": "1aee9d55cc5bd8cca011e17369f6e370efcc85bb",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 248.34,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n     public void leaveToken(DetailAST aAST)\n     {\n         final int type \u003d aAST.getType();\n         final DetailAST parent \u003d aAST.getParent();\n \n-        if (type \u003d\u003d TokenTypes.ASSIGN\n-            \u0026\u0026 parent.getType() \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR)\n+        if ((type \u003d\u003d TokenTypes.ASSIGN)\n+            \u0026\u0026 (parent.getType() \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR))\n         {\n             // shouldn\u0027t process assign in annotation pairs\n             return;\n         }\n \n         // An expression is surrounded by parentheses.\n         if (type \u003d\u003d TokenTypes.EXPR) {\n \n             // If \u0027mParentToSkip\u0027 \u003d\u003d \u0027aAST\u0027, then we\u0027ve already logged a\n             // warning about an immediate child node in visitToken, so we don\u0027t\n             // need to log another one here.\n \n-            if (mParentToSkip !\u003d aAST \u0026\u0026 exprSurrounded(aAST)) {\n+            if ((mParentToSkip !\u003d aAST) \u0026\u0026 exprSurrounded(aAST)) {\n                 if (mAssignDepth \u003e\u003d 1) {\n                     log(aAST, \"unnecessary.paren.assign\");\n                 }\n                 else if (aAST.getParent().getType()\n                     \u003d\u003d TokenTypes.LITERAL_RETURN)\n                 {\n                     log(aAST, \"unnecessary.paren.return\");\n                 }\n                 else {\n                     log(aAST, \"unnecessary.paren.expr\");\n                 }\n             }\n \n             mParentToSkip \u003d null;\n         }\n         else if (inTokenList(type, ASSIGNMENTS)) {\n             mAssignDepth--;\n         }\n \n         super.leaveToken(aAST);\n     }\n\\ No newline at end of file\n"
    },
    "7dd31794bcc6258ffaa1ed5533a3b5a7c2f2af1a": {
      "type": "Ybodychange",
      "commitMessage": "Two more annotation-related problems (module Indentation, bug 1109214 and module UnnecessaryParentheses, bug 1109238)\n",
      "commitDate": 1108996663000,
      "commitName": "7dd31794bcc6258ffaa1ed5533a3b5a7c2f2af1a",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1105267857000,
      "commitNameOld": "0d887cde58e54d920644ee543dab346b93e8aae9",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 43.16,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,41 @@\n     public void leaveToken(DetailAST aAST)\n     {\n         final int type \u003d aAST.getType();\n+        final DetailAST parent \u003d aAST.getParent();\n+\n+        if (type \u003d\u003d TokenTypes.ASSIGN\n+            \u0026\u0026 parent.getType() \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR)\n+        {\n+            // shouldn\u0027t process assign in annotation pairs\n+            return;\n+        }\n \n         // An expression is surrounded by parentheses.\n         if (type \u003d\u003d TokenTypes.EXPR) {\n \n             // If \u0027mParentToSkip\u0027 \u003d\u003d \u0027aAST\u0027, then we\u0027ve already logged a\n             // warning about an immediate child node in visitToken, so we don\u0027t\n             // need to log another one here.\n \n             if (mParentToSkip !\u003d aAST \u0026\u0026 exprSurrounded(aAST)) {\n                 if (mAssignDepth \u003e\u003d 1) {\n                     log(aAST, \"unnecessary.paren.assign\");\n                 }\n                 else if (aAST.getParent().getType()\n                     \u003d\u003d TokenTypes.LITERAL_RETURN)\n                 {\n                     log(aAST, \"unnecessary.paren.return\");\n                 }\n                 else {\n                     log(aAST, \"unnecessary.paren.expr\");\n                 }\n             }\n \n             mParentToSkip \u003d null;\n         }\n         else if (inTokenList(type, ASSIGNMENTS)) {\n             mAssignDepth--;\n         }\n \n         super.leaveToken(aAST);\n     }\n\\ No newline at end of file\n"
    },
    "8e5c074c4403492df21fce8ca2c86eddd7dff9d2": {
      "type": "Yintroduced",
      "commitMessage": "UnnecessaryParentheses check (patch from Eric Roe)\n",
      "commitDate": 1078814441000,
      "commitName": "8e5c074c4403492df21fce8ca2c86eddd7dff9d2",
      "commitAuthor": "Oleg Sukhodolsky"
    }
  }
}