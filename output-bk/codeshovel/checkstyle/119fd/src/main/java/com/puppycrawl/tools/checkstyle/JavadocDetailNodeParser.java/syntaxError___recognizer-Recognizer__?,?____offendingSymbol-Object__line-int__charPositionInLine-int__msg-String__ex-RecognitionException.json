{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "JavadocDetailNodeParser.java",
  "functionName": "syntaxError",
  "functionId": "syntaxError___recognizer-Recognizer__?,?____offendingSymbol-Object__line-int__charPositionInLine-int__msg-String__ex-RecognitionException",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java",
  "functionStartLine": 582,
  "functionEndLine": 604,
  "changeHistory": [
    "60c70922fa41c6a6b6d0e80fcbaea8bfb4acc5ad",
    "ce21086e087661553f3a774c38362327ee88996a",
    "68b49fd2843f23f55dc711a89213d59f2acf3a0a",
    "77733a452387aa2ee99fdc9a737633566cc7af3d",
    "020d8b24693d7208a8892e3ba857cfe2d90a43bc",
    "2c41aaf844d3206775c0a8c9e78aabf3a6d85a36",
    "89a51ba032fd9126651fa9efad31baf10c006ddf",
    "5c481899d4cfcb8369dcd0851aef21c2d8c5088a",
    "2e1382c5bb1aa61cc01d7958a589e2a3831f56b5",
    "ff12c1b012a1b18da8a1cd2101efd0173c612534"
  ],
  "changeHistoryShort": {
    "60c70922fa41c6a6b6d0e80fcbaea8bfb4acc5ad": "Ybodychange",
    "ce21086e087661553f3a774c38362327ee88996a": "Ybodychange",
    "68b49fd2843f23f55dc711a89213d59f2acf3a0a": "Ymovefromfile",
    "77733a452387aa2ee99fdc9a737633566cc7af3d": "Ybodychange",
    "020d8b24693d7208a8892e3ba857cfe2d90a43bc": "Ybodychange",
    "2c41aaf844d3206775c0a8c9e78aabf3a6d85a36": "Ybodychange",
    "89a51ba032fd9126651fa9efad31baf10c006ddf": "Ymultichange(Yparameterchange,Ybodychange)",
    "5c481899d4cfcb8369dcd0851aef21c2d8c5088a": "Ybodychange",
    "2e1382c5bb1aa61cc01d7958a589e2a3831f56b5": "Ybodychange",
    "ff12c1b012a1b18da8a1cd2101efd0173c612534": "Yintroduced"
  },
  "changeHistoryDetails": {
    "60c70922fa41c6a6b6d0e80fcbaea8bfb4acc5ad": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4390: Modified error handling of errors that are to be generated when missing HTML tags are encountered while parsing javadoc\n",
      "commitDate": 1503321339000,
      "commitName": "60c70922fa41c6a6b6d0e80fcbaea8bfb4acc5ad",
      "commitAuthor": "Piyush Sharma",
      "commitDateOld": 1501228122000,
      "commitNameOld": "ebeedf920b07095642db05d1b7b6e89697b1c41c",
      "commitAuthorOld": "Piyush Sharma",
      "daysBetweenCommits": 24.23,
      "commitsBetweenForRepo": 73,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,23 @@\n         public void syntaxError(\n                 Recognizer\u003c?, ?\u003e recognizer, Object offendingSymbol,\n                 int line, int charPositionInLine,\n                 String msg, RecognitionException ex) {\n             final int lineNumber \u003d offset + line;\n-            final Token token \u003d (Token) offendingSymbol;\n \n-            if (MSG_JAVADOC_MISSED_HTML_CLOSE.equals(msg)) {\n+            if (MSG_JAVADOC_WRONG_SINGLETON_TAG.equals(msg)) {\n                 errorMessage \u003d new ParseErrorMessage(lineNumber,\n-                        MSG_JAVADOC_MISSED_HTML_CLOSE, charPositionInLine, token.getText());\n-\n-                throw new IllegalArgumentException(msg);\n-            }\n-            else if (MSG_JAVADOC_WRONG_SINGLETON_TAG.equals(msg)) {\n-                errorMessage \u003d new ParseErrorMessage(lineNumber,\n-                        MSG_JAVADOC_WRONG_SINGLETON_TAG, charPositionInLine, token.getText());\n+                        MSG_JAVADOC_WRONG_SINGLETON_TAG, charPositionInLine,\n+                        ((Token) offendingSymbol).getText());\n \n                 throw new IllegalArgumentException(msg);\n             }\n             else {\n                 final int ruleIndex \u003d ex.getCtx().getRuleIndex();\n                 final String ruleName \u003d recognizer.getRuleNames()[ruleIndex];\n                 final String upperCaseRuleName \u003d CaseFormat.UPPER_CAMEL.to(\n                         CaseFormat.UPPER_UNDERSCORE, ruleName);\n \n                 errorMessage \u003d new ParseErrorMessage(lineNumber,\n                         MSG_JAVADOC_PARSE_RULE_ERROR, charPositionInLine, msg, upperCaseRuleName);\n             }\n         }\n\\ No newline at end of file\n"
    },
    "ce21086e087661553f3a774c38362327ee88996a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3763: Try to avoid non-jdk runtime exceptions in code\n",
      "commitDate": 1488165925000,
      "commitName": "ce21086e087661553f3a774c38362327ee88996a",
      "commitAuthor": "Vladislav Lisetskii",
      "commitDateOld": 1486781310000,
      "commitNameOld": "c9fc6ba17df2a95a6565a1c57315703c2d937644",
      "commitAuthorOld": "Robert Painsi",
      "daysBetweenCommits": 16.03,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n         public void syntaxError(\n                 Recognizer\u003c?, ?\u003e recognizer, Object offendingSymbol,\n                 int line, int charPositionInLine,\n                 String msg, RecognitionException ex) {\n             final int lineNumber \u003d offset + line;\n             final Token token \u003d (Token) offendingSymbol;\n \n             if (MSG_JAVADOC_MISSED_HTML_CLOSE.equals(msg)) {\n                 errorMessage \u003d new ParseErrorMessage(lineNumber,\n                         MSG_JAVADOC_MISSED_HTML_CLOSE, charPositionInLine, token.getText());\n \n-                throw new ParseCancellationException(msg);\n+                throw new IllegalArgumentException(msg);\n             }\n             else if (MSG_JAVADOC_WRONG_SINGLETON_TAG.equals(msg)) {\n                 errorMessage \u003d new ParseErrorMessage(lineNumber,\n                         MSG_JAVADOC_WRONG_SINGLETON_TAG, charPositionInLine, token.getText());\n \n-                throw new ParseCancellationException(msg);\n+                throw new IllegalArgumentException(msg);\n             }\n             else {\n                 final int ruleIndex \u003d ex.getCtx().getRuleIndex();\n                 final String ruleName \u003d recognizer.getRuleNames()[ruleIndex];\n                 final String upperCaseRuleName \u003d CaseFormat.UPPER_CAMEL.to(\n                         CaseFormat.UPPER_UNDERSCORE, ruleName);\n \n                 errorMessage \u003d new ParseErrorMessage(lineNumber,\n                         MSG_JAVADOC_PARSE_RULE_ERROR, charPositionInLine, msg, upperCaseRuleName);\n             }\n         }\n\\ No newline at end of file\n"
    },
    "68b49fd2843f23f55dc711a89213d59f2acf3a0a": {
      "type": "Ymovefromfile",
      "commitMessage": "Issue #652: New CLI option to print Javadoc comment parse tree\n",
      "commitDate": 1458220789000,
      "commitName": "68b49fd2843f23f55dc711a89213d59f2acf3a0a",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": 1458153137000,
      "commitNameOld": "888594049a74a7d8e9bbdfb5672c07db1f7ba220",
      "commitAuthorOld": "Vladislav Lisetskiy",
      "daysBetweenCommits": 0.78,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "77733a452387aa2ee99fdc9a737633566cc7af3d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2836: renamed error message fields to match standard naming",
      "commitDate": 1453387259000,
      "commitName": "77733a452387aa2ee99fdc9a737633566cc7af3d",
      "commitAuthor": "rnveach",
      "commitDateOld": 1451953543000,
      "commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 16.59,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n         public void syntaxError(\n                 Recognizer\u003c?, ?\u003e recognizer, Object offendingSymbol,\n                 int line, int charPositionInLine,\n                 String msg, RecognitionException ex) {\n             final int lineNumber \u003d offset + line;\n             final Token token \u003d (Token) offendingSymbol;\n \n-            if (JAVADOC_MISSED_HTML_CLOSE.equals(msg)) {\n+            if (MSG_JAVADOC_MISSED_HTML_CLOSE.equals(msg)) {\n                 errorMessage \u003d new ParseErrorMessage(lineNumber,\n-                        JAVADOC_MISSED_HTML_CLOSE, charPositionInLine, token.getText());\n+                        MSG_JAVADOC_MISSED_HTML_CLOSE, charPositionInLine, token.getText());\n \n                 throw new ParseCancellationException(msg);\n             }\n-            else if (JAVADOC_WRONG_SINGLETON_TAG.equals(msg)) {\n+            else if (MSG_JAVADOC_WRONG_SINGLETON_TAG.equals(msg)) {\n                 errorMessage \u003d new ParseErrorMessage(lineNumber,\n-                        JAVADOC_WRONG_SINGLETON_TAG, charPositionInLine, token.getText());\n+                        MSG_JAVADOC_WRONG_SINGLETON_TAG, charPositionInLine, token.getText());\n \n                 throw new ParseCancellationException(msg);\n             }\n             else {\n                 final int ruleIndex \u003d ex.getCtx().getRuleIndex();\n                 final String ruleName \u003d recognizer.getRuleNames()[ruleIndex];\n                 final String upperCaseRuleName \u003d CaseFormat.UPPER_CAMEL.to(\n                         CaseFormat.UPPER_UNDERSCORE, ruleName);\n \n                 errorMessage \u003d new ParseErrorMessage(lineNumber,\n-                        JAVADOC_PARSE_RULE_ERROR, charPositionInLine, msg, upperCaseRuleName);\n+                        MSG_JAVADOC_PARSE_RULE_ERROR, charPositionInLine, msg, upperCaseRuleName);\n             }\n         }\n\\ No newline at end of file\n"
    },
    "020d8b24693d7208a8892e3ba857cfe2d90a43bc": {
      "type": "Ybodychange",
      "commitMessage": "Fix exception creation without any arguments specified. #1555\n\nFixes `NewExceptionWithoutArguments` inspection violation.\n\nDescription:\n\u003eReports exception instance creation without any arguments specified. When an exception is constructed without arguments it contains no information about the fault that happened, which makes debugging needlessly hard.\n",
      "commitDate": 1439610313000,
      "commitName": "020d8b24693d7208a8892e3ba857cfe2d90a43bc",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1439610272000,
      "commitNameOld": "7453d382c140ac20cd225585a45cc19203dd399f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n         public void syntaxError(\n                 Recognizer\u003c?, ?\u003e recognizer, Object offendingSymbol,\n                 int line, int charPositionInLine,\n                 String msg, RecognitionException ex) {\n             final int lineNumber \u003d offset + line;\n             final Token token \u003d (Token) offendingSymbol;\n \n             if (JAVADOC_MISSED_HTML_CLOSE.equals(msg)) {\n                 errorMessage \u003d new ParseErrorMessage(lineNumber,\n                         JAVADOC_MISSED_HTML_CLOSE, charPositionInLine, token.getText());\n \n-                throw new ParseCancellationException();\n+                throw new ParseCancellationException(msg);\n             }\n             else if (JAVADOC_WRONG_SINGLETON_TAG.equals(msg)) {\n                 errorMessage \u003d new ParseErrorMessage(lineNumber,\n                         JAVADOC_WRONG_SINGLETON_TAG, charPositionInLine, token.getText());\n \n-                throw new ParseCancellationException();\n+                throw new ParseCancellationException(msg);\n             }\n             else {\n                 final int ruleIndex \u003d ex.getCtx().getRuleIndex();\n                 final String ruleName \u003d recognizer.getRuleNames()[ruleIndex];\n                 final String upperCaseRuleName \u003d CaseFormat.UPPER_CAMEL.to(\n                         CaseFormat.UPPER_UNDERSCORE, ruleName);\n \n                 errorMessage \u003d new ParseErrorMessage(lineNumber,\n                         JAVADOC_PARSE_RULE_ERROR, charPositionInLine, msg, upperCaseRuleName);\n             }\n         }\n\\ No newline at end of file\n"
    },
    "2c41aaf844d3206775c0a8c9e78aabf3a6d85a36": {
      "type": "Ybodychange",
      "commitMessage": "Improve test coverage in AbstractJavadocCheck. #1308\n",
      "commitDate": 1438432158000,
      "commitName": "2c41aaf844d3206775c0a8c9e78aabf3a6d85a36",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1436405647000,
      "commitNameOld": "e10364f313b887a6af19b3f63f2c5d671a453c63",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 23.45,
      "commitsBetweenForRepo": 249,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,29 @@\n         public void syntaxError(\n                 Recognizer\u003c?, ?\u003e recognizer, Object offendingSymbol,\n                 int line, int charPositionInLine,\n                 String msg, RecognitionException ex) {\n             final int lineNumber \u003d offset + line;\n             final Token token \u003d (Token) offendingSymbol;\n \n             if (JAVADOC_MISSED_HTML_CLOSE.equals(msg)) {\n                 errorMessage \u003d new ParseErrorMessage(lineNumber,\n                         JAVADOC_MISSED_HTML_CLOSE, charPositionInLine, token.getText());\n \n                 throw new ParseCancellationException();\n             }\n             else if (JAVADOC_WRONG_SINGLETON_TAG.equals(msg)) {\n                 errorMessage \u003d new ParseErrorMessage(lineNumber,\n                         JAVADOC_WRONG_SINGLETON_TAG, charPositionInLine, token.getText());\n \n                 throw new ParseCancellationException();\n             }\n             else {\n-                final RuleContext ruleContext \u003d ex.getCtx();\n-                if (ruleContext !\u003d null) {\n-                    final int ruleIndex \u003d ex.getCtx().getRuleIndex();\n-                    final String ruleName \u003d recognizer.getRuleNames()[ruleIndex];\n-                    final String upperCaseRuleName \u003d CaseFormat.UPPER_CAMEL.to(\n-                            CaseFormat.UPPER_UNDERSCORE, ruleName);\n+                final int ruleIndex \u003d ex.getCtx().getRuleIndex();\n+                final String ruleName \u003d recognizer.getRuleNames()[ruleIndex];\n+                final String upperCaseRuleName \u003d CaseFormat.UPPER_CAMEL.to(\n+                        CaseFormat.UPPER_UNDERSCORE, ruleName);\n \n-                    errorMessage \u003d new ParseErrorMessage(lineNumber,\n-                            JAVADOC_PARSE_RULE_ERROR, charPositionInLine, msg, upperCaseRuleName);\n-                }\n-                else {\n-                    errorMessage \u003d new ParseErrorMessage(lineNumber, JAVADOC_PARSE_TOKEN_ERROR,\n-                            charPositionInLine, msg, charPositionInLine);\n-                }\n+                errorMessage \u003d new ParseErrorMessage(lineNumber,\n+                        JAVADOC_PARSE_RULE_ERROR, charPositionInLine, msg, upperCaseRuleName);\n             }\n         }\n\\ No newline at end of file\n"
    },
    "89a51ba032fd9126651fa9efad31baf10c006ddf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, javadoc, #512\n",
      "commitDate": 1421677262000,
      "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "5c481899d4cfcb8369dcd0851aef21c2d8c5088a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #371. Fixed NumberFormatException while logging in AbstractJavadocCheck\n",
      "commitDate": 1416497981000,
      "commitName": "5c481899d4cfcb8369dcd0851aef21c2d8c5088a",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": 1415718326000,
      "commitNameOld": "7b6785343e306845f432154a1a5026ad25306226",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 9.02,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n         public void syntaxError(\n                 Recognizer\u003c?, ?\u003e aRecognizer, Object aOffendingSymbol,\n                 int aLine, int aCharPositionInLine,\n                 String aMsg, RecognitionException aEx)\n         {\n             final int lineNumber \u003d mOffset + aLine;\n             final Token token \u003d (Token) aOffendingSymbol;\n \n             if (JAVADOC_MISSED_HTML_CLOSE.equals(aMsg)) {\n-                mErrorMessage \u003d createLogMessage(lineNumber,\n+                mErrorMessage \u003d new ParseErrorMessage(lineNumber,\n                         JAVADOC_MISSED_HTML_CLOSE, aCharPositionInLine, token.getText());\n \n                 throw new ParseCancellationException();\n             }\n             else if (JAVADOC_WRONG_SINGLETON_TAG.equals(aMsg)) {\n-                mErrorMessage \u003d createLogMessage(lineNumber,\n+                mErrorMessage \u003d new ParseErrorMessage(lineNumber,\n                         JAVADOC_WRONG_SINGLETON_TAG, aCharPositionInLine, token.getText());\n \n                 throw new ParseCancellationException();\n             }\n             else {\n                 final RuleContext ruleContext \u003d aEx.getCtx();\n                 if (ruleContext !\u003d null) {\n                     final int ruleIndex \u003d aEx.getCtx().getRuleIndex();\n                     final String ruleName \u003d aRecognizer.getRuleNames()[ruleIndex];\n                     final String upperCaseRuleName \u003d CaseFormat.UPPER_CAMEL.to(\n                             CaseFormat.UPPER_UNDERSCORE, ruleName);\n \n-                    mErrorMessage \u003d createLogMessage(lineNumber,\n+                    mErrorMessage \u003d new ParseErrorMessage(lineNumber,\n                             JAVADOC_PARSE_RULE_ERROR, aCharPositionInLine, aMsg, upperCaseRuleName);\n                 }\n                 else {\n-                    mErrorMessage \u003d createLogMessage(lineNumber, JAVADOC_PARSE_TOKEN_ERROR,\n+                    mErrorMessage \u003d new ParseErrorMessage(lineNumber, JAVADOC_PARSE_TOKEN_ERROR,\n                             aCharPositionInLine, aMsg, aCharPositionInLine);\n                 }\n             }\n         }\n\\ No newline at end of file\n"
    },
    "2e1382c5bb1aa61cc01d7958a589e2a3831f56b5": {
      "type": "Ybodychange",
      "commitMessage": "Issue #49. Caching DetailNode trees in AbstractJavadocCheck\n",
      "commitDate": 1415399075000,
      "commitName": "2e1382c5bb1aa61cc01d7958a589e2a3831f56b5",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": 1413750761000,
      "commitNameOld": "ff12c1b012a1b18da8a1cd2101efd0173c612534",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 19.08,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,37 @@\n         public void syntaxError(\n                 Recognizer\u003c?, ?\u003e aRecognizer, Object aOffendingSymbol,\n                 int aLine, int aCharPositionInLine,\n                 String aMsg, RecognitionException aEx)\n         {\n             final int lineNumber \u003d mOffset + aLine;\n             final Token token \u003d (Token) aOffendingSymbol;\n \n             if (JAVADOC_MISSED_HTML_CLOSE.equals(aMsg)) {\n-                log(lineNumber, JAVADOC_MISSED_HTML_CLOSE, token.getText());\n+                mErrorMessage \u003d createLogMessage(lineNumber,\n+                        JAVADOC_MISSED_HTML_CLOSE, aCharPositionInLine, token.getText());\n+\n                 throw new ParseCancellationException();\n             }\n             else if (JAVADOC_WRONG_SINGLETON_TAG.equals(aMsg)) {\n-                log(lineNumber, JAVADOC_WRONG_SINGLETON_TAG, token.getText());\n+                mErrorMessage \u003d createLogMessage(lineNumber,\n+                        JAVADOC_WRONG_SINGLETON_TAG, aCharPositionInLine, token.getText());\n+\n                 throw new ParseCancellationException();\n             }\n             else {\n                 final RuleContext ruleContext \u003d aEx.getCtx();\n                 if (ruleContext !\u003d null) {\n                     final int ruleIndex \u003d aEx.getCtx().getRuleIndex();\n                     final String ruleName \u003d aRecognizer.getRuleNames()[ruleIndex];\n                     final String upperCaseRuleName \u003d CaseFormat.UPPER_CAMEL.to(\n                             CaseFormat.UPPER_UNDERSCORE, ruleName);\n-                    log(lineNumber, \"javadoc.parse.rule.error\", aMsg, upperCaseRuleName);\n+\n+                    mErrorMessage \u003d createLogMessage(lineNumber,\n+                            JAVADOC_PARSE_RULE_ERROR, aCharPositionInLine, aMsg, upperCaseRuleName);\n                 }\n                 else {\n-                    log(lineNumber, \"javadoc.parse.token.error\", aMsg);\n+                    mErrorMessage \u003d createLogMessage(lineNumber, JAVADOC_PARSE_TOKEN_ERROR,\n+                            aCharPositionInLine, aMsg, aCharPositionInLine);\n                 }\n             }\n         }\n\\ No newline at end of file\n"
    },
    "ff12c1b012a1b18da8a1cd2101efd0173c612534": {
      "type": "Yintroduced",
      "commitMessage": "Issue #49. Added support of Javadoc comments. Extended API to create Javadoc Checks.\n",
      "commitDate": 1413750761000,
      "commitName": "ff12c1b012a1b18da8a1cd2101efd0173c612534",
      "commitAuthor": "Baratali Izmailov"
    }
  }
}