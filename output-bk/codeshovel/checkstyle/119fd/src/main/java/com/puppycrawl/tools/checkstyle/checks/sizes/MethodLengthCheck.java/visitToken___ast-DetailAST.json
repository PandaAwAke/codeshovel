{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "MethodLengthCheck.java",
  "functionName": "visitToken",
  "functionId": "visitToken___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodLengthCheck.java",
  "functionStartLine": 93,
  "functionEndLine": 104,
  "changeHistory": [
    "6e775898e7d1ac179bcb6550f3023ee9b9d70bc3",
    "0dc48c7c567555a1efe8fb9cbf7ba1812034a5f2",
    "3fec4a92e39afc5b68b03c5fd023cb8d13408385",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "22705bd0d4d4867f646b8c3aca115d7b3cb9c022",
    "8a12b000f238052a19f41c2d00affdf5cbb69a8e",
    "ec6582beb1c026f1c3a9477d318d723e1caacb4a",
    "ba8a851e90352e893b7036bec5521b89ab1d37fd",
    "84eddc36730c1eca845257201c71a0d1fb2d40cf",
    "19708f981163ccbe8e4247e5f1b91caef788953b"
  ],
  "changeHistoryShort": {
    "6e775898e7d1ac179bcb6550f3023ee9b9d70bc3": "Ybodychange",
    "0dc48c7c567555a1efe8fb9cbf7ba1812034a5f2": "Ybodychange",
    "3fec4a92e39afc5b68b03c5fd023cb8d13408385": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "22705bd0d4d4867f646b8c3aca115d7b3cb9c022": "Ybodychange",
    "8a12b000f238052a19f41c2d00affdf5cbb69a8e": "Ybodychange",
    "ec6582beb1c026f1c3a9477d318d723e1caacb4a": "Yfilerename",
    "ba8a851e90352e893b7036bec5521b89ab1d37fd": "Ybodychange",
    "84eddc36730c1eca845257201c71a0d1fb2d40cf": "Ybodychange",
    "19708f981163ccbe8e4247e5f1b91caef788953b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6e775898e7d1ac179bcb6550f3023ee9b9d70bc3": {
      "type": "Ybodychange",
      "commitMessage": "Issue #46: Statements shouldn\u0027t be nested too deep.\n",
      "commitDate": 1441134086000,
      "commitName": "6e775898e7d1ac179bcb6550f3023ee9b9d70bc3",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": 1441043008000,
      "commitNameOld": "a1128cd7428ba71035c132a072de0da2e5c4c9cd",
      "commitAuthorOld": "Ruslan Diachenko",
      "daysBetweenCommits": 1.05,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,12 @@\n     public void visitToken(DetailAST ast) {\n         final DetailAST openingBrace \u003d ast.findFirstToken(TokenTypes.SLIST);\n         if (openingBrace !\u003d null) {\n             final DetailAST closingBrace \u003d\n                 openingBrace.findFirstToken(TokenTypes.RCURLY);\n-            int length \u003d\n-                closingBrace.getLineNo() - openingBrace.getLineNo() + 1;\n-\n-            if (!countEmpty) {\n-                final FileContents contents \u003d getFileContents();\n-                final int lastLine \u003d closingBrace.getLineNo();\n-                for (int i \u003d openingBrace.getLineNo() - 1; i \u003c lastLine; i++) {\n-                    if (contents.lineIsBlank(i) || contents.lineIsComment(i)) {\n-                        length--;\n-                    }\n-                }\n-            }\n+            final int length \u003d getLengthOfBlock(openingBrace, closingBrace);\n             if (length \u003e max) {\n                 log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY,\n                         length, max);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "0dc48c7c567555a1efe8fb9cbf7ba1812034a5f2": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, sizes package, issue #537\n",
      "commitDate": 1424437365000,
      "commitName": "0dc48c7c567555a1efe8fb9cbf7ba1812034a5f2",
      "commitAuthor": "alexkravin",
      "commitDateOld": 1424294072000,
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n     public void visitToken(DetailAST ast)\n     {\n         final DetailAST openingBrace \u003d ast.findFirstToken(TokenTypes.SLIST);\n         if (openingBrace !\u003d null) {\n             final DetailAST closingBrace \u003d\n                 openingBrace.findFirstToken(TokenTypes.RCURLY);\n             int length \u003d\n                 closingBrace.getLineNo() - openingBrace.getLineNo() + 1;\n \n             if (!countEmpty) {\n                 final FileContents contents \u003d getFileContents();\n                 final int lastLine \u003d closingBrace.getLineNo();\n                 for (int i \u003d openingBrace.getLineNo() - 1; i \u003c lastLine; i++) {\n                     if (contents.lineIsBlank(i) || contents.lineIsComment(i)) {\n                         length--;\n                     }\n                 }\n             }\n             if (length \u003e max) {\n-                log(ast.getLineNo(), ast.getColumnNo(), \"maxLen.method\",\n+                log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY,\n                         length, max);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "3fec4a92e39afc5b68b03c5fd023cb8d13408385": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, sizes, #512\n",
      "commitDate": 1421677310000,
      "commitName": "3fec4a92e39afc5b68b03c5fd023cb8d13408385",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "22705bd0d4d4867f646b8c3aca115d7b3cb9c022": {
      "type": "Ybodychange",
      "commitMessage": "Removal of explicit boxing.\n",
      "commitDate": 1198150614000,
      "commitName": "22705bd0d4d4867f646b8c3aca115d7b3cb9c022",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1198131671000,
      "commitNameOld": "f38d8abd42c3e824635e542e6031b3da1997c02e",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.22,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,24 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final DetailAST openingBrace \u003d aAST.findFirstToken(TokenTypes.SLIST);\n         if (openingBrace !\u003d null) {\n             final DetailAST closingBrace \u003d\n                 openingBrace.findFirstToken(TokenTypes.RCURLY);\n             int length \u003d\n                 closingBrace.getLineNo() - openingBrace.getLineNo() + 1;\n \n             if (!mCountEmpty) {\n                 final FileContents contents \u003d getFileContents();\n                 final int lastLine \u003d closingBrace.getLineNo();\n                 for (int i \u003d openingBrace.getLineNo() - 1; i \u003c lastLine; i++) {\n                     if (contents.lineIsBlank(i) || contents.lineIsComment(i)) {\n                         length--;\n                     }\n                 }\n             }\n             if (length \u003e mMax) {\n-                log(aAST.getLineNo(),\n-                    aAST.getColumnNo(),\n-                    \"maxLen.method\",\n-                    new Integer(length),\n-                    new Integer(mMax));\n+                log(aAST.getLineNo(), aAST.getColumnNo(), \"maxLen.method\",\n+                        length, mMax);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "8a12b000f238052a19f41c2d00affdf5cbb69a8e": {
      "type": "Ybodychange",
      "commitMessage": "Added MethodLengthCheck option for counting empty and comment lines (requests 589358 and 654039).\n",
      "commitDate": 1059219158000,
      "commitName": "8a12b000f238052a19f41c2d00affdf5cbb69a8e",
      "commitAuthor": "Rick Giles",
      "commitDateOld": 1055144900000,
      "commitNameOld": "889587fdd22ba03ea670e404d36810e9af113c9d",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 47.16,
      "commitsBetweenForRepo": 129,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,27 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final DetailAST openingBrace \u003d aAST.findFirstToken(TokenTypes.SLIST);\n         if (openingBrace !\u003d null) {\n             final DetailAST closingBrace \u003d\n                 openingBrace.findFirstToken(TokenTypes.RCURLY);\n-            final int length \u003d\n+            int length \u003d\n                 closingBrace.getLineNo() - openingBrace.getLineNo() + 1;\n+\n+            if (!mCountEmpty) {\n+                final FileContents contents \u003d getFileContents();\n+                final int lastLine \u003d closingBrace.getLineNo();\n+                for (int i \u003d openingBrace.getLineNo() - 1; i \u003c lastLine; i++) {\n+                    if (contents.lineIsBlank(i) || contents.lineIsComment(i)) {\n+                        length--;\n+                    }\n+                }\n+            }\n             if (length \u003e mMax) {\n                 log(aAST.getLineNo(),\n                     aAST.getColumnNo(),\n                     \"maxLen.method\",\n                     new Integer(length),\n                     new Integer(mMax));\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "ec6582beb1c026f1c3a9477d318d723e1caacb4a": {
      "type": "Yfilerename",
      "commitMessage": "Refactored the Sizes checks\n",
      "commitDate": 1054729409000,
      "commitName": "ec6582beb1c026f1c3a9477d318d723e1caacb4a",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1054727729000,
      "commitNameOld": "2e8126e99047befc39560342981b0b8e7cabea21",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "ba8a851e90352e893b7036bec5521b89ab1d37fd": {
      "type": "Ybodychange",
      "commitMessage": "Fixed bug in MethodLengthCheck where it was assuming that a method definition\nhad to have braces. Not the case for interfaces and abstract methods. Need to\nmake the same change to the other method check.\n",
      "commitDate": 1036289647000,
      "commitName": "ba8a851e90352e893b7036bec5521b89ab1d37fd",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1035008886000,
      "commitNameOld": "84eddc36730c1eca845257201c71a0d1fb2d40cf",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 14.82,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n     public void visitToken(DetailAST aAST)\n     {\n-        if (aAST.getType() !\u003d TokenTypes.METHOD_DEF) {\n-            return;\n-        }\n-\n-        DetailAST openingBrace \u003d aAST.getLastChild();\n-        DetailAST closingBrace \u003d openingBrace.getLastChild();\n-        int methodBodyStart \u003d openingBrace.getLineNo();\n-        int methodBodyEnd \u003d closingBrace.getLineNo();\n-        int length \u003d methodBodyEnd - methodBodyStart + 1;\n-        if (length \u003e mMax) {\n-            // TODO: This is old style but shouldn\u0027r we use aAST.getLineNo() ?\n-            log(openingBrace.getLineNo(), \"maxLen.method\",\n-                    new Integer(length), new Integer(mMax));\n+        final DetailAST openingBrace \u003d aAST.findFirstToken(TokenTypes.SLIST);\n+        if (openingBrace !\u003d null) {\n+            final DetailAST closingBrace \u003d\n+                openingBrace.findFirstToken(TokenTypes.RCURLY);\n+            final int length \u003d\n+                closingBrace.getLineNo() - openingBrace.getLineNo() + 1;\n+            if (length \u003e mMax) {\n+                log(aAST.getLineNo(),\n+                    aAST.getColumnNo(),\n+                    \"maxLen.method\",\n+                    new Integer(length),\n+                    new Integer(mMax));\n+            }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "84eddc36730c1eca845257201c71a0d1fb2d40cf": {
      "type": "Ybodychange",
      "commitMessage": "Added a new class TokenTypes that contains all the type constants. This class\nbreaks the circular dependencies - the cost is needing to maintain this class\nwhen a new grammar is introduced.\n",
      "commitDate": 1035008886000,
      "commitName": "84eddc36730c1eca845257201c71a0d1fb2d40cf",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1034892534000,
      "commitNameOld": "19708f981163ccbe8e4247e5f1b91caef788953b",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 1.35,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n     public void visitToken(DetailAST aAST)\n     {\n-        if (aAST.getType() !\u003d JavaTokenTypes.METHOD_DEF) {\n+        if (aAST.getType() !\u003d TokenTypes.METHOD_DEF) {\n             return;\n         }\n \n         DetailAST openingBrace \u003d aAST.getLastChild();\n         DetailAST closingBrace \u003d openingBrace.getLastChild();\n         int methodBodyStart \u003d openingBrace.getLineNo();\n         int methodBodyEnd \u003d closingBrace.getLineNo();\n         int length \u003d methodBodyEnd - methodBodyStart + 1;\n         if (length \u003e mMax) {\n             // TODO: This is old style but shouldn\u0027r we use aAST.getLineNo() ?\n             log(openingBrace.getLineNo(), \"maxLen.method\",\n                     new Integer(length), new Integer(mMax));\n         }\n     }\n\\ No newline at end of file\n"
    },
    "19708f981163ccbe8e4247e5f1b91caef788953b": {
      "type": "Yintroduced",
      "commitMessage": "Added MethodLengthCheck + test\nAdded some helpers to DetailAST to simplify the implementation of the MethodLengthCheck\n",
      "commitDate": 1034892534000,
      "commitName": "19708f981163ccbe8e4247e5f1b91caef788953b",
      "commitAuthor": "Lars Kühne"
    }
  }
}