{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "AtclauseOrderCheck.java",
  "functionName": "checkOrderInTagSection",
  "functionId": "checkOrderInTagSection___javadoc-DetailNode",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java",
  "functionStartLine": 156,
  "functionEndLine": 174,
  "changeHistory": [
    "3fe3fc67cb39111116eab03f9c91c5dfb1cdbd4f",
    "c4928f486c67afa62e7e8fbd5d8f731be7186985",
    "8a3f5bf6d5389b9e175c9c769992faece6d76ada",
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc",
    "89a51ba032fd9126651fa9efad31baf10c006ddf",
    "fe628e5bbd310d6876842126770719ade93dc7b0"
  ],
  "changeHistoryShort": {
    "3fe3fc67cb39111116eab03f9c91c5dfb1cdbd4f": "Ybodychange",
    "c4928f486c67afa62e7e8fbd5d8f731be7186985": "Ybodychange",
    "8a3f5bf6d5389b9e175c9c769992faece6d76ada": "Ybodychange",
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc": "Ybodychange",
    "89a51ba032fd9126651fa9efad31baf10c006ddf": "Ymultichange(Yparameterchange,Ybodychange)",
    "fe628e5bbd310d6876842126770719ade93dc7b0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3fe3fc67cb39111116eab03f9c91c5dfb1cdbd4f": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2095: Fix false negative in AtclauseOrder check",
      "commitDate": 1442520264000,
      "commitName": "3fe3fc67cb39111116eab03f9c91c5dfb1cdbd4f",
      "commitAuthor": "Vladislav Lisetskiy",
      "commitDateOld": 1440677821000,
      "commitNameOld": "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 21.32,
      "commitsBetweenForRepo": 304,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,19 @@\n     private void checkOrderInTagSection(DetailNode javadoc) {\n-        int indexOrderOfPreviousTag \u003d 0;\n+        int maxIndexOfPreviousTag \u003d 0;\n \n         for (DetailNode node : javadoc.getChildren()) {\n             if (node.getType() \u003d\u003d JavadocTokenTypes.JAVADOC_TAG) {\n                 final String tagText \u003d JavadocUtils.getFirstChild(node).getText();\n-                final int indexOrderOfCurrentTag \u003d tagOrder.indexOf(tagText);\n+                final int indexOfCurrentTag \u003d tagOrder.indexOf(tagText);\n \n-                if (tagOrder.contains(tagText)\n-                        \u0026\u0026 indexOrderOfCurrentTag \u003c indexOrderOfPreviousTag) {\n-                    log(node.getLineNumber(), MSG_KEY, tagOrder.toString());\n+                if (indexOfCurrentTag !\u003d -1) {\n+                    if (indexOfCurrentTag \u003c maxIndexOfPreviousTag) {\n+                        log(node.getLineNumber(), MSG_KEY, tagOrder.toString());\n+                    }\n+                    else {\n+                        maxIndexOfPreviousTag \u003d indexOfCurrentTag;\n+                    }\n                 }\n-                indexOrderOfPreviousTag \u003d indexOrderOfCurrentTag;\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "c4928f486c67afa62e7e8fbd5d8f731be7186985": {
      "type": "Ybodychange",
      "commitMessage": "Decrease scope of variables. #1555\n\nFixes `TooBroadScope` inspection violations.\n\nDescription:\n\u003eReports any variable declarations of which the scope can be narrowed. Especially useful for \"Pascal style\" declarations at the start of a method, but variables with too broad a scope are also often left over after refactorings.\n",
      "commitDate": 1439355282000,
      "commitName": "c4928f486c67afa62e7e8fbd5d8f731be7186985",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1439131302000,
      "commitNameOld": "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 2.59,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,16 @@\n     private void checkOrderInTagSection(DetailNode javadoc) {\n         int indexOrderOfPreviousTag \u003d 0;\n-        int indexOrderOfCurrentTag;\n \n         for (DetailNode node : javadoc.getChildren()) {\n             if (node.getType() \u003d\u003d JavadocTokenTypes.JAVADOC_TAG) {\n                 final String tagText \u003d JavadocUtils.getFirstChild(node).getText();\n-                indexOrderOfCurrentTag \u003d tagOrder.indexOf(tagText);\n+                final int indexOrderOfCurrentTag \u003d tagOrder.indexOf(tagText);\n \n                 if (tagOrder.contains(tagText)\n                         \u0026\u0026 indexOrderOfCurrentTag \u003c indexOrderOfPreviousTag) {\n                     log(node.getLineNumber(), MSG_KEY, tagOrder.toString());\n                 }\n                 indexOrderOfPreviousTag \u003d indexOrderOfCurrentTag;\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "8a3f5bf6d5389b9e175c9c769992faece6d76ada": {
      "type": "Ybodychange",
      "commitMessage": "Remove unused assignments. #1555\n\nFixes UnusedAssignment inspection violations.\n\nDescription:\n\u003eThis inspection points out the cases where a variable value is never used after its assignment, i.e.:\n- the variable never gets read after assignment OR\n- the value is always overwritten with another assignment before the next variable read OR\n - the variable initializer is redundant (for one of the above two reasons) OR\n - the variable is never used.\n",
      "commitDate": 1439007161000,
      "commitName": "8a3f5bf6d5389b9e175c9c769992faece6d76ada",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1438566538000,
      "commitNameOld": "e6538f822f3fb690d01b3f27aabb6785d9732a29",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 5.1,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n     private void checkOrderInTagSection(DetailNode javadoc) {\n         int indexOrderOfPreviousTag \u003d 0;\n-        int indexOrderOfCurrentTag \u003d 0;\n+        int indexOrderOfCurrentTag;\n \n         for (DetailNode node : javadoc.getChildren()) {\n             if (node.getType() \u003d\u003d JavadocTokenTypes.JAVADOC_TAG) {\n                 final String tagText \u003d JavadocUtils.getFirstChild(node).getText();\n                 indexOrderOfCurrentTag \u003d tagOrder.indexOf(tagText);\n \n                 if (tagOrder.contains(tagText)\n                         \u0026\u0026 indexOrderOfCurrentTag \u003c indexOrderOfPreviousTag) {\n                     log(node.getLineNumber(), MSG_KEY, tagOrder.toString());\n                 }\n                 indexOrderOfPreviousTag \u003d indexOrderOfCurrentTag;\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, javadoc package, issue #537\n",
      "commitDate": 1424437366000,
      "commitName": "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc",
      "commitAuthor": "alexkravin",
      "commitDateOld": 1424294072000,
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n     private void checkOrderInTagSection(DetailNode javadoc)\n     {\n         int indexOrderOfPreviousTag \u003d 0;\n         int indexOrderOfCurrentTag \u003d 0;\n \n         for (DetailNode node : javadoc.getChildren()) {\n             if (node.getType() \u003d\u003d JavadocTokenTypes.JAVADOC_TAG) {\n                 final String tagText \u003d JavadocUtils.getFirstChild(node).getText();\n                 indexOrderOfCurrentTag \u003d tagOrder.indexOf(tagText);\n \n                 if (tagOrder.contains(tagText)\n                         \u0026\u0026 indexOrderOfCurrentTag \u003c indexOrderOfPreviousTag)\n                 {\n-                    log(node.getLineNumber(), \"at.clause.order\", tagOrder.toString());\n+                    log(node.getLineNumber(), MSG_KEY, tagOrder.toString());\n                 }\n                 indexOrderOfPreviousTag \u003d indexOrderOfCurrentTag;\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "89a51ba032fd9126651fa9efad31baf10c006ddf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, javadoc, #512\n",
      "commitDate": 1421677262000,
      "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "fe628e5bbd310d6876842126770719ade93dc7b0": {
      "type": "Yintroduced",
      "commitMessage": "AtclauseOrderCheck #306\n",
      "commitDate": 1413874166000,
      "commitName": "fe628e5bbd310d6876842126770719ade93dc7b0",
      "commitAuthor": "maxvetrenko"
    }
  }
}