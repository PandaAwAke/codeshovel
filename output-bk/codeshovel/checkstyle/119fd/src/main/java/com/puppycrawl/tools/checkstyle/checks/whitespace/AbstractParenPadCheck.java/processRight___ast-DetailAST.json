{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "AbstractParenPadCheck.java",
  "functionName": "processRight",
  "functionId": "processRight___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/AbstractParenPadCheck.java",
  "functionStartLine": 111,
  "functionEndLine": 127,
  "changeHistory": [
    "82bc23f45d7d57dfa26d1a1d4ec0f7dfcd88abb2",
    "77733a452387aa2ee99fdc9a737633566cc7af3d",
    "15557f448c4d9287dc19e4013e9d952638e528cd",
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
    "085ce12db0983590844ccc24ea49f91686a30ed8",
    "4d6e2376db89b69167de867bfc28f8d8624a6b78",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf",
    "d97a2df674716efb7deda50180ae933bdc46d68a",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "e55435125ea57e96f0bf876dd13e78b0ae02cd52",
    "99ed7a7d2c1861dbf327ea9a421ec56f10c92fc2",
    "2e8126e99047befc39560342981b0b8e7cabea21",
    "6a567c03a8eb4d755900361efe7b9658d27acae8",
    "916417fc6214ab75606d2fbc1d7b511509ffe25b",
    "267bdf541787643fbe6126605cbfb91dbcde1e91",
    "aede54ee77fb0887148db30be804b36758111698"
  ],
  "changeHistoryShort": {
    "82bc23f45d7d57dfa26d1a1d4ec0f7dfcd88abb2": "Ybodychange",
    "77733a452387aa2ee99fdc9a737633566cc7af3d": "Ybodychange",
    "15557f448c4d9287dc19e4013e9d952638e528cd": "Ybodychange",
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7": "Ybodychange",
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970": "Ybodychange",
    "085ce12db0983590844ccc24ea49f91686a30ed8": "Ybodychange",
    "4d6e2376db89b69167de867bfc28f8d8624a6b78": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf": "Ybodychange",
    "d97a2df674716efb7deda50180ae933bdc46d68a": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "e55435125ea57e96f0bf876dd13e78b0ae02cd52": "Ybodychange",
    "99ed7a7d2c1861dbf327ea9a421ec56f10c92fc2": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
    "2e8126e99047befc39560342981b0b8e7cabea21": "Yfilerename",
    "6a567c03a8eb4d755900361efe7b9658d27acae8": "Ybodychange",
    "916417fc6214ab75606d2fbc1d7b511509ffe25b": "Ybodychange",
    "267bdf541787643fbe6126605cbfb91dbcde1e91": "Ybodychange",
    "aede54ee77fb0887148db30be804b36758111698": "Yintroduced"
  },
  "changeHistoryDetails": {
    "82bc23f45d7d57dfa26d1a1d4ec0f7dfcd88abb2": {
      "type": "Ybodychange",
      "commitMessage": "Pull #4328: moved variables inside if blocks to reduce execution time",
      "commitDate": 1494119754000,
      "commitName": "82bc23f45d7d57dfa26d1a1d4ec0f7dfcd88abb2",
      "commitAuthor": "rnveach",
      "commitDateOld": 1488165925000,
      "commitNameOld": "ce21086e087661553f3a774c38362327ee88996a",
      "commitAuthorOld": "Vladislav Lisetskii",
      "daysBetweenCommits": 68.91,
      "commitsBetweenForRepo": 279,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n     protected void processRight(DetailAST ast) {\n-        final String line \u003d getLines()[ast.getLineNo() - 1];\n         final int before \u003d ast.getColumnNo() - 1;\n         if (before \u003e\u003d 0) {\n+            final String line \u003d getLines()[ast.getLineNo() - 1];\n             if (option \u003d\u003d PadOption.NOSPACE\n                 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !CommonUtils.hasWhitespaceBefore(before, line)) {\n                 log(ast.getLineNo(), before, MSG_WS_PRECEDED, CLOSE_PARENTHESIS);\n             }\n             else if (option \u003d\u003d PadOption.SPACE\n                 \u0026\u0026 !Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 line.charAt(before) !\u003d OPEN_PARENTHESIS) {\n                 log(ast.getLineNo(), ast.getColumnNo(),\n                     MSG_WS_NOT_PRECEDED, CLOSE_PARENTHESIS);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "77733a452387aa2ee99fdc9a737633566cc7af3d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2836: renamed error message fields to match standard naming",
      "commitDate": 1453387259000,
      "commitName": "77733a452387aa2ee99fdc9a737633566cc7af3d",
      "commitAuthor": "rnveach",
      "commitDateOld": 1451953543000,
      "commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 16.59,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n     protected void processRight(DetailAST ast) {\n         final String line \u003d getLines()[ast.getLineNo() - 1];\n         final int before \u003d ast.getColumnNo() - 1;\n         if (before \u003e\u003d 0) {\n             if (option \u003d\u003d PadOption.NOSPACE\n                 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !CommonUtils.hasWhitespaceBefore(before, line)) {\n-                log(ast.getLineNo(), before, WS_PRECEDED, CLOSE_PARENTHESIS);\n+                log(ast.getLineNo(), before, MSG_WS_PRECEDED, CLOSE_PARENTHESIS);\n             }\n             else if (option \u003d\u003d PadOption.SPACE\n                 \u0026\u0026 !Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 line.charAt(before) !\u003d OPEN_PARENTHESIS) {\n                 log(ast.getLineNo(), ast.getColumnNo(),\n-                    WS_NOT_PRECEDED, CLOSE_PARENTHESIS);\n+                    MSG_WS_NOT_PRECEDED, CLOSE_PARENTHESIS);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "15557f448c4d9287dc19e4013e9d952638e528cd": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2451: removed excess hierarchy from AbstractParenPadCheck",
      "commitDate": 1447384611000,
      "commitName": "15557f448c4d9287dc19e4013e9d952638e528cd",
      "commitAuthor": "rnveach",
      "commitDateOld": 1440827451000,
      "commitNameOld": "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 75.89,
      "commitsBetweenForRepo": 601,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n     protected void processRight(DetailAST ast) {\n         final String line \u003d getLines()[ast.getLineNo() - 1];\n         final int before \u003d ast.getColumnNo() - 1;\n         if (before \u003e\u003d 0) {\n-            if (getAbstractOption() \u003d\u003d PadOption.NOSPACE\n+            if (option \u003d\u003d PadOption.NOSPACE\n                 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !CommonUtils.hasWhitespaceBefore(before, line)) {\n                 log(ast.getLineNo(), before, WS_PRECEDED, CLOSE_PARENTHESIS);\n             }\n-            else if (getAbstractOption() \u003d\u003d PadOption.SPACE\n+            else if (option \u003d\u003d PadOption.SPACE\n                 \u0026\u0026 !Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 line.charAt(before) !\u003d OPEN_PARENTHESIS) {\n                 log(ast.getLineNo(), ast.getColumnNo(),\n                     WS_NOT_PRECEDED, CLOSE_PARENTHESIS);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1555: Rename methods returning boolean to use question word\n\nFixes some `BooleanMethodNameMustStartWithQuestion` inspection violations.\n\nDescription:\n\u003eReports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection.\n",
      "commitDate": 1440827451000,
      "commitName": "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440677821000,
      "commitNameOld": "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 1.73,
      "commitsBetweenForRepo": 92,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n     protected void processRight(DetailAST ast) {\n         final String line \u003d getLines()[ast.getLineNo() - 1];\n         final int before \u003d ast.getColumnNo() - 1;\n         if (before \u003e\u003d 0) {\n             if (getAbstractOption() \u003d\u003d PadOption.NOSPACE\n                 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n-                \u0026\u0026 !CommonUtils.whitespaceBefore(before, line)) {\n+                \u0026\u0026 !CommonUtils.hasWhitespaceBefore(before, line)) {\n                 log(ast.getLineNo(), before, WS_PRECEDED, CLOSE_PARENTHESIS);\n             }\n             else if (getAbstractOption() \u003d\u003d PadOption.SPACE\n                 \u0026\u0026 !Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 line.charAt(before) !\u003d OPEN_PARENTHESIS) {\n                 log(ast.getLineNo(), ast.getColumnNo(),\n                     WS_NOT_PRECEDED, CLOSE_PARENTHESIS);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970": {
      "type": "Ybodychange",
      "commitMessage": "Utils class has been splitted to CommonUtils and TokenUtils. Issue #1898\n",
      "commitDate": 1440677821000,
      "commitName": "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": 1440677821000,
      "commitNameOld": "ed595de84fba2db507adaf01d04cb089a5e0bac5",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n     protected void processRight(DetailAST ast) {\n         final String line \u003d getLines()[ast.getLineNo() - 1];\n         final int before \u003d ast.getColumnNo() - 1;\n         if (before \u003e\u003d 0) {\n             if (getAbstractOption() \u003d\u003d PadOption.NOSPACE\n                 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n-                \u0026\u0026 !Utils.whitespaceBefore(before, line)) {\n+                \u0026\u0026 !CommonUtils.whitespaceBefore(before, line)) {\n                 log(ast.getLineNo(), before, WS_PRECEDED, CLOSE_PARENTHESIS);\n             }\n             else if (getAbstractOption() \u003d\u003d PadOption.SPACE\n                 \u0026\u0026 !Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 line.charAt(before) !\u003d OPEN_PARENTHESIS) {\n                 log(ast.getLineNo(), ast.getColumnNo(),\n                     WS_NOT_PRECEDED, CLOSE_PARENTHESIS);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "085ce12db0983590844ccc24ea49f91686a30ed8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: MultipleStringLiterals violations fixed\n",
      "commitDate": 1440543609000,
      "commitName": "085ce12db0983590844ccc24ea49f91686a30ed8",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": 1439084780000,
      "commitNameOld": "4d6e2376db89b69167de867bfc28f8d8624a6b78",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 16.88,
      "commitsBetweenForRepo": 294,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n     protected void processRight(DetailAST ast) {\n         final String line \u003d getLines()[ast.getLineNo() - 1];\n         final int before \u003d ast.getColumnNo() - 1;\n         if (before \u003e\u003d 0) {\n             if (getAbstractOption() \u003d\u003d PadOption.NOSPACE\n                 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !Utils.whitespaceBefore(before, line)) {\n-                log(ast.getLineNo(), before, WS_PRECEDED, \")\");\n+                log(ast.getLineNo(), before, WS_PRECEDED, CLOSE_PARENTHESIS);\n             }\n             else if (getAbstractOption() \u003d\u003d PadOption.SPACE\n                 \u0026\u0026 !Character.isWhitespace(line.charAt(before))\n-                \u0026\u0026 line.charAt(before) !\u003d \u0027(\u0027) {\n+                \u0026\u0026 line.charAt(before) !\u003d OPEN_PARENTHESIS) {\n                 log(ast.getLineNo(), ast.getColumnNo(),\n-                    WS_NOT_PRECEDED, \")\");\n+                    WS_NOT_PRECEDED, CLOSE_PARENTHESIS);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "4d6e2376db89b69167de867bfc28f8d8624a6b78": {
      "type": "Ybodychange",
      "commitMessage": "Move constants to left side of comparison. #1555\n\nFixes `ConstantOnLHSOfComparison` inspection violations.\n\nDescription:\n\u003eReports on comparison operations with constant values on their left-hand side. Some coding conventions specify that constants should be on the right-hand side of comparisons.\n",
      "commitDate": 1439084780000,
      "commitName": "4d6e2376db89b69167de867bfc28f8d8624a6b78",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1437631122000,
      "commitNameOld": "acbd47a66b01acc392a7bd37ad3a2e65eecd308a",
      "commitAuthorOld": "Aleksandr Ivanov",
      "daysBetweenCommits": 16.82,
      "commitsBetweenForRepo": 180,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n     protected void processRight(DetailAST ast) {\n         final String line \u003d getLines()[ast.getLineNo() - 1];\n         final int before \u003d ast.getColumnNo() - 1;\n         if (before \u003e\u003d 0) {\n-            if (PadOption.NOSPACE \u003d\u003d getAbstractOption()\n+            if (getAbstractOption() \u003d\u003d PadOption.NOSPACE\n                 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !Utils.whitespaceBefore(before, line)) {\n                 log(ast.getLineNo(), before, WS_PRECEDED, \")\");\n             }\n-            else if (PadOption.SPACE \u003d\u003d getAbstractOption()\n+            else if (getAbstractOption() \u003d\u003d PadOption.SPACE\n                 \u0026\u0026 !Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 line.charAt(before) !\u003d \u0027(\u0027) {\n                 log(ast.getLineNo(), ast.getColumnNo(),\n                     WS_NOT_PRECEDED, \")\");\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": 1426023398000,
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1425602876000,
      "commitNameOld": "f7828693395f71a6ae99710f3fab44cb8a66ea51",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 4.87,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n     protected void processRight(DetailAST ast)\n     {\n         final String line \u003d getLines()[ast.getLineNo() - 1];\n         final int before \u003d ast.getColumnNo() - 1;\n         if (before \u003e\u003d 0) {\n-            if ((PadOption.NOSPACE \u003d\u003d getAbstractOption())\n+            if (PadOption.NOSPACE \u003d\u003d getAbstractOption()\n                 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !Utils.whitespaceBefore(before, line))\n             {\n                 log(ast.getLineNo(), before, WS_PRECEDED, \")\");\n             }\n-            else if ((PadOption.SPACE \u003d\u003d getAbstractOption())\n+            else if (PadOption.SPACE \u003d\u003d getAbstractOption()\n                 \u0026\u0026 !Character.isWhitespace(line.charAt(before))\n-                \u0026\u0026 (line.charAt(before) !\u003d \u0027(\u0027))\n+                \u0026\u0026 line.charAt(before) !\u003d \u0027(\u0027)\n             {\n                 log(ast.getLineNo(), ast.getColumnNo(),\n                     WS_NOT_PRECEDED, \")\");\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, whitespace package, issue #537\n",
      "commitDate": 1424437365000,
      "commitName": "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf",
      "commitAuthor": "alexkravin",
      "commitDateOld": 1424294072000,
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n     protected void processRight(DetailAST ast)\n     {\n         final String line \u003d getLines()[ast.getLineNo() - 1];\n         final int before \u003d ast.getColumnNo() - 1;\n         if (before \u003e\u003d 0) {\n             if ((PadOption.NOSPACE \u003d\u003d getAbstractOption())\n                 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !Utils.whitespaceBefore(before, line))\n             {\n-                log(ast.getLineNo(), before, \"ws.preceded\", \")\");\n+                log(ast.getLineNo(), before, WS_PRECEDED, \")\");\n             }\n             else if ((PadOption.SPACE \u003d\u003d getAbstractOption())\n                 \u0026\u0026 !Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 (line.charAt(before) !\u003d \u0027(\u0027))\n             {\n                 log(ast.getLineNo(), ast.getColumnNo(),\n-                    \"ws.notPreceded\", \")\");\n+                    WS_NOT_PRECEDED, \")\");\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "d97a2df674716efb7deda50180ae933bdc46d68a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, whitespace, #512\n",
      "commitDate": 1421677248000,
      "commitName": "d97a2df674716efb7deda50180ae933bdc46d68a",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "e55435125ea57e96f0bf876dd13e78b0ae02cd52": {
      "type": "Ybodychange",
      "commitMessage": "corrected misspelling of \"precede\", bug 744342\n",
      "commitDate": 1058178241000,
      "commitName": "e55435125ea57e96f0bf876dd13e78b0ae02cd52",
      "commitAuthor": "Rick Giles",
      "commitDateOld": 1055144900000,
      "commitNameOld": "889587fdd22ba03ea670e404d36810e9af113c9d",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 35.11,
      "commitsBetweenForRepo": 101,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n     protected void processRight(DetailAST aAST)\n     {\n         final String line \u003d getLines()[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         if (before \u003e\u003d 0) {\n             if ((PadOption.NOSPACE \u003d\u003d getAbstractOption())\n                 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !Utils.whitespaceBefore(before, line))\n             {\n-                log(aAST.getLineNo(), before, \"ws.preceeded\", \")\");\n+                log(aAST.getLineNo(), before, \"ws.preceded\", \")\");\n             }\n             else if ((PadOption.SPACE \u003d\u003d getAbstractOption())\n                 \u0026\u0026 !Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 (line.charAt(before) !\u003d \u0027(\u0027))\n             {\n                 log(aAST.getLineNo(), aAST.getColumnNo(),\n-                    \"ws.notPreceeded\", \")\");\n+                    \"ws.notPreceded\", \")\");\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "99ed7a7d2c1861dbf327ea9a421ec56f10c92fc2": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
      "commitMessage": "bug-750348: added check for typecast parens. Involved\na bit of refactoring.\n",
      "commitDate": 1055139619000,
      "commitName": "99ed7a7d2c1861dbf327ea9a421ec56f10c92fc2",
      "commitAuthor": "Oliver Burn",
      "subchanges": [
        "Ymovefromfile",
        "Ymodifierchange",
        "Ybodychange"
      ]
    },
    "2e8126e99047befc39560342981b0b8e7cabea21": {
      "type": "Yfilerename",
      "commitMessage": "Refactored the Whitespace checks\n",
      "commitDate": 1054727729000,
      "commitName": "2e8126e99047befc39560342981b0b8e7cabea21",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1054723367000,
      "commitNameOld": "3bd6412e39a141b980901f291391ff1bcc4a61f3",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "6a567c03a8eb4d755900361efe7b9658d27acae8": {
      "type": "Ybodychange",
      "commitMessage": "Removed lines of commented-out code.\n",
      "commitDate": 1042317614000,
      "commitName": "6a567c03a8eb4d755900361efe7b9658d27acae8",
      "commitAuthor": "Rick Giles",
      "commitDateOld": 1042316222000,
      "commitNameOld": "916417fc6214ab75606d2fbc1d7b511509ffe25b",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,33 @@\n     private void processRight(DetailAST aAST)\n     {\n         final String line \u003d getLines()[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         if (before \u003e\u003d 0) {\n             boolean followsEmptyForIterator \u003d false;\n             final DetailAST parent \u003d aAST.getParent();\n             if ((parent !\u003d null) \n                 \u0026\u0026 (parent.getType() \u003d\u003d TokenTypes.LITERAL_FOR))\n             {\n                 final DetailAST forIterator \u003d\n                     parent.findFirstToken(TokenTypes.FOR_ITERATOR);\n                 followsEmptyForIterator \u003d (forIterator.getChildCount() \u003d\u003d 0)\n                     \u0026\u0026 (aAST \u003d\u003d forIterator.getNextSibling());\n             }\n             if (followsEmptyForIterator) {\n                 return;\n-//                if (mPadEmptyForIterator\n-//                    \u0026\u0026 !Character.isWhitespace(line.charAt(before)))\n-//                {\n-//                    log(aAST.getLineNo(), aAST.getColumnNo(),\n-//                        \"ws.notPreceeded\", \")\");\n-//                }\n-//                else if (!mPadEmptyForIterator\n-//                    \u0026\u0026 Character.isWhitespace(line.charAt(before)))\n-//                {\n-//                    log(aAST.getLineNo(), before, \"ws.preceeded\", \")\");\n-//                }  \n             }\n             else if ((PadOption.NOSPACE \u003d\u003d getAbstractOption())\n                 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !Utils.whitespaceBefore(before, line))\n             {\n                 log(aAST.getLineNo(), before, \"ws.preceeded\", \")\");\n             }\n             else if ((PadOption.SPACE \u003d\u003d getAbstractOption())\n                 \u0026\u0026 !Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 (line.charAt(before) !\u003d \u0027(\u0027))\n             {\n                 log(aAST.getLineNo(), aAST.getColumnNo(),\n                     \"ws.notPreceeded\", \")\");\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "916417fc6214ab75606d2fbc1d7b511509ffe25b": {
      "type": "Ybodychange",
      "commitMessage": "Check for policy of space at an empty for interator.\nAddresses requests 565666, 583725.\nParenPad and WhitespaceAfter no longer check an empty for iterator.\nNot doing so, and using check EmptyForIterator, is less complex than\nproviding properties for ParenPad and WhitespaceAfter.\n",
      "commitDate": 1042316222000,
      "commitName": "916417fc6214ab75606d2fbc1d7b511509ffe25b",
      "commitAuthor": "Rick Giles",
      "commitDateOld": 1039999056000,
      "commitNameOld": "fa0c0353c280c30f2d1cfda01ecfe6597ff46f6b",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 26.82,
      "commitsBetweenForRepo": 121,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,44 @@\n     private void processRight(DetailAST aAST)\n     {\n         final String line \u003d getLines()[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         if (before \u003e\u003d 0) {\n-            if ((PadOption.NOSPACE \u003d\u003d getAbstractOption())\n+            boolean followsEmptyForIterator \u003d false;\n+            final DetailAST parent \u003d aAST.getParent();\n+            if ((parent !\u003d null) \n+                \u0026\u0026 (parent.getType() \u003d\u003d TokenTypes.LITERAL_FOR))\n+            {\n+                final DetailAST forIterator \u003d\n+                    parent.findFirstToken(TokenTypes.FOR_ITERATOR);\n+                followsEmptyForIterator \u003d (forIterator.getChildCount() \u003d\u003d 0)\n+                    \u0026\u0026 (aAST \u003d\u003d forIterator.getNextSibling());\n+            }\n+            if (followsEmptyForIterator) {\n+                return;\n+//                if (mPadEmptyForIterator\n+//                    \u0026\u0026 !Character.isWhitespace(line.charAt(before)))\n+//                {\n+//                    log(aAST.getLineNo(), aAST.getColumnNo(),\n+//                        \"ws.notPreceeded\", \")\");\n+//                }\n+//                else if (!mPadEmptyForIterator\n+//                    \u0026\u0026 Character.isWhitespace(line.charAt(before)))\n+//                {\n+//                    log(aAST.getLineNo(), before, \"ws.preceeded\", \")\");\n+//                }  \n+            }\n+            else if ((PadOption.NOSPACE \u003d\u003d getAbstractOption())\n                 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !Utils.whitespaceBefore(before, line))\n             {\n                 log(aAST.getLineNo(), before, \"ws.preceeded\", \")\");\n             }\n             else if ((PadOption.SPACE \u003d\u003d getAbstractOption())\n                 \u0026\u0026 !Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 (line.charAt(before) !\u003d \u0027(\u0027))\n             {\n                 log(aAST.getLineNo(), aAST.getColumnNo(),\n                     \"ws.notPreceeded\", \")\");\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "267bdf541787643fbe6126605cbfb91dbcde1e91": {
      "type": "Ybodychange",
      "commitMessage": "Refactor to improve the AbstractOptionCheck code.\n",
      "commitDate": 1036543226000,
      "commitName": "267bdf541787643fbe6126605cbfb91dbcde1e91",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1036361604000,
      "commitNameOld": "065c1d3bc59e10d0235d8732652d2f2787fbbcd7",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 2.1,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n     private void processRight(DetailAST aAST)\n     {\n         final String line \u003d getLines()[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         if (before \u003e\u003d 0) {\n-            if ((PadOption.NOSPACE \u003d\u003d mOption)\n+            if ((PadOption.NOSPACE \u003d\u003d getAbstractOption())\n                 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !Utils.whitespaceBefore(before, line))\n             {\n                 log(aAST.getLineNo(), before, \"ws.preceeded\", \")\");\n             }\n-            else if ((PadOption.SPACE \u003d\u003d mOption)\n+            else if ((PadOption.SPACE \u003d\u003d getAbstractOption())\n                 \u0026\u0026 !Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 (line.charAt(before) !\u003d \u0027(\u0027))\n             {\n                 log(aAST.getLineNo(), aAST.getColumnNo(),\n                     \"ws.notPreceeded\", \")\");\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "aede54ee77fb0887148db30be804b36758111698": {
      "type": "Yintroduced",
      "commitMessage": "Fully implemented the paren pad check\n",
      "commitDate": 1034517942000,
      "commitName": "aede54ee77fb0887148db30be804b36758111698",
      "commitAuthor": "Oliver Burn"
    }
  }
}