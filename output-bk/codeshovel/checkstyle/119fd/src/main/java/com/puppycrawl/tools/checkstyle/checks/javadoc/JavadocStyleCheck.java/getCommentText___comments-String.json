{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "JavadocStyleCheck.java",
  "functionName": "getCommentText",
  "functionId": "getCommentText___comments-String",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
  "functionStartLine": 265,
  "functionEndLine": 282,
  "changeHistory": [
    "46fa8090954480eecdeb6e7367f0e30655853f42",
    "068702d69533256fca702acb12740883a24e2591",
    "4c078ba710068498ca513ce115993e30dab4562a",
    "c0446a825514ea0279b8c22f633f2c4e3c73dc1f",
    "89a51ba032fd9126651fa9efad31baf10c006ddf",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
    "35d1673788bbbac8263fdb69275dc6a63b095a24",
    "f243d4d74885edb0a40920246011fa6549635afd",
    "b78f144ee4613e1d503624067b4a03d10b3515a8",
    "5fb27c0fe21ed36f057767862e96017d46a72686",
    "611722a893e0c6362b693f5c629a902a83590cbf",
    "51dae59b8dcfb5a34f2a8a5b3e788eb6599a1df3"
  ],
  "changeHistoryShort": {
    "46fa8090954480eecdeb6e7367f0e30655853f42": "Ybodychange",
    "068702d69533256fca702acb12740883a24e2591": "Ybodychange",
    "4c078ba710068498ca513ce115993e30dab4562a": "Ymodifierchange",
    "c0446a825514ea0279b8c22f633f2c4e3c73dc1f": "Yparameterchange",
    "89a51ba032fd9126651fa9efad31baf10c006ddf": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1": "Ybodychange",
    "35d1673788bbbac8263fdb69275dc6a63b095a24": "Ybodychange",
    "f243d4d74885edb0a40920246011fa6549635afd": "Ybodychange",
    "b78f144ee4613e1d503624067b4a03d10b3515a8": "Ybodychange",
    "5fb27c0fe21ed36f057767862e96017d46a72686": "Ybodychange",
    "611722a893e0c6362b693f5c629a902a83590cbf": "Ybodychange",
    "51dae59b8dcfb5a34f2a8a5b3e788eb6599a1df3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "46fa8090954480eecdeb6e7367f0e30655853f42": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4812: add report on StringBufferMustHaveInitialCapacity\n",
      "commitDate": 1501186710000,
      "commitName": "46fa8090954480eecdeb6e7367f0e30655853f42",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": 1500824788000,
      "commitNameOld": "2c71b5433175f9689c308c47207f03d029671d11",
      "commitAuthorOld": "vasilyeva",
      "daysBetweenCommits": 4.19,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n     private static String getCommentText(String... comments) {\n-        final StringBuilder builder \u003d new StringBuilder();\n+        final StringBuilder builder \u003d new StringBuilder(1024);\n         for (final String line : comments) {\n             final int textStart \u003d findTextStart(line);\n \n             if (textStart !\u003d -1) {\n                 if (line.charAt(textStart) \u003d\u003d \u0027@\u0027) {\n                     //we have found the tag section\n                     break;\n                 }\n                 builder.append(line.substring(textStart));\n                 trimTail(builder);\n                 builder.append(\u0027\\n\u0027);\n             }\n         }\n \n         return builder.toString().trim();\n     }\n\\ No newline at end of file\n"
    },
    "068702d69533256fca702acb12740883a24e2591": {
      "type": "Ybodychange",
      "commitMessage": "Replace StringBuffer with StringBuilder. #46\n\nFixes squid:S1149 violations.\n",
      "commitDate": 1438460813000,
      "commitName": "068702d69533256fca702acb12740883a24e2591",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1438103580000,
      "commitNameOld": "70d6e7afbcc8cd34dbcd233836156d12dbc4abaf",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 4.13,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n     private static String getCommentText(String... comments) {\n-        final StringBuffer buffer \u003d new StringBuffer();\n+        final StringBuilder builder \u003d new StringBuilder();\n         for (final String line : comments) {\n             final int textStart \u003d findTextStart(line);\n \n             if (textStart !\u003d -1) {\n                 if (line.charAt(textStart) \u003d\u003d \u0027@\u0027) {\n                     //we have found the tag section\n                     break;\n                 }\n-                buffer.append(line.substring(textStart));\n-                trimTail(buffer);\n-                buffer.append(\u0027\\n\u0027);\n+                builder.append(line.substring(textStart));\n+                trimTail(builder);\n+                builder.append(\u0027\\n\u0027);\n             }\n         }\n \n-        return buffer.toString().trim();\n+        return builder.toString().trim();\n     }\n\\ No newline at end of file\n"
    },
    "4c078ba710068498ca513ce115993e30dab4562a": {
      "type": "Ymodifierchange",
      "commitMessage": "Make \"private\" methods \"static\" where possible. #46\n\nSonarQube rule: [\"private\" methods that don\u0027t access instance data should be \"static\"](http://nemo.sonarqube.org/coding_rules#rule_key\u003dsquid%3AS2325).\n\nRationale: private methods that don\u0027t access instance data can be static to prevent any misunderstanding about the contract of the method.\n",
      "commitDate": 1437195084000,
      "commitName": "4c078ba710068498ca513ce115993e30dab4562a",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1431863229000,
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 61.71,
      "commitsBetweenForRepo": 387,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n-    private String getCommentText(String... comments) {\n+    private static String getCommentText(String... comments) {\n         final StringBuffer buffer \u003d new StringBuffer();\n         for (final String line : comments) {\n             final int textStart \u003d findTextStart(line);\n \n             if (textStart !\u003d -1) {\n                 if (line.charAt(textStart) \u003d\u003d \u0027@\u0027) {\n                     //we have found the tag section\n                     break;\n                 }\n                 buffer.append(line.substring(textStart));\n                 trimTail(buffer);\n                 buffer.append(\u0027\\n\u0027);\n             }\n         }\n \n         return buffer.toString().trim();\n     }\n\\ No newline at end of file\n"
    },
    "c0446a825514ea0279b8c22f633f2c4e3c73dc1f": {
      "type": "Yparameterchange",
      "commitMessage": "Fix PMD violations from UseVarargs rule, issue #999\n\nThe changes are fully backward-compatible. Method with vararg can be invoked both using array and list of parameters.\n",
      "commitDate": 1430353274000,
      "commitName": "c0446a825514ea0279b8c22f633f2c4e3c73dc1f",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1429818204000,
      "commitNameOld": "335d28b4947d4f7722ccbd45ecc1e84bc5a18571",
      "commitAuthorOld": "Mehmet Can CÃ¶mert",
      "daysBetweenCommits": 6.19,
      "commitsBetweenForRepo": 45,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n-    private String getCommentText(String[] comments)\n+    private String getCommentText(String... comments)\n     {\n         final StringBuffer buffer \u003d new StringBuffer();\n         for (final String line : comments) {\n             final int textStart \u003d findTextStart(line);\n \n             if (textStart !\u003d -1) {\n                 if (line.charAt(textStart) \u003d\u003d \u0027@\u0027) {\n                     //we have found the tag section\n                     break;\n                 }\n                 buffer.append(line.substring(textStart));\n                 trimTail(buffer);\n                 buffer.append(\u0027\\n\u0027);\n             }\n         }\n \n         return buffer.toString().trim();\n     }\n\\ No newline at end of file\n"
    },
    "89a51ba032fd9126651fa9efad31baf10c006ddf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, javadoc, #512\n",
      "commitDate": 1421677262000,
      "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1": {
      "type": "Ybodychange",
      "commitMessage": "Use the new syntactic sugar \"for loop\".\n\nEnd of the cosmetic changes.\n",
      "commitDate": 1197714527000,
      "commitName": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1197694270000,
      "commitNameOld": "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.23,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,19 @@\n     private String getCommentText(String[] aComments)\n     {\n         final StringBuffer buffer \u003d new StringBuffer();\n-        for (int i \u003d 0; i \u003c aComments.length; i++) {\n-            final String line \u003d aComments[i];\n+        for (final String line : aComments) {\n             final int textStart \u003d findTextStart(line);\n \n             if (textStart !\u003d -1) {\n                 if (line.charAt(textStart) \u003d\u003d \u0027@\u0027) {\n                     //we have found the tag section\n                     break;\n                 }\n                 buffer.append(line.substring(textStart));\n                 trimTail(buffer);\n                 buffer.append(\u0027\\n\u0027);\n             }\n         }\n \n         return buffer.toString().trim();\n     }\n\\ No newline at end of file\n"
    },
    "35d1673788bbbac8263fdb69275dc6a63b095a24": {
      "type": "Ybodychange",
      "commitMessage": "Making local variables final where possible.\n",
      "commitDate": 1152243856000,
      "commitName": "35d1673788bbbac8263fdb69275dc6a63b095a24",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1152242806000,
      "commitNameOld": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n     private String getCommentText(String[] aComments)\n     {\n         final StringBuffer buffer \u003d new StringBuffer();\n         for (int i \u003d 0; i \u003c aComments.length; i++) {\n-            String line \u003d aComments[i];\n+            final String line \u003d aComments[i];\n             final int textStart \u003d findTextStart(line);\n \n             if (textStart !\u003d -1) {\n                 if (line.charAt(textStart) \u003d\u003d \u0027@\u0027) {\n                     //we have found the tag section\n                     break;\n                 }\n                 buffer.append(line.substring(textStart));\n                 trimTail(buffer);\n                 buffer.append(\u0027\\n\u0027);\n             }\n         }\n \n         return buffer.toString().trim();\n     }\n\\ No newline at end of file\n"
    },
    "f243d4d74885edb0a40920246011fa6549635afd": {
      "type": "Ybodychange",
      "commitMessage": "remove unused variable.\n",
      "commitDate": 1131235133000,
      "commitName": "f243d4d74885edb0a40920246011fa6549635afd",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1130786628000,
      "commitNameOld": "1aee9d55cc5bd8cca011e17369f6e370efcc85bb",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 5.19,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,20 @@\n     private String getCommentText(String[] aComments)\n     {\n         final StringBuffer buffer \u003d new StringBuffer();\n-        boolean foundTag \u003d false;\n-\n         for (int i \u003d 0; i \u003c aComments.length; i++) {\n             String line \u003d aComments[i];\n             final int textStart \u003d findTextStart(line);\n \n             if (textStart !\u003d -1) {\n                 if (line.charAt(textStart) \u003d\u003d \u0027@\u0027) {\n                     //we have found the tag section\n                     break;\n                 }\n                 buffer.append(line.substring(textStart));\n                 trimTail(buffer);\n                 buffer.append(\u0027\\n\u0027);\n             }\n         }\n \n         return buffer.toString().trim();\n     }\n\\ No newline at end of file\n"
    },
    "b78f144ee4613e1d503624067b4a03d10b3515a8": {
      "type": "Ybodychange",
      "commitMessage": "Fixed bug in logic JavadocStyle check uses to get main-section of javadoc (bug 1291847).\n",
      "commitDate": 1130177324000,
      "commitName": "b78f144ee4613e1d503624067b4a03d10b3515a8",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1121777024000,
      "commitNameOld": "cbabd6b314a5523a5557e089858d3a3596426d56",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 97.23,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,22 @@\n     private String getCommentText(String[] aComments)\n     {\n         final StringBuffer buffer \u003d new StringBuffer();\n         boolean foundTag \u003d false;\n \n         for (int i \u003d 0; i \u003c aComments.length; i++) {\n             String line \u003d aComments[i];\n             final int textStart \u003d findTextStart(line);\n \n             if (textStart !\u003d -1) {\n-                // Look for Javadoc tag that\u0027s not an inline tag\n-                // it can appear within the comment text.\n-                // Inline tags are denoted by curly braces: {@tag}\n-                final int ndx \u003d line.indexOf(\u0027@\u0027);\n-                if ((ndx !\u003d -1)\n-                    \u0026\u0026 (ndx \u003d\u003d 0 || line.charAt(ndx - 1) !\u003d \u0027{\u0027))\n-                {\n-                    foundTag \u003d true;\n-                    line \u003d line.substring(0, ndx);\n+                if (line.charAt(textStart) \u003d\u003d \u0027@\u0027) {\n+                    //we have found the tag section\n+                    break;\n                 }\n-\n                 buffer.append(line.substring(textStart));\n                 trimTail(buffer);\n                 buffer.append(\u0027\\n\u0027);\n-\n-                if (foundTag) {\n-                    break;\n-                }\n             }\n         }\n \n         return buffer.toString().trim();\n     }\n\\ No newline at end of file\n"
    },
    "5fb27c0fe21ed36f057767862e96017d46a72686": {
      "type": "Ybodychange",
      "commitMessage": "Fix for 897749 (JavadocStyleCheck @value tag). Fixed javadoc inline tags handling.\n",
      "commitDate": 1077733869000,
      "commitName": "5fb27c0fe21ed36f057767862e96017d46a72686",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1074114639000,
      "commitNameOld": "5670252b46f4915b276e647fa000361915eb4ff4",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 41.89,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,33 @@\n     private String getCommentText(String[] aComments)\n     {\n         final StringBuffer buffer \u003d new StringBuffer();\n         boolean foundTag \u003d false;\n \n         for (int i \u003d 0; i \u003c aComments.length; i++) {\n             String line \u003d aComments[i];\n             final int textStart \u003d findTextStart(line);\n \n             if (textStart !\u003d -1) {\n-                // Look for Javadoc tag that\u0027s neither a @link nor a\n-                // @inheritDoc since they can appear\n-                // within the comment text.\n+                // Look for Javadoc tag that\u0027s not an inline tag\n+                // it can appear within the comment text.\n+                // Inline tags are denoted by curly braces: {@tag}\n                 final int ndx \u003d line.indexOf(\u0027@\u0027);\n                 if ((ndx !\u003d -1)\n-                    \u0026\u0026 !line.regionMatches(ndx + 1, \"link\", 0, \"link\".length())\n-                    \u0026\u0026 !line.regionMatches(\n-                        ndx + 1,\n-                        \"inheritDoc\",\n-                        0,\n-                        \"inheritDoc\".length()))\n+                    \u0026\u0026 (ndx \u003d\u003d 0 || line.charAt(ndx - 1) !\u003d \u0027{\u0027))\n                 {\n                     foundTag \u003d true;\n                     line \u003d line.substring(0, ndx);\n                 }\n \n                 buffer.append(line.substring(textStart));\n                 trimTail(buffer);\n                 buffer.append(\u0027\\n\u0027);\n \n                 if (foundTag) {\n                     break;\n                 }\n             }\n         }\n \n         return buffer.toString().trim();\n     }\n\\ No newline at end of file\n"
    },
    "611722a893e0c6362b693f5c629a902a83590cbf": {
      "type": "Ybodychange",
      "commitMessage": "Fixed bug 798405 JavadocStyleCheck doesn\u0027t accept {@inheritDoc} javadoc\n",
      "commitDate": 1062411040000,
      "commitName": "611722a893e0c6362b693f5c629a902a83590cbf",
      "commitAuthor": "Rick Giles",
      "commitDateOld": 1060447585000,
      "commitNameOld": "927ec62235d97ab741aae3954b9a771843df724c",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 22.73,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,38 @@\n     private String getCommentText(String[] aComments)\n     {\n         final StringBuffer buffer \u003d new StringBuffer();\n         boolean foundTag \u003d false;\n \n         for (int i \u003d 0; i \u003c aComments.length; i++) {\n             String line \u003d aComments[i];\n             final int textStart \u003d findTextStart(line);\n \n             if (textStart !\u003d -1) {\n-                // Look for Javadoc tag that\u0027s not a @link since can appear\n+                // Look for Javadoc tag that\u0027s neither a @link nor a\n+                // @inheritDoc since they can appear\n                 // within the comment text.\n                 final int ndx \u003d line.indexOf(\u0027@\u0027);\n                 if ((ndx !\u003d -1)\n-                    \u0026\u0026 !line.regionMatches(ndx + 1, \"link\", 0, \"link\".length()))\n+                    \u0026\u0026 !line.regionMatches(ndx + 1, \"link\", 0, \"link\".length())\n+                    \u0026\u0026 !line.regionMatches(\n+                        ndx + 1,\n+                        \"inheritDoc\",\n+                        0,\n+                        \"inheritDoc\".length()))\n                 {\n                     foundTag \u003d true;\n                     line \u003d line.substring(0, ndx);\n                 }\n \n                 buffer.append(line.substring(textStart));\n                 trimTail(buffer);\n                 buffer.append(\u0027\\n\u0027);\n \n                 if (foundTag) {\n                     break;\n                 }\n             }\n         }\n \n         return buffer.toString().trim();\n     }\n\\ No newline at end of file\n"
    },
    "51dae59b8dcfb5a34f2a8a5b3e788eb6599a1df3": {
      "type": "Yintroduced",
      "commitMessage": "New Javadoc style check from Chris Stillwell.\n",
      "commitDate": 1058185912000,
      "commitName": "51dae59b8dcfb5a34f2a8a5b3e788eb6599a1df3",
      "commitAuthor": "Oliver Burn"
    }
  }
}