{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "AbstractExpressionHandler.java",
  "functionName": "checkLinesIndent",
  "functionId": "checkLinesIndent___lines-LineSet__indentLevel-IndentLevel__firstLineMatches-boolean__firstLine-int",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java",
  "functionStartLine": 271,
  "functionEndLine": 313,
  "changeHistory": [
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
    "6ca2d5279ea5b03dfa91167a9001d55cca5db65d",
    "0a6026c9ab97dc2d5ecd9c8cc6a27197208f4e6a",
    "eb5896a4a1d66552f5100046413f15d62b485b62",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6",
    "cba6fc8b0a653a795107566f895d2b8f73e2c6c9",
    "e3a48d1527341456a798c3f0c1986de6898a8c60",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "e00c478dd61d9d883e41b500b780ab217582c2e7",
    "22705bd0d4d4867f646b8c3aca115d7b3cb9c022",
    "35d1673788bbbac8263fdb69275dc6a63b095a24",
    "c2d3932843e70e4bb5df7161800aca248f9af778",
    "0855fff95e4aac170ac5ab74cd1872f20555a214",
    "7f7db38a097a95c264307123924779380fb40077",
    "e464c231eccec72f964131d9aeb5e49982c4b3bb",
    "4409b0f2432b479bd43ca274f91d1aabd6060575",
    "7d38133e430f6c695c40d88c63af4c44f10878f9",
    "661a9b0ddb10922458082573d79e0791ba6f38c2",
    "092e1f69476fc715852035a25b23a11804183a23",
    "eaad55fdba73e17e103dc6600867f26fd6a3896b",
    "9aab61241e7970ccfb4a9ee66c8eb7f062d31955"
  ],
  "changeHistoryShort": {
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": "Ybodychange",
    "6ca2d5279ea5b03dfa91167a9001d55cca5db65d": "Ybodychange",
    "0a6026c9ab97dc2d5ecd9c8cc6a27197208f4e6a": "Ybodychange",
    "eb5896a4a1d66552f5100046413f15d62b485b62": "Yfilerename",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6": "Ymultichange(Yparameterchange,Ybodychange)",
    "cba6fc8b0a653a795107566f895d2b8f73e2c6c9": "Ybodychange",
    "e3a48d1527341456a798c3f0c1986de6898a8c60": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "e00c478dd61d9d883e41b500b780ab217582c2e7": "Ybodychange",
    "22705bd0d4d4867f646b8c3aca115d7b3cb9c022": "Ybodychange",
    "35d1673788bbbac8263fdb69275dc6a63b095a24": "Ybodychange",
    "c2d3932843e70e4bb5df7161800aca248f9af778": "Ybodychange",
    "0855fff95e4aac170ac5ab74cd1872f20555a214": "Ybodychange",
    "7f7db38a097a95c264307123924779380fb40077": "Ybodychange",
    "e464c231eccec72f964131d9aeb5e49982c4b3bb": "Ybodychange",
    "4409b0f2432b479bd43ca274f91d1aabd6060575": "Ymultichange(Yparameterchange,Ybodychange)",
    "7d38133e430f6c695c40d88c63af4c44f10878f9": "Ymultichange(Ymodifierchange,Ybodychange)",
    "661a9b0ddb10922458082573d79e0791ba6f38c2": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "092e1f69476fc715852035a25b23a11804183a23": "Ybodychange",
    "eaad55fdba73e17e103dc6600867f26fd6a3896b": "Ymultichange(Ymovefromfile,Ybodychange)",
    "9aab61241e7970ccfb4a9ee66c8eb7f062d31955": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3143: forbid empty return statements and fixed violations",
      "commitDate": 1464356569000,
      "commitName": "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
      "commitAuthor": "rnveach",
      "commitDateOld": 1462628234000,
      "commitNameOld": "9e9a0b424551418e80c5a7e7badadfe80958ec82",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 20.0,
      "commitsBetweenForRepo": 45,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,43 @@\n     private void checkLinesIndent(LineSet lines,\n                                   IndentLevel indentLevel,\n                                   boolean firstLineMatches,\n                                   int firstLine) {\n-        if (lines.isEmpty()) {\n-            return;\n-        }\n+        if (!lines.isEmpty()) {\n+            // check first line\n+            final int startLine \u003d lines.firstLine();\n+            final int endLine \u003d lines.lastLine();\n+            final int startCol \u003d lines.firstLineCol();\n \n-        // check first line\n-        final int startLine \u003d lines.firstLine();\n-        final int endLine \u003d lines.lastLine();\n-        final int startCol \u003d lines.firstLineCol();\n+            final int realStartCol \u003d\n+                getLineStart(indentCheck.getLine(startLine - 1));\n \n-        final int realStartCol \u003d\n-            getLineStart(indentCheck.getLine(startLine - 1));\n+            if (realStartCol \u003d\u003d startCol) {\n+                checkLineIndent(startLine, startCol, indentLevel,\n+                    firstLineMatches);\n+            }\n \n-        if (realStartCol \u003d\u003d startCol) {\n-            checkLineIndent(startLine, startCol, indentLevel,\n-                firstLineMatches);\n-        }\n+            // if first line starts the line, following lines are indented\n+            // one level; but if the first line of this expression is\n+            // nested with the previous expression (which is assumed if it\n+            // doesn\u0027t start the line) then don\u0027t indent more, the first\n+            // indentation is absorbed by the nesting\n \n-        // if first line starts the line, following lines are indented\n-        // one level; but if the first line of this expression is\n-        // nested with the previous expression (which is assumed if it\n-        // doesn\u0027t start the line) then don\u0027t indent more, the first\n-        // indentation is absorbed by the nesting\n+            IndentLevel theLevel \u003d indentLevel;\n+            if (firstLineMatches\n+                || firstLine \u003e mainAst.getLineNo() \u0026\u0026 shouldIncreaseIndent()) {\n+                theLevel \u003d new IndentLevel(indentLevel, getBasicOffset());\n+            }\n \n-        IndentLevel theLevel \u003d indentLevel;\n-        if (firstLineMatches\n-            || firstLine \u003e mainAst.getLineNo() \u0026\u0026 shouldIncreaseIndent()) {\n-            theLevel \u003d new IndentLevel(indentLevel, getBasicOffset());\n-        }\n+            // check following lines\n+            for (int i \u003d startLine + 1; i \u003c\u003d endLine; i++) {\n+                final Integer col \u003d lines.getStartColumn(i);\n+                // startCol could be null if this line didn\u0027t have an\n+                // expression that was required to be checked (it could be\n+                // checked by a child expression)\n \n-        // check following lines\n-        for (int i \u003d startLine + 1; i \u003c\u003d endLine; i++) {\n-            final Integer col \u003d lines.getStartColumn(i);\n-            // startCol could be null if this line didn\u0027t have an\n-            // expression that was required to be checked (it could be\n-            // checked by a child expression)\n-\n-            if (col !\u003d null) {\n-                checkLineIndent(i, col, theLevel, false);\n+                if (col !\u003d null) {\n+                    checkLineIndent(i, col, theLevel, false);\n+                }\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "6ca2d5279ea5b03dfa91167a9001d55cca5db65d": {
      "type": "Ybodychange",
      "commitMessage": "minor: renaming indentation methods to more natural name",
      "commitDate": 1449581693000,
      "commitName": "6ca2d5279ea5b03dfa91167a9001d55cca5db65d",
      "commitAuthor": "rnveach",
      "commitDateOld": 1449255189000,
      "commitNameOld": "ab74399c2d18b8881c4a0c13155b7afce869eebf",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 3.78,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n     private void checkLinesIndent(LineSet lines,\n                                   IndentLevel indentLevel,\n                                   boolean firstLineMatches,\n                                   int firstLine) {\n         if (lines.isEmpty()) {\n             return;\n         }\n \n         // check first line\n         final int startLine \u003d lines.firstLine();\n         final int endLine \u003d lines.lastLine();\n         final int startCol \u003d lines.firstLineCol();\n \n         final int realStartCol \u003d\n             getLineStart(indentCheck.getLine(startLine - 1));\n \n         if (realStartCol \u003d\u003d startCol) {\n-            checkSingleLine(startLine, startCol, indentLevel,\n+            checkLineIndent(startLine, startCol, indentLevel,\n                 firstLineMatches);\n         }\n \n         // if first line starts the line, following lines are indented\n         // one level; but if the first line of this expression is\n         // nested with the previous expression (which is assumed if it\n         // doesn\u0027t start the line) then don\u0027t indent more, the first\n         // indentation is absorbed by the nesting\n \n         IndentLevel theLevel \u003d indentLevel;\n         if (firstLineMatches\n             || firstLine \u003e mainAst.getLineNo() \u0026\u0026 shouldIncreaseIndent()) {\n             theLevel \u003d new IndentLevel(indentLevel, getBasicOffset());\n         }\n \n         // check following lines\n         for (int i \u003d startLine + 1; i \u003c\u003d endLine; i++) {\n             final Integer col \u003d lines.getStartColumn(i);\n             // startCol could be null if this line didn\u0027t have an\n             // expression that was required to be checked (it could be\n             // checked by a child expression)\n \n             if (col !\u003d null) {\n-                checkSingleLine(i, col, theLevel, false);\n+                checkLineIndent(i, col, theLevel, false);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "0a6026c9ab97dc2d5ecd9c8cc6a27197208f4e6a": {
      "type": "Ybodychange",
      "commitMessage": "Remove unnecessary unboxing. #1538\n",
      "commitDate": 1438566538000,
      "commitName": "0a6026c9ab97dc2d5ecd9c8cc6a27197208f4e6a",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1437631122000,
      "commitNameOld": "acbd47a66b01acc392a7bd37ad3a2e65eecd308a",
      "commitAuthorOld": "Aleksandr Ivanov",
      "daysBetweenCommits": 10.83,
      "commitsBetweenForRepo": 128,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n     private void checkLinesIndent(LineSet lines,\n                                   IndentLevel indentLevel,\n                                   boolean firstLineMatches,\n                                   int firstLine) {\n         if (lines.isEmpty()) {\n             return;\n         }\n \n         // check first line\n         final int startLine \u003d lines.firstLine();\n         final int endLine \u003d lines.lastLine();\n         final int startCol \u003d lines.firstLineCol();\n \n         final int realStartCol \u003d\n             getLineStart(indentCheck.getLine(startLine - 1));\n \n         if (realStartCol \u003d\u003d startCol) {\n             checkSingleLine(startLine, startCol, indentLevel,\n                 firstLineMatches);\n         }\n \n         // if first line starts the line, following lines are indented\n         // one level; but if the first line of this expression is\n         // nested with the previous expression (which is assumed if it\n         // doesn\u0027t start the line) then don\u0027t indent more, the first\n         // indentation is absorbed by the nesting\n \n         IndentLevel theLevel \u003d indentLevel;\n         if (firstLineMatches\n             || firstLine \u003e mainAst.getLineNo() \u0026\u0026 shouldIncreaseIndent()) {\n             theLevel \u003d new IndentLevel(indentLevel, getBasicOffset());\n         }\n \n         // check following lines\n         for (int i \u003d startLine + 1; i \u003c\u003d endLine; i++) {\n             final Integer col \u003d lines.getStartColumn(i);\n             // startCol could be null if this line didn\u0027t have an\n             // expression that was required to be checked (it could be\n             // checked by a child expression)\n \n             if (col !\u003d null) {\n-                checkSingleLine(i, col.intValue(), theLevel, false);\n+                checkSingleLine(i, col, theLevel, false);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "eb5896a4a1d66552f5100046413f15d62b485b62": {
      "type": "Yfilerename",
      "commitMessage": "Fix PMD violations for AbstractNaming rule #983\n",
      "commitDate": 1434649920000,
      "commitName": "eb5896a4a1d66552f5100046413f15d62b485b62",
      "commitAuthor": "Bhavik Patel",
      "commitDateOld": 1434608420000,
      "commitNameOld": "0382b7907b54e95408344863915a847dabc37f12",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 0.48,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": 1426023398000,
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1424437366000,
      "commitNameOld": "a15fcb34fb0670b0603216dfca3c3c9e12d09727",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 18.36,
      "commitsBetweenForRepo": 95,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n     private void checkLinesIndent(LineSet lines,\n                                   IndentLevel indentLevel,\n                                   boolean firstLineMatches,\n                                   int firstLine)\n     {\n         if (lines.isEmpty()) {\n             return;\n         }\n \n         // check first line\n         final int startLine \u003d lines.firstLine();\n         final int endLine \u003d lines.lastLine();\n         final int startCol \u003d lines.firstLineCol();\n \n         final int realStartCol \u003d\n             getLineStart(indentCheck.getLine(startLine - 1));\n \n         if (realStartCol \u003d\u003d startCol) {\n             checkSingleLine(startLine, startCol, indentLevel,\n                 firstLineMatches);\n         }\n \n         // if first line starts the line, following lines are indented\n         // one level; but if the first line of this expression is\n         // nested with the previous expression (which is assumed if it\n         // doesn\u0027t start the line) then don\u0027t indent more, the first\n         // indentation is absorbed by the nesting\n \n         IndentLevel theLevel \u003d indentLevel;\n         if (firstLineMatches\n-            || ((firstLine \u003e mainAst.getLineNo()) \u0026\u0026 shouldIncreaseIndent()))\n+            || firstLine \u003e mainAst.getLineNo() \u0026\u0026 shouldIncreaseIndent())\n         {\n             theLevel \u003d new IndentLevel(indentLevel, getBasicOffset());\n         }\n \n         // check following lines\n         for (int i \u003d startLine + 1; i \u003c\u003d endLine; i++) {\n             final Integer col \u003d lines.getStartColumn(i);\n             // startCol could be null if this line didn\u0027t have an\n             // expression that was required to be checked (it could be\n             // checked by a child expression)\n \n             if (col !\u003d null) {\n                 checkSingleLine(i, col.intValue(), theLevel, false);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, indentation, #512\n",
      "commitDate": 1421678099000,
      "commitName": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "cba6fc8b0a653a795107566f895d2b8f73e2c6c9": {
      "type": "Ybodychange",
      "commitMessage": "FileContents.getLines performance fix\n",
      "commitDate": 1414957696000,
      "commitName": "cba6fc8b0a653a795107566f895d2b8f73e2c6c9",
      "commitAuthor": "sopov.ivan",
      "commitDateOld": 1413242511000,
      "commitNameOld": "e3a48d1527341456a798c3f0c1986de6898a8c60",
      "commitAuthorOld": "maxvetrenko",
      "daysBetweenCommits": 19.85,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n     private void checkLinesIndent(LineSet aLines,\n                                   IndentLevel aIndentLevel,\n                                   boolean aFirstLineMatches,\n                                   int aFirstLine)\n     {\n         if (aLines.isEmpty()) {\n             return;\n         }\n \n         // check first line\n         final int startLine \u003d aLines.firstLine();\n         final int endLine \u003d aLines.lastLine();\n         final int startCol \u003d aLines.firstLineCol();\n \n         final int realStartCol \u003d\n-            getLineStart(mIndentCheck.getLines()[startLine - 1]);\n+            getLineStart(mIndentCheck.getLine(startLine - 1));\n \n         if (realStartCol \u003d\u003d startCol) {\n             checkSingleLine(startLine, startCol, aIndentLevel,\n                 aFirstLineMatches);\n         }\n \n         // if first line starts the line, following lines are indented\n         // one level; but if the first line of this expression is\n         // nested with the previous expression (which is assumed if it\n         // doesn\u0027t start the line) then don\u0027t indent more, the first\n         // indentation is absorbed by the nesting\n \n         IndentLevel theLevel \u003d aIndentLevel;\n         if (aFirstLineMatches\n             || ((aFirstLine \u003e mMainAst.getLineNo()) \u0026\u0026 shouldIncreaseIndent()))\n         {\n             theLevel \u003d new IndentLevel(aIndentLevel, getBasicOffset());\n         }\n \n         // check following lines\n         for (int i \u003d startLine + 1; i \u003c\u003d endLine; i++) {\n             final Integer col \u003d aLines.getStartColumn(i);\n             // startCol could be null if this line didn\u0027t have an\n             // expression that was required to be checked (it could be\n             // checked by a child expression)\n \n             if (col !\u003d null) {\n                 checkSingleLine(i, col.intValue(), theLevel, false);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "e3a48d1527341456a798c3f0c1986de6898a8c60": {
      "type": "Ybodychange",
      "commitMessage": "Update for IndentationCheck. #294\n",
      "commitDate": 1413242511000,
      "commitName": "e3a48d1527341456a798c3f0c1986de6898a8c60",
      "commitAuthor": "maxvetrenko",
      "commitDateOld": 1393953491000,
      "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthorOld": "Ivan Sopov",
      "daysBetweenCommits": 223.25,
      "commitsBetweenForRepo": 167,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,47 @@\n     private void checkLinesIndent(LineSet aLines,\n                                   IndentLevel aIndentLevel,\n                                   boolean aFirstLineMatches,\n                                   int aFirstLine)\n     {\n         if (aLines.isEmpty()) {\n             return;\n         }\n \n         // check first line\n         final int startLine \u003d aLines.firstLine();\n         final int endLine \u003d aLines.lastLine();\n         final int startCol \u003d aLines.firstLineCol();\n \n         final int realStartCol \u003d\n             getLineStart(mIndentCheck.getLines()[startLine - 1]);\n \n         if (realStartCol \u003d\u003d startCol) {\n             checkSingleLine(startLine, startCol, aIndentLevel,\n                 aFirstLineMatches);\n         }\n \n         // if first line starts the line, following lines are indented\n         // one level; but if the first line of this expression is\n         // nested with the previous expression (which is assumed if it\n         // doesn\u0027t start the line) then don\u0027t indent more, the first\n         // indentation is absorbed by the nesting\n \n-        // TODO: shouldIncreaseIndent() is a hack, should be removed\n-        //       after complete rewriting of checkExpressionSubtree()\n-\n         IndentLevel theLevel \u003d aIndentLevel;\n         if (aFirstLineMatches\n             || ((aFirstLine \u003e mMainAst.getLineNo()) \u0026\u0026 shouldIncreaseIndent()))\n         {\n             theLevel \u003d new IndentLevel(aIndentLevel, getBasicOffset());\n         }\n \n         // check following lines\n         for (int i \u003d startLine + 1; i \u003c\u003d endLine; i++) {\n             final Integer col \u003d aLines.getStartColumn(i);\n             // startCol could be null if this line didn\u0027t have an\n             // expression that was required to be checked (it could be\n             // checked by a child expression)\n \n             if (col !\u003d null) {\n                 checkSingleLine(i, col.intValue(), theLevel, false);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "e00c478dd61d9d883e41b500b780ab217582c2e7": {
      "type": "Ybodychange",
      "commitMessage": "clean up the code that was assigning to a parameter.\n",
      "commitDate": 1287650559000,
      "commitName": "e00c478dd61d9d883e41b500b780ab217582c2e7",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1285817783000,
      "commitNameOld": "6f46bd4e83204417edf9605f97098bb9d34da728",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 21.21,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,50 @@\n     private void checkLinesIndent(LineSet aLines,\n                                   IndentLevel aIndentLevel,\n                                   boolean aFirstLineMatches,\n                                   int aFirstLine)\n     {\n         if (aLines.isEmpty()) {\n             return;\n         }\n \n         // check first line\n         final int startLine \u003d aLines.firstLine();\n         final int endLine \u003d aLines.lastLine();\n         final int startCol \u003d aLines.firstLineCol();\n \n         final int realStartCol \u003d\n             getLineStart(mIndentCheck.getLines()[startLine - 1]);\n \n         if (realStartCol \u003d\u003d startCol) {\n             checkSingleLine(startLine, startCol, aIndentLevel,\n                 aFirstLineMatches);\n         }\n \n         // if first line starts the line, following lines are indented\n         // one level; but if the first line of this expression is\n         // nested with the previous expression (which is assumed if it\n         // doesn\u0027t start the line) then don\u0027t indent more, the first\n         // indentation is absorbed by the nesting\n \n         // TODO: shouldIncreaseIndent() is a hack, should be removed\n         //       after complete rewriting of checkExpressionSubtree()\n \n+        IndentLevel theLevel \u003d aIndentLevel;\n         if (aFirstLineMatches\n             || ((aFirstLine \u003e mMainAst.getLineNo()) \u0026\u0026 shouldIncreaseIndent()))\n         {\n-            aIndentLevel \u003d new IndentLevel(aIndentLevel, getBasicOffset());\n+            theLevel \u003d new IndentLevel(aIndentLevel, getBasicOffset());\n         }\n \n         // check following lines\n         for (int i \u003d startLine + 1; i \u003c\u003d endLine; i++) {\n             final Integer col \u003d aLines.getStartColumn(i);\n             // startCol could be null if this line didn\u0027t have an\n             // expression that was required to be checked (it could be\n             // checked by a child expression)\n \n             if (col !\u003d null) {\n-                checkSingleLine(i, col.intValue(), aIndentLevel, false);\n+                checkSingleLine(i, col.intValue(), theLevel, false);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "22705bd0d4d4867f646b8c3aca115d7b3cb9c022": {
      "type": "Ybodychange",
      "commitMessage": "Removal of explicit boxing.\n",
      "commitDate": 1198150614000,
      "commitName": "22705bd0d4d4867f646b8c3aca115d7b3cb9c022",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1198148921000,
      "commitNameOld": "ef58eba6d1b95443ff240ed05634c7e373b3445a",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n     private void checkLinesIndent(LineSet aLines,\n                                   IndentLevel aIndentLevel,\n                                   boolean aFirstLineMatches,\n                                   int aFirstLine)\n     {\n         if (aLines.isEmpty()) {\n             return;\n         }\n \n         // check first line\n         final int startLine \u003d aLines.firstLine();\n         final int endLine \u003d aLines.lastLine();\n         final int startCol \u003d aLines.firstLineCol();\n \n         final int realStartCol \u003d\n             getLineStart(mIndentCheck.getLines()[startLine - 1]);\n \n         if (realStartCol \u003d\u003d startCol) {\n             checkSingleLine(startLine, startCol, aIndentLevel,\n                 aFirstLineMatches);\n         }\n \n         // if first line starts the line, following lines are indented\n         // one level; but if the first line of this expression is\n         // nested with the previous expression (which is assumed if it\n         // doesn\u0027t start the line) then don\u0027t indent more, the first\n         // indentation is absorbed by the nesting\n \n         // TODO: shouldIncreaseIndent() is a hack, should be removed\n         //       after complete rewriting of checkExpressionSubtree()\n \n         if (aFirstLineMatches\n             || ((aFirstLine \u003e mMainAst.getLineNo()) \u0026\u0026 shouldIncreaseIndent()))\n         {\n             aIndentLevel \u003d new IndentLevel(aIndentLevel, getBasicOffset());\n         }\n \n         // check following lines\n         for (int i \u003d startLine + 1; i \u003c\u003d endLine; i++) {\n-            final Integer col \u003d aLines.getStartColumn(new Integer(i));\n+            final Integer col \u003d aLines.getStartColumn(i);\n             // startCol could be null if this line didn\u0027t have an\n             // expression that was required to be checked (it could be\n             // checked by a child expression)\n \n             if (col !\u003d null) {\n                 checkSingleLine(i, col.intValue(), aIndentLevel, false);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "35d1673788bbbac8263fdb69275dc6a63b095a24": {
      "type": "Ybodychange",
      "commitMessage": "Making local variables final where possible.\n",
      "commitDate": 1152243856000,
      "commitName": "35d1673788bbbac8263fdb69275dc6a63b095a24",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1152242806000,
      "commitNameOld": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,49 @@\n     private void checkLinesIndent(LineSet aLines,\n                                   IndentLevel aIndentLevel,\n                                   boolean aFirstLineMatches,\n                                   int aFirstLine)\n     {\n         if (aLines.isEmpty()) {\n             return;\n         }\n \n         // check first line\n-        int startLine \u003d aLines.firstLine();\n-        int endLine \u003d aLines.lastLine();\n-        int startCol \u003d aLines.firstLineCol();\n+        final int startLine \u003d aLines.firstLine();\n+        final int endLine \u003d aLines.lastLine();\n+        final int startCol \u003d aLines.firstLineCol();\n \n-        int realStartCol \u003d getLineStart(mIndentCheck.getLines()[startLine - 1]);\n+        final int realStartCol \u003d\n+            getLineStart(mIndentCheck.getLines()[startLine - 1]);\n \n         if (realStartCol \u003d\u003d startCol) {\n             checkSingleLine(startLine, startCol, aIndentLevel,\n                 aFirstLineMatches);\n         }\n \n         // if first line starts the line, following lines are indented\n         // one level; but if the first line of this expression is\n         // nested with the previous expression (which is assumed if it\n         // doesn\u0027t start the line) then don\u0027t indent more, the first\n         // indentation is absorbed by the nesting\n \n         // TODO: shouldIncreaseIndent() is a hack, should be removed\n         //       after complete rewriting of checkExpressionSubtree()\n \n         if (aFirstLineMatches\n             || ((aFirstLine \u003e mMainAst.getLineNo()) \u0026\u0026 shouldIncreaseIndent()))\n         {\n             aIndentLevel \u003d new IndentLevel(aIndentLevel, getBasicOffset());\n         }\n \n         // check following lines\n         for (int i \u003d startLine + 1; i \u003c\u003d endLine; i++) {\n-            Integer col \u003d aLines.getStartColumn(new Integer(i));\n+            final Integer col \u003d aLines.getStartColumn(new Integer(i));\n             // startCol could be null if this line didn\u0027t have an\n             // expression that was required to be checked (it could be\n             // checked by a child expression)\n \n             if (col !\u003d null) {\n                 checkSingleLine(i, col.intValue(), aIndentLevel, false);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "c2d3932843e70e4bb5df7161800aca248f9af778": {
      "type": "Ybodychange",
      "commitMessage": "Clean up the use of ()\u0027s\n",
      "commitDate": 1152242806000,
      "commitName": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1122110316000,
      "commitNameOld": "bcbd31a5ecc3aa9b5f0677acb17c441142e57c6f",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 348.76,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n     private void checkLinesIndent(LineSet aLines,\n                                   IndentLevel aIndentLevel,\n                                   boolean aFirstLineMatches,\n                                   int aFirstLine)\n     {\n         if (aLines.isEmpty()) {\n             return;\n         }\n \n         // check first line\n         int startLine \u003d aLines.firstLine();\n         int endLine \u003d aLines.lastLine();\n         int startCol \u003d aLines.firstLineCol();\n \n         int realStartCol \u003d getLineStart(mIndentCheck.getLines()[startLine - 1]);\n \n         if (realStartCol \u003d\u003d startCol) {\n             checkSingleLine(startLine, startCol, aIndentLevel,\n                 aFirstLineMatches);\n         }\n \n         // if first line starts the line, following lines are indented\n         // one level; but if the first line of this expression is\n         // nested with the previous expression (which is assumed if it\n         // doesn\u0027t start the line) then don\u0027t indent more, the first\n         // indentation is absorbed by the nesting\n \n         // TODO: shouldIncreaseIndent() is a hack, should be removed\n         //       after complete rewriting of checkExpressionSubtree()\n \n         if (aFirstLineMatches\n-            || (aFirstLine \u003e mMainAst.getLineNo() \u0026\u0026 shouldIncreaseIndent()))\n+            || ((aFirstLine \u003e mMainAst.getLineNo()) \u0026\u0026 shouldIncreaseIndent()))\n         {\n             aIndentLevel \u003d new IndentLevel(aIndentLevel, getBasicOffset());\n         }\n \n         // check following lines\n         for (int i \u003d startLine + 1; i \u003c\u003d endLine; i++) {\n             Integer col \u003d aLines.getStartColumn(new Integer(i));\n             // startCol could be null if this line didn\u0027t have an\n             // expression that was required to be checked (it could be\n             // checked by a child expression)\n \n             if (col !\u003d null) {\n                 checkSingleLine(i, col.intValue(), aIndentLevel, false);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "0855fff95e4aac170ac5ab74cd1872f20555a214": {
      "type": "Ybodychange",
      "commitMessage": "Fix for NoSuchMethodError when line wrapped at dot operator (bug 790209)\n",
      "commitDate": 1061268871000,
      "commitName": "0855fff95e4aac170ac5ab74cd1872f20555a214",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1060715940000,
      "commitNameOld": "7f7db38a097a95c264307123924779380fb40077",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 6.4,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,48 @@\n     private void checkLinesIndent(LineSet aLines,\n                                   IndentLevel aIndentLevel,\n                                   boolean aFirstLineMatches,\n                                   int aFirstLine)\n     {\n         if (aLines.isEmpty()) {\n             return;\n         }\n \n         // check first line\n         int startLine \u003d aLines.firstLine();\n         int endLine \u003d aLines.lastLine();\n         int startCol \u003d aLines.firstLineCol();\n \n         int realStartCol \u003d getLineStart(mIndentCheck.getLines()[startLine - 1]);\n \n         if (realStartCol \u003d\u003d startCol) {\n             checkSingleLine(startLine, startCol, aIndentLevel,\n                 aFirstLineMatches);\n         }\n \n         // if first line starts the line, following lines are indented\n         // one level; but if the first line of this expression is\n         // nested with the previous expression (which is assumed if it\n         // doesn\u0027t start the line) then don\u0027t indent more, the first\n         // indentation is absorbed by the nesting\n \n         // TODO: shouldIncreaseIndent() is a hack, should be removed\n         //       after complete rewriting of checkExpressionSubtree()\n \n         if (aFirstLineMatches\n             || (aFirstLine \u003e mMainAst.getLineNo() \u0026\u0026 shouldIncreaseIndent()))\n         {\n             aIndentLevel \u003d new IndentLevel(aIndentLevel, getBasicOffset());\n         }\n \n         // check following lines\n         for (int i \u003d startLine + 1; i \u003c\u003d endLine; i++) {\n             Integer col \u003d aLines.getStartColumn(new Integer(i));\n             // startCol could be null if this line didn\u0027t have an\n             // expression that was required to be checked (it could be\n             // checked by a child expression)\n \n-            // TODO: not sure if this does anything, look at taking it out\n-\n-            // TODO: we can check here if this line starts or the previous\n-            // line ends in a dot.  If so, we should increase the indent.\n-\n-            // TODO: check if -2 is possible here?  but unlikely to be a\n-            // problem...\n-            String thisLine \u003d mIndentCheck.getLines()[i - 1];\n-            String prevLine \u003d mIndentCheck.getLines()[i - 2];\n-            if (thisLine.matches(\"^\\\\s*\\\\.\")\n-                || prevLine.matches(\"\\\\.\\\\s*$\"))\n-            {\n-                aIndentLevel \u003d new IndentLevel(aIndentLevel, getBasicOffset());\n-            }\n-\n             if (col !\u003d null) {\n                 checkSingleLine(i, col.intValue(), aIndentLevel, false);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "7f7db38a097a95c264307123924779380fb40077": {
      "type": "Ybodychange",
      "commitMessage": "IndentationCheck: Some refactoring and fixes for some TODOs and bugs.\n",
      "commitDate": 1060715940000,
      "commitName": "7f7db38a097a95c264307123924779380fb40077",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1055612861000,
      "commitNameOld": "e464c231eccec72f964131d9aeb5e49982c4b3bb",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 59.06,
      "commitsBetweenForRepo": 135,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,63 @@\n     private void checkLinesIndent(LineSet aLines,\n                                   IndentLevel aIndentLevel,\n                                   boolean aFirstLineMatches,\n                                   int aFirstLine)\n     {\n         if (aLines.isEmpty()) {\n             return;\n         }\n \n         // check first line\n         int startLine \u003d aLines.firstLine();\n         int endLine \u003d aLines.lastLine();\n         int startCol \u003d aLines.firstLineCol();\n \n         int realStartCol \u003d getLineStart(mIndentCheck.getLines()[startLine - 1]);\n \n         if (realStartCol \u003d\u003d startCol) {\n             checkSingleLine(startLine, startCol, aIndentLevel,\n                 aFirstLineMatches);\n         }\n \n         // if first line starts the line, following lines are indented\n         // one level; but if the first line of this expression is\n         // nested with the previous expression (which is assumed if it\n         // doesn\u0027t start the line) then don\u0027t indent more, the first\n         // indentation is absorbed by the nesting\n \n         // TODO: shouldIncreaseIndent() is a hack, should be removed\n         //       after complete rewriting of checkExpressionSubtree()\n \n         if (aFirstLineMatches\n             || (aFirstLine \u003e mMainAst.getLineNo() \u0026\u0026 shouldIncreaseIndent()))\n         {\n-            aIndentLevel \u003d new IndentLevel(aIndentLevel,\n-                                           mIndentCheck.getBasicOffset());\n+            aIndentLevel \u003d new IndentLevel(aIndentLevel, getBasicOffset());\n         }\n \n         // check following lines\n         for (int i \u003d startLine + 1; i \u003c\u003d endLine; i++) {\n             Integer col \u003d aLines.getStartColumn(new Integer(i));\n             // startCol could be null if this line didn\u0027t have an\n             // expression that was required to be checked (it could be\n             // checked by a child expression)\n \n             // TODO: not sure if this does anything, look at taking it out\n \n             // TODO: we can check here if this line starts or the previous\n             // line ends in a dot.  If so, we should increase the indent.\n \n             // TODO: check if -2 is possible here?  but unlikely to be a\n             // problem...\n             String thisLine \u003d mIndentCheck.getLines()[i - 1];\n             String prevLine \u003d mIndentCheck.getLines()[i - 2];\n             if (thisLine.matches(\"^\\\\s*\\\\.\")\n                 || prevLine.matches(\"\\\\.\\\\s*$\"))\n             {\n-                aIndentLevel \u003d new IndentLevel(aIndentLevel,\n-                                               mIndentCheck.getBasicOffset());\n+                aIndentLevel \u003d new IndentLevel(aIndentLevel, getBasicOffset());\n             }\n \n             if (col !\u003d null) {\n                 checkSingleLine(i, col.intValue(), aIndentLevel, false);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "e464c231eccec72f964131d9aeb5e49982c4b3bb": {
      "type": "Ybodychange",
      "commitMessage": "Indentation:\nFixes for several TODO comments.\nAdded AssignHandler.\n",
      "commitDate": 1055612861000,
      "commitName": "e464c231eccec72f964131d9aeb5e49982c4b3bb",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1055144900000,
      "commitNameOld": "889587fdd22ba03ea670e404d36810e9af113c9d",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 5.42,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,65 @@\n     private void checkLinesIndent(LineSet aLines,\n                                   IndentLevel aIndentLevel,\n                                   boolean aFirstLineMatches,\n                                   int aFirstLine)\n     {\n         if (aLines.isEmpty()) {\n             return;\n         }\n \n         // check first line\n         int startLine \u003d aLines.firstLine();\n         int endLine \u003d aLines.lastLine();\n         int startCol \u003d aLines.firstLineCol();\n \n         int realStartCol \u003d getLineStart(mIndentCheck.getLines()[startLine - 1]);\n \n         if (realStartCol \u003d\u003d startCol) {\n             checkSingleLine(startLine, startCol, aIndentLevel,\n                 aFirstLineMatches);\n         }\n \n         // if first line starts the line, following lines are indented\n         // one level; but if the first line of this expression is\n         // nested with the previous expression (which is assumed if it\n         // doesn\u0027t start the line) then don\u0027t indent more, the first\n         // indentation is absorbed by the nesting\n \n-        // TODO: shouldIncreseIndent() is a hack, should be removed\n+        // TODO: shouldIncreaseIndent() is a hack, should be removed\n         //       after complete rewriting of checkExpressionSubtree()\n \n         if (aFirstLineMatches\n-            || (aFirstLine \u003e mMainAst.getLineNo() \u0026\u0026 shouldIncraeseIndent()))\n+            || (aFirstLine \u003e mMainAst.getLineNo() \u0026\u0026 shouldIncreaseIndent()))\n         {\n             aIndentLevel \u003d new IndentLevel(aIndentLevel,\n                                            mIndentCheck.getBasicOffset());\n         }\n \n         // check following lines\n         for (int i \u003d startLine + 1; i \u003c\u003d endLine; i++) {\n             Integer col \u003d aLines.getStartColumn(new Integer(i));\n             // startCol could be null if this line didn\u0027t have an\n             // expression that was required to be checked (it could be\n             // checked by a child expression)\n \n             // TODO: not sure if this does anything, look at taking it out\n \n             // TODO: we can check here if this line starts or the previous\n             // line ends in a dot.  If so, we should increase the indent.\n \n             // TODO: check if -2 is possible here?  but unlikely to be a\n             // problem...\n             String thisLine \u003d mIndentCheck.getLines()[i - 1];\n             String prevLine \u003d mIndentCheck.getLines()[i - 2];\n             if (thisLine.matches(\"^\\\\s*\\\\.\")\n                 || prevLine.matches(\"\\\\.\\\\s*$\"))\n             {\n                 aIndentLevel \u003d new IndentLevel(aIndentLevel,\n                                                mIndentCheck.getBasicOffset());\n             }\n \n             if (col !\u003d null) {\n                 checkSingleLine(i, col.intValue(), aIndentLevel, false);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "4409b0f2432b479bd43ca274f91d1aabd6060575": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Indentation.\nNow the check allows both\nnew int[] {1,\n           2}\nand\nnew int[] {1,\n    2}\nIndent styles.\n",
      "commitDate": 1054611453000,
      "commitName": "4409b0f2432b479bd43ca274f91d1aabd6060575",
      "commitAuthor": "Oleg Sukhodolsky",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "7d38133e430f6c695c40d88c63af4c44f10878f9": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "Indentation:\nRemove unneeded overloading.\nOne more bug fix.\nOne more testcase.\n",
      "commitDate": 1053289224000,
      "commitName": "7d38133e430f6c695c40d88c63af4c44f10878f9",
      "commitAuthor": "Oleg Sukhodolsky",
      "subchanges": [
        "Ymodifierchange",
        "Ybodychange"
      ]
    },
    "661a9b0ddb10922458082573d79e0791ba6f38c2": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "Cosmetic changes in ExpressionHandle and LineSet.\nFixed bug with:\nif (foo()\n    || con1\n    || con3)\n{\n}\n\nInput for unit-test modified.\n",
      "commitDate": 1053283707000,
      "commitName": "661a9b0ddb10922458082573d79e0791ba6f38c2",
      "commitAuthor": "Oleg Sukhodolsky",
      "subchanges": [
        "Yparameterchange",
        "Ymodifierchange",
        "Ybodychange"
      ]
    },
    "092e1f69476fc715852035a25b23a11804183a23": {
      "type": "Ybodychange",
      "commitMessage": "indentationAmount property renamed to basicOffset\n",
      "commitDate": 1053014089000,
      "commitName": "092e1f69476fc715852035a25b23a11804183a23",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1052899909000,
      "commitNameOld": "a4d63db21d57ab53aff8a467f89df3867518ab91",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 1.32,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,59 @@\n     protected void checkLinesIndent(LineSet aLines,\n                                     int aIndentLevel,\n                                     boolean aFirstLineMatches)\n     {\n         if (aLines.isEmpty()) {\n             return;\n         }\n \n         // check first line\n         int startLine \u003d aLines.firstLine();\n         int endLine \u003d aLines.lastLine();\n         int startCol \u003d aLines.firstLineCol();\n \n         int realStartCol \u003d getLineStart(\n             mIndentCheck.getLines()[startLine - 1]);\n \n         if (realStartCol \u003d\u003d startCol) {\n             checkSingleLine(startLine, startCol, aIndentLevel,\n                 aFirstLineMatches);\n \n             // if first line starts the line, following lines are indented\n             // one level; but if the first line of this expression is\n             // nested with the previous expression (which is assumed if it\n             // doesn\u0027t start the line) then don\u0027t indent more, the first\n             // indentation is absorbed by the nesting\n \n         }\n \n         if (aFirstLineMatches || startLine \u003e mMainAst.getLineNo()) {\n-            aIndentLevel +\u003d mIndentCheck.getIndentationAmount();\n+            aIndentLevel +\u003d mIndentCheck.getBasicOffset();\n         }\n \n         // check following lines\n         for (int i \u003d startLine + 1; i \u003c\u003d endLine; i++) {\n             Integer col \u003d aLines.getStartColumn(new Integer(i));\n             // startCol could be null if this line didn\u0027t have an\n             // expression that was required to be checked (it could be\n             // checked by a child expression)\n \n             // TODO: not sure if this does anything, look at taking it out\n \n             // TODO: we can check here if this line starts or the previous\n             // line ends in a dot.  If so, we should increase the indent.\n \n             // TODO: check if -2 is possible here?  but unlikely to be a\n             // problem...\n             String thisLine \u003d mIndentCheck.getLines()[i - 1];\n             String prevLine \u003d mIndentCheck.getLines()[i - 2];\n             if (thisLine.matches(\"^\\\\s*\\\\.\")\n                 || prevLine.matches(\"\\\\.\\\\s*$\"))\n             {\n-                aIndentLevel +\u003d mIndentCheck.getIndentationAmount();\n+                aIndentLevel +\u003d mIndentCheck.getBasicOffset();\n             }\n \n             if (col !\u003d null) {\n                 checkSingleLine(i, col.intValue(), aIndentLevel, false);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "eaad55fdba73e17e103dc6600867f26fd6a3896b": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "Refactoring of original IndentationCheck made by Jeff Weston (Sir Toby) applied.\nFixed two know problems:\n - with static init block (catched by testValidBlockWithChecker())\n - with throws in method definition.\n   unit-test (testInvalidMethodWithChecker()) fixed too.\n",
      "commitDate": 1052639583000,
      "commitName": "eaad55fdba73e17e103dc6600867f26fd6a3896b",
      "commitAuthor": "Oleg Sukhodolsky",
      "subchanges": [
        "Ymovefromfile",
        "Ybodychange"
      ]
    },
    "9aab61241e7970ccfb4a9ee66c8eb7f062d31955": {
      "type": "Yintroduced",
      "commitMessage": "added IndentationCheck, contributed by John Richardson\nThis check currently fails to pass checkstyle.checkstyle\nbecause most methods are missing javadoc, I hope somebody\ncan help me adding it\n",
      "commitDate": 1051248087000,
      "commitName": "9aab61241e7970ccfb4a9ee66c8eb7f062d31955",
      "commitAuthor": "Lars Kühne"
    }
  }
}