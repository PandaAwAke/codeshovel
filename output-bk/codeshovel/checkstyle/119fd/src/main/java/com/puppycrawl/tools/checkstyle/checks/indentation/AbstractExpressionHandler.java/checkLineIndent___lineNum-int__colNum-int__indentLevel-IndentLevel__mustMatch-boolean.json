{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "AbstractExpressionHandler.java",
  "functionName": "checkLineIndent",
  "functionId": "checkLineIndent___lineNum-int__colNum-int__indentLevel-IndentLevel__mustMatch-boolean",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java",
  "functionStartLine": 323,
  "functionEndLine": 335,
  "changeHistory": [
    "6ca2d5279ea5b03dfa91167a9001d55cca5db65d",
    "24d7448294b03e49709c8e5588e89c27091ba0f2",
    "23c8774d2e2fd245de1e5df02758fd23702c565e",
    "eb5896a4a1d66552f5100046413f15d62b485b62",
    "4ac32a7c0cf72ee35630432ce260293f80d886b8",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6",
    "cba6fc8b0a653a795107566f895d2b8f73e2c6c9",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "35d1673788bbbac8263fdb69275dc6a63b095a24",
    "c2d3932843e70e4bb5df7161800aca248f9af778",
    "4409b0f2432b479bd43ca274f91d1aabd6060575",
    "8d9d5e58ac50133f15ad8807bea302ab16aa5071",
    "eaad55fdba73e17e103dc6600867f26fd6a3896b",
    "9aab61241e7970ccfb4a9ee66c8eb7f062d31955"
  ],
  "changeHistoryShort": {
    "6ca2d5279ea5b03dfa91167a9001d55cca5db65d": "Yrename",
    "24d7448294b03e49709c8e5588e89c27091ba0f2": "Ybodychange",
    "23c8774d2e2fd245de1e5df02758fd23702c565e": "Ybodychange",
    "eb5896a4a1d66552f5100046413f15d62b485b62": "Yfilerename",
    "4ac32a7c0cf72ee35630432ce260293f80d886b8": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6": "Ymultichange(Yparameterchange,Ybodychange)",
    "cba6fc8b0a653a795107566f895d2b8f73e2c6c9": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "35d1673788bbbac8263fdb69275dc6a63b095a24": "Ybodychange",
    "c2d3932843e70e4bb5df7161800aca248f9af778": "Ybodychange",
    "4409b0f2432b479bd43ca274f91d1aabd6060575": "Ymultichange(Yparameterchange,Ybodychange)",
    "8d9d5e58ac50133f15ad8807bea302ab16aa5071": "Ybodychange",
    "eaad55fdba73e17e103dc6600867f26fd6a3896b": "Ymultichange(Ymovefromfile,Ybodychange)",
    "9aab61241e7970ccfb4a9ee66c8eb7f062d31955": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6ca2d5279ea5b03dfa91167a9001d55cca5db65d": {
      "type": "Yrename",
      "commitMessage": "minor: renaming indentation methods to more natural name",
      "commitDate": 1449581693000,
      "commitName": "6ca2d5279ea5b03dfa91167a9001d55cca5db65d",
      "commitAuthor": "rnveach",
      "commitDateOld": 1449255189000,
      "commitNameOld": "ab74399c2d18b8881c4a0c13155b7afce869eebf",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 3.78,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n-    private void checkSingleLine(int lineNum, int colNum,\n+    private void checkLineIndent(int lineNum, int colNum,\n         IndentLevel indentLevel, boolean mustMatch) {\n         final String line \u003d indentCheck.getLine(lineNum - 1);\n         final int start \u003d getLineStart(line);\n         // if must match is set, it is an error if the line start is not\n         // at the correct indention level; otherwise, it is an only an\n         // error if this statement starts the line and it is less than\n         // the correct indentation level\n         if (mustMatch \u0026\u0026 !indentLevel.isAcceptable(start)\n                 || !mustMatch \u0026\u0026 colNum \u003d\u003d start \u0026\u0026 indentLevel.isGreaterThan(start)) {\n             logChildError(lineNum, start, indentLevel);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "24d7448294b03e49709c8e5588e89c27091ba0f2": {
      "type": "Ybodychange",
      "commitMessage": "Rename boolean methods to start with question word. #1555\n\nFixes some `BooleanMethodNameMustStartWithQuestion` inspection violations.\n\nDescription:\n\u003eReports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection\n",
      "commitDate": 1440679495000,
      "commitName": "24d7448294b03e49709c8e5588e89c27091ba0f2",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440677821000,
      "commitNameOld": "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n     private void checkSingleLine(int lineNum, int colNum,\n         IndentLevel indentLevel, boolean mustMatch) {\n         final String line \u003d indentCheck.getLine(lineNum - 1);\n         final int start \u003d getLineStart(line);\n         // if must match is set, it is an error if the line start is not\n         // at the correct indention level; otherwise, it is an only an\n         // error if this statement starts the line and it is less than\n         // the correct indentation level\n-        if (mustMatch \u0026\u0026 !indentLevel.accept(start)\n-                || !mustMatch \u0026\u0026 colNum \u003d\u003d start \u0026\u0026 indentLevel.greaterThan(start)) {\n+        if (mustMatch \u0026\u0026 !indentLevel.isAcceptable(start)\n+                || !mustMatch \u0026\u0026 colNum \u003d\u003d start \u0026\u0026 indentLevel.isGreaterThan(start)) {\n             logChildError(lineNum, start, indentLevel);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "23c8774d2e2fd245de1e5df02758fd23702c565e": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: AvoidInlineConditional violations fixed\n",
      "commitDate": 1439784080000,
      "commitName": "23c8774d2e2fd245de1e5df02758fd23702c565e",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": 1439356761000,
      "commitNameOld": "3bd699bd593414d63c7139aa410f13ec8341a027",
      "commitAuthorOld": "Ruslan Diachenko",
      "daysBetweenCommits": 4.95,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n     private void checkSingleLine(int lineNum, int colNum,\n         IndentLevel indentLevel, boolean mustMatch) {\n         final String line \u003d indentCheck.getLine(lineNum - 1);\n         final int start \u003d getLineStart(line);\n         // if must match is set, it is an error if the line start is not\n         // at the correct indention level; otherwise, it is an only an\n         // error if this statement starts the line and it is less than\n         // the correct indentation level\n-        if (mustMatch ? !indentLevel.accept(start)\n-            : colNum \u003d\u003d start \u0026\u0026 indentLevel.greaterThan(start)) {\n+        if (mustMatch \u0026\u0026 !indentLevel.accept(start)\n+                || !mustMatch \u0026\u0026 colNum \u003d\u003d start \u0026\u0026 indentLevel.greaterThan(start)) {\n             logChildError(lineNum, start, indentLevel);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "eb5896a4a1d66552f5100046413f15d62b485b62": {
      "type": "Yfilerename",
      "commitMessage": "Fix PMD violations for AbstractNaming rule #983\n",
      "commitDate": 1434649920000,
      "commitName": "eb5896a4a1d66552f5100046413f15d62b485b62",
      "commitAuthor": "Bhavik Patel",
      "commitDateOld": 1434608420000,
      "commitNameOld": "0382b7907b54e95408344863915a847dabc37f12",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 0.48,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "4ac32a7c0cf72ee35630432ce260293f80d886b8": {
      "type": "Ybodychange",
      "commitMessage": "Fix PMD violations from ShortMethodName rule, issue #982\n",
      "commitDate": 1429903289000,
      "commitName": "4ac32a7c0cf72ee35630432ce260293f80d886b8",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1426454536000,
      "commitNameOld": "1c15b6a36baa68dc3f2ebdf9baac131e98bb9e04",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 39.92,
      "commitsBetweenForRepo": 184,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n     private void checkSingleLine(int lineNum, int colNum,\n         IndentLevel indentLevel, boolean mustMatch)\n     {\n         final String line \u003d indentCheck.getLine(lineNum - 1);\n         final int start \u003d getLineStart(line);\n         // if must match is set, it is an error if the line start is not\n         // at the correct indention level; otherwise, it is an only an\n         // error if this statement starts the line and it is less than\n         // the correct indentation level\n         if (mustMatch ? !indentLevel.accept(start)\n-            : colNum \u003d\u003d start \u0026\u0026 indentLevel.gt(start))\n+            : colNum \u003d\u003d start \u0026\u0026 indentLevel.greaterThan(start))\n         {\n             logChildError(lineNum, start, indentLevel);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": 1426023398000,
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1424437366000,
      "commitNameOld": "a15fcb34fb0670b0603216dfca3c3c9e12d09727",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 18.36,
      "commitsBetweenForRepo": 95,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n     private void checkSingleLine(int lineNum, int colNum,\n         IndentLevel indentLevel, boolean mustMatch)\n     {\n         final String line \u003d indentCheck.getLine(lineNum - 1);\n         final int start \u003d getLineStart(line);\n         // if must match is set, it is an error if the line start is not\n         // at the correct indention level; otherwise, it is an only an\n         // error if this statement starts the line and it is less than\n         // the correct indentation level\n         if (mustMatch ? !indentLevel.accept(start)\n-            : (colNum \u003d\u003d start) \u0026\u0026 indentLevel.gt(start))\n+            : colNum \u003d\u003d start \u0026\u0026 indentLevel.gt(start))\n         {\n             logChildError(lineNum, start, indentLevel);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, indentation, #512\n",
      "commitDate": 1421678099000,
      "commitName": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "cba6fc8b0a653a795107566f895d2b8f73e2c6c9": {
      "type": "Ybodychange",
      "commitMessage": "FileContents.getLines performance fix\n",
      "commitDate": 1414957696000,
      "commitName": "cba6fc8b0a653a795107566f895d2b8f73e2c6c9",
      "commitAuthor": "sopov.ivan",
      "commitDateOld": 1413242511000,
      "commitNameOld": "e3a48d1527341456a798c3f0c1986de6898a8c60",
      "commitAuthorOld": "maxvetrenko",
      "daysBetweenCommits": 19.85,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n     private void checkSingleLine(int aLineNum, int aColNum,\n         IndentLevel aIndentLevel, boolean aMustMatch)\n     {\n-        final String line \u003d mIndentCheck.getLines()[aLineNum - 1];\n+        final String line \u003d mIndentCheck.getLine(aLineNum - 1);\n         final int start \u003d getLineStart(line);\n         // if must match is set, it is an error if the line start is not\n         // at the correct indention level; otherwise, it is an only an\n         // error if this statement starts the line and it is less than\n         // the correct indentation level\n         if (aMustMatch ? !aIndentLevel.accept(start)\n             : (aColNum \u003d\u003d start) \u0026\u0026 aIndentLevel.gt(start))\n         {\n             logChildError(aLineNum, start, aIndentLevel);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "35d1673788bbbac8263fdb69275dc6a63b095a24": {
      "type": "Ybodychange",
      "commitMessage": "Making local variables final where possible.\n",
      "commitDate": 1152243856000,
      "commitName": "35d1673788bbbac8263fdb69275dc6a63b095a24",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1152242806000,
      "commitNameOld": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n     private void checkSingleLine(int aLineNum, int aColNum,\n         IndentLevel aIndentLevel, boolean aMustMatch)\n     {\n-        String line \u003d mIndentCheck.getLines()[aLineNum - 1];\n-        int start \u003d getLineStart(line);\n+        final String line \u003d mIndentCheck.getLines()[aLineNum - 1];\n+        final int start \u003d getLineStart(line);\n         // if must match is set, it is an error if the line start is not\n         // at the correct indention level; otherwise, it is an only an\n         // error if this statement starts the line and it is less than\n         // the correct indentation level\n         if (aMustMatch ? !aIndentLevel.accept(start)\n             : (aColNum \u003d\u003d start) \u0026\u0026 aIndentLevel.gt(start))\n         {\n             logChildError(aLineNum, start, aIndentLevel);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "c2d3932843e70e4bb5df7161800aca248f9af778": {
      "type": "Ybodychange",
      "commitMessage": "Clean up the use of ()\u0027s\n",
      "commitDate": 1152242806000,
      "commitName": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1122110316000,
      "commitNameOld": "bcbd31a5ecc3aa9b5f0677acb17c441142e57c6f",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 348.76,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n     private void checkSingleLine(int aLineNum, int aColNum,\n         IndentLevel aIndentLevel, boolean aMustMatch)\n     {\n         String line \u003d mIndentCheck.getLines()[aLineNum - 1];\n         int start \u003d getLineStart(line);\n         // if must match is set, it is an error if the line start is not\n         // at the correct indention level; otherwise, it is an only an\n         // error if this statement starts the line and it is less than\n         // the correct indentation level\n         if (aMustMatch ? !aIndentLevel.accept(start)\n-            : aColNum \u003d\u003d start \u0026\u0026 aIndentLevel.gt(start))\n+            : (aColNum \u003d\u003d start) \u0026\u0026 aIndentLevel.gt(start))\n         {\n             logChildError(aLineNum, start, aIndentLevel);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "4409b0f2432b479bd43ca274f91d1aabd6060575": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Indentation.\nNow the check allows both\nnew int[] {1,\n           2}\nand\nnew int[] {1,\n    2}\nIndent styles.\n",
      "commitDate": 1054611453000,
      "commitName": "4409b0f2432b479bd43ca274f91d1aabd6060575",
      "commitAuthor": "Oleg Sukhodolsky",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "8d9d5e58ac50133f15ad8807bea302ab16aa5071": {
      "type": "Ybodychange",
      "commitMessage": "I18N for IndentationCheck\n",
      "commitDate": 1053053682000,
      "commitName": "8d9d5e58ac50133f15ad8807bea302ab16aa5071",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1053014089000,
      "commitNameOld": "092e1f69476fc715852035a25b23a11804183a23",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 0.46,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,15 @@\n     private void checkSingleLine(int aLineNum, int aColNum,\n         int aIndentLevel, boolean aMustMatch)\n     {\n         String line \u003d mIndentCheck.getLines()[aLineNum - 1];\n         int start \u003d getLineStart(line);\n         // if must match is set, it is an error if the line start is not\n         // at the correct indention level; otherwise, it is an only an\n         // error if this statement starts the line and it is less than\n         // the correct indentation level\n         if (aMustMatch ? start !\u003d aIndentLevel\n             : aColNum \u003d\u003d start \u0026\u0026 start \u003c aIndentLevel)\n         {\n-            // TODO: i18n or use logError\n-            mIndentCheck.indentationLog(aLineNum, mTypeName\n-                + \" child at indentation level \" + start\n-                + \" not at correct indentation, \" + aIndentLevel);\n+            logChildError(aLineNum, start, aIndentLevel);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "eaad55fdba73e17e103dc6600867f26fd6a3896b": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "Refactoring of original IndentationCheck made by Jeff Weston (Sir Toby) applied.\nFixed two know problems:\n - with static init block (catched by testValidBlockWithChecker())\n - with throws in method definition.\n   unit-test (testInvalidMethodWithChecker()) fixed too.\n",
      "commitDate": 1052639583000,
      "commitName": "eaad55fdba73e17e103dc6600867f26fd6a3896b",
      "commitAuthor": "Oleg Sukhodolsky",
      "subchanges": [
        "Ymovefromfile",
        "Ybodychange"
      ]
    },
    "9aab61241e7970ccfb4a9ee66c8eb7f062d31955": {
      "type": "Yintroduced",
      "commitMessage": "added IndentationCheck, contributed by John Richardson\nThis check currently fails to pass checkstyle.checkstyle\nbecause most methods are missing javadoc, I hope somebody\ncan help me adding it\n",
      "commitDate": 1051248087000,
      "commitName": "9aab61241e7970ccfb4a9ee66c8eb7f062d31955",
      "commitAuthor": "Lars Kühne"
    }
  }
}