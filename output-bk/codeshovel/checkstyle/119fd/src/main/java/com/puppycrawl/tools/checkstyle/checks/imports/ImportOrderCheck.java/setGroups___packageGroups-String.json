{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "ImportOrderCheck.java",
  "functionName": "setGroups",
  "functionId": "setGroups___packageGroups-String",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java",
  "functionStartLine": 261,
  "functionEndLine": 291,
  "changeHistory": [
    "82bc23f45d7d57dfa26d1a1d4ec0f7dfcd88abb2",
    "0d8e93ce79ea33b72b3e904d8796984271ee3d8d",
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
    "bf6735ce4bf833170d19d91922d9b4d17aa4aefc",
    "85ba2a3dce39e73858d0f3df72c43804677c8c48",
    "a2b8be14bb1230f1b184701bae8bcc7af102bb25",
    "c0446a825514ea0279b8c22f633f2c4e3c73dc1f",
    "16dac636b246c658cad31ee9b2e45c53b851d4f2",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "8d800ef546e11c6d593154f4071e39cdc4f66f34",
    "139609ac5d073ecb04381466f075f174b0aec8c9",
    "efccc132cea8ce1efad0e5318b8419cc603f8957",
    "2a1705e70d334700734b3df3ebefea0be878127a"
  ],
  "changeHistoryShort": {
    "82bc23f45d7d57dfa26d1a1d4ec0f7dfcd88abb2": "Ybodychange",
    "0d8e93ce79ea33b72b3e904d8796984271ee3d8d": "Ybodychange",
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970": "Ybodychange",
    "bf6735ce4bf833170d19d91922d9b4d17aa4aefc": "Ybodychange",
    "85ba2a3dce39e73858d0f3df72c43804677c8c48": "Ybodychange",
    "a2b8be14bb1230f1b184701bae8bcc7af102bb25": "Ybodychange",
    "c0446a825514ea0279b8c22f633f2c4e3c73dc1f": "Yparameterchange",
    "16dac636b246c658cad31ee9b2e45c53b851d4f2": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "8d800ef546e11c6d593154f4071e39cdc4f66f34": "Ybodychange",
    "139609ac5d073ecb04381466f075f174b0aec8c9": "Ybodychange",
    "efccc132cea8ce1efad0e5318b8419cc603f8957": "Ybodychange",
    "2a1705e70d334700734b3df3ebefea0be878127a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "82bc23f45d7d57dfa26d1a1d4ec0f7dfcd88abb2": {
      "type": "Ybodychange",
      "commitMessage": "Pull #4328: moved variables inside if blocks to reduce execution time",
      "commitDate": 1494119754000,
      "commitName": "82bc23f45d7d57dfa26d1a1d4ec0f7dfcd88abb2",
      "commitAuthor": "rnveach",
      "commitDateOld": 1488165925000,
      "commitNameOld": "ce21086e087661553f3a774c38362327ee88996a",
      "commitAuthorOld": "Vladislav Lisetskii",
      "daysBetweenCommits": 68.91,
      "commitsBetweenForRepo": 279,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n     public void setGroups(String... packageGroups) {\n         groups \u003d new Pattern[packageGroups.length];\n \n         for (int i \u003d 0; i \u003c packageGroups.length; i++) {\n             String pkg \u003d packageGroups[i];\n-            final StringBuilder pkgBuilder \u003d new StringBuilder(pkg);\n             final Pattern grp;\n \n             // if the pkg name is the wildcard, make it match zero chars\n             // from any name, so it will always be used as last resort.\n             if (WILDCARD_GROUP_NAME.equals(pkg)) {\n                 // matches any package\n                 grp \u003d Pattern.compile(\"\");\n             }\n             else if (CommonUtils.startsWithChar(pkg, \u0027/\u0027)) {\n                 if (!CommonUtils.endsWithChar(pkg, \u0027/\u0027)) {\n                     throw new IllegalArgumentException(\"Invalid group\");\n                 }\n                 pkg \u003d pkg.substring(1, pkg.length() - 1);\n                 grp \u003d Pattern.compile(pkg);\n             }\n             else {\n+                final StringBuilder pkgBuilder \u003d new StringBuilder(pkg);\n                 if (!CommonUtils.endsWithChar(pkg, \u0027.\u0027)) {\n                     pkgBuilder.append(\u0027.\u0027);\n                 }\n                 grp \u003d Pattern.compile(\"^\" + Pattern.quote(pkgBuilder.toString()));\n             }\n \n             groups[i] \u003d grp;\n         }\n     }\n\\ No newline at end of file\n"
    },
    "0d8e93ce79ea33b72b3e904d8796984271ee3d8d": {
      "type": "Ybodychange",
      "commitMessage": "minor: enforce FinalLocalVariableCheck on checkstyle code\n",
      "commitDate": 1453646135000,
      "commitName": "0d8e93ce79ea33b72b3e904d8796984271ee3d8d",
      "commitAuthor": "Bhavik Patel",
      "commitDateOld": 1451953543000,
      "commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 19.59,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n     public void setGroups(String... packageGroups) {\n         groups \u003d new Pattern[packageGroups.length];\n \n         for (int i \u003d 0; i \u003c packageGroups.length; i++) {\n             String pkg \u003d packageGroups[i];\n             final StringBuilder pkgBuilder \u003d new StringBuilder(pkg);\n-            Pattern grp;\n+            final Pattern grp;\n \n             // if the pkg name is the wildcard, make it match zero chars\n             // from any name, so it will always be used as last resort.\n             if (WILDCARD_GROUP_NAME.equals(pkg)) {\n                 // matches any package\n                 grp \u003d Pattern.compile(\"\");\n             }\n             else if (CommonUtils.startsWithChar(pkg, \u0027/\u0027)) {\n                 if (!CommonUtils.endsWithChar(pkg, \u0027/\u0027)) {\n                     throw new IllegalArgumentException(\"Invalid group\");\n                 }\n                 pkg \u003d pkg.substring(1, pkg.length() - 1);\n                 grp \u003d Pattern.compile(pkg);\n             }\n             else {\n                 if (!CommonUtils.endsWithChar(pkg, \u0027.\u0027)) {\n                     pkgBuilder.append(\u0027.\u0027);\n                 }\n                 grp \u003d Pattern.compile(\"^\" + Pattern.quote(pkgBuilder.toString()));\n             }\n \n             groups[i] \u003d grp;\n         }\n     }\n\\ No newline at end of file\n"
    },
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970": {
      "type": "Ybodychange",
      "commitMessage": "Utils class has been splitted to CommonUtils and TokenUtils. Issue #1898\n",
      "commitDate": 1440677821000,
      "commitName": "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": 1440677821000,
      "commitNameOld": "ed595de84fba2db507adaf01d04cb089a5e0bac5",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n     public void setGroups(String... packageGroups) {\n         groups \u003d new Pattern[packageGroups.length];\n \n         for (int i \u003d 0; i \u003c packageGroups.length; i++) {\n             String pkg \u003d packageGroups[i];\n             final StringBuilder pkgBuilder \u003d new StringBuilder(pkg);\n             Pattern grp;\n \n             // if the pkg name is the wildcard, make it match zero chars\n             // from any name, so it will always be used as last resort.\n             if (WILDCARD_GROUP_NAME.equals(pkg)) {\n                 // matches any package\n                 grp \u003d Pattern.compile(\"\");\n             }\n-            else if (Utils.startsWithChar(pkg, \u0027/\u0027)) {\n-                if (!Utils.endsWithChar(pkg, \u0027/\u0027)) {\n+            else if (CommonUtils.startsWithChar(pkg, \u0027/\u0027)) {\n+                if (!CommonUtils.endsWithChar(pkg, \u0027/\u0027)) {\n                     throw new IllegalArgumentException(\"Invalid group\");\n                 }\n                 pkg \u003d pkg.substring(1, pkg.length() - 1);\n                 grp \u003d Pattern.compile(pkg);\n             }\n             else {\n-                if (!Utils.endsWithChar(pkg, \u0027.\u0027)) {\n+                if (!CommonUtils.endsWithChar(pkg, \u0027.\u0027)) {\n                     pkgBuilder.append(\u0027.\u0027);\n                 }\n                 grp \u003d Pattern.compile(\"^\" + Pattern.quote(pkgBuilder.toString()));\n             }\n \n             groups[i] \u003d grp;\n         }\n     }\n\\ No newline at end of file\n"
    },
    "bf6735ce4bf833170d19d91922d9b4d17aa4aefc": {
      "type": "Ybodychange",
      "commitMessage": "Use StringBuilder to concatenate strings. #1555\n\nFixes `StringReplaceableByStringBuffer` inspection violations.\n\nDescription:\nReports any variables declared as java.lang.String which are repeatedly appended to. Such variables may be more efficiently declared as java.lang.StringBuffer or java.lang.StringBuilder.\n",
      "commitDate": 1439010898000,
      "commitName": "bf6735ce4bf833170d19d91922d9b4d17aa4aefc",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1438566538000,
      "commitNameOld": "85ba2a3dce39e73858d0f3df72c43804677c8c48",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 5.14,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n     public void setGroups(String... packageGroups) {\n         groups \u003d new Pattern[packageGroups.length];\n \n         for (int i \u003d 0; i \u003c packageGroups.length; i++) {\n             String pkg \u003d packageGroups[i];\n+            final StringBuilder pkgBuilder \u003d new StringBuilder(pkg);\n             Pattern grp;\n \n             // if the pkg name is the wildcard, make it match zero chars\n             // from any name, so it will always be used as last resort.\n             if (WILDCARD_GROUP_NAME.equals(pkg)) {\n                 grp \u003d Pattern.compile(\"\"); // matches any package\n             }\n             else if (Utils.startsWithChar(pkg, \u0027/\u0027)) {\n                 if (!Utils.endsWithChar(pkg, \u0027/\u0027)) {\n                     throw new IllegalArgumentException(\"Invalid group\");\n                 }\n                 pkg \u003d pkg.substring(1, pkg.length() - 1);\n                 grp \u003d Pattern.compile(pkg);\n             }\n             else {\n                 if (!Utils.endsWithChar(pkg, \u0027.\u0027)) {\n-                    pkg +\u003d \".\";\n+                    pkgBuilder.append(\u0027.\u0027);\n                 }\n-                grp \u003d Pattern.compile(\"^\" + Pattern.quote(pkg));\n+                grp \u003d Pattern.compile(\"^\" + Pattern.quote(pkgBuilder.toString()));\n             }\n \n             groups[i] \u003d grp;\n         }\n     }\n\\ No newline at end of file\n"
    },
    "85ba2a3dce39e73858d0f3df72c43804677c8c48": {
      "type": "Ybodychange",
      "commitMessage": "Replace assignment with operator assignment. #1538\n",
      "commitDate": 1438566538000,
      "commitName": "85ba2a3dce39e73858d0f3df72c43804677c8c48",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1438103538000,
      "commitNameOld": "ea9ff3965d9c657b5b7bd2d969e075f430635c47",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 5.36,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     public void setGroups(String... packageGroups) {\n         groups \u003d new Pattern[packageGroups.length];\n \n         for (int i \u003d 0; i \u003c packageGroups.length; i++) {\n             String pkg \u003d packageGroups[i];\n             Pattern grp;\n \n             // if the pkg name is the wildcard, make it match zero chars\n             // from any name, so it will always be used as last resort.\n             if (WILDCARD_GROUP_NAME.equals(pkg)) {\n                 grp \u003d Pattern.compile(\"\"); // matches any package\n             }\n             else if (Utils.startsWithChar(pkg, \u0027/\u0027)) {\n                 if (!Utils.endsWithChar(pkg, \u0027/\u0027)) {\n                     throw new IllegalArgumentException(\"Invalid group\");\n                 }\n                 pkg \u003d pkg.substring(1, pkg.length() - 1);\n                 grp \u003d Pattern.compile(pkg);\n             }\n             else {\n                 if (!Utils.endsWithChar(pkg, \u0027.\u0027)) {\n-                    pkg \u003d pkg + \".\";\n+                    pkg +\u003d \".\";\n                 }\n                 grp \u003d Pattern.compile(\"^\" + Pattern.quote(pkg));\n             }\n \n             groups[i] \u003d grp;\n         }\n     }\n\\ No newline at end of file\n"
    },
    "a2b8be14bb1230f1b184701bae8bcc7af102bb25": {
      "type": "Ybodychange",
      "commitMessage": "Fix PMD violations from SimplifyStartsWith rule, issue #949\n",
      "commitDate": 1430665225000,
      "commitName": "a2b8be14bb1230f1b184701bae8bcc7af102bb25",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1430353274000,
      "commitNameOld": "c0446a825514ea0279b8c22f633f2c4e3c73dc1f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 3.61,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     public void setGroups(String... packageGroups)\n     {\n         groups \u003d new Pattern[packageGroups.length];\n \n         for (int i \u003d 0; i \u003c packageGroups.length; i++) {\n             String pkg \u003d packageGroups[i];\n             Pattern grp;\n \n             // if the pkg name is the wildcard, make it match zero chars\n             // from any name, so it will always be used as last resort.\n             if (WILDCARD_GROUP_NAME.equals(pkg)) {\n                 grp \u003d Pattern.compile(\"\"); // matches any package\n             }\n-            else if (pkg.startsWith(\"/\")) {\n-                if (!pkg.endsWith(\"/\")) {\n+            else if (Utils.startsWithChar(pkg, \u0027/\u0027)) {\n+                if (!Utils.endsWithChar(pkg, \u0027/\u0027)) {\n                     throw new IllegalArgumentException(\"Invalid group\");\n                 }\n                 pkg \u003d pkg.substring(1, pkg.length() - 1);\n                 grp \u003d Pattern.compile(pkg);\n             }\n             else {\n-                if (!pkg.endsWith(\".\")) {\n+                if (!Utils.endsWithChar(pkg, \u0027.\u0027)) {\n                     pkg \u003d pkg + \".\";\n                 }\n                 grp \u003d Pattern.compile(\"^\" + Pattern.quote(pkg));\n             }\n \n             groups[i] \u003d grp;\n         }\n     }\n\\ No newline at end of file\n"
    },
    "c0446a825514ea0279b8c22f633f2c4e3c73dc1f": {
      "type": "Yparameterchange",
      "commitMessage": "Fix PMD violations from UseVarargs rule, issue #999\n\nThe changes are fully backward-compatible. Method with vararg can be invoked both using array and list of parameters.\n",
      "commitDate": 1430353274000,
      "commitName": "c0446a825514ea0279b8c22f633f2c4e3c73dc1f",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1430005344000,
      "commitNameOld": "31db0435b77223c5b03e72e3f198b2ce89cf6965",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 4.03,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n-    public void setGroups(String[] packageGroups)\n+    public void setGroups(String... packageGroups)\n     {\n         groups \u003d new Pattern[packageGroups.length];\n \n         for (int i \u003d 0; i \u003c packageGroups.length; i++) {\n             String pkg \u003d packageGroups[i];\n             Pattern grp;\n \n             // if the pkg name is the wildcard, make it match zero chars\n             // from any name, so it will always be used as last resort.\n             if (WILDCARD_GROUP_NAME.equals(pkg)) {\n                 grp \u003d Pattern.compile(\"\"); // matches any package\n             }\n             else if (pkg.startsWith(\"/\")) {\n                 if (!pkg.endsWith(\"/\")) {\n                     throw new IllegalArgumentException(\"Invalid group\");\n                 }\n                 pkg \u003d pkg.substring(1, pkg.length() - 1);\n                 grp \u003d Pattern.compile(pkg);\n             }\n             else {\n                 if (!pkg.endsWith(\".\")) {\n                     pkg \u003d pkg + \".\";\n                 }\n                 grp \u003d Pattern.compile(\"^\" + Pattern.quote(pkg));\n             }\n \n             groups[i] \u003d grp;\n         }\n     }\n\\ No newline at end of file\n"
    },
    "16dac636b246c658cad31ee9b2e45c53b851d4f2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, imports, #512\n",
      "commitDate": 1421678111000,
      "commitName": "16dac636b246c658cad31ee9b2e45c53b851d4f2",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "8d800ef546e11c6d593154f4071e39cdc4f66f34": {
      "type": "Ybodychange",
      "commitMessage": "Enhanced ImportOrder  to support using regular expressions for defining groups. Thanks to Martin von Gagern for patch #2782118.\n",
      "commitDate": 1284436185000,
      "commitName": "8d800ef546e11c6d593154f4071e39cdc4f66f34",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1266491811000,
      "commitNameOld": "139609ac5d073ecb04381466f075f174b0aec8c9",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 207.69,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,30 @@\n     public void setGroups(String[] aGroups)\n     {\n-        // set the default wildcard group to be after the last named group.\n-        mWildcardGroupIndex \u003d aGroups.length;\n-\n-        mGroups \u003d new String[aGroups.length];\n+        mGroups \u003d new Pattern[aGroups.length];\n \n         for (int i \u003d 0; i \u003c aGroups.length; i++) {\n             String pkg \u003d aGroups[i];\n+            Pattern grp;\n \n-            // if the pkg name is the wildcard, record the\n-            // position for later reference\n+            // if the pkg name is the wildcard, make it match zero chars\n+            // from any name, so it will always be used as last resort.\n             if (WILDCARD_GROUP_NAME.equals(pkg)) {\n-                mWildcardGroupIndex \u003d i;\n+                grp \u003d Pattern.compile(\"\"); // matches any package\n             }\n-            else if (!pkg.endsWith(\".\")) {\n-                pkg \u003d pkg + \".\";\n+            else if (pkg.startsWith(\"/\")) {\n+                if (!pkg.endsWith(\"/\")) {\n+                    throw new IllegalArgumentException(\"Invalid group\");\n+                }\n+                pkg \u003d pkg.substring(1, pkg.length() - 1);\n+                grp \u003d Pattern.compile(pkg);\n+            }\n+            else {\n+                if (!pkg.endsWith(\".\")) {\n+                    pkg \u003d pkg + \".\";\n+                }\n+                grp \u003d Pattern.compile(\"^\" + Pattern.quote(pkg));\n             }\n \n-            mGroups[i] \u003d pkg;\n+            mGroups[i] \u003d grp;\n         }\n     }\n\\ No newline at end of file\n"
    },
    "139609ac5d073ecb04381466f075f174b0aec8c9": {
      "type": "Ybodychange",
      "commitMessage": "Fixed ImportOrder to have the sort behaviour as in release 5.0. (bug #2952881). Thanks to Steve McKay for patch #2953936.\n",
      "commitDate": 1266491811000,
      "commitName": "139609ac5d073ecb04381466f075f174b0aec8c9",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1266029835000,
      "commitNameOld": "523080bbf2be11354b94b851ac85d06e7e8a2c14",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 5.35,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,22 @@\n     public void setGroups(String[] aGroups)\n     {\n+        // set the default wildcard group to be after the last named group.\n+        mWildcardGroupIndex \u003d aGroups.length;\n+\n         mGroups \u003d new String[aGroups.length];\n \n         for (int i \u003d 0; i \u003c aGroups.length; i++) {\n             String pkg \u003d aGroups[i];\n \n             // if the pkg name is the wildcard, record the\n             // position for later reference\n             if (WILDCARD_GROUP_NAME.equals(pkg)) {\n                 mWildcardGroupIndex \u003d i;\n             }\n             else if (!pkg.endsWith(\".\")) {\n                 pkg \u003d pkg + \".\";\n             }\n \n             mGroups[i] \u003d pkg;\n         }\n     }\n\\ No newline at end of file\n"
    },
    "efccc132cea8ce1efad0e5318b8419cc603f8957": {
      "type": "Ybodychange",
      "commitMessage": "Enhanced ImportOrder check to support wildcard (\u0027*\u0027) groups. Thanks to Steve McKay for patch #2891032.\n",
      "commitDate": 1260596563000,
      "commitName": "efccc132cea8ce1efad0e5318b8419cc603f8957",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1237695418000,
      "commitNameOld": "216fcb79f9f5bbd05244364e926f261a90e697d1",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 265.06,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,19 @@\n     public void setGroups(String[] aGroups)\n     {\n         mGroups \u003d new String[aGroups.length];\n \n         for (int i \u003d 0; i \u003c aGroups.length; i++) {\n             String pkg \u003d aGroups[i];\n \n-            if (!pkg.endsWith(\".\")) {\n+            // if the pkg name is the wildcard, record the\n+            // position for later reference\n+            if (WILDCARD_GROUP_NAME.equals(pkg)) {\n+                mWildcardGroupIndex \u003d i;\n+            }\n+            else if (!pkg.endsWith(\".\")) {\n                 pkg \u003d pkg + \".\";\n             }\n \n             mGroups[i] \u003d pkg;\n         }\n     }\n\\ No newline at end of file\n"
    },
    "2a1705e70d334700734b3df3ebefea0be878127a": {
      "type": "Yintroduced",
      "commitMessage": "ImportOrder check from Bill Schneider (request 745548)docs/releasenotes.html\n",
      "commitDate": 1063737477000,
      "commitName": "2a1705e70d334700734b3df3ebefea0be878127a",
      "commitAuthor": "Oleg Sukhodolsky"
    }
  }
}