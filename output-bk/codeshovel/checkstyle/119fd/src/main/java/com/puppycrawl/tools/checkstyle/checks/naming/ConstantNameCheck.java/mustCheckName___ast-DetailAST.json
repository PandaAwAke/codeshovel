{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "ConstantNameCheck.java",
  "functionName": "mustCheckName",
  "functionId": "mustCheckName___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java",
  "functionStartLine": 80,
  "functionEndLine": 102,
  "changeHistory": [
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22",
    "ce196814d857a4244a80c51d5151cc35e90b6749",
    "4d2e6647f9e8385749c382bcab5e64965a943178",
    "2f4f40d7391668a9065fb4ae5df0cd5c5b32e05c",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "49a23751eb6bffdfba94d72454d7676c9f85adc5",
    "750b733bd124eaea34d4692a1bb8d0fd0fe90976",
    "373c90a1090537de5b8151c6088534a63744edb2",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "2bf724effc3c43a43fbe254dd81985f618be8eee",
    "35d1673788bbbac8263fdb69275dc6a63b095a24",
    "c2d3932843e70e4bb5df7161800aca248f9af778",
    "166157213b0889e2a9d95f46826bbd5eb42ab9e8",
    "6125beffc437f970eae276b4a6542265c6547784",
    "d80cbf61042a3901b2f61de7ad4494ff93ea0e3c",
    "2a8aba9a54d2112b142a1b9e0c4e762e780155c1",
    "eecd476fa8c6dba62f919a5ff1740d108848c867",
    "4bbe4acd319fa60dac09d28aaa9f7b18f18dee1f",
    "e44cd4ec43a25cac72924e04d7b4ca7fa9fa10ee"
  ],
  "changeHistoryShort": {
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22": "Ybodychange",
    "ce196814d857a4244a80c51d5151cc35e90b6749": "Ybodychange",
    "4d2e6647f9e8385749c382bcab5e64965a943178": "Ybodychange",
    "2f4f40d7391668a9065fb4ae5df0cd5c5b32e05c": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "49a23751eb6bffdfba94d72454d7676c9f85adc5": "Ybodychange",
    "750b733bd124eaea34d4692a1bb8d0fd0fe90976": "Ymultichange(Yparameterchange,Ybodychange)",
    "373c90a1090537de5b8151c6088534a63744edb2": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "2bf724effc3c43a43fbe254dd81985f618be8eee": "Ybodychange",
    "35d1673788bbbac8263fdb69275dc6a63b095a24": "Ybodychange",
    "c2d3932843e70e4bb5df7161800aca248f9af778": "Ybodychange",
    "166157213b0889e2a9d95f46826bbd5eb42ab9e8": "Ybodychange",
    "6125beffc437f970eae276b4a6542265c6547784": "Ybodychange",
    "d80cbf61042a3901b2f61de7ad4494ff93ea0e3c": "Yfilerename",
    "2a8aba9a54d2112b142a1b9e0c4e762e780155c1": "Ymultichange(Yrename,Yreturntypechange,Ymodifierchange,Ybodychange)",
    "eecd476fa8c6dba62f919a5ff1740d108848c867": "Ybodychange",
    "4bbe4acd319fa60dac09d28aaa9f7b18f18dee1f": "Ybodychange",
    "e44cd4ec43a25cac72924e04d7b4ca7fa9fa10ee": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5124: removed usage of branchContains for modifiers",
      "commitDate": 1508986494000,
      "commitName": "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22",
      "commitAuthor": "rnveach",
      "commitDateOld": 1485527514000,
      "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 271.52,
      "commitsBetweenForRepo": 1006,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     protected final boolean mustCheckName(DetailAST ast) {\n         boolean returnValue \u003d false;\n \n         final DetailAST modifiersAST \u003d\n             ast.findFirstToken(TokenTypes.MODIFIERS);\n-        final boolean isStatic \u003d modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n-        final boolean isFinal \u003d modifiersAST.branchContains(TokenTypes.FINAL);\n+        final boolean isStatic \u003d modifiersAST.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null;\n+        final boolean isFinal \u003d modifiersAST.findFirstToken(TokenTypes.FINAL) !\u003d null;\n \n         if (isStatic \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST)\n                 || ScopeUtils.isInAnnotationBlock(ast)\n                 || ScopeUtils.isInInterfaceOrAnnotationBlock(ast)\n                         \u0026\u0026 !ScopeUtils.isInCodeBlock(ast)) {\n             // Handle the serialVersionUID and serialPersistentFields constants\n             // which are used for Serialization. Cannot enforce rules on it. :-)\n             final DetailAST nameAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n             if (!\"serialVersionUID\".equals(nameAST.getText())\n                 \u0026\u0026 !\"serialPersistentFields\".equals(nameAST.getText())) {\n                 returnValue \u003d true;\n             }\n         }\n \n         return returnValue;\n     }\n\\ No newline at end of file\n"
    },
    "ce196814d857a4244a80c51d5151cc35e90b6749": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2080: Fix typos in code\n",
      "commitDate": 1445038509000,
      "commitName": "ce196814d857a4244a80c51d5151cc35e90b6749",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440705239000,
      "commitNameOld": "4d2e6647f9e8385749c382bcab5e64965a943178",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 50.15,
      "commitsBetweenForRepo": 465,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     protected final boolean mustCheckName(DetailAST ast) {\n-        boolean retVal \u003d false;\n+        boolean returnValue \u003d false;\n \n         final DetailAST modifiersAST \u003d\n             ast.findFirstToken(TokenTypes.MODIFIERS);\n         final boolean isStatic \u003d modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n         final boolean isFinal \u003d modifiersAST.branchContains(TokenTypes.FINAL);\n \n         if (isStatic  \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST)\n                 || ScopeUtils.isInAnnotationBlock(ast)\n                 || ScopeUtils.isInInterfaceOrAnnotationBlock(ast)\n                         \u0026\u0026 !ScopeUtils.isInCodeBlock(ast)) {\n             // Handle the serialVersionUID and serialPersistentFields constants\n             // which are used for Serialization. Cannot enforce rules on it. :-)\n             final DetailAST nameAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n             if (!\"serialVersionUID\".equals(nameAST.getText())\n                 \u0026\u0026 !\"serialPersistentFields\".equals(nameAST.getText())) {\n-                retVal \u003d true;\n+                returnValue \u003d true;\n             }\n         }\n \n-        return retVal;\n+        return returnValue;\n     }\n\\ No newline at end of file\n"
    },
    "4d2e6647f9e8385749c382bcab5e64965a943178": {
      "type": "Ybodychange",
      "commitMessage": "Rename boolean methods to start with question word. #1555\n\nFixes `BooleanMethodNameMustStartWithQuestion` inspection violations.\n\nDescription:\n\u003eReports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection.\n",
      "commitDate": 1440705239000,
      "commitName": "4d2e6647f9e8385749c382bcab5e64965a943178",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440677821000,
      "commitNameOld": "ed595de84fba2db507adaf01d04cb089a5e0bac5",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 0.32,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     protected final boolean mustCheckName(DetailAST ast) {\n         boolean retVal \u003d false;\n \n         final DetailAST modifiersAST \u003d\n             ast.findFirstToken(TokenTypes.MODIFIERS);\n         final boolean isStatic \u003d modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n         final boolean isFinal \u003d modifiersAST.branchContains(TokenTypes.FINAL);\n \n         if (isStatic  \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST)\n-                || ScopeUtils.inAnnotationBlock(ast)\n-                || ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n-                        \u0026\u0026 !ScopeUtils.inCodeBlock(ast)) {\n+                || ScopeUtils.isInAnnotationBlock(ast)\n+                || ScopeUtils.isInInterfaceOrAnnotationBlock(ast)\n+                        \u0026\u0026 !ScopeUtils.isInCodeBlock(ast)) {\n             // Handle the serialVersionUID and serialPersistentFields constants\n             // which are used for Serialization. Cannot enforce rules on it. :-)\n             final DetailAST nameAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n             if (!\"serialVersionUID\".equals(nameAST.getText())\n                 \u0026\u0026 !\"serialPersistentFields\".equals(nameAST.getText())) {\n                 retVal \u003d true;\n             }\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n"
    },
    "2f4f40d7391668a9065fb4ae5df0cd5c5b32e05c": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1288: \u0027ConstantNameCheck\u0027 refactored, UT coverage improved\n",
      "commitDate": 1436322842000,
      "commitName": "2f4f40d7391668a9065fb4ae5df0cd5c5b32e05c",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": 1431863229000,
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 51.62,
      "commitsBetweenForRepo": 285,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,23 @@\n     protected final boolean mustCheckName(DetailAST ast) {\n         boolean retVal \u003d false;\n \n         final DetailAST modifiersAST \u003d\n             ast.findFirstToken(TokenTypes.MODIFIERS);\n-        final boolean isStatic \u003d modifiersAST !\u003d null\n-            \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n-        final boolean isFinal \u003d modifiersAST !\u003d null\n-            \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n+        final boolean isStatic \u003d modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n+        final boolean isFinal \u003d modifiersAST.branchContains(TokenTypes.FINAL);\n \n         if (isStatic  \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST)\n                 || ScopeUtils.inAnnotationBlock(ast)\n                 || ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n                         \u0026\u0026 !ScopeUtils.inCodeBlock(ast)) {\n             // Handle the serialVersionUID and serialPersistentFields constants\n             // which are used for Serialization. Cannot enforce rules on it. :-)\n             final DetailAST nameAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n-            if (nameAST !\u003d null\n-                \u0026\u0026 !\"serialVersionUID\".equals(nameAST.getText())\n+            if (!\"serialVersionUID\".equals(nameAST.getText())\n                 \u0026\u0026 !\"serialPersistentFields\".equals(nameAST.getText())) {\n                 retVal \u003d true;\n             }\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n"
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": 1426023398000,
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1425968782000,
      "commitNameOld": "49a23751eb6bffdfba94d72454d7676c9f85adc5",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.63,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     protected final boolean mustCheckName(DetailAST ast)\n     {\n         boolean retVal \u003d false;\n \n         final DetailAST modifiersAST \u003d\n             ast.findFirstToken(TokenTypes.MODIFIERS);\n-        final boolean isStatic \u003d (modifiersAST !\u003d null)\n+        final boolean isStatic \u003d modifiersAST !\u003d null\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n-        final boolean isFinal \u003d (modifiersAST !\u003d null)\n+        final boolean isFinal \u003d modifiersAST !\u003d null\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n \n-        if ((isStatic  \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST))\n+        if (isStatic  \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST)\n                 || ScopeUtils.inAnnotationBlock(ast)\n-                || (ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n-                        \u0026\u0026 !ScopeUtils.inCodeBlock(ast)))\n+                || ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n+                        \u0026\u0026 !ScopeUtils.inCodeBlock(ast))\n         {\n             // Handle the serialVersionUID and serialPersistentFields constants\n             // which are used for Serialization. Cannot enforce rules on it. :-)\n             final DetailAST nameAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n-            if ((nameAST !\u003d null)\n-                \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText()))\n-                \u0026\u0026 !(\"serialPersistentFields\".equals(nameAST.getText())))\n+            if (nameAST !\u003d null\n+                \u0026\u0026 !\"serialVersionUID\".equals(nameAST.getText())\n+                \u0026\u0026 !\"serialPersistentFields\".equals(nameAST.getText()))\n             {\n                 retVal \u003d true;\n             }\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n"
    },
    "49a23751eb6bffdfba94d72454d7676c9f85adc5": {
      "type": "Ybodychange",
      "commitMessage": "Remove obsolete double spaces\n",
      "commitDate": 1425968782000,
      "commitName": "49a23751eb6bffdfba94d72454d7676c9f85adc5",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1425602876000,
      "commitNameOld": "f7828693395f71a6ae99710f3fab44cb8a66ea51",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 4.24,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     protected final boolean mustCheckName(DetailAST ast)\n     {\n         boolean retVal \u003d false;\n \n         final DetailAST modifiersAST \u003d\n             ast.findFirstToken(TokenTypes.MODIFIERS);\n         final boolean isStatic \u003d (modifiersAST !\u003d null)\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n         final boolean isFinal \u003d (modifiersAST !\u003d null)\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n \n         if ((isStatic  \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST))\n                 || ScopeUtils.inAnnotationBlock(ast)\n                 || (ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n                         \u0026\u0026 !ScopeUtils.inCodeBlock(ast)))\n         {\n-            // Handle the serialVersionUID and serialPersistentFields  constants\n+            // Handle the serialVersionUID and serialPersistentFields constants\n             // which are used for Serialization. Cannot enforce rules on it. :-)\n             final DetailAST nameAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n             if ((nameAST !\u003d null)\n                 \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText()))\n                 \u0026\u0026 !(\"serialPersistentFields\".equals(nameAST.getText())))\n             {\n                 retVal \u003d true;\n             }\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n"
    },
    "750b733bd124eaea34d4692a1bb8d0fd0fe90976": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, naming, #512\n",
      "commitDate": 1421677299000,
      "commitName": "750b733bd124eaea34d4692a1bb8d0fd0fe90976",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "373c90a1090537de5b8151c6088534a63744edb2": {
      "type": "Ybodychange",
      "commitMessage": "#282 fixed. Since Java 8 we can have methods body in interfaces.\n",
      "commitDate": 1412964919000,
      "commitName": "373c90a1090537de5b8151c6088534a63744edb2",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": 1393953491000,
      "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthorOld": "Ivan Sopov",
      "daysBetweenCommits": 220.04,
      "commitsBetweenForRepo": 164,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,29 @@\n     protected final boolean mustCheckName(DetailAST aAST)\n     {\n         boolean retVal \u003d false;\n \n         final DetailAST modifiersAST \u003d\n             aAST.findFirstToken(TokenTypes.MODIFIERS);\n         final boolean isStatic \u003d (modifiersAST !\u003d null)\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n         final boolean isFinal \u003d (modifiersAST !\u003d null)\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n \n         if ((isStatic  \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST))\n-            || ScopeUtils.inInterfaceOrAnnotationBlock(aAST))\n+                || ScopeUtils.inAnnotationBlock(aAST)\n+                || (ScopeUtils.inInterfaceOrAnnotationBlock(aAST)\n+                        \u0026\u0026 !ScopeUtils.inCodeBlock(aAST)))\n         {\n             // Handle the serialVersionUID and serialPersistentFields  constants\n             // which are used for Serialization. Cannot enforce rules on it. :-)\n             final DetailAST nameAST \u003d aAST.findFirstToken(TokenTypes.IDENT);\n             if ((nameAST !\u003d null)\n                 \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText()))\n                 \u0026\u0026 !(\"serialPersistentFields\".equals(nameAST.getText())))\n             {\n                 retVal \u003d true;\n             }\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n"
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "2bf724effc3c43a43fbe254dd81985f618be8eee": {
      "type": "Ybodychange",
      "commitMessage": "Enhanced the naming checks ConstantName, MemberName, MethodName and StaticVariableName to utilise the access control tuning features of AbstractAccessControlNameCheck. Thanks to Steve McKay for patch #2893581.\n",
      "commitDate": 1260591023000,
      "commitName": "2bf724effc3c43a43fbe254dd81985f618be8eee",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1237695418000,
      "commitNameOld": "216fcb79f9f5bbd05244364e926f261a90e697d1",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 265.0,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n     protected final boolean mustCheckName(DetailAST aAST)\n     {\n         boolean retVal \u003d false;\n \n         final DetailAST modifiersAST \u003d\n             aAST.findFirstToken(TokenTypes.MODIFIERS);\n         final boolean isStatic \u003d (modifiersAST !\u003d null)\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n         final boolean isFinal \u003d (modifiersAST !\u003d null)\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n \n-        if ((isStatic  \u0026\u0026 isFinal)\n+        if ((isStatic  \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST))\n             || ScopeUtils.inInterfaceOrAnnotationBlock(aAST))\n         {\n             // Handle the serialVersionUID and serialPersistentFields  constants\n             // which are used for Serialization. Cannot enforce rules on it. :-)\n             final DetailAST nameAST \u003d aAST.findFirstToken(TokenTypes.IDENT);\n             if ((nameAST !\u003d null)\n                 \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText()))\n                 \u0026\u0026 !(\"serialPersistentFields\".equals(nameAST.getText())))\n             {\n                 retVal \u003d true;\n             }\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n"
    },
    "35d1673788bbbac8263fdb69275dc6a63b095a24": {
      "type": "Ybodychange",
      "commitMessage": "Making local variables final where possible.\n",
      "commitDate": 1152243856000,
      "commitName": "35d1673788bbbac8263fdb69275dc6a63b095a24",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1152242806000,
      "commitNameOld": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,27 @@\n     protected final boolean mustCheckName(DetailAST aAST)\n     {\n         boolean retVal \u003d false;\n \n-        DetailAST modifiersAST \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n+        final DetailAST modifiersAST \u003d\n+            aAST.findFirstToken(TokenTypes.MODIFIERS);\n         final boolean isStatic \u003d (modifiersAST !\u003d null)\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n         final boolean isFinal \u003d (modifiersAST !\u003d null)\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n \n         if ((isStatic  \u0026\u0026 isFinal)\n             || ScopeUtils.inInterfaceOrAnnotationBlock(aAST))\n         {\n             // Handle the serialVersionUID and serialPersistentFields  constants\n             // which are used for Serialization. Cannot enforce rules on it. :-)\n             final DetailAST nameAST \u003d aAST.findFirstToken(TokenTypes.IDENT);\n             if ((nameAST !\u003d null)\n                 \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText()))\n                 \u0026\u0026 !(\"serialPersistentFields\".equals(nameAST.getText())))\n             {\n                 retVal \u003d true;\n             }\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n"
    },
    "c2d3932843e70e4bb5df7161800aca248f9af778": {
      "type": "Ybodychange",
      "commitMessage": "Clean up the use of ()\u0027s\n",
      "commitDate": 1152242806000,
      "commitName": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1130786628000,
      "commitNameOld": "1aee9d55cc5bd8cca011e17369f6e370efcc85bb",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 248.34,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n     protected final boolean mustCheckName(DetailAST aAST)\n     {\n         boolean retVal \u003d false;\n \n         DetailAST modifiersAST \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n-        final boolean isStatic \u003d modifiersAST !\u003d null\n+        final boolean isStatic \u003d (modifiersAST !\u003d null)\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n-        final boolean isFinal \u003d modifiersAST !\u003d null\n+        final boolean isFinal \u003d (modifiersAST !\u003d null)\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n \n         if ((isStatic  \u0026\u0026 isFinal)\n             || ScopeUtils.inInterfaceOrAnnotationBlock(aAST))\n         {\n             // Handle the serialVersionUID and serialPersistentFields  constants\n             // which are used for Serialization. Cannot enforce rules on it. :-)\n             final DetailAST nameAST \u003d aAST.findFirstToken(TokenTypes.IDENT);\n             if ((nameAST !\u003d null)\n                 \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText()))\n                 \u0026\u0026 !(\"serialPersistentFields\".equals(nameAST.getText())))\n             {\n                 retVal \u003d true;\n             }\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n"
    },
    "166157213b0889e2a9d95f46826bbd5eb42ab9e8": {
      "type": "Ybodychange",
      "commitMessage": "Now ConstantName check will skip serialPersistentFields (bugid 1097285)\n",
      "commitDate": 1105701690000,
      "commitName": "166157213b0889e2a9d95f46826bbd5eb42ab9e8",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1105267857000,
      "commitNameOld": "0d887cde58e54d920644ee543dab346b93e8aae9",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 5.02,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n     protected final boolean mustCheckName(DetailAST aAST)\n     {\n         boolean retVal \u003d false;\n \n         DetailAST modifiersAST \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         final boolean isStatic \u003d modifiersAST !\u003d null\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n         final boolean isFinal \u003d modifiersAST !\u003d null\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n \n         if ((isStatic  \u0026\u0026 isFinal)\n             || ScopeUtils.inInterfaceOrAnnotationBlock(aAST))\n         {\n-            // Handle the serialVersionUID constant which is used for\n-            // Serialization. Cannot enforce rules on it. :-)\n+            // Handle the serialVersionUID and serialPersistentFields  constants\n+            // which are used for Serialization. Cannot enforce rules on it. :-)\n             final DetailAST nameAST \u003d aAST.findFirstToken(TokenTypes.IDENT);\n             if ((nameAST !\u003d null)\n-                \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText())))\n+                \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText()))\n+                \u0026\u0026 !(\"serialPersistentFields\".equals(nameAST.getText())))\n             {\n                 retVal \u003d true;\n             }\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n"
    },
    "6125beffc437f970eae276b4a6542265c6547784": {
      "type": "Ybodychange",
      "commitMessage": "Initial Java 1.5 support\n",
      "commitDate": 1096311350000,
      "commitName": "6125beffc437f970eae276b4a6542265c6547784",
      "commitAuthor": "Michael Studman",
      "commitDateOld": 1074114639000,
      "commitNameOld": "5670252b46f4915b276e647fa000361915eb4ff4",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 256.91,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,25 @@\n     protected final boolean mustCheckName(DetailAST aAST)\n     {\n         boolean retVal \u003d false;\n \n         DetailAST modifiersAST \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         final boolean isStatic \u003d modifiersAST !\u003d null\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n         final boolean isFinal \u003d modifiersAST !\u003d null\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n \n-        if ((isStatic  \u0026\u0026 isFinal) || ScopeUtils.inInterfaceBlock(aAST)) {\n+        if ((isStatic  \u0026\u0026 isFinal)\n+            || ScopeUtils.inInterfaceOrAnnotationBlock(aAST))\n+        {\n             // Handle the serialVersionUID constant which is used for\n             // Serialization. Cannot enforce rules on it. :-)\n             final DetailAST nameAST \u003d aAST.findFirstToken(TokenTypes.IDENT);\n             if ((nameAST !\u003d null)\n                 \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText())))\n             {\n                 retVal \u003d true;\n             }\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n"
    },
    "d80cbf61042a3901b2f61de7ad4494ff93ea0e3c": {
      "type": "Yfilerename",
      "commitMessage": "Moved the Naming checks to a sub-package. I had some\nspare time between meetings today.\n",
      "commitDate": 1054710881000,
      "commitName": "d80cbf61042a3901b2f61de7ad4494ff93ea0e3c",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1054700509000,
      "commitNameOld": "03ac7a087862456e949f377e2153c47d310ca61e",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "2a8aba9a54d2112b142a1b9e0c4e762e780155c1": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ymodifierchange,Ybodychange)",
      "commitMessage": "Avoid duplicate matching and logging code by introding an abstract name check class.\npatch contributed by Rick Giles\n",
      "commitDate": 1035872446000,
      "commitName": "2a8aba9a54d2112b142a1b9e0c4e762e780155c1",
      "commitAuthor": "Lars Kühne",
      "subchanges": [
        "Yrename",
        "Yreturntypechange",
        "Ymodifierchange",
        "Ybodychange"
      ]
    },
    "eecd476fa8c6dba62f919a5ff1740d108848c867": {
      "type": "Ybodychange",
      "commitMessage": "moved static AST helpers in Util to DetailAST\n",
      "commitDate": 1035797514000,
      "commitName": "eecd476fa8c6dba62f919a5ff1740d108848c867",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": 1035759138000,
      "commitNameOld": "4bbe4acd319fa60dac09d28aaa9f7b18f18dee1f",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.44,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,29 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // TODO: Need to consider the case of being in an interface! In that\n         // case, does not matter if \"static\" and \"final\" keywords are there.\n         \n         //constant?\n         final DetailAST modifiers \u003d\n-                    Utils.findFirstToken(aAST.getFirstChild(),\n-                                         TokenTypes.MODIFIERS);\n+                    aAST.findFirstToken(TokenTypes.MODIFIERS);\n         if ((modifiers !\u003d null)\n             \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_STATIC)\n             \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n         {\n             //name check\n             final DetailAST name \u003d\n-                Utils.findFirstToken(aAST.getFirstChild(), TokenTypes.IDENT);\n+                aAST.findFirstToken(TokenTypes.IDENT);\n \n             // Handle the serialVersionUID constant which is used for\n             // Serialization. Cannot enforce rules on it. :-)\n             if (!\"serialVersionUID\".equals(name.getText())\n                 \u0026\u0026 !getRegexp().match(name.getText()))\n             {\n                 log(name.getLineNo(),\n                     name.getColumnNo(),\n                     \"name.invalidPattern\",\n                     name.getText(),\n                     getFormat());\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "4bbe4acd319fa60dac09d28aaa9f7b18f18dee1f": {
      "type": "Ybodychange",
      "commitMessage": "Removed old constant name check\n",
      "commitDate": 1035759138000,
      "commitName": "4bbe4acd319fa60dac09d28aaa9f7b18f18dee1f",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1035755890000,
      "commitNameOld": "e44cd4ec43a25cac72924e04d7b4ca7fa9fa10ee",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,30 @@\n     public void visitToken(DetailAST aAST)\n     {\n-        //precondition\n-        if (aAST.getType() !\u003d TokenTypes.VARIABLE_DEF) {\n-            return;\n-        }\n-\n+        // TODO: Need to consider the case of being in an interface! In that\n+        // case, does not matter if \"static\" and \"final\" keywords are there.\n+        \n         //constant?\n         final DetailAST modifiers \u003d\n                     Utils.findFirstToken(aAST.getFirstChild(),\n                                          TokenTypes.MODIFIERS);\n-        if (modifiers \u003d\u003d null\n-                || !modifiers.branchContains(TokenTypes.LITERAL_STATIC)\n-                || !modifiers.branchContains(TokenTypes.FINAL)) {\n-            return;\n-        }      \n-        \n-        //name check\n-        final DetailAST name \u003d Utils.findFirstToken(aAST.getFirstChild(),\n-                                              TokenTypes.IDENT);\n-        if (name \u003d\u003d null) {\n-            return;\n-        }\n-        // Handle the serialVersionUID constant which is used for\n-        // Serialization. Cannot enforce rules on it. :-)\n-        if (\"serialVersionUID\".equals(name.getText())) {\n-            return;\n-        }\n-        \n-        if (!getRegexp().match(name.getText())) {\n-            log(name.getLineNo(),\n-                name.getColumnNo(),\n-                \"name.invalidPattern\",\n-                name.getText(),\n-                getFormat());\n+        if ((modifiers !\u003d null)\n+            \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_STATIC)\n+            \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n+        {\n+            //name check\n+            final DetailAST name \u003d\n+                Utils.findFirstToken(aAST.getFirstChild(), TokenTypes.IDENT);\n+\n+            // Handle the serialVersionUID constant which is used for\n+            // Serialization. Cannot enforce rules on it. :-)\n+            if (!\"serialVersionUID\".equals(name.getText())\n+                \u0026\u0026 !getRegexp().match(name.getText()))\n+            {\n+                log(name.getLineNo(),\n+                    name.getColumnNo(),\n+                    \"name.invalidPattern\",\n+                    name.getText(),\n+                    getFormat());\n+            }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "e44cd4ec43a25cac72924e04d7b4ca7fa9fa10ee": {
      "type": "Yintroduced",
      "commitMessage": "Added Constant Name Check\n",
      "commitDate": 1035755890000,
      "commitName": "e44cd4ec43a25cac72924e04d7b4ca7fa9fa10ee",
      "commitAuthor": "Oliver Burn"
    }
  }
}