{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "JavadocTypeCheck.java",
  "functionName": "getJavadocTags",
  "functionId": "getJavadocTags___textBlock-TextBlock",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
  "functionStartLine": 252,
  "functionEndLine": 262,
  "changeHistory": [
    "77733a452387aa2ee99fdc9a737633566cc7af3d",
    "ce196814d857a4244a80c51d5151cc35e90b6749",
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc",
    "89a51ba032fd9126651fa9efad31baf10c006ddf",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "d8286130e83dc672d30cd00eddbf6b5f77112521",
    "7d097b6fa682f8dcfedd95da2db8fed980c51705",
    "a2c4566348d41c5eed923c33670cb48bf30c951b",
    "7552a0b72e07c9a0070e84789b5abe6d293de6e0",
    "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
    "c18071b7561b99767e871be9d4d7711eb15b76f1",
    "35d1673788bbbac8263fdb69275dc6a63b095a24",
    "cbe38280adb03f058f89e8ea81bc0e3be2fc5b94",
    "e27489c7721909245ea5055eac3b9c7c659081f6",
    "e577b7ebb8fdc66cc744710b543f04ce84d5c508",
    "9ce0ceb04ae90185f95643fb4484e525bcb0d3df"
  ],
  "changeHistoryShort": {
    "77733a452387aa2ee99fdc9a737633566cc7af3d": "Ybodychange",
    "ce196814d857a4244a80c51d5151cc35e90b6749": "Ymultichange(Yparameterchange,Ybodychange)",
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc": "Ybodychange",
    "89a51ba032fd9126651fa9efad31baf10c006ddf": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "d8286130e83dc672d30cd00eddbf6b5f77112521": "Ybodychange",
    "7d097b6fa682f8dcfedd95da2db8fed980c51705": "Ybodychange",
    "a2c4566348d41c5eed923c33670cb48bf30c951b": "Ybodychange",
    "7552a0b72e07c9a0070e84789b5abe6d293de6e0": "Ybodychange",
    "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d": "Ymultichange(Yreturntypechange,Ybodychange)",
    "c18071b7561b99767e871be9d4d7711eb15b76f1": "Ymultichange(Yreturntypechange,Ybodychange)",
    "35d1673788bbbac8263fdb69275dc6a63b095a24": "Ybodychange",
    "cbe38280adb03f058f89e8ea81bc0e3be2fc5b94": "Ybodychange",
    "e27489c7721909245ea5055eac3b9c7c659081f6": "Ybodychange",
    "e577b7ebb8fdc66cc744710b543f04ce84d5c508": "Ybodychange",
    "9ce0ceb04ae90185f95643fb4484e525bcb0d3df": "Yintroduced"
  },
  "changeHistoryDetails": {
    "77733a452387aa2ee99fdc9a737633566cc7af3d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2836: renamed error message fields to match standard naming",
      "commitDate": 1453387259000,
      "commitName": "77733a452387aa2ee99fdc9a737633566cc7af3d",
      "commitAuthor": "rnveach",
      "commitDateOld": 1451953543000,
      "commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 16.59,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,11 @@\n     private List\u003cJavadocTag\u003e getJavadocTags(TextBlock textBlock) {\n         final JavadocTags tags \u003d JavadocUtils.getJavadocTags(textBlock,\n             JavadocUtils.JavadocTagType.BLOCK);\n         if (!allowUnknownTags) {\n             for (final InvalidJavadocTag tag : tags.getInvalidTags()) {\n-                log(tag.getLine(), tag.getCol(), UNKNOWN_TAG,\n+                log(tag.getLine(), tag.getCol(), MSG_UNKNOWN_TAG,\n                     tag.getName());\n             }\n         }\n         return tags.getValidTags();\n     }\n\\ No newline at end of file\n"
    },
    "ce196814d857a4244a80c51d5151cc35e90b6749": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Issue #2080: Fix typos in code\n",
      "commitDate": 1445038509000,
      "commitName": "ce196814d857a4244a80c51d5151cc35e90b6749",
      "commitAuthor": "Michal Kordas",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, javadoc package, issue #537\n",
      "commitDate": 1424437366000,
      "commitName": "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc",
      "commitAuthor": "alexkravin",
      "commitDateOld": 1424294072000,
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,12 @@\n     private List\u003cJavadocTag\u003e getJavadocTags(TextBlock cmt)\n     {\n         final JavadocTags tags \u003d JavadocUtils.getJavadocTags(cmt,\n             JavadocUtils.JavadocTagType.BLOCK);\n         if (!allowUnknownTags) {\n             for (final InvalidJavadocTag tag : tags.getInvalidTags()) {\n-                log(tag.getLine(), tag.getCol(), \"javadoc.unknownTag\",\n+                log(tag.getLine(), tag.getCol(), UNKNOWN_TAG,\n                     tag.getName());\n             }\n         }\n         return tags.getValidTags();\n     }\n\\ No newline at end of file\n"
    },
    "89a51ba032fd9126651fa9efad31baf10c006ddf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, javadoc, #512\n",
      "commitDate": 1421677262000,
      "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "d8286130e83dc672d30cd00eddbf6b5f77112521": {
      "type": "Ybodychange",
      "commitMessage": "Make the code \"checkstyle compliant\"\n",
      "commitDate": 1310435277000,
      "commitName": "d8286130e83dc672d30cd00eddbf6b5f77112521",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1310432296000,
      "commitNameOld": "7d097b6fa682f8dcfedd95da2db8fed980c51705",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,12 @@\n     private List\u003cJavadocTag\u003e getJavadocTags(TextBlock aCmt)\n     {\n-        JavadocTags tags \u003d\n-            JavadocUtils.getJavadocTags(aCmt, JavadocTagType.BLOCK);\n+        final JavadocTags tags \u003d JavadocUtils.getJavadocTags(aCmt,\n+            JavadocUtils.JavadocTagType.BLOCK);\n         if (!mAllowUnknownTags) {\n-            for (InvalidJavadocTag tag : tags.invalidTags) {\n-                log(tag.line, tag.col, \"javadoc.unknownTag\", tag.name);\n+            for (final InvalidJavadocTag tag : tags.getInvalidTags()) {\n+                log(tag.getLine(), tag.getCol(), \"javadoc.unknownTag\",\n+                    tag.getName());\n             }\n         }\n-        return tags.validTags;\n+        return tags.getValidTags();\n     }\n\\ No newline at end of file\n"
    },
    "7d097b6fa682f8dcfedd95da2db8fed980c51705": {
      "type": "Ybodychange",
      "commitMessage": "Initial import of patch #3267984.\nStill work to be done\n",
      "commitDate": 1310432296000,
      "commitName": "7d097b6fa682f8dcfedd95da2db8fed980c51705",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1285817783000,
      "commitNameOld": "6f46bd4e83204417edf9605f97098bb9d34da728",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 284.89,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,11 @@\n     private List\u003cJavadocTag\u003e getJavadocTags(TextBlock aCmt)\n     {\n-        final String[] text \u003d aCmt.getText();\n-        final List\u003cJavadocTag\u003e tags \u003d Lists.newArrayList();\n-        Pattern tagPattern \u003d Utils.getPattern(\"/\\\\*{2,}\\\\s*@(\\\\p{Alpha}+)\\\\s\");\n-        for (int i \u003d 0; i \u003c text.length; i++) {\n-            final String s \u003d text[i];\n-            final Matcher tagMatcher \u003d tagPattern.matcher(s);\n-            if (tagMatcher.find()) {\n-                final String tagName \u003d tagMatcher.group(1);\n-\n-                String content \u003d s.substring(tagMatcher.end(1));\n-                if (content.endsWith(\"*/\")) {\n-                    content \u003d content.substring(0, content.length() - 2);\n-                }\n-                int col \u003d tagMatcher.start(1) - 1;\n-                if (i \u003d\u003d 0) {\n-                    col +\u003d aCmt.getStartColNo();\n-                }\n-\n-                if (JavadocTagInfo.isValidName(tagName)) {\n-                    tags.add(new JavadocTag(aCmt.getStartLineNo() + i, col,\n-                            tagName, content.trim()));\n-                }\n-                else if (!mAllowUnknownTags) {\n-                    log(aCmt.getStartLineNo() + i, col,\n-                            \"javadoc.unknownTag\", tagName);\n-                }\n+        JavadocTags tags \u003d\n+            JavadocUtils.getJavadocTags(aCmt, JavadocTagType.BLOCK);\n+        if (!mAllowUnknownTags) {\n+            for (InvalidJavadocTag tag : tags.invalidTags) {\n+                log(tag.line, tag.col, \"javadoc.unknownTag\", tag.name);\n             }\n-            tagPattern \u003d Utils.getPattern(\"^\\\\s*\\\\**\\\\s*@(\\\\p{Alpha}+)\\\\s\");\n         }\n-        return tags;\n+        return tags.validTags;\n     }\n\\ No newline at end of file\n"
    },
    "a2c4566348d41c5eed923c33670cb48bf30c951b": {
      "type": "Ybodychange",
      "commitMessage": "Enhanced JavadocType check to handle and report on unknown\nJavadoc tags. The property allowUnknownTags can be set to\nignore errors. (bug #2882261)\n",
      "commitDate": 1266062273000,
      "commitName": "a2c4566348d41c5eed923c33670cb48bf30c951b",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1266029835000,
      "commitNameOld": "523080bbf2be11354b94b851ac85d06e7e8a2c14",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.38,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,33 @@\n     private List\u003cJavadocTag\u003e getJavadocTags(TextBlock aCmt)\n     {\n         final String[] text \u003d aCmt.getText();\n         final List\u003cJavadocTag\u003e tags \u003d Lists.newArrayList();\n         Pattern tagPattern \u003d Utils.getPattern(\"/\\\\*{2,}\\\\s*@(\\\\p{Alpha}+)\\\\s\");\n         for (int i \u003d 0; i \u003c text.length; i++) {\n             final String s \u003d text[i];\n             final Matcher tagMatcher \u003d tagPattern.matcher(s);\n             if (tagMatcher.find()) {\n                 final String tagName \u003d tagMatcher.group(1);\n+\n                 String content \u003d s.substring(tagMatcher.end(1));\n                 if (content.endsWith(\"*/\")) {\n                     content \u003d content.substring(0, content.length() - 2);\n                 }\n                 int col \u003d tagMatcher.start(1) - 1;\n                 if (i \u003d\u003d 0) {\n                     col +\u003d aCmt.getStartColNo();\n                 }\n-                tags.add(new JavadocTag(aCmt.getStartLineNo() + i, col,\n-                                        tagName, content.trim()));\n+\n+                if (JavadocTagInfo.isValidName(tagName)) {\n+                    tags.add(new JavadocTag(aCmt.getStartLineNo() + i, col,\n+                            tagName, content.trim()));\n+                }\n+                else if (!mAllowUnknownTags) {\n+                    log(aCmt.getStartLineNo() + i, col,\n+                            \"javadoc.unknownTag\", tagName);\n+                }\n             }\n             tagPattern \u003d Utils.getPattern(\"^\\\\s*\\\\**\\\\s*@(\\\\p{Alpha}+)\\\\s\");\n         }\n         return tags;\n     }\n\\ No newline at end of file\n"
    },
    "7552a0b72e07c9a0070e84789b5abe6d293de6e0": {
      "type": "Ybodychange",
      "commitMessage": "Drinking the \"Google Collections\" Kool-Aid.\n\nI like the reduced duplication.\n",
      "commitDate": 1208867287000,
      "commitName": "7552a0b72e07c9a0070e84789b5abe6d293de6e0",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1207482515000,
      "commitNameOld": "79404974eff1458f4243f8acd6a08b6a8b869342",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 16.03,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n     private List\u003cJavadocTag\u003e getJavadocTags(TextBlock aCmt)\n     {\n         final String[] text \u003d aCmt.getText();\n-        final List\u003cJavadocTag\u003e tags \u003d new ArrayList\u003cJavadocTag\u003e();\n+        final List\u003cJavadocTag\u003e tags \u003d Lists.newArrayList();\n         Pattern tagPattern \u003d Utils.getPattern(\"/\\\\*{2,}\\\\s*@(\\\\p{Alpha}+)\\\\s\");\n         for (int i \u003d 0; i \u003c text.length; i++) {\n             final String s \u003d text[i];\n             final Matcher tagMatcher \u003d tagPattern.matcher(s);\n             if (tagMatcher.find()) {\n                 final String tagName \u003d tagMatcher.group(1);\n                 String content \u003d s.substring(tagMatcher.end(1));\n                 if (content.endsWith(\"*/\")) {\n                     content \u003d content.substring(0, content.length() - 2);\n                 }\n                 int col \u003d tagMatcher.start(1) - 1;\n                 if (i \u003d\u003d 0) {\n                     col +\u003d aCmt.getStartColNo();\n                 }\n                 tags.add(new JavadocTag(aCmt.getStartLineNo() + i, col,\n                                         tagName, content.trim()));\n             }\n             tagPattern \u003d Utils.getPattern(\"^\\\\s*\\\\**\\\\s*@(\\\\p{Alpha}+)\\\\s\");\n         }\n         return tags;\n     }\n\\ No newline at end of file\n"
    },
    "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "Start of adding generics.\n",
      "commitDate": 1197694270000,
      "commitName": "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
      "commitAuthor": "Oliver Burn",
      "subchanges": [
        "Yreturntypechange",
        "Ybodychange"
      ]
    },
    "c18071b7561b99767e871be9d4d7711eb15b76f1": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "repeat changes made in CVS.\n",
      "commitDate": 1197588660000,
      "commitName": "c18071b7561b99767e871be9d4d7711eb15b76f1",
      "commitAuthor": "Oliver Burn",
      "subchanges": [
        "Yreturntypechange",
        "Ybodychange"
      ]
    },
    "35d1673788bbbac8263fdb69275dc6a63b095a24": {
      "type": "Ybodychange",
      "commitMessage": "Making local variables final where possible.\n",
      "commitDate": 1152243856000,
      "commitName": "35d1673788bbbac8263fdb69275dc6a63b095a24",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1152242806000,
      "commitNameOld": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n     private Vector getJavadocTags(TextBlock aCmt)\n     {\n         final String[] text \u003d aCmt.getText();\n-        Vector tags \u003d new Vector();\n+        final Vector tags \u003d new Vector();\n         Pattern tagPattern \u003d Utils.getPattern(\"/\\\\*{2,}\\\\s*@(\\\\p{Alpha}+)\\\\s\");\n         for (int i \u003d 0; i \u003c text.length; i++) {\n             final String s \u003d text[i];\n-            Matcher tagMatcher \u003d tagPattern.matcher(s);\n+            final Matcher tagMatcher \u003d tagPattern.matcher(s);\n             if (tagMatcher.find()) {\n                 final String tagName \u003d tagMatcher.group(1);\n                 String content \u003d s.substring(tagMatcher.end(1));\n                 if (content.endsWith(\"*/\")) {\n                     content \u003d content.substring(0, content.length() - 2);\n                 }\n                 int col \u003d tagMatcher.start(1) - 1;\n                 if (i \u003d\u003d 0) {\n                     col +\u003d aCmt.getStartColNo();\n                 }\n                 tags.add(new JavadocTag(aCmt.getStartLineNo() + i, col,\n                                         tagName, content.trim()));\n             }\n             tagPattern \u003d Utils.getPattern(\"^\\\\s*\\\\**\\\\s*@(\\\\p{Alpha}+)\\\\s\");\n         }\n         return tags;\n     }\n\\ No newline at end of file\n"
    },
    "cbe38280adb03f058f89e8ea81bc0e3be2fc5b94": {
      "type": "Ybodychange",
      "commitMessage": "Fixed 1249707: AbstractTypeAwareCheck doesn\u0027t work with types from typeparm\n\nSome pretty big refactoring for typeaware checks performed.\nAlso added handling for type params.  Current handling algorithm\nhas some preconditions and restriction, but it works for most cases\n(not sure I\u0027ve covered all situation when type param will have name\nof real exception, but I do not think it is critical for now :)\n\nAlso, I\u0027ve added column number for JavadocTag (mainly to be able use\nClassInfo for it).  So, JavadocTypeCheck also affected.\n\nAnd I\u0027ve added new logger for TreeWalker (if we have loggers we should\nuse them :)\n",
      "commitDate": 1123248811000,
      "commitName": "cbe38280adb03f058f89e8ea81bc0e3be2fc5b94",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1118137724000,
      "commitNameOld": "94d7b67c30f2119815f106b822089adacd2fd4d1",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 59.16,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,25 @@\n     private Vector getJavadocTags(TextBlock aCmt)\n     {\n         final String[] text \u003d aCmt.getText();\n         Vector tags \u003d new Vector();\n         Pattern tagPattern \u003d Utils.getPattern(\"/\\\\*{2,}\\\\s*@(\\\\p{Alpha}+)\\\\s\");\n         for (int i \u003d 0; i \u003c text.length; i++) {\n             final String s \u003d text[i];\n             Matcher tagMatcher \u003d tagPattern.matcher(s);\n             if (tagMatcher.find()) {\n                 final String tagName \u003d tagMatcher.group(1);\n                 String content \u003d s.substring(tagMatcher.end(1));\n                 if (content.endsWith(\"*/\")) {\n                     content \u003d content.substring(0, content.length() - 2);\n                 }\n-                tags.add(new JavadocTag(aCmt.getStartLineNo() + i,\n-                                        tagName,\n-                                        content.trim()));\n+                int col \u003d tagMatcher.start(1) - 1;\n+                if (i \u003d\u003d 0) {\n+                    col +\u003d aCmt.getStartColNo();\n+                }\n+                tags.add(new JavadocTag(aCmt.getStartLineNo() + i, col,\n+                                        tagName, content.trim()));\n             }\n             tagPattern \u003d Utils.getPattern(\"^\\\\s*\\\\**\\\\s*@(\\\\p{Alpha}+)\\\\s\");\n         }\n         return tags;\n     }\n\\ No newline at end of file\n"
    },
    "e27489c7721909245ea5055eac3b9c7c659081f6": {
      "type": "Ybodychange",
      "commitMessage": "initial replacing RE by Pattern (need to update docs)\n",
      "commitDate": 1115830091000,
      "commitName": "e27489c7721909245ea5055eac3b9c7c659081f6",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1111410658000,
      "commitNameOld": "df91057c1ead21b974824440a3363efb346e660f",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 51.15,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,22 @@\n     private Vector getJavadocTags(TextBlock aCmt)\n     {\n         final String[] text \u003d aCmt.getText();\n         Vector tags \u003d new Vector();\n-        RE tagRE \u003d Utils.getRE(\"/\\\\*{2,}\\\\s*@([:alpha:]+)\\\\s\");\n+        Pattern tagPattern \u003d Utils.getPattern(\"/\\\\*{2,}\\\\s*@(\\\\p{Alpha}+)\\\\s\");\n         for (int i \u003d 0; i \u003c text.length; i++) {\n             final String s \u003d text[i];\n-            if (tagRE.match(s)) {\n-                final String tagName \u003d tagRE.getParen(1);\n-                String content \u003d s.substring(tagRE.getParenEnd(0));\n+            Matcher tagMatcher \u003d tagPattern.matcher(s);\n+            if (tagMatcher.find()) {\n+                final String tagName \u003d tagMatcher.group(1);\n+                String content \u003d s.substring(tagMatcher.end(1));\n                 if (content.endsWith(\"*/\")) {\n                     content \u003d content.substring(0, content.length() - 2);\n                 }\n                 tags.add(new JavadocTag(aCmt.getStartLineNo() + i,\n                                         tagName,\n                                         content.trim()));\n             }\n-            tagRE \u003d Utils.getRE(\"^\\\\s*\\\\**\\\\s*@([:alpha:]+)\\\\s\");\n+            tagPattern \u003d Utils.getPattern(\"^\\\\s*\\\\**\\\\s*@(\\\\p{Alpha}+)\\\\s\");\n         }\n         return tags;\n     }\n\\ No newline at end of file\n"
    },
    "e577b7ebb8fdc66cc744710b543f04ce84d5c508": {
      "type": "Ybodychange",
      "commitMessage": "applied patch 959995 to fix JavadocTypeCheck bug of not finding a\ntag on the firt line of a comment\n",
      "commitDate": 1085571846000,
      "commitName": "e577b7ebb8fdc66cc744710b543f04ce84d5c508",
      "commitAuthor": "Rick Giles",
      "commitDateOld": 1080421817000,
      "commitNameOld": "cdf0ac0f4c4fb8ab63c4bb7d144a71682c6e400a",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 59.61,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,21 @@\n     private Vector getJavadocTags(TextBlock aCmt)\n     {\n         final String[] text \u003d aCmt.getText();\n         Vector tags \u003d new Vector();\n         RE tagRE \u003d Utils.getRE(\"/\\\\*{2,}\\\\s*@([:alpha:]+)\\\\s\");\n         for (int i \u003d 0; i \u003c text.length; i++) {\n             final String s \u003d text[i];\n             if (tagRE.match(s)) {\n                 final String tagName \u003d tagRE.getParen(1);\n                 String content \u003d s.substring(tagRE.getParenEnd(0));\n                 if (content.endsWith(\"*/\")) {\n                     content \u003d content.substring(0, content.length() - 2);\n                 }\n                 tags.add(new JavadocTag(aCmt.getStartLineNo() + i,\n                                         tagName,\n                                         content.trim()));\n             }\n-            if (i !\u003d 0) {\n-                tagRE \u003d Utils.getRE(\"^\\\\s*\\\\**\\\\s*@([:alpha:]+)\\\\s\");\n-            }\n+            tagRE \u003d Utils.getRE(\"^\\\\s*\\\\**\\\\s*@([:alpha:]+)\\\\s\");\n         }\n         return tags;\n     }\n\\ No newline at end of file\n"
    },
    "9ce0ceb04ae90185f95643fb4484e525bcb0d3df": {
      "type": "Yintroduced",
      "commitMessage": "Some improvements for JavadocType check.\n",
      "commitDate": 1078770170000,
      "commitName": "9ce0ceb04ae90185f95643fb4484e525bcb0d3df",
      "commitAuthor": "Oleg Sukhodolsky"
    }
  }
}