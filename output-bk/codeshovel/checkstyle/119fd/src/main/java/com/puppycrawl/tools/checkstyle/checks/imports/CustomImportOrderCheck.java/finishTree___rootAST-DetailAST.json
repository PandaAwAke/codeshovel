{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "CustomImportOrderCheck.java",
  "functionName": "finishTree",
  "functionId": "finishTree___rootAST-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java",
  "functionStartLine": 488,
  "functionEndLine": 492,
  "changeHistory": [
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
    "f293a2107656cebb829e33cba2384ba56be54512",
    "4913b287c0739f88eed8bea42e63d416c3e1cf7c",
    "cd12de2a24713a494393912e2277b67770eb79fe",
    "8f12d2b92568c8fca42dfbd26f3d1f0b17100a7b",
    "5ff1834a224cefac74b80a47efff15d113f76a1e",
    "0552912c9fa82f1c3d044a081dc8d7a2a9f5a4b1",
    "2ea1a3dbab2b114cfc4d0baefda80590fbd3d6c0",
    "2ad4b0830d3892f718134e198a0bcbe9fbf5d8c7",
    "16dac636b246c658cad31ee9b2e45c53b851d4f2",
    "2a3be6769c4a97d090970ed52ca2333cb9aea706"
  ],
  "changeHistoryShort": {
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": "Ybodychange",
    "f293a2107656cebb829e33cba2384ba56be54512": "Ybodychange",
    "4913b287c0739f88eed8bea42e63d416c3e1cf7c": "Ybodychange",
    "cd12de2a24713a494393912e2277b67770eb79fe": "Ybodychange",
    "8f12d2b92568c8fca42dfbd26f3d1f0b17100a7b": "Ybodychange",
    "5ff1834a224cefac74b80a47efff15d113f76a1e": "Ybodychange",
    "0552912c9fa82f1c3d044a081dc8d7a2a9f5a4b1": "Ybodychange",
    "2ea1a3dbab2b114cfc4d0baefda80590fbd3d6c0": "Ybodychange",
    "2ad4b0830d3892f718134e198a0bcbe9fbf5d8c7": "Ybodychange",
    "16dac636b246c658cad31ee9b2e45c53b851d4f2": "Ymultichange(Yparameterchange,Ybodychange)",
    "2a3be6769c4a97d090970ed52ca2333cb9aea706": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3143: forbid empty return statements and fixed violations",
      "commitDate": 1464356569000,
      "commitName": "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
      "commitAuthor": "rnveach",
      "commitDateOld": 1454680863000,
      "commitNameOld": "cf96dd9adcf0c3c8f8f05a9ffdcb765cafe17479",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 111.99,
      "commitsBetweenForRepo": 276,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,6 @@\n     public void finishTree(DetailAST rootAST) {\n \n-        if (importToGroupList.isEmpty()) {\n-            return;\n-        }\n-\n-        final ImportDetails firstImport \u003d importToGroupList.get(0);\n-        String currentGroup \u003d getImportGroup(firstImport.isStaticImport(),\n-                firstImport.getImportFullPath());\n-        int currentGroupNumber \u003d customImportOrderRules.indexOf(currentGroup);\n-        String previousImportFromCurrentGroup \u003d null;\n-\n-        for (ImportDetails importObject : importToGroupList) {\n-            final String importGroup \u003d importObject.getImportGroup();\n-            final String fullImportIdent \u003d importObject.getImportFullPath();\n-\n-            if (importGroup.equals(currentGroup)) {\n-                if (sortImportsInGroupAlphabetically\n-                        \u0026\u0026 previousImportFromCurrentGroup !\u003d null\n-                        \u0026\u0026 compareImports(fullImportIdent, previousImportFromCurrentGroup) \u003c 0) {\n-                    log(importObject.getLineNumber(), MSG_LEX,\n-                            fullImportIdent, previousImportFromCurrentGroup);\n-                }\n-                else {\n-                    previousImportFromCurrentGroup \u003d fullImportIdent;\n-                }\n-            }\n-            else {\n-                //not the last group, last one is always NON_GROUP\n-                if (customImportOrderRules.size() \u003e currentGroupNumber + 1) {\n-                    final String nextGroup \u003d getNextImportGroup(currentGroupNumber + 1);\n-                    if (importGroup.equals(nextGroup)) {\n-                        if (separateLineBetweenGroups\n-                                \u0026\u0026 !hasEmptyLineBefore(importObject.getLineNumber())) {\n-                            log(importObject.getLineNumber(), MSG_LINE_SEPARATOR, fullImportIdent);\n-                        }\n-                        currentGroup \u003d nextGroup;\n-                        currentGroupNumber \u003d customImportOrderRules.indexOf(nextGroup);\n-                        previousImportFromCurrentGroup \u003d fullImportIdent;\n-                    }\n-                    else {\n-                        logWrongImportGroupOrder(importObject.getLineNumber(),\n-                                importGroup, nextGroup, fullImportIdent);\n-                    }\n-                }\n-                else {\n-                    logWrongImportGroupOrder(importObject.getLineNumber(),\n-                            importGroup, currentGroup, fullImportIdent);\n-                }\n-            }\n+        if (!importToGroupList.isEmpty()) {\n+            finishImportList();\n         }\n     }\n\\ No newline at end of file\n"
    },
    "f293a2107656cebb829e33cba2384ba56be54512": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1555: Flip negated if-else\n\nFixes `NegatedIfElse` inspection violation.\n\nDescription:\n\u003eReports if statements which contain else branches and whose conditions are negated. Flipping the order of the if and else branches will usually increase the clarity of such statements.\n",
      "commitDate": 1440912908000,
      "commitName": "f293a2107656cebb829e33cba2384ba56be54512",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440829976000,
      "commitNameOld": "4913b287c0739f88eed8bea42e63d416c3e1cf7c",
      "commitAuthorOld": "Aleksandr Ivanov",
      "daysBetweenCommits": 0.96,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n     public void finishTree(DetailAST rootAST) {\n \n         if (importToGroupList.isEmpty()) {\n             return;\n         }\n \n         final ImportDetails firstImport \u003d importToGroupList.get(0);\n         String currentGroup \u003d getImportGroup(firstImport.isStaticImport(),\n                 firstImport.getImportFullPath());\n         int currentGroupNumber \u003d customImportOrderRules.indexOf(currentGroup);\n         String previousImportFromCurrentGroup \u003d null;\n \n         for (ImportDetails importObject : importToGroupList) {\n             final String importGroup \u003d importObject.getImportGroup();\n             final String fullImportIdent \u003d importObject.getImportFullPath();\n \n-            if (!importGroup.equals(currentGroup)) {\n+            if (importGroup.equals(currentGroup)) {\n+                if (sortImportsInGroupAlphabetically\n+                        \u0026\u0026 previousImportFromCurrentGroup !\u003d null\n+                        \u0026\u0026 compareImports(fullImportIdent, previousImportFromCurrentGroup) \u003c 0) {\n+                    log(importObject.getLineNumber(), MSG_LEX,\n+                            fullImportIdent, previousImportFromCurrentGroup);\n+                }\n+                else {\n+                    previousImportFromCurrentGroup \u003d fullImportIdent;\n+                }\n+            }\n+            else {\n                 //not the last group, last one is always NON_GROUP\n                 if (customImportOrderRules.size() \u003e currentGroupNumber + 1) {\n                     final String nextGroup \u003d getNextImportGroup(currentGroupNumber + 1);\n                     if (importGroup.equals(nextGroup)) {\n                         if (separateLineBetweenGroups\n                                 \u0026\u0026 !hasEmptyLineBefore(importObject.getLineNumber())) {\n                             log(importObject.getLineNumber(), MSG_LINE_SEPARATOR, fullImportIdent);\n                         }\n                         currentGroup \u003d nextGroup;\n                         currentGroupNumber \u003d customImportOrderRules.indexOf(nextGroup);\n                         previousImportFromCurrentGroup \u003d fullImportIdent;\n                     }\n                     else {\n                         logWrongImportGroupOrder(importObject.getLineNumber(),\n                                 importGroup, nextGroup, fullImportIdent);\n                     }\n                 }\n                 else {\n                     logWrongImportGroupOrder(importObject.getLineNumber(),\n                             importGroup, currentGroup, fullImportIdent);\n                 }\n             }\n-            else {\n-                if (sortImportsInGroupAlphabetically\n-                    \u0026\u0026 previousImportFromCurrentGroup !\u003d null\n-                    \u0026\u0026 compareImports(fullImportIdent, previousImportFromCurrentGroup) \u003c 0) {\n-                    log(importObject.getLineNumber(), MSG_LEX,\n-                            fullImportIdent, previousImportFromCurrentGroup);\n-                }\n-                else {\n-                    previousImportFromCurrentGroup \u003d fullImportIdent;\n-                }\n-            }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "4913b287c0739f88eed8bea42e63d416c3e1cf7c": {
      "type": "Ybodychange",
      "commitMessage": "fixed problem with lexical order in CustomImportOrder #1469\n",
      "commitDate": 1440829976000,
      "commitName": "4913b287c0739f88eed8bea42e63d416c3e1cf7c",
      "commitAuthor": "Aleksandr Ivanov",
      "commitDateOld": 1440739719000,
      "commitNameOld": "b14f255427c0b12054de2873fe300b4f4e691bd4",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 1.04,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,52 @@\n     public void finishTree(DetailAST rootAST) {\n \n         if (importToGroupList.isEmpty()) {\n             return;\n         }\n \n         final ImportDetails firstImport \u003d importToGroupList.get(0);\n         String currentGroup \u003d getImportGroup(firstImport.isStaticImport(),\n                 firstImport.getImportFullPath());\n-        int groupNumber \u003d customImportOrderRules.indexOf(currentGroup);\n-        String previousImport \u003d null;\n+        int currentGroupNumber \u003d customImportOrderRules.indexOf(currentGroup);\n+        String previousImportFromCurrentGroup \u003d null;\n \n         for (ImportDetails importObject : importToGroupList) {\n             final String importGroup \u003d importObject.getImportGroup();\n-            final String fullImportIdent \u003d importObject.importFullPath;\n+            final String fullImportIdent \u003d importObject.getImportFullPath();\n \n             if (!importGroup.equals(currentGroup)) {\n-                if (customImportOrderRules.size() \u003e groupNumber + 1) {\n-                    final String nextGroup \u003d getNextImportGroup(groupNumber + 1);\n+                //not the last group, last one is always NON_GROUP\n+                if (customImportOrderRules.size() \u003e currentGroupNumber + 1) {\n+                    final String nextGroup \u003d getNextImportGroup(currentGroupNumber + 1);\n                     if (importGroup.equals(nextGroup)) {\n                         if (separateLineBetweenGroups\n                                 \u0026\u0026 !hasEmptyLineBefore(importObject.getLineNumber())) {\n-                            log(importObject.getLineNumber(), MSG_LINE_SEPARATOR,\n-                                    fullImportIdent);\n+                            log(importObject.getLineNumber(), MSG_LINE_SEPARATOR, fullImportIdent);\n                         }\n                         currentGroup \u003d nextGroup;\n-                        groupNumber \u003d customImportOrderRules.indexOf(nextGroup);\n+                        currentGroupNumber \u003d customImportOrderRules.indexOf(nextGroup);\n+                        previousImportFromCurrentGroup \u003d fullImportIdent;\n                     }\n                     else {\n                         logWrongImportGroupOrder(importObject.getLineNumber(),\n                                 importGroup, nextGroup, fullImportIdent);\n                     }\n                 }\n                 else {\n                     logWrongImportGroupOrder(importObject.getLineNumber(),\n                             importGroup, currentGroup, fullImportIdent);\n                 }\n             }\n-            else if (sortImportsInGroupAlphabetically\n-                    \u0026\u0026 previousImport !\u003d null\n-                    \u0026\u0026 matchesImportGroup(importObject.isStaticImport(),\n-                            fullImportIdent, currentGroup)\n-                    \u0026\u0026 compareImports(fullImportIdent, previousImport) \u003c 0) {\n-                log(importObject.getLineNumber(), MSG_LEX, fullImportIdent, previousImport);\n+            else {\n+                if (sortImportsInGroupAlphabetically\n+                    \u0026\u0026 previousImportFromCurrentGroup !\u003d null\n+                    \u0026\u0026 compareImports(fullImportIdent, previousImportFromCurrentGroup) \u003c 0) {\n+                    log(importObject.getLineNumber(), MSG_LEX,\n+                            fullImportIdent, previousImportFromCurrentGroup);\n+                }\n+                else {\n+                    previousImportFromCurrentGroup \u003d fullImportIdent;\n+                }\n             }\n-            previousImport \u003d fullImportIdent;\n         }\n     }\n\\ No newline at end of file\n"
    },
    "cd12de2a24713a494393912e2277b67770eb79fe": {
      "type": "Ybodychange",
      "commitMessage": "Extended messages for CustomImportOrder #1648\n",
      "commitDate": 1439698510000,
      "commitName": "cd12de2a24713a494393912e2277b67770eb79fe",
      "commitAuthor": "Aleksandr Ivanov",
      "commitDateOld": 1439697795000,
      "commitNameOld": "26774cf3102640084d88aa60dc928cd0cd783793",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n     public void finishTree(DetailAST rootAST) {\n \n         if (importToGroupList.isEmpty()) {\n             return;\n         }\n \n         final ImportDetails firstImport \u003d importToGroupList.get(0);\n         String currentGroup \u003d getImportGroup(firstImport.isStaticImport(),\n                 firstImport.getImportFullPath());\n         int groupNumber \u003d customImportOrderRules.indexOf(currentGroup);\n         String previousImport \u003d null;\n \n         for (ImportDetails importObject : importToGroupList) {\n             final String importGroup \u003d importObject.getImportGroup();\n             final String fullImportIdent \u003d importObject.importFullPath;\n \n             if (!importGroup.equals(currentGroup)) {\n                 if (customImportOrderRules.size() \u003e groupNumber + 1) {\n                     final String nextGroup \u003d getNextImportGroup(groupNumber + 1);\n                     if (importGroup.equals(nextGroup)) {\n                         if (separateLineBetweenGroups\n                                 \u0026\u0026 !hasEmptyLineBefore(importObject.getLineNumber())) {\n                             log(importObject.getLineNumber(), MSG_LINE_SEPARATOR,\n                                     fullImportIdent);\n                         }\n                         currentGroup \u003d nextGroup;\n                         groupNumber \u003d customImportOrderRules.indexOf(nextGroup);\n                     }\n                     else {\n                         logWrongImportGroupOrder(importObject.getLineNumber(),\n-                                importGroup);\n+                                importGroup, nextGroup, fullImportIdent);\n                     }\n                 }\n                 else {\n                     logWrongImportGroupOrder(importObject.getLineNumber(),\n-                            importGroup);\n+                            importGroup, currentGroup, fullImportIdent);\n                 }\n             }\n             else if (sortImportsInGroupAlphabetically\n                     \u0026\u0026 previousImport !\u003d null\n                     \u0026\u0026 matchesImportGroup(importObject.isStaticImport(),\n                             fullImportIdent, currentGroup)\n                     \u0026\u0026 compareImports(fullImportIdent, previousImport) \u003c 0) {\n-                log(importObject.getLineNumber(), MSG_LEX, fullImportIdent);\n+                log(importObject.getLineNumber(), MSG_LEX, fullImportIdent, previousImport);\n             }\n             previousImport \u003d fullImportIdent;\n         }\n     }\n\\ No newline at end of file\n"
    },
    "8f12d2b92568c8fca42dfbd26f3d1f0b17100a7b": {
      "type": "Ybodychange",
      "commitMessage": "100% coverage for CustomImportOrder. #1128\n",
      "commitDate": 1437853138000,
      "commitName": "8f12d2b92568c8fca42dfbd26f3d1f0b17100a7b",
      "commitAuthor": "Aleksandr Ivanov",
      "commitDateOld": 1437631122000,
      "commitNameOld": "acbd47a66b01acc392a7bd37ad3a2e65eecd308a",
      "commitAuthorOld": "Aleksandr Ivanov",
      "daysBetweenCommits": 2.57,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n     public void finishTree(DetailAST rootAST) {\n \n         if (importToGroupList.isEmpty()) {\n             return;\n         }\n \n         final ImportDetails firstImport \u003d importToGroupList.get(0);\n         String currentGroup \u003d getImportGroup(firstImport.isStaticImport(),\n                 firstImport.getImportFullPath());\n         int groupNumber \u003d customImportOrderRules.indexOf(currentGroup);\n         String previousImport \u003d null;\n \n         for (ImportDetails importObject : importToGroupList) {\n             final String importGroup \u003d importObject.getImportGroup();\n             final String fullImportIdent \u003d importObject.importFullPath;\n \n             if (!importGroup.equals(currentGroup)) {\n                 if (customImportOrderRules.size() \u003e groupNumber + 1) {\n                     final String nextGroup \u003d getNextImportGroup(groupNumber + 1);\n                     if (importGroup.equals(nextGroup)) {\n-                        if (separateLineBetweenGroups \u0026\u0026 previousImport !\u003d null\n+                        if (separateLineBetweenGroups\n                                 \u0026\u0026 !hasEmptyLineBefore(importObject.getLineNumber())) {\n                             log(importObject.getLineNumber(), MSG_LINE_SEPARATOR,\n                                     fullImportIdent);\n                         }\n                         currentGroup \u003d nextGroup;\n                         groupNumber \u003d customImportOrderRules.indexOf(nextGroup);\n                     }\n                     else {\n                         logWrongImportGroupOrder(importObject.getLineNumber(),\n                                 importGroup);\n                     }\n                 }\n                 else {\n                     logWrongImportGroupOrder(importObject.getLineNumber(),\n                             importGroup);\n                 }\n             }\n             else if (sortImportsInGroupAlphabetically\n                     \u0026\u0026 previousImport !\u003d null\n                     \u0026\u0026 matchesImportGroup(importObject.isStaticImport(),\n                             fullImportIdent, currentGroup)\n                     \u0026\u0026 compareImports(fullImportIdent, previousImport) \u003c 0) {\n                 log(importObject.getLineNumber(), MSG_LEX, fullImportIdent);\n             }\n             previousImport \u003d fullImportIdent;\n         }\n     }\n\\ No newline at end of file\n"
    },
    "5ff1834a224cefac74b80a47efff15d113f76a1e": {
      "type": "Ybodychange",
      "commitMessage": "Fix PMD violations from AvoidFieldNameMatchingMethodName rule. #984\n",
      "commitDate": 1431536088000,
      "commitName": "5ff1834a224cefac74b80a47efff15d113f76a1e",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1431535637000,
      "commitNameOld": "466b1ebb31bcfda5cf2bbf3091b6bccb5fa8f000",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n     public void finishTree(DetailAST rootAST)\n     {\n \n         if (importToGroupList.isEmpty()) {\n             return;\n         }\n \n         final ImportDetails firstImport \u003d importToGroupList.get(0);\n-        String currentGroup \u003d getImportGroup(firstImport.isStatic(),\n+        String currentGroup \u003d getImportGroup(firstImport.isStaticImport(),\n                 firstImport.getImportFullPath());\n         int groupNumber \u003d customImportOrderRules.indexOf(currentGroup);\n         String previousImport \u003d null;\n \n         for (ImportDetails importObject : importToGroupList) {\n             final String importGroup \u003d importObject.getImportGroup();\n             final String fullImportIdent \u003d importObject.importFullPath;\n \n             if (!importGroup.equals(currentGroup)) {\n                 if (customImportOrderRules.size() \u003e groupNumber + 1) {\n                     final String nextGroup \u003d getNextImportGroup(groupNumber + 1);\n                     if (importGroup.equals(nextGroup)) {\n                         if (separateLineBetweenGroups \u0026\u0026 previousImport !\u003d null\n                                 \u0026\u0026 !hasEmptyLineBefore(importObject.getLineNumber()))\n                         {\n                             log(importObject.getLineNumber(), MSG_LINE_SEPARATOR,\n                                     fullImportIdent);\n                         }\n                         currentGroup \u003d nextGroup;\n                         groupNumber \u003d customImportOrderRules.indexOf(nextGroup);\n                     }\n                     else {\n                         logWrongImportGroupOrder(importObject.getLineNumber(),\n                                 importGroup);\n                     }\n                 }\n                 else {\n                     logWrongImportGroupOrder(importObject.getLineNumber(),\n                             importGroup);\n                 }\n             }\n             else if (sortImportsInGroupAlphabetically\n                     \u0026\u0026 previousImport !\u003d null\n-                    \u0026\u0026 matchesImportGroup(importObject.isStatic(),\n+                    \u0026\u0026 matchesImportGroup(importObject.isStaticImport(),\n                             fullImportIdent, currentGroup)\n                     \u0026\u0026 compareImports(fullImportIdent, previousImport) \u003c 0)\n             {\n                 log(importObject.getLineNumber(), MSG_LEX, fullImportIdent);\n             }\n             previousImport \u003d fullImportIdent;\n         }\n     }\n\\ No newline at end of file\n"
    },
    "0552912c9fa82f1c3d044a081dc8d7a2a9f5a4b1": {
      "type": "Ybodychange",
      "commitMessage": "fix for violations of PMD LogicInversion. Issue #744\n",
      "commitDate": 1430068476000,
      "commitName": "0552912c9fa82f1c3d044a081dc8d7a2a9f5a4b1",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": 1429113367000,
      "commitNameOld": "1c42e3eeb9aeebc47b2373541c1cc8d311d8b671",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 11.05,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n     public void finishTree(DetailAST rootAST)\n     {\n \n         if (importToGroupList.isEmpty()) {\n             return;\n         }\n \n         final ImportDetails firstImport \u003d importToGroupList.get(0);\n         String currentGroup \u003d getImportGroup(firstImport.isStatic(),\n                 firstImport.getImportFullPath());\n         int groupNumber \u003d customImportOrderRules.indexOf(currentGroup);\n         String previousImport \u003d null;\n \n         for (ImportDetails importObject : importToGroupList) {\n             final String importGroup \u003d importObject.getImportGroup();\n             final String fullImportIdent \u003d importObject.importFullPath;\n \n             if (!importGroup.equals(currentGroup)) {\n                 if (customImportOrderRules.size() \u003e groupNumber + 1) {\n                     final String nextGroup \u003d getNextImportGroup(groupNumber + 1);\n                     if (importGroup.equals(nextGroup)) {\n                         if (separateLineBetweenGroups \u0026\u0026 previousImport !\u003d null\n                                 \u0026\u0026 !hasEmptyLineBefore(importObject.getLineNumber()))\n                         {\n                             log(importObject.getLineNumber(), MSG_LINE_SEPARATOR,\n                                     fullImportIdent);\n                         }\n                         currentGroup \u003d nextGroup;\n                         groupNumber \u003d customImportOrderRules.indexOf(nextGroup);\n                     }\n                     else {\n                         logWrongImportGroupOrder(importObject.getLineNumber(),\n                                 importGroup);\n                     }\n                 }\n                 else {\n                     logWrongImportGroupOrder(importObject.getLineNumber(),\n                             importGroup);\n                 }\n             }\n             else if (sortImportsInGroupAlphabetically\n                     \u0026\u0026 previousImport !\u003d null\n                     \u0026\u0026 matchesImportGroup(importObject.isStatic(),\n                             fullImportIdent, currentGroup)\n-                    \u0026\u0026 !(compareImports(fullImportIdent, previousImport) \u003e\u003d 0))\n+                    \u0026\u0026 compareImports(fullImportIdent, previousImport) \u003c 0)\n             {\n                 log(importObject.getLineNumber(), MSG_LEX, fullImportIdent);\n             }\n             previousImport \u003d fullImportIdent;\n         }\n     }\n\\ No newline at end of file\n"
    },
    "2ea1a3dbab2b114cfc4d0baefda80590fbd3d6c0": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, imports package, issue #537\n",
      "commitDate": 1424437366000,
      "commitName": "2ea1a3dbab2b114cfc4d0baefda80590fbd3d6c0",
      "commitAuthor": "alexkravin",
      "commitDateOld": 1424294072000,
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n     public void finishTree(DetailAST rootAST)\n     {\n \n         if (importToGroupList.isEmpty()) {\n             return;\n         }\n \n         final ImportDetails firstImport \u003d importToGroupList.get(0);\n         String currentGroup \u003d getImportGroup(firstImport.isStatic(),\n                 firstImport.getImportFullPath());\n         int groupNumber \u003d customImportOrderRules.indexOf(currentGroup);\n         String previousImport \u003d null;\n \n         for (ImportDetails importObject : importToGroupList) {\n             final String importGroup \u003d importObject.getImportGroup();\n             final String fullImportIdent \u003d importObject.importFullPath;\n \n             if (!importGroup.equals(currentGroup)) {\n                 if (customImportOrderRules.size() \u003e groupNumber + 1) {\n                     final String nextGroup \u003d getNextImportGroup(groupNumber + 1);\n                     if (importGroup.equals(nextGroup)) {\n                         if (separateLineBetweenGroups \u0026\u0026 previousImport !\u003d null\n                                 \u0026\u0026 !hasEmptyLineBefore(importObject.getLineNumber()))\n                         {\n-                            log(importObject.getLineNumber(), \"custom.import.order.line.separator\",\n+                            log(importObject.getLineNumber(), MSG_LINE_SEPARATOR,\n                                     fullImportIdent);\n                         }\n                         currentGroup \u003d nextGroup;\n                         groupNumber \u003d customImportOrderRules.indexOf(nextGroup);\n                     }\n                     else {\n                         logWrongImportGroupOrder(importObject.getLineNumber(),\n                                 importGroup);\n                     }\n                 }\n                 else {\n                     logWrongImportGroupOrder(importObject.getLineNumber(),\n                             importGroup);\n                 }\n             }\n             else if (sortImportsInGroupAlphabetically\n                     \u0026\u0026 previousImport !\u003d null\n                     \u0026\u0026 matchesImportGroup(importObject.isStatic(),\n                             fullImportIdent, currentGroup)\n                     \u0026\u0026 !(compareImports(fullImportIdent, previousImport) \u003e\u003d 0))\n             {\n-                log(importObject.getLineNumber(), \"custom.import.order.lex\", fullImportIdent);\n+                log(importObject.getLineNumber(), MSG_LEX, fullImportIdent);\n             }\n             previousImport \u003d fullImportIdent;\n         }\n     }\n\\ No newline at end of file\n"
    },
    "2ad4b0830d3892f718134e198a0bcbe9fbf5d8c7": {
      "type": "Ybodychange",
      "commitMessage": "Custom Import Order Check, rewrote compare method, issue #234\n",
      "commitDate": 1422512236000,
      "commitName": "2ad4b0830d3892f718134e198a0bcbe9fbf5d8c7",
      "commitAuthor": "alexkravin",
      "commitDateOld": 1421678312000,
      "commitNameOld": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 9.65,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n     public void finishTree(DetailAST rootAST)\n     {\n \n         if (importToGroupList.isEmpty()) {\n             return;\n         }\n \n         final ImportDetails firstImport \u003d importToGroupList.get(0);\n         String currentGroup \u003d getImportGroup(firstImport.isStatic(),\n                 firstImport.getImportFullPath());\n         int groupNumber \u003d customImportOrderRules.indexOf(currentGroup);\n         String previousImport \u003d null;\n \n         for (ImportDetails importObject : importToGroupList) {\n             final String importGroup \u003d importObject.getImportGroup();\n             final String fullImportIdent \u003d importObject.importFullPath;\n \n             if (!importGroup.equals(currentGroup)) {\n                 if (customImportOrderRules.size() \u003e groupNumber + 1) {\n                     final String nextGroup \u003d getNextImportGroup(groupNumber + 1);\n                     if (importGroup.equals(nextGroup)) {\n                         if (separateLineBetweenGroups \u0026\u0026 previousImport !\u003d null\n                                 \u0026\u0026 !hasEmptyLineBefore(importObject.getLineNumber()))\n                         {\n                             log(importObject.getLineNumber(), \"custom.import.order.line.separator\",\n                                     fullImportIdent);\n                         }\n                         currentGroup \u003d nextGroup;\n                         groupNumber \u003d customImportOrderRules.indexOf(nextGroup);\n                     }\n                     else {\n                         logWrongImportGroupOrder(importObject.getLineNumber(),\n                                 importGroup);\n                     }\n                 }\n                 else {\n                     logWrongImportGroupOrder(importObject.getLineNumber(),\n                             importGroup);\n                 }\n             }\n             else if (sortImportsInGroupAlphabetically\n                     \u0026\u0026 previousImport !\u003d null\n                     \u0026\u0026 matchesImportGroup(importObject.isStatic(),\n                             fullImportIdent, currentGroup)\n-                    \u0026\u0026 !(compare(fullImportIdent, previousImport) \u003e\u003d 0))\n+                    \u0026\u0026 !(compareImports(fullImportIdent, previousImport) \u003e\u003d 0))\n             {\n                 log(importObject.getLineNumber(), \"custom.import.order.lex\", fullImportIdent);\n             }\n             previousImport \u003d fullImportIdent;\n         }\n     }\n\\ No newline at end of file\n"
    },
    "16dac636b246c658cad31ee9b2e45c53b851d4f2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, imports, #512\n",
      "commitDate": 1421678111000,
      "commitName": "16dac636b246c658cad31ee9b2e45c53b851d4f2",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "2a3be6769c4a97d090970ed52ca2333cb9aea706": {
      "type": "Yintroduced",
      "commitMessage": "CustomImportOrder was introduced #231\n",
      "commitDate": 1407671579000,
      "commitName": "2a3be6769c4a97d090970ed52ca2333cb9aea706",
      "commitAuthor": "Max"
    }
  }
}