{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "UnnecessaryParenthesesCheck.java",
  "functionName": "visitToken",
  "functionId": "visitToken___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/UnnecessaryParenthesesCheck.java",
  "functionStartLine": 205,
  "functionEndLine": 240,
  "changeHistory": [
    "1f5c91d0c4cf1e54374cd513643e4700948fbdf7",
    "3e0159aeb562cd8f29296fbe919b27438ff8891f",
    "4d2e6647f9e8385749c382bcab5e64965a943178",
    "dba746ba9387bee04ed362254abb5d9ed35169cd",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "27149f3504a2f350b74f456a9bffbae76a460060",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "c2d3932843e70e4bb5df7161800aca248f9af778",
    "7dd31794bcc6258ffaa1ed5533a3b5a7c2f2af1a",
    "8e5c074c4403492df21fce8ca2c86eddd7dff9d2"
  ],
  "changeHistoryShort": {
    "1f5c91d0c4cf1e54374cd513643e4700948fbdf7": "Ybodychange",
    "3e0159aeb562cd8f29296fbe919b27438ff8891f": "Ybodychange",
    "4d2e6647f9e8385749c382bcab5e64965a943178": "Ybodychange",
    "dba746ba9387bee04ed362254abb5d9ed35169cd": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "27149f3504a2f350b74f456a9bffbae76a460060": "Ybodychange",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "c2d3932843e70e4bb5df7161800aca248f9af778": "Ybodychange",
    "7dd31794bcc6258ffaa1ed5533a3b5a7c2f2af1a": "Ybodychange",
    "8e5c074c4403492df21fce8ca2c86eddd7dff9d2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1f5c91d0c4cf1e54374cd513643e4700948fbdf7": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4639: added support for lambdas in UnnecessaryParentheses",
      "commitDate": 1502351077000,
      "commitName": "1f5c91d0c4cf1e54374cd513643e4700948fbdf7",
      "commitAuthor": "rnveach",
      "commitDateOld": 1485527514000,
      "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 194.72,
      "commitsBetweenForRepo": 782,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,37 @@\n     public void visitToken(DetailAST ast) {\n         final int type \u003d ast.getType();\n         final DetailAST parent \u003d ast.getParent();\n \n-        if (type !\u003d TokenTypes.ASSIGN\n+        if (type \u003d\u003d TokenTypes.LAMBDA \u0026\u0026 isLambdaSingleParameterSurrounded(ast)) {\n+            log(ast, MSG_LAMBDA, ast.getText());\n+        }\n+        else if (type !\u003d TokenTypes.ASSIGN\n             || parent.getType() !\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR) {\n \n             final boolean surrounded \u003d isSurrounded(ast);\n             // An identifier surrounded by parentheses.\n             if (surrounded \u0026\u0026 type \u003d\u003d TokenTypes.IDENT) {\n                 parentToSkip \u003d ast.getParent();\n                 log(ast, MSG_IDENT, ast.getText());\n             }\n             // A literal (numeric or string) surrounded by parentheses.\n             else if (surrounded \u0026\u0026 isInTokenList(type, LITERALS)) {\n                 parentToSkip \u003d ast.getParent();\n                 if (type \u003d\u003d TokenTypes.STRING_LITERAL) {\n                     log(ast, MSG_STRING,\n                         chopString(ast.getText()));\n                 }\n                 else {\n                     log(ast, MSG_LITERAL, ast.getText());\n                 }\n             }\n             // The rhs of an assignment surrounded by parentheses.\n             else if (isInTokenList(type, ASSIGNMENTS)) {\n                 assignDepth++;\n                 final DetailAST last \u003d ast.getLastChild();\n                 if (last.getType() \u003d\u003d TokenTypes.RPAREN) {\n                     log(ast, MSG_ASSIGN);\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "3e0159aeb562cd8f29296fbe919b27438ff8891f": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: ReturnCount violation fixed for UnnecessaryParenthesesCheck\n",
      "commitDate": 1440826792000,
      "commitName": "3e0159aeb562cd8f29296fbe919b27438ff8891f",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": 1440705239000,
      "commitNameOld": "4d2e6647f9e8385749c382bcab5e64965a943178",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 1.41,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,34 @@\n     public void visitToken(DetailAST ast) {\n         final int type \u003d ast.getType();\n         final DetailAST parent \u003d ast.getParent();\n \n-        if (type \u003d\u003d TokenTypes.ASSIGN\n-            \u0026\u0026 parent.getType() \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR) {\n-            // shouldn\u0027t process assign in annotation pairs\n-            return;\n-        }\n+        if (type !\u003d TokenTypes.ASSIGN\n+            || parent.getType() !\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR) {\n \n-        // An identifier surrounded by parentheses.\n-        final boolean surrounded \u003d isSurrounded(ast);\n-        if (surrounded \u0026\u0026 type \u003d\u003d TokenTypes.IDENT) {\n-            parentToSkip \u003d ast.getParent();\n-            log(ast, MSG_IDENT, ast.getText());\n-            return;\n-        }\n-\n-        // A literal (numeric or string) surrounded by parentheses.\n-        if (surrounded \u0026\u0026 isInTokenList(type, LITERALS)) {\n-            parentToSkip \u003d ast.getParent();\n-            if (type \u003d\u003d TokenTypes.STRING_LITERAL) {\n-                log(ast, MSG_STRING,\n-                    chopString(ast.getText()));\n+            final boolean surrounded \u003d isSurrounded(ast);\n+            // An identifier surrounded by parentheses.\n+            if (surrounded \u0026\u0026 type \u003d\u003d TokenTypes.IDENT) {\n+                parentToSkip \u003d ast.getParent();\n+                log(ast, MSG_IDENT, ast.getText());\n             }\n-            else {\n-                log(ast, MSG_LITERAL, ast.getText());\n+            // A literal (numeric or string) surrounded by parentheses.\n+            else if (surrounded \u0026\u0026 isInTokenList(type, LITERALS)) {\n+                parentToSkip \u003d ast.getParent();\n+                if (type \u003d\u003d TokenTypes.STRING_LITERAL) {\n+                    log(ast, MSG_STRING,\n+                        chopString(ast.getText()));\n+                }\n+                else {\n+                    log(ast, MSG_LITERAL, ast.getText());\n+                }\n             }\n-            return;\n-        }\n-\n-        // The rhs of an assignment surrounded by parentheses.\n-        if (isInTokenList(type, ASSIGNMENTS)) {\n-            assignDepth++;\n-            final DetailAST last \u003d ast.getLastChild();\n-            if (last.getType() \u003d\u003d TokenTypes.RPAREN) {\n-                log(ast, MSG_ASSIGN);\n+            // The rhs of an assignment surrounded by parentheses.\n+            else if (isInTokenList(type, ASSIGNMENTS)) {\n+                assignDepth++;\n+                final DetailAST last \u003d ast.getLastChild();\n+                if (last.getType() \u003d\u003d TokenTypes.RPAREN) {\n+                    log(ast, MSG_ASSIGN);\n+                }\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "4d2e6647f9e8385749c382bcab5e64965a943178": {
      "type": "Ybodychange",
      "commitMessage": "Rename boolean methods to start with question word. #1555\n\nFixes `BooleanMethodNameMustStartWithQuestion` inspection violations.\n\nDescription:\n\u003eReports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection.\n",
      "commitDate": 1440705239000,
      "commitName": "4d2e6647f9e8385749c382bcab5e64965a943178",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440498222000,
      "commitNameOld": "07ffe4625fe9df98233c9e72f4e7948c55b454a1",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 2.4,
      "commitsBetweenForRepo": 81,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n     public void visitToken(DetailAST ast) {\n         final int type \u003d ast.getType();\n         final DetailAST parent \u003d ast.getParent();\n \n         if (type \u003d\u003d TokenTypes.ASSIGN\n             \u0026\u0026 parent.getType() \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR) {\n             // shouldn\u0027t process assign in annotation pairs\n             return;\n         }\n \n         // An identifier surrounded by parentheses.\n         final boolean surrounded \u003d isSurrounded(ast);\n         if (surrounded \u0026\u0026 type \u003d\u003d TokenTypes.IDENT) {\n             parentToSkip \u003d ast.getParent();\n             log(ast, MSG_IDENT, ast.getText());\n             return;\n         }\n \n         // A literal (numeric or string) surrounded by parentheses.\n-        if (surrounded \u0026\u0026 inTokenList(type, LITERALS)) {\n+        if (surrounded \u0026\u0026 isInTokenList(type, LITERALS)) {\n             parentToSkip \u003d ast.getParent();\n             if (type \u003d\u003d TokenTypes.STRING_LITERAL) {\n                 log(ast, MSG_STRING,\n                     chopString(ast.getText()));\n             }\n             else {\n                 log(ast, MSG_LITERAL, ast.getText());\n             }\n             return;\n         }\n \n         // The rhs of an assignment surrounded by parentheses.\n-        if (inTokenList(type, ASSIGNMENTS)) {\n+        if (isInTokenList(type, ASSIGNMENTS)) {\n             assignDepth++;\n             final DetailAST last \u003d ast.getLastChild();\n             if (last.getType() \u003d\u003d TokenTypes.RPAREN) {\n                 log(ast, MSG_ASSIGN);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "dba746ba9387bee04ed362254abb5d9ed35169cd": {
      "type": "Ybodychange",
      "commitMessage": "Fix PMD violations from PrematureDeclaration rule. #948\n",
      "commitDate": 1431536292000,
      "commitName": "dba746ba9387bee04ed362254abb5d9ed35169cd",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1430353274000,
      "commitNameOld": "c0446a825514ea0279b8c22f633f2c4e3c73dc1f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 13.69,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n     public void visitToken(DetailAST ast)\n     {\n         final int type \u003d ast.getType();\n-        final boolean surrounded \u003d isSurrounded(ast);\n         final DetailAST parent \u003d ast.getParent();\n \n         if (type \u003d\u003d TokenTypes.ASSIGN\n             \u0026\u0026 parent.getType() \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR)\n         {\n             // shouldn\u0027t process assign in annotation pairs\n             return;\n         }\n \n         // An identifier surrounded by parentheses.\n+        final boolean surrounded \u003d isSurrounded(ast);\n         if (surrounded \u0026\u0026 type \u003d\u003d TokenTypes.IDENT) {\n             parentToSkip \u003d ast.getParent();\n             log(ast, MSG_IDENT, ast.getText());\n             return;\n         }\n \n         // A literal (numeric or string) surrounded by parentheses.\n         if (surrounded \u0026\u0026 inTokenList(type, LITERALS)) {\n             parentToSkip \u003d ast.getParent();\n             if (type \u003d\u003d TokenTypes.STRING_LITERAL) {\n                 log(ast, MSG_STRING,\n                     chopString(ast.getText()));\n             }\n             else {\n                 log(ast, MSG_LITERAL, ast.getText());\n             }\n             return;\n         }\n \n         // The rhs of an assignment surrounded by parentheses.\n         if (inTokenList(type, ASSIGNMENTS)) {\n             assignDepth++;\n             final DetailAST last \u003d ast.getLastChild();\n             if (last.getType() \u003d\u003d TokenTypes.RPAREN) {\n                 log(ast, MSG_ASSIGN);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": 1426023398000,
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1424437367000,
      "commitNameOld": "27149f3504a2f350b74f456a9bffbae76a460060",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 18.36,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n     public void visitToken(DetailAST ast)\n     {\n         final int type \u003d ast.getType();\n         final boolean surrounded \u003d isSurrounded(ast);\n         final DetailAST parent \u003d ast.getParent();\n \n-        if ((type \u003d\u003d TokenTypes.ASSIGN)\n-            \u0026\u0026 (parent.getType() \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR))\n+        if (type \u003d\u003d TokenTypes.ASSIGN\n+            \u0026\u0026 parent.getType() \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR)\n         {\n             // shouldn\u0027t process assign in annotation pairs\n             return;\n         }\n \n         // An identifier surrounded by parentheses.\n-        if (surrounded \u0026\u0026 (type \u003d\u003d TokenTypes.IDENT)) {\n+        if (surrounded \u0026\u0026 type \u003d\u003d TokenTypes.IDENT) {\n             parentToSkip \u003d ast.getParent();\n             log(ast, MSG_IDENT, ast.getText());\n             return;\n         }\n \n         // A literal (numeric or string) surrounded by parentheses.\n         if (surrounded \u0026\u0026 inTokenList(type, LITERALS)) {\n             parentToSkip \u003d ast.getParent();\n             if (type \u003d\u003d TokenTypes.STRING_LITERAL) {\n                 log(ast, MSG_STRING,\n                     chopString(ast.getText()));\n             }\n             else {\n                 log(ast, MSG_LITERAL, ast.getText());\n             }\n             return;\n         }\n \n         // The rhs of an assignment surrounded by parentheses.\n         if (inTokenList(type, ASSIGNMENTS)) {\n             assignDepth++;\n             final DetailAST last \u003d ast.getLastChild();\n             if (last.getType() \u003d\u003d TokenTypes.RPAREN) {\n                 log(ast, MSG_ASSIGN);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "27149f3504a2f350b74f456a9bffbae76a460060": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, coding package, issue #537\n",
      "commitDate": 1424437367000,
      "commitName": "27149f3504a2f350b74f456a9bffbae76a460060",
      "commitAuthor": "alexkravin",
      "commitDateOld": 1424294072000,
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n     public void visitToken(DetailAST ast)\n     {\n         final int type \u003d ast.getType();\n         final boolean surrounded \u003d isSurrounded(ast);\n         final DetailAST parent \u003d ast.getParent();\n \n         if ((type \u003d\u003d TokenTypes.ASSIGN)\n             \u0026\u0026 (parent.getType() \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR))\n         {\n             // shouldn\u0027t process assign in annotation pairs\n             return;\n         }\n \n         // An identifier surrounded by parentheses.\n         if (surrounded \u0026\u0026 (type \u003d\u003d TokenTypes.IDENT)) {\n             parentToSkip \u003d ast.getParent();\n-            log(ast, \"unnecessary.paren.ident\", ast.getText());\n+            log(ast, MSG_IDENT, ast.getText());\n             return;\n         }\n \n         // A literal (numeric or string) surrounded by parentheses.\n         if (surrounded \u0026\u0026 inTokenList(type, LITERALS)) {\n             parentToSkip \u003d ast.getParent();\n             if (type \u003d\u003d TokenTypes.STRING_LITERAL) {\n-                log(ast, \"unnecessary.paren.string\",\n+                log(ast, MSG_STRING,\n                     chopString(ast.getText()));\n             }\n             else {\n-                log(ast, \"unnecessary.paren.literal\", ast.getText());\n+                log(ast, MSG_LITERAL, ast.getText());\n             }\n             return;\n         }\n \n         // The rhs of an assignment surrounded by parentheses.\n         if (inTokenList(type, ASSIGNMENTS)) {\n             assignDepth++;\n             final DetailAST last \u003d ast.getLastChild();\n             if (last.getType() \u003d\u003d TokenTypes.RPAREN) {\n-                log(ast, \"unnecessary.paren.assign\");\n+                log(ast, MSG_ASSIGN);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, coding, #512\n",
      "commitDate": 1421677214000,
      "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "c2d3932843e70e4bb5df7161800aca248f9af778": {
      "type": "Ybodychange",
      "commitMessage": "Clean up the use of ()\u0027s\n",
      "commitDate": 1152242806000,
      "commitName": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1130786628000,
      "commitNameOld": "1aee9d55cc5bd8cca011e17369f6e370efcc85bb",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 248.34,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final int type \u003d aAST.getType();\n         final boolean surrounded \u003d isSurrounded(aAST);\n         final DetailAST parent \u003d aAST.getParent();\n \n-        if (type \u003d\u003d TokenTypes.ASSIGN\n-            \u0026\u0026 parent.getType() \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR)\n+        if ((type \u003d\u003d TokenTypes.ASSIGN)\n+            \u0026\u0026 (parent.getType() \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR))\n         {\n             // shouldn\u0027t process assign in annotation pairs\n             return;\n         }\n \n         // An identifier surrounded by parentheses.\n-        if (surrounded \u0026\u0026 type \u003d\u003d TokenTypes.IDENT) {\n+        if (surrounded \u0026\u0026 (type \u003d\u003d TokenTypes.IDENT)) {\n             mParentToSkip \u003d aAST.getParent();\n             log(aAST, \"unnecessary.paren.ident\", aAST.getText());\n             return;\n         }\n \n         // A literal (numeric or string) surrounded by parentheses.\n         if (surrounded \u0026\u0026 inTokenList(type, LITERALS)) {\n             mParentToSkip \u003d aAST.getParent();\n             if (type \u003d\u003d TokenTypes.STRING_LITERAL) {\n                 log(aAST, \"unnecessary.paren.string\",\n                     chopString(aAST.getText()));\n             }\n             else {\n                 log(aAST, \"unnecessary.paren.literal\", aAST.getText());\n             }\n             return;\n         }\n \n         // The rhs of an assignment surrounded by parentheses.\n         if (inTokenList(type, ASSIGNMENTS)) {\n             mAssignDepth++;\n             final DetailAST last \u003d aAST.getLastChild();\n             if (last.getType() \u003d\u003d TokenTypes.RPAREN) {\n                 log(aAST, \"unnecessary.paren.assign\");\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "7dd31794bcc6258ffaa1ed5533a3b5a7c2f2af1a": {
      "type": "Ybodychange",
      "commitMessage": "Two more annotation-related problems (module Indentation, bug 1109214 and module UnnecessaryParentheses, bug 1109238)\n",
      "commitDate": 1108996663000,
      "commitName": "7dd31794bcc6258ffaa1ed5533a3b5a7c2f2af1a",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1105267857000,
      "commitNameOld": "0d887cde58e54d920644ee543dab346b93e8aae9",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 43.16,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,42 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final int type \u003d aAST.getType();\n         final boolean surrounded \u003d isSurrounded(aAST);\n+        final DetailAST parent \u003d aAST.getParent();\n+\n+        if (type \u003d\u003d TokenTypes.ASSIGN\n+            \u0026\u0026 parent.getType() \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR)\n+        {\n+            // shouldn\u0027t process assign in annotation pairs\n+            return;\n+        }\n \n         // An identifier surrounded by parentheses.\n         if (surrounded \u0026\u0026 type \u003d\u003d TokenTypes.IDENT) {\n             mParentToSkip \u003d aAST.getParent();\n             log(aAST, \"unnecessary.paren.ident\", aAST.getText());\n             return;\n         }\n \n         // A literal (numeric or string) surrounded by parentheses.\n         if (surrounded \u0026\u0026 inTokenList(type, LITERALS)) {\n             mParentToSkip \u003d aAST.getParent();\n             if (type \u003d\u003d TokenTypes.STRING_LITERAL) {\n                 log(aAST, \"unnecessary.paren.string\",\n                     chopString(aAST.getText()));\n             }\n             else {\n                 log(aAST, \"unnecessary.paren.literal\", aAST.getText());\n             }\n             return;\n         }\n \n         // The rhs of an assignment surrounded by parentheses.\n         if (inTokenList(type, ASSIGNMENTS)) {\n             mAssignDepth++;\n             final DetailAST last \u003d aAST.getLastChild();\n             if (last.getType() \u003d\u003d TokenTypes.RPAREN) {\n                 log(aAST, \"unnecessary.paren.assign\");\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "8e5c074c4403492df21fce8ca2c86eddd7dff9d2": {
      "type": "Yintroduced",
      "commitMessage": "UnnecessaryParentheses check (patch from Eric Roe)\n",
      "commitDate": 1078814441000,
      "commitName": "8e5c074c4403492df21fce8ca2c86eddd7dff9d2",
      "commitAuthor": "Oleg Sukhodolsky"
    }
  }
}