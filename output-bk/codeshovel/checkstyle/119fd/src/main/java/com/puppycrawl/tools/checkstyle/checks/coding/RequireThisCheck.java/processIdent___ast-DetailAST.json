{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "RequireThisCheck.java",
  "functionName": "processIdent",
  "functionId": "processIdent___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
  "functionStartLine": 277,
  "functionEndLine": 307,
  "changeHistory": [
    "0c20ec3c398c1c85e12e2c4f1d9b874476ced4df",
    "d274db7b321e4624fbdc86f6f3d5cbf9c0830a25",
    "6c04cd63af392376159dc7aae41d85bbc348e96d",
    "f52306ff7799ea2b2e4d99fba7040a11b186d68a",
    "8c3e4a50749044ae3177fc4c84db9c4fd93abca2",
    "68959eeefff4d4a5b295cefbec242c643d523c6b",
    "bc83a3a82fc14ac5f83dca972d7e48776d2b98d9",
    "5a9b7249e3d092a78ac8e7d48aeeb62bf1c44e20",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
    "ecd7ee879aa6cbc51fcb41093dbf42843256184f",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "907a19906f790ce8faea7aa74e12608538dca1b6",
    "2fe9f501d86b6e70aa64f4474ae0863bb0b928d5",
    "f8cb0a41bcb41f659ab5c90aaec4b86ace25feb4",
    "c2d3932843e70e4bb5df7161800aca248f9af778",
    "2e2047a853cac4a6fd6ab90bf77a6c189adbfa2c",
    "b5c738e6d0118111481daee0afd93b2a2d7d916a",
    "b090a07e19e1ce8452aa93c370724ef368bf5891",
    "2f70947ed74ab968324fdcf83f808ff1d88df1fb",
    "05526332666bc5142f8cf29a941435527c20fb9c",
    "95871dcc266d181b4c960a2ff88daa3e713ef656",
    "80f34569e748731253b4cdc5c2c201c754a0f32a"
  ],
  "changeHistoryShort": {
    "0c20ec3c398c1c85e12e2c4f1d9b874476ced4df": "Ybodychange",
    "d274db7b321e4624fbdc86f6f3d5cbf9c0830a25": "Ybodychange",
    "6c04cd63af392376159dc7aae41d85bbc348e96d": "Ybodychange",
    "f52306ff7799ea2b2e4d99fba7040a11b186d68a": "Ybodychange",
    "8c3e4a50749044ae3177fc4c84db9c4fd93abca2": "Ybodychange",
    "68959eeefff4d4a5b295cefbec242c643d523c6b": "Ybodychange",
    "bc83a3a82fc14ac5f83dca972d7e48776d2b98d9": "Yrename",
    "5a9b7249e3d092a78ac8e7d48aeeb62bf1c44e20": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": "Ymultichange(Yparameterchange,Ybodychange)",
    "ecd7ee879aa6cbc51fcb41093dbf42843256184f": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "907a19906f790ce8faea7aa74e12608538dca1b6": "Ybodychange",
    "2fe9f501d86b6e70aa64f4474ae0863bb0b928d5": "Ybodychange",
    "f8cb0a41bcb41f659ab5c90aaec4b86ace25feb4": "Ybodychange",
    "c2d3932843e70e4bb5df7161800aca248f9af778": "Ybodychange",
    "2e2047a853cac4a6fd6ab90bf77a6c189adbfa2c": "Ybodychange",
    "b5c738e6d0118111481daee0afd93b2a2d7d916a": "Ybodychange",
    "b090a07e19e1ce8452aa93c370724ef368bf5891": "Ybodychange",
    "2f70947ed74ab968324fdcf83f808ff1d88df1fb": "Ybodychange",
    "05526332666bc5142f8cf29a941435527c20fb9c": "Ybodychange",
    "95871dcc266d181b4c960a2ff88daa3e713ef656": "Ybodychange",
    "80f34569e748731253b4cdc5c2c201c754a0f32a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0c20ec3c398c1c85e12e2c4f1d9b874476ced4df": {
      "type": "Ybodychange",
      "commitMessage": "Pull #5363: added missing annotation token definition",
      "commitDate": 1514005623000,
      "commitName": "0c20ec3c398c1c85e12e2c4f1d9b874476ced4df",
      "commitAuthor": "rnveach",
      "commitDateOld": 1513362423000,
      "commitNameOld": "e702daf7bff9409a96a9df6bd7eb9405feb62549",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 7.44,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,31 @@\n     private void processIdent(DetailAST ast) {\n-        final int parentType \u003d ast.getParent().getType();\n+        int parentType \u003d ast.getParent().getType();\n+        if (parentType \u003d\u003d TokenTypes.EXPR\n+                \u0026\u0026 ast.getParent().getParent().getParent().getType()\n+                    \u003d\u003d TokenTypes.ANNOTATION_FIELD_DEF) {\n+            parentType \u003d TokenTypes.ANNOTATION_FIELD_DEF;\n+        }\n         switch (parentType) {\n             case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n             case TokenTypes.ANNOTATION:\n             case TokenTypes.ANNOTATION_FIELD_DEF:\n                 // no need to check annotations content\n                 break;\n             case TokenTypes.METHOD_CALL:\n                 if (checkMethods) {\n                     final AbstractFrame frame \u003d getMethodWithoutThis(ast);\n                     if (frame !\u003d null) {\n                         logViolation(MSG_METHOD, ast, frame);\n                     }\n                 }\n                 break;\n             default:\n                 if (checkFields) {\n                     final AbstractFrame frame \u003d getFieldWithoutThis(ast, parentType);\n                     if (frame !\u003d null) {\n                         logViolation(MSG_VARIABLE, ast, frame);\n                     }\n                 }\n                 break;\n         }\n     }\n\\ No newline at end of file\n"
    },
    "d274db7b321e4624fbdc86f6f3d5cbf9c0830a25": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2362: Add \u0027validateOnlyOverlapping\u0027 option for RequireThisCheck\n",
      "commitDate": 1457102074000,
      "commitName": "d274db7b321e4624fbdc86f6f3d5cbf9c0830a25",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": 1455889109000,
      "commitNameOld": "f6bec165c9c6b6d8cc430cb0694dd42ccb0b7f69",
      "commitAuthorOld": "Vladislav Lisetskiy",
      "daysBetweenCommits": 14.04,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,26 @@\n     private void processIdent(DetailAST ast) {\n         final int parentType \u003d ast.getParent().getType();\n         switch (parentType) {\n             case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n             case TokenTypes.ANNOTATION:\n             case TokenTypes.ANNOTATION_FIELD_DEF:\n                 // no need to check annotations content\n                 break;\n             case TokenTypes.METHOD_CALL:\n-                // let\u0027s check method calls\n                 if (checkMethods) {\n-                    final AbstractFrame frame \u003d checkMethod(ast);\n+                    final AbstractFrame frame \u003d getMethodWithoutThis(ast);\n                     if (frame !\u003d null) {\n                         logViolation(MSG_METHOD, ast, frame);\n                     }\n                 }\n                 break;\n             default:\n                 if (checkFields) {\n-                    final AbstractFrame frame \u003d processField(ast, parentType);\n+                    final AbstractFrame frame \u003d getFieldWithoutThis(ast, parentType);\n                     if (frame !\u003d null) {\n                         logViolation(MSG_VARIABLE, ast, frame);\n                     }\n                 }\n                 break;\n         }\n     }\n\\ No newline at end of file\n"
    },
    "6c04cd63af392376159dc7aae41d85bbc348e96d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2239: Extend RequireThis check message\n",
      "commitDate": 1450994205000,
      "commitName": "6c04cd63af392376159dc7aae41d85bbc348e96d",
      "commitAuthor": "Vladislav Lisetskiy",
      "commitDateOld": 1447657308000,
      "commitNameOld": "11639b8437306390798d85fc54422b4559f553c3",
      "commitAuthorOld": "Vladislav Lisetskiy",
      "daysBetweenCommits": 38.62,
      "commitsBetweenForRepo": 152,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,27 @@\n     private void processIdent(DetailAST ast) {\n         final int parentType \u003d ast.getParent().getType();\n         switch (parentType) {\n             case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n             case TokenTypes.ANNOTATION:\n             case TokenTypes.ANNOTATION_FIELD_DEF:\n                 // no need to check annotations content\n                 break;\n             case TokenTypes.METHOD_CALL:\n                 // let\u0027s check method calls\n-                if (checkMethods \u0026\u0026 isClassMethod(ast)) {\n-                    log(ast, MSG_METHOD, ast.getText());\n+                if (checkMethods) {\n+                    final AbstractFrame frame \u003d checkMethod(ast);\n+                    if (frame !\u003d null) {\n+                        logViolation(MSG_METHOD, ast, frame);\n+                    }\n                 }\n                 break;\n             default:\n                 if (checkFields) {\n-                    processField(ast, parentType);\n+                    final AbstractFrame frame \u003d processField(ast, parentType);\n+                    if (frame !\u003d null) {\n+                        logViolation(MSG_VARIABLE, ast, frame);\n+                    }\n                 }\n                 break;\n         }\n     }\n\\ No newline at end of file\n"
    },
    "f52306ff7799ea2b2e4d99fba7040a11b186d68a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2240: Fix false negative in RequireThisCheck\n",
      "commitDate": 1447597420000,
      "commitName": "f52306ff7799ea2b2e4d99fba7040a11b186d68a",
      "commitAuthor": "Vladislav Lisetskiy",
      "commitDateOld": 1446945172000,
      "commitNameOld": "4424370783f1c41fc1e146f554468f89e8f0e88b",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 7.55,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n     private void processIdent(DetailAST ast) {\n         final int parentType \u003d ast.getParent().getType();\n         switch (parentType) {\n             case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n             case TokenTypes.ANNOTATION:\n             case TokenTypes.ANNOTATION_FIELD_DEF:\n                 // no need to check annotations content\n                 break;\n             case TokenTypes.METHOD_CALL:\n                 // let\u0027s check method calls\n-                if (checkMethods \u0026\u0026 isClassMethod(ast.getText())) {\n+                if (checkMethods \u0026\u0026 isClassMethod(ast)) {\n                     log(ast, MSG_METHOD, ast.getText());\n                 }\n                 break;\n             default:\n                 if (checkFields) {\n                     processField(ast, parentType);\n                 }\n                 break;\n         }\n     }\n\\ No newline at end of file\n"
    },
    "8c3e4a50749044ae3177fc4c84db9c4fd93abca2": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: MultipleStringLiterals violations partial fix\n",
      "commitDate": 1440504773000,
      "commitName": "8c3e4a50749044ae3177fc4c84db9c4fd93abca2",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": 1440040911000,
      "commitNameOld": "efa16e17bf710b7b24af828296c2337612912ba9",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 5.37,
      "commitsBetweenForRepo": 102,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n     private void processIdent(DetailAST ast) {\n         final int parentType \u003d ast.getParent().getType();\n         switch (parentType) {\n             case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n             case TokenTypes.ANNOTATION:\n             case TokenTypes.ANNOTATION_FIELD_DEF:\n                 // no need to check annotations content\n                 break;\n             case TokenTypes.METHOD_CALL:\n                 // let\u0027s check method calls\n                 if (checkMethods \u0026\u0026 isClassMethod(ast.getText())) {\n-                    log(ast, \"require.this.method\", ast.getText());\n+                    log(ast, MSG_METHOD, ast.getText());\n                 }\n                 break;\n             default:\n                 if (checkFields) {\n                     processField(ast, parentType);\n                 }\n                 break;\n         }\n     }\n\\ No newline at end of file\n"
    },
    "68959eeefff4d4a5b295cefbec242c643d523c6b": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: AvoidNestedBlocks, FinalLocalVariable, RegexpSingleline (THIS as a lock) violations fixed\n",
      "commitDate": 1439006908000,
      "commitName": "68959eeefff4d4a5b295cefbec242c643d523c6b",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": 1437631122000,
      "commitNameOld": "acbd47a66b01acc392a7bd37ad3a2e65eecd308a",
      "commitAuthorOld": "Aleksandr Ivanov",
      "daysBetweenCommits": 15.92,
      "commitsBetweenForRepo": 157,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,21 @@\n     private void processIdent(DetailAST ast) {\n         final int parentType \u003d ast.getParent().getType();\n         switch (parentType) {\n             case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n             case TokenTypes.ANNOTATION:\n             case TokenTypes.ANNOTATION_FIELD_DEF:\n                 // no need to check annotations content\n                 break;\n-            case TokenTypes.METHOD_CALL: {\n+            case TokenTypes.METHOD_CALL:\n                 // let\u0027s check method calls\n                 if (checkMethods \u0026\u0026 isClassMethod(ast.getText())) {\n                     log(ast, \"require.this.method\", ast.getText());\n                 }\n                 break;\n-            }\n-            default: {\n+            default:\n                 if (checkFields) {\n                     processField(ast, parentType);\n                 }\n                 break;\n-            }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "bc83a3a82fc14ac5f83dca972d7e48776d2b98d9": {
      "type": "Yrename",
      "commitMessage": "Fix AbbreviationAsWordInName Check in Checkstyle Code. #945\n",
      "commitDate": 1435420373000,
      "commitName": "bc83a3a82fc14ac5f83dca972d7e48776d2b98d9",
      "commitAuthor": "Bhavik Patel",
      "commitDateOld": 1434649920000,
      "commitNameOld": "eb5896a4a1d66552f5100046413f15d62b485b62",
      "commitAuthorOld": "Bhavik Patel",
      "daysBetweenCommits": 8.92,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n-    private void processIDENT(DetailAST ast) {\n+    private void processIdent(DetailAST ast) {\n         final int parentType \u003d ast.getParent().getType();\n         switch (parentType) {\n             case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n             case TokenTypes.ANNOTATION:\n             case TokenTypes.ANNOTATION_FIELD_DEF:\n                 // no need to check annotations content\n                 break;\n             case TokenTypes.METHOD_CALL: {\n                 // let\u0027s check method calls\n                 if (checkMethods \u0026\u0026 isClassMethod(ast.getText())) {\n                     log(ast, \"require.this.method\", ast.getText());\n                 }\n                 break;\n             }\n             default: {\n                 if (checkFields) {\n                     processField(ast, parentType);\n                 }\n                 break;\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "5a9b7249e3d092a78ac8e7d48aeeb62bf1c44e20": {
      "type": "Ybodychange",
      "commitMessage": "RequireThisCheck updated to follow Cyclomatic Complexity rule. #954\n",
      "commitDate": 1434344164000,
      "commitName": "5a9b7249e3d092a78ac8e7d48aeeb62bf1c44e20",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": 1431863229000,
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 28.71,
      "commitsBetweenForRepo": 147,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,23 @@\n     private void processIDENT(DetailAST ast) {\n         final int parentType \u003d ast.getParent().getType();\n-\n-        if (parentType \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR\n-            || parentType \u003d\u003d TokenTypes.ANNOTATION\n-            || parentType \u003d\u003d TokenTypes.ANNOTATION_FIELD_DEF) {\n-            //cannot refer to \u0027this\u0027 from annotations\n-            return;\n-        }\n-\n-        // let\u0027s check method calls\n-        if (parentType \u003d\u003d TokenTypes.METHOD_CALL) {\n-            if (checkMethods \u0026\u0026 isClassMethod(ast.getText())) {\n-                log(ast, \"require.this.method\", ast.getText());\n+        switch (parentType) {\n+            case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n+            case TokenTypes.ANNOTATION:\n+            case TokenTypes.ANNOTATION_FIELD_DEF:\n+                // no need to check annotations content\n+                break;\n+            case TokenTypes.METHOD_CALL: {\n+                // let\u0027s check method calls\n+                if (checkMethods \u0026\u0026 isClassMethod(ast.getText())) {\n+                    log(ast, \"require.this.method\", ast.getText());\n+                }\n+                break;\n             }\n-            return;\n-        }\n-\n-        // let\u0027s check fields\n-        if (!checkFields) {\n-            // we shouldn\u0027t check fields\n-            return;\n-        }\n-\n-        if (ScopeUtils.getSurroundingScope(ast) \u003d\u003d null) {\n-            // it is not a class or interface it\u0027s\n-            // either import or package\n-            // we shouldn\u0027t checks this\n-            return;\n-        }\n-\n-        if (parentType \u003d\u003d TokenTypes.DOT\n-            \u0026\u0026 ast.getPreviousSibling() !\u003d null) {\n-            // it\u0027s the method name in a method call; no problem\n-            return;\n-        }\n-        if (parentType \u003d\u003d TokenTypes.TYPE\n-            || parentType \u003d\u003d TokenTypes.LITERAL_NEW) {\n-            // it\u0027s a type name; no problem\n-            return;\n-        }\n-        if (parentType \u003d\u003d TokenTypes.VARIABLE_DEF\n-            || parentType \u003d\u003d TokenTypes.CTOR_DEF\n-            || parentType \u003d\u003d TokenTypes.METHOD_DEF\n-            || parentType \u003d\u003d TokenTypes.CLASS_DEF\n-            || parentType \u003d\u003d TokenTypes.ENUM_DEF\n-            || parentType \u003d\u003d TokenTypes.INTERFACE_DEF\n-            || parentType \u003d\u003d TokenTypes.PARAMETER_DEF\n-            || parentType \u003d\u003d TokenTypes.TYPE_ARGUMENT) {\n-            // it\u0027s being declared; no problem\n-            return;\n-        }\n-\n-        final String name \u003d ast.getText();\n-        if (isClassField(name)) {\n-            log(ast, \"require.this.variable\", name);\n+            default: {\n+                if (checkFields) {\n+                    processField(ast, parentType);\n+                }\n+                break;\n+            }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": 1426023398000,
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1425998839000,
      "commitNameOld": "dc146b088b98ac1023e896f9559ddd06a3995ef8",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.28,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,63 @@\n     private void processIDENT(DetailAST ast)\n     {\n         final int parentType \u003d ast.getParent().getType();\n \n         if (parentType \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR\n             || parentType \u003d\u003d TokenTypes.ANNOTATION\n             || parentType \u003d\u003d TokenTypes.ANNOTATION_FIELD_DEF)\n         {\n             //cannot refer to \u0027this\u0027 from annotations\n             return;\n         }\n \n         // let\u0027s check method calls\n         if (parentType \u003d\u003d TokenTypes.METHOD_CALL) {\n             if (checkMethods \u0026\u0026 isClassMethod(ast.getText())) {\n                 log(ast, \"require.this.method\", ast.getText());\n             }\n             return;\n         }\n \n         // let\u0027s check fields\n         if (!checkFields) {\n             // we shouldn\u0027t check fields\n             return;\n         }\n \n         if (ScopeUtils.getSurroundingScope(ast) \u003d\u003d null) {\n             // it is not a class or interface it\u0027s\n             // either import or package\n             // we shouldn\u0027t checks this\n             return;\n         }\n \n-        if ((parentType \u003d\u003d TokenTypes.DOT)\n-            \u0026\u0026 (ast.getPreviousSibling() !\u003d null))\n+        if (parentType \u003d\u003d TokenTypes.DOT\n+            \u0026\u0026 ast.getPreviousSibling() !\u003d null)\n         {\n             // it\u0027s the method name in a method call; no problem\n             return;\n         }\n-        if ((parentType \u003d\u003d TokenTypes.TYPE)\n-            || (parentType \u003d\u003d TokenTypes.LITERAL_NEW))\n+        if (parentType \u003d\u003d TokenTypes.TYPE\n+            || parentType \u003d\u003d TokenTypes.LITERAL_NEW)\n         {\n             // it\u0027s a type name; no problem\n             return;\n         }\n-        if ((parentType \u003d\u003d TokenTypes.VARIABLE_DEF)\n-            || (parentType \u003d\u003d TokenTypes.CTOR_DEF)\n-            || (parentType \u003d\u003d TokenTypes.METHOD_DEF)\n-            || (parentType \u003d\u003d TokenTypes.CLASS_DEF)\n-            || (parentType \u003d\u003d TokenTypes.ENUM_DEF)\n-            || (parentType \u003d\u003d TokenTypes.INTERFACE_DEF)\n-            || (parentType \u003d\u003d TokenTypes.PARAMETER_DEF)\n-            || (parentType \u003d\u003d TokenTypes.TYPE_ARGUMENT))\n+        if (parentType \u003d\u003d TokenTypes.VARIABLE_DEF\n+            || parentType \u003d\u003d TokenTypes.CTOR_DEF\n+            || parentType \u003d\u003d TokenTypes.METHOD_DEF\n+            || parentType \u003d\u003d TokenTypes.CLASS_DEF\n+            || parentType \u003d\u003d TokenTypes.ENUM_DEF\n+            || parentType \u003d\u003d TokenTypes.INTERFACE_DEF\n+            || parentType \u003d\u003d TokenTypes.PARAMETER_DEF\n+            || parentType \u003d\u003d TokenTypes.TYPE_ARGUMENT)\n         {\n             // it\u0027s being declared; no problem\n             return;\n         }\n \n         final String name \u003d ast.getText();\n         if (isClassField(name)) {\n             log(ast, \"require.this.variable\", name);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, coding, #512\n",
      "commitDate": 1421677214000,
      "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "ecd7ee879aa6cbc51fcb41093dbf42843256184f": {
      "type": "Ybodychange",
      "commitMessage": "Issue #257 RequireThis triggers when try-with-resources defines resource with same name as method\n",
      "commitDate": 1419449664000,
      "commitName": "ecd7ee879aa6cbc51fcb41093dbf42843256184f",
      "commitAuthor": "ychulovskyy",
      "commitDateOld": 1410140363000,
      "commitNameOld": "465efcd6e07314f81381551c338a50aede5d6626",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 107.75,
      "commitsBetweenForRepo": 295,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,63 @@\n     private void processIDENT(DetailAST aAST)\n     {\n         final int parentType \u003d aAST.getParent().getType();\n \n         if (parentType \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR\n             || parentType \u003d\u003d TokenTypes.ANNOTATION\n             || parentType \u003d\u003d TokenTypes.ANNOTATION_FIELD_DEF)\n         {\n             //cannot refer to \u0027this\u0027 from annotations\n             return;\n         }\n \n         // let\u0027s check method calls\n         if (parentType \u003d\u003d TokenTypes.METHOD_CALL) {\n-            if (mCheckMethods \u0026\u0026 isClassField(aAST.getText())) {\n+            if (mCheckMethods \u0026\u0026 isClassMethod(aAST.getText())) {\n                 log(aAST, \"require.this.method\", aAST.getText());\n             }\n             return;\n         }\n \n         // let\u0027s check fields\n         if (!mCheckFields) {\n             // we shouldn\u0027t check fields\n             return;\n         }\n \n         if (ScopeUtils.getSurroundingScope(aAST) \u003d\u003d null) {\n             // it is not a class or interface it\u0027s\n             // either import or package\n             // we shouldn\u0027t checks this\n             return;\n         }\n \n         if ((parentType \u003d\u003d TokenTypes.DOT)\n             \u0026\u0026 (aAST.getPreviousSibling() !\u003d null))\n         {\n             // it\u0027s the method name in a method call; no problem\n             return;\n         }\n         if ((parentType \u003d\u003d TokenTypes.TYPE)\n             || (parentType \u003d\u003d TokenTypes.LITERAL_NEW))\n         {\n             // it\u0027s a type name; no problem\n             return;\n         }\n         if ((parentType \u003d\u003d TokenTypes.VARIABLE_DEF)\n             || (parentType \u003d\u003d TokenTypes.CTOR_DEF)\n             || (parentType \u003d\u003d TokenTypes.METHOD_DEF)\n             || (parentType \u003d\u003d TokenTypes.CLASS_DEF)\n             || (parentType \u003d\u003d TokenTypes.ENUM_DEF)\n             || (parentType \u003d\u003d TokenTypes.INTERFACE_DEF)\n             || (parentType \u003d\u003d TokenTypes.PARAMETER_DEF)\n             || (parentType \u003d\u003d TokenTypes.TYPE_ARGUMENT))\n         {\n             // it\u0027s being declared; no problem\n             return;\n         }\n \n         final String name \u003d aAST.getText();\n         if (isClassField(name)) {\n             log(aAST, \"require.this.variable\", name);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "907a19906f790ce8faea7aa74e12608538dca1b6": {
      "type": "Ybodychange",
      "commitMessage": "fix for #41 RequireThisCheck doesn\u0027t check methods and fields that are declared below usage\n",
      "commitDate": 1383149544000,
      "commitName": "907a19906f790ce8faea7aa74e12608538dca1b6",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1380946942000,
      "commitNameOld": "788f87df4db1368ee0563e1ba1199177618cc01f",
      "commitAuthorOld": "picomancer",
      "daysBetweenCommits": 25.49,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,63 @@\n     private void processIDENT(DetailAST aAST)\n     {\n         final int parentType \u003d aAST.getParent().getType();\n \n         if (parentType \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR\n             || parentType \u003d\u003d TokenTypes.ANNOTATION\n             || parentType \u003d\u003d TokenTypes.ANNOTATION_FIELD_DEF)\n         {\n             //cannot refer to \u0027this\u0027 from annotations\n             return;\n         }\n \n         // let\u0027s check method calls\n         if (parentType \u003d\u003d TokenTypes.METHOD_CALL) {\n             if (mCheckMethods \u0026\u0026 isClassField(aAST.getText())) {\n                 log(aAST, \"require.this.method\", aAST.getText());\n             }\n             return;\n         }\n \n         // let\u0027s check fields\n         if (!mCheckFields) {\n             // we shouldn\u0027t check fields\n             return;\n         }\n \n         if (ScopeUtils.getSurroundingScope(aAST) \u003d\u003d null) {\n             // it is not a class or interface it\u0027s\n             // either import or package\n             // we shouldn\u0027t checks this\n             return;\n         }\n \n         if ((parentType \u003d\u003d TokenTypes.DOT)\n             \u0026\u0026 (aAST.getPreviousSibling() !\u003d null))\n         {\n             // it\u0027s the method name in a method call; no problem\n             return;\n         }\n         if ((parentType \u003d\u003d TokenTypes.TYPE)\n             || (parentType \u003d\u003d TokenTypes.LITERAL_NEW))\n         {\n             // it\u0027s a type name; no problem\n             return;\n         }\n         if ((parentType \u003d\u003d TokenTypes.VARIABLE_DEF)\n             || (parentType \u003d\u003d TokenTypes.CTOR_DEF)\n             || (parentType \u003d\u003d TokenTypes.METHOD_DEF)\n             || (parentType \u003d\u003d TokenTypes.CLASS_DEF)\n             || (parentType \u003d\u003d TokenTypes.ENUM_DEF)\n             || (parentType \u003d\u003d TokenTypes.INTERFACE_DEF)\n-            || (parentType \u003d\u003d TokenTypes.PARAMETER_DEF))\n+            || (parentType \u003d\u003d TokenTypes.PARAMETER_DEF)\n+            || (parentType \u003d\u003d TokenTypes.TYPE_ARGUMENT))\n         {\n             // it\u0027s being declared; no problem\n             return;\n         }\n \n         final String name \u003d aAST.getText();\n         if (isClassField(name)) {\n             log(aAST, \"require.this.variable\", name);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "2fe9f501d86b6e70aa64f4474ae0863bb0b928d5": {
      "type": "Ybodychange",
      "commitMessage": "Simple fix for bug #1155921.\nRequireThis check now ignores static fields and methods.\n",
      "commitDate": 1318450113000,
      "commitName": "2fe9f501d86b6e70aa64f4474ae0863bb0b928d5",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1310618763000,
      "commitNameOld": "a9c2910a9d58a4b1b8c2d5555fff9cea297c6df5",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 90.64,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,62 @@\n     private void processIDENT(DetailAST aAST)\n     {\n         final int parentType \u003d aAST.getParent().getType();\n \n         if (parentType \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR\n             || parentType \u003d\u003d TokenTypes.ANNOTATION\n             || parentType \u003d\u003d TokenTypes.ANNOTATION_FIELD_DEF)\n         {\n             //cannot refer to \u0027this\u0027 from annotations\n             return;\n         }\n \n         // let\u0027s check method calls\n         if (parentType \u003d\u003d TokenTypes.METHOD_CALL) {\n-            if (mCheckMethods) {\n+            if (mCheckMethods \u0026\u0026 isClassField(aAST.getText())) {\n                 log(aAST, \"require.this.method\", aAST.getText());\n             }\n             return;\n         }\n \n         // let\u0027s check fields\n         if (!mCheckFields) {\n             // we shouldn\u0027t check fields\n             return;\n         }\n \n         if (ScopeUtils.getSurroundingScope(aAST) \u003d\u003d null) {\n-            // it is not a class or inteface it\u0027s\n+            // it is not a class or interface it\u0027s\n             // either import or package\n             // we shouldn\u0027t checks this\n             return;\n         }\n \n         if ((parentType \u003d\u003d TokenTypes.DOT)\n             \u0026\u0026 (aAST.getPreviousSibling() !\u003d null))\n         {\n             // it\u0027s the method name in a method call; no problem\n             return;\n         }\n         if ((parentType \u003d\u003d TokenTypes.TYPE)\n             || (parentType \u003d\u003d TokenTypes.LITERAL_NEW))\n         {\n             // it\u0027s a type name; no problem\n             return;\n         }\n         if ((parentType \u003d\u003d TokenTypes.VARIABLE_DEF)\n             || (parentType \u003d\u003d TokenTypes.CTOR_DEF)\n             || (parentType \u003d\u003d TokenTypes.METHOD_DEF)\n             || (parentType \u003d\u003d TokenTypes.CLASS_DEF)\n             || (parentType \u003d\u003d TokenTypes.ENUM_DEF)\n             || (parentType \u003d\u003d TokenTypes.INTERFACE_DEF)\n             || (parentType \u003d\u003d TokenTypes.PARAMETER_DEF))\n         {\n             // it\u0027s being declared; no problem\n             return;\n         }\n \n         final String name \u003d aAST.getText();\n         if (isClassField(name)) {\n             log(aAST, \"require.this.variable\", name);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "f8cb0a41bcb41f659ab5c90aaec4b86ace25feb4": {
      "type": "Ybodychange",
      "commitMessage": "fixing bug#2123003\n",
      "commitDate": 1238553206000,
      "commitName": "f8cb0a41bcb41f659ab5c90aaec4b86ace25feb4",
      "commitAuthor": "Travis Schneeberger",
      "commitDateOld": 1237695418000,
      "commitNameOld": "216fcb79f9f5bbd05244364e926f261a90e697d1",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 9.93,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,62 @@\n     private void processIDENT(DetailAST aAST)\n     {\n         final int parentType \u003d aAST.getParent().getType();\n \n+        if (parentType \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR\n+            || parentType \u003d\u003d TokenTypes.ANNOTATION\n+            || parentType \u003d\u003d TokenTypes.ANNOTATION_FIELD_DEF)\n+        {\n+            //cannot refer to \u0027this\u0027 from annotations\n+            return;\n+        }\n+\n         // let\u0027s check method calls\n         if (parentType \u003d\u003d TokenTypes.METHOD_CALL) {\n             if (mCheckMethods) {\n                 log(aAST, \"require.this.method\", aAST.getText());\n             }\n             return;\n         }\n \n         // let\u0027s check fields\n         if (!mCheckFields) {\n             // we shouldn\u0027t check fields\n             return;\n         }\n \n         if (ScopeUtils.getSurroundingScope(aAST) \u003d\u003d null) {\n             // it is not a class or inteface it\u0027s\n             // either import or package\n             // we shouldn\u0027t checks this\n             return;\n         }\n \n         if ((parentType \u003d\u003d TokenTypes.DOT)\n             \u0026\u0026 (aAST.getPreviousSibling() !\u003d null))\n         {\n             // it\u0027s the method name in a method call; no problem\n             return;\n         }\n         if ((parentType \u003d\u003d TokenTypes.TYPE)\n             || (parentType \u003d\u003d TokenTypes.LITERAL_NEW))\n         {\n             // it\u0027s a type name; no problem\n             return;\n         }\n         if ((parentType \u003d\u003d TokenTypes.VARIABLE_DEF)\n             || (parentType \u003d\u003d TokenTypes.CTOR_DEF)\n             || (parentType \u003d\u003d TokenTypes.METHOD_DEF)\n             || (parentType \u003d\u003d TokenTypes.CLASS_DEF)\n             || (parentType \u003d\u003d TokenTypes.ENUM_DEF)\n             || (parentType \u003d\u003d TokenTypes.INTERFACE_DEF)\n             || (parentType \u003d\u003d TokenTypes.PARAMETER_DEF))\n         {\n             // it\u0027s being declared; no problem\n             return;\n         }\n \n         final String name \u003d aAST.getText();\n         if (isClassField(name)) {\n             log(aAST, \"require.this.variable\", name);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "c2d3932843e70e4bb5df7161800aca248f9af778": {
      "type": "Ybodychange",
      "commitMessage": "Clean up the use of ()\u0027s\n",
      "commitDate": 1152242806000,
      "commitName": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1124012284000,
      "commitNameOld": "2e2047a853cac4a6fd6ab90bf77a6c189adbfa2c",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 326.74,
      "commitsBetweenForRepo": 75,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n     private void processIDENT(DetailAST aAST)\n     {\n         final int parentType \u003d aAST.getParent().getType();\n \n         // let\u0027s check method calls\n         if (parentType \u003d\u003d TokenTypes.METHOD_CALL) {\n             if (mCheckMethods) {\n                 log(aAST, \"require.this.method\", aAST.getText());\n             }\n             return;\n         }\n \n         // let\u0027s check fields\n         if (!mCheckFields) {\n             // we shouldn\u0027t check fields\n             return;\n         }\n \n         if (ScopeUtils.getSurroundingScope(aAST) \u003d\u003d null) {\n             // it is not a class or inteface it\u0027s\n             // either import or package\n             // we shouldn\u0027t checks this\n             return;\n         }\n \n-        if (parentType \u003d\u003d TokenTypes.DOT\n-            \u0026\u0026 aAST.getPreviousSibling() !\u003d null)\n+        if ((parentType \u003d\u003d TokenTypes.DOT)\n+            \u0026\u0026 (aAST.getPreviousSibling() !\u003d null))\n         {\n             // it\u0027s the method name in a method call; no problem\n             return;\n         }\n-        if (parentType \u003d\u003d TokenTypes.TYPE\n-            || parentType \u003d\u003d TokenTypes.LITERAL_NEW)\n+        if ((parentType \u003d\u003d TokenTypes.TYPE)\n+            || (parentType \u003d\u003d TokenTypes.LITERAL_NEW))\n         {\n             // it\u0027s a type name; no problem\n             return;\n         }\n-        if (parentType \u003d\u003d TokenTypes.VARIABLE_DEF\n-            || parentType \u003d\u003d TokenTypes.CTOR_DEF\n-            || parentType \u003d\u003d TokenTypes.METHOD_DEF\n-            || parentType \u003d\u003d TokenTypes.CLASS_DEF\n-            || parentType \u003d\u003d TokenTypes.ENUM_DEF\n-            || parentType \u003d\u003d TokenTypes.INTERFACE_DEF\n-            || parentType \u003d\u003d TokenTypes.PARAMETER_DEF)\n+        if ((parentType \u003d\u003d TokenTypes.VARIABLE_DEF)\n+            || (parentType \u003d\u003d TokenTypes.CTOR_DEF)\n+            || (parentType \u003d\u003d TokenTypes.METHOD_DEF)\n+            || (parentType \u003d\u003d TokenTypes.CLASS_DEF)\n+            || (parentType \u003d\u003d TokenTypes.ENUM_DEF)\n+            || (parentType \u003d\u003d TokenTypes.INTERFACE_DEF)\n+            || (parentType \u003d\u003d TokenTypes.PARAMETER_DEF))\n         {\n             // it\u0027s being declared; no problem\n             return;\n         }\n \n         final String name \u003d aAST.getText();\n         if (isClassField(name)) {\n             log(aAST, \"require.this.variable\", name);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "2e2047a853cac4a6fd6ab90bf77a6c189adbfa2c": {
      "type": "Ybodychange",
      "commitMessage": "Fixed 1257599 - RequireThis should know that there are enum and inteface definitions :)\n",
      "commitDate": 1124012284000,
      "commitName": "2e2047a853cac4a6fd6ab90bf77a6c189adbfa2c",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1113483764000,
      "commitNameOld": "b5c738e6d0118111481daee0afd93b2a2d7d916a",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 121.86,
      "commitsBetweenForRepo": 103,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,54 @@\n     private void processIDENT(DetailAST aAST)\n     {\n         final int parentType \u003d aAST.getParent().getType();\n \n         // let\u0027s check method calls\n         if (parentType \u003d\u003d TokenTypes.METHOD_CALL) {\n             if (mCheckMethods) {\n                 log(aAST, \"require.this.method\", aAST.getText());\n             }\n             return;\n         }\n \n         // let\u0027s check fields\n         if (!mCheckFields) {\n             // we shouldn\u0027t check fields\n             return;\n         }\n \n         if (ScopeUtils.getSurroundingScope(aAST) \u003d\u003d null) {\n             // it is not a class or inteface it\u0027s\n             // either import or package\n             // we shouldn\u0027t checks this\n             return;\n         }\n \n         if (parentType \u003d\u003d TokenTypes.DOT\n             \u0026\u0026 aAST.getPreviousSibling() !\u003d null)\n         {\n             // it\u0027s the method name in a method call; no problem\n             return;\n         }\n         if (parentType \u003d\u003d TokenTypes.TYPE\n             || parentType \u003d\u003d TokenTypes.LITERAL_NEW)\n         {\n             // it\u0027s a type name; no problem\n             return;\n         }\n         if (parentType \u003d\u003d TokenTypes.VARIABLE_DEF\n             || parentType \u003d\u003d TokenTypes.CTOR_DEF\n             || parentType \u003d\u003d TokenTypes.METHOD_DEF\n             || parentType \u003d\u003d TokenTypes.CLASS_DEF\n+            || parentType \u003d\u003d TokenTypes.ENUM_DEF\n+            || parentType \u003d\u003d TokenTypes.INTERFACE_DEF\n             || parentType \u003d\u003d TokenTypes.PARAMETER_DEF)\n         {\n             // it\u0027s being declared; no problem\n             return;\n         }\n \n         final String name \u003d aAST.getText();\n         if (isClassField(name)) {\n             log(aAST, \"require.this.variable\", name);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "b5c738e6d0118111481daee0afd93b2a2d7d916a": {
      "type": "Ybodychange",
      "commitMessage": "Fix for 1098126 - UnusedImportsCheck does not work properly\nwe need to collect information about declared fields and variables.\nAdded some java 1.5 support for RequireThis check, since both\nUnusedImport and RequireThis now have common superclass and it\u0027s not\nvery hard :)\nFixed couple testinputs files to make them compilable.\n",
      "commitDate": 1113483764000,
      "commitName": "b5c738e6d0118111481daee0afd93b2a2d7d916a",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1111714049000,
      "commitNameOld": "117d339322b71aee6d7684d8ce0f0e504164e798",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 20.48,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,52 @@\n     private void processIDENT(DetailAST aAST)\n     {\n         final int parentType \u003d aAST.getParent().getType();\n \n         // let\u0027s check method calls\n         if (parentType \u003d\u003d TokenTypes.METHOD_CALL) {\n             if (mCheckMethods) {\n                 log(aAST, \"require.this.method\", aAST.getText());\n             }\n             return;\n         }\n \n         // let\u0027s check fields\n         if (!mCheckFields) {\n             // we shouldn\u0027t check fields\n             return;\n         }\n \n         if (ScopeUtils.getSurroundingScope(aAST) \u003d\u003d null) {\n             // it is not a class or inteface it\u0027s\n             // either import or package\n             // we shouldn\u0027t checks this\n             return;\n         }\n \n         if (parentType \u003d\u003d TokenTypes.DOT\n             \u0026\u0026 aAST.getPreviousSibling() !\u003d null)\n         {\n             // it\u0027s the method name in a method call; no problem\n             return;\n         }\n         if (parentType \u003d\u003d TokenTypes.TYPE\n             || parentType \u003d\u003d TokenTypes.LITERAL_NEW)\n         {\n             // it\u0027s a type name; no problem\n             return;\n         }\n         if (parentType \u003d\u003d TokenTypes.VARIABLE_DEF\n             || parentType \u003d\u003d TokenTypes.CTOR_DEF\n             || parentType \u003d\u003d TokenTypes.METHOD_DEF\n             || parentType \u003d\u003d TokenTypes.CLASS_DEF\n             || parentType \u003d\u003d TokenTypes.PARAMETER_DEF)\n         {\n             // it\u0027s being declared; no problem\n             return;\n         }\n \n         final String name \u003d aAST.getText();\n-        final LexicalFrame declared \u003d this.mFrames.findFrame(name);\n-        if (declared instanceof ClassFrame) {\n+        if (isClassField(name)) {\n             log(aAST, \"require.this.variable\", name);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "b090a07e19e1ce8452aa93c370724ef368bf5891": {
      "type": "Ybodychange",
      "commitMessage": "fix for 952508 (RequireThis generates Unable find where \u0027x\u0027 is declared.\n",
      "commitDate": 1098123194000,
      "commitName": "b090a07e19e1ce8452aa93c370724ef368bf5891",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1095942189000,
      "commitNameOld": "624f82b556974bf15cafee6a057acca3dac5eec5",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 25.24,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,53 @@\n     private void processIDENT(DetailAST aAST)\n     {\n         final int parentType \u003d aAST.getParent().getType();\n \n         // let\u0027s check method calls\n         if (parentType \u003d\u003d TokenTypes.METHOD_CALL) {\n             if (mCheckMethods) {\n                 log(aAST, \"require.this.method\", aAST.getText());\n             }\n             return;\n         }\n \n         // let\u0027s check fields\n         if (!mCheckFields) {\n             // we shouldn\u0027t check fields\n             return;\n         }\n \n         if (ScopeUtils.getSurroundingScope(aAST) \u003d\u003d null) {\n             // it is not a class or inteface it\u0027s\n             // either import or package\n             // we shouldn\u0027t checks this\n             return;\n         }\n \n         if (parentType \u003d\u003d TokenTypes.DOT\n             \u0026\u0026 aAST.getPreviousSibling() !\u003d null)\n         {\n             // it\u0027s the method name in a method call; no problem\n             return;\n         }\n         if (parentType \u003d\u003d TokenTypes.TYPE\n             || parentType \u003d\u003d TokenTypes.LITERAL_NEW)\n         {\n             // it\u0027s a type name; no problem\n             return;\n         }\n         if (parentType \u003d\u003d TokenTypes.VARIABLE_DEF\n             || parentType \u003d\u003d TokenTypes.CTOR_DEF\n             || parentType \u003d\u003d TokenTypes.METHOD_DEF\n             || parentType \u003d\u003d TokenTypes.CLASS_DEF\n             || parentType \u003d\u003d TokenTypes.PARAMETER_DEF)\n         {\n             // it\u0027s being declared; no problem\n             return;\n         }\n \n         final String name \u003d aAST.getText();\n         final LexicalFrame declared \u003d this.mFrames.findFrame(name);\n-        if (declared \u003d\u003d null) {\n-            log(aAST, \"require.this.unfound.variable\", name);\n-        }\n-        else if (declared instanceof ClassFrame) {\n+        if (declared instanceof ClassFrame) {\n             log(aAST, \"require.this.variable\", name);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "2f70947ed74ab968324fdcf83f808ff1d88df1fb": {
      "type": "Ybodychange",
      "commitMessage": "Tighten up code\n",
      "commitDate": 1093528034000,
      "commitName": "2f70947ed74ab968324fdcf83f808ff1d88df1fb",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1084619241000,
      "commitNameOld": "05526332666bc5142f8cf29a941435527c20fb9c",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 103.11,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n     private void processIDENT(DetailAST aAST)\n     {\n-        int parentType \u003d aAST.getParent().getType();\n+        final int parentType \u003d aAST.getParent().getType();\n \n         // let\u0027s check method calls\n         if (parentType \u003d\u003d TokenTypes.METHOD_CALL) {\n             if (mCheckMethods) {\n                 log(aAST, \"require.this.method\", aAST.getText());\n             }\n             return;\n         }\n \n         // let\u0027s check fields\n         if (!mCheckFields) {\n             // we shouldn\u0027t check fields\n             return;\n         }\n \n         if (ScopeUtils.getSurroundingScope(aAST) \u003d\u003d null) {\n             // it is not a class or inteface it\u0027s\n             // either import or package\n             // we shouldn\u0027t checks this\n             return;\n         }\n \n         if (parentType \u003d\u003d TokenTypes.DOT\n             \u0026\u0026 aAST.getPreviousSibling() !\u003d null)\n         {\n             // it\u0027s the method name in a method call; no problem\n             return;\n         }\n         if (parentType \u003d\u003d TokenTypes.TYPE\n             || parentType \u003d\u003d TokenTypes.LITERAL_NEW)\n         {\n             // it\u0027s a type name; no problem\n             return;\n         }\n         if (parentType \u003d\u003d TokenTypes.VARIABLE_DEF\n             || parentType \u003d\u003d TokenTypes.CTOR_DEF\n             || parentType \u003d\u003d TokenTypes.METHOD_DEF\n             || parentType \u003d\u003d TokenTypes.CLASS_DEF\n             || parentType \u003d\u003d TokenTypes.PARAMETER_DEF)\n         {\n             // it\u0027s being declared; no problem\n             return;\n         }\n \n         final String name \u003d aAST.getText();\n         final LexicalFrame declared \u003d this.mFrames.findFrame(name);\n         if (declared \u003d\u003d null) {\n             log(aAST, \"require.this.unfound.variable\", name);\n         }\n         else if (declared instanceof ClassFrame) {\n             log(aAST, \"require.this.variable\", name);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "05526332666bc5142f8cf29a941435527c20fb9c": {
      "type": "Ybodychange",
      "commitMessage": "Fix for 952508 (imports and RequireThis)\n",
      "commitDate": 1084619241000,
      "commitName": "05526332666bc5142f8cf29a941435527c20fb9c",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1074648205000,
      "commitNameOld": "9e5fe92b7cfbfd61db3312c1085215c79511ba2a",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 115.41,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,56 @@\n     private void processIDENT(DetailAST aAST)\n     {\n         int parentType \u003d aAST.getParent().getType();\n \n         // let\u0027s check method calls\n         if (parentType \u003d\u003d TokenTypes.METHOD_CALL) {\n             if (mCheckMethods) {\n                 log(aAST, \"require.this.method\", aAST.getText());\n             }\n             return;\n         }\n \n         // let\u0027s check fields\n         if (!mCheckFields) {\n             // we shouldn\u0027t check fields\n             return;\n         }\n+\n+        if (ScopeUtils.getSurroundingScope(aAST) \u003d\u003d null) {\n+            // it is not a class or inteface it\u0027s\n+            // either import or package\n+            // we shouldn\u0027t checks this\n+            return;\n+        }\n+\n         if (parentType \u003d\u003d TokenTypes.DOT\n             \u0026\u0026 aAST.getPreviousSibling() !\u003d null)\n         {\n             // it\u0027s the method name in a method call; no problem\n             return;\n         }\n         if (parentType \u003d\u003d TokenTypes.TYPE\n             || parentType \u003d\u003d TokenTypes.LITERAL_NEW)\n         {\n             // it\u0027s a type name; no problem\n             return;\n         }\n         if (parentType \u003d\u003d TokenTypes.VARIABLE_DEF\n             || parentType \u003d\u003d TokenTypes.CTOR_DEF\n             || parentType \u003d\u003d TokenTypes.METHOD_DEF\n             || parentType \u003d\u003d TokenTypes.CLASS_DEF\n             || parentType \u003d\u003d TokenTypes.PARAMETER_DEF)\n         {\n             // it\u0027s being declared; no problem\n             return;\n         }\n \n         final String name \u003d aAST.getText();\n         final LexicalFrame declared \u003d this.mFrames.findFrame(name);\n         if (declared \u003d\u003d null) {\n             log(aAST, \"require.this.unfound.variable\", name);\n         }\n         else if (declared instanceof ClassFrame) {\n             log(aAST, \"require.this.variable\", name);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "95871dcc266d181b4c960a2ff88daa3e713ef656": {
      "type": "Ybodychange",
      "commitMessage": "Some enhancement and documentation for RequireThis check.\n",
      "commitDate": 1073745688000,
      "commitName": "95871dcc266d181b4c960a2ff88daa3e713ef656",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1073648248000,
      "commitNameOld": "80f34569e748731253b4cdc5c2c201c754a0f32a",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 1.13,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,48 @@\n     private void processIDENT(DetailAST aAST)\n     {\n         int parentType \u003d aAST.getParent().getType();\n \n+        // let\u0027s check method calls\n         if (parentType \u003d\u003d TokenTypes.METHOD_CALL) {\n-            log(aAST, \"require.this.method\", aAST.getText());\n+            if (mCheckMethods) {\n+                log(aAST, \"require.this.method\", aAST.getText());\n+            }\n+            return;\n+        }\n+\n+        // let\u0027s check fields\n+        if (!mCheckFields) {\n+            // we shouldn\u0027t check fields\n             return;\n         }\n         if (parentType \u003d\u003d TokenTypes.DOT\n             \u0026\u0026 aAST.getPreviousSibling() !\u003d null)\n         {\n             // it\u0027s the method name in a method call; no problem\n             return;\n         }\n         if (parentType \u003d\u003d TokenTypes.TYPE\n             || parentType \u003d\u003d TokenTypes.LITERAL_NEW)\n         {\n             // it\u0027s a type name; no problem\n             return;\n         }\n         if (parentType \u003d\u003d TokenTypes.VARIABLE_DEF\n             || parentType \u003d\u003d TokenTypes.CTOR_DEF\n             || parentType \u003d\u003d TokenTypes.METHOD_DEF\n             || parentType \u003d\u003d TokenTypes.CLASS_DEF\n             || parentType \u003d\u003d TokenTypes.PARAMETER_DEF)\n         {\n             // it\u0027s being declared; no problem\n             return;\n         }\n \n-        final LexicalFrame declared \u003d this.mFrames.findFrame(aAST.getText());\n+        final String name \u003d aAST.getText();\n+        final LexicalFrame declared \u003d this.mFrames.findFrame(name);\n         if (declared \u003d\u003d null) {\n-            log(aAST, \"require.this.unfound.variable\", aAST.getText());\n+            log(aAST, \"require.this.unfound.variable\", name);\n         }\n         else if (declared instanceof ClassFrame) {\n-            log(aAST, \"require.this.variable\", aAST.getText());\n+            log(aAST, \"require.this.variable\", name);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "80f34569e748731253b4cdc5c2c201c754a0f32a": {
      "type": "Yintroduced",
      "commitMessage": "Draft implementation of RequireThis check submitted by Stephen Bloch.  More testing needed\n",
      "commitDate": 1073648248000,
      "commitName": "80f34569e748731253b4cdc5c2c201c754a0f32a",
      "commitAuthor": "Oleg Sukhodolsky"
    }
  }
}