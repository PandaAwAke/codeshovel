{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "WriteTagCheck.java",
  "functionName": "checkTag",
  "functionId": "checkTag___lineNo-int__comment-String",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java",
  "functionStartLine": 172,
  "functionEndLine": 194,
  "changeHistory": [
    "a963f8a21bd47624ec9f1eea72c9326e2ca01c8a",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
    "77733a452387aa2ee99fdc9a737633566cc7af3d",
    "56df5087fe891069e5824abc03ae158aa0d06d66",
    "88830ca708e2deb22cae333057ebddd15f7f9c57",
    "30c3a362d45721e6925fe89ba71f0fe69d0fc471",
    "755eda4d684e71ea18bed69646e07140310b67fc",
    "3bd699bd593414d63c7139aa410f13ec8341a027",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc",
    "89a51ba032fd9126651fa9efad31baf10c006ddf",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "585f7c20a1e9e3ca4a04ffedf4e1cedc449acd97",
    "c2d3932843e70e4bb5df7161800aca248f9af778",
    "788b41973d5747c7b4699a853b62168cf0001df6",
    "96c668724bc05a11ceb031dda71efe1e9e69480d"
  ],
  "changeHistoryShort": {
    "a963f8a21bd47624ec9f1eea72c9326e2ca01c8a": "Ybodychange",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": "Ybodychange",
    "77733a452387aa2ee99fdc9a737633566cc7af3d": "Ybodychange",
    "56df5087fe891069e5824abc03ae158aa0d06d66": "Ybodychange",
    "88830ca708e2deb22cae333057ebddd15f7f9c57": "Ybodychange",
    "30c3a362d45721e6925fe89ba71f0fe69d0fc471": "Ybodychange",
    "755eda4d684e71ea18bed69646e07140310b67fc": "Ymultichange(Yparameterchange,Ybodychange)",
    "3bd699bd593414d63c7139aa410f13ec8341a027": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc": "Ybodychange",
    "89a51ba032fd9126651fa9efad31baf10c006ddf": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "585f7c20a1e9e3ca4a04ffedf4e1cedc449acd97": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
    "c2d3932843e70e4bb5df7161800aca248f9af778": "Ybodychange",
    "788b41973d5747c7b4699a853b62168cf0001df6": "Ybodychange",
    "96c668724bc05a11ceb031dda71efe1e9e69480d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a963f8a21bd47624ec9f1eea72c9326e2ca01c8a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3255: removed unnecessary string fields for patterns",
      "commitDate": 1478802862000,
      "commitName": "a963f8a21bd47624ec9f1eea72c9326e2ca01c8a",
      "commitAuthor": "rnveach",
      "commitDateOld": 1478694863000,
      "commitNameOld": "8888fa5919dc31c6abe07ddc2f5fe0e29f66ef37",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 1.25,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     private void checkTag(int lineNo, String... comment) {\n         if (tagRegExp !\u003d null) {\n             int tagCount \u003d 0;\n             for (int i \u003d 0; i \u003c comment.length; i++) {\n                 final String commentValue \u003d comment[i];\n                 final Matcher matcher \u003d tagRegExp.matcher(commentValue);\n                 if (matcher.find()) {\n                     tagCount +\u003d 1;\n                     final int contentStart \u003d matcher.start(1);\n                     final String content \u003d commentValue.substring(contentStart);\n-                    if (tagFormatRegExp \u003d\u003d null || tagFormatRegExp.matcher(content).find()) {\n+                    if (tagFormat \u003d\u003d null || tagFormat.matcher(content).find()) {\n                         logTag(lineNo + i - comment.length, tag, content);\n                     }\n                     else {\n-                        log(lineNo + i - comment.length, MSG_TAG_FORMAT, tag, tagFormat);\n+                        log(lineNo + i - comment.length, MSG_TAG_FORMAT, tag, tagFormat.pattern());\n                     }\n                 }\n             }\n             if (tagCount \u003d\u003d 0) {\n                 log(lineNo, MSG_MISSING_TAG, tag);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3143: forbid empty return statements and fixed violations",
      "commitDate": 1464356569000,
      "commitName": "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
      "commitAuthor": "rnveach",
      "commitDateOld": 1458221995000,
      "commitNameOld": "167dd96d8ca503a472bf003f187191d6b0ce586c",
      "commitAuthorOld": "Rasmus Kaj",
      "daysBetweenCommits": 71.0,
      "commitsBetweenForRepo": 145,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,23 @@\n     private void checkTag(int lineNo, String... comment) {\n-        if (tagRegExp \u003d\u003d null) {\n-            return;\n-        }\n-\n-        int tagCount \u003d 0;\n-        for (int i \u003d 0; i \u003c comment.length; i++) {\n-            final String commentValue \u003d comment[i];\n-            final Matcher matcher \u003d tagRegExp.matcher(commentValue);\n-            if (matcher.find()) {\n-                tagCount +\u003d 1;\n-                final int contentStart \u003d matcher.start(1);\n-                final String content \u003d commentValue.substring(contentStart);\n-                if (tagFormatRegExp \u003d\u003d null || tagFormatRegExp.matcher(content).find()) {\n-                    logTag(lineNo + i - comment.length, tag, content);\n-                }\n-                else {\n-                    log(lineNo + i - comment.length, MSG_TAG_FORMAT, tag, tagFormat);\n+        if (tagRegExp !\u003d null) {\n+            int tagCount \u003d 0;\n+            for (int i \u003d 0; i \u003c comment.length; i++) {\n+                final String commentValue \u003d comment[i];\n+                final Matcher matcher \u003d tagRegExp.matcher(commentValue);\n+                if (matcher.find()) {\n+                    tagCount +\u003d 1;\n+                    final int contentStart \u003d matcher.start(1);\n+                    final String content \u003d commentValue.substring(contentStart);\n+                    if (tagFormatRegExp \u003d\u003d null || tagFormatRegExp.matcher(content).find()) {\n+                        logTag(lineNo + i - comment.length, tag, content);\n+                    }\n+                    else {\n+                        log(lineNo + i - comment.length, MSG_TAG_FORMAT, tag, tagFormat);\n+                    }\n                 }\n             }\n+            if (tagCount \u003d\u003d 0) {\n+                log(lineNo, MSG_MISSING_TAG, tag);\n+            }\n         }\n-        if (tagCount \u003d\u003d 0) {\n-            log(lineNo, MSG_MISSING_TAG, tag);\n-        }\n-\n     }\n\\ No newline at end of file\n"
    },
    "77733a452387aa2ee99fdc9a737633566cc7af3d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2836: renamed error message fields to match standard naming",
      "commitDate": 1453387259000,
      "commitName": "77733a452387aa2ee99fdc9a737633566cc7af3d",
      "commitAuthor": "rnveach",
      "commitDateOld": 1451953543000,
      "commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 16.59,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n     private void checkTag(int lineNo, String... comment) {\n         if (tagRegExp \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n         for (int i \u003d 0; i \u003c comment.length; i++) {\n             final String commentValue \u003d comment[i];\n             final Matcher matcher \u003d tagRegExp.matcher(commentValue);\n             if (matcher.find()) {\n                 tagCount +\u003d 1;\n                 final int contentStart \u003d matcher.start(1);\n                 final String content \u003d commentValue.substring(contentStart);\n                 if (tagFormatRegExp \u003d\u003d null || tagFormatRegExp.matcher(content).find()) {\n                     logTag(lineNo + i - comment.length, tag, content);\n                 }\n                 else {\n-                    log(lineNo + i - comment.length, TAG_FORMAT, tag, tagFormat);\n+                    log(lineNo + i - comment.length, MSG_TAG_FORMAT, tag, tagFormat);\n                 }\n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n-            log(lineNo, MISSING_TAG, tag);\n+            log(lineNo, MSG_MISSING_TAG, tag);\n         }\n \n     }\n\\ No newline at end of file\n"
    },
    "56df5087fe891069e5824abc03ae158aa0d06d66": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2639: RE is removed from allowed abbreviations\n",
      "commitDate": 1448470067000,
      "commitName": "56df5087fe891069e5824abc03ae158aa0d06d66",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": 1444265764000,
      "commitNameOld": "88830ca708e2deb22cae333057ebddd15f7f9c57",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 48.66,
      "commitsBetweenForRepo": 313,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n     private void checkTag(int lineNo, String... comment) {\n-        if (tagRE \u003d\u003d null) {\n+        if (tagRegExp \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n         for (int i \u003d 0; i \u003c comment.length; i++) {\n             final String commentValue \u003d comment[i];\n-            final Matcher matcher \u003d tagRE.matcher(commentValue);\n+            final Matcher matcher \u003d tagRegExp.matcher(commentValue);\n             if (matcher.find()) {\n                 tagCount +\u003d 1;\n                 final int contentStart \u003d matcher.start(1);\n                 final String content \u003d commentValue.substring(contentStart);\n-                if (tagFormatRE \u003d\u003d null || tagFormatRE.matcher(content).find()) {\n+                if (tagFormatRegExp \u003d\u003d null || tagFormatRegExp.matcher(content).find()) {\n                     logTag(lineNo + i - comment.length, tag, content);\n                 }\n                 else {\n                     log(lineNo + i - comment.length, TAG_FORMAT, tag, tagFormat);\n                 }\n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n             log(lineNo, MISSING_TAG, tag);\n         }\n \n     }\n\\ No newline at end of file\n"
    },
    "88830ca708e2deb22cae333057ebddd15f7f9c57": {
      "type": "Ybodychange",
      "commitMessage": "Issue #974: PMD violation ConfusingTernary (partial fix)\n",
      "commitDate": 1444265764000,
      "commitName": "88830ca708e2deb22cae333057ebddd15f7f9c57",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": 1444178762000,
      "commitNameOld": "30c3a362d45721e6925fe89ba71f0fe69d0fc471",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.01,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n     private void checkTag(int lineNo, String... comment) {\n         if (tagRE \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n         for (int i \u003d 0; i \u003c comment.length; i++) {\n             final String commentValue \u003d comment[i];\n             final Matcher matcher \u003d tagRE.matcher(commentValue);\n             if (matcher.find()) {\n                 tagCount +\u003d 1;\n                 final int contentStart \u003d matcher.start(1);\n                 final String content \u003d commentValue.substring(contentStart);\n-                if (tagFormatRE !\u003d null \u0026\u0026 !tagFormatRE.matcher(content).find()) {\n-                    log(lineNo + i - comment.length, TAG_FORMAT, tag, tagFormat);\n+                if (tagFormatRE \u003d\u003d null || tagFormatRE.matcher(content).find()) {\n+                    logTag(lineNo + i - comment.length, tag, content);\n                 }\n                 else {\n-                    logTag(lineNo + i - comment.length, tag, content);\n+                    log(lineNo + i - comment.length, TAG_FORMAT, tag, tagFormat);\n                 }\n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n             log(lineNo, MISSING_TAG, tag);\n         }\n \n     }\n\\ No newline at end of file\n"
    },
    "30c3a362d45721e6925fe89ba71f0fe69d0fc471": {
      "type": "Ybodychange",
      "commitMessage": "Issue #985: Fix PMD violations for ShortVariable rule\n",
      "commitDate": 1444178762000,
      "commitName": "30c3a362d45721e6925fe89ba71f0fe69d0fc471",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": 1441040575000,
      "commitNameOld": "5ca96679525171c73fc4d5c257301f51d2100071",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 36.32,
      "commitsBetweenForRepo": 234,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n     private void checkTag(int lineNo, String... comment) {\n         if (tagRE \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n         for (int i \u003d 0; i \u003c comment.length; i++) {\n-            final String s \u003d comment[i];\n-            final Matcher matcher \u003d tagRE.matcher(s);\n+            final String commentValue \u003d comment[i];\n+            final Matcher matcher \u003d tagRE.matcher(commentValue);\n             if (matcher.find()) {\n                 tagCount +\u003d 1;\n                 final int contentStart \u003d matcher.start(1);\n-                final String content \u003d s.substring(contentStart);\n+                final String content \u003d commentValue.substring(contentStart);\n                 if (tagFormatRE !\u003d null \u0026\u0026 !tagFormatRE.matcher(content).find()) {\n                     log(lineNo + i - comment.length, TAG_FORMAT, tag, tagFormat);\n                 }\n                 else {\n                     logTag(lineNo + i - comment.length, tag, content);\n                 }\n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n             log(lineNo, MISSING_TAG, tag);\n         }\n \n     }\n\\ No newline at end of file\n"
    },
    "755eda4d684e71ea18bed69646e07140310b67fc": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Reduce number of parameters in method. #1555\n\nFixes `ParametersPerMethod` inspection violation.\n\nDescription:\n\u003eReports methods with too many parameters. Methods with too many parameters can be a good sign that refactoring is necessary. Methods whose signatures are inherited from library classes are ignored by this inspection.\n",
      "commitDate": 1440159951000,
      "commitName": "755eda4d684e71ea18bed69646e07140310b67fc",
      "commitAuthor": "Michal Kordas",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "3bd699bd593414d63c7139aa410f13ec8341a027": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
      "commitMessage": "Issue #1566: HiddenField violations fixed\n",
      "commitDate": 1439356761000,
      "commitName": "3bd699bd593414d63c7139aa410f13ec8341a027",
      "commitAuthor": "Ruslan Diachenko",
      "subchanges": [
        "Ymovefromfile",
        "Ybodychange",
        "Yparameterchange"
      ]
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": 1426023398000,
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1425602876000,
      "commitNameOld": "f7828693395f71a6ae99710f3fab44cb8a66ea51",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 4.87,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     private void checkTag(\n             int lineNo,\n             String[] comment,\n             String tag,\n             Pattern tagRE,\n             Pattern formatRE,\n             String format)\n     {\n         if (tagRE \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n         for (int i \u003d 0; i \u003c comment.length; i++) {\n             final String s \u003d comment[i];\n             final Matcher matcher \u003d tagRE.matcher(s);\n             if (matcher.find()) {\n                 tagCount +\u003d 1;\n                 final int contentStart \u003d matcher.start(1);\n                 final String content \u003d s.substring(contentStart);\n-                if ((formatRE !\u003d null) \u0026\u0026 !formatRE.matcher(content).find()) {\n+                if (formatRE !\u003d null \u0026\u0026 !formatRE.matcher(content).find()) {\n                     log(lineNo + i - comment.length, TAG_FORMAT, tag,\n                         format);\n                 }\n                 else {\n                     logTag(lineNo + i - comment.length, tag, content);\n                 }\n \n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n             log(lineNo, MISSING_TAG, tag);\n         }\n \n     }\n\\ No newline at end of file\n"
    },
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, javadoc package, issue #537\n",
      "commitDate": 1424437366000,
      "commitName": "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc",
      "commitAuthor": "alexkravin",
      "commitDateOld": 1424294072000,
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     private void checkTag(\n             int lineNo,\n             String[] comment,\n             String tag,\n             Pattern tagRE,\n             Pattern formatRE,\n             String format)\n     {\n         if (tagRE \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n         for (int i \u003d 0; i \u003c comment.length; i++) {\n             final String s \u003d comment[i];\n             final Matcher matcher \u003d tagRE.matcher(s);\n             if (matcher.find()) {\n                 tagCount +\u003d 1;\n                 final int contentStart \u003d matcher.start(1);\n                 final String content \u003d s.substring(contentStart);\n                 if ((formatRE !\u003d null) \u0026\u0026 !formatRE.matcher(content).find()) {\n-                    log(lineNo + i - comment.length, \"type.tagFormat\", tag,\n+                    log(lineNo + i - comment.length, TAG_FORMAT, tag,\n                         format);\n                 }\n                 else {\n                     logTag(lineNo + i - comment.length, tag, content);\n                 }\n \n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n-            log(lineNo, \"type.missingTag\", tag);\n+            log(lineNo, MISSING_TAG, tag);\n         }\n \n     }\n\\ No newline at end of file\n"
    },
    "89a51ba032fd9126651fa9efad31baf10c006ddf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, javadoc, #512\n",
      "commitDate": 1421677262000,
      "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "585f7c20a1e9e3ca4a04ffedf4e1cedc449acd97": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
      "commitMessage": "Adding omitIgnoredModules attribute to the checkstyle task (for WriteTag) and adding enum/annotation support to WriteTag\n",
      "commitDate": 1206616709000,
      "commitName": "585f7c20a1e9e3ca4a04ffedf4e1cedc449acd97",
      "commitAuthor": "Michael Studman",
      "subchanges": [
        "Ymovefromfile",
        "Ybodychange",
        "Yparameterchange"
      ]
    },
    "c2d3932843e70e4bb5df7161800aca248f9af778": {
      "type": "Ybodychange",
      "commitMessage": "Clean up the use of ()\u0027s\n",
      "commitDate": 1152242806000,
      "commitName": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1135859700000,
      "commitNameOld": "788b41973d5747c7b4699a853b62168cf0001df6",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 189.62,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     private void checkTag(\n             int aLineNo,\n             String[] aCmt,\n             String aTag,\n             Pattern aTagRE,\n             Pattern aFormatRE,\n             String aFormat)\n     {\n         if (aTagRE \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n         for (int i \u003d 0; i \u003c aCmt.length; i++) {\n             final String s \u003d aCmt[i];\n             final Matcher matcher \u003d aTagRE.matcher(s);\n             if (matcher.find()) {\n                 tagCount +\u003d 1;\n                 final int contentStart \u003d matcher.start(1);\n                 final String content \u003d s.substring(contentStart);\n-                if (aFormatRE !\u003d null \u0026\u0026 !aFormatRE.matcher(content).find()) {\n+                if ((aFormatRE !\u003d null) \u0026\u0026 !aFormatRE.matcher(content).find()) {\n                     log(aLineNo + i - aCmt.length, \"type.tagFormat\", aTag,\n                         aFormat);\n                 }\n                 else {\n                     logTag(aLineNo + i - aCmt.length, aTag, content);\n                 }\n \n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n             log(aLineNo, \"type.missingTag\", aTag);\n         }\n \n     }\n\\ No newline at end of file\n"
    },
    "788b41973d5747c7b4699a853b62168cf0001df6": {
      "type": "Ybodychange",
      "commitMessage": "Changes to make it possible to identify a module by an id, and then to\nsuppress messages based on the id. The motivation is to allow for finer\ngrained suppressions. For example, can enable multiple instances of the\nRegexp check, and suppress on the individual instance.\n",
      "commitDate": 1135859700000,
      "commitName": "788b41973d5747c7b4699a853b62168cf0001df6",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1135582079000,
      "commitNameOld": "96c668724bc05a11ceb031dda71efe1e9e69480d",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 3.21,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,35 @@\n     private void checkTag(\n             int aLineNo,\n             String[] aCmt,\n             String aTag,\n             Pattern aTagRE,\n             Pattern aFormatRE,\n             String aFormat)\n     {\n         if (aTagRE \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n         for (int i \u003d 0; i \u003c aCmt.length; i++) {\n             final String s \u003d aCmt[i];\n             final Matcher matcher \u003d aTagRE.matcher(s);\n             if (matcher.find()) {\n                 tagCount +\u003d 1;\n                 final int contentStart \u003d matcher.start(1);\n                 final String content \u003d s.substring(contentStart);\n                 if (aFormatRE !\u003d null \u0026\u0026 !aFormatRE.matcher(content).find()) {\n                     log(aLineNo + i - aCmt.length, \"type.tagFormat\", aTag,\n                         aFormat);\n                 }\n                 else {\n                     logTag(aLineNo + i - aCmt.length, aTag, content);\n                 }\n \n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n-            Object[] args \u003d {aTag};\n             log(aLineNo, \"type.missingTag\", aTag);\n         }\n \n     }\n\\ No newline at end of file\n"
    },
    "96c668724bc05a11ceb031dda71efe1e9e69480d": {
      "type": "Yintroduced",
      "commitMessage": "Added WriteTag check which outputs a JavaDoc tag as information (patch 902110). Thanks to Daniel Grenner (dgrenner) for contribution.\n",
      "commitDate": 1135582079000,
      "commitName": "96c668724bc05a11ceb031dda71efe1e9e69480d",
      "commitAuthor": "Oleg Sukhodolsky"
    }
  }
}