{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "DeclarationOrderCheck.java",
  "functionName": "visitToken",
  "functionId": "visitToken___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java",
  "functionStartLine": 192,
  "functionEndLine": 226,
  "changeHistory": [
    "a40ba56ff316a7d9bdd726d9e831f303df3d5eaa",
    "d693562ab7d124a1a71332e2c234ac0efcd0620e",
    "aa581847fe5e1c7ff4ded4387fa3dbc781fac513",
    "0da1e4d980420f6abb465af441e5ced254698273",
    "3eca04c940bcdf575c2f9009202a4145e9a82c15",
    "5cd16d56a2ef2a3daaf1674666a9a5e6f2ddfe78",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "27149f3504a2f350b74f456a9bffbae76a460060",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
    "3a51c61b4aa4b8feaa7eae8648a28d94d62bab0c",
    "6cd89ebebaec931a33ffde42b295eb6a20dc07e1",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "b30ed9fc87c0a74860cc355af259fc29f6d1b76f",
    "ca9c59e8dc4b1dc4bb61149752c9e46a00e42fb4",
    "08638b5f739d9929698860048c052da2d5f80209",
    "b0bdff0e9b50bbe738bb009b953f0ea5950b00bb",
    "e21177aefee3694a53edd75b41c6c1760bf1301a",
    "d041e5226bba75e6f249fd68b3c02708a7b0d9a1"
  ],
  "changeHistoryShort": {
    "a40ba56ff316a7d9bdd726d9e831f303df3d5eaa": "Ybodychange",
    "d693562ab7d124a1a71332e2c234ac0efcd0620e": "Ybodychange",
    "aa581847fe5e1c7ff4ded4387fa3dbc781fac513": "Ybodychange",
    "0da1e4d980420f6abb465af441e5ced254698273": "Ybodychange",
    "3eca04c940bcdf575c2f9009202a4145e9a82c15": "Ybodychange",
    "5cd16d56a2ef2a3daaf1674666a9a5e6f2ddfe78": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "27149f3504a2f350b74f456a9bffbae76a460060": "Ybodychange",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": "Ymultichange(Yparameterchange,Ybodychange)",
    "3a51c61b4aa4b8feaa7eae8648a28d94d62bab0c": "Ybodychange",
    "6cd89ebebaec931a33ffde42b295eb6a20dc07e1": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "b30ed9fc87c0a74860cc355af259fc29f6d1b76f": "Ybodychange",
    "ca9c59e8dc4b1dc4bb61149752c9e46a00e42fb4": "Ybodychange",
    "08638b5f739d9929698860048c052da2d5f80209": "Ybodychange",
    "b0bdff0e9b50bbe738bb009b953f0ea5950b00bb": "Ybodychange",
    "e21177aefee3694a53edd75b41c6c1760bf1301a": "Ybodychange",
    "d041e5226bba75e6f249fd68b3c02708a7b0d9a1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a40ba56ff316a7d9bdd726d9e831f303df3d5eaa": {
      "type": "Ybodychange",
      "commitMessage": "Issue #924: Fix enforcement of declaration order which leads to illegal forward reference\n",
      "commitDate": 1454802555000,
      "commitName": "a40ba56ff316a7d9bdd726d9e831f303df3d5eaa",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": 1454680863000,
      "commitNameOld": "cf96dd9adcf0c3c8f8f05a9ffdcb765cafe17479",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 1.41,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,35 @@\n     public void visitToken(DetailAST ast) {\n         final int parentType \u003d ast.getParent().getType();\n \n         switch (ast.getType()) {\n             case TokenTypes.OBJBLOCK:\n                 scopeStates.push(new ScopeState());\n                 break;\n             case TokenTypes.MODIFIERS:\n                 if (parentType \u003d\u003d TokenTypes.VARIABLE_DEF\n                     \u0026\u0026 ast.getParent().getParent().getType() \u003d\u003d TokenTypes.OBJBLOCK) {\n                     processModifiers(ast);\n                 }\n                 break;\n             case TokenTypes.CTOR_DEF:\n                 if (parentType \u003d\u003d TokenTypes.OBJBLOCK) {\n                     processConstructor(ast);\n                 }\n                 break;\n             case TokenTypes.METHOD_DEF:\n                 if (parentType \u003d\u003d TokenTypes.OBJBLOCK) {\n                     final ScopeState state \u003d scopeStates.peek();\n                     // nothing can be bigger than method\u0027s state\n                     state.currentScopeState \u003d STATE_METHOD_DEF;\n                 }\n                 break;\n+            case TokenTypes.VARIABLE_DEF:\n+                if (ScopeUtils.isClassFieldDef(ast)) {\n+                    final DetailAST fieldDef \u003d ast.findFirstToken(TokenTypes.IDENT);\n+                    classFieldNames.add(fieldDef.getText());\n+                }\n+                break;\n             default:\n                 break;\n         }\n     }\n\\ No newline at end of file\n"
    },
    "d693562ab7d124a1a71332e2c234ac0efcd0620e": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1243: Coverage of DeclarationOrderCheck has been improved\n",
      "commitDate": 1440952488000,
      "commitName": "d693562ab7d124a1a71332e2c234ac0efcd0620e",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": 1440952488000,
      "commitNameOld": "aa581847fe5e1c7ff4ded4387fa3dbc781fac513",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     public void visitToken(DetailAST ast) {\n         final int parentType \u003d ast.getParent().getType();\n \n         switch (ast.getType()) {\n             case TokenTypes.OBJBLOCK:\n                 scopeStates.push(new ScopeState());\n                 break;\n+            case TokenTypes.MODIFIERS:\n+                if (parentType \u003d\u003d TokenTypes.VARIABLE_DEF\n+                    \u0026\u0026 ast.getParent().getParent().getType() \u003d\u003d TokenTypes.OBJBLOCK) {\n+                    processModifiers(ast);\n+                }\n+                break;\n             case TokenTypes.CTOR_DEF:\n                 if (parentType \u003d\u003d TokenTypes.OBJBLOCK) {\n                     processConstructor(ast);\n                 }\n                 break;\n             case TokenTypes.METHOD_DEF:\n                 if (parentType \u003d\u003d TokenTypes.OBJBLOCK) {\n                     final ScopeState state \u003d scopeStates.peek();\n                     // nothing can be bigger than method\u0027s state\n                     state.currentScopeState \u003d STATE_METHOD_DEF;\n                 }\n                 break;\n-            case TokenTypes.MODIFIERS:\n-                if (parentType \u003d\u003d TokenTypes.VARIABLE_DEF\n-                        \u0026\u0026 ast.getParent().getParent().getType() \u003d\u003d TokenTypes.OBJBLOCK) {\n-                    processModifiers(ast);\n-                }\n-                break;\n             default:\n                 break;\n         }\n     }\n\\ No newline at end of file\n"
    },
    "aa581847fe5e1c7ff4ded4387fa3dbc781fac513": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2031: \u0027ignoreMethods\u0027 option has been removed from DeclarationOrderCheck\n",
      "commitDate": 1440952488000,
      "commitName": "aa581847fe5e1c7ff4ded4387fa3dbc781fac513",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": 1440739752000,
      "commitNameOld": "cc7aeaec906dc3c864477e3050510009b2a946ee",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 2.46,
      "commitsBetweenForRepo": 105,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,29 @@\n     public void visitToken(DetailAST ast) {\n         final int parentType \u003d ast.getParent().getType();\n \n         switch (ast.getType()) {\n             case TokenTypes.OBJBLOCK:\n                 scopeStates.push(new ScopeState());\n                 break;\n             case TokenTypes.CTOR_DEF:\n                 if (parentType \u003d\u003d TokenTypes.OBJBLOCK) {\n                     processConstructor(ast);\n                 }\n                 break;\n             case TokenTypes.METHOD_DEF:\n                 if (parentType \u003d\u003d TokenTypes.OBJBLOCK) {\n-                    processMethod(ast);\n+                    final ScopeState state \u003d scopeStates.peek();\n+                    // nothing can be bigger than method\u0027s state\n+                    state.currentScopeState \u003d STATE_METHOD_DEF;\n                 }\n                 break;\n             case TokenTypes.MODIFIERS:\n                 if (parentType \u003d\u003d TokenTypes.VARIABLE_DEF\n                         \u0026\u0026 ast.getParent().getParent().getType() \u003d\u003d TokenTypes.OBJBLOCK) {\n                     processModifiers(ast);\n                 }\n                 break;\n             default:\n                 break;\n         }\n     }\n\\ No newline at end of file\n"
    },
    "0da1e4d980420f6abb465af441e5ced254698273": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: ReturnCount violations (partial fix)\n",
      "commitDate": 1440047165000,
      "commitName": "0da1e4d980420f6abb465af441e5ced254698273",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": 1440040911000,
      "commitNameOld": "efa16e17bf710b7b24af828296c2337612912ba9",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,27 @@\n     public void visitToken(DetailAST ast) {\n         final int parentType \u003d ast.getParent().getType();\n \n         switch (ast.getType()) {\n             case TokenTypes.OBJBLOCK:\n                 scopeStates.push(new ScopeState());\n                 break;\n-\n             case TokenTypes.CTOR_DEF:\n-                if (parentType !\u003d TokenTypes.OBJBLOCK) {\n-                    return;\n+                if (parentType \u003d\u003d TokenTypes.OBJBLOCK) {\n+                    processConstructor(ast);\n                 }\n-\n-                processConstructor(ast);\n                 break;\n-\n             case TokenTypes.METHOD_DEF:\n-\n-                if (parentType !\u003d TokenTypes.OBJBLOCK) {\n-                    return;\n+                if (parentType \u003d\u003d TokenTypes.OBJBLOCK) {\n+                    processMethod(ast);\n                 }\n-\n-                processMethod(ast);\n                 break;\n-\n             case TokenTypes.MODIFIERS:\n-                if (parentType !\u003d TokenTypes.VARIABLE_DEF\n-                        || ast.getParent().getParent().getType()\n-                        !\u003d TokenTypes.OBJBLOCK) {\n-                    return;\n+                if (parentType \u003d\u003d TokenTypes.VARIABLE_DEF\n+                        \u0026\u0026 ast.getParent().getParent().getType() \u003d\u003d TokenTypes.OBJBLOCK) {\n+                    processModifiers(ast);\n                 }\n-\n-                processModifiers(ast);\n                 break;\n-\n             default:\n                 break;\n         }\n     }\n\\ No newline at end of file\n"
    },
    "3eca04c940bcdf575c2f9009202a4145e9a82c15": {
      "type": "Ybodychange",
      "commitMessage": "DeclarationOrderCheck updated to follow Cyclomatic Complexity rule. #954\n",
      "commitDate": 1434261690000,
      "commitName": "3eca04c940bcdf575c2f9009202a4145e9a82c15",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": 1431863229000,
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 27.76,
      "commitsBetweenForRepo": 137,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,84 +1,39 @@\n     public void visitToken(DetailAST ast) {\n         final int parentType \u003d ast.getParent().getType();\n-        ScopeState state;\n \n         switch (ast.getType()) {\n             case TokenTypes.OBJBLOCK:\n                 scopeStates.push(new ScopeState());\n                 break;\n \n             case TokenTypes.CTOR_DEF:\n                 if (parentType !\u003d TokenTypes.OBJBLOCK) {\n                     return;\n                 }\n \n-                state \u003d scopeStates.peek();\n-                if (state.currentScopeState \u003e STATE_CTOR_DEF) {\n-                    if (!ignoreConstructors) {\n-                        log(ast, MSG_CONSTRUCTOR);\n-                    }\n-                }\n-                else {\n-                    state.currentScopeState \u003d STATE_CTOR_DEF;\n-                }\n+                processConstructor(ast);\n                 break;\n \n             case TokenTypes.METHOD_DEF:\n-                state \u003d scopeStates.peek();\n+\n                 if (parentType !\u003d TokenTypes.OBJBLOCK) {\n                     return;\n                 }\n \n-                if (state.currentScopeState \u003e STATE_METHOD_DEF) {\n-                    if (!ignoreMethods) {\n-                        log(ast, MSG_METHOD);\n-                    }\n-                }\n-                else {\n-                    state.currentScopeState \u003d STATE_METHOD_DEF;\n-                }\n+                processMethod(ast);\n                 break;\n \n             case TokenTypes.MODIFIERS:\n                 if (parentType !\u003d TokenTypes.VARIABLE_DEF\n-                    || ast.getParent().getParent().getType()\n+                        || ast.getParent().getParent().getType()\n                         !\u003d TokenTypes.OBJBLOCK) {\n                     return;\n                 }\n \n-                state \u003d scopeStates.peek();\n-                if (ast.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null) {\n-                    if (state.currentScopeState \u003e STATE_STATIC_VARIABLE_DEF) {\n-                        if (!ignoreModifiers\n-                            || state.currentScopeState \u003e STATE_INSTANCE_VARIABLE_DEF) {\n-                            log(ast, MSG_STATIC);\n-                        }\n-                    }\n-                    else {\n-                        state.currentScopeState \u003d STATE_STATIC_VARIABLE_DEF;\n-                    }\n-                }\n-                else {\n-                    if (state.currentScopeState \u003e STATE_INSTANCE_VARIABLE_DEF) {\n-                        log(ast, MSG_INSTANCE);\n-                    }\n-                    else if (state.currentScopeState \u003d\u003d STATE_STATIC_VARIABLE_DEF) {\n-                        state.declarationAccess \u003d Scope.PUBLIC;\n-                        state.currentScopeState \u003d STATE_INSTANCE_VARIABLE_DEF;\n-                    }\n-                }\n-\n-                final Scope access \u003d ScopeUtils.getScopeFromMods(ast);\n-                if (state.declarationAccess.compareTo(access) \u003e 0) {\n-                    if (!ignoreModifiers) {\n-                        log(ast, MSG_ACCESS);\n-                    }\n-                }\n-                else {\n-                    state.declarationAccess \u003d access;\n-                }\n+                processModifiers(ast);\n                 break;\n \n             default:\n+                break;\n         }\n     }\n\\ No newline at end of file\n"
    },
    "5cd16d56a2ef2a3daaf1674666a9a5e6f2ddfe78": {
      "type": "Ybodychange",
      "commitMessage": "Fix PMD violations - AvoidFieldNameMatchingTypeName rule, issue #982\n",
      "commitDate": 1429902735000,
      "commitName": "5cd16d56a2ef2a3daaf1674666a9a5e6f2ddfe78",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1426740846000,
      "commitNameOld": "303d7cc6182e72f5472c8bcd9aa37432986793d1",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 36.6,
      "commitsBetweenForRepo": 153,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,87 +1,87 @@\n     public void visitToken(DetailAST ast)\n     {\n         final int parentType \u003d ast.getParent().getType();\n         ScopeState state;\n \n         switch (ast.getType()) {\n             case TokenTypes.OBJBLOCK:\n                 scopeStates.push(new ScopeState());\n                 break;\n \n             case TokenTypes.CTOR_DEF:\n                 if (parentType !\u003d TokenTypes.OBJBLOCK) {\n                     return;\n                 }\n \n                 state \u003d scopeStates.peek();\n-                if (state.scopeState \u003e STATE_CTOR_DEF) {\n+                if (state.currentScopeState \u003e STATE_CTOR_DEF) {\n                     if (!ignoreConstructors) {\n                         log(ast, MSG_CONSTRUCTOR);\n                     }\n                 }\n                 else {\n-                    state.scopeState \u003d STATE_CTOR_DEF;\n+                    state.currentScopeState \u003d STATE_CTOR_DEF;\n                 }\n                 break;\n \n             case TokenTypes.METHOD_DEF:\n                 state \u003d scopeStates.peek();\n                 if (parentType !\u003d TokenTypes.OBJBLOCK) {\n                     return;\n                 }\n \n-                if (state.scopeState \u003e STATE_METHOD_DEF) {\n+                if (state.currentScopeState \u003e STATE_METHOD_DEF) {\n                     if (!ignoreMethods) {\n                         log(ast, MSG_METHOD);\n                     }\n                 }\n                 else {\n-                    state.scopeState \u003d STATE_METHOD_DEF;\n+                    state.currentScopeState \u003d STATE_METHOD_DEF;\n                 }\n                 break;\n \n             case TokenTypes.MODIFIERS:\n                 if (parentType !\u003d TokenTypes.VARIABLE_DEF\n                     || ast.getParent().getParent().getType()\n                         !\u003d TokenTypes.OBJBLOCK)\n                 {\n                     return;\n                 }\n \n                 state \u003d scopeStates.peek();\n                 if (ast.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null) {\n-                    if (state.scopeState \u003e STATE_STATIC_VARIABLE_DEF) {\n+                    if (state.currentScopeState \u003e STATE_STATIC_VARIABLE_DEF) {\n                         if (!ignoreModifiers\n-                            || state.scopeState \u003e STATE_INSTANCE_VARIABLE_DEF)\n+                            || state.currentScopeState \u003e STATE_INSTANCE_VARIABLE_DEF)\n                         {\n                             log(ast, MSG_STATIC);\n                         }\n                     }\n                     else {\n-                        state.scopeState \u003d STATE_STATIC_VARIABLE_DEF;\n+                        state.currentScopeState \u003d STATE_STATIC_VARIABLE_DEF;\n                     }\n                 }\n                 else {\n-                    if (state.scopeState \u003e STATE_INSTANCE_VARIABLE_DEF) {\n+                    if (state.currentScopeState \u003e STATE_INSTANCE_VARIABLE_DEF) {\n                         log(ast, MSG_INSTANCE);\n                     }\n-                    else if (state.scopeState \u003d\u003d STATE_STATIC_VARIABLE_DEF) {\n+                    else if (state.currentScopeState \u003d\u003d STATE_STATIC_VARIABLE_DEF) {\n                         state.declarationAccess \u003d Scope.PUBLIC;\n-                        state.scopeState \u003d STATE_INSTANCE_VARIABLE_DEF;\n+                        state.currentScopeState \u003d STATE_INSTANCE_VARIABLE_DEF;\n                     }\n                 }\n \n                 final Scope access \u003d ScopeUtils.getScopeFromMods(ast);\n                 if (state.declarationAccess.compareTo(access) \u003e 0) {\n                     if (!ignoreModifiers) {\n                         log(ast, MSG_ACCESS);\n                     }\n                 }\n                 else {\n                     state.declarationAccess \u003d access;\n                 }\n                 break;\n \n             default:\n         }\n     }\n\\ No newline at end of file\n"
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": 1426023398000,
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1425340026000,
      "commitNameOld": "62a9d1487056cd313b50f5055ec9da77e63ef08c",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 7.91,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,87 +1,87 @@\n     public void visitToken(DetailAST ast)\n     {\n         final int parentType \u003d ast.getParent().getType();\n         ScopeState state;\n \n         switch (ast.getType()) {\n             case TokenTypes.OBJBLOCK:\n                 scopeStates.push(new ScopeState());\n                 break;\n \n             case TokenTypes.CTOR_DEF:\n                 if (parentType !\u003d TokenTypes.OBJBLOCK) {\n                     return;\n                 }\n \n                 state \u003d scopeStates.peek();\n                 if (state.scopeState \u003e STATE_CTOR_DEF) {\n                     if (!ignoreConstructors) {\n                         log(ast, MSG_CONSTRUCTOR);\n                     }\n                 }\n                 else {\n                     state.scopeState \u003d STATE_CTOR_DEF;\n                 }\n                 break;\n \n             case TokenTypes.METHOD_DEF:\n                 state \u003d scopeStates.peek();\n                 if (parentType !\u003d TokenTypes.OBJBLOCK) {\n                     return;\n                 }\n \n                 if (state.scopeState \u003e STATE_METHOD_DEF) {\n                     if (!ignoreMethods) {\n                         log(ast, MSG_METHOD);\n                     }\n                 }\n                 else {\n                     state.scopeState \u003d STATE_METHOD_DEF;\n                 }\n                 break;\n \n             case TokenTypes.MODIFIERS:\n-                if ((parentType !\u003d TokenTypes.VARIABLE_DEF)\n-                    || (ast.getParent().getParent().getType()\n-                        !\u003d TokenTypes.OBJBLOCK))\n+                if (parentType !\u003d TokenTypes.VARIABLE_DEF\n+                    || ast.getParent().getParent().getType()\n+                        !\u003d TokenTypes.OBJBLOCK)\n                 {\n                     return;\n                 }\n \n                 state \u003d scopeStates.peek();\n                 if (ast.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null) {\n                     if (state.scopeState \u003e STATE_STATIC_VARIABLE_DEF) {\n                         if (!ignoreModifiers\n                             || state.scopeState \u003e STATE_INSTANCE_VARIABLE_DEF)\n                         {\n                             log(ast, MSG_STATIC);\n                         }\n                     }\n                     else {\n                         state.scopeState \u003d STATE_STATIC_VARIABLE_DEF;\n                     }\n                 }\n                 else {\n                     if (state.scopeState \u003e STATE_INSTANCE_VARIABLE_DEF) {\n                         log(ast, MSG_INSTANCE);\n                     }\n                     else if (state.scopeState \u003d\u003d STATE_STATIC_VARIABLE_DEF) {\n                         state.declarationAccess \u003d Scope.PUBLIC;\n                         state.scopeState \u003d STATE_INSTANCE_VARIABLE_DEF;\n                     }\n                 }\n \n                 final Scope access \u003d ScopeUtils.getScopeFromMods(ast);\n                 if (state.declarationAccess.compareTo(access) \u003e 0) {\n                     if (!ignoreModifiers) {\n                         log(ast, MSG_ACCESS);\n                     }\n                 }\n                 else {\n                     state.declarationAccess \u003d access;\n                 }\n                 break;\n \n             default:\n         }\n     }\n\\ No newline at end of file\n"
    },
    "27149f3504a2f350b74f456a9bffbae76a460060": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, coding package, issue #537\n",
      "commitDate": 1424437367000,
      "commitName": "27149f3504a2f350b74f456a9bffbae76a460060",
      "commitAuthor": "alexkravin",
      "commitDateOld": 1424294072000,
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,87 +1,87 @@\n     public void visitToken(DetailAST ast)\n     {\n         final int parentType \u003d ast.getParent().getType();\n         ScopeState state;\n \n         switch (ast.getType()) {\n             case TokenTypes.OBJBLOCK:\n                 scopeStates.push(new ScopeState());\n                 break;\n \n             case TokenTypes.CTOR_DEF:\n                 if (parentType !\u003d TokenTypes.OBJBLOCK) {\n                     return;\n                 }\n \n                 state \u003d scopeStates.peek();\n                 if (state.scopeState \u003e STATE_CTOR_DEF) {\n                     if (!ignoreConstructors) {\n-                        log(ast, \"declaration.order.constructor\");\n+                        log(ast, MSG_CONSTRUCTOR);\n                     }\n                 }\n                 else {\n                     state.scopeState \u003d STATE_CTOR_DEF;\n                 }\n                 break;\n \n             case TokenTypes.METHOD_DEF:\n                 state \u003d scopeStates.peek();\n                 if (parentType !\u003d TokenTypes.OBJBLOCK) {\n                     return;\n                 }\n \n                 if (state.scopeState \u003e STATE_METHOD_DEF) {\n                     if (!ignoreMethods) {\n-                        log(ast, \"declaration.order.method\");\n+                        log(ast, MSG_METHOD);\n                     }\n                 }\n                 else {\n                     state.scopeState \u003d STATE_METHOD_DEF;\n                 }\n                 break;\n \n             case TokenTypes.MODIFIERS:\n                 if ((parentType !\u003d TokenTypes.VARIABLE_DEF)\n                     || (ast.getParent().getParent().getType()\n                         !\u003d TokenTypes.OBJBLOCK))\n                 {\n                     return;\n                 }\n \n                 state \u003d scopeStates.peek();\n                 if (ast.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null) {\n                     if (state.scopeState \u003e STATE_STATIC_VARIABLE_DEF) {\n                         if (!ignoreModifiers\n                             || state.scopeState \u003e STATE_INSTANCE_VARIABLE_DEF)\n                         {\n-                            log(ast, \"declaration.order.static\");\n+                            log(ast, MSG_STATIC);\n                         }\n                     }\n                     else {\n                         state.scopeState \u003d STATE_STATIC_VARIABLE_DEF;\n                     }\n                 }\n                 else {\n                     if (state.scopeState \u003e STATE_INSTANCE_VARIABLE_DEF) {\n-                        log(ast, \"declaration.order.instance\");\n+                        log(ast, MSG_INSTANCE);\n                     }\n                     else if (state.scopeState \u003d\u003d STATE_STATIC_VARIABLE_DEF) {\n                         state.declarationAccess \u003d Scope.PUBLIC;\n                         state.scopeState \u003d STATE_INSTANCE_VARIABLE_DEF;\n                     }\n                 }\n \n                 final Scope access \u003d ScopeUtils.getScopeFromMods(ast);\n                 if (state.declarationAccess.compareTo(access) \u003e 0) {\n                     if (!ignoreModifiers) {\n-                        log(ast, \"declaration.order.access\");\n+                        log(ast, MSG_ACCESS);\n                     }\n                 }\n                 else {\n                     state.declarationAccess \u003d access;\n                 }\n                 break;\n \n             default:\n         }\n     }\n\\ No newline at end of file\n"
    },
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, coding, #512\n",
      "commitDate": 1421677214000,
      "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "3a51c61b4aa4b8feaa7eae8648a28d94d62bab0c": {
      "type": "Ybodychange",
      "commitMessage": "OverrideMethodsDeclarationOrderCheck #32\n",
      "commitDate": 1407428583000,
      "commitName": "3a51c61b4aa4b8feaa7eae8648a28d94d62bab0c",
      "commitAuthor": "Max",
      "commitDateOld": 1404868647000,
      "commitNameOld": "8c1b62313ffba68c246e61820a904edbf3c61335",
      "commitAuthorOld": "Maroontress Fast Software",
      "daysBetweenCommits": 29.63,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,93 +1,87 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final int parentType \u003d aAST.getParent().getType();\n         ScopeState state;\n \n         switch (aAST.getType()) {\n         case TokenTypes.OBJBLOCK:\n             mScopeStates.push(new ScopeState());\n-            if (mGroupOverloadMethods \u0026\u0026 (parentType \u003d\u003d TokenTypes.CLASS_DEF\n-                    || parentType \u003d\u003d TokenTypes.ENUM_DEF\n-                    || parentType \u003d\u003d TokenTypes.INTERFACE_DEF))\n-            {\n-                checkOverloadMethodsGrouping(aAST);\n-            }\n             break;\n \n         case TokenTypes.CTOR_DEF:\n             if (parentType !\u003d TokenTypes.OBJBLOCK) {\n                 return;\n             }\n \n             state \u003d mScopeStates.peek();\n             if (state.mScopeState \u003e STATE_CTOR_DEF) {\n                 if (!mIgnoreConstructors) {\n                     log(aAST, \"declaration.order.constructor\");\n                 }\n             }\n             else {\n                 state.mScopeState \u003d STATE_CTOR_DEF;\n             }\n             break;\n \n         case TokenTypes.METHOD_DEF:\n             state \u003d mScopeStates.peek();\n             if (parentType !\u003d TokenTypes.OBJBLOCK) {\n                 return;\n             }\n \n             if (state.mScopeState \u003e STATE_METHOD_DEF) {\n                 if (!mIgnoreMethods) {\n                     log(aAST, \"declaration.order.method\");\n                 }\n             }\n             else {\n                 state.mScopeState \u003d STATE_METHOD_DEF;\n             }\n             break;\n \n         case TokenTypes.MODIFIERS:\n             if ((parentType !\u003d TokenTypes.VARIABLE_DEF)\n                 || (aAST.getParent().getParent().getType()\n                     !\u003d TokenTypes.OBJBLOCK))\n             {\n                 return;\n             }\n \n             state \u003d mScopeStates.peek();\n             if (aAST.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null) {\n                 if (state.mScopeState \u003e STATE_STATIC_VARIABLE_DEF) {\n                     if (!mIgnoreModifiers\n                         || state.mScopeState \u003e STATE_INSTANCE_VARIABLE_DEF)\n                     {\n                         log(aAST, \"declaration.order.static\");\n                     }\n                 }\n                 else {\n                     state.mScopeState \u003d STATE_STATIC_VARIABLE_DEF;\n                 }\n             }\n             else {\n                 if (state.mScopeState \u003e STATE_INSTANCE_VARIABLE_DEF) {\n                     log(aAST, \"declaration.order.instance\");\n                 }\n                 else if (state.mScopeState \u003d\u003d STATE_STATIC_VARIABLE_DEF) {\n                     state.mDeclarationAccess \u003d Scope.PUBLIC;\n                     state.mScopeState \u003d STATE_INSTANCE_VARIABLE_DEF;\n                 }\n             }\n \n             final Scope access \u003d ScopeUtils.getScopeFromMods(aAST);\n             if (state.mDeclarationAccess.compareTo(access) \u003e 0) {\n                 if (!mIgnoreModifiers) {\n                     log(aAST, \"declaration.order.access\");\n                 }\n             }\n             else {\n                 state.mDeclarationAccess \u003d access;\n             }\n             break;\n \n         default:\n         }\n     }\n\\ No newline at end of file\n"
    },
    "6cd89ebebaec931a33ffde42b295eb6a20dc07e1": {
      "type": "Ybodychange",
      "commitMessage": "Update for existing Check: DeclarationOrder #4\n",
      "commitDate": 1404189450000,
      "commitName": "6cd89ebebaec931a33ffde42b295eb6a20dc07e1",
      "commitAuthor": "Max",
      "commitDateOld": 1393953491000,
      "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthorOld": "Ivan Sopov",
      "daysBetweenCommits": 118.47,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,87 +1,93 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final int parentType \u003d aAST.getParent().getType();\n         ScopeState state;\n \n         switch(aAST.getType()) {\n         case TokenTypes.OBJBLOCK:\n             mScopeStates.push(new ScopeState());\n+            if (mGroupOverloadMethods \u0026\u0026 (parentType \u003d\u003d TokenTypes.CLASS_DEF\n+                    || parentType \u003d\u003d TokenTypes.ENUM_DEF\n+                    || parentType \u003d\u003d TokenTypes.INTERFACE_DEF))\n+            {\n+                checkOverloadMethodsGrouping(aAST);\n+            }\n             break;\n \n         case TokenTypes.CTOR_DEF:\n             if (parentType !\u003d TokenTypes.OBJBLOCK) {\n                 return;\n             }\n \n             state \u003d mScopeStates.peek();\n             if (state.mScopeState \u003e STATE_CTOR_DEF) {\n                 if (!mIgnoreConstructors) {\n                     log(aAST, \"declaration.order.constructor\");\n                 }\n             }\n             else {\n                 state.mScopeState \u003d STATE_CTOR_DEF;\n             }\n             break;\n \n         case TokenTypes.METHOD_DEF:\n             state \u003d mScopeStates.peek();\n             if (parentType !\u003d TokenTypes.OBJBLOCK) {\n                 return;\n             }\n \n             if (state.mScopeState \u003e STATE_METHOD_DEF) {\n                 if (!mIgnoreMethods) {\n                     log(aAST, \"declaration.order.method\");\n                 }\n             }\n             else {\n                 state.mScopeState \u003d STATE_METHOD_DEF;\n             }\n             break;\n \n         case TokenTypes.MODIFIERS:\n             if ((parentType !\u003d TokenTypes.VARIABLE_DEF)\n                 || (aAST.getParent().getParent().getType()\n                     !\u003d TokenTypes.OBJBLOCK))\n             {\n                 return;\n             }\n \n             state \u003d mScopeStates.peek();\n             if (aAST.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null) {\n                 if (state.mScopeState \u003e STATE_STATIC_VARIABLE_DEF) {\n                     if (!mIgnoreModifiers\n                         || state.mScopeState \u003e STATE_INSTANCE_VARIABLE_DEF)\n                     {\n                         log(aAST, \"declaration.order.static\");\n                     }\n                 }\n                 else {\n                     state.mScopeState \u003d STATE_STATIC_VARIABLE_DEF;\n                 }\n             }\n             else {\n                 if (state.mScopeState \u003e STATE_INSTANCE_VARIABLE_DEF) {\n                     log(aAST, \"declaration.order.instance\");\n                 }\n                 else if (state.mScopeState \u003d\u003d STATE_STATIC_VARIABLE_DEF) {\n                     state.mDeclarationAccess \u003d Scope.PUBLIC;\n                     state.mScopeState \u003d STATE_INSTANCE_VARIABLE_DEF;\n                 }\n             }\n \n             final Scope access \u003d ScopeUtils.getScopeFromMods(aAST);\n             if (state.mDeclarationAccess.compareTo(access) \u003e 0) {\n                 if (!mIgnoreModifiers) {\n                     log(aAST, \"declaration.order.access\");\n                 }\n             }\n             else {\n                 state.mDeclarationAccess \u003d access;\n             }\n             break;\n \n         default:\n         }\n     }\n\\ No newline at end of file\n"
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "b30ed9fc87c0a74860cc355af259fc29f6d1b76f": {
      "type": "Ybodychange",
      "commitMessage": "Fix for 3429775: DeclarationOrder should handle ignoreModifiers correctly (all fields should be before ctors and methods)\n",
      "commitDate": 1323029059000,
      "commitName": "b30ed9fc87c0a74860cc355af259fc29f6d1b76f",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1310618763000,
      "commitNameOld": "a9c2910a9d58a4b1b8c2d5555fff9cea297c6df5",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 143.64,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,87 +1,87 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final int parentType \u003d aAST.getParent().getType();\n         ScopeState state;\n \n         switch(aAST.getType()) {\n         case TokenTypes.OBJBLOCK:\n             mScopeStates.push(new ScopeState());\n             break;\n \n         case TokenTypes.CTOR_DEF:\n             if (parentType !\u003d TokenTypes.OBJBLOCK) {\n                 return;\n             }\n \n             state \u003d mScopeStates.peek();\n             if (state.mScopeState \u003e STATE_CTOR_DEF) {\n                 if (!mIgnoreConstructors) {\n                     log(aAST, \"declaration.order.constructor\");\n                 }\n             }\n             else {\n                 state.mScopeState \u003d STATE_CTOR_DEF;\n             }\n             break;\n \n         case TokenTypes.METHOD_DEF:\n             state \u003d mScopeStates.peek();\n             if (parentType !\u003d TokenTypes.OBJBLOCK) {\n                 return;\n             }\n \n             if (state.mScopeState \u003e STATE_METHOD_DEF) {\n                 if (!mIgnoreMethods) {\n                     log(aAST, \"declaration.order.method\");\n                 }\n             }\n             else {\n                 state.mScopeState \u003d STATE_METHOD_DEF;\n             }\n             break;\n \n         case TokenTypes.MODIFIERS:\n             if ((parentType !\u003d TokenTypes.VARIABLE_DEF)\n                 || (aAST.getParent().getParent().getType()\n                     !\u003d TokenTypes.OBJBLOCK))\n             {\n                 return;\n             }\n \n             state \u003d mScopeStates.peek();\n             if (aAST.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null) {\n                 if (state.mScopeState \u003e STATE_STATIC_VARIABLE_DEF) {\n-                    if (!mIgnoreModifiers) {\n+                    if (!mIgnoreModifiers\n+                        || state.mScopeState \u003e STATE_INSTANCE_VARIABLE_DEF)\n+                    {\n                         log(aAST, \"declaration.order.static\");\n                     }\n                 }\n                 else {\n                     state.mScopeState \u003d STATE_STATIC_VARIABLE_DEF;\n                 }\n             }\n             else {\n                 if (state.mScopeState \u003e STATE_INSTANCE_VARIABLE_DEF) {\n-                    if (!mIgnoreModifiers) {\n-                        log(aAST, \"declaration.order.instance\");\n-                    }\n+                    log(aAST, \"declaration.order.instance\");\n                 }\n                 else if (state.mScopeState \u003d\u003d STATE_STATIC_VARIABLE_DEF) {\n                     state.mDeclarationAccess \u003d Scope.PUBLIC;\n                     state.mScopeState \u003d STATE_INSTANCE_VARIABLE_DEF;\n                 }\n             }\n \n             final Scope access \u003d ScopeUtils.getScopeFromMods(aAST);\n             if (state.mDeclarationAccess.compareTo(access) \u003e 0) {\n                 if (!mIgnoreModifiers) {\n                     log(aAST, \"declaration.order.access\");\n                 }\n             }\n             else {\n                 state.mDeclarationAccess \u003d access;\n             }\n             break;\n \n         default:\n         }\n     }\n\\ No newline at end of file\n"
    },
    "ca9c59e8dc4b1dc4bb61149752c9e46a00e42fb4": {
      "type": "Ybodychange",
      "commitMessage": "Recording work before documentation - based on patch #2953941\n",
      "commitDate": 1266836240000,
      "commitName": "ca9c59e8dc4b1dc4bb61149752c9e46a00e42fb4",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1266029835000,
      "commitNameOld": "523080bbf2be11354b94b851ac85d06e7e8a2c14",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 9.33,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,87 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final int parentType \u003d aAST.getParent().getType();\n         ScopeState state;\n \n         switch(aAST.getType()) {\n         case TokenTypes.OBJBLOCK:\n             mScopeStates.push(new ScopeState());\n             break;\n \n         case TokenTypes.CTOR_DEF:\n             if (parentType !\u003d TokenTypes.OBJBLOCK) {\n                 return;\n             }\n \n             state \u003d mScopeStates.peek();\n             if (state.mScopeState \u003e STATE_CTOR_DEF) {\n-                log(aAST, \"declaration.order.constructor\");\n+                if (!mIgnoreConstructors) {\n+                    log(aAST, \"declaration.order.constructor\");\n+                }\n             }\n             else {\n                 state.mScopeState \u003d STATE_CTOR_DEF;\n             }\n             break;\n \n         case TokenTypes.METHOD_DEF:\n             state \u003d mScopeStates.peek();\n             if (parentType !\u003d TokenTypes.OBJBLOCK) {\n                 return;\n             }\n \n             if (state.mScopeState \u003e STATE_METHOD_DEF) {\n-                log(aAST, \"declaration.order.method\");\n+                if (!mIgnoreMethods) {\n+                    log(aAST, \"declaration.order.method\");\n+                }\n             }\n             else {\n                 state.mScopeState \u003d STATE_METHOD_DEF;\n             }\n             break;\n \n         case TokenTypes.MODIFIERS:\n             if ((parentType !\u003d TokenTypes.VARIABLE_DEF)\n                 || (aAST.getParent().getParent().getType()\n                     !\u003d TokenTypes.OBJBLOCK))\n             {\n                 return;\n             }\n \n             state \u003d mScopeStates.peek();\n             if (aAST.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null) {\n                 if (state.mScopeState \u003e STATE_STATIC_VARIABLE_DEF) {\n-                    log(aAST, \"declaration.order.static\");\n+                    if (!mIgnoreModifiers) {\n+                        log(aAST, \"declaration.order.static\");\n+                    }\n                 }\n                 else {\n                     state.mScopeState \u003d STATE_STATIC_VARIABLE_DEF;\n                 }\n             }\n             else {\n                 if (state.mScopeState \u003e STATE_INSTANCE_VARIABLE_DEF) {\n-                    log(aAST, \"declaration.order.instance\");\n+                    if (!mIgnoreModifiers) {\n+                        log(aAST, \"declaration.order.instance\");\n+                    }\n                 }\n                 else if (state.mScopeState \u003d\u003d STATE_STATIC_VARIABLE_DEF) {\n                     state.mDeclarationAccess \u003d Scope.PUBLIC;\n                     state.mScopeState \u003d STATE_INSTANCE_VARIABLE_DEF;\n                 }\n             }\n \n             final Scope access \u003d ScopeUtils.getScopeFromMods(aAST);\n             if (state.mDeclarationAccess.compareTo(access) \u003e 0) {\n-                log(aAST, \"declaration.order.access\");\n+                if (!mIgnoreModifiers) {\n+                    log(aAST, \"declaration.order.access\");\n+                }\n             }\n             else {\n                 state.mDeclarationAccess \u003d access;\n             }\n             break;\n \n         default:\n         }\n     }\n\\ No newline at end of file\n"
    },
    "08638b5f739d9929698860048c052da2d5f80209": {
      "type": "Ybodychange",
      "commitMessage": "Start of adding generics.\n",
      "commitDate": 1197700618000,
      "commitName": "08638b5f739d9929698860048c052da2d5f80209",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1169909494000,
      "commitNameOld": "1efc394250b8f1c79bd7f8344b738a7d13396ed3",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 321.66,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,77 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final int parentType \u003d aAST.getParent().getType();\n         ScopeState state;\n \n         switch(aAST.getType()) {\n         case TokenTypes.OBJBLOCK:\n             mScopeStates.push(new ScopeState());\n             break;\n \n         case TokenTypes.CTOR_DEF:\n             if (parentType !\u003d TokenTypes.OBJBLOCK) {\n                 return;\n             }\n \n-            state \u003d (ScopeState) mScopeStates.peek();\n+            state \u003d mScopeStates.peek();\n             if (state.mScopeState \u003e STATE_CTOR_DEF) {\n                 log(aAST, \"declaration.order.constructor\");\n             }\n             else {\n                 state.mScopeState \u003d STATE_CTOR_DEF;\n             }\n             break;\n \n         case TokenTypes.METHOD_DEF:\n-            state \u003d (ScopeState) mScopeStates.peek();\n+            state \u003d mScopeStates.peek();\n             if (parentType !\u003d TokenTypes.OBJBLOCK) {\n                 return;\n             }\n \n             if (state.mScopeState \u003e STATE_METHOD_DEF) {\n                 log(aAST, \"declaration.order.method\");\n             }\n             else {\n                 state.mScopeState \u003d STATE_METHOD_DEF;\n             }\n             break;\n \n         case TokenTypes.MODIFIERS:\n             if ((parentType !\u003d TokenTypes.VARIABLE_DEF)\n                 || (aAST.getParent().getParent().getType()\n                     !\u003d TokenTypes.OBJBLOCK))\n             {\n                 return;\n             }\n \n-            state \u003d (ScopeState) mScopeStates.peek();\n+            state \u003d mScopeStates.peek();\n             if (aAST.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null) {\n                 if (state.mScopeState \u003e STATE_STATIC_VARIABLE_DEF) {\n                     log(aAST, \"declaration.order.static\");\n                 }\n                 else {\n                     state.mScopeState \u003d STATE_STATIC_VARIABLE_DEF;\n                 }\n             }\n             else {\n                 if (state.mScopeState \u003e STATE_INSTANCE_VARIABLE_DEF) {\n                     log(aAST, \"declaration.order.instance\");\n                 }\n                 else if (state.mScopeState \u003d\u003d STATE_STATIC_VARIABLE_DEF) {\n                     state.mDeclarationAccess \u003d Scope.PUBLIC;\n                     state.mScopeState \u003d STATE_INSTANCE_VARIABLE_DEF;\n                 }\n             }\n \n             final Scope access \u003d ScopeUtils.getScopeFromMods(aAST);\n             if (state.mDeclarationAccess.compareTo(access) \u003e 0) {\n                 log(aAST, \"declaration.order.access\");\n             }\n             else {\n                 state.mDeclarationAccess \u003d access;\n             }\n             break;\n \n         default:\n         }\n     }\n\\ No newline at end of file\n"
    },
    "b0bdff0e9b50bbe738bb009b953f0ea5950b00bb": {
      "type": "Ybodychange",
      "commitMessage": "fixed typo in resource key\n",
      "commitDate": 1066244739000,
      "commitName": "b0bdff0e9b50bbe738bb009b953f0ea5950b00bb",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": 1062936573000,
      "commitNameOld": "e21177aefee3694a53edd75b41c6c1760bf1301a",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 38.29,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,77 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final int parentType \u003d aAST.getParent().getType();\n         ScopeState state;\n \n         switch(aAST.getType()) {\n         case TokenTypes.OBJBLOCK:\n             mScopeStates.push(new ScopeState());\n             break;\n \n         case TokenTypes.CTOR_DEF:\n             if (parentType !\u003d TokenTypes.OBJBLOCK) {\n                 return;\n             }\n \n             state \u003d (ScopeState) mScopeStates.peek();\n             if (state.mScopeState \u003e STATE_CTOR_DEF) {\n                 log(aAST, \"declaration.order.constructor\");\n             }\n             else {\n                 state.mScopeState \u003d STATE_CTOR_DEF;\n             }\n             break;\n \n         case TokenTypes.METHOD_DEF:\n             state \u003d (ScopeState) mScopeStates.peek();\n             if (parentType !\u003d TokenTypes.OBJBLOCK) {\n                 return;\n             }\n \n             if (state.mScopeState \u003e STATE_METHOD_DEF) {\n-                log(aAST, \"declarationorder.method\");\n+                log(aAST, \"declaration.order.method\");\n             }\n             else {\n                 state.mScopeState \u003d STATE_METHOD_DEF;\n             }\n             break;\n \n         case TokenTypes.MODIFIERS:\n             if ((parentType !\u003d TokenTypes.VARIABLE_DEF)\n                 || (aAST.getParent().getParent().getType()\n                     !\u003d TokenTypes.OBJBLOCK))\n             {\n                 return;\n             }\n \n             state \u003d (ScopeState) mScopeStates.peek();\n             if (aAST.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null) {\n                 if (state.mScopeState \u003e STATE_STATIC_VARIABLE_DEF) {\n                     log(aAST, \"declaration.order.static\");\n                 }\n                 else {\n                     state.mScopeState \u003d STATE_STATIC_VARIABLE_DEF;\n                 }\n             }\n             else {\n                 if (state.mScopeState \u003e STATE_INSTANCE_VARIABLE_DEF) {\n                     log(aAST, \"declaration.order.instance\");\n                 }\n                 else if (state.mScopeState \u003d\u003d STATE_STATIC_VARIABLE_DEF) {\n                     state.mDeclarationAccess \u003d Scope.PUBLIC;\n                     state.mScopeState \u003d STATE_INSTANCE_VARIABLE_DEF;\n                 }\n             }\n \n             final Scope access \u003d ScopeUtils.getScopeFromMods(aAST);\n             if (state.mDeclarationAccess.compareTo(access) \u003e 0) {\n                 log(aAST, \"declaration.order.access\");\n             }\n             else {\n                 state.mDeclarationAccess \u003d access;\n             }\n             break;\n \n         default:\n         }\n     }\n\\ No newline at end of file\n"
    },
    "e21177aefee3694a53edd75b41c6c1760bf1301a": {
      "type": "Ybodychange",
      "commitMessage": "Changes missed in previous putback.\n",
      "commitDate": 1062936573000,
      "commitName": "e21177aefee3694a53edd75b41c6c1760bf1301a",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1062879279000,
      "commitNameOld": "d041e5226bba75e6f249fd68b3c02708a7b0d9a1",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 0.66,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,77 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final int parentType \u003d aAST.getParent().getType();\n         ScopeState state;\n \n         switch(aAST.getType()) {\n         case TokenTypes.OBJBLOCK:\n             mScopeStates.push(new ScopeState());\n             break;\n \n         case TokenTypes.CTOR_DEF:\n             if (parentType !\u003d TokenTypes.OBJBLOCK) {\n                 return;\n             }\n \n             state \u003d (ScopeState) mScopeStates.peek();\n             if (state.mScopeState \u003e STATE_CTOR_DEF) {\n-                log(aAST, \"Constructor\");\n+                log(aAST, \"declaration.order.constructor\");\n             }\n             else {\n                 state.mScopeState \u003d STATE_CTOR_DEF;\n             }\n             break;\n \n         case TokenTypes.METHOD_DEF:\n             state \u003d (ScopeState) mScopeStates.peek();\n             if (parentType !\u003d TokenTypes.OBJBLOCK) {\n                 return;\n             }\n \n             if (state.mScopeState \u003e STATE_METHOD_DEF) {\n-                log(aAST, \"Method\");\n+                log(aAST, \"declarationorder.method\");\n             }\n             else {\n                 state.mScopeState \u003d STATE_METHOD_DEF;\n             }\n             break;\n \n         case TokenTypes.MODIFIERS:\n             if ((parentType !\u003d TokenTypes.VARIABLE_DEF)\n                 || (aAST.getParent().getParent().getType()\n                     !\u003d TokenTypes.OBJBLOCK))\n             {\n                 return;\n             }\n \n             state \u003d (ScopeState) mScopeStates.peek();\n             if (aAST.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null) {\n                 if (state.mScopeState \u003e STATE_STATIC_VARIABLE_DEF) {\n-                    log(aAST, \"Static variable\");\n+                    log(aAST, \"declaration.order.static\");\n                 }\n                 else {\n                     state.mScopeState \u003d STATE_STATIC_VARIABLE_DEF;\n                 }\n             }\n             else {\n                 if (state.mScopeState \u003e STATE_INSTANCE_VARIABLE_DEF) {\n-                    log(aAST, \"Instance variable\");\n+                    log(aAST, \"declaration.order.instance\");\n                 }\n                 else if (state.mScopeState \u003d\u003d STATE_STATIC_VARIABLE_DEF) {\n                     state.mDeclarationAccess \u003d Scope.PUBLIC;\n                     state.mScopeState \u003d STATE_INSTANCE_VARIABLE_DEF;\n                 }\n             }\n \n             final Scope access \u003d ScopeUtils.getScopeFromMods(aAST);\n             if (state.mDeclarationAccess.compareTo(access) \u003e 0) {\n-                log(aAST, \"Variable access\");\n+                log(aAST, \"declaration.order.access\");\n             }\n             else {\n                 state.mDeclarationAccess \u003d access;\n             }\n             break;\n \n         default:\n         }\n     }\n\\ No newline at end of file\n"
    },
    "d041e5226bba75e6f249fd68b3c02708a7b0d9a1": {
      "type": "Yintroduced",
      "commitMessage": "DeclarationOrder check contibuted by Roland Auckenthaler\n",
      "commitDate": 1062879279000,
      "commitName": "d041e5226bba75e6f249fd68b3c02708a7b0d9a1",
      "commitAuthor": "Oleg Sukhodolsky"
    }
  }
}