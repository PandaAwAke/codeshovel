{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "LeftCurlyCheck.java",
  "functionName": "skipAnnotationOnlyLines",
  "functionId": "skipAnnotationOnlyLines___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java",
  "functionStartLine": 238,
  "functionEndLine": 264,
  "changeHistory": [
    "7e1062dea1fae14b90ae6461625c259ed944d1e4",
    "9ddad74e484384e5ca2d88ab0fe21922189e2b85",
    "cb5a59fc6baf5de204e3cc99be6ba9865e44350a",
    "23c8774d2e2fd245de1e5df02758fd23702c565e",
    "4c078ba710068498ca513ce115993e30dab4562a",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "cea86a6cad3098ebcdb4a88db2e49477b07e0d93",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "e195128381e3d20a922411e2dea4c6496f3be1a3",
    "ad34b2a35eff0dba70ef5b27a0ff361520b66bea"
  ],
  "changeHistoryShort": {
    "7e1062dea1fae14b90ae6461625c259ed944d1e4": "Ybodychange",
    "9ddad74e484384e5ca2d88ab0fe21922189e2b85": "Ybodychange",
    "cb5a59fc6baf5de204e3cc99be6ba9865e44350a": "Ybodychange",
    "23c8774d2e2fd245de1e5df02758fd23702c565e": "Ybodychange",
    "4c078ba710068498ca513ce115993e30dab4562a": "Ymodifierchange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "cea86a6cad3098ebcdb4a88db2e49477b07e0d93": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "e195128381e3d20a922411e2dea4c6496f3be1a3": "Ybodychange",
    "ad34b2a35eff0dba70ef5b27a0ff361520b66bea": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7e1062dea1fae14b90ae6461625c259ed944d1e4": {
      "type": "Ybodychange",
      "commitMessage": "Issue #46. statements shouldn\u0027t be nested too deep\n",
      "commitDate": 1440913951000,
      "commitName": "7e1062dea1fae14b90ae6461625c259ed944d1e4",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": 1440827451000,
      "commitNameOld": "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 1.0,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,27 @@\n     private static DetailAST skipAnnotationOnlyLines(DetailAST ast) {\n         DetailAST resultNode \u003d ast;\n         final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n \n         if (modifiers !\u003d null) {\n-            DetailAST lastAnnotation \u003d findLastAnnotation(modifiers);\n+            final DetailAST lastAnnotation \u003d findLastAnnotation(modifiers);\n \n             if (lastAnnotation !\u003d null) {\n                 final DetailAST tokenAfterLast;\n \n                 if (lastAnnotation.getNextSibling() \u003d\u003d null) {\n                     tokenAfterLast \u003d modifiers.getNextSibling();\n                 }\n                 else {\n                     tokenAfterLast \u003d lastAnnotation.getNextSibling();\n                 }\n \n                 if (tokenAfterLast.getLineNo() \u003e lastAnnotation.getLineNo()) {\n                     resultNode \u003d tokenAfterLast;\n                 }\n                 else {\n-                    final int lastAnnotationLineNumber \u003d lastAnnotation.getLineNo();\n-                    while (lastAnnotation.getPreviousSibling() !\u003d null\n-                           \u0026\u0026 lastAnnotation.getPreviousSibling().getLineNo()\n-                               \u003d\u003d lastAnnotationLineNumber) {\n-\n-                        lastAnnotation \u003d lastAnnotation.getPreviousSibling();\n-                    }\n-                    resultNode \u003d lastAnnotation;\n+                    resultNode \u003d getFirstAnnotationOnSameLine(lastAnnotation);\n                 }\n             }\n         }\n         return resultNode;\n     }\n\\ No newline at end of file\n"
    },
    "9ddad74e484384e5ca2d88ab0fe21922189e2b85": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: ReturnCount violation fixed for LeftCurlyCheck\n",
      "commitDate": 1440741100000,
      "commitName": "9ddad74e484384e5ca2d88ab0fe21922189e2b85",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": 1440739668000,
      "commitNameOld": "cb5a59fc6baf5de204e3cc99be6ba9865e44350a",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,34 @@\n     private static DetailAST skipAnnotationOnlyLines(DetailAST ast) {\n+        DetailAST resultNode \u003d ast;\n         final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n-        if (modifiers \u003d\u003d null) {\n-            return ast;\n-        }\n-        DetailAST lastAnnotation \u003d findLastAnnotation(modifiers);\n-        if (lastAnnotation \u003d\u003d null) {\n-            // There are no annotations.\n-            return ast;\n-        }\n-        final DetailAST tokenAfterLast;\n \n-        if (lastAnnotation.getNextSibling() \u003d\u003d null) {\n-            tokenAfterLast \u003d modifiers.getNextSibling();\n-        }\n-        else {\n-            tokenAfterLast \u003d lastAnnotation.getNextSibling();\n-        }\n+        if (modifiers !\u003d null) {\n+            DetailAST lastAnnotation \u003d findLastAnnotation(modifiers);\n \n-        if (tokenAfterLast.getLineNo() \u003e lastAnnotation.getLineNo()) {\n-            return tokenAfterLast;\n+            if (lastAnnotation !\u003d null) {\n+                final DetailAST tokenAfterLast;\n+\n+                if (lastAnnotation.getNextSibling() \u003d\u003d null) {\n+                    tokenAfterLast \u003d modifiers.getNextSibling();\n+                }\n+                else {\n+                    tokenAfterLast \u003d lastAnnotation.getNextSibling();\n+                }\n+\n+                if (tokenAfterLast.getLineNo() \u003e lastAnnotation.getLineNo()) {\n+                    resultNode \u003d tokenAfterLast;\n+                }\n+                else {\n+                    final int lastAnnotationLineNumber \u003d lastAnnotation.getLineNo();\n+                    while (lastAnnotation.getPreviousSibling() !\u003d null\n+                           \u0026\u0026 lastAnnotation.getPreviousSibling().getLineNo()\n+                               \u003d\u003d lastAnnotationLineNumber) {\n+\n+                        lastAnnotation \u003d lastAnnotation.getPreviousSibling();\n+                    }\n+                    resultNode \u003d lastAnnotation;\n+                }\n+            }\n         }\n-        final int lastAnnotationLineNumber \u003d lastAnnotation.getLineNo();\n-        while (lastAnnotation.getPreviousSibling() !\u003d null\n-               \u0026\u0026 lastAnnotation.getPreviousSibling().getLineNo() \u003d\u003d lastAnnotationLineNumber) {\n-            lastAnnotation \u003d lastAnnotation.getPreviousSibling();\n-        }\n-        return lastAnnotation;\n+        return resultNode;\n     }\n\\ No newline at end of file\n"
    },
    "cb5a59fc6baf5de204e3cc99be6ba9865e44350a": {
      "type": "Ybodychange",
      "commitMessage": "Fix typos in blocks, headers and filters packages. #1555\n\nFixes some `SpellCheckingInspection` inspection violations.\n\nDescription:\n\u003eSpellchecker inspection helps locate typos and misspelling in your code, comments and literals.\n",
      "commitDate": 1440739668000,
      "commitName": "cb5a59fc6baf5de204e3cc99be6ba9865e44350a",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440677821000,
      "commitNameOld": "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 0.72,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     private static DetailAST skipAnnotationOnlyLines(DetailAST ast) {\n         final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers \u003d\u003d null) {\n             return ast;\n         }\n-        DetailAST lastAnnot \u003d findLastAnnotation(modifiers);\n-        if (lastAnnot \u003d\u003d null) {\n+        DetailAST lastAnnotation \u003d findLastAnnotation(modifiers);\n+        if (lastAnnotation \u003d\u003d null) {\n             // There are no annotations.\n             return ast;\n         }\n         final DetailAST tokenAfterLast;\n \n-        if (lastAnnot.getNextSibling() \u003d\u003d null) {\n+        if (lastAnnotation.getNextSibling() \u003d\u003d null) {\n             tokenAfterLast \u003d modifiers.getNextSibling();\n         }\n         else {\n-            tokenAfterLast \u003d lastAnnot.getNextSibling();\n+            tokenAfterLast \u003d lastAnnotation.getNextSibling();\n         }\n \n-        if (tokenAfterLast.getLineNo() \u003e lastAnnot.getLineNo()) {\n+        if (tokenAfterLast.getLineNo() \u003e lastAnnotation.getLineNo()) {\n             return tokenAfterLast;\n         }\n-        final int lastAnnotLineNumber \u003d lastAnnot.getLineNo();\n-        while (lastAnnot.getPreviousSibling() !\u003d null\n-               \u0026\u0026 lastAnnot.getPreviousSibling().getLineNo() \u003d\u003d lastAnnotLineNumber) {\n-            lastAnnot \u003d lastAnnot.getPreviousSibling();\n+        final int lastAnnotationLineNumber \u003d lastAnnotation.getLineNo();\n+        while (lastAnnotation.getPreviousSibling() !\u003d null\n+               \u0026\u0026 lastAnnotation.getPreviousSibling().getLineNo() \u003d\u003d lastAnnotationLineNumber) {\n+            lastAnnotation \u003d lastAnnotation.getPreviousSibling();\n         }\n-        return lastAnnot;\n+        return lastAnnotation;\n     }\n\\ No newline at end of file\n"
    },
    "23c8774d2e2fd245de1e5df02758fd23702c565e": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: AvoidInlineConditional violations fixed\n",
      "commitDate": 1439784080000,
      "commitName": "23c8774d2e2fd245de1e5df02758fd23702c565e",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": 1439782863000,
      "commitNameOld": "d56a2a366c6f9e3e8639d492d548ae562b75dc81",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,29 @@\n     private static DetailAST skipAnnotationOnlyLines(DetailAST ast) {\n         final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers \u003d\u003d null) {\n             return ast;\n         }\n         DetailAST lastAnnot \u003d findLastAnnotation(modifiers);\n         if (lastAnnot \u003d\u003d null) {\n             // There are no annotations.\n             return ast;\n         }\n-        final DetailAST tokenAfterLast \u003d lastAnnot.getNextSibling() !\u003d null\n-                                       ? lastAnnot.getNextSibling()\n-                                       : modifiers.getNextSibling();\n+        final DetailAST tokenAfterLast;\n+\n+        if (lastAnnot.getNextSibling() \u003d\u003d null) {\n+            tokenAfterLast \u003d modifiers.getNextSibling();\n+        }\n+        else {\n+            tokenAfterLast \u003d lastAnnot.getNextSibling();\n+        }\n+\n         if (tokenAfterLast.getLineNo() \u003e lastAnnot.getLineNo()) {\n             return tokenAfterLast;\n         }\n         final int lastAnnotLineNumber \u003d lastAnnot.getLineNo();\n         while (lastAnnot.getPreviousSibling() !\u003d null\n                \u0026\u0026 lastAnnot.getPreviousSibling().getLineNo() \u003d\u003d lastAnnotLineNumber) {\n             lastAnnot \u003d lastAnnot.getPreviousSibling();\n         }\n         return lastAnnot;\n     }\n\\ No newline at end of file\n"
    },
    "4c078ba710068498ca513ce115993e30dab4562a": {
      "type": "Ymodifierchange",
      "commitMessage": "Make \"private\" methods \"static\" where possible. #46\n\nSonarQube rule: [\"private\" methods that don\u0027t access instance data should be \"static\"](http://nemo.sonarqube.org/coding_rules#rule_key\u003dsquid%3AS2325).\n\nRationale: private methods that don\u0027t access instance data can be static to prevent any misunderstanding about the contract of the method.\n",
      "commitDate": 1437195084000,
      "commitName": "4c078ba710068498ca513ce115993e30dab4562a",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1436323201000,
      "commitNameOld": "1b3e900ee47bd289ddbf72e3fd69e8a15e51b20a",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 10.09,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n-    private DetailAST skipAnnotationOnlyLines(DetailAST ast) {\n+    private static DetailAST skipAnnotationOnlyLines(DetailAST ast) {\n         final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers \u003d\u003d null) {\n             return ast;\n         }\n         DetailAST lastAnnot \u003d findLastAnnotation(modifiers);\n         if (lastAnnot \u003d\u003d null) {\n             // There are no annotations.\n             return ast;\n         }\n         final DetailAST tokenAfterLast \u003d lastAnnot.getNextSibling() !\u003d null\n                                        ? lastAnnot.getNextSibling()\n                                        : modifiers.getNextSibling();\n         if (tokenAfterLast.getLineNo() \u003e lastAnnot.getLineNo()) {\n             return tokenAfterLast;\n         }\n         final int lastAnnotLineNumber \u003d lastAnnot.getLineNo();\n         while (lastAnnot.getPreviousSibling() !\u003d null\n                \u0026\u0026 lastAnnot.getPreviousSibling().getLineNo()\n                     \u003d\u003d lastAnnotLineNumber) {\n             lastAnnot \u003d lastAnnot.getPreviousSibling();\n         }\n         return lastAnnot;\n     }\n\\ No newline at end of file\n"
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": 1426023398000,
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1425968782000,
      "commitNameOld": "49a23751eb6bffdfba94d72454d7676c9f85adc5",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.63,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n     private DetailAST skipAnnotationOnlyLines(DetailAST ast)\n     {\n         final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers \u003d\u003d null) {\n             return ast;\n         }\n         DetailAST lastAnnot \u003d findLastAnnotation(modifiers);\n         if (lastAnnot \u003d\u003d null) {\n             // There are no annotations.\n             return ast;\n         }\n         final DetailAST tokenAfterLast \u003d lastAnnot.getNextSibling() !\u003d null\n                                        ? lastAnnot.getNextSibling()\n                                        : modifiers.getNextSibling();\n         if (tokenAfterLast.getLineNo() \u003e lastAnnot.getLineNo()) {\n             return tokenAfterLast;\n         }\n         final int lastAnnotLineNumber \u003d lastAnnot.getLineNo();\n         while (lastAnnot.getPreviousSibling() !\u003d null\n-               \u0026\u0026 (lastAnnot.getPreviousSibling().getLineNo()\n-                    \u003d\u003d lastAnnotLineNumber))\n+               \u0026\u0026 lastAnnot.getPreviousSibling().getLineNo()\n+                    \u003d\u003d lastAnnotLineNumber)\n         {\n             lastAnnot \u003d lastAnnot.getPreviousSibling();\n         }\n         return lastAnnot;\n     }\n\\ No newline at end of file\n"
    },
    "cea86a6cad3098ebcdb4a88db2e49477b07e0d93": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, blocks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheck.java\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java\n",
      "commitDate": 1421677949000,
      "commitName": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "e195128381e3d20a922411e2dea4c6496f3be1a3": {
      "type": "Ybodychange",
      "commitMessage": "clean up\n",
      "commitDate": 1240834692000,
      "commitName": "e195128381e3d20a922411e2dea4c6496f3be1a3",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1237695418000,
      "commitNameOld": "216fcb79f9f5bbd05244364e926f261a90e697d1",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 36.33,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,26 @@\n     private DetailAST skipAnnotationOnlyLines(DetailAST aAST)\n     {\n         final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers \u003d\u003d null) {\n             return aAST;\n         }\n         DetailAST lastAnnot \u003d findLastAnnotation(modifiers);\n         if (lastAnnot \u003d\u003d null) {\n             // There are no annotations.\n             return aAST;\n         }\n         final DetailAST tokenAfterLast \u003d lastAnnot.getNextSibling() !\u003d null\n                                        ? lastAnnot.getNextSibling()\n                                        : modifiers.getNextSibling();\n         if (tokenAfterLast.getLineNo() \u003e lastAnnot.getLineNo()) {\n             return tokenAfterLast;\n         }\n-        else {\n-            final int lastAnnotLineNumber \u003d lastAnnot.getLineNo();\n-            while (lastAnnot.getPreviousSibling() !\u003d null\n-                   \u0026\u0026 (lastAnnot.getPreviousSibling().getLineNo()\n-                        \u003d\u003d lastAnnotLineNumber))\n-            {\n-                lastAnnot \u003d lastAnnot.getPreviousSibling();\n-            }\n-            return lastAnnot;\n+        final int lastAnnotLineNumber \u003d lastAnnot.getLineNo();\n+        while (lastAnnot.getPreviousSibling() !\u003d null\n+               \u0026\u0026 (lastAnnot.getPreviousSibling().getLineNo()\n+                    \u003d\u003d lastAnnotLineNumber))\n+        {\n+            lastAnnot \u003d lastAnnot.getPreviousSibling();\n         }\n+        return lastAnnot;\n     }\n\\ No newline at end of file\n"
    },
    "ad34b2a35eff0dba70ef5b27a0ff361520b66bea": {
      "type": "Yintroduced",
      "commitMessage": "Fixed the LeftCurly check to ignore leading annotations. Thanks to Tim Carpenter for patch #2506439. An excellent quality patch.\n",
      "commitDate": 1236508230000,
      "commitName": "ad34b2a35eff0dba70ef5b27a0ff361520b66bea",
      "commitAuthor": "Oliver Burn"
    }
  }
}