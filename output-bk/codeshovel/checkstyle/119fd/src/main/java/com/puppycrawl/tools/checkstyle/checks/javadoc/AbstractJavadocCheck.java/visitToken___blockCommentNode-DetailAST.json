{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "AbstractJavadocCheck.java",
  "functionName": "visitToken",
  "functionId": "visitToken___blockCommentNode-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java",
  "functionStartLine": 283,
  "functionEndLine": 320,
  "changeHistory": [
    "3660e750a3835eaeffec0f5451bee7a5189d0e0f",
    "29901f78ef65899c4c9912b6d49079bdf658d9aa",
    "c0eb205f6ab7abff2c409a387c853a8b51646c79",
    "68b49fd2843f23f55dc711a89213d59f2acf3a0a",
    "8620ce7f3e7d62f8a124ab6ed5ee2fbefb156bf3",
    "0d8e93ce79ea33b72b3e904d8796984271ee3d8d",
    "aab0718232e060bd8f289770ab81780b3a2705a2",
    "61f8aaca7bcb8750909bcc95eb5c27c72c7d824d",
    "ed89c9edb524243b0df61e83a5ac0930f070e6d7",
    "02dfe8c7c51e9df3ad1d3a391c5293c861c1982f",
    "3bd699bd593414d63c7139aa410f13ec8341a027",
    "89a51ba032fd9126651fa9efad31baf10c006ddf",
    "5c481899d4cfcb8369dcd0851aef21c2d8c5088a",
    "7b6785343e306845f432154a1a5026ad25306226",
    "2e1382c5bb1aa61cc01d7958a589e2a3831f56b5",
    "ff12c1b012a1b18da8a1cd2101efd0173c612534"
  ],
  "changeHistoryShort": {
    "3660e750a3835eaeffec0f5451bee7a5189d0e0f": "Ybodychange",
    "29901f78ef65899c4c9912b6d49079bdf658d9aa": "Ybodychange",
    "c0eb205f6ab7abff2c409a387c853a8b51646c79": "Ybodychange",
    "68b49fd2843f23f55dc711a89213d59f2acf3a0a": "Ybodychange",
    "8620ce7f3e7d62f8a124ab6ed5ee2fbefb156bf3": "Ybodychange",
    "0d8e93ce79ea33b72b3e904d8796984271ee3d8d": "Ybodychange",
    "aab0718232e060bd8f289770ab81780b3a2705a2": "Ybodychange",
    "61f8aaca7bcb8750909bcc95eb5c27c72c7d824d": "Ybodychange",
    "ed89c9edb524243b0df61e83a5ac0930f070e6d7": "Ybodychange",
    "02dfe8c7c51e9df3ad1d3a391c5293c861c1982f": "Ybodychange",
    "3bd699bd593414d63c7139aa410f13ec8341a027": "Ymultichange(Yparameterchange,Ybodychange)",
    "89a51ba032fd9126651fa9efad31baf10c006ddf": "Ymultichange(Yparameterchange,Ybodychange)",
    "5c481899d4cfcb8369dcd0851aef21c2d8c5088a": "Ybodychange",
    "7b6785343e306845f432154a1a5026ad25306226": "Ybodychange",
    "2e1382c5bb1aa61cc01d7958a589e2a3831f56b5": "Ybodychange",
    "ff12c1b012a1b18da8a1cd2101efd0173c612534": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3660e750a3835eaeffec0f5451bee7a5189d0e0f": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3311: Modified javadoc grammar, JavadocDetailNodeParser, AbstractJavadocCheck to enable selective processing of javadoc with non tight HTML\n",
      "commitDate": 1504874402000,
      "commitName": "3660e750a3835eaeffec0f5451bee7a5189d0e0f",
      "commitAuthor": "Piyush Sharma",
      "commitDateOld": 1503014771000,
      "commitNameOld": "4acf7a786285d95d2c544f6d7daf6b31b86e0b44",
      "commitAuthorOld": "vasilyeva",
      "daysBetweenCommits": 21.52,
      "commitsBetweenForRepo": 122,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,39 @@\n     public final void visitToken(DetailAST blockCommentNode) {\n         if (JavadocUtils.isJavadocComment(blockCommentNode)) {\n             // store as field, to share with child Checks\n             context.get().blockCommentAst \u003d blockCommentNode;\n \n             final String treeCacheKey \u003d blockCommentNode.getLineNo() + \":\"\n                     + blockCommentNode.getColumnNo();\n \n             final ParseStatus result;\n \n             if (TREE_CACHE.get().containsKey(treeCacheKey)) {\n                 result \u003d TREE_CACHE.get().get(treeCacheKey);\n             }\n             else {\n-                result \u003d context.get().parser.parseJavadocAsDetailNode(blockCommentNode);\n+                result \u003d context.get().parser\n+                        .parseJavadocAsDetailNode(blockCommentNode);\n                 TREE_CACHE.get().put(treeCacheKey, result);\n             }\n \n             if (result.getParseErrorMessage() \u003d\u003d null) {\n-                processTree(result.getTree());\n+                if (acceptJavadocWithNonTightHtml() || !result.isNonTight()) {\n+                    processTree(result.getTree());\n+                }\n+\n+                if (violateExecutionOnNonTightHtml \u0026\u0026 result.isNonTight()) {\n+                    log(result.getFirstNonTightHtmlTag().getLine(),\n+                            JavadocDetailNodeParser.MSG_UNCLOSED_HTML_TAG,\n+                            result.getFirstNonTightHtmlTag().getText());\n+                }\n             }\n             else {\n                 final ParseErrorMessage parseErrorMessage \u003d result.getParseErrorMessage();\n                 log(parseErrorMessage.getLineNumber(),\n                         parseErrorMessage.getMessageKey(),\n                         parseErrorMessage.getMessageArguments());\n             }\n         }\n \n     }\n\\ No newline at end of file\n"
    },
    "29901f78ef65899c4c9912b6d49079bdf658d9aa": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4925: Remove thread-unsafe context from the `AbstractJavadocCheck` class\n",
      "commitDate": 1502976980000,
      "commitName": "29901f78ef65899c4c9912b6d49079bdf658d9aa",
      "commitAuthor": "Andrew Kuchev",
      "commitDateOld": 1502306263000,
      "commitNameOld": "66cc9d43c9620678078d2716308ee61916227fcb",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 7.76,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     public final void visitToken(DetailAST blockCommentNode) {\n         if (JavadocUtils.isJavadocComment(blockCommentNode)) {\n             // store as field, to share with child Checks\n-            blockCommentAst \u003d blockCommentNode;\n+            context.get().blockCommentAst \u003d blockCommentNode;\n \n             final String treeCacheKey \u003d blockCommentNode.getLineNo() + \":\"\n                     + blockCommentNode.getColumnNo();\n \n             final ParseStatus result;\n \n             if (TREE_CACHE.get().containsKey(treeCacheKey)) {\n                 result \u003d TREE_CACHE.get().get(treeCacheKey);\n             }\n             else {\n-                result \u003d parser.parseJavadocAsDetailNode(blockCommentNode);\n+                result \u003d context.get().parser.parseJavadocAsDetailNode(blockCommentNode);\n                 TREE_CACHE.get().put(treeCacheKey, result);\n             }\n \n             if (result.getParseErrorMessage() \u003d\u003d null) {\n                 processTree(result.getTree());\n             }\n             else {\n                 final ParseErrorMessage parseErrorMessage \u003d result.getParseErrorMessage();\n                 log(parseErrorMessage.getLineNumber(),\n                         parseErrorMessage.getMessageKey(),\n                         parseErrorMessage.getMessageArguments());\n             }\n         }\n \n     }\n\\ No newline at end of file\n"
    },
    "c0eb205f6ab7abff2c409a387c853a8b51646c79": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4405: Javadoc position to be checked before rendering ASTs\n",
      "commitDate": 1498523692000,
      "commitName": "c0eb205f6ab7abff2c409a387c853a8b51646c79",
      "commitAuthor": "Piyush Sharma",
      "commitDateOld": 1485527514000,
      "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 150.42,
      "commitsBetweenForRepo": 514,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,30 @@\n     public final void visitToken(DetailAST blockCommentNode) {\n-        if (JavadocUtils.isJavadocComment(blockCommentNode)\n-              \u0026\u0026 isCorrectJavadocPosition(blockCommentNode)) {\n+        if (JavadocUtils.isJavadocComment(blockCommentNode)) {\n             // store as field, to share with child Checks\n             blockCommentAst \u003d blockCommentNode;\n \n             final String treeCacheKey \u003d blockCommentNode.getLineNo() + \":\"\n                     + blockCommentNode.getColumnNo();\n \n             final ParseStatus result;\n \n             if (TREE_CACHE.get().containsKey(treeCacheKey)) {\n                 result \u003d TREE_CACHE.get().get(treeCacheKey);\n             }\n             else {\n                 result \u003d parser.parseJavadocAsDetailNode(blockCommentNode);\n                 TREE_CACHE.get().put(treeCacheKey, result);\n             }\n \n             if (result.getParseErrorMessage() \u003d\u003d null) {\n                 processTree(result.getTree());\n             }\n             else {\n                 final ParseErrorMessage parseErrorMessage \u003d result.getParseErrorMessage();\n                 log(parseErrorMessage.getLineNumber(),\n                         parseErrorMessage.getMessageKey(),\n                         parseErrorMessage.getMessageArguments());\n             }\n         }\n \n     }\n\\ No newline at end of file\n"
    },
    "68b49fd2843f23f55dc711a89213d59f2acf3a0a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #652: New CLI option to print Javadoc comment parse tree\n",
      "commitDate": 1458220789000,
      "commitName": "68b49fd2843f23f55dc711a89213d59f2acf3a0a",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": 1454680863000,
      "commitNameOld": "cf96dd9adcf0c3c8f8f05a9ffdcb765cafe17479",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 40.97,
      "commitsBetweenForRepo": 129,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n     public final void visitToken(DetailAST blockCommentNode) {\n         if (JavadocUtils.isJavadocComment(blockCommentNode)\n               \u0026\u0026 isCorrectJavadocPosition(blockCommentNode)) {\n             // store as field, to share with child Checks\n             blockCommentAst \u003d blockCommentNode;\n \n             final String treeCacheKey \u003d blockCommentNode.getLineNo() + \":\"\n                     + blockCommentNode.getColumnNo();\n \n             final ParseStatus result;\n \n             if (TREE_CACHE.get().containsKey(treeCacheKey)) {\n                 result \u003d TREE_CACHE.get().get(treeCacheKey);\n             }\n             else {\n-                result \u003d parseJavadocAsDetailNode(blockCommentNode);\n+                result \u003d parser.parseJavadocAsDetailNode(blockCommentNode);\n                 TREE_CACHE.get().put(treeCacheKey, result);\n             }\n \n             if (result.getParseErrorMessage() \u003d\u003d null) {\n                 processTree(result.getTree());\n             }\n             else {\n                 final ParseErrorMessage parseErrorMessage \u003d result.getParseErrorMessage();\n                 log(parseErrorMessage.getLineNumber(),\n                         parseErrorMessage.getMessageKey(),\n                         parseErrorMessage.getMessageArguments());\n             }\n         }\n \n     }\n\\ No newline at end of file\n"
    },
    "8620ce7f3e7d62f8a124ab6ed5ee2fbefb156bf3": {
      "type": "Ybodychange",
      "commitMessage": "Issue #325: Check placement of Javadoc comments in AbstractJavadocCheck before parsing\n",
      "commitDate": 1454025553000,
      "commitName": "8620ce7f3e7d62f8a124ab6ed5ee2fbefb156bf3",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": 1453646135000,
      "commitNameOld": "0d8e93ce79ea33b72b3e904d8796984271ee3d8d",
      "commitAuthorOld": "Bhavik Patel",
      "daysBetweenCommits": 4.39,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,31 @@\n     public final void visitToken(DetailAST blockCommentNode) {\n-        if (JavadocUtils.isJavadocComment(blockCommentNode)) {\n+        if (JavadocUtils.isJavadocComment(blockCommentNode)\n+              \u0026\u0026 isCorrectJavadocPosition(blockCommentNode)) {\n             // store as field, to share with child Checks\n             blockCommentAst \u003d blockCommentNode;\n \n             final String treeCacheKey \u003d blockCommentNode.getLineNo() + \":\"\n                     + blockCommentNode.getColumnNo();\n \n             final ParseStatus result;\n \n             if (TREE_CACHE.get().containsKey(treeCacheKey)) {\n                 result \u003d TREE_CACHE.get().get(treeCacheKey);\n             }\n             else {\n                 result \u003d parseJavadocAsDetailNode(blockCommentNode);\n                 TREE_CACHE.get().put(treeCacheKey, result);\n             }\n \n             if (result.getParseErrorMessage() \u003d\u003d null) {\n                 processTree(result.getTree());\n             }\n             else {\n                 final ParseErrorMessage parseErrorMessage \u003d result.getParseErrorMessage();\n                 log(parseErrorMessage.getLineNumber(),\n                         parseErrorMessage.getMessageKey(),\n                         parseErrorMessage.getMessageArguments());\n             }\n         }\n \n     }\n\\ No newline at end of file\n"
    },
    "0d8e93ce79ea33b72b3e904d8796984271ee3d8d": {
      "type": "Ybodychange",
      "commitMessage": "minor: enforce FinalLocalVariableCheck on checkstyle code\n",
      "commitDate": 1453646135000,
      "commitName": "0d8e93ce79ea33b72b3e904d8796984271ee3d8d",
      "commitAuthor": "Bhavik Patel",
      "commitDateOld": 1453387260000,
      "commitNameOld": "28da7d5666e32903523b1f97d830589fcb4bee4c",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 3.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     public final void visitToken(DetailAST blockCommentNode) {\n         if (JavadocUtils.isJavadocComment(blockCommentNode)) {\n             // store as field, to share with child Checks\n             blockCommentAst \u003d blockCommentNode;\n \n             final String treeCacheKey \u003d blockCommentNode.getLineNo() + \":\"\n                     + blockCommentNode.getColumnNo();\n \n-            ParseStatus result;\n+            final ParseStatus result;\n \n             if (TREE_CACHE.get().containsKey(treeCacheKey)) {\n                 result \u003d TREE_CACHE.get().get(treeCacheKey);\n             }\n             else {\n                 result \u003d parseJavadocAsDetailNode(blockCommentNode);\n                 TREE_CACHE.get().put(treeCacheKey, result);\n             }\n \n             if (result.getParseErrorMessage() \u003d\u003d null) {\n                 processTree(result.getTree());\n             }\n             else {\n                 final ParseErrorMessage parseErrorMessage \u003d result.getParseErrorMessage();\n                 log(parseErrorMessage.getLineNumber(),\n                         parseErrorMessage.getMessageKey(),\n                         parseErrorMessage.getMessageArguments());\n             }\n         }\n \n     }\n\\ No newline at end of file\n"
    },
    "aab0718232e060bd8f289770ab81780b3a2705a2": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2604: Update regexp pattern for LocalVariableName\n",
      "commitDate": 1449446571000,
      "commitName": "aab0718232e060bd8f289770ab81780b3a2705a2",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": 1449184604000,
      "commitNameOld": "f65b17cbc30795247fef3077cce16a8bb53e9ffc",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 3.03,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     public final void visitToken(DetailAST blockCommentNode) {\n         if (JavadocUtils.isJavadocComment(blockCommentNode)) {\n             // store as field, to share with child Checks\n             blockCommentAst \u003d blockCommentNode;\n \n             final String treeCacheKey \u003d blockCommentNode.getLineNo() + \":\"\n                     + blockCommentNode.getColumnNo();\n \n-            ParseStatus ps;\n+            ParseStatus result;\n \n             if (TREE_CACHE.get().containsKey(treeCacheKey)) {\n-                ps \u003d TREE_CACHE.get().get(treeCacheKey);\n+                result \u003d TREE_CACHE.get().get(treeCacheKey);\n             }\n             else {\n-                ps \u003d parseJavadocAsDetailNode(blockCommentNode);\n-                TREE_CACHE.get().put(treeCacheKey, ps);\n+                result \u003d parseJavadocAsDetailNode(blockCommentNode);\n+                TREE_CACHE.get().put(treeCacheKey, result);\n             }\n \n-            if (ps.getParseErrorMessage() \u003d\u003d null) {\n-                processTree(ps.getTree());\n+            if (result.getParseErrorMessage() \u003d\u003d null) {\n+                processTree(result.getTree());\n             }\n             else {\n-                final ParseErrorMessage parseErrorMessage \u003d ps.getParseErrorMessage();\n+                final ParseErrorMessage parseErrorMessage \u003d result.getParseErrorMessage();\n                 log(parseErrorMessage.getLineNumber(),\n                         parseErrorMessage.getMessageKey(),\n                         parseErrorMessage.getMessageArguments());\n             }\n         }\n \n     }\n\\ No newline at end of file\n"
    },
    "61f8aaca7bcb8750909bcc95eb5c27c72c7d824d": {
      "type": "Ybodychange",
      "commitMessage": "minor: refactoring to minimize scope of variables\n",
      "commitDate": 1445008123000,
      "commitName": "61f8aaca7bcb8750909bcc95eb5c27c72c7d824d",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": 1444349669000,
      "commitNameOld": "1891ca16af1e1b296f1ca4b0f0dc164dadc75e3f",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 7.62,
      "commitsBetweenForRepo": 75,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n     public final void visitToken(DetailAST blockCommentNode) {\n         if (JavadocUtils.isJavadocComment(blockCommentNode)) {\n+            // store as field, to share with child Checks\n             blockCommentAst \u003d blockCommentNode;\n \n             final String treeCacheKey \u003d blockCommentNode.getLineNo() + \":\"\n                     + blockCommentNode.getColumnNo();\n \n             ParseStatus ps;\n \n             if (TREE_CACHE.get().containsKey(treeCacheKey)) {\n                 ps \u003d TREE_CACHE.get().get(treeCacheKey);\n             }\n             else {\n                 ps \u003d parseJavadocAsDetailNode(blockCommentNode);\n                 TREE_CACHE.get().put(treeCacheKey, ps);\n             }\n \n             if (ps.getParseErrorMessage() \u003d\u003d null) {\n                 processTree(ps.getTree());\n             }\n             else {\n                 final ParseErrorMessage parseErrorMessage \u003d ps.getParseErrorMessage();\n                 log(parseErrorMessage.getLineNumber(),\n                         parseErrorMessage.getMessageKey(),\n                         parseErrorMessage.getMessageArguments());\n             }\n         }\n \n     }\n\\ No newline at end of file\n"
    },
    "ed89c9edb524243b0df61e83a5ac0930f070e6d7": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2237: Add basic thread-safety to Javadoc checks\n",
      "commitDate": 1443275797000,
      "commitName": "ed89c9edb524243b0df61e83a5ac0930f070e6d7",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1441047087000,
      "commitNameOld": "c899af31c112c07ea1244f6bbe2c5c6c56818ae5",
      "commitAuthorOld": "Ruslan Diachenko",
      "daysBetweenCommits": 25.8,
      "commitsBetweenForRepo": 171,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     public final void visitToken(DetailAST blockCommentNode) {\n         if (JavadocUtils.isJavadocComment(blockCommentNode)) {\n             blockCommentAst \u003d blockCommentNode;\n \n             final String treeCacheKey \u003d blockCommentNode.getLineNo() + \":\"\n                     + blockCommentNode.getColumnNo();\n \n             ParseStatus ps;\n \n-            if (TREE_CACHE.containsKey(treeCacheKey)) {\n-                ps \u003d TREE_CACHE.get(treeCacheKey);\n+            if (TREE_CACHE.get().containsKey(treeCacheKey)) {\n+                ps \u003d TREE_CACHE.get().get(treeCacheKey);\n             }\n             else {\n                 ps \u003d parseJavadocAsDetailNode(blockCommentNode);\n-                TREE_CACHE.put(treeCacheKey, ps);\n+                TREE_CACHE.get().put(treeCacheKey, ps);\n             }\n \n             if (ps.getParseErrorMessage() \u003d\u003d null) {\n                 processTree(ps.getTree());\n             }\n             else {\n                 final ParseErrorMessage parseErrorMessage \u003d ps.getParseErrorMessage();\n                 log(parseErrorMessage.getLineNumber(),\n                         parseErrorMessage.getMessageKey(),\n                         parseErrorMessage.getMessageArguments());\n             }\n         }\n \n     }\n\\ No newline at end of file\n"
    },
    "02dfe8c7c51e9df3ad1d3a391c5293c861c1982f": {
      "type": "Ybodychange",
      "commitMessage": "Remove unnecessary this. #1555\n\nFixes `UnnecessaryThis` inspection violations after recent commits.\n\nDescription:\n\u003eReports on any unnecessary uses of this in the code. Using this to disambiguate a code reference may easily become unnecessary via automatic refactorings, and is discouraged by many coding styles.\n",
      "commitDate": 1439610129000,
      "commitName": "02dfe8c7c51e9df3ad1d3a391c5293c861c1982f",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1439560811000,
      "commitNameOld": "66d73fe6189267fee3423e2e8d7fc2d68599a43f",
      "commitAuthorOld": "Ruslan Diachenko",
      "daysBetweenCommits": 0.57,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     public final void visitToken(DetailAST blockCommentNode) {\n         if (JavadocUtils.isJavadocComment(blockCommentNode)) {\n-            this.blockCommentAst \u003d blockCommentNode;\n+            blockCommentAst \u003d blockCommentNode;\n \n             final String treeCacheKey \u003d blockCommentNode.getLineNo() + \":\"\n                     + blockCommentNode.getColumnNo();\n \n             ParseStatus ps;\n \n             if (TREE_CACHE.containsKey(treeCacheKey)) {\n                 ps \u003d TREE_CACHE.get(treeCacheKey);\n             }\n             else {\n                 ps \u003d parseJavadocAsDetailNode(blockCommentNode);\n                 TREE_CACHE.put(treeCacheKey, ps);\n             }\n \n             if (ps.getParseErrorMessage() \u003d\u003d null) {\n                 processTree(ps.getTree());\n             }\n             else {\n                 final ParseErrorMessage parseErrorMessage \u003d ps.getParseErrorMessage();\n                 log(parseErrorMessage.getLineNumber(),\n                         parseErrorMessage.getMessageKey(),\n                         parseErrorMessage.getMessageArguments());\n             }\n         }\n \n     }\n\\ No newline at end of file\n"
    },
    "3bd699bd593414d63c7139aa410f13ec8341a027": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Issue #1566: HiddenField violations fixed\n",
      "commitDate": 1439356761000,
      "commitName": "3bd699bd593414d63c7139aa410f13ec8341a027",
      "commitAuthor": "Ruslan Diachenko",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "89a51ba032fd9126651fa9efad31baf10c006ddf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, javadoc, #512\n",
      "commitDate": 1421677262000,
      "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "5c481899d4cfcb8369dcd0851aef21c2d8c5088a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #371. Fixed NumberFormatException while logging in AbstractJavadocCheck\n",
      "commitDate": 1416497981000,
      "commitName": "5c481899d4cfcb8369dcd0851aef21c2d8c5088a",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": 1415718326000,
      "commitNameOld": "7b6785343e306845f432154a1a5026ad25306226",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 9.02,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,30 @@\n     public final void visitToken(DetailAST aBlockCommentAst)\n     {\n         if (JavadocUtils.isJavadocComment(aBlockCommentAst)) {\n             mBlockCommentAst \u003d aBlockCommentAst;\n \n             final String treeCacheKey \u003d aBlockCommentAst.getLineNo() + \":\"\n                     + aBlockCommentAst.getColumnNo();\n \n             ParseStatus ps;\n \n             if (TREE_CACHE.containsKey(treeCacheKey)) {\n                 ps \u003d TREE_CACHE.get(treeCacheKey);\n             }\n             else {\n                 ps \u003d parseJavadocAsDetailNode(aBlockCommentAst);\n                 TREE_CACHE.put(treeCacheKey, ps);\n             }\n \n             if (ps.getParseErrorMessage() \u003d\u003d null) {\n                 processTree(ps.getTree());\n             }\n             else {\n-                final LocalizedMessage parseErrorMessage \u003d ps.getParseErrorMessage();\n-                log(parseErrorMessage.getLineNo(), parseErrorMessage.getMessage());\n+                final ParseErrorMessage parseErrorMessage \u003d ps.getParseErrorMessage();\n+                log(parseErrorMessage.getLineNumber(),\n+                        parseErrorMessage.getMessageKey(),\n+                        parseErrorMessage.getMessageArguments());\n             }\n         }\n \n     }\n\\ No newline at end of file\n"
    },
    "7b6785343e306845f432154a1a5026ad25306226": {
      "type": "Ybodychange",
      "commitMessage": "Fixed ArrayIndexOutOfBoundsException and StringIndexOutOfBoundsException while logging\n",
      "commitDate": 1415718326000,
      "commitName": "7b6785343e306845f432154a1a5026ad25306226",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": 1415399075000,
      "commitNameOld": "2e1382c5bb1aa61cc01d7958a589e2a3831f56b5",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 3.7,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,28 @@\n     public final void visitToken(DetailAST aBlockCommentAst)\n     {\n         if (JavadocUtils.isJavadocComment(aBlockCommentAst)) {\n             mBlockCommentAst \u003d aBlockCommentAst;\n \n             final String treeCacheKey \u003d aBlockCommentAst.getLineNo() + \":\"\n                     + aBlockCommentAst.getColumnNo();\n \n             ParseStatus ps;\n \n             if (TREE_CACHE.containsKey(treeCacheKey)) {\n                 ps \u003d TREE_CACHE.get(treeCacheKey);\n             }\n             else {\n                 ps \u003d parseJavadocAsDetailNode(aBlockCommentAst);\n                 TREE_CACHE.put(treeCacheKey, ps);\n             }\n \n             if (ps.getParseErrorMessage() \u003d\u003d null) {\n                 processTree(ps.getTree());\n             }\n             else {\n                 final LocalizedMessage parseErrorMessage \u003d ps.getParseErrorMessage();\n-                log(parseErrorMessage.getLineNo(), parseErrorMessage.getColumnNo()\n-                        , parseErrorMessage.getMessage());\n+                log(parseErrorMessage.getLineNo(), parseErrorMessage.getMessage());\n             }\n         }\n \n     }\n\\ No newline at end of file\n"
    },
    "2e1382c5bb1aa61cc01d7958a589e2a3831f56b5": {
      "type": "Ybodychange",
      "commitMessage": "Issue #49. Caching DetailNode trees in AbstractJavadocCheck\n",
      "commitDate": 1415399075000,
      "commitName": "2e1382c5bb1aa61cc01d7958a589e2a3831f56b5",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": 1413750761000,
      "commitNameOld": "ff12c1b012a1b18da8a1cd2101efd0173c612534",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 19.08,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,29 @@\n     public final void visitToken(DetailAST aBlockCommentAst)\n     {\n-        mBlockCommentAst \u003d aBlockCommentAst;\n+        if (JavadocUtils.isJavadocComment(aBlockCommentAst)) {\n+            mBlockCommentAst \u003d aBlockCommentAst;\n \n-        final String commentContent \u003d JavadocUtils.getBlockCommentContent(aBlockCommentAst);\n+            final String treeCacheKey \u003d aBlockCommentAst.getLineNo() + \":\"\n+                    + aBlockCommentAst.getColumnNo();\n \n-        if (JavadocUtils.isJavadocComment(commentContent)) {\n+            ParseStatus ps;\n \n-            final String javadocComment \u003d commentContent.substring(1);\n-\n-            // Log messages should have line number in scope of file,\n-            // not in scope of Javadoc comment.\n-            // Offset is line number of beginning of Javadoc comment.\n-            mErrorListener.setOffset(aBlockCommentAst.getLineNo() - 1);\n-\n-            try {\n-                final ParseTree parseTree \u003d parseJavadoc(javadocComment);\n-\n-                final DetailNode node \u003d convertParseTree2DetailNode(parseTree);\n-\n-                processTree(node);\n+            if (TREE_CACHE.containsKey(treeCacheKey)) {\n+                ps \u003d TREE_CACHE.get(treeCacheKey);\n             }\n-            catch (IOException e) {\n-                // Antlr can not initiate its ANTLRInputStream\n-                log(aBlockCommentAst.getLineNo(), \"javadoc.parse.error\",\n-                        e.getMessage());\n+            else {\n+                ps \u003d parseJavadocAsDetailNode(aBlockCommentAst);\n+                TREE_CACHE.put(treeCacheKey, ps);\n             }\n-            catch (ParseCancellationException e) {\n-                // If syntax error occurs then message is printed by error listener\n-                // and parser throws this runtime exception to stop parsing.\n-                // Just stop processing current Javadoc comment.\n-                return;\n+\n+            if (ps.getParseErrorMessage() \u003d\u003d null) {\n+                processTree(ps.getTree());\n+            }\n+            else {\n+                final LocalizedMessage parseErrorMessage \u003d ps.getParseErrorMessage();\n+                log(parseErrorMessage.getLineNo(), parseErrorMessage.getColumnNo()\n+                        , parseErrorMessage.getMessage());\n             }\n         }\n+\n     }\n\\ No newline at end of file\n"
    },
    "ff12c1b012a1b18da8a1cd2101efd0173c612534": {
      "type": "Yintroduced",
      "commitMessage": "Issue #49. Added support of Javadoc comments. Extended API to create Javadoc Checks.\n",
      "commitDate": 1413750761000,
      "commitName": "ff12c1b012a1b18da8a1cd2101efd0173c612534",
      "commitAuthor": "Baratali Izmailov"
    }
  }
}