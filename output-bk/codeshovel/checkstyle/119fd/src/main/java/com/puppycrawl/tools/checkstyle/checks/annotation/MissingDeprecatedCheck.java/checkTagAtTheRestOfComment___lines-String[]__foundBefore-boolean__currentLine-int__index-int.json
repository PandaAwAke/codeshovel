{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "MissingDeprecatedCheck.java",
  "functionName": "checkTagAtTheRestOfComment",
  "functionId": "checkTagAtTheRestOfComment___lines-String[]__foundBefore-boolean__currentLine-int__index-int",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java",
  "functionStartLine": 243,
  "functionEndLine": 272,
  "changeHistory": [
    "456f7ccd73ba64ea94cbbc0d629f82a228deecab",
    "b1a0f2b5f61a997e0b7e3fdff8f19a0ae0180ac6",
    "423ed9e469db620671459827b58c89025d8f6c66",
    "30c3a362d45721e6925fe89ba71f0fe69d0fc471",
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
    "242028813d3d993bbb8a61af6c4f214705c4d7da",
    "82d8e91024a57a96fbb6410dacb29d6a3f582903",
    "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86",
    "0868085098dfde138eee8817c66cd4d214633403"
  ],
  "changeHistoryShort": {
    "456f7ccd73ba64ea94cbbc0d629f82a228deecab": "Ybodychange",
    "b1a0f2b5f61a997e0b7e3fdff8f19a0ae0180ac6": "Ybodychange",
    "423ed9e469db620671459827b58c89025d8f6c66": "Ybodychange",
    "30c3a362d45721e6925fe89ba71f0fe69d0fc471": "Ymultichange(Yparameterchange,Ybodychange)",
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7": "Yrename",
    "242028813d3d993bbb8a61af6c4f214705c4d7da": "Ybodychange",
    "82d8e91024a57a96fbb6410dacb29d6a3f582903": "Ybodychange",
    "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86": "Ybodychange",
    "0868085098dfde138eee8817c66cd4d214633403": "Yintroduced"
  },
  "changeHistoryDetails": {
    "456f7ccd73ba64ea94cbbc0d629f82a228deecab": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4402: increase coverage of pitest-checks-annotation to 100\n",
      "commitDate": 1501100992000,
      "commitName": "456f7ccd73ba64ea94cbbc0d629f82a228deecab",
      "commitAuthor": "vasilyeva",
      "commitDateOld": 1500613458000,
      "commitNameOld": "b1a0f2b5f61a997e0b7e3fdff8f19a0ae0180ac6",
      "commitAuthorOld": "vasilyeva",
      "daysBetweenCommits": 5.64,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n     private boolean checkTagAtTheRestOfComment(String[] lines, boolean foundBefore,\n             int currentLine, int index) {\n \n         boolean found \u003d false;\n         int reindex \u003d index + 1;\n-        while (reindex \u003c lines.length) {\n+        while (reindex \u003c\u003d lines.length - 1) {\n             final Matcher multilineCont \u003d MATCH_DEPRECATED_MULTILINE_CONT.matcher(lines[reindex]);\n \n             if (multilineCont.find()) {\n                 reindex \u003d lines.length;\n                 final String lFin \u003d multilineCont.group(1);\n                 if (lFin.equals(NEXT_TAG) || lFin.equals(END_JAVADOC)) {\n                     log(currentLine, MSG_KEY_JAVADOC_MISSING);\n                     if (foundBefore) {\n                         log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,\n                                 JavadocTagInfo.DEPRECATED.getText());\n                     }\n                     found \u003d true;\n                 }\n                 else {\n                     if (foundBefore) {\n                         log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,\n                                 JavadocTagInfo.DEPRECATED.getText());\n                     }\n                     found \u003d true;\n                 }\n             }\n             reindex++;\n         }\n         return found;\n     }\n\\ No newline at end of file\n"
    },
    "b1a0f2b5f61a997e0b7e3fdff8f19a0ae0180ac6": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4713: fix all violations from the third part of idea violations\n",
      "commitDate": 1500613458000,
      "commitName": "b1a0f2b5f61a997e0b7e3fdff8f19a0ae0180ac6",
      "commitAuthor": "vasilyeva",
      "commitDateOld": 1493349546000,
      "commitNameOld": "e7c746899d1369f942388375b43b93fbef883f57",
      "commitAuthorOld": "Vladislav Lisetskii",
      "daysBetweenCommits": 84.07,
      "commitsBetweenForRepo": 352,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n     private boolean checkTagAtTheRestOfComment(String[] lines, boolean foundBefore,\n             int currentLine, int index) {\n \n         boolean found \u003d false;\n-        for (int reindex \u003d index + 1;\n-            reindex \u003c lines.length;) {\n+        int reindex \u003d index + 1;\n+        while (reindex \u003c lines.length) {\n             final Matcher multilineCont \u003d MATCH_DEPRECATED_MULTILINE_CONT.matcher(lines[reindex]);\n \n             if (multilineCont.find()) {\n                 reindex \u003d lines.length;\n                 final String lFin \u003d multilineCont.group(1);\n                 if (lFin.equals(NEXT_TAG) || lFin.equals(END_JAVADOC)) {\n                     log(currentLine, MSG_KEY_JAVADOC_MISSING);\n                     if (foundBefore) {\n                         log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,\n                                 JavadocTagInfo.DEPRECATED.getText());\n                     }\n                     found \u003d true;\n                 }\n                 else {\n                     if (foundBefore) {\n                         log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,\n                                 JavadocTagInfo.DEPRECATED.getText());\n                     }\n                     found \u003d true;\n                 }\n             }\n             reindex++;\n         }\n         return found;\n     }\n\\ No newline at end of file\n"
    },
    "423ed9e469db620671459827b58c89025d8f6c66": {
      "type": "Ybodychange",
      "commitMessage": "Issue #974: PMD violation ConfusingTernary (partial fix)\n",
      "commitDate": 1444265756000,
      "commitName": "423ed9e469db620671459827b58c89025d8f6c66",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": 1444178762000,
      "commitNameOld": "30c3a362d45721e6925fe89ba71f0fe69d0fc471",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.01,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,31 @@\n     private boolean checkTagAtTheRestOfComment(String[] lines, boolean foundBefore,\n             int currentLine, int index) {\n \n         boolean found \u003d false;\n         for (int reindex \u003d index + 1;\n             reindex \u003c lines.length;) {\n             final Matcher multilineCont \u003d MATCH_DEPRECATED_MULTILINE_CONT.matcher(lines[reindex]);\n \n             if (multilineCont.find()) {\n                 reindex \u003d lines.length;\n                 final String lFin \u003d multilineCont.group(1);\n-                if (!lFin.equals(NEXT_TAG)\n-                    \u0026\u0026 !lFin.equals(END_JAVADOC)) {\n+                if (lFin.equals(NEXT_TAG) || lFin.equals(END_JAVADOC)) {\n+                    log(currentLine, MSG_KEY_JAVADOC_MISSING);\n                     if (foundBefore) {\n                         log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,\n-                            JavadocTagInfo.DEPRECATED.getText());\n+                                JavadocTagInfo.DEPRECATED.getText());\n                     }\n                     found \u003d true;\n                 }\n                 else {\n-                    log(currentLine, MSG_KEY_JAVADOC_MISSING);\n                     if (foundBefore) {\n                         log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,\n-                            JavadocTagInfo.DEPRECATED.getText());\n+                                JavadocTagInfo.DEPRECATED.getText());\n                     }\n                     found \u003d true;\n                 }\n             }\n             reindex++;\n         }\n         return found;\n     }\n\\ No newline at end of file\n"
    },
    "30c3a362d45721e6925fe89ba71f0fe69d0fc471": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Issue #985: Fix PMD violations for ShortVariable rule\n",
      "commitDate": 1444178762000,
      "commitName": "30c3a362d45721e6925fe89ba71f0fe69d0fc471",
      "commitAuthor": "Roman Ivanov",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7": {
      "type": "Yrename",
      "commitMessage": "Issue #1555: Rename methods returning boolean to use question word\n\nFixes some `BooleanMethodNameMustStartWithQuestion` inspection violations.\n\nDescription:\n\u003eReports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection.\n",
      "commitDate": 1440827451000,
      "commitName": "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440677821000,
      "commitNameOld": "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 1.73,
      "commitsBetweenForRepo": 92,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n-    private boolean validateTagAtTheRestOfComment(String[] lines, boolean foundBefore,\n-                                                  int currentLine, int i) {\n+    private boolean checkTagAtTheRestOfComment(String[] lines, boolean foundBefore,\n+            int currentLine, int i) {\n \n         boolean found \u003d false;\n         for (int reindex \u003d i + 1;\n             reindex \u003c lines.length;) {\n             final Matcher multilineCont \u003d MATCH_DEPRECATED_MULTILINE_CONT.matcher(lines[reindex]);\n \n             if (multilineCont.find()) {\n                 reindex \u003d lines.length;\n                 final String lFin \u003d multilineCont.group(1);\n                 if (!lFin.equals(NEXT_TAG)\n                     \u0026\u0026 !lFin.equals(END_JAVADOC)) {\n                     if (foundBefore) {\n                         log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,\n                             JavadocTagInfo.DEPRECATED.getText());\n                     }\n                     found \u003d true;\n                 }\n                 else {\n                     log(currentLine, MSG_KEY_JAVADOC_MISSING);\n                     if (foundBefore) {\n                         log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,\n                             JavadocTagInfo.DEPRECATED.getText());\n                     }\n                     found \u003d true;\n                 }\n             }\n             reindex++;\n         }\n         return found;\n     }\n\\ No newline at end of file\n"
    },
    "242028813d3d993bbb8a61af6c4f214705c4d7da": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: ModifiedControlVariable violations fixed\n",
      "commitDate": 1439560578000,
      "commitName": "242028813d3d993bbb8a61af6c4f214705c4d7da",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": 1439324041000,
      "commitNameOld": "82d8e91024a57a96fbb6410dacb29d6a3f582903",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 2.74,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,32 @@\n     private boolean validateTagAtTheRestOfComment(String[] lines, boolean foundBefore,\n                                                   int currentLine, int i) {\n \n         boolean found \u003d false;\n         for (int reindex \u003d i + 1;\n-            reindex \u003c lines.length; reindex++) {\n+            reindex \u003c lines.length;) {\n             final Matcher multilineCont \u003d MATCH_DEPRECATED_MULTILINE_CONT.matcher(lines[reindex]);\n \n             if (multilineCont.find()) {\n                 reindex \u003d lines.length;\n                 final String lFin \u003d multilineCont.group(1);\n                 if (!lFin.equals(NEXT_TAG)\n                     \u0026\u0026 !lFin.equals(END_JAVADOC)) {\n                     if (foundBefore) {\n                         log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,\n                             JavadocTagInfo.DEPRECATED.getText());\n                     }\n                     found \u003d true;\n                 }\n                 else {\n                     log(currentLine, MSG_KEY_JAVADOC_MISSING);\n                     if (foundBefore) {\n                         log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,\n                             JavadocTagInfo.DEPRECATED.getText());\n                     }\n                     found \u003d true;\n                 }\n             }\n+            reindex++;\n         }\n         return found;\n     }\n\\ No newline at end of file\n"
    },
    "82d8e91024a57a96fbb6410dacb29d6a3f582903": {
      "type": "Ybodychange",
      "commitMessage": "Remove unnecessary qualifiers. #1555\n\nFixes `UnnecessarilyQualifiedStaticUsage` inspection violations.\n\nDescription:\n\u003eReports calls to static methods or accesses of static fields on the current class which are qualified with the class name. Such qualification is unnecessary, and may be safely removed.\n",
      "commitDate": 1439324041000,
      "commitName": "82d8e91024a57a96fbb6410dacb29d6a3f582903",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1439295751000,
      "commitNameOld": "f5f1d754e28ee1e3c5472fd4d5292f24a335e64e",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.33,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,31 @@\n     private boolean validateTagAtTheRestOfComment(String[] lines, boolean foundBefore,\n                                                   int currentLine, int i) {\n \n         boolean found \u003d false;\n         for (int reindex \u003d i + 1;\n             reindex \u003c lines.length; reindex++) {\n-            final Matcher multilineCont \u003d\n-                MissingDeprecatedCheck.MATCH_DEPRECATED_MULTILINE_CONT\n-                .matcher(lines[reindex]);\n+            final Matcher multilineCont \u003d MATCH_DEPRECATED_MULTILINE_CONT.matcher(lines[reindex]);\n \n             if (multilineCont.find()) {\n                 reindex \u003d lines.length;\n                 final String lFin \u003d multilineCont.group(1);\n-                if (!lFin.equals(MissingDeprecatedCheck.NEXT_TAG)\n-                    \u0026\u0026 !lFin.equals(MissingDeprecatedCheck.END_JAVADOC)) {\n+                if (!lFin.equals(NEXT_TAG)\n+                    \u0026\u0026 !lFin.equals(END_JAVADOC)) {\n                     if (foundBefore) {\n                         log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,\n                             JavadocTagInfo.DEPRECATED.getText());\n                     }\n                     found \u003d true;\n                 }\n                 else {\n                     log(currentLine, MSG_KEY_JAVADOC_MISSING);\n                     if (foundBefore) {\n                         log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,\n                             JavadocTagInfo.DEPRECATED.getText());\n                     }\n                     found \u003d true;\n                 }\n             }\n         }\n         return found;\n     }\n\\ No newline at end of file\n"
    },
    "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86": {
      "type": "Ybodychange",
      "commitMessage": "Remove unnecessary this keyword. #1555\n\nFixes `UnnecessaryThis` inspection violations.\n\nDescription:\n\u003eReports on any unnecessary uses of this in the code. Using this to disambiguate a code reference may easily become unnecessary via automatic refactorings, and is discouraged by many coding styles.\n For example:\n ```\n this.a \u003d 3;\n ```\n",
      "commitDate": 1439131302000,
      "commitName": "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1438566537000,
      "commitNameOld": "693e8820d5a9fefebb8a3fb1661e5fbcb4432cfd",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 6.54,
      "commitsBetweenForRepo": 103,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n     private boolean validateTagAtTheRestOfComment(String[] lines, boolean foundBefore,\n                                                   int currentLine, int i) {\n \n         boolean found \u003d false;\n         for (int reindex \u003d i + 1;\n             reindex \u003c lines.length; reindex++) {\n             final Matcher multilineCont \u003d\n                 MissingDeprecatedCheck.MATCH_DEPRECATED_MULTILINE_CONT\n                 .matcher(lines[reindex]);\n \n             if (multilineCont.find()) {\n                 reindex \u003d lines.length;\n                 final String lFin \u003d multilineCont.group(1);\n                 if (!lFin.equals(MissingDeprecatedCheck.NEXT_TAG)\n                     \u0026\u0026 !lFin.equals(MissingDeprecatedCheck.END_JAVADOC)) {\n                     if (foundBefore) {\n-                        this.log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,\n+                        log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,\n                             JavadocTagInfo.DEPRECATED.getText());\n                     }\n                     found \u003d true;\n                 }\n                 else {\n-                    this.log(currentLine, MSG_KEY_JAVADOC_MISSING);\n+                    log(currentLine, MSG_KEY_JAVADOC_MISSING);\n                     if (foundBefore) {\n-                        this.log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,\n+                        log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,\n                             JavadocTagInfo.DEPRECATED.getText());\n                     }\n                     found \u003d true;\n                 }\n             }\n         }\n         return found;\n     }\n\\ No newline at end of file\n"
    },
    "0868085098dfde138eee8817c66cd4d214633403": {
      "type": "Yintroduced",
      "commitMessage": "MissingDeprecatedCheck  updated to follow Cyclomatic Complexity rule. #954\n",
      "commitDate": 1434261690000,
      "commitName": "0868085098dfde138eee8817c66cd4d214633403",
      "commitAuthor": "Roman Ivanov"
    }
  }
}