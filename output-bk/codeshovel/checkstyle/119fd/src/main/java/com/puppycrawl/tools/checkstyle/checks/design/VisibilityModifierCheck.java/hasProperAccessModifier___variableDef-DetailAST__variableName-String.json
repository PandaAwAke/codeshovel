{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "VisibilityModifierCheck.java",
  "functionName": "hasProperAccessModifier",
  "functionId": "hasProperAccessModifier___variableDef-DetailAST__variableName-String",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java",
  "functionStartLine": 543,
  "functionEndLine": 558,
  "changeHistory": [
    "57c24460e70860f1851c60db0a939ff46b2bb54c",
    "8c3e4a50749044ae3177fc4c84db9c4fd93abca2",
    "3b452a2e88d0cb670be19818dbd8166335d65884",
    "f8ba0d727928aaa1275758fa09114155faab0b9e",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "f9f60d3142533c3eebff775e8eb1159935faaba1"
  ],
  "changeHistoryShort": {
    "57c24460e70860f1851c60db0a939ff46b2bb54c": "Ybodychange",
    "8c3e4a50749044ae3177fc4c84db9c4fd93abca2": "Ybodychange",
    "3b452a2e88d0cb670be19818dbd8166335d65884": "Ybodychange",
    "f8ba0d727928aaa1275758fa09114155faab0b9e": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "f9f60d3142533c3eebff775e8eb1159935faaba1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "57c24460e70860f1851c60db0a939ff46b2bb54c": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2971: Add allowPublicFinalFields option for VisibilityModifier (#3207)",
      "commitDate": 1464957627000,
      "commitName": "57c24460e70860f1851c60db0a939ff46b2bb54c",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": 1456842948000,
      "commitNameOld": "cc536c2b9186d746fbf9b16026a6e95d11e67283",
      "commitAuthorOld": "Andrej Vano",
      "daysBetweenCommits": 93.92,
      "commitsBetweenForRepo": 208,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,16 @@\n     private boolean hasProperAccessModifier(DetailAST variableDef, String variableName) {\n         boolean result \u003d true;\n \n         final String variableScope \u003d getVisibilityScope(variableDef);\n \n         if (!PRIVATE_ACCESS_MODIFIER.equals(variableScope)) {\n             result \u003d\n                 isStaticFinalVariable(variableDef)\n                 || packageAllowed \u0026\u0026 PACKAGE_ACCESS_MODIFIER.equals(variableScope)\n                 || protectedAllowed \u0026\u0026 PROTECTED_ACCESS_MODIFIER.equals(variableScope)\n                 || isIgnoredPublicMember(variableName, variableScope)\n-                   || allowPublicImmutableFields\n-                      \u0026\u0026 isImmutableFieldDefinedInFinalClass(variableDef);\n+                || isAllowedPublicField(variableDef);\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "8c3e4a50749044ae3177fc4c84db9c4fd93abca2": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: MultipleStringLiterals violations partial fix\n",
      "commitDate": 1440504773000,
      "commitName": "8c3e4a50749044ae3177fc4c84db9c4fd93abca2",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": 1440502819000,
      "commitNameOld": "c4a7d06206d86f52665eae47af4db28dc59d93a3",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n     private boolean hasProperAccessModifier(DetailAST variableDef, String variableName) {\n         boolean result \u003d true;\n \n         final String variableScope \u003d getVisibilityScope(variableDef);\n \n-        if (!\"private\".equals(variableScope)) {\n+        if (!PRIVATE_ACCESS_MODIFIER.equals(variableScope)) {\n             result \u003d\n                 isStaticFinalVariable(variableDef)\n-                || packageAllowed \u0026\u0026 \"package\".equals(variableScope)\n-                || protectedAllowed \u0026\u0026 \"protected\".equals(variableScope)\n+                || packageAllowed \u0026\u0026 PACKAGE_ACCESS_MODIFIER.equals(variableScope)\n+                || protectedAllowed \u0026\u0026 PROTECTED_ACCESS_MODIFIER.equals(variableScope)\n                 || isIgnoredPublicMember(variableName, variableScope)\n                    || allowPublicImmutableFields\n                       \u0026\u0026 isImmutableFieldDefinedInFinalClass(variableDef);\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "3b452a2e88d0cb670be19818dbd8166335d65884": {
      "type": "Ybodychange",
      "commitMessage": "Inline calls to simple getters. #1555\n\nFixes `CallToSimpleGetterInClass` inspection violations.\n\nDescription:\n\u003eReports any calls to a simple property getter from within the property\u0027s class. A simple property getter is defined as one which simply returns the value of a field, and does no other calculation. Such simple getter calls may be safely inlined, at a small performance improvement. Some coding standards also suggest against the use of simple getters for code clarity reasons.\n",
      "commitDate": 1440243167000,
      "commitName": "3b452a2e88d0cb670be19818dbd8166335d65884",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440040911000,
      "commitNameOld": "efa16e17bf710b7b24af828296c2337612912ba9",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 2.34,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n     private boolean hasProperAccessModifier(DetailAST variableDef, String variableName) {\n         boolean result \u003d true;\n \n         final String variableScope \u003d getVisibilityScope(variableDef);\n \n         if (!\"private\".equals(variableScope)) {\n             result \u003d\n                 isStaticFinalVariable(variableDef)\n-                || isPackageAllowed() \u0026\u0026 \"package\".equals(variableScope)\n-                || isProtectedAllowed() \u0026\u0026 \"protected\".equals(variableScope)\n+                || packageAllowed \u0026\u0026 \"package\".equals(variableScope)\n+                || protectedAllowed \u0026\u0026 \"protected\".equals(variableScope)\n                 || isIgnoredPublicMember(variableName, variableScope)\n                    || allowPublicImmutableFields\n                       \u0026\u0026 isImmutableFieldDefinedInFinalClass(variableDef);\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "f8ba0d727928aaa1275758fa09114155faab0b9e": {
      "type": "Ybodychange",
      "commitMessage": "Fix BooleanExpressionComplexity check violations in Checkstyle code, issue #1052\n",
      "commitDate": 1438447365000,
      "commitName": "f8ba0d727928aaa1275758fa09114155faab0b9e",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": 1437631122000,
      "commitNameOld": "acbd47a66b01acc392a7bd37ad3a2e65eecd308a",
      "commitAuthorOld": "Aleksandr Ivanov",
      "daysBetweenCommits": 9.45,
      "commitsBetweenForRepo": 101,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,18 @@\n     private boolean hasProperAccessModifier(DetailAST variableDef, String variableName) {\n         boolean result \u003d true;\n \n-        final Set\u003cString\u003e mods \u003d getModifiers(variableDef);\n-        final String variableScope \u003d getVisibilityScope(mods);\n+\n+        final String variableScope \u003d getVisibilityScope(variableDef);\n \n         if (!\"private\".equals(variableScope)) {\n-            final DetailAST classDef \u003d variableDef.getParent().getParent();\n-            final Set\u003cString\u003e classModifiers \u003d getModifiers(classDef);\n-\n             result \u003d\n-                mods.contains(\"static\") \u0026\u0026 mods.contains(\"final\")\n+                isStaticFinalVariable(variableDef)\n                 || isPackageAllowed() \u0026\u0026 \"package\".equals(variableScope)\n                 || isProtectedAllowed() \u0026\u0026 \"protected\".equals(variableScope)\n-                || \"public\".equals(variableScope)\n-                   \u0026\u0026 getPublicMemberRegexp().matcher(variableName).find()\n+                || isIgnoredPublicMember(variableName, variableScope)\n                    || allowPublicImmutableFields\n-                      \u0026\u0026 classModifiers.contains(\"final\") \u0026\u0026 isImmutableField(variableDef);\n+                      \u0026\u0026 isImmutableFieldDefinedInFinalClass(variableDef);\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": 1426023398000,
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1425777291000,
      "commitNameOld": "5f68bb50fd191fec409f5edb90755a18fce3e0ac",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 2.85,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     private boolean hasProperAccessModifier(DetailAST variableDef, String variableName)\n     {\n         boolean result \u003d true;\n \n         final Set\u003cString\u003e mods \u003d getModifiers(variableDef);\n         final String variableScope \u003d getVisibilityScope(mods);\n \n         if (!\"private\".equals(variableScope)) {\n             final DetailAST classDef \u003d variableDef.getParent().getParent();\n             final Set\u003cString\u003e classModifiers \u003d getModifiers(classDef);\n \n             result \u003d\n-                (mods.contains(\"static\") \u0026\u0026 mods.contains(\"final\"))\n-                || (isPackageAllowed() \u0026\u0026 \"package\".equals(variableScope))\n-                || (isProtectedAllowed() \u0026\u0026 \"protected\".equals(variableScope))\n-                || (\"public\".equals(variableScope)\n+                mods.contains(\"static\") \u0026\u0026 mods.contains(\"final\")\n+                || isPackageAllowed() \u0026\u0026 \"package\".equals(variableScope)\n+                || isProtectedAllowed() \u0026\u0026 \"protected\".equals(variableScope)\n+                || \"public\".equals(variableScope)\n                    \u0026\u0026 getPublicMemberRegexp().matcher(variableName).find()\n-                   || (allowPublicImmutableFields\n-                      \u0026\u0026 classModifiers.contains(\"final\") \u0026\u0026 isImmutableField(variableDef)));\n+                   || allowPublicImmutableFields\n+                      \u0026\u0026 classModifiers.contains(\"final\") \u0026\u0026 isImmutableField(variableDef);\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "f9f60d3142533c3eebff775e8eb1159935faaba1": {
      "type": "Yintroduced",
      "commitMessage": "Visibility Modifier Check, added option allows public immutable fields, issue #61\n",
      "commitDate": 1424982930000,
      "commitName": "f9f60d3142533c3eebff775e8eb1159935faaba1",
      "commitAuthor": "alexkravin"
    }
  }
}