{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "CustomImportOrderCheck.java",
  "functionName": "getImportGroup",
  "functionId": "getImportGroup___isStatic-boolean__importPath-String",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java",
  "functionStartLine": 615,
  "functionEndLine": 647,
  "changeHistory": [
    "776171b71897fde845e1f1c08f7bd2250e1b203d",
    "6e8d1e06728b7defbd734253b3818a33676b62bc",
    "e15f70ac5b1460236e14237acc3a041102238efd",
    "16dac636b246c658cad31ee9b2e45c53b851d4f2",
    "2a3be6769c4a97d090970ed52ca2333cb9aea706"
  ],
  "changeHistoryShort": {
    "776171b71897fde845e1f1c08f7bd2250e1b203d": "Ybodychange",
    "6e8d1e06728b7defbd734253b3818a33676b62bc": "Ybodychange",
    "e15f70ac5b1460236e14237acc3a041102238efd": "Ybodychange",
    "16dac636b246c658cad31ee9b2e45c53b851d4f2": "Ymultichange(Yparameterchange,Ybodychange)",
    "2a3be6769c4a97d090970ed52ca2333cb9aea706": "Yintroduced"
  },
  "changeHistoryDetails": {
    "776171b71897fde845e1f1c08f7bd2250e1b203d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5004: pitest: increase mutation coverage for pitest-checks-imports profile to 100%\n",
      "commitDate": 1513995633000,
      "commitName": "776171b71897fde845e1f1c08f7bd2250e1b203d",
      "commitAuthor": "BBG",
      "commitDateOld": 1510708572000,
      "commitNameOld": "32e2b7ba57e189074662d84a04535a87c3a19b0c",
      "commitAuthorOld": "Subbu Dantu",
      "daysBetweenCommits": 38.04,
      "commitsBetweenForRepo": 99,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n     private String getImportGroup(boolean isStatic, String importPath) {\n         RuleMatchForImport bestMatch \u003d new RuleMatchForImport(NON_GROUP_RULE_GROUP, 0, 0);\n         if (isStatic \u0026\u0026 customImportOrderRules.contains(STATIC_RULE_GROUP)) {\n             bestMatch.group \u003d STATIC_RULE_GROUP;\n             bestMatch.matchLength \u003d importPath.length();\n         }\n         else if (customImportOrderRules.contains(SAME_PACKAGE_RULE_GROUP)) {\n             final String importPathTrimmedToSamePackageDepth \u003d\n                     getFirstDomainsFromIdent(samePackageMatchingDepth, importPath);\n             if (samePackageDomainsRegExp.equals(importPathTrimmedToSamePackageDepth)) {\n                 bestMatch.group \u003d SAME_PACKAGE_RULE_GROUP;\n                 bestMatch.matchLength \u003d importPath.length();\n             }\n         }\n         if (bestMatch.group.equals(NON_GROUP_RULE_GROUP)) {\n             for (String group : customImportOrderRules) {\n                 if (STANDARD_JAVA_PACKAGE_RULE_GROUP.equals(group)) {\n                     bestMatch \u003d findBetterPatternMatch(importPath,\n                             STANDARD_JAVA_PACKAGE_RULE_GROUP, standardPackageRegExp, bestMatch);\n                 }\n                 if (SPECIAL_IMPORTS_RULE_GROUP.equals(group)) {\n                     bestMatch \u003d findBetterPatternMatch(importPath,\n-                            SPECIAL_IMPORTS_RULE_GROUP, specialImportsRegExp, bestMatch);\n+                            group, specialImportsRegExp, bestMatch);\n                 }\n             }\n         }\n         if (bestMatch.group.equals(NON_GROUP_RULE_GROUP)\n                 \u0026\u0026 customImportOrderRules.contains(THIRD_PARTY_PACKAGE_RULE_GROUP)\n                 \u0026\u0026 thirdPartyPackageRegExp.matcher(importPath).find()) {\n             bestMatch.group \u003d THIRD_PARTY_PACKAGE_RULE_GROUP;\n         }\n         return bestMatch.group;\n     }\n\\ No newline at end of file\n"
    },
    "6e8d1e06728b7defbd734253b3818a33676b62bc": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3721: enforced no abbreviations in checkstyle",
      "commitDate": 1487369078000,
      "commitName": "6e8d1e06728b7defbd734253b3818a33676b62bc",
      "commitAuthor": "rnveach",
      "commitDateOld": 1485527514000,
      "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 21.31,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n     private String getImportGroup(boolean isStatic, String importPath) {\n         RuleMatchForImport bestMatch \u003d new RuleMatchForImport(NON_GROUP_RULE_GROUP, 0, 0);\n         if (isStatic \u0026\u0026 customImportOrderRules.contains(STATIC_RULE_GROUP)) {\n             bestMatch.group \u003d STATIC_RULE_GROUP;\n             bestMatch.matchLength \u003d importPath.length();\n         }\n         else if (customImportOrderRules.contains(SAME_PACKAGE_RULE_GROUP)) {\n             final String importPathTrimmedToSamePackageDepth \u003d\n-                    getFirstNDomainsFromIdent(samePackageMatchingDepth, importPath);\n+                    getFirstDomainsFromIdent(samePackageMatchingDepth, importPath);\n             if (samePackageDomainsRegExp.equals(importPathTrimmedToSamePackageDepth)) {\n                 bestMatch.group \u003d SAME_PACKAGE_RULE_GROUP;\n                 bestMatch.matchLength \u003d importPath.length();\n             }\n         }\n         if (bestMatch.group.equals(NON_GROUP_RULE_GROUP)) {\n             for (String group : customImportOrderRules) {\n                 if (STANDARD_JAVA_PACKAGE_RULE_GROUP.equals(group)) {\n                     bestMatch \u003d findBetterPatternMatch(importPath,\n                             STANDARD_JAVA_PACKAGE_RULE_GROUP, standardPackageRegExp, bestMatch);\n                 }\n                 if (SPECIAL_IMPORTS_RULE_GROUP.equals(group)) {\n                     bestMatch \u003d findBetterPatternMatch(importPath,\n                             SPECIAL_IMPORTS_RULE_GROUP, specialImportsRegExp, bestMatch);\n                 }\n             }\n         }\n         if (bestMatch.group.equals(NON_GROUP_RULE_GROUP)\n                 \u0026\u0026 customImportOrderRules.contains(THIRD_PARTY_PACKAGE_RULE_GROUP)\n                 \u0026\u0026 thirdPartyPackageRegExp.matcher(importPath).find()) {\n             bestMatch.group \u003d THIRD_PARTY_PACKAGE_RULE_GROUP;\n         }\n         return bestMatch.group;\n     }\n\\ No newline at end of file\n"
    },
    "e15f70ac5b1460236e14237acc3a041102238efd": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1273: CustomImportOrderCheck rule priorities\n",
      "commitDate": 1442580578000,
      "commitName": "e15f70ac5b1460236e14237acc3a041102238efd",
      "commitAuthor": "Aleksandr Ivanov",
      "commitDateOld": 1441040575000,
      "commitNameOld": "5ca96679525171c73fc4d5c257301f51d2100071",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 17.82,
      "commitsBetweenForRepo": 145,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,33 @@\n     private String getImportGroup(boolean isStatic, String importPath) {\n-        for (String group : customImportOrderRules) {\n-            if (matchesImportGroup(isStatic, importPath, group)) {\n-                return group;\n+        RuleMatchForImport bestMatch \u003d new RuleMatchForImport(NON_GROUP_RULE_GROUP, 0, 0);\n+        if (isStatic \u0026\u0026 customImportOrderRules.contains(STATIC_RULE_GROUP)) {\n+            bestMatch.group \u003d STATIC_RULE_GROUP;\n+            bestMatch.matchLength \u003d importPath.length();\n+        }\n+        else if (customImportOrderRules.contains(SAME_PACKAGE_RULE_GROUP)) {\n+            final String importPathTrimmedToSamePackageDepth \u003d\n+                    getFirstNDomainsFromIdent(samePackageMatchingDepth, importPath);\n+            if (samePackageDomainsRegExp.equals(importPathTrimmedToSamePackageDepth)) {\n+                bestMatch.group \u003d SAME_PACKAGE_RULE_GROUP;\n+                bestMatch.matchLength \u003d importPath.length();\n             }\n         }\n-        return NON_GROUP_RULE_GROUP;\n+        if (bestMatch.group.equals(NON_GROUP_RULE_GROUP)) {\n+            for (String group : customImportOrderRules) {\n+                if (STANDARD_JAVA_PACKAGE_RULE_GROUP.equals(group)) {\n+                    bestMatch \u003d findBetterPatternMatch(importPath,\n+                            STANDARD_JAVA_PACKAGE_RULE_GROUP, standardPackageRegExp, bestMatch);\n+                }\n+                if (SPECIAL_IMPORTS_RULE_GROUP.equals(group)) {\n+                    bestMatch \u003d findBetterPatternMatch(importPath,\n+                            SPECIAL_IMPORTS_RULE_GROUP, specialImportsRegExp, bestMatch);\n+                }\n+            }\n+        }\n+        if (bestMatch.group.equals(NON_GROUP_RULE_GROUP)\n+                \u0026\u0026 customImportOrderRules.contains(THIRD_PARTY_PACKAGE_RULE_GROUP)\n+                \u0026\u0026 thirdPartyPackageRegExp.matcher(importPath).find()) {\n+            bestMatch.group \u003d THIRD_PARTY_PACKAGE_RULE_GROUP;\n+        }\n+        return bestMatch.group;\n     }\n\\ No newline at end of file\n"
    },
    "16dac636b246c658cad31ee9b2e45c53b851d4f2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, imports, #512\n",
      "commitDate": 1421678111000,
      "commitName": "16dac636b246c658cad31ee9b2e45c53b851d4f2",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "2a3be6769c4a97d090970ed52ca2333cb9aea706": {
      "type": "Yintroduced",
      "commitMessage": "CustomImportOrder was introduced #231\n",
      "commitDate": 1407671579000,
      "commitName": "2a3be6769c4a97d090970ed52ca2333cb9aea706",
      "commitAuthor": "Max"
    }
  }
}