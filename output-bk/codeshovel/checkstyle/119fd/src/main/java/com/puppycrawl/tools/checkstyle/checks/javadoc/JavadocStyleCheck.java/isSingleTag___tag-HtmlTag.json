{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "JavadocStyleCheck.java",
  "functionName": "isSingleTag",
  "functionId": "isSingleTag___tag-HtmlTag",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
  "functionStartLine": 454,
  "functionEndLine": 460,
  "changeHistory": [
    "4c078ba710068498ca513ce115993e30dab4562a",
    "335d28b4947d4f7722ccbd45ecc1e84bc5a18571",
    "89a51ba032fd9126651fa9efad31baf10c006ddf",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "7823165cce4d7978fe928d8ada0a4861c950ff0f",
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
    "51dae59b8dcfb5a34f2a8a5b3e788eb6599a1df3"
  ],
  "changeHistoryShort": {
    "4c078ba710068498ca513ce115993e30dab4562a": "Ymodifierchange",
    "335d28b4947d4f7722ccbd45ecc1e84bc5a18571": "Ybodychange",
    "89a51ba032fd9126651fa9efad31baf10c006ddf": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "7823165cce4d7978fe928d8ada0a4861c950ff0f": "Ybodychange",
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1": "Ybodychange",
    "51dae59b8dcfb5a34f2a8a5b3e788eb6599a1df3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4c078ba710068498ca513ce115993e30dab4562a": {
      "type": "Ymodifierchange",
      "commitMessage": "Make \"private\" methods \"static\" where possible. #46\n\nSonarQube rule: [\"private\" methods that don\u0027t access instance data should be \"static\"](http://nemo.sonarqube.org/coding_rules#rule_key\u003dsquid%3AS2325).\n\nRationale: private methods that don\u0027t access instance data can be static to prevent any misunderstanding about the contract of the method.\n",
      "commitDate": 1437195084000,
      "commitName": "4c078ba710068498ca513ce115993e30dab4562a",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1431863229000,
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 61.71,
      "commitsBetweenForRepo": 387,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,7 +1,7 @@\n-    private boolean isSingleTag(HtmlTag tag) {\n+    private static boolean isSingleTag(HtmlTag tag) {\n         // If its a singleton tag (\u003cp\u003e, \u003cbr\u003e, etc.), ignore it\n         // Can\u0027t simply not put them on the stack, since singletons\n         // like \u003cdt\u003e and \u003cdd\u003e (unhappily) may either be terminated\n         // or not terminated. Both options are legal.\n         return SINGLE_TAGS.contains(tag.getId().toLowerCase(Locale.ENGLISH));\n     }\n\\ No newline at end of file\n"
    },
    "335d28b4947d4f7722ccbd45ecc1e84bc5a18571": {
      "type": "Ybodychange",
      "commitMessage": "issue969: Fix upper/lower case conversation, enhance tests\n",
      "commitDate": 1429818204000,
      "commitName": "335d28b4947d4f7722ccbd45ecc1e84bc5a18571",
      "commitAuthor": "Mehmet Can CÃ¶mert",
      "commitDateOld": 1428792106000,
      "commitNameOld": "7dd24c8c35572b5db3e5c905d440e813cfe2538c",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 11.88,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,8 @@\n     private boolean isSingleTag(HtmlTag tag)\n     {\n         // If its a singleton tag (\u003cp\u003e, \u003cbr\u003e, etc.), ignore it\n         // Can\u0027t simply not put them on the stack, since singletons\n         // like \u003cdt\u003e and \u003cdd\u003e (unhappily) may either be terminated\n         // or not terminated. Both options are legal.\n-        return SINGLE_TAGS.contains(tag.getId().toLowerCase());\n+        return SINGLE_TAGS.contains(tag.getId().toLowerCase(Locale.ENGLISH));\n     }\n\\ No newline at end of file\n"
    },
    "89a51ba032fd9126651fa9efad31baf10c006ddf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, javadoc, #512\n",
      "commitDate": 1421677262000,
      "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "7823165cce4d7978fe928d8ada0a4861c950ff0f": {
      "type": "Ybodychange",
      "commitMessage": "Enhanced JavadocStyle to check for allowed HTML tags. Thanks to Nicolas Dordet for providing patch #2214251.\n",
      "commitDate": 1231479924000,
      "commitName": "7823165cce4d7978fe928d8ada0a4861c950ff0f",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1213677669000,
      "commitNameOld": "428c1a057e8c8e5cc1fe8a16b53a0a9bb75becec",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 206.04,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,8 @@\n     private boolean isSingleTag(HtmlTag aTag)\n     {\n-        boolean isSingleTag \u003d false;\n-        for (String element : SINGLE_TAG) {\n-            // If its a singleton tag (\u003cp\u003e, \u003cbr\u003e, etc.), ignore it\n-            // Can\u0027t simply not put them on the stack, since singletons\n-            // like \u003cdt\u003e and \u003cdd\u003e (unhappily) may either be terminated\n-            // or not terminated. Both options are legal.\n-            if (aTag.getId().equalsIgnoreCase(element)) {\n-                isSingleTag \u003d true;\n-            }\n-        }\n-        return isSingleTag;\n+        // If its a singleton tag (\u003cp\u003e, \u003cbr\u003e, etc.), ignore it\n+        // Can\u0027t simply not put them on the stack, since singletons\n+        // like \u003cdt\u003e and \u003cdd\u003e (unhappily) may either be terminated\n+        // or not terminated. Both options are legal.\n+        return SINGLE_TAGS.contains(aTag.getId().toLowerCase());\n     }\n\\ No newline at end of file\n"
    },
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1": {
      "type": "Ybodychange",
      "commitMessage": "Use the new syntactic sugar \"for loop\".\n\nEnd of the cosmetic changes.\n",
      "commitDate": 1197714527000,
      "commitName": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1197694270000,
      "commitNameOld": "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.23,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n     private boolean isSingleTag(HtmlTag aTag)\n     {\n         boolean isSingleTag \u003d false;\n-        for (int i \u003d 0; i \u003c SINGLE_TAG.length; i++) {\n+        for (String element : SINGLE_TAG) {\n             // If its a singleton tag (\u003cp\u003e, \u003cbr\u003e, etc.), ignore it\n             // Can\u0027t simply not put them on the stack, since singletons\n             // like \u003cdt\u003e and \u003cdd\u003e (unhappily) may either be terminated\n             // or not terminated. Both options are legal.\n-            if (aTag.getId().equalsIgnoreCase(SINGLE_TAG[i])) {\n+            if (aTag.getId().equalsIgnoreCase(element)) {\n                 isSingleTag \u003d true;\n             }\n         }\n         return isSingleTag;\n     }\n\\ No newline at end of file\n"
    },
    "51dae59b8dcfb5a34f2a8a5b3e788eb6599a1df3": {
      "type": "Yintroduced",
      "commitMessage": "New Javadoc style check from Chris Stillwell.\n",
      "commitDate": 1058185912000,
      "commitName": "51dae59b8dcfb5a34f2a8a5b3e788eb6599a1df3",
      "commitAuthor": "Oliver Burn"
    }
  }
}