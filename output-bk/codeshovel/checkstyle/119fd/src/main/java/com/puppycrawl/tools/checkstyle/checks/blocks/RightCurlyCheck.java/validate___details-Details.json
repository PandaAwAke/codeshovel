{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "RightCurlyCheck.java",
  "functionName": "validate",
  "functionId": "validate___details-Details",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java",
  "functionStartLine": 195,
  "functionEndLine": 213,
  "changeHistory": [
    "e0bb421ead241b65c5d8b4acafe5f8247aea8576",
    "e76321214095de771762216c5dbbe3db0203c541",
    "70ab9f4af3d163b940e025bc4665f2f23892525a",
    "2551676ccf743822951d42658085c70e7aa869bd",
    "b0d5b01b3cd174004843fb6fcc91cb971f17f7a2",
    "4a6e1a3541fc31dc7450de00943fd94a20d9223e",
    "b576ccf8793690e8459a6620cc1611531f3f9890",
    "f32bcd07ee2791708e97c5202ad688a84605d375",
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
    "1e6dc8f4eab264568db73a663e9c0d9528d2ffe1",
    "d282d5b8db9eba5943d1cb0269315744d5344a47",
    "3a5a73d5c110418f712f5a9a838c6b4106506fdd",
    "f1dced161ab0c818f0e1e125fc5b88b71f5b171e",
    "c99f34002b7340ec8d0888f8f9b3992df798e408"
  ],
  "changeHistoryShort": {
    "e0bb421ead241b65c5d8b4acafe5f8247aea8576": "Ybodychange",
    "e76321214095de771762216c5dbbe3db0203c541": "Ybodychange",
    "70ab9f4af3d163b940e025bc4665f2f23892525a": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "2551676ccf743822951d42658085c70e7aa869bd": "Ybodychange",
    "b0d5b01b3cd174004843fb6fcc91cb971f17f7a2": "Ybodychange",
    "4a6e1a3541fc31dc7450de00943fd94a20d9223e": "Ybodychange",
    "b576ccf8793690e8459a6620cc1611531f3f9890": "Ybodychange",
    "f32bcd07ee2791708e97c5202ad688a84605d375": "Ybodychange",
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7": "Ybodychange",
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970": "Ybodychange",
    "1e6dc8f4eab264568db73a663e9c0d9528d2ffe1": "Ybodychange",
    "d282d5b8db9eba5943d1cb0269315744d5344a47": "Ymultichange(Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
    "3a5a73d5c110418f712f5a9a838c6b4106506fdd": "Ybodychange",
    "f1dced161ab0c818f0e1e125fc5b88b71f5b171e": "Ybodychange",
    "c99f34002b7340ec8d0888f8f9b3992df798e408": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e0bb421ead241b65c5d8b4acafe5f8247aea8576": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4091: False negative on multiblock tokens with ALONE_OR_SINGLELINE option\n",
      "commitDate": 1491402064000,
      "commitName": "e0bb421ead241b65c5d8b4acafe5f8247aea8576",
      "commitAuthor": "Vladislav Lisetskii",
      "commitDateOld": 1490042350000,
      "commitNameOld": "e76321214095de771762216c5dbbe3db0203c541",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 15.74,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,19 @@\n     private String validate(Details details) {\n-        final DetailAST rcurly \u003d details.rcurly;\n-        final DetailAST nextToken \u003d details.nextToken;\n-        final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n         String violation \u003d \"\";\n         if (shouldHaveLineBreakBefore(option, details)) {\n             violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n         }\n-        else if (shouldCheckLastRcurly\n-                 \u0026\u0026 option !\u003d RightCurlyOption.ALONE) {\n-            if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n-                violation \u003d MSG_KEY_LINE_ALONE;\n-            }\n-        }\n         else if (shouldBeOnSameLine(option, details)) {\n             violation \u003d MSG_KEY_LINE_SAME;\n         }\n         else if (shouldBeAloneOnLine(option, details)) {\n             violation \u003d MSG_KEY_LINE_ALONE;\n         }\n         else if (shouldStartLine) {\n-            final String targetSourceLine \u003d getLines()[rcurly.getLineNo() - 1];\n+            final String targetSourceLine \u003d getLines()[details.rcurly.getLineNo() - 1];\n             if (!isOnStartOfLine(details, targetSourceLine)) {\n                 violation \u003d MSG_KEY_LINE_NEW;\n             }\n         }\n         return violation;\n     }\n\\ No newline at end of file\n"
    },
    "e76321214095de771762216c5dbbe3db0203c541": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4044: Fix false negative in ALONE while checking single line if blocks\n",
      "commitDate": 1490042350000,
      "commitName": "e76321214095de771762216c5dbbe3db0203c541",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": 1489894018000,
      "commitNameOld": "d2ddf5c6fc6b816dce7566dd5beaff5c5841f679",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 1.72,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,28 @@\n     private String validate(Details details) {\n         final DetailAST rcurly \u003d details.rcurly;\n-        final DetailAST lcurly \u003d details.lcurly;\n         final DetailAST nextToken \u003d details.nextToken;\n         final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n         String violation \u003d \"\";\n-        if (option \u003d\u003d RightCurlyOption.SAME\n-                \u0026\u0026 !hasLineBreakBefore(rcurly)\n-                \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n+        if (shouldHaveLineBreakBefore(option, details)) {\n             violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n         }\n-        else if (shouldCheckLastRcurly) {\n+        else if (shouldCheckLastRcurly\n+                 \u0026\u0026 option !\u003d RightCurlyOption.ALONE) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 violation \u003d MSG_KEY_LINE_ALONE;\n             }\n         }\n         else if (shouldBeOnSameLine(option, details)) {\n             violation \u003d MSG_KEY_LINE_SAME;\n         }\n         else if (shouldBeAloneOnLine(option, details)) {\n             violation \u003d MSG_KEY_LINE_ALONE;\n         }\n         else if (shouldStartLine) {\n             final String targetSourceLine \u003d getLines()[rcurly.getLineNo() - 1];\n             if (!isOnStartOfLine(details, targetSourceLine)) {\n                 violation \u003d MSG_KEY_LINE_NEW;\n             }\n         }\n         return violation;\n     }\n\\ No newline at end of file\n"
    },
    "70ab9f4af3d163b940e025bc4665f2f23892525a": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "Issue #3685: Refactoring for RightCurlyCheck.java\n",
      "commitDate": 1489375704000,
      "commitName": "70ab9f4af3d163b940e025bc4665f2f23892525a",
      "commitAuthor": "Sagar",
      "subchanges": [
        "Yparameterchange",
        "Ymodifierchange",
        "Ybodychange"
      ]
    },
    "2551676ccf743822951d42658085c70e7aa869bd": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"Issue #3546: add lambda in a rightcurlycheck\"\n\nThis reverts commit b0d5b01b3cd174004843fb6fcc91cb971f17f7a2.\n",
      "commitDate": 1485641699000,
      "commitName": "2551676ccf743822951d42658085c70e7aa869bd",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": 1485641674000,
      "commitNameOld": "b0d5b01b3cd174004843fb6fcc91cb971f17f7a2",
      "commitAuthorOld": "MaksimP",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,29 @@\n     private static String validate(Details details, RightCurlyOption bracePolicy,\n                                    boolean shouldStartLine, String targetSourceLine) {\n         final DetailAST rcurly \u003d details.rcurly;\n+        final DetailAST lcurly \u003d details.lcurly;\n         final DetailAST nextToken \u003d details.nextToken;\n         final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n         String violation \u003d \"\";\n \n-        if (shouldHaveBeLineBreakBefore(bracePolicy, details)) {\n+        if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n+                \u0026\u0026 !hasLineBreakBefore(rcurly)\n+                \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n             violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n         }\n         else if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 violation \u003d MSG_KEY_LINE_ALONE;\n             }\n         }\n         else if (shouldBeOnSameLine(bracePolicy, details)) {\n             violation \u003d MSG_KEY_LINE_SAME;\n         }\n         else if (shouldBeAloneOnLine(bracePolicy, details)) {\n             violation \u003d MSG_KEY_LINE_ALONE;\n         }\n         else if (shouldStartLine \u0026\u0026 !isOnStartOfLine(details, targetSourceLine)) {\n             violation \u003d MSG_KEY_LINE_NEW;\n         }\n         return violation;\n     }\n\\ No newline at end of file\n"
    },
    "b0d5b01b3cd174004843fb6fcc91cb971f17f7a2": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3546: add lambda in a rightcurlycheck\n",
      "commitDate": 1485641674000,
      "commitName": "b0d5b01b3cd174004843fb6fcc91cb971f17f7a2",
      "commitAuthor": "MaksimP",
      "commitDateOld": 1485547897000,
      "commitNameOld": "4cda2565674ea4260547e663e9660df0029709d1",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 1.09,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,26 @@\n     private static String validate(Details details, RightCurlyOption bracePolicy,\n                                    boolean shouldStartLine, String targetSourceLine) {\n         final DetailAST rcurly \u003d details.rcurly;\n-        final DetailAST lcurly \u003d details.lcurly;\n         final DetailAST nextToken \u003d details.nextToken;\n         final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n         String violation \u003d \"\";\n \n-        if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n-                \u0026\u0026 !hasLineBreakBefore(rcurly)\n-                \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n+        if (shouldHaveBeLineBreakBefore(bracePolicy, details)) {\n             violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n         }\n         else if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 violation \u003d MSG_KEY_LINE_ALONE;\n             }\n         }\n         else if (shouldBeOnSameLine(bracePolicy, details)) {\n             violation \u003d MSG_KEY_LINE_SAME;\n         }\n         else if (shouldBeAloneOnLine(bracePolicy, details)) {\n             violation \u003d MSG_KEY_LINE_ALONE;\n         }\n         else if (shouldStartLine \u0026\u0026 !isOnStartOfLine(details, targetSourceLine)) {\n             violation \u003d MSG_KEY_LINE_NEW;\n         }\n         return violation;\n     }\n\\ No newline at end of file\n"
    },
    "4a6e1a3541fc31dc7450de00943fd94a20d9223e": {
      "type": "Ybodychange",
      "commitMessage": "minor: renaming indentation methods to more natural name",
      "commitDate": 1450281394000,
      "commitName": "4a6e1a3541fc31dc7450de00943fd94a20d9223e",
      "commitAuthor": "rnveach",
      "commitDateOld": 1447384577000,
      "commitNameOld": "9faf80abaee2a2e224c7d0f9d4a45307b37a398e",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 33.53,
      "commitsBetweenForRepo": 124,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     private static String validate(Details details, RightCurlyOption bracePolicy,\n                                    boolean shouldStartLine, String targetSourceLine) {\n         final DetailAST rcurly \u003d details.rcurly;\n         final DetailAST lcurly \u003d details.lcurly;\n         final DetailAST nextToken \u003d details.nextToken;\n         final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n         String violation \u003d \"\";\n \n         if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 !hasLineBreakBefore(rcurly)\n                 \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n             violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n         }\n         else if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 violation \u003d MSG_KEY_LINE_ALONE;\n             }\n         }\n         else if (shouldBeOnSameLine(bracePolicy, details)) {\n             violation \u003d MSG_KEY_LINE_SAME;\n         }\n         else if (shouldBeAloneOnLine(bracePolicy, details)) {\n             violation \u003d MSG_KEY_LINE_ALONE;\n         }\n-        else if (shouldStartLine \u0026\u0026 !startsLine(details, targetSourceLine)) {\n+        else if (shouldStartLine \u0026\u0026 !isOnStartOfLine(details, targetSourceLine)) {\n             violation \u003d MSG_KEY_LINE_NEW;\n         }\n         return violation;\n     }\n\\ No newline at end of file\n"
    },
    "b576ccf8793690e8459a6620cc1611531f3f9890": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: Fixed CyclomaticComplexity violations in RightCurlyCheck\n",
      "commitDate": 1440942855000,
      "commitName": "b576ccf8793690e8459a6620cc1611531f3f9890",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": 1440874042000,
      "commitNameOld": "f32bcd07ee2791708e97c5202ad688a84605d375",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 0.8,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,29 @@\n     private static String validate(Details details, RightCurlyOption bracePolicy,\n                                    boolean shouldStartLine, String targetSourceLine) {\n         final DetailAST rcurly \u003d details.rcurly;\n         final DetailAST lcurly \u003d details.lcurly;\n         final DetailAST nextToken \u003d details.nextToken;\n         final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n         String violation \u003d \"\";\n \n         if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 !hasLineBreakBefore(rcurly)\n                 \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n             violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n         }\n         else if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 violation \u003d MSG_KEY_LINE_ALONE;\n             }\n         }\n-        else if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n-                \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo()) {\n+        else if (shouldBeOnSameLine(bracePolicy, details)) {\n             violation \u003d MSG_KEY_LINE_SAME;\n         }\n-        else if (shouldBeAloneOnLine(details, bracePolicy)) {\n+        else if (shouldBeAloneOnLine(bracePolicy, details)) {\n             violation \u003d MSG_KEY_LINE_ALONE;\n         }\n-        else if (shouldStartLine) {\n-            final boolean startsLine \u003d\n-                    CommonUtils.hasWhitespaceBefore(rcurly.getColumnNo(), targetSourceLine);\n-\n-            if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n-                violation \u003d MSG_KEY_LINE_NEW;\n-            }\n+        else if (shouldStartLine \u0026\u0026 !startsLine(details, targetSourceLine)) {\n+            violation \u003d MSG_KEY_LINE_NEW;\n         }\n         return violation;\n     }\n\\ No newline at end of file\n"
    },
    "f32bcd07ee2791708e97c5202ad688a84605d375": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: Fixed CyclomaticCompexityCheck violation in RightCurlyCheck\n",
      "commitDate": 1440874042000,
      "commitName": "f32bcd07ee2791708e97c5202ad688a84605d375",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": 1440827451000,
      "commitNameOld": "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.54,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,35 @@\n     private static String validate(Details details, RightCurlyOption bracePolicy,\n                                    boolean shouldStartLine, String targetSourceLine) {\n         final DetailAST rcurly \u003d details.rcurly;\n         final DetailAST lcurly \u003d details.lcurly;\n         final DetailAST nextToken \u003d details.nextToken;\n         final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n         String violation \u003d \"\";\n \n         if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 !hasLineBreakBefore(rcurly)\n                 \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n             violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n         }\n         else if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 violation \u003d MSG_KEY_LINE_ALONE;\n             }\n         }\n         else if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo()) {\n             violation \u003d MSG_KEY_LINE_SAME;\n         }\n-        else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE\n-                \u0026\u0026 !isAloneOnLine(details)\n-                \u0026\u0026 !isEmptyBody(lcurly)) {\n-            violation \u003d MSG_KEY_LINE_ALONE;\n-        }\n-        else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE_OR_SINGLELINE\n-                \u0026\u0026 !isAloneOnLine(details)\n-                \u0026\u0026 !isSingleLineBlock(details)\n-                \u0026\u0026 !isAnonInnerClassInit(lcurly)\n-                \u0026\u0026 !isEmptyBody(lcurly)) {\n+        else if (shouldBeAloneOnLine(details, bracePolicy)) {\n             violation \u003d MSG_KEY_LINE_ALONE;\n         }\n         else if (shouldStartLine) {\n             final boolean startsLine \u003d\n                     CommonUtils.hasWhitespaceBefore(rcurly.getColumnNo(), targetSourceLine);\n \n             if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n                 violation \u003d MSG_KEY_LINE_NEW;\n             }\n         }\n         return violation;\n     }\n\\ No newline at end of file\n"
    },
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1555: Rename methods returning boolean to use question word\n\nFixes some `BooleanMethodNameMustStartWithQuestion` inspection violations.\n\nDescription:\n\u003eReports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection.\n",
      "commitDate": 1440827451000,
      "commitName": "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440739668000,
      "commitNameOld": "cb5a59fc6baf5de204e3cc99be6ba9865e44350a",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 1.02,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n     private static String validate(Details details, RightCurlyOption bracePolicy,\n                                    boolean shouldStartLine, String targetSourceLine) {\n         final DetailAST rcurly \u003d details.rcurly;\n         final DetailAST lcurly \u003d details.lcurly;\n         final DetailAST nextToken \u003d details.nextToken;\n         final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n         String violation \u003d \"\";\n \n         if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 !hasLineBreakBefore(rcurly)\n                 \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n             violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n         }\n         else if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 violation \u003d MSG_KEY_LINE_ALONE;\n             }\n         }\n         else if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo()) {\n             violation \u003d MSG_KEY_LINE_SAME;\n         }\n         else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE\n                 \u0026\u0026 !isAloneOnLine(details)\n                 \u0026\u0026 !isEmptyBody(lcurly)) {\n             violation \u003d MSG_KEY_LINE_ALONE;\n         }\n         else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE_OR_SINGLELINE\n                 \u0026\u0026 !isAloneOnLine(details)\n                 \u0026\u0026 !isSingleLineBlock(details)\n                 \u0026\u0026 !isAnonInnerClassInit(lcurly)\n                 \u0026\u0026 !isEmptyBody(lcurly)) {\n             violation \u003d MSG_KEY_LINE_ALONE;\n         }\n         else if (shouldStartLine) {\n             final boolean startsLine \u003d\n-                    CommonUtils.whitespaceBefore(rcurly.getColumnNo(), targetSourceLine);\n+                    CommonUtils.hasWhitespaceBefore(rcurly.getColumnNo(), targetSourceLine);\n \n             if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n                 violation \u003d MSG_KEY_LINE_NEW;\n             }\n         }\n         return violation;\n     }\n\\ No newline at end of file\n"
    },
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970": {
      "type": "Ybodychange",
      "commitMessage": "Utils class has been splitted to CommonUtils and TokenUtils. Issue #1898\n",
      "commitDate": 1440677821000,
      "commitName": "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": 1440677821000,
      "commitNameOld": "ed595de84fba2db507adaf01d04cb089a5e0bac5",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n     private static String validate(Details details, RightCurlyOption bracePolicy,\n                                    boolean shouldStartLine, String targetSourceLine) {\n         final DetailAST rcurly \u003d details.rcurly;\n         final DetailAST lcurly \u003d details.lcurly;\n         final DetailAST nextToken \u003d details.nextToken;\n         final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n         String violation \u003d \"\";\n \n         if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 !hasLineBreakBefore(rcurly)\n                 \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n             violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n         }\n         else if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 violation \u003d MSG_KEY_LINE_ALONE;\n             }\n         }\n         else if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo()) {\n             violation \u003d MSG_KEY_LINE_SAME;\n         }\n         else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE\n                 \u0026\u0026 !isAloneOnLine(details)\n                 \u0026\u0026 !isEmptyBody(lcurly)) {\n             violation \u003d MSG_KEY_LINE_ALONE;\n         }\n         else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE_OR_SINGLELINE\n                 \u0026\u0026 !isAloneOnLine(details)\n                 \u0026\u0026 !isSingleLineBlock(details)\n                 \u0026\u0026 !isAnonInnerClassInit(lcurly)\n                 \u0026\u0026 !isEmptyBody(lcurly)) {\n             violation \u003d MSG_KEY_LINE_ALONE;\n         }\n         else if (shouldStartLine) {\n             final boolean startsLine \u003d\n-                Utils.whitespaceBefore(rcurly.getColumnNo(), targetSourceLine);\n+                    CommonUtils.whitespaceBefore(rcurly.getColumnNo(), targetSourceLine);\n \n             if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n                 violation \u003d MSG_KEY_LINE_NEW;\n             }\n         }\n         return violation;\n     }\n\\ No newline at end of file\n"
    },
    "1e6dc8f4eab264568db73a663e9c0d9528d2ffe1": {
      "type": "Ybodychange",
      "commitMessage": "Fix RightCurlyCheck with same option not to rise expression in single-line blocks - issue #1416\n",
      "commitDate": 1439786416000,
      "commitName": "1e6dc8f4eab264568db73a663e9c0d9528d2ffe1",
      "commitAuthor": "liscju",
      "commitDateOld": 1439782863000,
      "commitNameOld": "d56a2a366c6f9e3e8639d492d548ae562b75dc81",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,44 @@\n     private static String validate(Details details, RightCurlyOption bracePolicy,\n                                    boolean shouldStartLine, String targetSourceLine) {\n         final DetailAST rcurly \u003d details.rcurly;\n         final DetailAST lcurly \u003d details.lcurly;\n         final DetailAST nextToken \u003d details.nextToken;\n         final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n         String violation \u003d \"\";\n \n         if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n-                \u0026\u0026 !hasLineBreakBefore(rcurly)) {\n+                \u0026\u0026 !hasLineBreakBefore(rcurly)\n+                \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n             violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n         }\n         else if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 violation \u003d MSG_KEY_LINE_ALONE;\n             }\n         }\n         else if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo()) {\n             violation \u003d MSG_KEY_LINE_SAME;\n         }\n         else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE\n                 \u0026\u0026 !isAloneOnLine(details)\n                 \u0026\u0026 !isEmptyBody(lcurly)) {\n             violation \u003d MSG_KEY_LINE_ALONE;\n         }\n         else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE_OR_SINGLELINE\n                 \u0026\u0026 !isAloneOnLine(details)\n                 \u0026\u0026 !isSingleLineBlock(details)\n                 \u0026\u0026 !isAnonInnerClassInit(lcurly)\n                 \u0026\u0026 !isEmptyBody(lcurly)) {\n             violation \u003d MSG_KEY_LINE_ALONE;\n         }\n         else if (shouldStartLine) {\n             final boolean startsLine \u003d\n                 Utils.whitespaceBefore(rcurly.getColumnNo(), targetSourceLine);\n \n             if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n                 violation \u003d MSG_KEY_LINE_NEW;\n             }\n         }\n         return violation;\n     }\n\\ No newline at end of file\n"
    },
    "d282d5b8db9eba5943d1cb0269315744d5344a47": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
      "commitMessage": "Refactoring of RightCurlyCheck, issue #1511.\n",
      "commitDate": 1438592589000,
      "commitName": "d282d5b8db9eba5943d1cb0269315744d5344a47",
      "commitAuthor": "Andrei Selkin",
      "subchanges": [
        "Yparameterchange",
        "Yreturntypechange",
        "Ymodifierchange",
        "Ybodychange"
      ]
    },
    "3a5a73d5c110418f712f5a9a838c6b4106506fdd": {
      "type": "Ybodychange",
      "commitMessage": "Added column number into violation messages for RightCurlyCheck and LeftCurlyCheck, issue #1511.\n",
      "commitDate": 1438460185000,
      "commitName": "3a5a73d5c110418f712f5a9a838c6b4106506fdd",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": 1438285211000,
      "commitNameOld": "f1dced161ab0c818f0e1e125fc5b88b71f5b171e",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 2.03,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n     private void validate(Details details, DetailAST rcurly, DetailAST lcurly) {\n         final DetailAST nextToken \u003d details.nextToken;\n         final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n \n         if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 !hasLineBreakBefore(rcurly)) {\n-            log(rcurly, MSG_KEY_LINE_BREAK_BEFORE);\n+            log(rcurly, MSG_KEY_LINE_BREAK_BEFORE, \"}\", rcurly.getColumnNo() + 1);\n         }\n         else if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n-                log(rcurly, MSG_KEY_LINE_ALONE, \"}\");\n+                log(rcurly, MSG_KEY_LINE_ALONE, \"}\", rcurly.getColumnNo() + 1);\n             }\n         }\n         else if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo()) {\n-            log(rcurly, MSG_KEY_LINE_SAME, \"}\");\n+            log(rcurly, MSG_KEY_LINE_SAME, \"}\", rcurly.getColumnNo() + 1);\n         }\n         else if (getAbstractOption() \u003d\u003d RightCurlyOption.ALONE\n                 \u0026\u0026 !isAloneOnLine(details)\n                 \u0026\u0026 !isEmptyBody(lcurly)) {\n-            log(rcurly, MSG_KEY_LINE_ALONE, \"}\");\n+            log(rcurly, MSG_KEY_LINE_ALONE, \"}\", rcurly.getColumnNo() + 1);\n         }\n         else if (getAbstractOption() \u003d\u003d RightCurlyOption.ALONE_OR_SINGLELINE\n                 \u0026\u0026 !isAloneOnLine(details)\n                 \u0026\u0026 !isSingleLineBlock(details)\n                 \u0026\u0026 !isAnonInnerClassInit(lcurly)\n                 \u0026\u0026 !isEmptyBody(lcurly)) {\n-            log(rcurly, MSG_KEY_LINE_ALONE, \"}\");\n+            log(rcurly, MSG_KEY_LINE_ALONE, \"}\", rcurly.getColumnNo() + 1);\n         }\n         else if (shouldStartLine) {\n             final boolean startsLine \u003d\n                 Utils.whitespaceBefore(rcurly.getColumnNo(),\n                     getLines()[rcurly.getLineNo() - 1]);\n \n             if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n-                log(rcurly, MSG_KEY_LINE_NEW, \"}\");\n+                log(rcurly, MSG_KEY_LINE_NEW, \"}\", rcurly.getColumnNo() + 1);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "f1dced161ab0c818f0e1e125fc5b88b71f5b171e": {
      "type": "Ybodychange",
      "commitMessage": "Add new option for RightCurlyCheck, issue #1019.\n",
      "commitDate": 1438285211000,
      "commitName": "f1dced161ab0c818f0e1e125fc5b88b71f5b171e",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": 1438050838000,
      "commitNameOld": "f1dc9b205d1ccdba85e34f4cb7adf9ffd4af2361",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 2.71,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,39 @@\n     private void validate(Details details, DetailAST rcurly, DetailAST lcurly) {\n         final DetailAST nextToken \u003d details.nextToken;\n         final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n \n         if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 !hasLineBreakBefore(rcurly)) {\n             log(rcurly, MSG_KEY_LINE_BREAK_BEFORE);\n         }\n-\n-        if (shouldCheckLastRcurly) {\n+        else if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 log(rcurly, MSG_KEY_LINE_ALONE, \"}\");\n             }\n         }\n         else if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo()) {\n             log(rcurly, MSG_KEY_LINE_SAME, \"}\");\n         }\n         else if (getAbstractOption() \u003d\u003d RightCurlyOption.ALONE\n-                \u0026\u0026 rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()\n+                \u0026\u0026 !isAloneOnLine(details)\n                 \u0026\u0026 !isEmptyBody(lcurly)) {\n             log(rcurly, MSG_KEY_LINE_ALONE, \"}\");\n         }\n+        else if (getAbstractOption() \u003d\u003d RightCurlyOption.ALONE_OR_SINGLELINE\n+                \u0026\u0026 !isAloneOnLine(details)\n+                \u0026\u0026 !isSingleLineBlock(details)\n+                \u0026\u0026 !isAnonInnerClassInit(lcurly)\n+                \u0026\u0026 !isEmptyBody(lcurly)) {\n+            log(rcurly, MSG_KEY_LINE_ALONE, \"}\");\n+        }\n+        else if (shouldStartLine) {\n+            final boolean startsLine \u003d\n+                Utils.whitespaceBefore(rcurly.getColumnNo(),\n+                    getLines()[rcurly.getLineNo() - 1]);\n+\n+            if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n+                log(rcurly, MSG_KEY_LINE_NEW, \"}\");\n+            }\n+        }\n     }\n\\ No newline at end of file\n"
    },
    "c99f34002b7340ec8d0888f8f9b3992df798e408": {
      "type": "Yintroduced",
      "commitMessage": "RightCurlyCheck updated to follow Cyclomatic Complexity rule. #954\n",
      "commitDate": 1434261690000,
      "commitName": "c99f34002b7340ec8d0888f8f9b3992df798e408",
      "commitAuthor": "Roman Ivanov"
    }
  }
}