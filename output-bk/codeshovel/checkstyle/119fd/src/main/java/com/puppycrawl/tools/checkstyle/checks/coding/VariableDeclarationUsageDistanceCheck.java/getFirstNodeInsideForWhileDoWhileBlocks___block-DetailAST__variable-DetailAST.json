{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "VariableDeclarationUsageDistanceCheck.java",
  "functionName": "getFirstNodeInsideForWhileDoWhileBlocks",
  "functionId": "getFirstNodeInsideForWhileDoWhileBlocks___block-DetailAST__variable-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java",
  "functionStartLine": 584,
  "functionEndLine": 613,
  "changeHistory": [
    "0d8e93ce79ea33b72b3e904d8796984271ee3d8d",
    "595f45c428fe23f402d908c74322fd8be2c05e5a",
    "c4339df8b3d6b58b327b6cfcaca7413e9c526dcf",
    "8a3f5bf6d5389b9e175c9c769992faece6d76ada",
    "4c078ba710068498ca513ce115993e30dab4562a",
    "04ceb4b91f4e66439479406834f42014c5be62ed",
    "44e274bfbaf09a067726164e01a9c277f4a97090",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
    "c4e886312aae13b6cfadceed25b1b8aec18d4a96"
  ],
  "changeHistoryShort": {
    "0d8e93ce79ea33b72b3e904d8796984271ee3d8d": "Ybodychange",
    "595f45c428fe23f402d908c74322fd8be2c05e5a": "Ybodychange",
    "c4339df8b3d6b58b327b6cfcaca7413e9c526dcf": "Ybodychange",
    "8a3f5bf6d5389b9e175c9c769992faece6d76ada": "Ybodychange",
    "4c078ba710068498ca513ce115993e30dab4562a": "Ymodifierchange",
    "04ceb4b91f4e66439479406834f42014c5be62ed": "Ybodychange",
    "44e274bfbaf09a067726164e01a9c277f4a97090": "Ybodychange",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": "Ymultichange(Yparameterchange,Ybodychange)",
    "c4e886312aae13b6cfadceed25b1b8aec18d4a96": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0d8e93ce79ea33b72b3e904d8796984271ee3d8d": {
      "type": "Ybodychange",
      "commitMessage": "minor: enforce FinalLocalVariableCheck on checkstyle code\n",
      "commitDate": 1453646135000,
      "commitName": "0d8e93ce79ea33b72b3e904d8796984271ee3d8d",
      "commitAuthor": "Bhavik Patel",
      "commitDateOld": 1451953543000,
      "commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 19.59,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     private static DetailAST getFirstNodeInsideForWhileDoWhileBlocks(\n             DetailAST block, DetailAST variable) {\n         DetailAST firstNodeInsideBlock \u003d null;\n \n         if (!isVariableInOperatorExpr(block, variable)) {\n-            DetailAST currentNode;\n+            final DetailAST currentNode;\n \n             // Find currentNode for DO-WHILE block.\n             if (block.getType() \u003d\u003d TokenTypes.LITERAL_DO) {\n                 currentNode \u003d block.getFirstChild();\n             }\n             // Find currentNode for FOR or WHILE block.\n             else {\n                 // Looking for RPAREN ( \u0027)\u0027 ) token to mark the end of operator\n                 // expression.\n                 currentNode \u003d block.findFirstToken(TokenTypes.RPAREN).getNextSibling();\n             }\n \n             final int currentNodeType \u003d currentNode.getType();\n \n             if (currentNodeType \u003d\u003d TokenTypes.SLIST) {\n                 firstNodeInsideBlock \u003d currentNode.getFirstChild();\n             }\n             else if (currentNodeType !\u003d TokenTypes.EXPR) {\n                 firstNodeInsideBlock \u003d currentNode;\n             }\n         }\n \n         return firstNodeInsideBlock;\n     }\n\\ No newline at end of file\n"
    },
    "595f45c428fe23f402d908c74322fd8be2c05e5a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1293. VariableDeclarationUsageCheck refactroing. Useless variable definition check.\n",
      "commitDate": 1439215017000,
      "commitName": "595f45c428fe23f402d908c74322fd8be2c05e5a",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": 1439215017000,
      "commitNameOld": "495d54c7532363c906bb2b1acf4e010663d6693f",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,30 @@\n     private static DetailAST getFirstNodeInsideForWhileDoWhileBlocks(\n             DetailAST block, DetailAST variable) {\n         DetailAST firstNodeInsideBlock \u003d null;\n \n         if (!isVariableInOperatorExpr(block, variable)) {\n             DetailAST currentNode;\n \n             // Find currentNode for DO-WHILE block.\n             if (block.getType() \u003d\u003d TokenTypes.LITERAL_DO) {\n                 currentNode \u003d block.getFirstChild();\n             }\n             // Find currentNode for FOR or WHILE block.\n             else {\n                 // Looking for RPAREN ( \u0027)\u0027 ) token to mark the end of operator\n                 // expression.\n                 currentNode \u003d block.findFirstToken(TokenTypes.RPAREN).getNextSibling();\n             }\n \n             final int currentNodeType \u003d currentNode.getType();\n \n             if (currentNodeType \u003d\u003d TokenTypes.SLIST) {\n                 firstNodeInsideBlock \u003d currentNode.getFirstChild();\n             }\n-            else if (currentNodeType !\u003d TokenTypes.VARIABLE_DEF\n-                    \u0026\u0026 currentNodeType !\u003d TokenTypes.EXPR) {\n+            else if (currentNodeType !\u003d TokenTypes.EXPR) {\n                 firstNodeInsideBlock \u003d currentNode;\n             }\n         }\n \n         return firstNodeInsideBlock;\n     }\n\\ No newline at end of file\n"
    },
    "c4339df8b3d6b58b327b6cfcaca7413e9c526dcf": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1293. Improved coverage for VariableDecalarationUsageCheck.\n",
      "commitDate": 1439215017000,
      "commitName": "c4339df8b3d6b58b327b6cfcaca7413e9c526dcf",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": 1439189206000,
      "commitNameOld": "86826e1fa3fe3d793ee4723bb84ee0fc4ca38df1",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.3,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,31 @@\n     private static DetailAST getFirstNodeInsideForWhileDoWhileBlocks(\n             DetailAST block, DetailAST variable) {\n         DetailAST firstNodeInsideBlock \u003d null;\n \n         if (!isVariableInOperatorExpr(block, variable)) {\n             DetailAST currentNode;\n \n             // Find currentNode for DO-WHILE block.\n             if (block.getType() \u003d\u003d TokenTypes.LITERAL_DO) {\n                 currentNode \u003d block.getFirstChild();\n             }\n             // Find currentNode for FOR or WHILE block.\n             else {\n                 // Looking for RPAREN ( \u0027)\u0027 ) token to mark the end of operator\n                 // expression.\n-                currentNode \u003d block.findFirstToken(TokenTypes.RPAREN);\n-                if (currentNode !\u003d null) {\n-                    currentNode \u003d currentNode.getNextSibling();\n-                }\n+                currentNode \u003d block.findFirstToken(TokenTypes.RPAREN).getNextSibling();\n             }\n \n-            if (currentNode !\u003d null) {\n-                final int currentNodeType \u003d currentNode.getType();\n+            final int currentNodeType \u003d currentNode.getType();\n \n-                if (currentNodeType \u003d\u003d TokenTypes.SLIST) {\n-                    firstNodeInsideBlock \u003d currentNode.getFirstChild();\n-                }\n-                else if (currentNodeType !\u003d TokenTypes.VARIABLE_DEF\n-                        \u0026\u0026 currentNodeType !\u003d TokenTypes.EXPR) {\n-                    firstNodeInsideBlock \u003d currentNode;\n-                }\n+            if (currentNodeType \u003d\u003d TokenTypes.SLIST) {\n+                firstNodeInsideBlock \u003d currentNode.getFirstChild();\n+            }\n+            else if (currentNodeType !\u003d TokenTypes.VARIABLE_DEF\n+                    \u0026\u0026 currentNodeType !\u003d TokenTypes.EXPR) {\n+                firstNodeInsideBlock \u003d currentNode;\n             }\n         }\n \n         return firstNodeInsideBlock;\n     }\n\\ No newline at end of file\n"
    },
    "8a3f5bf6d5389b9e175c9c769992faece6d76ada": {
      "type": "Ybodychange",
      "commitMessage": "Remove unused assignments. #1555\n\nFixes UnusedAssignment inspection violations.\n\nDescription:\n\u003eThis inspection points out the cases where a variable value is never used after its assignment, i.e.:\n- the variable never gets read after assignment OR\n- the value is always overwritten with another assignment before the next variable read OR\n - the variable initializer is redundant (for one of the above two reasons) OR\n - the variable is never used.\n",
      "commitDate": 1439007161000,
      "commitName": "8a3f5bf6d5389b9e175c9c769992faece6d76ada",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1437195084000,
      "commitNameOld": "4c078ba710068498ca513ce115993e30dab4562a",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 20.97,
      "commitsBetweenForRepo": 224,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n     private static DetailAST getFirstNodeInsideForWhileDoWhileBlocks(\n             DetailAST block, DetailAST variable) {\n         DetailAST firstNodeInsideBlock \u003d null;\n \n         if (!isVariableInOperatorExpr(block, variable)) {\n-            DetailAST currentNode \u003d null;\n+            DetailAST currentNode;\n \n             // Find currentNode for DO-WHILE block.\n             if (block.getType() \u003d\u003d TokenTypes.LITERAL_DO) {\n                 currentNode \u003d block.getFirstChild();\n             }\n             // Find currentNode for FOR or WHILE block.\n             else {\n                 // Looking for RPAREN ( \u0027)\u0027 ) token to mark the end of operator\n                 // expression.\n                 currentNode \u003d block.findFirstToken(TokenTypes.RPAREN);\n                 if (currentNode !\u003d null) {\n                     currentNode \u003d currentNode.getNextSibling();\n                 }\n             }\n \n             if (currentNode !\u003d null) {\n                 final int currentNodeType \u003d currentNode.getType();\n \n                 if (currentNodeType \u003d\u003d TokenTypes.SLIST) {\n                     firstNodeInsideBlock \u003d currentNode.getFirstChild();\n                 }\n                 else if (currentNodeType !\u003d TokenTypes.VARIABLE_DEF\n                         \u0026\u0026 currentNodeType !\u003d TokenTypes.EXPR) {\n                     firstNodeInsideBlock \u003d currentNode;\n                 }\n             }\n         }\n \n         return firstNodeInsideBlock;\n     }\n\\ No newline at end of file\n"
    },
    "4c078ba710068498ca513ce115993e30dab4562a": {
      "type": "Ymodifierchange",
      "commitMessage": "Make \"private\" methods \"static\" where possible. #46\n\nSonarQube rule: [\"private\" methods that don\u0027t access instance data should be \"static\"](http://nemo.sonarqube.org/coding_rules#rule_key\u003dsquid%3AS2325).\n\nRationale: private methods that don\u0027t access instance data can be static to prevent any misunderstanding about the contract of the method.\n",
      "commitDate": 1437195084000,
      "commitName": "4c078ba710068498ca513ce115993e30dab4562a",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1431863229000,
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 61.71,
      "commitsBetweenForRepo": 387,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n-    private DetailAST getFirstNodeInsideForWhileDoWhileBlocks(\n+    private static DetailAST getFirstNodeInsideForWhileDoWhileBlocks(\n             DetailAST block, DetailAST variable) {\n         DetailAST firstNodeInsideBlock \u003d null;\n \n         if (!isVariableInOperatorExpr(block, variable)) {\n             DetailAST currentNode \u003d null;\n \n             // Find currentNode for DO-WHILE block.\n             if (block.getType() \u003d\u003d TokenTypes.LITERAL_DO) {\n                 currentNode \u003d block.getFirstChild();\n             }\n             // Find currentNode for FOR or WHILE block.\n             else {\n                 // Looking for RPAREN ( \u0027)\u0027 ) token to mark the end of operator\n                 // expression.\n                 currentNode \u003d block.findFirstToken(TokenTypes.RPAREN);\n                 if (currentNode !\u003d null) {\n                     currentNode \u003d currentNode.getNextSibling();\n                 }\n             }\n \n             if (currentNode !\u003d null) {\n                 final int currentNodeType \u003d currentNode.getType();\n \n                 if (currentNodeType \u003d\u003d TokenTypes.SLIST) {\n                     firstNodeInsideBlock \u003d currentNode.getFirstChild();\n                 }\n                 else if (currentNodeType !\u003d TokenTypes.VARIABLE_DEF\n                         \u0026\u0026 currentNodeType !\u003d TokenTypes.EXPR) {\n                     firstNodeInsideBlock \u003d currentNode;\n                 }\n             }\n         }\n \n         return firstNodeInsideBlock;\n     }\n\\ No newline at end of file\n"
    },
    "04ceb4b91f4e66439479406834f42014c5be62ed": {
      "type": "Ybodychange",
      "commitMessage": "Remove empty if statements to fix PMD violations, issue #744\n\nViolations of PMD rule [EmptyIfStmt](http://pmd.sourceforge.net/pmd-5.2.3/pmd-java/rules/java/empty.html#EmptyIfStmt) are fixed. All transformations were done by IDE automatically.\n",
      "commitDate": 1426999508000,
      "commitName": "04ceb4b91f4e66439479406834f42014c5be62ed",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1426113655000,
      "commitNameOld": "44e274bfbaf09a067726164e01a9c277f4a97090",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 10.25,
      "commitsBetweenForRepo": 73,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,38 @@\n     private DetailAST getFirstNodeInsideForWhileDoWhileBlocks(\n             DetailAST block, DetailAST variable)\n     {\n         DetailAST firstNodeInsideBlock \u003d null;\n \n         if (!isVariableInOperatorExpr(block, variable)) {\n             DetailAST currentNode \u003d null;\n \n             // Find currentNode for DO-WHILE block.\n             if (block.getType() \u003d\u003d TokenTypes.LITERAL_DO) {\n                 currentNode \u003d block.getFirstChild();\n             }\n             // Find currentNode for FOR or WHILE block.\n             else {\n                 // Looking for RPAREN ( \u0027)\u0027 ) token to mark the end of operator\n                 // expression.\n                 currentNode \u003d block.findFirstToken(TokenTypes.RPAREN);\n                 if (currentNode !\u003d null) {\n                     currentNode \u003d currentNode.getNextSibling();\n                 }\n             }\n \n             if (currentNode !\u003d null) {\n                 final int currentNodeType \u003d currentNode.getType();\n \n                 if (currentNodeType \u003d\u003d TokenTypes.SLIST) {\n                     firstNodeInsideBlock \u003d currentNode.getFirstChild();\n                 }\n-                else if (currentNodeType \u003d\u003d TokenTypes.VARIABLE_DEF\n-                        || currentNodeType \u003d\u003d TokenTypes.EXPR)\n+                else if (currentNodeType !\u003d TokenTypes.VARIABLE_DEF\n+                        \u0026\u0026 currentNodeType !\u003d TokenTypes.EXPR)\n                 {\n-                    // no code\n-                }\n-                else {\n                     firstNodeInsideBlock \u003d currentNode;\n                 }\n             }\n         }\n \n         return firstNodeInsideBlock;\n     }\n\\ No newline at end of file\n"
    },
    "44e274bfbaf09a067726164e01a9c277f4a97090": {
      "type": "Ybodychange",
      "commitMessage": "Remove unnecessary semicolons to fix PMD violations, issue #744\n\nAll violations of rule [EmptyStatementNotInLoop](http://pmd.sourceforge.net/pmd-5.2.3/pmd-java/rules/java/empty.html#EmptyStatementNotInLoop) are fixed. Empty statements sometimes were used to trick Checkstyle to allow empty blocks. While generally empty blocks are bad practice, there are too many of them in Checkstyle code to fix them in scope of this commit. Instead, [EmplyBlock](http://checkstyle.sourceforge.net/config_blocks.html#EmptyBlock) setting was changed to allow empty block when there is comment inside it for Checkstyle codebase.\n",
      "commitDate": 1426113655000,
      "commitName": "44e274bfbaf09a067726164e01a9c277f4a97090",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1426023398000,
      "commitNameOld": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 1.04,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n     private DetailAST getFirstNodeInsideForWhileDoWhileBlocks(\n             DetailAST block, DetailAST variable)\n     {\n         DetailAST firstNodeInsideBlock \u003d null;\n \n         if (!isVariableInOperatorExpr(block, variable)) {\n             DetailAST currentNode \u003d null;\n \n             // Find currentNode for DO-WHILE block.\n             if (block.getType() \u003d\u003d TokenTypes.LITERAL_DO) {\n                 currentNode \u003d block.getFirstChild();\n             }\n             // Find currentNode for FOR or WHILE block.\n             else {\n                 // Looking for RPAREN ( \u0027)\u0027 ) token to mark the end of operator\n                 // expression.\n                 currentNode \u003d block.findFirstToken(TokenTypes.RPAREN);\n                 if (currentNode !\u003d null) {\n                     currentNode \u003d currentNode.getNextSibling();\n                 }\n             }\n \n             if (currentNode !\u003d null) {\n                 final int currentNodeType \u003d currentNode.getType();\n \n                 if (currentNodeType \u003d\u003d TokenTypes.SLIST) {\n                     firstNodeInsideBlock \u003d currentNode.getFirstChild();\n                 }\n                 else if (currentNodeType \u003d\u003d TokenTypes.VARIABLE_DEF\n                         || currentNodeType \u003d\u003d TokenTypes.EXPR)\n                 {\n-                    ; // no code\n+                    // no code\n                 }\n                 else {\n                     firstNodeInsideBlock \u003d currentNode;\n                 }\n             }\n         }\n \n         return firstNodeInsideBlock;\n     }\n\\ No newline at end of file\n"
    },
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, coding, #512\n",
      "commitDate": 1421677214000,
      "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "c4e886312aae13b6cfadceed25b1b8aec18d4a96": {
      "type": "Yintroduced",
      "commitMessage": "VariableDeclarationUsageDistanceCheck was imported #223\n",
      "commitDate": 1407390645000,
      "commitName": "c4e886312aae13b6cfadceed25b1b8aec18d4a96",
      "commitAuthor": "Max"
    }
  }
}