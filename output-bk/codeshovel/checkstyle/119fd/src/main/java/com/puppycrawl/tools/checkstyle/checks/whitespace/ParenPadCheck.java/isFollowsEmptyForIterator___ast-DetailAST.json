{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "ParenPadCheck.java",
  "functionName": "isFollowsEmptyForIterator",
  "functionId": "isFollowsEmptyForIterator___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java",
  "functionStartLine": 290,
  "functionEndLine": 300,
  "changeHistory": [
    "7f452f66c8ac18a9d0093c0cb05009ddae0b8ea9",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "d97a2df674716efb7deda50180ae933bdc46d68a",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "fee0ec8258a99bd81b36e109dd4c4cf73f0b7608",
    "99ed7a7d2c1861dbf327ea9a421ec56f10c92fc2",
    "2e8126e99047befc39560342981b0b8e7cabea21",
    "6a567c03a8eb4d755900361efe7b9658d27acae8",
    "916417fc6214ab75606d2fbc1d7b511509ffe25b",
    "267bdf541787643fbe6126605cbfb91dbcde1e91",
    "aede54ee77fb0887148db30be804b36758111698"
  ],
  "changeHistoryShort": {
    "7f452f66c8ac18a9d0093c0cb05009ddae0b8ea9": "Ymultichange(Ymodifierchange,Ybodychange)",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "d97a2df674716efb7deda50180ae933bdc46d68a": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "fee0ec8258a99bd81b36e109dd4c4cf73f0b7608": "Ybodychange",
    "99ed7a7d2c1861dbf327ea9a421ec56f10c92fc2": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
    "2e8126e99047befc39560342981b0b8e7cabea21": "Yfilerename",
    "6a567c03a8eb4d755900361efe7b9658d27acae8": "Ybodychange",
    "916417fc6214ab75606d2fbc1d7b511509ffe25b": "Ybodychange",
    "267bdf541787643fbe6126605cbfb91dbcde1e91": "Ybodychange",
    "aede54ee77fb0887148db30be804b36758111698": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7f452f66c8ac18a9d0093c0cb05009ddae0b8ea9": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "Add possibility to configure targets for ParenPad check, #1189",
      "commitDate": 1435252569000,
      "commitName": "7f452f66c8ac18a9d0093c0cb05009ddae0b8ea9",
      "commitAuthor": "Vladislav Lisetskiy",
      "subchanges": [
        "Ymodifierchange",
        "Ybodychange"
      ]
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": 1426023398000,
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1425968782000,
      "commitNameOld": "49a23751eb6bffdfba94d72454d7676c9f85adc5",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.63,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n     private boolean isFollowsEmptyForIterator(DetailAST ast)\n     {\n         boolean followsEmptyForIterator \u003d false;\n         final DetailAST parent \u003d ast.getParent();\n         //Only traditional for statements are examined, not for-each statements\n-        if ((parent !\u003d null)\n-            \u0026\u0026 (parent.getType() \u003d\u003d TokenTypes.LITERAL_FOR)\n-            \u0026\u0026 (parent.findFirstToken(TokenTypes.FOR_EACH_CLAUSE) \u003d\u003d null))\n+        if (parent !\u003d null\n+            \u0026\u0026 parent.getType() \u003d\u003d TokenTypes.LITERAL_FOR\n+            \u0026\u0026 parent.findFirstToken(TokenTypes.FOR_EACH_CLAUSE) \u003d\u003d null)\n         {\n             final DetailAST forIterator \u003d\n                 parent.findFirstToken(TokenTypes.FOR_ITERATOR);\n-            followsEmptyForIterator \u003d (forIterator.getChildCount() \u003d\u003d 0)\n-                \u0026\u0026 (ast \u003d\u003d forIterator.getNextSibling());\n+            followsEmptyForIterator \u003d forIterator.getChildCount() \u003d\u003d 0\n+                \u0026\u0026 ast \u003d\u003d forIterator.getNextSibling();\n         }\n         return followsEmptyForIterator;\n     }\n\\ No newline at end of file\n"
    },
    "d97a2df674716efb7deda50180ae933bdc46d68a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, whitespace, #512\n",
      "commitDate": 1421677248000,
      "commitName": "d97a2df674716efb7deda50180ae933bdc46d68a",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "fee0ec8258a99bd81b36e109dd4c4cf73f0b7608": {
      "type": "Ybodychange",
      "commitMessage": "Fixed bug where for-each statements caused a NPE when checking special case for for statements with empty iterator clauses in ParenPadCheck.\n",
      "commitDate": 1103499861000,
      "commitName": "fee0ec8258a99bd81b36e109dd4c4cf73f0b7608",
      "commitAuthor": "Michael Studman",
      "commitDateOld": 1076844692000,
      "commitNameOld": "da2328d0f138c2d989056bc876f8698cc53bffe3",
      "commitAuthorOld": "Lars KÃ¼hne",
      "daysBetweenCommits": 308.51,
      "commitsBetweenForRepo": 157,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,16 @@\n     private boolean isFollowsEmptyForIterator(DetailAST aAST)\n     {\n         boolean followsEmptyForIterator \u003d false;\n         final DetailAST parent \u003d aAST.getParent();\n+        //Only traditional for statements are examined, not for-each statements\n         if ((parent !\u003d null)\n-            \u0026\u0026 (parent.getType() \u003d\u003d TokenTypes.LITERAL_FOR))\n+            \u0026\u0026 (parent.getType() \u003d\u003d TokenTypes.LITERAL_FOR)\n+            \u0026\u0026 (parent.findFirstToken(TokenTypes.FOR_EACH_CLAUSE) \u003d\u003d null))\n         {\n             final DetailAST forIterator \u003d\n                 parent.findFirstToken(TokenTypes.FOR_ITERATOR);\n             followsEmptyForIterator \u003d (forIterator.getChildCount() \u003d\u003d 0)\n                 \u0026\u0026 (aAST \u003d\u003d forIterator.getNextSibling());\n         }\n         return followsEmptyForIterator;\n     }\n\\ No newline at end of file\n"
    },
    "99ed7a7d2c1861dbf327ea9a421ec56f10c92fc2": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
      "commitMessage": "bug-750348: added check for typecast parens. Involved\na bit of refactoring.\n",
      "commitDate": 1055139619000,
      "commitName": "99ed7a7d2c1861dbf327ea9a421ec56f10c92fc2",
      "commitAuthor": "Oliver Burn",
      "subchanges": [
        "Yrename",
        "Yreturntypechange",
        "Ybodychange"
      ]
    },
    "2e8126e99047befc39560342981b0b8e7cabea21": {
      "type": "Yfilerename",
      "commitMessage": "Refactored the Whitespace checks\n",
      "commitDate": 1054727729000,
      "commitName": "2e8126e99047befc39560342981b0b8e7cabea21",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1054723367000,
      "commitNameOld": "3bd6412e39a141b980901f291391ff1bcc4a61f3",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "6a567c03a8eb4d755900361efe7b9658d27acae8": {
      "type": "Ybodychange",
      "commitMessage": "Removed lines of commented-out code.\n",
      "commitDate": 1042317614000,
      "commitName": "6a567c03a8eb4d755900361efe7b9658d27acae8",
      "commitAuthor": "Rick Giles",
      "commitDateOld": 1042316222000,
      "commitNameOld": "916417fc6214ab75606d2fbc1d7b511509ffe25b",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,33 @@\n     private void processRight(DetailAST aAST)\n     {\n         final String line \u003d getLines()[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         if (before \u003e\u003d 0) {\n             boolean followsEmptyForIterator \u003d false;\n             final DetailAST parent \u003d aAST.getParent();\n             if ((parent !\u003d null) \n                 \u0026\u0026 (parent.getType() \u003d\u003d TokenTypes.LITERAL_FOR))\n             {\n                 final DetailAST forIterator \u003d\n                     parent.findFirstToken(TokenTypes.FOR_ITERATOR);\n                 followsEmptyForIterator \u003d (forIterator.getChildCount() \u003d\u003d 0)\n                     \u0026\u0026 (aAST \u003d\u003d forIterator.getNextSibling());\n             }\n             if (followsEmptyForIterator) {\n                 return;\n-//                if (mPadEmptyForIterator\n-//                    \u0026\u0026 !Character.isWhitespace(line.charAt(before)))\n-//                {\n-//                    log(aAST.getLineNo(), aAST.getColumnNo(),\n-//                        \"ws.notPreceeded\", \")\");\n-//                }\n-//                else if (!mPadEmptyForIterator\n-//                    \u0026\u0026 Character.isWhitespace(line.charAt(before)))\n-//                {\n-//                    log(aAST.getLineNo(), before, \"ws.preceeded\", \")\");\n-//                }  \n             }\n             else if ((PadOption.NOSPACE \u003d\u003d getAbstractOption())\n                 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !Utils.whitespaceBefore(before, line))\n             {\n                 log(aAST.getLineNo(), before, \"ws.preceeded\", \")\");\n             }\n             else if ((PadOption.SPACE \u003d\u003d getAbstractOption())\n                 \u0026\u0026 !Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 (line.charAt(before) !\u003d \u0027(\u0027))\n             {\n                 log(aAST.getLineNo(), aAST.getColumnNo(),\n                     \"ws.notPreceeded\", \")\");\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "916417fc6214ab75606d2fbc1d7b511509ffe25b": {
      "type": "Ybodychange",
      "commitMessage": "Check for policy of space at an empty for interator.\nAddresses requests 565666, 583725.\nParenPad and WhitespaceAfter no longer check an empty for iterator.\nNot doing so, and using check EmptyForIterator, is less complex than\nproviding properties for ParenPad and WhitespaceAfter.\n",
      "commitDate": 1042316222000,
      "commitName": "916417fc6214ab75606d2fbc1d7b511509ffe25b",
      "commitAuthor": "Rick Giles",
      "commitDateOld": 1039999056000,
      "commitNameOld": "fa0c0353c280c30f2d1cfda01ecfe6597ff46f6b",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 26.82,
      "commitsBetweenForRepo": 121,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,44 @@\n     private void processRight(DetailAST aAST)\n     {\n         final String line \u003d getLines()[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         if (before \u003e\u003d 0) {\n-            if ((PadOption.NOSPACE \u003d\u003d getAbstractOption())\n+            boolean followsEmptyForIterator \u003d false;\n+            final DetailAST parent \u003d aAST.getParent();\n+            if ((parent !\u003d null) \n+                \u0026\u0026 (parent.getType() \u003d\u003d TokenTypes.LITERAL_FOR))\n+            {\n+                final DetailAST forIterator \u003d\n+                    parent.findFirstToken(TokenTypes.FOR_ITERATOR);\n+                followsEmptyForIterator \u003d (forIterator.getChildCount() \u003d\u003d 0)\n+                    \u0026\u0026 (aAST \u003d\u003d forIterator.getNextSibling());\n+            }\n+            if (followsEmptyForIterator) {\n+                return;\n+//                if (mPadEmptyForIterator\n+//                    \u0026\u0026 !Character.isWhitespace(line.charAt(before)))\n+//                {\n+//                    log(aAST.getLineNo(), aAST.getColumnNo(),\n+//                        \"ws.notPreceeded\", \")\");\n+//                }\n+//                else if (!mPadEmptyForIterator\n+//                    \u0026\u0026 Character.isWhitespace(line.charAt(before)))\n+//                {\n+//                    log(aAST.getLineNo(), before, \"ws.preceeded\", \")\");\n+//                }  \n+            }\n+            else if ((PadOption.NOSPACE \u003d\u003d getAbstractOption())\n                 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !Utils.whitespaceBefore(before, line))\n             {\n                 log(aAST.getLineNo(), before, \"ws.preceeded\", \")\");\n             }\n             else if ((PadOption.SPACE \u003d\u003d getAbstractOption())\n                 \u0026\u0026 !Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 (line.charAt(before) !\u003d \u0027(\u0027))\n             {\n                 log(aAST.getLineNo(), aAST.getColumnNo(),\n                     \"ws.notPreceeded\", \")\");\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "267bdf541787643fbe6126605cbfb91dbcde1e91": {
      "type": "Ybodychange",
      "commitMessage": "Refactor to improve the AbstractOptionCheck code.\n",
      "commitDate": 1036543226000,
      "commitName": "267bdf541787643fbe6126605cbfb91dbcde1e91",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1036361604000,
      "commitNameOld": "065c1d3bc59e10d0235d8732652d2f2787fbbcd7",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 2.1,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n     private void processRight(DetailAST aAST)\n     {\n         final String line \u003d getLines()[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         if (before \u003e\u003d 0) {\n-            if ((PadOption.NOSPACE \u003d\u003d mOption)\n+            if ((PadOption.NOSPACE \u003d\u003d getAbstractOption())\n                 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !Utils.whitespaceBefore(before, line))\n             {\n                 log(aAST.getLineNo(), before, \"ws.preceeded\", \")\");\n             }\n-            else if ((PadOption.SPACE \u003d\u003d mOption)\n+            else if ((PadOption.SPACE \u003d\u003d getAbstractOption())\n                 \u0026\u0026 !Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 (line.charAt(before) !\u003d \u0027(\u0027))\n             {\n                 log(aAST.getLineNo(), aAST.getColumnNo(),\n                     \"ws.notPreceeded\", \")\");\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "aede54ee77fb0887148db30be804b36758111698": {
      "type": "Yintroduced",
      "commitMessage": "Fully implemented the paren pad check\n",
      "commitDate": 1034517942000,
      "commitName": "aede54ee77fb0887148db30be804b36758111698",
      "commitAuthor": "Oliver Burn"
    }
  }
}