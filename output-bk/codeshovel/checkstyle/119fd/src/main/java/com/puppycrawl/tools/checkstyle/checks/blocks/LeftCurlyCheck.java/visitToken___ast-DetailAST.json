{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "LeftCurlyCheck.java",
  "functionName": "visitToken",
  "functionId": "visitToken___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java",
  "functionStartLine": 167,
  "functionEndLine": 226,
  "changeHistory": [
    "ec20c822a102896281bc9864f76d2677b1f2b2d3",
    "0d8e93ce79ea33b72b3e904d8796984271ee3d8d",
    "23c8774d2e2fd245de1e5df02758fd23702c565e",
    "8a3f5bf6d5389b9e175c9c769992faece6d76ada",
    "71d0a829e42bfcbfa3fd692a29abf8796e467fc9",
    "9399831eea63a990db0ea0897115ec05f2b149c0",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "cea86a6cad3098ebcdb4a88db2e49477b07e0d93",
    "501b7c5240705c6db756608618fdcf58189e807e",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "e195128381e3d20a922411e2dea4c6496f3be1a3",
    "d73aed8c02d48ef4fb8583125763b5f9db3012d5",
    "ad34b2a35eff0dba70ef5b27a0ff361520b66bea",
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878",
    "f59c0a0a977e1df10ac9897179c3d29d98360158",
    "6125beffc437f970eae276b4a6542265c6547784",
    "d2fb67faae0b56340678abef1d1ecedf1df8bb95",
    "3bd6412e39a141b980901f291391ff1bcc4a61f3",
    "f50c47545a5bcdaf1facb2aaf88adeda15594007",
    "4a5ccfb6fe4d4d2cf9d74419b3292bbb46ad4149",
    "eecd476fa8c6dba62f919a5ff1740d108848c867",
    "84eddc36730c1eca845257201c71a0d1fb2d40cf",
    "5fd3fab179d700d68281fee316519fdd907bbcd6",
    "1bba9f0056f13a18be51d41e6d9c8645ed04343e",
    "21c76786c66c9a688e8a71898258ae61bcaec39d"
  ],
  "changeHistoryShort": {
    "ec20c822a102896281bc9864f76d2677b1f2b2d3": "Ybodychange",
    "0d8e93ce79ea33b72b3e904d8796984271ee3d8d": "Ybodychange",
    "23c8774d2e2fd245de1e5df02758fd23702c565e": "Ybodychange",
    "8a3f5bf6d5389b9e175c9c769992faece6d76ada": "Ybodychange",
    "71d0a829e42bfcbfa3fd692a29abf8796e467fc9": "Ybodychange",
    "9399831eea63a990db0ea0897115ec05f2b149c0": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "cea86a6cad3098ebcdb4a88db2e49477b07e0d93": "Ymultichange(Yparameterchange,Ybodychange)",
    "501b7c5240705c6db756608618fdcf58189e807e": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "e195128381e3d20a922411e2dea4c6496f3be1a3": "Ybodychange",
    "d73aed8c02d48ef4fb8583125763b5f9db3012d5": "Ybodychange",
    "ad34b2a35eff0dba70ef5b27a0ff361520b66bea": "Ybodychange",
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878": "Ybodychange",
    "f59c0a0a977e1df10ac9897179c3d29d98360158": "Ybodychange",
    "6125beffc437f970eae276b4a6542265c6547784": "Ybodychange",
    "d2fb67faae0b56340678abef1d1ecedf1df8bb95": "Ybodychange",
    "3bd6412e39a141b980901f291391ff1bcc4a61f3": "Yfilerename",
    "f50c47545a5bcdaf1facb2aaf88adeda15594007": "Ymultichange(Ymovefromfile,Ybodychange)",
    "4a5ccfb6fe4d4d2cf9d74419b3292bbb46ad4149": "Ybodychange",
    "eecd476fa8c6dba62f919a5ff1740d108848c867": "Ybodychange",
    "84eddc36730c1eca845257201c71a0d1fb2d40cf": "Ybodychange",
    "5fd3fab179d700d68281fee316519fdd907bbcd6": "Ybodychange",
    "1bba9f0056f13a18be51d41e6d9c8645ed04343e": "Ybodychange",
    "21c76786c66c9a688e8a71898258ae61bcaec39d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ec20c822a102896281bc9864f76d2677b1f2b2d3": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2818: Add support for lambda expression in LeftCurlyCheck\n",
      "commitDate": 1455725913000,
      "commitName": "ec20c822a102896281bc9864f76d2677b1f2b2d3",
      "commitAuthor": "liscju",
      "commitDateOld": 1454680863000,
      "commitNameOld": "cf96dd9adcf0c3c8f8f05a9ffdcb765cafe17479",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 12.1,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,60 @@\n     public void visitToken(DetailAST ast) {\n         final DetailAST startToken;\n         DetailAST brace;\n \n         switch (ast.getType()) {\n             case TokenTypes.CTOR_DEF:\n             case TokenTypes.METHOD_DEF:\n                 startToken \u003d skipAnnotationOnlyLines(ast);\n                 brace \u003d ast.findFirstToken(TokenTypes.SLIST);\n                 break;\n             case TokenTypes.INTERFACE_DEF:\n             case TokenTypes.CLASS_DEF:\n             case TokenTypes.ANNOTATION_DEF:\n             case TokenTypes.ENUM_DEF:\n             case TokenTypes.ENUM_CONSTANT_DEF:\n                 startToken \u003d skipAnnotationOnlyLines(ast);\n                 final DetailAST objBlock \u003d ast.findFirstToken(TokenTypes.OBJBLOCK);\n                 brace \u003d objBlock;\n \n                 if (objBlock !\u003d null) {\n                     brace \u003d objBlock.getFirstChild();\n                 }\n                 break;\n             case TokenTypes.LITERAL_WHILE:\n             case TokenTypes.LITERAL_CATCH:\n             case TokenTypes.LITERAL_SYNCHRONIZED:\n             case TokenTypes.LITERAL_FOR:\n             case TokenTypes.LITERAL_TRY:\n             case TokenTypes.LITERAL_FINALLY:\n             case TokenTypes.LITERAL_DO:\n             case TokenTypes.LITERAL_IF:\n             case TokenTypes.STATIC_INIT:\n+            case TokenTypes.LAMBDA:\n                 startToken \u003d ast;\n                 brace \u003d ast.findFirstToken(TokenTypes.SLIST);\n                 break;\n             case TokenTypes.LITERAL_ELSE:\n                 startToken \u003d ast;\n                 final DetailAST candidate \u003d ast.getFirstChild();\n                 brace \u003d null;\n \n                 if (candidate.getType() \u003d\u003d TokenTypes.SLIST) {\n                     brace \u003d candidate;\n                 }\n                 break;\n             default:\n                 // ATTENTION! We have default here, but we expect case TokenTypes.METHOD_DEF,\n                 // TokenTypes.LITERAL_FOR, TokenTypes.LITERAL_WHILE, TokenTypes.LITERAL_DO only.\n                 // It has been done to improve coverage to 100%. I couldn\u0027t replace it with\n                 // if-else-if block because code was ugly and didn\u0027t pass pmd check.\n \n                 startToken \u003d ast;\n                 brace \u003d ast.findFirstToken(TokenTypes.LCURLY);\n                 break;\n         }\n \n         if (brace !\u003d null) {\n             verifyBrace(brace, startToken);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "0d8e93ce79ea33b72b3e904d8796984271ee3d8d": {
      "type": "Ybodychange",
      "commitMessage": "minor: enforce FinalLocalVariableCheck on checkstyle code\n",
      "commitDate": 1453646135000,
      "commitName": "0d8e93ce79ea33b72b3e904d8796984271ee3d8d",
      "commitAuthor": "Bhavik Patel",
      "commitDateOld": 1451953543000,
      "commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 19.59,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,59 @@\n     public void visitToken(DetailAST ast) {\n-        DetailAST startToken;\n+        final DetailAST startToken;\n         DetailAST brace;\n \n         switch (ast.getType()) {\n             case TokenTypes.CTOR_DEF:\n             case TokenTypes.METHOD_DEF:\n                 startToken \u003d skipAnnotationOnlyLines(ast);\n                 brace \u003d ast.findFirstToken(TokenTypes.SLIST);\n                 break;\n             case TokenTypes.INTERFACE_DEF:\n             case TokenTypes.CLASS_DEF:\n             case TokenTypes.ANNOTATION_DEF:\n             case TokenTypes.ENUM_DEF:\n             case TokenTypes.ENUM_CONSTANT_DEF:\n                 startToken \u003d skipAnnotationOnlyLines(ast);\n                 final DetailAST objBlock \u003d ast.findFirstToken(TokenTypes.OBJBLOCK);\n                 brace \u003d objBlock;\n \n                 if (objBlock !\u003d null) {\n                     brace \u003d objBlock.getFirstChild();\n                 }\n                 break;\n             case TokenTypes.LITERAL_WHILE:\n             case TokenTypes.LITERAL_CATCH:\n             case TokenTypes.LITERAL_SYNCHRONIZED:\n             case TokenTypes.LITERAL_FOR:\n             case TokenTypes.LITERAL_TRY:\n             case TokenTypes.LITERAL_FINALLY:\n             case TokenTypes.LITERAL_DO:\n             case TokenTypes.LITERAL_IF:\n             case TokenTypes.STATIC_INIT:\n                 startToken \u003d ast;\n                 brace \u003d ast.findFirstToken(TokenTypes.SLIST);\n                 break;\n             case TokenTypes.LITERAL_ELSE:\n                 startToken \u003d ast;\n                 final DetailAST candidate \u003d ast.getFirstChild();\n                 brace \u003d null;\n \n                 if (candidate.getType() \u003d\u003d TokenTypes.SLIST) {\n                     brace \u003d candidate;\n                 }\n                 break;\n             default:\n                 // ATTENTION! We have default here, but we expect case TokenTypes.METHOD_DEF,\n                 // TokenTypes.LITERAL_FOR, TokenTypes.LITERAL_WHILE, TokenTypes.LITERAL_DO only.\n                 // It has been done to improve coverage to 100%. I couldn\u0027t replace it with\n                 // if-else-if block because code was ugly and didn\u0027t pass pmd check.\n \n                 startToken \u003d ast;\n                 brace \u003d ast.findFirstToken(TokenTypes.LCURLY);\n                 break;\n         }\n \n         if (brace !\u003d null) {\n             verifyBrace(brace, startToken);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "23c8774d2e2fd245de1e5df02758fd23702c565e": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: AvoidInlineConditional violations fixed\n",
      "commitDate": 1439784080000,
      "commitName": "23c8774d2e2fd245de1e5df02758fd23702c565e",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": 1439782863000,
      "commitNameOld": "d56a2a366c6f9e3e8639d492d548ae562b75dc81",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,59 @@\n     public void visitToken(DetailAST ast) {\n         DetailAST startToken;\n         DetailAST brace;\n \n         switch (ast.getType()) {\n             case TokenTypes.CTOR_DEF:\n             case TokenTypes.METHOD_DEF:\n                 startToken \u003d skipAnnotationOnlyLines(ast);\n                 brace \u003d ast.findFirstToken(TokenTypes.SLIST);\n                 break;\n             case TokenTypes.INTERFACE_DEF:\n             case TokenTypes.CLASS_DEF:\n             case TokenTypes.ANNOTATION_DEF:\n             case TokenTypes.ENUM_DEF:\n             case TokenTypes.ENUM_CONSTANT_DEF:\n                 startToken \u003d skipAnnotationOnlyLines(ast);\n                 final DetailAST objBlock \u003d ast.findFirstToken(TokenTypes.OBJBLOCK);\n-                brace \u003d objBlock \u003d\u003d null\n-                        ? null\n-                        : objBlock.getFirstChild();\n+                brace \u003d objBlock;\n+\n+                if (objBlock !\u003d null) {\n+                    brace \u003d objBlock.getFirstChild();\n+                }\n                 break;\n             case TokenTypes.LITERAL_WHILE:\n             case TokenTypes.LITERAL_CATCH:\n             case TokenTypes.LITERAL_SYNCHRONIZED:\n             case TokenTypes.LITERAL_FOR:\n             case TokenTypes.LITERAL_TRY:\n             case TokenTypes.LITERAL_FINALLY:\n             case TokenTypes.LITERAL_DO:\n             case TokenTypes.LITERAL_IF:\n             case TokenTypes.STATIC_INIT:\n                 startToken \u003d ast;\n                 brace \u003d ast.findFirstToken(TokenTypes.SLIST);\n                 break;\n             case TokenTypes.LITERAL_ELSE:\n                 startToken \u003d ast;\n                 final DetailAST candidate \u003d ast.getFirstChild();\n-                brace \u003d candidate.getType() \u003d\u003d TokenTypes.SLIST\n-                        ? candidate\n-                        : null; // silently ignore\n+                brace \u003d null;\n+\n+                if (candidate.getType() \u003d\u003d TokenTypes.SLIST) {\n+                    brace \u003d candidate;\n+                }\n                 break;\n             default:\n                 // ATTENTION! We have default here, but we expect case TokenTypes.METHOD_DEF,\n                 // TokenTypes.LITERAL_FOR, TokenTypes.LITERAL_WHILE, TokenTypes.LITERAL_DO only.\n                 // It has been done to improve coverage to 100%. I couldn\u0027t replace it with\n                 // if-else-if block because code was ugly and didn\u0027t pass pmd check.\n \n                 startToken \u003d ast;\n                 brace \u003d ast.findFirstToken(TokenTypes.LCURLY);\n                 break;\n         }\n \n         if (brace !\u003d null) {\n             verifyBrace(brace, startToken);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "8a3f5bf6d5389b9e175c9c769992faece6d76ada": {
      "type": "Ybodychange",
      "commitMessage": "Remove unused assignments. #1555\n\nFixes UnusedAssignment inspection violations.\n\nDescription:\n\u003eThis inspection points out the cases where a variable value is never used after its assignment, i.e.:\n- the variable never gets read after assignment OR\n- the value is always overwritten with another assignment before the next variable read OR\n - the variable initializer is redundant (for one of the above two reasons) OR\n - the variable is never used.\n",
      "commitDate": 1439007161000,
      "commitName": "8a3f5bf6d5389b9e175c9c769992faece6d76ada",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1438460185000,
      "commitNameOld": "3a5a73d5c110418f712f5a9a838c6b4106506fdd",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 6.33,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,55 @@\n     public void visitToken(DetailAST ast) {\n-        DetailAST startToken \u003d null;\n-        DetailAST brace \u003d null;\n+        DetailAST startToken;\n+        DetailAST brace;\n \n         switch (ast.getType()) {\n             case TokenTypes.CTOR_DEF:\n             case TokenTypes.METHOD_DEF:\n                 startToken \u003d skipAnnotationOnlyLines(ast);\n                 brace \u003d ast.findFirstToken(TokenTypes.SLIST);\n                 break;\n             case TokenTypes.INTERFACE_DEF:\n             case TokenTypes.CLASS_DEF:\n             case TokenTypes.ANNOTATION_DEF:\n             case TokenTypes.ENUM_DEF:\n             case TokenTypes.ENUM_CONSTANT_DEF:\n                 startToken \u003d skipAnnotationOnlyLines(ast);\n                 final DetailAST objBlock \u003d ast.findFirstToken(TokenTypes.OBJBLOCK);\n                 brace \u003d objBlock \u003d\u003d null\n                         ? null\n                         : objBlock.getFirstChild();\n                 break;\n             case TokenTypes.LITERAL_WHILE:\n             case TokenTypes.LITERAL_CATCH:\n             case TokenTypes.LITERAL_SYNCHRONIZED:\n             case TokenTypes.LITERAL_FOR:\n             case TokenTypes.LITERAL_TRY:\n             case TokenTypes.LITERAL_FINALLY:\n             case TokenTypes.LITERAL_DO:\n             case TokenTypes.LITERAL_IF:\n             case TokenTypes.STATIC_INIT:\n                 startToken \u003d ast;\n                 brace \u003d ast.findFirstToken(TokenTypes.SLIST);\n                 break;\n             case TokenTypes.LITERAL_ELSE:\n                 startToken \u003d ast;\n                 final DetailAST candidate \u003d ast.getFirstChild();\n                 brace \u003d candidate.getType() \u003d\u003d TokenTypes.SLIST\n                         ? candidate\n                         : null; // silently ignore\n                 break;\n             default:\n //                ATTENTION! We have default here, but we expect case TokenTypes.METHOD_DEF,\n //                TokenTypes.LITERAL_FOR, TokenTypes.LITERAL_WHILE, TokenTypes.LITERAL_DO only.\n //                It has been done to improve coverage to 100%. I couldn\u0027t replace it with\n //                if-else-if block because code was ugly and didn\u0027t pass pmd check.\n \n                 startToken \u003d ast;\n                 brace \u003d ast.findFirstToken(TokenTypes.LCURLY);\n                 break;\n         }\n \n         if (brace !\u003d null) {\n             verifyBrace(brace, startToken);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "71d0a829e42bfcbfa3fd692a29abf8796e467fc9": {
      "type": "Ybodychange",
      "commitMessage": " Coverage has been increased t0 100% in LeftCurlyCheck. Issue #1291\n",
      "commitDate": 1438038837000,
      "commitName": "71d0a829e42bfcbfa3fd692a29abf8796e467fc9",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": 1437675307000,
      "commitNameOld": "cdcddbe49e985fccf170f6bb90e4251ea07952d7",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 4.21,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,55 @@\n     public void visitToken(DetailAST ast) {\n-        final DetailAST startToken;\n-        final DetailAST brace;\n+        DetailAST startToken \u003d null;\n+        DetailAST brace \u003d null;\n \n         switch (ast.getType()) {\n-            case TokenTypes.CTOR_DEF :\n-            case TokenTypes.METHOD_DEF :\n+            case TokenTypes.CTOR_DEF:\n+            case TokenTypes.METHOD_DEF:\n                 startToken \u003d skipAnnotationOnlyLines(ast);\n                 brace \u003d ast.findFirstToken(TokenTypes.SLIST);\n                 break;\n-\n-            case TokenTypes.INTERFACE_DEF :\n-            case TokenTypes.CLASS_DEF :\n-            case TokenTypes.ANNOTATION_DEF :\n-            case TokenTypes.ENUM_DEF :\n-            case TokenTypes.ENUM_CONSTANT_DEF :\n+            case TokenTypes.INTERFACE_DEF:\n+            case TokenTypes.CLASS_DEF:\n+            case TokenTypes.ANNOTATION_DEF:\n+            case TokenTypes.ENUM_DEF:\n+            case TokenTypes.ENUM_CONSTANT_DEF:\n                 startToken \u003d skipAnnotationOnlyLines(ast);\n                 final DetailAST objBlock \u003d ast.findFirstToken(TokenTypes.OBJBLOCK);\n                 brace \u003d objBlock \u003d\u003d null\n-                    ? null\n-                    : objBlock.getFirstChild();\n+                        ? null\n+                        : objBlock.getFirstChild();\n                 break;\n-\n             case TokenTypes.LITERAL_WHILE:\n             case TokenTypes.LITERAL_CATCH:\n             case TokenTypes.LITERAL_SYNCHRONIZED:\n             case TokenTypes.LITERAL_FOR:\n             case TokenTypes.LITERAL_TRY:\n             case TokenTypes.LITERAL_FINALLY:\n             case TokenTypes.LITERAL_DO:\n-            case TokenTypes.LITERAL_IF :\n-            case TokenTypes.STATIC_INIT :\n+            case TokenTypes.LITERAL_IF:\n+            case TokenTypes.STATIC_INIT:\n                 startToken \u003d ast;\n                 brace \u003d ast.findFirstToken(TokenTypes.SLIST);\n                 break;\n-\n-            case TokenTypes.LITERAL_ELSE :\n+            case TokenTypes.LITERAL_ELSE:\n                 startToken \u003d ast;\n                 final DetailAST candidate \u003d ast.getFirstChild();\n-                brace \u003d\n-                    candidate.getType() \u003d\u003d TokenTypes.SLIST\n-                    ? candidate\n-                    : null; // silently ignore\n+                brace \u003d candidate.getType() \u003d\u003d TokenTypes.SLIST\n+                        ? candidate\n+                        : null; // silently ignore\n                 break;\n+            default:\n+//                ATTENTION! We have default here, but we expect case TokenTypes.METHOD_DEF,\n+//                TokenTypes.LITERAL_FOR, TokenTypes.LITERAL_WHILE, TokenTypes.LITERAL_DO only.\n+//                It has been done to improve coverage to 100%. I couldn\u0027t replace it with\n+//                if-else-if block because code was ugly and didn\u0027t pass pmd check.\n \n-            case TokenTypes.LITERAL_SWITCH :\n                 startToken \u003d ast;\n                 brace \u003d ast.findFirstToken(TokenTypes.LCURLY);\n                 break;\n-\n-            default :\n-                startToken \u003d null;\n-                brace \u003d null;\n         }\n \n-        if (brace !\u003d null \u0026\u0026 startToken !\u003d null) {\n+        if (brace !\u003d null) {\n             verifyBrace(brace, startToken);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "9399831eea63a990db0ea0897115ec05f2b149c0": {
      "type": "Ybodychange",
      "commitMessage": "Extend LeftCurly check to verify static initializers, issue #966\n",
      "commitDate": 1429819879000,
      "commitName": "9399831eea63a990db0ea0897115ec05f2b149c0",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1429810711000,
      "commitNameOld": "dd6b080a16e0933b3d19305f84ba01c8893839f3",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 0.11,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,60 @@\n     public void visitToken(DetailAST ast)\n     {\n         final DetailAST startToken;\n         final DetailAST brace;\n \n         switch (ast.getType()) {\n             case TokenTypes.CTOR_DEF :\n             case TokenTypes.METHOD_DEF :\n                 startToken \u003d skipAnnotationOnlyLines(ast);\n                 brace \u003d ast.findFirstToken(TokenTypes.SLIST);\n                 break;\n \n             case TokenTypes.INTERFACE_DEF :\n             case TokenTypes.CLASS_DEF :\n             case TokenTypes.ANNOTATION_DEF :\n             case TokenTypes.ENUM_DEF :\n             case TokenTypes.ENUM_CONSTANT_DEF :\n                 startToken \u003d skipAnnotationOnlyLines(ast);\n                 final DetailAST objBlock \u003d ast.findFirstToken(TokenTypes.OBJBLOCK);\n                 brace \u003d objBlock \u003d\u003d null\n                     ? null\n                     : objBlock.getFirstChild();\n                 break;\n \n             case TokenTypes.LITERAL_WHILE:\n             case TokenTypes.LITERAL_CATCH:\n             case TokenTypes.LITERAL_SYNCHRONIZED:\n             case TokenTypes.LITERAL_FOR:\n             case TokenTypes.LITERAL_TRY:\n             case TokenTypes.LITERAL_FINALLY:\n             case TokenTypes.LITERAL_DO:\n             case TokenTypes.LITERAL_IF :\n+            case TokenTypes.STATIC_INIT :\n                 startToken \u003d ast;\n                 brace \u003d ast.findFirstToken(TokenTypes.SLIST);\n                 break;\n \n             case TokenTypes.LITERAL_ELSE :\n                 startToken \u003d ast;\n                 final DetailAST candidate \u003d ast.getFirstChild();\n                 brace \u003d\n                     candidate.getType() \u003d\u003d TokenTypes.SLIST\n                     ? candidate\n                     : null; // silently ignore\n                 break;\n \n             case TokenTypes.LITERAL_SWITCH :\n                 startToken \u003d ast;\n                 brace \u003d ast.findFirstToken(TokenTypes.LCURLY);\n                 break;\n \n             default :\n                 startToken \u003d null;\n                 brace \u003d null;\n         }\n \n         if (brace !\u003d null \u0026\u0026 startToken !\u003d null) {\n             verifyBrace(brace, startToken);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": 1426023398000,
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1425968782000,
      "commitNameOld": "49a23751eb6bffdfba94d72454d7676c9f85adc5",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.63,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,59 @@\n     public void visitToken(DetailAST ast)\n     {\n         final DetailAST startToken;\n         final DetailAST brace;\n \n         switch (ast.getType()) {\n             case TokenTypes.CTOR_DEF :\n             case TokenTypes.METHOD_DEF :\n                 startToken \u003d skipAnnotationOnlyLines(ast);\n                 brace \u003d ast.findFirstToken(TokenTypes.SLIST);\n                 break;\n \n             case TokenTypes.INTERFACE_DEF :\n             case TokenTypes.CLASS_DEF :\n             case TokenTypes.ANNOTATION_DEF :\n             case TokenTypes.ENUM_DEF :\n             case TokenTypes.ENUM_CONSTANT_DEF :\n                 startToken \u003d skipAnnotationOnlyLines(ast);\n                 final DetailAST objBlock \u003d ast.findFirstToken(TokenTypes.OBJBLOCK);\n-                brace \u003d (objBlock \u003d\u003d null)\n+                brace \u003d objBlock \u003d\u003d null\n                     ? null\n                     : objBlock.getFirstChild();\n                 break;\n \n             case TokenTypes.LITERAL_WHILE:\n             case TokenTypes.LITERAL_CATCH:\n             case TokenTypes.LITERAL_SYNCHRONIZED:\n             case TokenTypes.LITERAL_FOR:\n             case TokenTypes.LITERAL_TRY:\n             case TokenTypes.LITERAL_FINALLY:\n             case TokenTypes.LITERAL_DO:\n             case TokenTypes.LITERAL_IF :\n                 startToken \u003d ast;\n                 brace \u003d ast.findFirstToken(TokenTypes.SLIST);\n                 break;\n \n             case TokenTypes.LITERAL_ELSE :\n                 startToken \u003d ast;\n                 final DetailAST candidate \u003d ast.getFirstChild();\n                 brace \u003d\n-                    (candidate.getType() \u003d\u003d TokenTypes.SLIST)\n+                    candidate.getType() \u003d\u003d TokenTypes.SLIST\n                     ? candidate\n                     : null; // silently ignore\n                 break;\n \n             case TokenTypes.LITERAL_SWITCH :\n                 startToken \u003d ast;\n                 brace \u003d ast.findFirstToken(TokenTypes.LCURLY);\n                 break;\n \n             default :\n                 startToken \u003d null;\n                 brace \u003d null;\n         }\n \n-        if ((brace !\u003d null) \u0026\u0026 (startToken !\u003d null)) {\n+        if (brace !\u003d null \u0026\u0026 startToken !\u003d null) {\n             verifyBrace(brace, startToken);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "cea86a6cad3098ebcdb4a88db2e49477b07e0d93": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, blocks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheck.java\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java\n",
      "commitDate": 1421677949000,
      "commitName": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "501b7c5240705c6db756608618fdcf58189e807e": {
      "type": "Ybodychange",
      "commitMessage": "Repair Sonarqube problems found in Checkstyle for issue #46\n\n Fixes for \u0027Modifiers should be declared in the correct order\u0027, \u0027Redundant casts should not be used\u0027 and \u0027Array designators \"[]\" should be on the type, not the variable\u0027\n",
      "commitDate": 1421176843000,
      "commitName": "501b7c5240705c6db756608618fdcf58189e807e",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1414957696000,
      "commitNameOld": "cba6fc8b0a653a795107566f895d2b8f73e2c6c9",
      "commitAuthorOld": "sopov.ivan",
      "daysBetweenCommits": 71.98,
      "commitsBetweenForRepo": 227,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,59 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final DetailAST startToken;\n         final DetailAST brace;\n \n         switch (aAST.getType()) {\n         case TokenTypes.CTOR_DEF :\n         case TokenTypes.METHOD_DEF :\n             startToken \u003d skipAnnotationOnlyLines(aAST);\n             brace \u003d aAST.findFirstToken(TokenTypes.SLIST);\n             break;\n \n         case TokenTypes.INTERFACE_DEF :\n         case TokenTypes.CLASS_DEF :\n         case TokenTypes.ANNOTATION_DEF :\n         case TokenTypes.ENUM_DEF :\n         case TokenTypes.ENUM_CONSTANT_DEF :\n             startToken \u003d skipAnnotationOnlyLines(aAST);\n             final DetailAST objBlock \u003d aAST.findFirstToken(TokenTypes.OBJBLOCK);\n             brace \u003d (objBlock \u003d\u003d null)\n                 ? null\n-                : (DetailAST) objBlock.getFirstChild();\n+                : objBlock.getFirstChild();\n             break;\n \n         case TokenTypes.LITERAL_WHILE:\n         case TokenTypes.LITERAL_CATCH:\n         case TokenTypes.LITERAL_SYNCHRONIZED:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.LITERAL_TRY:\n         case TokenTypes.LITERAL_FINALLY:\n         case TokenTypes.LITERAL_DO:\n         case TokenTypes.LITERAL_IF :\n             startToken \u003d aAST;\n             brace \u003d aAST.findFirstToken(TokenTypes.SLIST);\n             break;\n \n         case TokenTypes.LITERAL_ELSE :\n             startToken \u003d aAST;\n             final DetailAST candidate \u003d aAST.getFirstChild();\n             brace \u003d\n                 (candidate.getType() \u003d\u003d TokenTypes.SLIST)\n                 ? candidate\n                 : null; // silently ignore\n             break;\n \n         case TokenTypes.LITERAL_SWITCH :\n             startToken \u003d aAST;\n             brace \u003d aAST.findFirstToken(TokenTypes.LCURLY);\n             break;\n \n         default :\n             startToken \u003d null;\n             brace \u003d null;\n         }\n \n         if ((brace !\u003d null) \u0026\u0026 (startToken !\u003d null)) {\n             verifyBrace(brace, startToken);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "e195128381e3d20a922411e2dea4c6496f3be1a3": {
      "type": "Ybodychange",
      "commitMessage": "clean up\n",
      "commitDate": 1240834692000,
      "commitName": "e195128381e3d20a922411e2dea4c6496f3be1a3",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1237695418000,
      "commitNameOld": "216fcb79f9f5bbd05244364e926f261a90e697d1",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 36.33,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,59 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final DetailAST startToken;\n         final DetailAST brace;\n \n         switch (aAST.getType()) {\n         case TokenTypes.CTOR_DEF :\n         case TokenTypes.METHOD_DEF :\n             startToken \u003d skipAnnotationOnlyLines(aAST);\n             brace \u003d aAST.findFirstToken(TokenTypes.SLIST);\n             break;\n \n         case TokenTypes.INTERFACE_DEF :\n         case TokenTypes.CLASS_DEF :\n         case TokenTypes.ANNOTATION_DEF :\n         case TokenTypes.ENUM_DEF :\n         case TokenTypes.ENUM_CONSTANT_DEF :\n-            startToken \u003d (DetailAST) skipAnnotationOnlyLines(aAST);\n+            startToken \u003d skipAnnotationOnlyLines(aAST);\n             final DetailAST objBlock \u003d aAST.findFirstToken(TokenTypes.OBJBLOCK);\n             brace \u003d (objBlock \u003d\u003d null)\n                 ? null\n                 : (DetailAST) objBlock.getFirstChild();\n             break;\n \n         case TokenTypes.LITERAL_WHILE:\n         case TokenTypes.LITERAL_CATCH:\n         case TokenTypes.LITERAL_SYNCHRONIZED:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.LITERAL_TRY:\n         case TokenTypes.LITERAL_FINALLY:\n         case TokenTypes.LITERAL_DO:\n         case TokenTypes.LITERAL_IF :\n             startToken \u003d aAST;\n             brace \u003d aAST.findFirstToken(TokenTypes.SLIST);\n             break;\n \n         case TokenTypes.LITERAL_ELSE :\n             startToken \u003d aAST;\n-            final DetailAST candidate \u003d (DetailAST) aAST.getFirstChild();\n+            final DetailAST candidate \u003d aAST.getFirstChild();\n             brace \u003d\n                 (candidate.getType() \u003d\u003d TokenTypes.SLIST)\n                 ? candidate\n                 : null; // silently ignore\n             break;\n \n         case TokenTypes.LITERAL_SWITCH :\n             startToken \u003d aAST;\n             brace \u003d aAST.findFirstToken(TokenTypes.LCURLY);\n             break;\n \n         default :\n             startToken \u003d null;\n             brace \u003d null;\n         }\n \n         if ((brace !\u003d null) \u0026\u0026 (startToken !\u003d null)) {\n             verifyBrace(brace, startToken);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "d73aed8c02d48ef4fb8583125763b5f9db3012d5": {
      "type": "Ybodychange",
      "commitMessage": "remove old code.\n",
      "commitDate": 1236508430000,
      "commitName": "d73aed8c02d48ef4fb8583125763b5f9db3012d5",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1236508230000,
      "commitNameOld": "ad34b2a35eff0dba70ef5b27a0ff361520b66bea",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,59 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final DetailAST startToken;\n         final DetailAST brace;\n \n         switch (aAST.getType()) {\n         case TokenTypes.CTOR_DEF :\n         case TokenTypes.METHOD_DEF :\n-            // Orig\n-            //startToken \u003d aAST;\n-            // New\n             startToken \u003d skipAnnotationOnlyLines(aAST);\n-            // End\n             brace \u003d aAST.findFirstToken(TokenTypes.SLIST);\n             break;\n \n         case TokenTypes.INTERFACE_DEF :\n         case TokenTypes.CLASS_DEF :\n         case TokenTypes.ANNOTATION_DEF :\n         case TokenTypes.ENUM_DEF :\n         case TokenTypes.ENUM_CONSTANT_DEF :\n             startToken \u003d (DetailAST) skipAnnotationOnlyLines(aAST);\n             final DetailAST objBlock \u003d aAST.findFirstToken(TokenTypes.OBJBLOCK);\n             brace \u003d (objBlock \u003d\u003d null)\n                 ? null\n                 : (DetailAST) objBlock.getFirstChild();\n             break;\n \n         case TokenTypes.LITERAL_WHILE:\n         case TokenTypes.LITERAL_CATCH:\n         case TokenTypes.LITERAL_SYNCHRONIZED:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.LITERAL_TRY:\n         case TokenTypes.LITERAL_FINALLY:\n         case TokenTypes.LITERAL_DO:\n         case TokenTypes.LITERAL_IF :\n             startToken \u003d aAST;\n             brace \u003d aAST.findFirstToken(TokenTypes.SLIST);\n             break;\n \n         case TokenTypes.LITERAL_ELSE :\n             startToken \u003d aAST;\n             final DetailAST candidate \u003d (DetailAST) aAST.getFirstChild();\n             brace \u003d\n                 (candidate.getType() \u003d\u003d TokenTypes.SLIST)\n                 ? candidate\n                 : null; // silently ignore\n             break;\n \n         case TokenTypes.LITERAL_SWITCH :\n             startToken \u003d aAST;\n             brace \u003d aAST.findFirstToken(TokenTypes.LCURLY);\n             break;\n \n         default :\n             startToken \u003d null;\n             brace \u003d null;\n         }\n \n         if ((brace !\u003d null) \u0026\u0026 (startToken !\u003d null)) {\n             verifyBrace(brace, startToken);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "ad34b2a35eff0dba70ef5b27a0ff361520b66bea": {
      "type": "Ybodychange",
      "commitMessage": "Fixed the LeftCurly check to ignore leading annotations. Thanks to Tim Carpenter for patch #2506439. An excellent quality patch.\n",
      "commitDate": 1236508230000,
      "commitName": "ad34b2a35eff0dba70ef5b27a0ff361520b66bea",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1221737656000,
      "commitNameOld": "d62a2cc02092cb6c1a1666630a51a6ec7c50a878",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 170.96,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,63 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final DetailAST startToken;\n         final DetailAST brace;\n \n         switch (aAST.getType()) {\n         case TokenTypes.CTOR_DEF :\n         case TokenTypes.METHOD_DEF :\n-            startToken \u003d aAST;\n+            // Orig\n+            //startToken \u003d aAST;\n+            // New\n+            startToken \u003d skipAnnotationOnlyLines(aAST);\n+            // End\n             brace \u003d aAST.findFirstToken(TokenTypes.SLIST);\n             break;\n \n         case TokenTypes.INTERFACE_DEF :\n         case TokenTypes.CLASS_DEF :\n         case TokenTypes.ANNOTATION_DEF :\n         case TokenTypes.ENUM_DEF :\n         case TokenTypes.ENUM_CONSTANT_DEF :\n-            startToken \u003d aAST.getFirstChild();\n+            startToken \u003d (DetailAST) skipAnnotationOnlyLines(aAST);\n             final DetailAST objBlock \u003d aAST.findFirstToken(TokenTypes.OBJBLOCK);\n             brace \u003d (objBlock \u003d\u003d null)\n                 ? null\n-                : objBlock.getFirstChild();\n+                : (DetailAST) objBlock.getFirstChild();\n             break;\n \n         case TokenTypes.LITERAL_WHILE:\n         case TokenTypes.LITERAL_CATCH:\n         case TokenTypes.LITERAL_SYNCHRONIZED:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.LITERAL_TRY:\n         case TokenTypes.LITERAL_FINALLY:\n         case TokenTypes.LITERAL_DO:\n         case TokenTypes.LITERAL_IF :\n             startToken \u003d aAST;\n             brace \u003d aAST.findFirstToken(TokenTypes.SLIST);\n             break;\n \n         case TokenTypes.LITERAL_ELSE :\n             startToken \u003d aAST;\n-            final DetailAST candidate \u003d aAST.getFirstChild();\n+            final DetailAST candidate \u003d (DetailAST) aAST.getFirstChild();\n             brace \u003d\n                 (candidate.getType() \u003d\u003d TokenTypes.SLIST)\n                 ? candidate\n                 : null; // silently ignore\n             break;\n \n         case TokenTypes.LITERAL_SWITCH :\n             startToken \u003d aAST;\n             brace \u003d aAST.findFirstToken(TokenTypes.LCURLY);\n             break;\n \n         default :\n             startToken \u003d null;\n             brace \u003d null;\n         }\n \n         if ((brace !\u003d null) \u0026\u0026 (startToken !\u003d null)) {\n             verifyBrace(brace, startToken);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878": {
      "type": "Ybodychange",
      "commitMessage": "Inspired by patch# 2111354 - changes to remove casting. Neat trick\n",
      "commitDate": 1221737656000,
      "commitName": "d62a2cc02092cb6c1a1666630a51a6ec7c50a878",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1214975994000,
      "commitNameOld": "d4b933799af120cf4a8490db98f396b6348430e9",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 78.26,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,59 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final DetailAST startToken;\n         final DetailAST brace;\n \n         switch (aAST.getType()) {\n         case TokenTypes.CTOR_DEF :\n         case TokenTypes.METHOD_DEF :\n             startToken \u003d aAST;\n             brace \u003d aAST.findFirstToken(TokenTypes.SLIST);\n             break;\n \n         case TokenTypes.INTERFACE_DEF :\n         case TokenTypes.CLASS_DEF :\n         case TokenTypes.ANNOTATION_DEF :\n         case TokenTypes.ENUM_DEF :\n         case TokenTypes.ENUM_CONSTANT_DEF :\n-            startToken \u003d (DetailAST) aAST.getFirstChild();\n+            startToken \u003d aAST.getFirstChild();\n             final DetailAST objBlock \u003d aAST.findFirstToken(TokenTypes.OBJBLOCK);\n             brace \u003d (objBlock \u003d\u003d null)\n                 ? null\n-                : (DetailAST) objBlock.getFirstChild();\n+                : objBlock.getFirstChild();\n             break;\n \n         case TokenTypes.LITERAL_WHILE:\n         case TokenTypes.LITERAL_CATCH:\n         case TokenTypes.LITERAL_SYNCHRONIZED:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.LITERAL_TRY:\n         case TokenTypes.LITERAL_FINALLY:\n         case TokenTypes.LITERAL_DO:\n         case TokenTypes.LITERAL_IF :\n             startToken \u003d aAST;\n             brace \u003d aAST.findFirstToken(TokenTypes.SLIST);\n             break;\n \n         case TokenTypes.LITERAL_ELSE :\n             startToken \u003d aAST;\n-            final DetailAST candidate \u003d (DetailAST) aAST.getFirstChild();\n+            final DetailAST candidate \u003d aAST.getFirstChild();\n             brace \u003d\n                 (candidate.getType() \u003d\u003d TokenTypes.SLIST)\n                 ? candidate\n                 : null; // silently ignore\n             break;\n \n         case TokenTypes.LITERAL_SWITCH :\n             startToken \u003d aAST;\n             brace \u003d aAST.findFirstToken(TokenTypes.LCURLY);\n             break;\n \n         default :\n             startToken \u003d null;\n             brace \u003d null;\n         }\n \n         if ((brace !\u003d null) \u0026\u0026 (startToken !\u003d null)) {\n             verifyBrace(brace, startToken);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "f59c0a0a977e1df10ac9897179c3d29d98360158": {
      "type": "Ybodychange",
      "commitMessage": "fixed NPE in LeftCurlyCheck that occured with JDK 1.5 enums (bug #1113946)\n",
      "commitDate": 1108886744000,
      "commitName": "f59c0a0a977e1df10ac9897179c3d29d98360158",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": 1106583782000,
      "commitNameOld": "47bfe73b631144b19b447a22e96f51853fb53846",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 26.65,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,59 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final DetailAST startToken;\n         final DetailAST brace;\n \n         switch (aAST.getType()) {\n         case TokenTypes.CTOR_DEF :\n         case TokenTypes.METHOD_DEF :\n             startToken \u003d aAST;\n             brace \u003d aAST.findFirstToken(TokenTypes.SLIST);\n             break;\n \n         case TokenTypes.INTERFACE_DEF :\n         case TokenTypes.CLASS_DEF :\n         case TokenTypes.ANNOTATION_DEF :\n         case TokenTypes.ENUM_DEF :\n         case TokenTypes.ENUM_CONSTANT_DEF :\n             startToken \u003d (DetailAST) aAST.getFirstChild();\n-            brace \u003d (DetailAST) aAST.findFirstToken(TokenTypes.OBJBLOCK)\n-                .getFirstChild();\n+            final DetailAST objBlock \u003d aAST.findFirstToken(TokenTypes.OBJBLOCK);\n+            brace \u003d (objBlock \u003d\u003d null)\n+                ? null \n+                : (DetailAST) objBlock.getFirstChild();\n             break;\n \n         case TokenTypes.LITERAL_WHILE:\n         case TokenTypes.LITERAL_CATCH:\n         case TokenTypes.LITERAL_SYNCHRONIZED:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.LITERAL_TRY:\n         case TokenTypes.LITERAL_FINALLY:\n         case TokenTypes.LITERAL_DO:\n         case TokenTypes.LITERAL_IF :\n             startToken \u003d aAST;\n             brace \u003d aAST.findFirstToken(TokenTypes.SLIST);\n             break;\n \n         case TokenTypes.LITERAL_ELSE :\n             startToken \u003d aAST;\n             final DetailAST candidate \u003d (DetailAST) aAST.getFirstChild();\n             brace \u003d\n                 (candidate.getType() \u003d\u003d TokenTypes.SLIST)\n                 ? candidate\n                 : null; // silently ignore\n             break;\n \n         case TokenTypes.LITERAL_SWITCH :\n             startToken \u003d aAST;\n             brace \u003d aAST.findFirstToken(TokenTypes.LCURLY);\n             break;\n \n         default :\n             startToken \u003d null;\n             brace \u003d null;\n         }\n \n         if ((brace !\u003d null) \u0026\u0026 (startToken !\u003d null)) {\n             verifyBrace(brace, startToken);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "6125beffc437f970eae276b4a6542265c6547784": {
      "type": "Ybodychange",
      "commitMessage": "Initial Java 1.5 support\n",
      "commitDate": 1096311350000,
      "commitName": "6125beffc437f970eae276b4a6542265c6547784",
      "commitAuthor": "Michael Studman",
      "commitDateOld": 1074114639000,
      "commitNameOld": "5670252b46f4915b276e647fa000361915eb4ff4",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 256.91,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,57 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final DetailAST startToken;\n         final DetailAST brace;\n \n         switch (aAST.getType()) {\n         case TokenTypes.CTOR_DEF :\n         case TokenTypes.METHOD_DEF :\n             startToken \u003d aAST;\n             brace \u003d aAST.findFirstToken(TokenTypes.SLIST);\n             break;\n \n         case TokenTypes.INTERFACE_DEF :\n         case TokenTypes.CLASS_DEF :\n+        case TokenTypes.ANNOTATION_DEF :\n+        case TokenTypes.ENUM_DEF :\n+        case TokenTypes.ENUM_CONSTANT_DEF :\n             startToken \u003d (DetailAST) aAST.getFirstChild();\n-            brace \u003d (DetailAST) aAST.getLastChild().getFirstChild();\n+            brace \u003d (DetailAST) aAST.findFirstToken(TokenTypes.OBJBLOCK)\n+                .getFirstChild();\n             break;\n \n         case TokenTypes.LITERAL_WHILE:\n         case TokenTypes.LITERAL_CATCH:\n         case TokenTypes.LITERAL_SYNCHRONIZED:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.LITERAL_TRY:\n         case TokenTypes.LITERAL_FINALLY:\n         case TokenTypes.LITERAL_DO:\n         case TokenTypes.LITERAL_IF :\n             startToken \u003d aAST;\n             brace \u003d aAST.findFirstToken(TokenTypes.SLIST);\n             break;\n \n         case TokenTypes.LITERAL_ELSE :\n             startToken \u003d aAST;\n             final DetailAST candidate \u003d (DetailAST) aAST.getFirstChild();\n             brace \u003d\n                 (candidate.getType() \u003d\u003d TokenTypes.SLIST)\n                 ? candidate\n                 : null; // silently ignore\n             break;\n \n         case TokenTypes.LITERAL_SWITCH :\n             startToken \u003d aAST;\n             brace \u003d aAST.findFirstToken(TokenTypes.LCURLY);\n             break;\n \n         default :\n             startToken \u003d null;\n             brace \u003d null;\n         }\n \n         if ((brace !\u003d null) \u0026\u0026 (startToken !\u003d null)) {\n             verifyBrace(brace, startToken);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "d2fb67faae0b56340678abef1d1ecedf1df8bb95": {
      "type": "Ybodychange",
      "commitMessage": "Fix for 866501 (Inconsistent lcurly new line on wrap). Some grammar changes made to fix this problem.\n",
      "commitDate": 1073288313000,
      "commitName": "d2fb67faae0b56340678abef1d1ecedf1df8bb95",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1056711878000,
      "commitNameOld": "768256c32a3e397f837ce27602bda49e3c5e0062",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 191.86,
      "commitsBetweenForRepo": 254,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,53 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final DetailAST startToken;\n         final DetailAST brace;\n \n         switch (aAST.getType()) {\n         case TokenTypes.CTOR_DEF :\n         case TokenTypes.METHOD_DEF :\n             startToken \u003d aAST;\n             brace \u003d aAST.findFirstToken(TokenTypes.SLIST);\n             break;\n \n         case TokenTypes.INTERFACE_DEF :\n         case TokenTypes.CLASS_DEF :\n-            // TODO: should check for modifiers\n-            startToken \u003d (DetailAST) aAST.getFirstChild().getNextSibling();\n+            startToken \u003d (DetailAST) aAST.getFirstChild();\n             brace \u003d (DetailAST) aAST.getLastChild().getFirstChild();\n             break;\n \n         case TokenTypes.LITERAL_WHILE:\n         case TokenTypes.LITERAL_CATCH:\n         case TokenTypes.LITERAL_SYNCHRONIZED:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.LITERAL_TRY:\n         case TokenTypes.LITERAL_FINALLY:\n         case TokenTypes.LITERAL_DO:\n         case TokenTypes.LITERAL_IF :\n             startToken \u003d aAST;\n             brace \u003d aAST.findFirstToken(TokenTypes.SLIST);\n             break;\n \n         case TokenTypes.LITERAL_ELSE :\n             startToken \u003d aAST;\n             final DetailAST candidate \u003d (DetailAST) aAST.getFirstChild();\n             brace \u003d\n                 (candidate.getType() \u003d\u003d TokenTypes.SLIST)\n                 ? candidate\n                 : null; // silently ignore\n             break;\n \n         case TokenTypes.LITERAL_SWITCH :\n             startToken \u003d aAST;\n             brace \u003d aAST.findFirstToken(TokenTypes.LCURLY);\n             break;\n \n         default :\n             startToken \u003d null;\n             brace \u003d null;\n         }\n \n         if ((brace !\u003d null) \u0026\u0026 (startToken !\u003d null)) {\n             verifyBrace(brace, startToken);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "3bd6412e39a141b980901f291391ff1bcc4a61f3": {
      "type": "Yfilerename",
      "commitMessage": "Refactored the Block checks\n",
      "commitDate": 1054723367000,
      "commitName": "3bd6412e39a141b980901f291391ff1bcc4a61f3",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1054719060000,
      "commitNameOld": "a0844ab125394605a6970a23132daa41ed5cecb1",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "f50c47545a5bcdaf1facb2aaf88adeda15594007": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "Refactored all the LeftCurly checks into one\n",
      "commitDate": 1040280619000,
      "commitName": "f50c47545a5bcdaf1facb2aaf88adeda15594007",
      "commitAuthor": "Oliver Burn",
      "subchanges": [
        "Ymovefromfile",
        "Ybodychange"
      ]
    },
    "4a5ccfb6fe4d4d2cf9d74419b3292bbb46ad4149": {
      "type": "Ybodychange",
      "commitMessage": "Bug fix the handling of \u0027{\u0027. Demonstrates the power of using findFirstToken().\n",
      "commitDate": 1038010817000,
      "commitName": "4a5ccfb6fe4d4d2cf9d74419b3292bbb46ad4149",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1035797514000,
      "commitNameOld": "eecd476fa8c6dba62f919a5ff1740d108848c867",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 25.62,
      "commitsBetweenForRepo": 177,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,37 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final DetailAST startToken \u003d aAST;\n         final DetailAST brace;\n \n         switch (aAST.getType()) {\n             case TokenTypes.LITERAL_WHILE:\n             case TokenTypes.LITERAL_CATCH:\n             case TokenTypes.LITERAL_SYNCHRONIZED:\n             case TokenTypes.LITERAL_FOR:\n-                brace \u003d aAST.getLastChild();\n-                break;\n             case TokenTypes.LITERAL_TRY:\n             case TokenTypes.LITERAL_FINALLY:\n             case TokenTypes.LITERAL_DO:\n-                brace \u003d (DetailAST) aAST.getFirstChild();\n+            case TokenTypes.LITERAL_IF:\n+                brace \u003d aAST.findFirstToken(TokenTypes.SLIST);\n                 break;\n+                \n             case TokenTypes.LITERAL_ELSE:\n                 final DetailAST candidate \u003d (DetailAST) aAST.getFirstChild();\n-                if (candidate.getType() \u003d\u003d TokenTypes.SLIST) {\n-                    brace \u003d candidate;\n-                }\n-                else {\n-                    // silently ignore\n-                    brace \u003d null;\n-                }\n+                brace \u003d\n+                    (candidate.getType() \u003d\u003d TokenTypes.SLIST)\n+                        ? candidate\n+                        : null; // silently ignore\n                 break;\n-            case TokenTypes.LITERAL_SWITCH:\n-            case TokenTypes.LITERAL_IF:\n-                brace \u003d (DetailAST) aAST.getFirstChild().getNextSibling()\n-                    .getNextSibling().getNextSibling();\n+                \n+            case TokenTypes.LITERAL_SWITCH :\n+                brace \u003d aAST.findFirstToken(TokenTypes.LCURLY);\n                 break;\n+\n             default:\n                 brace \u003d null;\n         }\n \n         if (brace !\u003d null) {\n             verifyBrace(brace, startToken);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "eecd476fa8c6dba62f919a5ff1740d108848c867": {
      "type": "Ybodychange",
      "commitMessage": "moved static AST helpers in Util to DetailAST\n",
      "commitDate": 1035797514000,
      "commitName": "eecd476fa8c6dba62f919a5ff1740d108848c867",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": 1035613262000,
      "commitNameOld": "8dd406793d0152390b48097bd5f51696116044a8",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 2.13,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final DetailAST startToken \u003d aAST;\n         final DetailAST brace;\n \n         switch (aAST.getType()) {\n             case TokenTypes.LITERAL_WHILE:\n             case TokenTypes.LITERAL_CATCH:\n             case TokenTypes.LITERAL_SYNCHRONIZED:\n             case TokenTypes.LITERAL_FOR:\n-                brace \u003d Utils.getLastSibling(aAST.getFirstChild());\n+                brace \u003d aAST.getLastChild();\n                 break;\n             case TokenTypes.LITERAL_TRY:\n             case TokenTypes.LITERAL_FINALLY:\n             case TokenTypes.LITERAL_DO:\n                 brace \u003d (DetailAST) aAST.getFirstChild();\n                 break;\n             case TokenTypes.LITERAL_ELSE:\n                 final DetailAST candidate \u003d (DetailAST) aAST.getFirstChild();\n                 if (candidate.getType() \u003d\u003d TokenTypes.SLIST) {\n                     brace \u003d candidate;\n                 }\n                 else {\n                     // silently ignore\n                     brace \u003d null;\n                 }\n                 break;\n             case TokenTypes.LITERAL_SWITCH:\n             case TokenTypes.LITERAL_IF:\n                 brace \u003d (DetailAST) aAST.getFirstChild().getNextSibling()\n                     .getNextSibling().getNextSibling();\n                 break;\n             default:\n                 brace \u003d null;\n         }\n \n         if (brace !\u003d null) {\n             verifyBrace(brace, startToken);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "84eddc36730c1eca845257201c71a0d1fb2d40cf": {
      "type": "Ybodychange",
      "commitMessage": "Added a new class TokenTypes that contains all the type constants. This class\nbreaks the circular dependencies - the cost is needing to maintain this class\nwhen a new grammar is introduced.\n",
      "commitDate": 1035008886000,
      "commitName": "84eddc36730c1eca845257201c71a0d1fb2d40cf",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1034552460000,
      "commitNameOld": "63664e0b012593e18c5bb93ba528f27fd93fe0d4",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 5.28,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final DetailAST startToken \u003d aAST;\n         final DetailAST brace;\n \n         switch (aAST.getType()) {\n-            case JavaTokenTypes.LITERAL_while:\n-            case JavaTokenTypes.LITERAL_catch:\n-            case JavaTokenTypes.LITERAL_synchronized:\n-            case JavaTokenTypes.LITERAL_for:\n+            case TokenTypes.LITERAL_WHILE:\n+            case TokenTypes.LITERAL_CATCH:\n+            case TokenTypes.LITERAL_SYNCHRONIZED:\n+            case TokenTypes.LITERAL_FOR:\n                 brace \u003d Utils.getLastSibling(aAST.getFirstChild());\n                 break;\n-            case JavaTokenTypes.LITERAL_try:\n-            case JavaTokenTypes.LITERAL_finally:\n-            case JavaTokenTypes.LITERAL_do:\n+            case TokenTypes.LITERAL_TRY:\n+            case TokenTypes.LITERAL_FINALLY:\n+            case TokenTypes.LITERAL_DO:\n                 brace \u003d (DetailAST) aAST.getFirstChild();\n                 break;\n-            case JavaTokenTypes.LITERAL_else:\n+            case TokenTypes.LITERAL_ELSE:\n                 final DetailAST candidate \u003d (DetailAST) aAST.getFirstChild();\n-                if (candidate.getType() \u003d\u003d JavaTokenTypes.SLIST) {\n+                if (candidate.getType() \u003d\u003d TokenTypes.SLIST) {\n                     brace \u003d candidate;\n                 }\n                 else {\n                     // silently ignore\n                     brace \u003d null;\n                 }\n                 break;\n-            case JavaTokenTypes.LITERAL_switch:\n-            case JavaTokenTypes.LITERAL_if:\n+            case TokenTypes.LITERAL_SWITCH:\n+            case TokenTypes.LITERAL_IF:\n                 brace \u003d (DetailAST) aAST.getFirstChild().getNextSibling()\n                     .getNextSibling().getNextSibling();\n                 break;\n             default:\n                 brace \u003d null;\n         }\n \n         if (brace !\u003d null) {\n             verifyBrace(brace, startToken);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "5fd3fab179d700d68281fee316519fdd907bbcd6": {
      "type": "Ybodychange",
      "commitMessage": "Stopped the tokens LPAREN and RPAREN being silently eaten by the grammar. Now\nneed to implement the ParenPad check. Should be easy.\n\nAlso need to refactor some the existing tests to use utility methods for\nlocating tokens in the tree. Currently hard code the positions, which is not\nideal.\n",
      "commitDate": 1034515902000,
      "commitName": "5fd3fab179d700d68281fee316519fdd907bbcd6",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1034512562000,
      "commitNameOld": "1bba9f0056f13a18be51d41e6d9c8645ed04343e",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,40 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final DetailAST startToken \u003d aAST;\n         final DetailAST brace;\n \n         switch (aAST.getType()) {\n             case JavaTokenTypes.LITERAL_while:\n             case JavaTokenTypes.LITERAL_catch:\n             case JavaTokenTypes.LITERAL_synchronized:\n             case JavaTokenTypes.LITERAL_for:\n                 brace \u003d Utils.getLastSibling(aAST.getFirstChild());\n                 break;\n             case JavaTokenTypes.LITERAL_try:\n             case JavaTokenTypes.LITERAL_finally:\n             case JavaTokenTypes.LITERAL_do:\n                 brace \u003d (DetailAST) aAST.getFirstChild();\n                 break;\n             case JavaTokenTypes.LITERAL_else:\n                 final DetailAST candidate \u003d (DetailAST) aAST.getFirstChild();\n                 if (candidate.getType() \u003d\u003d JavaTokenTypes.SLIST) {\n                     brace \u003d candidate;\n                 }\n                 else {\n                     // silently ignore\n                     brace \u003d null;\n                 }\n                 break;\n             case JavaTokenTypes.LITERAL_switch:\n             case JavaTokenTypes.LITERAL_if:\n-                brace \u003d (DetailAST) aAST.getFirstChild().getNextSibling();\n+                brace \u003d (DetailAST) aAST.getFirstChild().getNextSibling()\n+                    .getNextSibling().getNextSibling();\n                 break;\n             default:\n                 brace \u003d null;\n         }\n \n         if (brace !\u003d null) {\n             verifyBrace(brace, startToken);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "1bba9f0056f13a18be51d41e6d9c8645ed04343e": {
      "type": "Ybodychange",
      "commitMessage": "removed old implementation of Other Left Curly Check\n",
      "commitDate": 1034512562000,
      "commitName": "1bba9f0056f13a18be51d41e6d9c8645ed04343e",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1034510938000,
      "commitNameOld": "21c76786c66c9a688e8a71898258ae61bcaec39d",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,39 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final DetailAST startToken \u003d aAST;\n         final DetailAST brace;\n \n         switch (aAST.getType()) {\n             case JavaTokenTypes.LITERAL_while:\n             case JavaTokenTypes.LITERAL_catch:\n             case JavaTokenTypes.LITERAL_synchronized:\n+            case JavaTokenTypes.LITERAL_for:\n                 brace \u003d Utils.getLastSibling(aAST.getFirstChild());\n                 break;\n             case JavaTokenTypes.LITERAL_try:\n             case JavaTokenTypes.LITERAL_finally:\n             case JavaTokenTypes.LITERAL_do:\n                 brace \u003d (DetailAST) aAST.getFirstChild();\n                 break;\n             case JavaTokenTypes.LITERAL_else:\n                 final DetailAST candidate \u003d (DetailAST) aAST.getFirstChild();\n                 if (candidate.getType() \u003d\u003d JavaTokenTypes.SLIST) {\n                     brace \u003d candidate;\n                 }\n                 else {\n                     // silently ignore\n                     brace \u003d null;\n                 }\n                 break;\n             case JavaTokenTypes.LITERAL_switch:\n             case JavaTokenTypes.LITERAL_if:\n                 brace \u003d (DetailAST) aAST.getFirstChild().getNextSibling();\n                 break;\n             default:\n                 brace \u003d null;\n         }\n \n         if (brace !\u003d null) {\n             verifyBrace(brace, startToken);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "21c76786c66c9a688e8a71898258ae61bcaec39d": {
      "type": "Yintroduced",
      "commitMessage": "Implemented Other Left Curly check\n",
      "commitDate": 1034510938000,
      "commitName": "21c76786c66c9a688e8a71898258ae61bcaec39d",
      "commitAuthor": "Oliver Burn"
    }
  }
}