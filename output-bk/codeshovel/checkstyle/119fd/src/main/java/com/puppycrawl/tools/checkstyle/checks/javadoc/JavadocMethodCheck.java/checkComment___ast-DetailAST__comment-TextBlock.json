{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "JavadocMethodCheck.java",
  "functionName": "checkComment",
  "functionId": "checkComment___ast-DetailAST__comment-TextBlock",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
  "functionStartLine": 480,
  "functionEndLine": 507,
  "changeHistory": [
    "073c370de2e65fc346b51ef09763ecb30b5cd14f",
    "de022d2434e58dd633fd50a7f9bb50565a8767b5",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
    "1f18d9de9ad3df69b8f648ae078c7246f36ad99d",
    "6ee4a0f805d528cdee03cfc175502d15b5722dab",
    "e2b4e687d7b8f9d6d5e1346d874b90e4567aff81",
    "f7698ed23b365bce680b6ec8cd00b78e148582ac",
    "e1a2e66b262be83708d65b7c5f2ba4014c97e384",
    "e81ca8290b4efd42c3454ffa0159b739f958ea48",
    "a21164df1fbaff36ba020968b3a6128ab8476756",
    "931af7ec1411aa04b3f0b5d94373a3da43ce7e27",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc",
    "89a51ba032fd9126651fa9efad31baf10c006ddf",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "1d614c3a7ecf8a3ede4df8a50da46e71792d0025",
    "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
    "0a72322796c28266f07df8af6f7e000aa9cf0e48",
    "1aee9d55cc5bd8cca011e17369f6e370efcc85bb",
    "06c32930c34e2b10b5926883c29a4a20fe6ecf05",
    "6125beffc437f970eae276b4a6542265c6547784",
    "72be23f288369fdd9e562999bb9b0e2ff646c897",
    "8fb2acd39b7db6223486f5e06126c7f0a2642a72",
    "24ba45a971569b9702e6bf78c5c07c48beb25464",
    "04ac5dd87c11a2bf7b908b45bbca7933382df515",
    "8e55d5c09147620f59461387d45d09c2bc0bbd6e",
    "c75f97dbc2123f550a1acc64886a8bebf4b888cf"
  ],
  "changeHistoryShort": {
    "073c370de2e65fc346b51ef09763ecb30b5cd14f": "Ybodychange",
    "de022d2434e58dd633fd50a7f9bb50565a8767b5": "Ybodychange",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": "Ybodychange",
    "1f18d9de9ad3df69b8f648ae078c7246f36ad99d": "Ybodychange",
    "6ee4a0f805d528cdee03cfc175502d15b5722dab": "Ybodychange",
    "e2b4e687d7b8f9d6d5e1346d874b90e4567aff81": "Ybodychange",
    "f7698ed23b365bce680b6ec8cd00b78e148582ac": "Ybodychange",
    "e1a2e66b262be83708d65b7c5f2ba4014c97e384": "Ybodychange",
    "e81ca8290b4efd42c3454ffa0159b739f958ea48": "Ybodychange",
    "a21164df1fbaff36ba020968b3a6128ab8476756": "Ybodychange",
    "931af7ec1411aa04b3f0b5d94373a3da43ce7e27": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc": "Ybodychange",
    "89a51ba032fd9126651fa9efad31baf10c006ddf": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "1d614c3a7ecf8a3ede4df8a50da46e71792d0025": "Ymultichange(Yparameterchange,Ybodychange)",
    "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d": "Ybodychange",
    "0a72322796c28266f07df8af6f7e000aa9cf0e48": "Ymultichange(Yparameterchange,Ybodychange)",
    "1aee9d55cc5bd8cca011e17369f6e370efcc85bb": "Ybodychange",
    "06c32930c34e2b10b5926883c29a4a20fe6ecf05": "Ybodychange",
    "6125beffc437f970eae276b4a6542265c6547784": "Ybodychange",
    "72be23f288369fdd9e562999bb9b0e2ff646c897": "Ybodychange",
    "8fb2acd39b7db6223486f5e06126c7f0a2642a72": "Yparameterchange",
    "24ba45a971569b9702e6bf78c5c07c48beb25464": "Ymultichange(Yparameterchange,Ybodychange)",
    "04ac5dd87c11a2bf7b908b45bbca7933382df515": "Yfilerename",
    "8e55d5c09147620f59461387d45d09c2bc0bbd6e": "Ybodychange",
    "c75f97dbc2123f550a1acc64886a8bebf4b888cf": "Yintroduced"
  },
  "changeHistoryDetails": {
    "073c370de2e65fc346b51ef09763ecb30b5cd14f": {
      "type": "Ybodychange",
      "commitMessage": "Pull #4343: moved more variables inside if blocks to reduce execution",
      "commitDate": 1494539783000,
      "commitName": "073c370de2e65fc346b51ef09763ecb30b5cd14f",
      "commitAuthor": "rnveach",
      "commitDateOld": 1494119754000,
      "commitNameOld": "82bc23f45d7d57dfa26d1a1d4ec0f7dfcd88abb2",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 4.86,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n     private void checkComment(DetailAST ast, TextBlock comment) {\n         final List\u003cJavadocTag\u003e tags \u003d getMethodTags(comment);\n \n         if (!hasShortCircuitTag(ast, tags)) {\n-            final Iterator\u003cJavadocTag\u003e it \u003d tags.iterator();\n             if (ast.getType() \u003d\u003d TokenTypes.ANNOTATION_FIELD_DEF) {\n                 checkReturnTag(tags, ast.getLineNo(), true);\n             }\n             else {\n+                final Iterator\u003cJavadocTag\u003e it \u003d tags.iterator();\n                 // Check for inheritDoc\n                 boolean hasInheritDocTag \u003d false;\n                 while (!hasInheritDocTag \u0026\u0026 it.hasNext()) {\n                     hasInheritDocTag \u003d it.next().isInheritDocTag();\n                 }\n                 final boolean reportExpectedTags \u003d !hasInheritDocTag \u0026\u0026 !hasAllowedAnnotations(ast);\n \n                 checkParamTags(tags, ast, reportExpectedTags);\n                 checkThrowsTags(tags, getThrows(ast), reportExpectedTags);\n                 if (CheckUtils.isNonVoidMethod(ast)) {\n                     checkReturnTag(tags, ast.getLineNo(), reportExpectedTags);\n                 }\n             }\n \n             // Dump out all unused tags\n             tags.stream().filter(javadocTag -\u003e !javadocTag.isSeeOrInheritDocTag())\n                 .forEach(javadocTag -\u003e log(javadocTag.getLineNo(), MSG_UNUSED_TAG_GENERAL));\n         }\n     }\n\\ No newline at end of file\n"
    },
    "de022d2434e58dd633fd50a7f9bb50565a8767b5": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3233: Resolve IntelijIdea inspection violations for java8 migration (#3434)\n\n",
      "commitDate": 1473337840000,
      "commitName": "de022d2434e58dd633fd50a7f9bb50565a8767b5",
      "commitAuthor": "Mariia Mykhailova",
      "commitDateOld": 1464356569000,
      "commitNameOld": "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 103.95,
      "commitsBetweenForRepo": 185,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,28 @@\n     private void checkComment(DetailAST ast, TextBlock comment) {\n         final List\u003cJavadocTag\u003e tags \u003d getMethodTags(comment);\n \n         if (!hasShortCircuitTag(ast, tags)) {\n             final Iterator\u003cJavadocTag\u003e it \u003d tags.iterator();\n             if (ast.getType() \u003d\u003d TokenTypes.ANNOTATION_FIELD_DEF) {\n                 checkReturnTag(tags, ast.getLineNo(), true);\n             }\n             else {\n                 // Check for inheritDoc\n                 boolean hasInheritDocTag \u003d false;\n                 while (!hasInheritDocTag \u0026\u0026 it.hasNext()) {\n                     hasInheritDocTag \u003d it.next().isInheritDocTag();\n                 }\n                 final boolean reportExpectedTags \u003d !hasInheritDocTag \u0026\u0026 !hasAllowedAnnotations(ast);\n \n                 checkParamTags(tags, ast, reportExpectedTags);\n                 checkThrowsTags(tags, getThrows(ast), reportExpectedTags);\n                 if (CheckUtils.isNonVoidMethod(ast)) {\n                     checkReturnTag(tags, ast.getLineNo(), reportExpectedTags);\n                 }\n             }\n \n             // Dump out all unused tags\n-            for (JavadocTag javadocTag : tags) {\n-                if (!javadocTag.isSeeOrInheritDocTag()) {\n-                    log(javadocTag.getLineNo(), MSG_UNUSED_TAG_GENERAL);\n-                }\n-            }\n+            tags.stream().filter(javadocTag -\u003e !javadocTag.isSeeOrInheritDocTag())\n+                .forEach(javadocTag -\u003e log(javadocTag.getLineNo(), MSG_UNUSED_TAG_GENERAL));\n         }\n     }\n\\ No newline at end of file\n"
    },
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3143: forbid empty return statements and fixed violations",
      "commitDate": 1464356569000,
      "commitName": "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
      "commitAuthor": "rnveach",
      "commitDateOld": 1464355679000,
      "commitNameOld": "48d32f40d2253fc94792a8841ce604ba1b91255c",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,31 @@\n     private void checkComment(DetailAST ast, TextBlock comment) {\n         final List\u003cJavadocTag\u003e tags \u003d getMethodTags(comment);\n \n-        if (hasShortCircuitTag(ast, tags)) {\n-            return;\n-        }\n-\n-        final Iterator\u003cJavadocTag\u003e it \u003d tags.iterator();\n-        if (ast.getType() \u003d\u003d TokenTypes.ANNOTATION_FIELD_DEF) {\n-            checkReturnTag(tags, ast.getLineNo(), true);\n-        }\n-        else {\n-            // Check for inheritDoc\n-            boolean hasInheritDocTag \u003d false;\n-            while (!hasInheritDocTag \u0026\u0026 it.hasNext()) {\n-                hasInheritDocTag \u003d it.next().isInheritDocTag();\n+        if (!hasShortCircuitTag(ast, tags)) {\n+            final Iterator\u003cJavadocTag\u003e it \u003d tags.iterator();\n+            if (ast.getType() \u003d\u003d TokenTypes.ANNOTATION_FIELD_DEF) {\n+                checkReturnTag(tags, ast.getLineNo(), true);\n             }\n-            final boolean reportExpectedTags \u003d !hasInheritDocTag \u0026\u0026 !hasAllowedAnnotations(ast);\n+            else {\n+                // Check for inheritDoc\n+                boolean hasInheritDocTag \u003d false;\n+                while (!hasInheritDocTag \u0026\u0026 it.hasNext()) {\n+                    hasInheritDocTag \u003d it.next().isInheritDocTag();\n+                }\n+                final boolean reportExpectedTags \u003d !hasInheritDocTag \u0026\u0026 !hasAllowedAnnotations(ast);\n \n-            checkParamTags(tags, ast, reportExpectedTags);\n-            checkThrowsTags(tags, getThrows(ast), reportExpectedTags);\n-            if (CheckUtils.isNonVoidMethod(ast)) {\n-                checkReturnTag(tags, ast.getLineNo(), reportExpectedTags);\n+                checkParamTags(tags, ast, reportExpectedTags);\n+                checkThrowsTags(tags, getThrows(ast), reportExpectedTags);\n+                if (CheckUtils.isNonVoidMethod(ast)) {\n+                    checkReturnTag(tags, ast.getLineNo(), reportExpectedTags);\n+                }\n             }\n-        }\n \n-        // Dump out all unused tags\n-        for (JavadocTag javadocTag : tags) {\n-            if (!javadocTag.isSeeOrInheritDocTag()) {\n-                log(javadocTag.getLineNo(), MSG_UNUSED_TAG_GENERAL);\n+            // Dump out all unused tags\n+            for (JavadocTag javadocTag : tags) {\n+                if (!javadocTag.isSeeOrInheritDocTag()) {\n+                    log(javadocTag.getLineNo(), MSG_UNUSED_TAG_GENERAL);\n+                }\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "1f18d9de9ad3df69b8f648ae078c7246f36ad99d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2869: Allow missing javadoc tags if an allowed annotation is put\n",
      "commitDate": 1455834807000,
      "commitName": "1f18d9de9ad3df69b8f648ae078c7246f36ad99d",
      "commitAuthor": "Vladislav Lisetskiy",
      "commitDateOld": 1453987479000,
      "commitNameOld": "553af5f4c777d513e7ce570dc32cf6d27654e9c4",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 21.38,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,33 @@\n     private void checkComment(DetailAST ast, TextBlock comment) {\n         final List\u003cJavadocTag\u003e tags \u003d getMethodTags(comment);\n \n         if (hasShortCircuitTag(ast, tags)) {\n             return;\n         }\n \n         final Iterator\u003cJavadocTag\u003e it \u003d tags.iterator();\n         if (ast.getType() \u003d\u003d TokenTypes.ANNOTATION_FIELD_DEF) {\n             checkReturnTag(tags, ast.getLineNo(), true);\n         }\n         else {\n             // Check for inheritDoc\n             boolean hasInheritDocTag \u003d false;\n             while (!hasInheritDocTag \u0026\u0026 it.hasNext()) {\n                 hasInheritDocTag \u003d it.next().isInheritDocTag();\n             }\n+            final boolean reportExpectedTags \u003d !hasInheritDocTag \u0026\u0026 !hasAllowedAnnotations(ast);\n \n-            checkParamTags(tags, ast, !hasInheritDocTag);\n-            checkThrowsTags(tags, getThrows(ast), !hasInheritDocTag);\n+            checkParamTags(tags, ast, reportExpectedTags);\n+            checkThrowsTags(tags, getThrows(ast), reportExpectedTags);\n             if (CheckUtils.isNonVoidMethod(ast)) {\n-                checkReturnTag(tags, ast.getLineNo(), !hasInheritDocTag);\n+                checkReturnTag(tags, ast.getLineNo(), reportExpectedTags);\n             }\n         }\n \n         // Dump out all unused tags\n         for (JavadocTag javadocTag : tags) {\n             if (!javadocTag.isSeeOrInheritDocTag()) {\n                 log(javadocTag.getLineNo(), MSG_UNUSED_TAG_GENERAL);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "6ee4a0f805d528cdee03cfc175502d15b5722dab": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2661: Enforce LogicConditionNeedOptimizationCheck of sevntu-checkstyle over Checkstyle source code\n",
      "commitDate": 1450994367000,
      "commitName": "6ee4a0f805d528cdee03cfc175502d15b5722dab",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": 1450903898000,
      "commitNameOld": "2864c10cd45d23b91717299954aaaf41d36a6cb0",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 1.05,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n     private void checkComment(DetailAST ast, TextBlock comment) {\n         final List\u003cJavadocTag\u003e tags \u003d getMethodTags(comment);\n \n         if (hasShortCircuitTag(ast, tags)) {\n             return;\n         }\n \n         final Iterator\u003cJavadocTag\u003e it \u003d tags.iterator();\n         if (ast.getType() \u003d\u003d TokenTypes.ANNOTATION_FIELD_DEF) {\n             checkReturnTag(tags, ast.getLineNo(), true);\n         }\n         else {\n             // Check for inheritDoc\n             boolean hasInheritDocTag \u003d false;\n-            while (it.hasNext() \u0026\u0026 !hasInheritDocTag) {\n+            while (!hasInheritDocTag \u0026\u0026 it.hasNext()) {\n                 hasInheritDocTag \u003d it.next().isInheritDocTag();\n             }\n \n             checkParamTags(tags, ast, !hasInheritDocTag);\n             checkThrowsTags(tags, getThrows(ast), !hasInheritDocTag);\n             if (CheckUtils.isNonVoidMethod(ast)) {\n                 checkReturnTag(tags, ast.getLineNo(), !hasInheritDocTag);\n             }\n         }\n \n         // Dump out all unused tags\n         for (JavadocTag javadocTag : tags) {\n             if (!javadocTag.isSeeOrInheritDocTag()) {\n                 log(javadocTag.getLineNo(), MSG_UNUSED_TAG_GENERAL);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "e2b4e687d7b8f9d6d5e1346d874b90e4567aff81": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2283: rename CheckUtils.isVoidMethod to isNonVoidMethod\n",
      "commitDate": 1444139777000,
      "commitName": "e2b4e687d7b8f9d6d5e1346d874b90e4567aff81",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": 1442618479000,
      "commitNameOld": "483132aca9c35591e1010e51a0ac31d746dc75a6",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 17.61,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n     private void checkComment(DetailAST ast, TextBlock comment) {\n         final List\u003cJavadocTag\u003e tags \u003d getMethodTags(comment);\n \n         if (hasShortCircuitTag(ast, tags)) {\n             return;\n         }\n \n         final Iterator\u003cJavadocTag\u003e it \u003d tags.iterator();\n         if (ast.getType() \u003d\u003d TokenTypes.ANNOTATION_FIELD_DEF) {\n             checkReturnTag(tags, ast.getLineNo(), true);\n         }\n         else {\n             // Check for inheritDoc\n             boolean hasInheritDocTag \u003d false;\n             while (it.hasNext() \u0026\u0026 !hasInheritDocTag) {\n                 hasInheritDocTag \u003d it.next().isInheritDocTag();\n             }\n \n             checkParamTags(tags, ast, !hasInheritDocTag);\n             checkThrowsTags(tags, getThrows(ast), !hasInheritDocTag);\n-            if (CheckUtils.isVoidMethod(ast)) {\n+            if (CheckUtils.isNonVoidMethod(ast)) {\n                 checkReturnTag(tags, ast.getLineNo(), !hasInheritDocTag);\n             }\n         }\n \n         // Dump out all unused tags\n         for (JavadocTag javadocTag : tags) {\n             if (!javadocTag.isSeeOrInheritDocTag()) {\n                 log(javadocTag.getLineNo(), MSG_UNUSED_TAG_GENERAL);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "f7698ed23b365bce680b6ec8cd00b78e148582ac": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2141: Allow @return tags from annotation types\n",
      "commitDate": 1441690643000,
      "commitName": "f7698ed23b365bce680b6ec8cd00b78e148582ac",
      "commitAuthor": "Phillip Webb",
      "commitDateOld": 1441412923000,
      "commitNameOld": "d220d7c3cc74490c7f2923f2ea85d00133afe98c",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 3.21,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,32 @@\n     private void checkComment(DetailAST ast, TextBlock comment) {\n         final List\u003cJavadocTag\u003e tags \u003d getMethodTags(comment);\n \n         if (hasShortCircuitTag(ast, tags)) {\n             return;\n         }\n \n         final Iterator\u003cJavadocTag\u003e it \u003d tags.iterator();\n-        if (ast.getType() !\u003d TokenTypes.ANNOTATION_FIELD_DEF) {\n+        if (ast.getType() \u003d\u003d TokenTypes.ANNOTATION_FIELD_DEF) {\n+            checkReturnTag(tags, ast.getLineNo(), true);\n+        }\n+        else {\n             // Check for inheritDoc\n             boolean hasInheritDocTag \u003d false;\n             while (it.hasNext() \u0026\u0026 !hasInheritDocTag) {\n                 hasInheritDocTag \u003d it.next().isInheritDocTag();\n             }\n \n             checkParamTags(tags, ast, !hasInheritDocTag);\n             checkThrowsTags(tags, getThrows(ast), !hasInheritDocTag);\n             if (CheckUtils.isVoidMethod(ast)) {\n                 checkReturnTag(tags, ast.getLineNo(), !hasInheritDocTag);\n             }\n         }\n \n         // Dump out all unused tags\n         for (JavadocTag javadocTag : tags) {\n             if (!javadocTag.isSeeOrInheritDocTag()) {\n                 log(javadocTag.getLineNo(), MSG_UNUSED_TAG_GENERAL);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "e1a2e66b262be83708d65b7c5f2ba4014c97e384": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1555: Replace while with foreach\n\nFixes `WhileCanBeForeach` inspection violation.\n\nDescription:\n\u003eReports while loops which iterate over collections, and can be replaced with the foreach iteration syntax, which is available in Java 5 and newer.\nThis inspection only reports if the project or module is configured to use a language level of 5.0 or higher.\n",
      "commitDate": 1440942808000,
      "commitName": "e1a2e66b262be83708d65b7c5f2ba4014c97e384",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440912854000,
      "commitNameOld": "e81ca8290b4efd42c3454ffa0159b739f958ea48",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.35,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,29 @@\n     private void checkComment(DetailAST ast, TextBlock comment) {\n         final List\u003cJavadocTag\u003e tags \u003d getMethodTags(comment);\n \n         if (hasShortCircuitTag(ast, tags)) {\n             return;\n         }\n \n         final Iterator\u003cJavadocTag\u003e it \u003d tags.iterator();\n         if (ast.getType() !\u003d TokenTypes.ANNOTATION_FIELD_DEF) {\n             // Check for inheritDoc\n             boolean hasInheritDocTag \u003d false;\n             while (it.hasNext() \u0026\u0026 !hasInheritDocTag) {\n                 hasInheritDocTag \u003d it.next().isInheritDocTag();\n             }\n \n             checkParamTags(tags, ast, !hasInheritDocTag);\n             checkThrowsTags(tags, getThrows(ast), !hasInheritDocTag);\n             if (CheckUtils.isVoidMethod(ast)) {\n                 checkReturnTag(tags, ast.getLineNo(), !hasInheritDocTag);\n             }\n         }\n \n         // Dump out all unused tags\n-        final Iterator\u003cJavadocTag\u003e unusedTagIt \u003d tags.iterator();\n-        while (unusedTagIt.hasNext()) {\n-            final JavadocTag jt \u003d unusedTagIt.next();\n-            if (!jt.isSeeOrInheritDocTag()) {\n-                log(jt.getLineNo(), MSG_UNUSED_TAG_GENERAL);\n+        for (JavadocTag javadocTag : tags) {\n+            if (!javadocTag.isSeeOrInheritDocTag()) {\n+                log(javadocTag.getLineNo(), MSG_UNUSED_TAG_GENERAL);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "e81ca8290b4efd42c3454ffa0159b739f958ea48": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1555: Avoid reuse of local variables\n\nFixes `ReuseOfLocalVariable` inspection violation.\n\nDescription:\n\u003eReports local variables that are \"reused\", overwriting their values with new values unrelated to their original use. Such local variable reuse may be confusing, as the intended semantics of the local variable may vary with each use. It may also be prone to bugs, if code changes result in values that were thought to be overwritten actually being live. It is good practices to keep variable lifetimes as short as possible, and not reuse local variables for the sake of brevity.\n",
      "commitDate": 1440912854000,
      "commitName": "e81ca8290b4efd42c3454ffa0159b739f958ea48",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440826590000,
      "commitNameOld": "ef834b210cc5c7803ef930fcff96219b6b91922d",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 1.0,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n     private void checkComment(DetailAST ast, TextBlock comment) {\n         final List\u003cJavadocTag\u003e tags \u003d getMethodTags(comment);\n \n         if (hasShortCircuitTag(ast, tags)) {\n             return;\n         }\n \n-        Iterator\u003cJavadocTag\u003e it \u003d tags.iterator();\n+        final Iterator\u003cJavadocTag\u003e it \u003d tags.iterator();\n         if (ast.getType() !\u003d TokenTypes.ANNOTATION_FIELD_DEF) {\n             // Check for inheritDoc\n             boolean hasInheritDocTag \u003d false;\n             while (it.hasNext() \u0026\u0026 !hasInheritDocTag) {\n                 hasInheritDocTag \u003d it.next().isInheritDocTag();\n             }\n \n             checkParamTags(tags, ast, !hasInheritDocTag);\n             checkThrowsTags(tags, getThrows(ast), !hasInheritDocTag);\n             if (CheckUtils.isVoidMethod(ast)) {\n                 checkReturnTag(tags, ast.getLineNo(), !hasInheritDocTag);\n             }\n         }\n \n         // Dump out all unused tags\n-        it \u003d tags.iterator();\n-        while (it.hasNext()) {\n-            final JavadocTag jt \u003d it.next();\n+        final Iterator\u003cJavadocTag\u003e unusedTagIt \u003d tags.iterator();\n+        while (unusedTagIt.hasNext()) {\n+            final JavadocTag jt \u003d unusedTagIt.next();\n             if (!jt.isSeeOrInheritDocTag()) {\n                 log(jt.getLineNo(), MSG_UNUSED_TAG_GENERAL);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "a21164df1fbaff36ba020968b3a6128ab8476756": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: Fixed NPathComplexity violation in JavadocMethodCheck\n",
      "commitDate": 1440694468000,
      "commitName": "a21164df1fbaff36ba020968b3a6128ab8476756",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": 1440682230000,
      "commitNameOld": "5b01236f52f59b632659cac386768805f7a9006f",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n     private void checkComment(DetailAST ast, TextBlock comment) {\n         final List\u003cJavadocTag\u003e tags \u003d getMethodTags(comment);\n \n         if (hasShortCircuitTag(ast, tags)) {\n             return;\n         }\n \n         Iterator\u003cJavadocTag\u003e it \u003d tags.iterator();\n         if (ast.getType() !\u003d TokenTypes.ANNOTATION_FIELD_DEF) {\n             // Check for inheritDoc\n             boolean hasInheritDocTag \u003d false;\n             while (it.hasNext() \u0026\u0026 !hasInheritDocTag) {\n                 hasInheritDocTag \u003d it.next().isInheritDocTag();\n             }\n \n             checkParamTags(tags, ast, !hasInheritDocTag);\n             checkThrowsTags(tags, getThrows(ast), !hasInheritDocTag);\n-            if (isFunction(ast)) {\n+            if (CheckUtils.isVoidMethod(ast)) {\n                 checkReturnTag(tags, ast.getLineNo(), !hasInheritDocTag);\n             }\n         }\n \n         // Dump out all unused tags\n         it \u003d tags.iterator();\n         while (it.hasNext()) {\n             final JavadocTag jt \u003d it.next();\n             if (!jt.isSeeOrInheritDocTag()) {\n                 log(jt.getLineNo(), MSG_UNUSED_TAG_GENERAL);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "931af7ec1411aa04b3f0b5d94373a3da43ce7e27": {
      "type": "Ybodychange",
      "commitMessage": "Simplify expressions that are constant. #1555\n\nFixes `ConstantConditions` inspection violations.\n\nDescription:\n\u003eThis inspection analyzes method control and data flow to report possible conditions that are always true or false and expressions whose value is statically proven to be constant.\n",
      "commitDate": 1439697645000,
      "commitName": "931af7ec1411aa04b3f0b5d94373a3da43ce7e27",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1439610129000,
      "commitNameOld": "02dfe8c7c51e9df3ad1d3a391c5293c861c1982f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 1.01,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n     private void checkComment(DetailAST ast, TextBlock comment) {\n         final List\u003cJavadocTag\u003e tags \u003d getMethodTags(comment);\n \n         if (hasShortCircuitTag(ast, tags)) {\n             return;\n         }\n \n         Iterator\u003cJavadocTag\u003e it \u003d tags.iterator();\n         if (ast.getType() !\u003d TokenTypes.ANNOTATION_FIELD_DEF) {\n             // Check for inheritDoc\n             boolean hasInheritDocTag \u003d false;\n             while (it.hasNext() \u0026\u0026 !hasInheritDocTag) {\n-                hasInheritDocTag |\u003d it.next().isInheritDocTag();\n+                hasInheritDocTag \u003d it.next().isInheritDocTag();\n             }\n \n             checkParamTags(tags, ast, !hasInheritDocTag);\n             checkThrowsTags(tags, getThrows(ast), !hasInheritDocTag);\n             if (isFunction(ast)) {\n                 checkReturnTag(tags, ast.getLineNo(), !hasInheritDocTag);\n             }\n         }\n \n         // Dump out all unused tags\n         it \u003d tags.iterator();\n         while (it.hasNext()) {\n             final JavadocTag jt \u003d it.next();\n             if (!jt.isSeeOrInheritDocTag()) {\n                 log(jt.getLineNo(), MSG_UNUSED_TAG_GENERAL);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": 1426023398000,
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1424437366000,
      "commitNameOld": "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 18.36,
      "commitsBetweenForRepo": 96,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n     private void checkComment(DetailAST ast, TextBlock comment)\n     {\n         final List\u003cJavadocTag\u003e tags \u003d getMethodTags(comment);\n \n         if (hasShortCircuitTag(ast, tags)) {\n             return;\n         }\n \n         Iterator\u003cJavadocTag\u003e it \u003d tags.iterator();\n         if (ast.getType() !\u003d TokenTypes.ANNOTATION_FIELD_DEF) {\n             // Check for inheritDoc\n             boolean hasInheritDocTag \u003d false;\n             while (it.hasNext() \u0026\u0026 !hasInheritDocTag) {\n-                hasInheritDocTag |\u003d (it.next()).isInheritDocTag();\n+                hasInheritDocTag |\u003d it.next().isInheritDocTag();\n             }\n \n             checkParamTags(tags, ast, !hasInheritDocTag);\n             checkThrowsTags(tags, getThrows(ast), !hasInheritDocTag);\n             if (isFunction(ast)) {\n                 checkReturnTag(tags, ast.getLineNo(), !hasInheritDocTag);\n             }\n         }\n \n         // Dump out all unused tags\n         it \u003d tags.iterator();\n         while (it.hasNext()) {\n             final JavadocTag jt \u003d it.next();\n             if (!jt.isSeeOrInheritDocTag()) {\n                 log(jt.getLineNo(), MSG_UNUSED_TAG_GENERAL);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, javadoc package, issue #537\n",
      "commitDate": 1424437366000,
      "commitName": "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc",
      "commitAuthor": "alexkravin",
      "commitDateOld": 1424294072000,
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n     private void checkComment(DetailAST ast, TextBlock comment)\n     {\n         final List\u003cJavadocTag\u003e tags \u003d getMethodTags(comment);\n \n         if (hasShortCircuitTag(ast, tags)) {\n             return;\n         }\n \n         Iterator\u003cJavadocTag\u003e it \u003d tags.iterator();\n         if (ast.getType() !\u003d TokenTypes.ANNOTATION_FIELD_DEF) {\n             // Check for inheritDoc\n             boolean hasInheritDocTag \u003d false;\n             while (it.hasNext() \u0026\u0026 !hasInheritDocTag) {\n                 hasInheritDocTag |\u003d (it.next()).isInheritDocTag();\n             }\n \n             checkParamTags(tags, ast, !hasInheritDocTag);\n             checkThrowsTags(tags, getThrows(ast), !hasInheritDocTag);\n             if (isFunction(ast)) {\n                 checkReturnTag(tags, ast.getLineNo(), !hasInheritDocTag);\n             }\n         }\n \n         // Dump out all unused tags\n         it \u003d tags.iterator();\n         while (it.hasNext()) {\n             final JavadocTag jt \u003d it.next();\n             if (!jt.isSeeOrInheritDocTag()) {\n-                log(jt.getLineNo(), \"javadoc.unusedTagGeneral\");\n+                log(jt.getLineNo(), MSG_UNUSED_TAG_GENERAL);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "89a51ba032fd9126651fa9efad31baf10c006ddf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, javadoc, #512\n",
      "commitDate": 1421677262000,
      "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "1d614c3a7ecf8a3ede4df8a50da46e71792d0025": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "poartial fix for #46 - Sonarqube found problems in Checkstyle\n",
      "commitDate": 1386263571000,
      "commitName": "1d614c3a7ecf8a3ede4df8a50da46e71792d0025",
      "commitAuthor": "Ivan Sopov",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d": {
      "type": "Ybodychange",
      "commitMessage": "Start of adding generics.\n",
      "commitDate": 1197694270000,
      "commitName": "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1169909494000,
      "commitNameOld": "1efc394250b8f1c79bd7f8344b738a7d13396ed3",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 321.58,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n     private void checkComment(DetailAST aAST, TextBlock aComment, Scope aScope)\n     {\n-        final List tags \u003d getMethodTags(aComment);\n+        final List\u003cJavadocTag\u003e tags \u003d getMethodTags(aComment);\n \n         if (hasShortCircuitTag(aAST, tags, aScope)) {\n             return;\n         }\n \n-        Iterator it \u003d tags.iterator();\n+        Iterator\u003cJavadocTag\u003e it \u003d tags.iterator();\n         if (aAST.getType() !\u003d TokenTypes.ANNOTATION_FIELD_DEF) {\n             // Check for inheritDoc\n             boolean hasInheritDocTag \u003d false;\n             while (it.hasNext() \u0026\u0026 !hasInheritDocTag) {\n-                hasInheritDocTag |\u003d ((JavadocTag) it.next()).isInheritDocTag();\n+                hasInheritDocTag |\u003d (it.next()).isInheritDocTag();\n             }\n \n             checkParamTags(tags, aAST, !hasInheritDocTag);\n             checkThrowsTags(tags, getThrows(aAST), !hasInheritDocTag);\n             if (isFunction(aAST)) {\n                 checkReturnTag(tags, aAST.getLineNo(), !hasInheritDocTag);\n             }\n         }\n \n         // Dump out all unused tags\n         it \u003d tags.iterator();\n         while (it.hasNext()) {\n-            final JavadocTag jt \u003d (JavadocTag) it.next();\n+            final JavadocTag jt \u003d it.next();\n             if (!jt.isSeeOrInheritDocTag()) {\n                 log(jt.getLineNo(), \"javadoc.unusedTagGeneral\");\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "0a72322796c28266f07df8af6f7e000aa9cf0e48": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Tighten up the allowed use of the {@inheritDoc} tag.\n",
      "commitDate": 1148305756000,
      "commitName": "0a72322796c28266f07df8af6f7e000aa9cf0e48",
      "commitAuthor": "Oliver Burn",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "1aee9d55cc5bd8cca011e17369f6e370efcc85bb": {
      "type": "Ybodychange",
      "commitMessage": "Fixed 1290379 (now JavadomMethod check does not allow single @see tag in javadoc).  NUMBER of javadocs changed to follow new rule.\n",
      "commitDate": 1130786628000,
      "commitName": "1aee9d55cc5bd8cca011e17369f6e370efcc85bb",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1130531388000,
      "commitNameOld": "d3dd0586454d1757c8a188ecb9d2954b244344d4",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 2.95,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     private void checkComment(DetailAST aAST, TextBlock aComment)\n     {\n         final List tags \u003d getMethodTags(aComment);\n \n-        // Check for only one @see or inheritDoc tag\n+        // Check for only one inheritDoc tag\n         if ((tags.size() \u003d\u003d 1)\n-            \u0026\u0026 ((JavadocTag) tags.get(0)).isSeeOrInheritDocTag())\n+            \u0026\u0026 ((JavadocTag) tags.get(0)).isInheritDocTag())\n         {\n             return;\n         }\n \n         Iterator it \u003d tags.iterator();\n         if (aAST.getType() !\u003d TokenTypes.ANNOTATION_FIELD_DEF) {\n             // Check for inheritDoc\n             boolean hasInheritDocTag \u003d false;\n             while (it.hasNext() \u0026\u0026 !hasInheritDocTag) {\n                 hasInheritDocTag |\u003d ((JavadocTag) it.next()).isInheritDocTag();\n             }\n \n             checkParamTags(tags, aAST, !hasInheritDocTag);\n             checkThrowsTags(tags, getThrows(aAST), !hasInheritDocTag);\n             if (isFunction(aAST)) {\n                 checkReturnTag(tags, aAST.getLineNo(), !hasInheritDocTag);\n             }\n         }\n \n         // Dump out all unused tags\n         it \u003d tags.iterator();\n         while (it.hasNext()) {\n             final JavadocTag jt \u003d (JavadocTag) it.next();\n             if (!jt.isSeeOrInheritDocTag()) {\n                 log(jt.getLineNo(), \"javadoc.unusedTagGeneral\");\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "06c32930c34e2b10b5926883c29a4a20fe6ecf05": {
      "type": "Ybodychange",
      "commitMessage": "Fix for 1185501.\n",
      "commitDate": 1118010981000,
      "commitName": "06c32930c34e2b10b5926883c29a4a20fe6ecf05",
      "commitAuthor": "Michael Studman",
      "commitDateOld": 1115830091000,
      "commitNameOld": "e27489c7721909245ea5055eac3b9c7c659081f6",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 25.24,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     private void checkComment(DetailAST aAST, TextBlock aComment)\n     {\n         final List tags \u003d getMethodTags(aComment);\n \n         // Check for only one @see or inheritDoc tag\n         if ((tags.size() \u003d\u003d 1)\n             \u0026\u0026 ((JavadocTag) tags.get(0)).isSeeOrInheritDocTag())\n         {\n             return;\n         }\n \n         Iterator it \u003d tags.iterator();\n         if (aAST.getType() !\u003d TokenTypes.ANNOTATION_FIELD_DEF) {\n             // Check for inheritDoc\n             boolean hasInheritDocTag \u003d false;\n             while (it.hasNext() \u0026\u0026 !hasInheritDocTag) {\n                 hasInheritDocTag |\u003d ((JavadocTag) it.next()).isInheritDocTag();\n             }\n \n-            checkParamTags(tags, getParameters(aAST), !hasInheritDocTag);\n+            checkParamTags(tags, aAST, !hasInheritDocTag);\n             checkThrowsTags(tags, getThrows(aAST), !hasInheritDocTag);\n             if (isFunction(aAST)) {\n                 checkReturnTag(tags, aAST.getLineNo(), !hasInheritDocTag);\n             }\n         }\n \n         // Dump out all unused tags\n         it \u003d tags.iterator();\n         while (it.hasNext()) {\n             final JavadocTag jt \u003d (JavadocTag) it.next();\n             if (!jt.isSeeOrInheritDocTag()) {\n                 log(jt.getLineNo(), \"javadoc.unusedTagGeneral\");\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "6125beffc437f970eae276b4a6542265c6547784": {
      "type": "Ybodychange",
      "commitMessage": "Initial Java 1.5 support\n",
      "commitDate": 1096311350000,
      "commitName": "6125beffc437f970eae276b4a6542265c6547784",
      "commitAuthor": "Michael Studman",
      "commitDateOld": 1080421817000,
      "commitNameOld": "cdf0ac0f4c4fb8ab63c4bb7d144a71682c6e400a",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 183.91,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,36 @@\n     private void checkComment(DetailAST aAST, TextBlock aComment)\n     {\n         final List tags \u003d getMethodTags(aComment);\n \n         // Check for only one @see or inheritDoc tag\n         if ((tags.size() \u003d\u003d 1)\n             \u0026\u0026 ((JavadocTag) tags.get(0)).isSeeOrInheritDocTag())\n         {\n             return;\n         }\n \n-        // Check for inheritDoc\n-        boolean hasInheritDocTag \u003d false;\n         Iterator it \u003d tags.iterator();\n-        while (it.hasNext() \u0026\u0026 !hasInheritDocTag) {\n-            hasInheritDocTag |\u003d\n-                ((JavadocTag) it.next()).isInheritDocTag();\n-        }\n+        if (aAST.getType() !\u003d TokenTypes.ANNOTATION_FIELD_DEF) {\n+            // Check for inheritDoc\n+            boolean hasInheritDocTag \u003d false;\n+            while (it.hasNext() \u0026\u0026 !hasInheritDocTag) {\n+                hasInheritDocTag |\u003d\n+                    ((JavadocTag) it.next()).isInheritDocTag();\n+            }\n \n-        checkParamTags(tags, getParameters(aAST), !hasInheritDocTag);\n-        checkThrowsTags(tags, getThrows(aAST), !hasInheritDocTag);\n-        if (isFunction(aAST)) {\n-            checkReturnTag(tags, aAST.getLineNo(), !hasInheritDocTag);\n+            checkParamTags(tags, getParameters(aAST), !hasInheritDocTag);\n+            checkThrowsTags(tags, getThrows(aAST), !hasInheritDocTag);\n+            if (isFunction(aAST)) {\n+                checkReturnTag(tags, aAST.getLineNo(), !hasInheritDocTag);\n+            }\n         }\n \n         // Dump out all unused tags\n         it \u003d tags.iterator();\n         while (it.hasNext()) {\n             final JavadocTag jt \u003d (JavadocTag) it.next();\n             if (!jt.isSeeOrInheritDocTag()) {\n                 log(jt.getLineNo(), \"javadoc.unusedTagGeneral\");\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "72be23f288369fdd9e562999bb9b0e2ff646c897": {
      "type": "Ybodychange",
      "commitMessage": "Fix for 855839 - JavadocMethod does not correctly treat {@inheritDoc}.\n",
      "commitDate": 1070909885000,
      "commitName": "72be23f288369fdd9e562999bb9b0e2ff646c897",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1069656302000,
      "commitNameOld": "8fb2acd39b7db6223486f5e06126c7f0a2642a72",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 14.51,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,34 @@\n     private void checkComment(DetailAST aAST, TextBlock aComment)\n     {\n         final List tags \u003d getMethodTags(aComment);\n-        // Check for only one @see tag\n-        if ((tags.size() !\u003d 1)\n-            || !((JavadocTag) tags.get(0)).isSeeOrInheritDocTag())\n-        {\n-            checkParamTags(tags, getParameters(aAST));\n-            checkThrowsTags(tags, getThrows(aAST));\n-            if (isFunction(aAST)) {\n-                checkReturnTag(tags, aAST.getLineNo());\n-            }\n \n-            // Dump out all unused tags\n-            final Iterator it \u003d tags.iterator();\n-            while (it.hasNext()) {\n-                final JavadocTag jt \u003d (JavadocTag) it.next();\n-                if (!jt.isSeeOrInheritDocTag()) {\n-                    log(jt.getLineNo(), \"javadoc.unusedTagGeneral\");\n-                }\n+        // Check for only one @see or inheritDoc tag\n+        if ((tags.size() \u003d\u003d 1)\n+            \u0026\u0026 ((JavadocTag) tags.get(0)).isSeeOrInheritDocTag())\n+        {\n+            return;\n+        }\n+\n+        // Check for inheritDoc\n+        boolean hasInheritDocTag \u003d false;\n+        Iterator it \u003d tags.iterator();\n+        while (it.hasNext() \u0026\u0026 !hasInheritDocTag) {\n+            hasInheritDocTag |\u003d\n+                ((JavadocTag) it.next()).isInheritDocTag();\n+        }\n+\n+        checkParamTags(tags, getParameters(aAST), !hasInheritDocTag);\n+        checkThrowsTags(tags, getThrows(aAST), !hasInheritDocTag);\n+        if (isFunction(aAST)) {\n+            checkReturnTag(tags, aAST.getLineNo(), !hasInheritDocTag);\n+        }\n+\n+        // Dump out all unused tags\n+        it \u003d tags.iterator();\n+        while (it.hasNext()) {\n+            final JavadocTag jt \u003d (JavadocTag) it.next();\n+            if (!jt.isSeeOrInheritDocTag()) {\n+                log(jt.getLineNo(), \"javadoc.unusedTagGeneral\");\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "8fb2acd39b7db6223486f5e06126c7f0a2642a72": {
      "type": "Yparameterchange",
      "commitMessage": "replaced Comment class with TextBlock interface, Comment is now a package private implementation\n",
      "commitDate": 1069656302000,
      "commitName": "8fb2acd39b7db6223486f5e06126c7f0a2642a72",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": 1069576421000,
      "commitNameOld": "24ba45a971569b9702e6bf78c5c07c48beb25464",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 0.92,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n-    private void checkComment(DetailAST aAST, Comment aComment)\n+    private void checkComment(DetailAST aAST, TextBlock aComment)\n     {\n         final List tags \u003d getMethodTags(aComment);\n         // Check for only one @see tag\n         if ((tags.size() !\u003d 1)\n             || !((JavadocTag) tags.get(0)).isSeeOrInheritDocTag())\n         {\n             checkParamTags(tags, getParameters(aAST));\n             checkThrowsTags(tags, getThrows(aAST));\n             if (isFunction(aAST)) {\n                 checkReturnTag(tags, aAST.getLineNo());\n             }\n \n             // Dump out all unused tags\n             final Iterator it \u003d tags.iterator();\n             while (it.hasNext()) {\n                 final JavadocTag jt \u003d (JavadocTag) it.next();\n                 if (!jt.isSeeOrInheritDocTag()) {\n                     log(jt.getLineNo(), \"javadoc.unusedTagGeneral\");\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "24ba45a971569b9702e6bf78c5c07c48beb25464": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Fix for ArrayIndexOutOfBounds in JavadocStyle (bug 841942 )\n",
      "commitDate": 1069576421000,
      "commitName": "24ba45a971569b9702e6bf78c5c07c48beb25464",
      "commitAuthor": "Oleg Sukhodolsky",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "04ac5dd87c11a2bf7b908b45bbca7933382df515": {
      "type": "Yfilerename",
      "commitMessage": "Moving another Javadoc check to see what is involved.\nA suprisingly small amount. Love the Eclipse refactoring\nsupport having the smarts to do the CVS operations.\n",
      "commitDate": 1054648289000,
      "commitName": "04ac5dd87c11a2bf7b908b45bbca7933382df515",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1054647239000,
      "commitNameOld": "2ef6dc6a43ede89c5b5b9091dee83e1e58bb5edc",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "8e55d5c09147620f59461387d45d09c2bc0bbd6e": {
      "type": "Ybodychange",
      "commitMessage": "Support the {@inheritDoc} tag.\n",
      "commitDate": 1039435977000,
      "commitName": "8e55d5c09147620f59461387d45d09c2bc0bbd6e",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1039071020000,
      "commitNameOld": "d91d78bc0f5863756c334c8d2afdf74447cfd4ae",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 4.22,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     private void checkComment(DetailAST aAST, String[] aComment)\n     {\n         final List tags \u003d getMethodTags(aComment, aAST.getLineNo() - 1);\n         // Check for only one @see tag\n         if ((tags.size() !\u003d 1)\n-            || !((JavadocTag) tags.get(0)).isSeeTag())\n+            || !((JavadocTag) tags.get(0)).isSeeOrInheritDocTag())\n         {\n             checkParamTags(tags, getParameters(aAST));\n             checkThrowsTags(tags, getThrows(aAST));\n             if (isFunction(aAST)) {\n                 checkReturnTag(tags, aAST.getLineNo());\n             }\n \n             // Dump out all unused tags\n             final Iterator it \u003d tags.iterator();\n             while (it.hasNext()) {\n                 final JavadocTag jt \u003d (JavadocTag) it.next();\n-                if (!jt.isSeeTag()) {\n+                if (!jt.isSeeOrInheritDocTag()) {\n                     log(jt.getLineNo(), \"javadoc.unusedTagGeneral\");\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "c75f97dbc2123f550a1acc64886a8bebf4b888cf": {
      "type": "Yintroduced",
      "commitMessage": "Javadoc method check\n",
      "commitDate": 1036501994000,
      "commitName": "c75f97dbc2123f550a1acc64886a8bebf4b888cf",
      "commitAuthor": "Rick Giles"
    }
  }
}