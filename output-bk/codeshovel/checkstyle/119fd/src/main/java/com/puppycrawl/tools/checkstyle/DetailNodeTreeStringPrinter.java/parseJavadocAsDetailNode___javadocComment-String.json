{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "DetailNodeTreeStringPrinter.java",
  "functionName": "parseJavadocAsDetailNode",
  "functionId": "parseJavadocAsDetailNode___javadocComment-String",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinter.java",
  "functionStartLine": 79,
  "functionEndLine": 82,
  "changeHistory": [
    "9b383e05bb3b14318c5ec5794ba2df0952a30f8a",
    "9bfb89589b1880e8753a11c1faa75be09f12a9ce",
    "68b49fd2843f23f55dc711a89213d59f2acf3a0a",
    "77733a452387aa2ee99fdc9a737633566cc7af3d",
    "f65b17cbc30795247fef3077cce16a8bb53e9ffc",
    "44cc8b53c90117295151ea6723f859287f51dda5",
    "61f8aaca7bcb8750909bcc95eb5c27c72c7d824d",
    "1891ca16af1e1b296f1ca4b0f0dc164dadc75e3f",
    "2a77329c4f45c42b1e9f49773522349193f83338",
    "66d73fe6189267fee3423e2e8d7fc2d68599a43f",
    "2c41aaf844d3206775c0a8c9e78aabf3a6d85a36",
    "89a51ba032fd9126651fa9efad31baf10c006ddf",
    "be6a7ca77be3de342656ec381aaa02b89da252d4",
    "5c481899d4cfcb8369dcd0851aef21c2d8c5088a",
    "2e1382c5bb1aa61cc01d7958a589e2a3831f56b5"
  ],
  "changeHistoryShort": {
    "9b383e05bb3b14318c5ec5794ba2df0952a30f8a": "Ybodychange",
    "9bfb89589b1880e8753a11c1faa75be09f12a9ce": "Ybodychange",
    "68b49fd2843f23f55dc711a89213d59f2acf3a0a": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yparameterchange)",
    "77733a452387aa2ee99fdc9a737633566cc7af3d": "Ybodychange",
    "f65b17cbc30795247fef3077cce16a8bb53e9ffc": "Ybodychange",
    "44cc8b53c90117295151ea6723f859287f51dda5": "Ybodychange",
    "61f8aaca7bcb8750909bcc95eb5c27c72c7d824d": "Ybodychange",
    "1891ca16af1e1b296f1ca4b0f0dc164dadc75e3f": "Ybodychange",
    "2a77329c4f45c42b1e9f49773522349193f83338": "Ybodychange",
    "66d73fe6189267fee3423e2e8d7fc2d68599a43f": "Ybodychange",
    "2c41aaf844d3206775c0a8c9e78aabf3a6d85a36": "Ybodychange",
    "89a51ba032fd9126651fa9efad31baf10c006ddf": "Ymultichange(Yparameterchange,Ybodychange)",
    "be6a7ca77be3de342656ec381aaa02b89da252d4": "Ybodychange",
    "5c481899d4cfcb8369dcd0851aef21c2d8c5088a": "Ybodychange",
    "2e1382c5bb1aa61cc01d7958a589e2a3831f56b5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9b383e05bb3b14318c5ec5794ba2df0952a30f8a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4785: Method createBlockCommentNode was created in CommonUtils\n",
      "commitDate": 1508521220000,
      "commitName": "9b383e05bb3b14318c5ec5794ba2df0952a30f8a",
      "commitAuthor": "Turkin Ivan",
      "commitDateOld": 1508336382000,
      "commitNameOld": "b16aef991830dd1fce1ce2640af7e7db8b329d86",
      "commitAuthorOld": "Artem Dudkin",
      "daysBetweenCommits": 2.14,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,4 +1,4 @@\n     private static DetailNode parseJavadocAsDetailNode(String javadocComment) {\n-        final DetailAST blockComment \u003d createFakeBlockComment(javadocComment);\n+        final DetailAST blockComment \u003d CommonUtils.createBlockCommentNode(javadocComment);\n         return parseJavadocAsDetailNode(blockComment);\n     }\n\\ No newline at end of file\n"
    },
    "9bfb89589b1880e8753a11c1faa75be09f12a9ce": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3219: CLI Javadoc tree printer can print parse errors (#3224)",
      "commitDate": 1464440345000,
      "commitName": "9bfb89589b1880e8753a11c1faa75be09f12a9ce",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": 1462710857000,
      "commitNameOld": "67e6b46e9fa424fbd0a2fba611a3a59b30727692",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 20.02,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,5 +1,4 @@\n     private static DetailNode parseJavadocAsDetailNode(String javadocComment) {\n-        final JavadocDetailNodeParser parser \u003d new JavadocDetailNodeParser();\n-        return parser.parseJavadocAsDetailNode(createFakeBlockComment(javadocComment))\n-                .getTree();\n+        final DetailAST blockComment \u003d createFakeBlockComment(javadocComment);\n+        return parseJavadocAsDetailNode(blockComment);\n     }\n\\ No newline at end of file\n"
    },
    "68b49fd2843f23f55dc711a89213d59f2acf3a0a": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "Issue #652: New CLI option to print Javadoc comment parse tree\n",
      "commitDate": 1458220789000,
      "commitName": "68b49fd2843f23f55dc711a89213d59f2acf3a0a",
      "commitAuthor": "Baratali Izmailov",
      "subchanges": [
        "Ymovefromfile",
        "Yreturntypechange",
        "Ymodifierchange",
        "Ybodychange",
        "Yparameterchange"
      ]
    },
    "77733a452387aa2ee99fdc9a737633566cc7af3d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2836: renamed error message fields to match standard naming",
      "commitDate": 1453387259000,
      "commitName": "77733a452387aa2ee99fdc9a737633566cc7af3d",
      "commitAuthor": "rnveach",
      "commitDateOld": 1451953543000,
      "commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 16.59,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n     private ParseStatus parseJavadocAsDetailNode(DetailAST javadocCommentAst) {\n         final String javadocComment \u003d JavadocUtils.getJavadocCommentContent(javadocCommentAst);\n \n         // Use a new error listener each time to be able to use\n         // one check instance for multiple files to be checked\n         // without getting side effects.\n         errorListener \u003d new DescriptiveErrorListener();\n \n         // Log messages should have line number in scope of file,\n         // not in scope of Javadoc comment.\n         // Offset is line number of beginning of Javadoc comment.\n         errorListener.setOffset(javadocCommentAst.getLineNo() - 1);\n \n         final ParseStatus result \u003d new ParseStatus();\n \n         try {\n             final ParseTree parseTree \u003d parseJavadocAsParseTree(javadocComment);\n \n             final DetailNode tree \u003d convertParseTreeToDetailNode(parseTree);\n             result.setTree(tree);\n         }\n         catch (ParseCancellationException ex) {\n             // If syntax error occurs then message is printed by error listener\n             // and parser throws this runtime exception to stop parsing.\n             // Just stop processing current Javadoc comment.\n             ParseErrorMessage parseErrorMessage \u003d errorListener.getErrorMessage();\n \n             // There are cases when antlr error listener does not handle syntax error\n             if (parseErrorMessage \u003d\u003d null) {\n                 parseErrorMessage \u003d new ParseErrorMessage(javadocCommentAst.getLineNo(),\n-                        UNRECOGNIZED_ANTLR_ERROR_MESSAGE_KEY,\n+                        MSG_KEY_UNRECOGNIZED_ANTLR_ERROR,\n                         javadocCommentAst.getColumnNo(), ex.getMessage());\n             }\n \n             result.setParseErrorMessage(parseErrorMessage);\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "f65b17cbc30795247fef3077cce16a8bb53e9ffc": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2616: Fix CatchParameterName check violations in Checkstyle code\n",
      "commitDate": 1449184604000,
      "commitName": "f65b17cbc30795247fef3077cce16a8bb53e9ffc",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1445226754000,
      "commitNameOld": "44cc8b53c90117295151ea6723f859287f51dda5",
      "commitAuthorOld": "Bj√∂rn Kautler",
      "daysBetweenCommits": 45.81,
      "commitsBetweenForRepo": 231,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n     private ParseStatus parseJavadocAsDetailNode(DetailAST javadocCommentAst) {\n         final String javadocComment \u003d JavadocUtils.getJavadocCommentContent(javadocCommentAst);\n \n         // Use a new error listener each time to be able to use\n         // one check instance for multiple files to be checked\n         // without getting side effects.\n         errorListener \u003d new DescriptiveErrorListener();\n \n         // Log messages should have line number in scope of file,\n         // not in scope of Javadoc comment.\n         // Offset is line number of beginning of Javadoc comment.\n         errorListener.setOffset(javadocCommentAst.getLineNo() - 1);\n \n         final ParseStatus result \u003d new ParseStatus();\n \n         try {\n             final ParseTree parseTree \u003d parseJavadocAsParseTree(javadocComment);\n \n             final DetailNode tree \u003d convertParseTreeToDetailNode(parseTree);\n             result.setTree(tree);\n         }\n-        catch (ParseCancellationException e) {\n+        catch (ParseCancellationException ex) {\n             // If syntax error occurs then message is printed by error listener\n             // and parser throws this runtime exception to stop parsing.\n             // Just stop processing current Javadoc comment.\n             ParseErrorMessage parseErrorMessage \u003d errorListener.getErrorMessage();\n \n             // There are cases when antlr error listener does not handle syntax error\n             if (parseErrorMessage \u003d\u003d null) {\n                 parseErrorMessage \u003d new ParseErrorMessage(javadocCommentAst.getLineNo(),\n                         UNRECOGNIZED_ANTLR_ERROR_MESSAGE_KEY,\n-                        javadocCommentAst.getColumnNo(), e.getMessage());\n+                        javadocCommentAst.getColumnNo(), ex.getMessage());\n             }\n \n             result.setParseErrorMessage(parseErrorMessage);\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "44cc8b53c90117295151ea6723f859287f51dda5": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2326: Fix reusability of JavaDoc checks\n",
      "commitDate": 1445226754000,
      "commitName": "44cc8b53c90117295151ea6723f859287f51dda5",
      "commitAuthor": "Bj√∂rn Kautler",
      "commitDateOld": 1445008123000,
      "commitNameOld": "61f8aaca7bcb8750909bcc95eb5c27c72c7d824d",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 2.53,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,39 @@\n     private ParseStatus parseJavadocAsDetailNode(DetailAST javadocCommentAst) {\n         final String javadocComment \u003d JavadocUtils.getJavadocCommentContent(javadocCommentAst);\n \n+        // Use a new error listener each time to be able to use\n+        // one check instance for multiple files to be checked\n+        // without getting side effects.\n+        errorListener \u003d new DescriptiveErrorListener();\n+\n         // Log messages should have line number in scope of file,\n         // not in scope of Javadoc comment.\n         // Offset is line number of beginning of Javadoc comment.\n         errorListener.setOffset(javadocCommentAst.getLineNo() - 1);\n \n         final ParseStatus result \u003d new ParseStatus();\n \n         try {\n             final ParseTree parseTree \u003d parseJavadocAsParseTree(javadocComment);\n \n             final DetailNode tree \u003d convertParseTreeToDetailNode(parseTree);\n             result.setTree(tree);\n         }\n         catch (ParseCancellationException e) {\n             // If syntax error occurs then message is printed by error listener\n             // and parser throws this runtime exception to stop parsing.\n             // Just stop processing current Javadoc comment.\n             ParseErrorMessage parseErrorMessage \u003d errorListener.getErrorMessage();\n \n             // There are cases when antlr error listener does not handle syntax error\n             if (parseErrorMessage \u003d\u003d null) {\n                 parseErrorMessage \u003d new ParseErrorMessage(javadocCommentAst.getLineNo(),\n                         UNRECOGNIZED_ANTLR_ERROR_MESSAGE_KEY,\n                         javadocCommentAst.getColumnNo(), e.getMessage());\n             }\n \n             result.setParseErrorMessage(parseErrorMessage);\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "61f8aaca7bcb8750909bcc95eb5c27c72c7d824d": {
      "type": "Ybodychange",
      "commitMessage": "minor: refactoring to minimize scope of variables\n",
      "commitDate": 1445008123000,
      "commitName": "61f8aaca7bcb8750909bcc95eb5c27c72c7d824d",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": 1444349669000,
      "commitNameOld": "1891ca16af1e1b296f1ca4b0f0dc164dadc75e3f",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 7.62,
      "commitsBetweenForRepo": 75,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,34 @@\n     private ParseStatus parseJavadocAsDetailNode(DetailAST javadocCommentAst) {\n         final String javadocComment \u003d JavadocUtils.getJavadocCommentContent(javadocCommentAst);\n \n         // Log messages should have line number in scope of file,\n         // not in scope of Javadoc comment.\n         // Offset is line number of beginning of Javadoc comment.\n         errorListener.setOffset(javadocCommentAst.getLineNo() - 1);\n \n         final ParseStatus result \u003d new ParseStatus();\n-        ParseTree parseTree \u003d null;\n-        ParseErrorMessage parseErrorMessage \u003d null;\n \n         try {\n-            parseTree \u003d parseJavadocAsParseTree(javadocComment);\n+            final ParseTree parseTree \u003d parseJavadocAsParseTree(javadocComment);\n+\n+            final DetailNode tree \u003d convertParseTreeToDetailNode(parseTree);\n+            result.setTree(tree);\n         }\n         catch (ParseCancellationException e) {\n             // If syntax error occurs then message is printed by error listener\n             // and parser throws this runtime exception to stop parsing.\n             // Just stop processing current Javadoc comment.\n-            parseErrorMessage \u003d errorListener.getErrorMessage();\n+            ParseErrorMessage parseErrorMessage \u003d errorListener.getErrorMessage();\n \n             // There are cases when antlr error listener does not handle syntax error\n             if (parseErrorMessage \u003d\u003d null) {\n                 parseErrorMessage \u003d new ParseErrorMessage(javadocCommentAst.getLineNo(),\n                         UNRECOGNIZED_ANTLR_ERROR_MESSAGE_KEY,\n                         javadocCommentAst.getColumnNo(), e.getMessage());\n             }\n-        }\n \n-        if (parseErrorMessage \u003d\u003d null) {\n-            final DetailNode tree \u003d convertParseTreeToDetailNode(parseTree);\n-            result.setTree(tree);\n-        }\n-        else {\n             result.setParseErrorMessage(parseErrorMessage);\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "1891ca16af1e1b296f1ca4b0f0dc164dadc75e3f": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"Issue #46: Exception logging has been added.\"\n\nThis reverts commit 2a77329c4f45c42b1e9f49773522349193f83338.\n",
      "commitDate": 1444349669000,
      "commitName": "1891ca16af1e1b296f1ca4b0f0dc164dadc75e3f",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": 1444349554000,
      "commitNameOld": "a75c64efe39a5c4391faf8ec2fba07ae76411a0e",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,39 @@\n     private ParseStatus parseJavadocAsDetailNode(DetailAST javadocCommentAst) {\n         final String javadocComment \u003d JavadocUtils.getJavadocCommentContent(javadocCommentAst);\n \n         // Log messages should have line number in scope of file,\n         // not in scope of Javadoc comment.\n         // Offset is line number of beginning of Javadoc comment.\n         errorListener.setOffset(javadocCommentAst.getLineNo() - 1);\n \n         final ParseStatus result \u003d new ParseStatus();\n         ParseTree parseTree \u003d null;\n         ParseErrorMessage parseErrorMessage \u003d null;\n \n         try {\n             parseTree \u003d parseJavadocAsParseTree(javadocComment);\n         }\n         catch (ParseCancellationException e) {\n-            LOG.error(\"Syntax error occurs during javadoc parsing.\", e);\n             // If syntax error occurs then message is printed by error listener\n             // and parser throws this runtime exception to stop parsing.\n             // Just stop processing current Javadoc comment.\n             parseErrorMessage \u003d errorListener.getErrorMessage();\n \n             // There are cases when antlr error listener does not handle syntax error\n             if (parseErrorMessage \u003d\u003d null) {\n                 parseErrorMessage \u003d new ParseErrorMessage(javadocCommentAst.getLineNo(),\n                         UNRECOGNIZED_ANTLR_ERROR_MESSAGE_KEY,\n                         javadocCommentAst.getColumnNo(), e.getMessage());\n             }\n         }\n \n         if (parseErrorMessage \u003d\u003d null) {\n             final DetailNode tree \u003d convertParseTreeToDetailNode(parseTree);\n             result.setTree(tree);\n         }\n         else {\n             result.setParseErrorMessage(parseErrorMessage);\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "2a77329c4f45c42b1e9f49773522349193f83338": {
      "type": "Ybodychange",
      "commitMessage": "Issue #46: Exception logging has been added.\n",
      "commitDate": 1444344707000,
      "commitName": "2a77329c4f45c42b1e9f49773522349193f83338",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": 1443275797000,
      "commitNameOld": "ed89c9edb524243b0df61e83a5ac0930f070e6d7",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 12.37,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,40 @@\n     private ParseStatus parseJavadocAsDetailNode(DetailAST javadocCommentAst) {\n         final String javadocComment \u003d JavadocUtils.getJavadocCommentContent(javadocCommentAst);\n \n         // Log messages should have line number in scope of file,\n         // not in scope of Javadoc comment.\n         // Offset is line number of beginning of Javadoc comment.\n         errorListener.setOffset(javadocCommentAst.getLineNo() - 1);\n \n         final ParseStatus result \u003d new ParseStatus();\n         ParseTree parseTree \u003d null;\n         ParseErrorMessage parseErrorMessage \u003d null;\n \n         try {\n             parseTree \u003d parseJavadocAsParseTree(javadocComment);\n         }\n         catch (ParseCancellationException e) {\n+            LOG.error(\"Syntax error occurs during javadoc parsing.\", e);\n             // If syntax error occurs then message is printed by error listener\n             // and parser throws this runtime exception to stop parsing.\n             // Just stop processing current Javadoc comment.\n             parseErrorMessage \u003d errorListener.getErrorMessage();\n \n             // There are cases when antlr error listener does not handle syntax error\n             if (parseErrorMessage \u003d\u003d null) {\n                 parseErrorMessage \u003d new ParseErrorMessage(javadocCommentAst.getLineNo(),\n                         UNRECOGNIZED_ANTLR_ERROR_MESSAGE_KEY,\n                         javadocCommentAst.getColumnNo(), e.getMessage());\n             }\n         }\n \n         if (parseErrorMessage \u003d\u003d null) {\n             final DetailNode tree \u003d convertParseTreeToDetailNode(parseTree);\n             result.setTree(tree);\n         }\n         else {\n             result.setParseErrorMessage(parseErrorMessage);\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "66d73fe6189267fee3423e2e8d7fc2d68599a43f": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: MemberName and MethodName violations fixed\n",
      "commitDate": 1439560811000,
      "commitName": "66d73fe6189267fee3423e2e8d7fc2d68599a43f",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": 1439356761000,
      "commitNameOld": "3bd699bd593414d63c7139aa410f13ec8341a027",
      "commitAuthorOld": "Ruslan Diachenko",
      "daysBetweenCommits": 2.36,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n     private ParseStatus parseJavadocAsDetailNode(DetailAST javadocCommentAst) {\n         final String javadocComment \u003d JavadocUtils.getJavadocCommentContent(javadocCommentAst);\n \n         // Log messages should have line number in scope of file,\n         // not in scope of Javadoc comment.\n         // Offset is line number of beginning of Javadoc comment.\n         errorListener.setOffset(javadocCommentAst.getLineNo() - 1);\n \n         final ParseStatus result \u003d new ParseStatus();\n         ParseTree parseTree \u003d null;\n         ParseErrorMessage parseErrorMessage \u003d null;\n \n         try {\n             parseTree \u003d parseJavadocAsParseTree(javadocComment);\n         }\n         catch (ParseCancellationException e) {\n             // If syntax error occurs then message is printed by error listener\n             // and parser throws this runtime exception to stop parsing.\n             // Just stop processing current Javadoc comment.\n             parseErrorMessage \u003d errorListener.getErrorMessage();\n \n             // There are cases when antlr error listener does not handle syntax error\n             if (parseErrorMessage \u003d\u003d null) {\n                 parseErrorMessage \u003d new ParseErrorMessage(javadocCommentAst.getLineNo(),\n                         UNRECOGNIZED_ANTLR_ERROR_MESSAGE_KEY,\n                         javadocCommentAst.getColumnNo(), e.getMessage());\n             }\n         }\n \n         if (parseErrorMessage \u003d\u003d null) {\n-            final DetailNode tree \u003d convertParseTree2DetailNode(parseTree);\n+            final DetailNode tree \u003d convertParseTreeToDetailNode(parseTree);\n             result.setTree(tree);\n         }\n         else {\n             result.setParseErrorMessage(parseErrorMessage);\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "2c41aaf844d3206775c0a8c9e78aabf3a6d85a36": {
      "type": "Ybodychange",
      "commitMessage": "Improve test coverage in AbstractJavadocCheck. #1308\n",
      "commitDate": 1438432158000,
      "commitName": "2c41aaf844d3206775c0a8c9e78aabf3a6d85a36",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1436405647000,
      "commitNameOld": "e10364f313b887a6af19b3f63f2c5d671a453c63",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 23.45,
      "commitsBetweenForRepo": 249,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,39 @@\n     private ParseStatus parseJavadocAsDetailNode(DetailAST javadocCommentAst) {\n         final String javadocComment \u003d JavadocUtils.getJavadocCommentContent(javadocCommentAst);\n \n         // Log messages should have line number in scope of file,\n         // not in scope of Javadoc comment.\n         // Offset is line number of beginning of Javadoc comment.\n         errorListener.setOffset(javadocCommentAst.getLineNo() - 1);\n \n         final ParseStatus result \u003d new ParseStatus();\n         ParseTree parseTree \u003d null;\n         ParseErrorMessage parseErrorMessage \u003d null;\n \n         try {\n             parseTree \u003d parseJavadocAsParseTree(javadocComment);\n         }\n-        catch (IOException e) {\n-            // Antlr can not initiate its ANTLRInputStream\n-            parseErrorMessage \u003d new ParseErrorMessage(javadocCommentAst.getLineNo(),\n-                    PARSE_ERROR_MESSAGE_KEY,\n-                    javadocCommentAst.getColumnNo(), e.getMessage());\n-        }\n         catch (ParseCancellationException e) {\n             // If syntax error occurs then message is printed by error listener\n             // and parser throws this runtime exception to stop parsing.\n             // Just stop processing current Javadoc comment.\n             parseErrorMessage \u003d errorListener.getErrorMessage();\n \n             // There are cases when antlr error listener does not handle syntax error\n             if (parseErrorMessage \u003d\u003d null) {\n                 parseErrorMessage \u003d new ParseErrorMessage(javadocCommentAst.getLineNo(),\n                         UNRECOGNIZED_ANTLR_ERROR_MESSAGE_KEY,\n                         javadocCommentAst.getColumnNo(), e.getMessage());\n             }\n         }\n \n         if (parseErrorMessage \u003d\u003d null) {\n             final DetailNode tree \u003d convertParseTree2DetailNode(parseTree);\n             result.setTree(tree);\n         }\n         else {\n             result.setParseErrorMessage(parseErrorMessage);\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "89a51ba032fd9126651fa9efad31baf10c006ddf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, javadoc, #512\n",
      "commitDate": 1421677262000,
      "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "be6a7ca77be3de342656ec381aaa02b89da252d4": {
      "type": "Ybodychange",
      "commitMessage": "Create ParseErrorMessage if error message is null. Added comments for a few methods.\n",
      "commitDate": 1416874953000,
      "commitName": "be6a7ca77be3de342656ec381aaa02b89da252d4",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": 1416497981000,
      "commitNameOld": "5c481899d4cfcb8369dcd0851aef21c2d8c5088a",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 4.36,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,46 @@\n     private ParseStatus parseJavadocAsDetailNode(DetailAST aJavadocCommentAst)\n     {\n         final String javadocComment \u003d JavadocUtils.getJavadocCommentContent(aJavadocCommentAst);\n \n         // Log messages should have line number in scope of file,\n         // not in scope of Javadoc comment.\n         // Offset is line number of beginning of Javadoc comment.\n         mErrorListener.setOffset(aJavadocCommentAst.getLineNo() - 1);\n \n         final ParseStatus result \u003d new ParseStatus();\n         ParseTree parseTree \u003d null;\n         ParseErrorMessage parseErrorMessage \u003d null;\n \n         try {\n             parseTree \u003d parseJavadocAsParseTree(javadocComment);\n         }\n         catch (IOException e) {\n             // Antlr can not initiate its ANTLRInputStream\n             parseErrorMessage \u003d new ParseErrorMessage(aJavadocCommentAst.getLineNo(),\n-                    \"javadoc.parse.error\",\n+                    PARSE_ERROR_MESSAGE_KEY,\n                     aJavadocCommentAst.getColumnNo(), e.getMessage());\n         }\n         catch (ParseCancellationException e) {\n             // If syntax error occurs then message is printed by error listener\n             // and parser throws this runtime exception to stop parsing.\n             // Just stop processing current Javadoc comment.\n             parseErrorMessage \u003d mErrorListener.getErrorMessage();\n+\n+            // There are cases when antlr error listener does not handle syntax error\n+            if (parseErrorMessage \u003d\u003d null) {\n+                parseErrorMessage \u003d new ParseErrorMessage(aJavadocCommentAst.getLineNo(),\n+                        UNRECOGNIZED_ANTLR_ERROR_MESSAGE_KEY,\n+                        aJavadocCommentAst.getColumnNo(), e.getMessage());\n+            }\n         }\n \n         if (parseErrorMessage \u003d\u003d null) {\n             final DetailNode tree \u003d convertParseTree2DetailNode(parseTree);\n             result.setTree(tree);\n         }\n         else {\n             result.setParseErrorMessage(parseErrorMessage);\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "5c481899d4cfcb8369dcd0851aef21c2d8c5088a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #371. Fixed NumberFormatException while logging in AbstractJavadocCheck\n",
      "commitDate": 1416497981000,
      "commitName": "5c481899d4cfcb8369dcd0851aef21c2d8c5088a",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": 1415718326000,
      "commitNameOld": "7b6785343e306845f432154a1a5026ad25306226",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 9.02,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n     private ParseStatus parseJavadocAsDetailNode(DetailAST aJavadocCommentAst)\n     {\n         final String javadocComment \u003d JavadocUtils.getJavadocCommentContent(aJavadocCommentAst);\n \n         // Log messages should have line number in scope of file,\n         // not in scope of Javadoc comment.\n         // Offset is line number of beginning of Javadoc comment.\n         mErrorListener.setOffset(aJavadocCommentAst.getLineNo() - 1);\n \n         final ParseStatus result \u003d new ParseStatus();\n         ParseTree parseTree \u003d null;\n-        LocalizedMessage parseErrorMessage \u003d null;\n+        ParseErrorMessage parseErrorMessage \u003d null;\n \n         try {\n             parseTree \u003d parseJavadocAsParseTree(javadocComment);\n         }\n         catch (IOException e) {\n             // Antlr can not initiate its ANTLRInputStream\n-            parseErrorMessage \u003d createLogMessage(aJavadocCommentAst.getLineNo(),\n+            parseErrorMessage \u003d new ParseErrorMessage(aJavadocCommentAst.getLineNo(),\n                     \"javadoc.parse.error\",\n                     aJavadocCommentAst.getColumnNo(), e.getMessage());\n         }\n         catch (ParseCancellationException e) {\n             // If syntax error occurs then message is printed by error listener\n             // and parser throws this runtime exception to stop parsing.\n             // Just stop processing current Javadoc comment.\n             parseErrorMessage \u003d mErrorListener.getErrorMessage();\n         }\n \n         if (parseErrorMessage \u003d\u003d null) {\n             final DetailNode tree \u003d convertParseTree2DetailNode(parseTree);\n             result.setTree(tree);\n         }\n         else {\n             result.setParseErrorMessage(parseErrorMessage);\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n"
    },
    "2e1382c5bb1aa61cc01d7958a589e2a3831f56b5": {
      "type": "Yintroduced",
      "commitMessage": "Issue #49. Caching DetailNode trees in AbstractJavadocCheck\n",
      "commitDate": 1415399075000,
      "commitName": "2e1382c5bb1aa61cc01d7958a589e2a3831f56b5",
      "commitAuthor": "Baratali Izmailov"
    }
  }
}