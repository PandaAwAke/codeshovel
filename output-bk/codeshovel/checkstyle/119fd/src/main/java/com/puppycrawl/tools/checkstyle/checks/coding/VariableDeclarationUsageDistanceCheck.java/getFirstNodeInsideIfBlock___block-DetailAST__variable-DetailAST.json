{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "VariableDeclarationUsageDistanceCheck.java",
  "functionName": "getFirstNodeInsideIfBlock",
  "functionId": "getFirstNodeInsideIfBlock___block-DetailAST__variable-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java",
  "functionStartLine": 626,
  "functionEndLine": 674,
  "changeHistory": [
    "4c078ba710068498ca513ce115993e30dab4562a",
    "ff5cbc39c4882b3a3dcdbedcad9393e170148725",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
    "c4e886312aae13b6cfadceed25b1b8aec18d4a96"
  ],
  "changeHistoryShort": {
    "4c078ba710068498ca513ce115993e30dab4562a": "Ymodifierchange",
    "ff5cbc39c4882b3a3dcdbedcad9393e170148725": "Ybodychange",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": "Ymultichange(Yparameterchange,Ybodychange)",
    "c4e886312aae13b6cfadceed25b1b8aec18d4a96": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4c078ba710068498ca513ce115993e30dab4562a": {
      "type": "Ymodifierchange",
      "commitMessage": "Make \"private\" methods \"static\" where possible. #46\n\nSonarQube rule: [\"private\" methods that don\u0027t access instance data should be \"static\"](http://nemo.sonarqube.org/coding_rules#rule_key\u003dsquid%3AS2325).\n\nRationale: private methods that don\u0027t access instance data can be static to prevent any misunderstanding about the contract of the method.\n",
      "commitDate": 1437195084000,
      "commitName": "4c078ba710068498ca513ce115993e30dab4562a",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1431863229000,
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 61.71,
      "commitsBetweenForRepo": 387,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n-    private DetailAST getFirstNodeInsideIfBlock(\n+    private static DetailAST getFirstNodeInsideIfBlock(\n             DetailAST block, DetailAST variable) {\n         DetailAST firstNodeInsideBlock \u003d null;\n \n         if (!isVariableInOperatorExpr(block, variable)) {\n             DetailAST currentNode \u003d block.getLastChild();\n             final List\u003cDetailAST\u003e variableUsageExpressions \u003d\n                     new ArrayList\u003c\u003e();\n \n             while (currentNode !\u003d null\n                     \u0026\u0026 currentNode.getType() \u003d\u003d TokenTypes.LITERAL_ELSE) {\n                 final DetailAST previousNode \u003d\n                         currentNode.getPreviousSibling();\n \n                 // Checking variable usage inside IF block.\n                 if (isChild(previousNode, variable)) {\n                     variableUsageExpressions.add(previousNode);\n                 }\n \n                 // Looking into ELSE block, get its first child and analyze it.\n                 currentNode \u003d currentNode.getFirstChild();\n \n                 if (currentNode.getType() \u003d\u003d TokenTypes.LITERAL_IF) {\n                     currentNode \u003d currentNode.getLastChild();\n                 }\n                 else if (isChild(currentNode, variable)) {\n                     variableUsageExpressions.add(currentNode);\n                     currentNode \u003d null;\n                 }\n             }\n \n             // If IF block doesn\u0027t include ELSE than analyze variable usage\n             // only inside IF block.\n             if (currentNode !\u003d null\n                     \u0026\u0026 isChild(currentNode, variable)) {\n                 variableUsageExpressions.add(currentNode);\n             }\n \n             // If variable usage exists in several related blocks, then\n             // firstNodeInsideBlock \u003d null, otherwise if variable usage exists\n             // only inside one block, then get node from\n             // variableUsageExpressions.\n             if (variableUsageExpressions.size() \u003d\u003d 1) {\n                 firstNodeInsideBlock \u003d variableUsageExpressions.get(0);\n             }\n         }\n \n         return firstNodeInsideBlock;\n     }\n\\ No newline at end of file\n"
    },
    "ff5cbc39c4882b3a3dcdbedcad9393e170148725": {
      "type": "Ybodychange",
      "commitMessage": "Replace verbose type arguments with diamond type \u003c\u003e\n\nThis syntax is not supported under Java 6 or earlier, but Checkstyle codebase uses Java 7 already.\n",
      "commitDate": 1424017336000,
      "commitName": "ff5cbc39c4882b3a3dcdbedcad9393e170148725",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1423431987000,
      "commitNameOld": "abe2b200312ee72aa552026b1a34e8bd72bfdc4e",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 6.77,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n     private DetailAST getFirstNodeInsideIfBlock(\n             DetailAST block, DetailAST variable)\n     {\n         DetailAST firstNodeInsideBlock \u003d null;\n \n         if (!isVariableInOperatorExpr(block, variable)) {\n             DetailAST currentNode \u003d block.getLastChild();\n             final List\u003cDetailAST\u003e variableUsageExpressions \u003d\n-                    new ArrayList\u003cDetailAST\u003e();\n+                    new ArrayList\u003c\u003e();\n \n             while (currentNode !\u003d null\n                     \u0026\u0026 currentNode.getType() \u003d\u003d TokenTypes.LITERAL_ELSE)\n             {\n                 final DetailAST previousNode \u003d\n                         currentNode.getPreviousSibling();\n \n                 // Checking variable usage inside IF block.\n                 if (isChild(previousNode, variable)) {\n                     variableUsageExpressions.add(previousNode);\n                 }\n \n                 // Looking into ELSE block, get its first child and analyze it.\n                 currentNode \u003d currentNode.getFirstChild();\n \n                 if (currentNode.getType() \u003d\u003d TokenTypes.LITERAL_IF) {\n                     currentNode \u003d currentNode.getLastChild();\n                 }\n                 else if (isChild(currentNode, variable)) {\n                     variableUsageExpressions.add(currentNode);\n                     currentNode \u003d null;\n                 }\n             }\n \n             // If IF block doesn\u0027t include ELSE than analyze variable usage\n             // only inside IF block.\n             if (currentNode !\u003d null\n                     \u0026\u0026 isChild(currentNode, variable))\n             {\n                 variableUsageExpressions.add(currentNode);\n             }\n \n             // If variable usage exists in several related blocks, then\n             // firstNodeInsideBlock \u003d null, otherwise if variable usage exists\n             // only inside one block, then get node from\n             // variableUsageExpressions.\n             if (variableUsageExpressions.size() \u003d\u003d 1) {\n                 firstNodeInsideBlock \u003d variableUsageExpressions.get(0);\n             }\n         }\n \n         return firstNodeInsideBlock;\n     }\n\\ No newline at end of file\n"
    },
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, coding, #512\n",
      "commitDate": 1421677214000,
      "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "c4e886312aae13b6cfadceed25b1b8aec18d4a96": {
      "type": "Yintroduced",
      "commitMessage": "VariableDeclarationUsageDistanceCheck was imported #223\n",
      "commitDate": 1407390645000,
      "commitName": "c4e886312aae13b6cfadceed25b1b8aec18d4a96",
      "commitAuthor": "Max"
    }
  }
}