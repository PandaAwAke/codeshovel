{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "RegexpHeaderCheck.java",
  "functionName": "postProcessHeaderLines",
  "functionId": "postProcessHeaderLines",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheck.java",
  "functionStartLine": 152,
  "functionEndLine": 165,
  "changeHistory": [
    "acd37a5e5f7e46edf98d03403442e321675de468",
    "ce21086e087661553f3a774c38362327ee88996a",
    "b4bbea4c05f785ff41cad65475886dd960172aa4",
    "cb5a59fc6baf5de204e3cc99be6ba9865e44350a",
    "4fd298b00126d60147dce7631c6e0d3e0921f82f",
    "ebd4afdebe8ee09c0e6c7d1239e2ca982f87e51c",
    "29027109bf962f47b6a6000fdca69b5679ce4b43",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "b83c9aceef9577eaada5cfd78bc7b2cd04a176d1",
    "bf16d371dab210594755d04afc4697269ed088c0",
    "2a96f3f8909df111882e075196adc2f1545e23f6",
    "6f1f7bd3fdcca84404e97964b3e48de6db5024ec"
  ],
  "changeHistoryShort": {
    "acd37a5e5f7e46edf98d03403442e321675de468": "Ybodychange",
    "ce21086e087661553f3a774c38362327ee88996a": "Ybodychange",
    "b4bbea4c05f785ff41cad65475886dd960172aa4": "Ybodychange",
    "cb5a59fc6baf5de204e3cc99be6ba9865e44350a": "Yrename",
    "4fd298b00126d60147dce7631c6e0d3e0921f82f": "Ybodychange",
    "ebd4afdebe8ee09c0e6c7d1239e2ca982f87e51c": "Ybodychange",
    "29027109bf962f47b6a6000fdca69b5679ce4b43": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "b83c9aceef9577eaada5cfd78bc7b2cd04a176d1": "Ymovefromfile",
    "bf16d371dab210594755d04afc4697269ed088c0": "Ybodychange",
    "2a96f3f8909df111882e075196adc2f1545e23f6": "Ybodychange",
    "6f1f7bd3fdcca84404e97964b3e48de6db5024ec": "Yintroduced"
  },
  "changeHistoryDetails": {
    "acd37a5e5f7e46edf98d03403442e321675de468": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4401: increase coverage of pitest-checks-header profile to 100%\n",
      "commitDate": 1500732617000,
      "commitName": "acd37a5e5f7e46edf98d03403442e321675de468",
      "commitAuthor": "vasilyeva",
      "commitDateOld": 1499716651000,
      "commitNameOld": "0c2abadbb7f2887f31011157d62edf40bea131c3",
      "commitAuthorOld": "Timur",
      "daysBetweenCommits": 11.76,
      "commitsBetweenForRepo": 66,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,14 @@\n     protected void postProcessHeaderLines() {\n         final List\u003cString\u003e headerLines \u003d getHeaderLines();\n-        headerRegexps.clear();\n         for (String line : headerLines) {\n             try {\n                 headerRegexps.add(Pattern.compile(line));\n             }\n             catch (final PatternSyntaxException ex) {\n                 throw new IllegalArgumentException(\"line \"\n                         + (headerRegexps.size() + 1)\n                         + \" in header specification\"\n                         + \" is not a regular expression\", ex);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "ce21086e087661553f3a774c38362327ee88996a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3763: Try to avoid non-jdk runtime exceptions in code\n",
      "commitDate": 1488165925000,
      "commitName": "ce21086e087661553f3a774c38362327ee88996a",
      "commitAuthor": "Vladislav Lisetskii",
      "commitDateOld": 1485527514000,
      "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 30.54,
      "commitsBetweenForRepo": 104,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n     protected void postProcessHeaderLines() {\n         final List\u003cString\u003e headerLines \u003d getHeaderLines();\n         headerRegexps.clear();\n         for (String line : headerLines) {\n             try {\n                 headerRegexps.add(Pattern.compile(line));\n             }\n             catch (final PatternSyntaxException ex) {\n-                throw new ConversionException(\"line \"\n+                throw new IllegalArgumentException(\"line \"\n                         + (headerRegexps.size() + 1)\n                         + \" in header specification\"\n                         + \" is not a regular expression\", ex);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "b4bbea4c05f785ff41cad65475886dd960172aa4": {
      "type": "Ybodychange",
      "commitMessage": "Issue #996: PMD violations PreserveStackTrace\n",
      "commitDate": 1444266326000,
      "commitName": "b4bbea4c05f785ff41cad65475886dd960172aa4",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": 1444178762000,
      "commitNameOld": "30c3a362d45721e6925fe89ba71f0fe69d0fc471",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.01,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n     protected void postProcessHeaderLines() {\n         final List\u003cString\u003e headerLines \u003d getHeaderLines();\n         headerRegexps.clear();\n         for (String line : headerLines) {\n             try {\n                 headerRegexps.add(Pattern.compile(line));\n             }\n-            catch (final PatternSyntaxException ignored) {\n+            catch (final PatternSyntaxException ex) {\n                 throw new ConversionException(\"line \"\n                         + (headerRegexps.size() + 1)\n                         + \" in header specification\"\n-                        + \" is not a regular expression\");\n+                        + \" is not a regular expression\", ex);\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "cb5a59fc6baf5de204e3cc99be6ba9865e44350a": {
      "type": "Yrename",
      "commitMessage": "Fix typos in blocks, headers and filters packages. #1555\n\nFixes some `SpellCheckingInspection` inspection violations.\n\nDescription:\n\u003eSpellchecker inspection helps locate typos and misspelling in your code, comments and literals.\n",
      "commitDate": 1440739668000,
      "commitName": "cb5a59fc6baf5de204e3cc99be6ba9865e44350a",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440677821000,
      "commitNameOld": "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 0.72,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n-    protected void postprocessHeaderLines() {\n+    protected void postProcessHeaderLines() {\n         final List\u003cString\u003e headerLines \u003d getHeaderLines();\n         headerRegexps.clear();\n         for (String line : headerLines) {\n             try {\n                 headerRegexps.add(Pattern.compile(line));\n             }\n             catch (final PatternSyntaxException ignored) {\n                 throw new ConversionException(\"line \"\n                         + (headerRegexps.size() + 1)\n                         + \" in header specification\"\n                         + \" is not a regular expression\");\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "4fd298b00126d60147dce7631c6e0d3e0921f82f": {
      "type": "Ybodychange",
      "commitMessage": "Rename ignored catch parameters. #1555\n\nFixes `UnusedCatchParameter` inspection violations.\n\nDescription:\nReports any catch parameters that are unused in their corresponding blocks. This inspection will not report any catch parameters named \"ignore\" or \"ignored\". Conversely this inspection will warn on any catch parameters named \"ignore\" or \"ignored\" that are actually used.\n",
      "commitDate": 1439011061000,
      "commitName": "4fd298b00126d60147dce7631c6e0d3e0921f82f",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1438566537000,
      "commitNameOld": "693e8820d5a9fefebb8a3fb1661e5fbcb4432cfd",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 5.14,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n     protected void postprocessHeaderLines() {\n         final List\u003cString\u003e headerLines \u003d getHeaderLines();\n         headerRegexps.clear();\n         for (String line : headerLines) {\n             try {\n                 headerRegexps.add(Pattern.compile(line));\n             }\n-            catch (final PatternSyntaxException ex) {\n+            catch (final PatternSyntaxException ignored) {\n                 throw new ConversionException(\"line \"\n                         + (headerRegexps.size() + 1)\n                         + \" in header specification\"\n                         + \" is not a regular expression\");\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "ebd4afdebe8ee09c0e6c7d1239e2ca982f87e51c": {
      "type": "Ybodychange",
      "commitMessage": "Deleted cache from Utils class + unified setters with patterns\n\nIssue #845\n",
      "commitDate": 1427492342000,
      "commitName": "ebd4afdebe8ee09c0e6c7d1239e2ca982f87e51c",
      "commitAuthor": "Damian Szczepanik",
      "commitDateOld": 1426454536000,
      "commitNameOld": "1c15b6a36baa68dc3f2ebdf9baac131e98bb9e04",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 12.01,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,16 @@\n     protected void postprocessHeaderLines()\n     {\n         final List\u003cString\u003e headerLines \u003d getHeaderLines();\n         headerRegexps.clear();\n         for (String line : headerLines) {\n             try {\n-                // TODO: Not sure if cache in Utils is still necessary\n-                headerRegexps.add(Utils.getPattern(line));\n+                headerRegexps.add(Pattern.compile(line));\n             }\n             catch (final PatternSyntaxException ex) {\n                 throw new ConversionException(\"line \"\n                         + (headerRegexps.size() + 1)\n                         + \" in header specification\"\n                         + \" is not a regular expression\");\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "29027109bf962f47b6a6000fdca69b5679ce4b43": {
      "type": "Ybodychange",
      "commitMessage": "Prefixes, header, #512\n",
      "commitDate": 1421678132000,
      "commitName": "29027109bf962f47b6a6000fdca69b5679ce4b43",
      "commitAuthor": "alexkravin",
      "commitDateOld": 1420821881000,
      "commitNameOld": "dcb3029c008907edf6aa4b59a51349f0ca94f54b",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 9.91,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n     protected void postprocessHeaderLines()\n     {\n         final List\u003cString\u003e headerLines \u003d getHeaderLines();\n-        mHeaderRegexps.clear();\n+        headerRegexps.clear();\n         for (String line : headerLines) {\n             try {\n                 // TODO: Not sure if cache in Utils is still necessary\n-                mHeaderRegexps.add(Utils.getPattern(line));\n+                headerRegexps.add(Utils.getPattern(line));\n             }\n             catch (final PatternSyntaxException ex) {\n                 throw new ConversionException(\"line \"\n-                        + (mHeaderRegexps.size() + 1)\n+                        + (headerRegexps.size() + 1)\n                         + \" in header specification\"\n                         + \" is not a regular expression\");\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "b83c9aceef9577eaada5cfd78bc7b2cd04a176d1": {
      "type": "Ymovefromfile",
      "commitMessage": "Simplified the code by removing HeaderInfo classes, they were introduced to avoid code duplication between header checks in two separate inheritance trees (Java Check vs. FileSetCheck). Now that we have only FileSetChecks as Header checks, this delegation is no longer necessary.\n",
      "commitDate": 1233868969000,
      "commitName": "b83c9aceef9577eaada5cfd78bc7b2cd04a176d1",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": 1231647012000,
      "commitNameOld": "9cff1673f1d42910c654e0af5365d68591f104f0",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 25.72,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "bf16d371dab210594755d04afc4697269ed088c0": {
      "type": "Ybodychange",
      "commitMessage": "converting the header checks to be fileset based.\n",
      "commitDate": 1226831412000,
      "commitName": "bf16d371dab210594755d04afc4697269ed088c0",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1200352313000,
      "commitNameOld": "315033ff5647ef9896130573d9212fee6fe141db",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 306.47,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,17 @@\n     protected void postprocessHeaderLines()\n     {\n-        final String[] headerLines \u003d getHeaderLines();\n-        if (headerLines !\u003d null) {\n-            mHeaderRegexps \u003d new Pattern[headerLines.length];\n-            for (int i \u003d 0; i \u003c headerLines.length; i++) {\n-                try {\n-                    // TODO: Not sure if cache in Utils is still necessary\n-                    mHeaderRegexps[i] \u003d Utils.getPattern(headerLines[i]);\n-                }\n-                catch (final PatternSyntaxException ex) {\n-                    throw new ConversionException(\n-                            \"line \" + (i + 1) + \" in header specification\"\n-                            + \" is not a regular expression\");\n-                }\n+        final List\u003cString\u003e headerLines \u003d getHeaderLines();\n+        mHeaderRegexps.clear();\n+        for (String line : headerLines) {\n+            try {\n+                // TODO: Not sure if cache in Utils is still necessary\n+                mHeaderRegexps.add(Utils.getPattern(line));\n+            }\n+            catch (final PatternSyntaxException ex) {\n+                throw new ConversionException(\"line \"\n+                        + (mHeaderRegexps.size() + 1)\n+                        + \" in header specification\"\n+                        + \" is not a regular expression\");\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "2a96f3f8909df111882e075196adc2f1545e23f6": {
      "type": "Ybodychange",
      "commitMessage": "Fixed 1455575 - RegexpHeader reports wrong line number\n",
      "commitDate": 1162072025000,
      "commitName": "2a96f3f8909df111882e075196adc2f1545e23f6",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1161290108000,
      "commitNameOld": "6f1f7bd3fdcca84404e97964b3e48de6db5024ec",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 9.05,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n     protected void postprocessHeaderLines()\n     {\n         final String[] headerLines \u003d getHeaderLines();\n         if (headerLines !\u003d null) {\n             mHeaderRegexps \u003d new Pattern[headerLines.length];\n             for (int i \u003d 0; i \u003c headerLines.length; i++) {\n                 try {\n                     // TODO: Not sure if cache in Utils is still necessary\n                     mHeaderRegexps[i] \u003d Utils.getPattern(headerLines[i]);\n                 }\n                 catch (final PatternSyntaxException ex) {\n                     throw new ConversionException(\n-                            \"line \" + i + \" in header specification\"\n+                            \"line \" + (i + 1) + \" in header specification\"\n                             + \" is not a regular expression\");\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n"
    },
    "6f1f7bd3fdcca84404e97964b3e48de6db5024ec": {
      "type": "Yintroduced",
      "commitMessage": "Added CrossLanguageRegexpHeaderCheck. This involved some refactorings to avoid duplicate code, so lots of files are affected\n- moved AbstractHeaderCheck to header package\n- moved file extension filtering code to Utils, so it\u0027s available not only from FileSetChecks\n- moved regexp header checking logic to RegexpHeaderChecker bean\n- moved check initialization logic and parameter checking to HeaderInfo classes\n",
      "commitDate": 1161290108000,
      "commitName": "6f1f7bd3fdcca84404e97964b3e48de6db5024ec",
      "commitAuthor": "Lars Kühne"
    }
  }
}