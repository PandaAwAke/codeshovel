{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "ClassResolver.java",
  "functionName": "resolve",
  "functionId": "resolve___name-String__currentClass-String",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/ClassResolver.java",
  "functionStartLine": 73,
  "functionEndLine": 100,
  "changeHistory": [
    "867d73b9aa6daa46a1cc4e2645eec3d3c57fbf7d",
    "16f91dda1a15e0e3c3d7142a159f17db72c06d0f",
    "32a7a3336096bed0a09491493c257924037715f7",
    "e81ca8290b4efd42c3454ffa0159b739f958ea48",
    "085ce12db0983590844ccc24ea49f91686a30ed8",
    "084809c3b9e0d039c818cc4d8c5e640ea9e26525",
    "d734bff020d3525c811a0b273021a5ac5665ade8",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
    "08638b5f739d9929698860048c052da2d5f80209",
    "dfbaeedf8bc0d68b55699b79ed0d8ff094e444f0",
    "c977c274a7de782889fc83531a3f58ec0fadfad8",
    "1ac7fc3f8fc856547085bcc88e17fd1f4bbe0ddd",
    "5d7063c660b241bce251f1a8c89394619f2791fb",
    "d86a9de35b58eeed409ed9fc3cbef252fda4cb84",
    "e5f09c7fd2b5115bd164a5ed4f0a5e376c2dc2d7",
    "04ac5dd87c11a2bf7b908b45bbca7933382df515",
    "5fc3ff2bfbed94f88e1af95f38e970a832e4dbe6",
    "c75f97dbc2123f550a1acc64886a8bebf4b888cf"
  ],
  "changeHistoryShort": {
    "867d73b9aa6daa46a1cc4e2645eec3d3c57fbf7d": "Ybodychange",
    "16f91dda1a15e0e3c3d7142a159f17db72c06d0f": "Yfilerename",
    "32a7a3336096bed0a09491493c257924037715f7": "Ybodychange",
    "e81ca8290b4efd42c3454ffa0159b739f958ea48": "Ybodychange",
    "085ce12db0983590844ccc24ea49f91686a30ed8": "Ybodychange",
    "084809c3b9e0d039c818cc4d8c5e640ea9e26525": "Ybodychange",
    "d734bff020d3525c811a0b273021a5ac5665ade8": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1": "Ybodychange",
    "08638b5f739d9929698860048c052da2d5f80209": "Ymultichange(Yreturntypechange,Ybodychange)",
    "dfbaeedf8bc0d68b55699b79ed0d8ff094e444f0": "Ybodychange",
    "c977c274a7de782889fc83531a3f58ec0fadfad8": "Ybodychange",
    "1ac7fc3f8fc856547085bcc88e17fd1f4bbe0ddd": "Ymultichange(Yparameterchange,Ybodychange)",
    "5d7063c660b241bce251f1a8c89394619f2791fb": "Ybodychange",
    "d86a9de35b58eeed409ed9fc3cbef252fda4cb84": "Ybodychange",
    "e5f09c7fd2b5115bd164a5ed4f0a5e376c2dc2d7": "Ybodychange",
    "04ac5dd87c11a2bf7b908b45bbca7933382df515": "Ymodifierchange",
    "5fc3ff2bfbed94f88e1af95f38e970a832e4dbe6": "Ybodychange",
    "c75f97dbc2123f550a1acc64886a8bebf4b888cf": "Yintroduced"
  },
  "changeHistoryDetails": {
    "867d73b9aa6daa46a1cc4e2645eec3d3c57fbf7d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5546: Explicitly throw ClassNotFoundException from ClassResolver.resolve\n",
      "commitDate": 1519657087000,
      "commitName": "867d73b9aa6daa46a1cc4e2645eec3d3c57fbf7d",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": 1515079236000,
      "commitNameOld": "90f20e09869c71eb22190ad9c1d46d5deec324a5",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 52.98,
      "commitsBetweenForRepo": 83,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,28 @@\n     public Class\u003c?\u003e resolve(String name, String currentClass)\n             throws ClassNotFoundException {\n         // See if the class is full qualified\n         Class\u003c?\u003e clazz \u003d resolveQualifiedName(name);\n         if (clazz \u003d\u003d null) {\n             // try matching explicit imports\n             clazz \u003d resolveMatchingExplicitImport(name);\n \n             if (clazz \u003d\u003d null) {\n                 // See if in the package\n                 clazz \u003d resolveInPackage(name);\n \n                 if (clazz \u003d\u003d null) {\n                     // see if inner class of this class\n                     clazz \u003d resolveInnerClass(name, currentClass);\n \n                     if (clazz \u003d\u003d null) {\n                         clazz \u003d resolveByStarImports(name);\n                         // -@cs[NestedIfDepth] it is better to have single return point from method\n                         if (clazz \u003d\u003d null) {\n-                            // Giving up, the type is unknown, so load the class to generate an\n-                            // exception\n-                            clazz \u003d safeLoad(name);\n+                            throw new ClassNotFoundException(name);\n                         }\n                     }\n                 }\n             }\n         }\n         return clazz;\n     }\n\\ No newline at end of file\n"
    },
    "16f91dda1a15e0e3c3d7142a159f17db72c06d0f": {
      "type": "Yfilerename",
      "commitMessage": "Issue #4676: move AbstractTypeAwareCheck and ClassResolver to javadoc\n",
      "commitDate": 1501987881000,
      "commitName": "16f91dda1a15e0e3c3d7142a159f17db72c06d0f",
      "commitAuthor": "rnveach",
      "commitDateOld": 1501985382000,
      "commitNameOld": "6cdae0ff01b436cfe387d18b5e1206c6f078376b",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "32a7a3336096bed0a09491493c257924037715f7": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3628: ReturnCountExtendedCheck from sevntu is enabled, all violations are resolved\n",
      "commitDate": 1481412313000,
      "commitName": "32a7a3336096bed0a09491493c257924037715f7",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": 1473886714000,
      "commitNameOld": "25a37e5049b7816b34c552899841a978efc37a63",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 87.1,
      "commitsBetweenForRepo": 149,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,30 @@\n     public Class\u003c?\u003e resolve(String name, String currentClass)\n             throws ClassNotFoundException {\n         // See if the class is full qualified\n         Class\u003c?\u003e clazz \u003d resolveQualifiedName(name);\n-        if (clazz !\u003d null) {\n-            return clazz;\n-        }\n+        if (clazz \u003d\u003d null) {\n+            // try matching explicit imports\n+            clazz \u003d resolveMatchingExplicitImport(name);\n \n-        // try matching explicit imports\n-        for (String imp : imports) {\n-            // Very important to add the \".\" in the check below. Otherwise you\n-            // when checking for \"DataException\", it will match on\n-            // \"SecurityDataException\". This has been the cause of a very\n-            // difficult bug to resolve!\n-            if (imp.endsWith(PERIOD + name)) {\n-                clazz \u003d resolveQualifiedName(imp);\n-                if (clazz !\u003d null) {\n-                    return clazz;\n+            if (clazz \u003d\u003d null) {\n+                // See if in the package\n+                clazz \u003d resolveInPackage(name);\n+\n+                if (clazz \u003d\u003d null) {\n+                    // see if inner class of this class\n+                    clazz \u003d resolveInnerClass(name, currentClass);\n+\n+                    if (clazz \u003d\u003d null) {\n+                        clazz \u003d resolveByStarImports(name);\n+                        // -@cs[NestedIfDepth] it is better to have single return point from method\n+                        if (clazz \u003d\u003d null) {\n+                            // Giving up, the type is unknown, so load the class to generate an\n+                            // exception\n+                            clazz \u003d safeLoad(name);\n+                        }\n+                    }\n                 }\n-\n             }\n         }\n-\n-        // See if in the package\n-        if (pkg !\u003d null \u0026\u0026 !pkg.isEmpty()) {\n-            final Class\u003c?\u003e classFromQualifiedName \u003d resolveQualifiedName(pkg + PERIOD + name);\n-            if (classFromQualifiedName !\u003d null) {\n-                return classFromQualifiedName;\n-            }\n-        }\n-\n-        // see if inner class of this class\n-        final Class\u003c?\u003e innerClass \u003d resolveInnerClass(name, currentClass);\n-        if (innerClass !\u003d null) {\n-            return innerClass;\n-        }\n-\n-        final Class\u003c?\u003e classFromStarImport \u003d resolveByStarImports(name);\n-        if (classFromStarImport !\u003d null) {\n-            return classFromStarImport;\n-        }\n-\n-        // Giving up, the type is unknown, so load the class to generate an\n-        // exception\n-        return safeLoad(name);\n+        return clazz;\n     }\n\\ No newline at end of file\n"
    },
    "e81ca8290b4efd42c3454ffa0159b739f958ea48": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1555: Avoid reuse of local variables\n\nFixes `ReuseOfLocalVariable` inspection violation.\n\nDescription:\n\u003eReports local variables that are \"reused\", overwriting their values with new values unrelated to their original use. Such local variable reuse may be confusing, as the intended semantics of the local variable may vary with each use. It may also be prone to bugs, if code changes result in values that were thought to be overwritten actually being live. It is good practices to keep variable lifetimes as short as possible, and not reuse local variables for the sake of brevity.\n",
      "commitDate": 1440912854000,
      "commitName": "e81ca8290b4efd42c3454ffa0159b739f958ea48",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440543609000,
      "commitNameOld": "085ce12db0983590844ccc24ea49f91686a30ed8",
      "commitAuthorOld": "Ruslan Diachenko",
      "daysBetweenCommits": 4.27,
      "commitsBetweenForRepo": 144,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n     public Class\u003c?\u003e resolve(String name, String currentClass)\n         throws ClassNotFoundException {\n         // See if the class is full qualified\n         Class\u003c?\u003e clazz \u003d resolveQualifiedName(name);\n         if (clazz !\u003d null) {\n             return clazz;\n         }\n \n         // try matching explicit imports\n         for (String imp : imports) {\n             // Very important to add the \".\" in the check below. Otherwise you\n             // when checking for \"DataException\", it will match on\n             // \"SecurityDataException\". This has been the cause of a very\n             // difficult bug to resolve!\n             if (imp.endsWith(PERIOD + name)) {\n                 clazz \u003d resolveQualifiedName(imp);\n                 if (clazz !\u003d null) {\n                     return clazz;\n                 }\n \n             }\n         }\n \n         // See if in the package\n         if (pkg !\u003d null \u0026\u0026 !pkg.isEmpty()) {\n-            clazz \u003d resolveQualifiedName(pkg + PERIOD + name);\n-            if (clazz !\u003d null) {\n-                return clazz;\n+            final Class\u003c?\u003e classFromQualifiedName \u003d resolveQualifiedName(pkg + PERIOD + name);\n+            if (classFromQualifiedName !\u003d null) {\n+                return classFromQualifiedName;\n             }\n         }\n \n         // see if inner class of this class\n-        clazz \u003d resolveInnerClass(name, currentClass);\n-        if (clazz !\u003d null) {\n-            return clazz;\n+        final Class\u003c?\u003e innerClass \u003d resolveInnerClass(name, currentClass);\n+        if (innerClass !\u003d null) {\n+            return innerClass;\n         }\n \n-        clazz \u003d resolveByStarImports(name);\n-        if (clazz !\u003d null) {\n-            return clazz;\n+        final Class\u003c?\u003e classFromStarImport \u003d resolveByStarImports(name);\n+        if (classFromStarImport !\u003d null) {\n+            return classFromStarImport;\n         }\n \n         // Giving up, the type is unknown, so load the class to generate an\n         // exception\n         return safeLoad(name);\n     }\n\\ No newline at end of file\n"
    },
    "085ce12db0983590844ccc24ea49f91686a30ed8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: MultipleStringLiterals violations fixed\n",
      "commitDate": 1440543609000,
      "commitName": "085ce12db0983590844ccc24ea49f91686a30ed8",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": 1440498761000,
      "commitNameOld": "80ab48f859c1f16835dbd41afe42414b41969e2f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.52,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n     public Class\u003c?\u003e resolve(String name, String currentClass)\n         throws ClassNotFoundException {\n         // See if the class is full qualified\n         Class\u003c?\u003e clazz \u003d resolveQualifiedName(name);\n         if (clazz !\u003d null) {\n             return clazz;\n         }\n \n         // try matching explicit imports\n         for (String imp : imports) {\n             // Very important to add the \".\" in the check below. Otherwise you\n             // when checking for \"DataException\", it will match on\n             // \"SecurityDataException\". This has been the cause of a very\n             // difficult bug to resolve!\n-            if (imp.endsWith(\".\" + name)) {\n+            if (imp.endsWith(PERIOD + name)) {\n                 clazz \u003d resolveQualifiedName(imp);\n                 if (clazz !\u003d null) {\n                     return clazz;\n                 }\n \n             }\n         }\n \n         // See if in the package\n         if (pkg !\u003d null \u0026\u0026 !pkg.isEmpty()) {\n-            clazz \u003d resolveQualifiedName(pkg + \".\" + name);\n+            clazz \u003d resolveQualifiedName(pkg + PERIOD + name);\n             if (clazz !\u003d null) {\n                 return clazz;\n             }\n         }\n \n         // see if inner class of this class\n         clazz \u003d resolveInnerClass(name, currentClass);\n         if (clazz !\u003d null) {\n             return clazz;\n         }\n \n         clazz \u003d resolveByStarImports(name);\n         if (clazz !\u003d null) {\n             return clazz;\n         }\n \n         // Giving up, the type is unknown, so load the class to generate an\n         // exception\n         return safeLoad(name);\n     }\n\\ No newline at end of file\n"
    },
    "084809c3b9e0d039c818cc4d8c5e640ea9e26525": {
      "type": "Ybodychange",
      "commitMessage": "Simplify empty string check. #1555\n\nFixes `Simplify empty string check` inspection violations.\n\nDescription:\n\u003eReports .equals() being called to compare a String with an empty string. It is normally more performant to test a String for emptiness by comparing its .length() to zero instead.\n",
      "commitDate": 1439010691000,
      "commitName": "084809c3b9e0d039c818cc4d8c5e640ea9e26525",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1439007067000,
      "commitNameOld": "7d513f08c27c741105f712dc882fd4c3553f71e7",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n     public Class\u003c?\u003e resolve(String name, String currentClass)\n         throws ClassNotFoundException {\n         // See if the class is full qualified\n         Class\u003c?\u003e clazz \u003d resolveQualifiedName(name);\n         if (clazz !\u003d null) {\n             return clazz;\n         }\n \n         // try matching explicit imports\n         for (String imp : imports) {\n             // Very important to add the \".\" in the check below. Otherwise you\n             // when checking for \"DataException\", it will match on\n             // \"SecurityDataException\". This has been the cause of a very\n             // difficult bug to resolve!\n             if (imp.endsWith(\".\" + name)) {\n                 clazz \u003d resolveQualifiedName(imp);\n                 if (clazz !\u003d null) {\n                     return clazz;\n                 }\n \n             }\n         }\n \n         // See if in the package\n-        if (!\"\".equals(pkg)) {\n+        if (pkg !\u003d null \u0026\u0026 !pkg.isEmpty()) {\n             clazz \u003d resolveQualifiedName(pkg + \".\" + name);\n             if (clazz !\u003d null) {\n                 return clazz;\n             }\n         }\n \n         // see if inner class of this class\n         clazz \u003d resolveInnerClass(name, currentClass);\n         if (clazz !\u003d null) {\n             return clazz;\n         }\n \n         clazz \u003d resolveByStarImports(name);\n         if (clazz !\u003d null) {\n             return clazz;\n         }\n \n         // Giving up, the type is unknown, so load the class to generate an\n         // exception\n         return safeLoad(name);\n     }\n\\ No newline at end of file\n"
    },
    "d734bff020d3525c811a0b273021a5ac5665ade8": {
      "type": "Ybodychange",
      "commitMessage": "ClassResolver updated to follow Cyclomatic Complexity rule. #954\n",
      "commitDate": 1434261690000,
      "commitName": "d734bff020d3525c811a0b273021a5ac5665ade8",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": 1431863229000,
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 27.76,
      "commitsBetweenForRepo": 127,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,47 @@\n     public Class\u003c?\u003e resolve(String name, String currentClass)\n         throws ClassNotFoundException {\n         // See if the class is full qualified\n         Class\u003c?\u003e clazz \u003d resolveQualifiedName(name);\n         if (clazz !\u003d null) {\n             return clazz;\n         }\n \n         // try matching explicit imports\n         for (String imp : imports) {\n             // Very important to add the \".\" in the check below. Otherwise you\n             // when checking for \"DataException\", it will match on\n             // \"SecurityDataException\". This has been the cause of a very\n             // difficult bug to resolve!\n             if (imp.endsWith(\".\" + name)) {\n                 clazz \u003d resolveQualifiedName(imp);\n                 if (clazz !\u003d null) {\n                     return clazz;\n                 }\n \n             }\n         }\n \n         // See if in the package\n         if (!\"\".equals(pkg)) {\n             clazz \u003d resolveQualifiedName(pkg + \".\" + name);\n             if (clazz !\u003d null) {\n                 return clazz;\n             }\n         }\n \n-        //inner class of this class???\n-        if (!\"\".equals(currentClass)) {\n-            final String innerClass \u003d (!\"\".equals(pkg) ? pkg + \".\" : \"\")\n-                + currentClass + \"$\" + name;\n-            if (isLoadable(innerClass)) {\n-                return safeLoad(innerClass);\n-            }\n+        // see if inner class of this class\n+        clazz \u003d resolveInnerClass(name, currentClass);\n+        if (clazz !\u003d null) {\n+            return clazz;\n         }\n \n-        // try star imports\n-        for (String imp : imports) {\n-            if (imp.endsWith(\".*\")) {\n-                final String fqn \u003d imp.substring(0, imp.lastIndexOf(\u0027.\u0027) + 1)\n-                    + name;\n-                clazz \u003d resolveQualifiedName(fqn);\n-                if (clazz !\u003d null) {\n-                    return clazz;\n-                }\n-            }\n+        clazz \u003d resolveByStarImports(name);\n+        if (clazz !\u003d null) {\n+            return clazz;\n         }\n \n+\n         // Giving up, the type is unknown, so load the class to generate an\n         // exception\n         return safeLoad(name);\n     }\n\\ No newline at end of file\n"
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": 1426023398000,
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1425602876000,
      "commitNameOld": "f7828693395f71a6ae99710f3fab44cb8a66ea51",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 4.87,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n     public Class\u003c?\u003e resolve(String name, String currentClass)\n         throws ClassNotFoundException\n     {\n         // See if the class is full qualified\n         Class\u003c?\u003e clazz \u003d resolveQualifiedName(name);\n         if (clazz !\u003d null) {\n             return clazz;\n         }\n \n         // try matching explicit imports\n         for (String imp : imports) {\n             // Very important to add the \".\" in the check below. Otherwise you\n             // when checking for \"DataException\", it will match on\n             // \"SecurityDataException\". This has been the cause of a very\n             // difficult bug to resolve!\n             if (imp.endsWith(\".\" + name)) {\n                 clazz \u003d resolveQualifiedName(imp);\n                 if (clazz !\u003d null) {\n                     return clazz;\n                 }\n \n             }\n         }\n \n         // See if in the package\n         if (!\"\".equals(pkg)) {\n             clazz \u003d resolveQualifiedName(pkg + \".\" + name);\n             if (clazz !\u003d null) {\n                 return clazz;\n             }\n         }\n \n         //inner class of this class???\n         if (!\"\".equals(currentClass)) {\n-            final String innerClass \u003d (!\"\".equals(pkg) ? (pkg + \".\") : \"\")\n+            final String innerClass \u003d (!\"\".equals(pkg) ? pkg + \".\" : \"\")\n                 + currentClass + \"$\" + name;\n             if (isLoadable(innerClass)) {\n                 return safeLoad(innerClass);\n             }\n         }\n \n         // try star imports\n         for (String imp : imports) {\n             if (imp.endsWith(\".*\")) {\n                 final String fqn \u003d imp.substring(0, imp.lastIndexOf(\u0027.\u0027) + 1)\n                     + name;\n                 clazz \u003d resolveQualifiedName(fqn);\n                 if (clazz !\u003d null) {\n                     return clazz;\n                 }\n             }\n         }\n \n         // Giving up, the type is unknown, so load the class to generate an\n         // exception\n         return safeLoad(name);\n     }\n\\ No newline at end of file\n"
    },
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, checks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java\n",
      "commitDate": 1421678220000,
      "commitName": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1": {
      "type": "Ybodychange",
      "commitMessage": "Use the new syntactic sugar \"for loop\".\n\nEnd of the cosmetic changes.\n",
      "commitDate": 1197714527000,
      "commitName": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1197700618000,
      "commitNameOld": "08638b5f739d9929698860048c052da2d5f80209",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.16,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,57 @@\n     public Class\u003c?\u003e resolve(String aName, String aCurrentClass)\n         throws ClassNotFoundException\n     {\n         // See if the class is full qualified\n         Class\u003c?\u003e clazz \u003d resolveQualifiedName(aName);\n         if (clazz !\u003d null) {\n             return clazz;\n         }\n \n         // try matching explicit imports\n-        Iterator\u003cString\u003e it \u003d mImports.iterator();\n-        while (it.hasNext()) {\n-            final String imp \u003d it.next();\n+        for (String imp : mImports) {\n             // Very important to add the \".\" in the check below. Otherwise you\n             // when checking for \"DataException\", it will match on\n             // \"SecurityDataException\". This has been the cause of a very\n             // difficult bug to resolve!\n             if (imp.endsWith(\".\" + aName)) {\n                 clazz \u003d resolveQualifiedName(imp);\n                 if (clazz !\u003d null) {\n                     return clazz;\n                 }\n \n             }\n         }\n \n         // See if in the package\n         if (!\"\".equals(mPkg)) {\n             clazz \u003d resolveQualifiedName(mPkg + \".\" + aName);\n             if (clazz !\u003d null) {\n                 return clazz;\n             }\n         }\n \n         //inner class of this class???\n         if (!\"\".equals(aCurrentClass)) {\n             final String innerClass \u003d (!\"\".equals(mPkg) ? (mPkg + \".\") : \"\")\n                 + aCurrentClass + \"$\" + aName;\n             if (isLoadable(innerClass)) {\n                 return safeLoad(innerClass);\n             }\n         }\n \n         // try star imports\n-        it \u003d mImports.iterator();\n-        while (it.hasNext()) {\n-            final String imp \u003d it.next();\n+        for (String imp : mImports) {\n             if (imp.endsWith(\".*\")) {\n                 final String fqn \u003d imp.substring(0, imp.lastIndexOf(\u0027.\u0027) + 1)\n                     + aName;\n                 clazz \u003d resolveQualifiedName(fqn);\n                 if (clazz !\u003d null) {\n                     return clazz;\n                 }\n             }\n         }\n \n         // Giving up, the type is unknown, so load the class to generate an\n         // exception\n         return safeLoad(aName);\n     }\n\\ No newline at end of file\n"
    },
    "08638b5f739d9929698860048c052da2d5f80209": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "Start of adding generics.\n",
      "commitDate": 1197700618000,
      "commitName": "08638b5f739d9929698860048c052da2d5f80209",
      "commitAuthor": "Oliver Burn",
      "subchanges": [
        "Yreturntypechange",
        "Ybodychange"
      ]
    },
    "dfbaeedf8bc0d68b55699b79ed0d8ff094e444f0": {
      "type": "Ybodychange",
      "commitMessage": "fix for 1379666\n",
      "commitDate": 1134657492000,
      "commitName": "dfbaeedf8bc0d68b55699b79ed0d8ff094e444f0",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1119009848000,
      "commitNameOld": "c977c274a7de782889fc83531a3f58ec0fadfad8",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 181.11,
      "commitsBetweenForRepo": 92,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,82 +1,61 @@\n     public Class resolve(String aName, String aCurrentClass)\n         throws ClassNotFoundException\n     {\n         // See if the class is full qualified\n-        if (isLoadable(aName)) {\n-            return safeLoad(aName);\n-        }\n-        //Perhaps it\u0027s fully-qualified inner class\n-        int dotIdx \u003d aName.lastIndexOf(\".\");\n-        if (dotIdx !\u003d -1) {\n-            final String cn \u003d aName.substring(0, dotIdx) + \"$\"\n-                + aName.substring(dotIdx + 1);\n-            if (isLoadable(cn)) {\n-                return safeLoad(cn);\n-            }\n+        Class clazz \u003d resolveQualifiedName(aName);\n+        if (clazz !\u003d null) {\n+            return clazz;\n         }\n \n         // try matching explicit imports\n         Iterator it \u003d mImports.iterator();\n         while (it.hasNext()) {\n             final String imp \u003d (String) it.next();\n             // Very important to add the \".\" in the check below. Otherwise you\n             // when checking for \"DataException\", it will match on\n             // \"SecurityDataException\". This has been the cause of a very\n             // difficult bug to resolve!\n             if (imp.endsWith(\".\" + aName)) {\n-                if (isLoadable(imp)) {\n-                    return safeLoad(imp);\n+                clazz \u003d resolveQualifiedName(imp);\n+                if (clazz !\u003d null) {\n+                    return clazz;\n                 }\n-                // perhaps this is a import for inner class\n-                // let\u0027s try load it.\n-                final int dot \u003d imp.lastIndexOf(\".\");\n-                if (dot !\u003d -1) {\n-                    final String innerName \u003d imp.substring(0, dot) + \"$\"\n-                        + imp.substring(dot + 1);\n-                    if (isLoadable(innerName)) {\n-                        return safeLoad(innerName);\n-                    }\n-                }\n+\n             }\n         }\n \n         // See if in the package\n         if (!\"\".equals(mPkg)) {\n-            final String fqn \u003d mPkg + \".\" + aName;\n-            if (isLoadable(fqn)) {\n-                return safeLoad(fqn);\n+            clazz \u003d resolveQualifiedName(mPkg + \".\" + aName);\n+            if (clazz !\u003d null) {\n+                return clazz;\n             }\n         }\n \n         //inner class of this class???\n         if (!\"\".equals(aCurrentClass)) {\n             final String innerClass \u003d (!\"\".equals(mPkg) ? (mPkg + \".\") : \"\")\n                 + aCurrentClass + \"$\" + aName;\n             if (isLoadable(innerClass)) {\n                 return safeLoad(innerClass);\n             }\n         }\n \n-        // try \"java.lang.\"\n-        final String langClass \u003d \"java.lang.\" + aName;\n-        if (isLoadable(langClass)) {\n-            return safeLoad(langClass);\n-        }\n-\n         // try star imports\n         it \u003d mImports.iterator();\n         while (it.hasNext()) {\n             final String imp \u003d (String) it.next();\n             if (imp.endsWith(\".*\")) {\n                 final String fqn \u003d imp.substring(0, imp.lastIndexOf(\u0027.\u0027) + 1)\n                     + aName;\n-                if (isLoadable(fqn)) {\n-                    return safeLoad(fqn);\n+                clazz \u003d resolveQualifiedName(fqn);\n+                if (clazz !\u003d null) {\n+                    return clazz;\n                 }\n             }\n         }\n \n         // Giving up, the type is unknown, so load the class to generate an\n         // exception\n         return safeLoad(aName);\n     }\n\\ No newline at end of file\n"
    },
    "c977c274a7de782889fc83531a3f58ec0fadfad8": {
      "type": "Ybodychange",
      "commitMessage": "fix for 1220726\n",
      "commitDate": 1119009848000,
      "commitName": "c977c274a7de782889fc83531a3f58ec0fadfad8",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1105267857000,
      "commitNameOld": "0d887cde58e54d920644ee543dab346b93e8aae9",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 159.05,
      "commitsBetweenForRepo": 156,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,82 +1,82 @@\n     public Class resolve(String aName, String aCurrentClass)\n         throws ClassNotFoundException\n     {\n         // See if the class is full qualified\n         if (isLoadable(aName)) {\n             return safeLoad(aName);\n         }\n-        //Perhaps it\u0027s fullyqualified inner class\n+        //Perhaps it\u0027s fully-qualified inner class\n         int dotIdx \u003d aName.lastIndexOf(\".\");\n         if (dotIdx !\u003d -1) {\n             final String cn \u003d aName.substring(0, dotIdx) + \"$\"\n                 + aName.substring(dotIdx + 1);\n             if (isLoadable(cn)) {\n                 return safeLoad(cn);\n             }\n         }\n \n         // try matching explicit imports\n         Iterator it \u003d mImports.iterator();\n         while (it.hasNext()) {\n             final String imp \u003d (String) it.next();\n             // Very important to add the \".\" in the check below. Otherwise you\n             // when checking for \"DataException\", it will match on\n             // \"SecurityDataException\". This has been the cause of a very\n             // difficult bug to resolve!\n             if (imp.endsWith(\".\" + aName)) {\n                 if (isLoadable(imp)) {\n                     return safeLoad(imp);\n                 }\n                 // perhaps this is a import for inner class\n                 // let\u0027s try load it.\n                 final int dot \u003d imp.lastIndexOf(\".\");\n                 if (dot !\u003d -1) {\n                     final String innerName \u003d imp.substring(0, dot) + \"$\"\n                         + imp.substring(dot + 1);\n                     if (isLoadable(innerName)) {\n                         return safeLoad(innerName);\n                     }\n                 }\n             }\n         }\n \n         // See if in the package\n-        if (mPkg !\u003d null) {\n+        if (!\"\".equals(mPkg)) {\n             final String fqn \u003d mPkg + \".\" + aName;\n             if (isLoadable(fqn)) {\n                 return safeLoad(fqn);\n             }\n         }\n \n         //inner class of this class???\n         if (!\"\".equals(aCurrentClass)) {\n-            final String innerClass \u003d ((mPkg !\u003d null) ? (mPkg + \".\") : \"\")\n+            final String innerClass \u003d (!\"\".equals(mPkg) ? (mPkg + \".\") : \"\")\n                 + aCurrentClass + \"$\" + aName;\n             if (isLoadable(innerClass)) {\n                 return safeLoad(innerClass);\n             }\n         }\n \n         // try \"java.lang.\"\n         final String langClass \u003d \"java.lang.\" + aName;\n         if (isLoadable(langClass)) {\n             return safeLoad(langClass);\n         }\n \n         // try star imports\n         it \u003d mImports.iterator();\n         while (it.hasNext()) {\n             final String imp \u003d (String) it.next();\n             if (imp.endsWith(\".*\")) {\n                 final String fqn \u003d imp.substring(0, imp.lastIndexOf(\u0027.\u0027) + 1)\n                     + aName;\n                 if (isLoadable(fqn)) {\n                     return safeLoad(fqn);\n                 }\n             }\n         }\n \n         // Giving up, the type is unknown, so load the class to generate an\n         // exception\n         return safeLoad(aName);\n     }\n\\ No newline at end of file\n"
    },
    "1ac7fc3f8fc856547085bcc88e17fd1f4bbe0ddd": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "merging changes from v3 branch\n",
      "commitDate": 1096996314000,
      "commitName": "1ac7fc3f8fc856547085bcc88e17fd1f4bbe0ddd",
      "commitAuthor": "Oleg Sukhodolsky",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "5d7063c660b241bce251f1a8c89394619f2791fb": {
      "type": "Ybodychange",
      "commitMessage": "Tighten up code\n",
      "commitDate": 1093527252000,
      "commitName": "5d7063c660b241bce251f1a8c89394619f2791fb",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1092925465000,
      "commitNameOld": "d86a9de35b58eeed409ed9fc3cbef252fda4cb84",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 6.97,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,63 @@\n     public Class resolve(String aName) throws ClassNotFoundException\n     {\n         // See if the class is full qualified\n         if (isLoadable(aName)) {\n             return safeLoad(aName);\n         }\n \n         // try matching explicit imports\n         Iterator it \u003d mImports.iterator();\n         while (it.hasNext()) {\n             final String imp \u003d (String) it.next();\n             // Very important to add the \".\" in the check below. Otherwise you\n             // when checking for \"DataException\", it will match on\n             // \"SecurityDataException\". This has been the cause of a very\n             // difficult bug to resolve!\n             if (imp.endsWith(\".\" + aName)) {\n                 if (isLoadable(imp)) {\n                     return safeLoad(imp);\n                 }\n                 // perhaps this is a import for inner class\n                 // let\u0027s try load it.\n-                int dot \u003d imp.lastIndexOf(\".\");\n+                final int dot \u003d imp.lastIndexOf(\".\");\n                 if (dot !\u003d -1) {\n                     final String innerName \u003d imp.substring(0, dot) + \"$\"\n                         + imp.substring(dot + 1);\n                     if (isLoadable(innerName)) {\n                         return safeLoad(innerName);\n                     }\n                 }\n             }\n         }\n \n         // See if in the package\n         if (mPkg !\u003d null) {\n             final String fqn \u003d mPkg + \".\" + aName;\n             if (isLoadable(fqn)) {\n                 return safeLoad(fqn);\n             }\n         }\n \n         // try \"java.lang.\"\n         final String langClass \u003d \"java.lang.\" + aName;\n         if (isLoadable(langClass)) {\n             return safeLoad(langClass);\n         }\n \n         // try star imports\n         it \u003d mImports.iterator();\n         while (it.hasNext()) {\n             final String imp \u003d (String) it.next();\n             if (imp.endsWith(\".*\")) {\n                 final String fqn \u003d imp.substring(0, imp.lastIndexOf(\u0027.\u0027) + 1)\n                     + aName;\n                 if (isLoadable(fqn)) {\n                     return safeLoad(fqn);\n                 }\n             }\n         }\n \n         // Giving up, the type is unknown, so load the class to generate an\n         // exception\n         return safeLoad(aName);\n     }\n\\ No newline at end of file\n"
    },
    "d86a9de35b58eeed409ed9fc3cbef252fda4cb84": {
      "type": "Ybodychange",
      "commitMessage": "Fix a very annoying bug\n",
      "commitDate": 1092925465000,
      "commitName": "d86a9de35b58eeed409ed9fc3cbef252fda4cb84",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1081094164000,
      "commitNameOld": "e5f09c7fd2b5115bd164a5ed4f0a5e376c2dc2d7",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 136.94,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,63 @@\n     public Class resolve(String aName) throws ClassNotFoundException\n     {\n         // See if the class is full qualified\n         if (isLoadable(aName)) {\n             return safeLoad(aName);\n         }\n \n         // try matching explicit imports\n         Iterator it \u003d mImports.iterator();\n         while (it.hasNext()) {\n             final String imp \u003d (String) it.next();\n-            if (imp.endsWith(aName)) {\n+            // Very important to add the \".\" in the check below. Otherwise you\n+            // when checking for \"DataException\", it will match on\n+            // \"SecurityDataException\". This has been the cause of a very\n+            // difficult bug to resolve!\n+            if (imp.endsWith(\".\" + aName)) {\n                 if (isLoadable(imp)) {\n                     return safeLoad(imp);\n                 }\n                 // perhaps this is a import for inner class\n                 // let\u0027s try load it.\n                 int dot \u003d imp.lastIndexOf(\".\");\n                 if (dot !\u003d -1) {\n                     final String innerName \u003d imp.substring(0, dot) + \"$\"\n                         + imp.substring(dot + 1);\n                     if (isLoadable(innerName)) {\n                         return safeLoad(innerName);\n                     }\n                 }\n             }\n         }\n \n         // See if in the package\n         if (mPkg !\u003d null) {\n             final String fqn \u003d mPkg + \".\" + aName;\n             if (isLoadable(fqn)) {\n                 return safeLoad(fqn);\n             }\n         }\n \n         // try \"java.lang.\"\n         final String langClass \u003d \"java.lang.\" + aName;\n         if (isLoadable(langClass)) {\n             return safeLoad(langClass);\n         }\n \n         // try star imports\n         it \u003d mImports.iterator();\n         while (it.hasNext()) {\n             final String imp \u003d (String) it.next();\n             if (imp.endsWith(\".*\")) {\n                 final String fqn \u003d imp.substring(0, imp.lastIndexOf(\u0027.\u0027) + 1)\n                     + aName;\n                 if (isLoadable(fqn)) {\n                     return safeLoad(fqn);\n                 }\n             }\n         }\n \n         // Giving up, the type is unknown, so load the class to generate an\n         // exception\n         return safeLoad(aName);\n     }\n\\ No newline at end of file\n"
    },
    "e5f09c7fd2b5115bd164a5ed4f0a5e376c2dc2d7": {
      "type": "Ybodychange",
      "commitMessage": "Fix for 925263 (Redundant throws, exceptions as nested classes)\n",
      "commitDate": 1081094164000,
      "commitName": "e5f09c7fd2b5115bd164a5ed4f0a5e376c2dc2d7",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1074114639000,
      "commitNameOld": "5670252b46f4915b276e647fa000361915eb4ff4",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 80.78,
      "commitsBetweenForRepo": 62,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,59 @@\n     public Class resolve(String aName) throws ClassNotFoundException\n     {\n         // See if the class is full qualified\n         if (isLoadable(aName)) {\n             return safeLoad(aName);\n         }\n \n         // try matching explicit imports\n         Iterator it \u003d mImports.iterator();\n         while (it.hasNext()) {\n             final String imp \u003d (String) it.next();\n-            if (imp.endsWith(aName) \u0026\u0026 isLoadable(imp)) {\n-                return safeLoad(imp);\n+            if (imp.endsWith(aName)) {\n+                if (isLoadable(imp)) {\n+                    return safeLoad(imp);\n+                }\n+                // perhaps this is a import for inner class\n+                // let\u0027s try load it.\n+                int dot \u003d imp.lastIndexOf(\".\");\n+                if (dot !\u003d -1) {\n+                    final String innerName \u003d imp.substring(0, dot) + \"$\"\n+                        + imp.substring(dot + 1);\n+                    if (isLoadable(innerName)) {\n+                        return safeLoad(innerName);\n+                    }\n+                }\n             }\n         }\n \n         // See if in the package\n         if (mPkg !\u003d null) {\n             final String fqn \u003d mPkg + \".\" + aName;\n             if (isLoadable(fqn)) {\n                 return safeLoad(fqn);\n             }\n         }\n \n         // try \"java.lang.\"\n         final String langClass \u003d \"java.lang.\" + aName;\n         if (isLoadable(langClass)) {\n             return safeLoad(langClass);\n         }\n \n         // try star imports\n         it \u003d mImports.iterator();\n         while (it.hasNext()) {\n             final String imp \u003d (String) it.next();\n             if (imp.endsWith(\".*\")) {\n                 final String fqn \u003d imp.substring(0, imp.lastIndexOf(\u0027.\u0027) + 1)\n                     + aName;\n                 if (isLoadable(fqn)) {\n                     return safeLoad(fqn);\n                 }\n             }\n         }\n \n         // Giving up, the type is unknown, so load the class to generate an\n         // exception\n         return safeLoad(aName);\n     }\n\\ No newline at end of file\n"
    },
    "04ac5dd87c11a2bf7b908b45bbca7933382df515": {
      "type": "Ymodifierchange",
      "commitMessage": "Moving another Javadoc check to see what is involved.\nA suprisingly small amount. Love the Eclipse refactoring\nsupport having the smarts to do the CVS operations.\n",
      "commitDate": 1054648289000,
      "commitName": "04ac5dd87c11a2bf7b908b45bbca7933382df515",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1036555078000,
      "commitNameOld": "5fc3ff2bfbed94f88e1af95f38e970a832e4dbe6",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 209.41,
      "commitsBetweenForRepo": 757,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n-    Class resolve(String aName) throws ClassNotFoundException\n+    public Class resolve(String aName) throws ClassNotFoundException\n     {\n         // See if the class is full qualified\n         if (isLoadable(aName)) {\n             return safeLoad(aName);\n         }\n \n         // try matching explicit imports\n         Iterator it \u003d mImports.iterator();\n         while (it.hasNext()) {\n             final String imp \u003d (String) it.next();\n             if (imp.endsWith(aName) \u0026\u0026 isLoadable(imp)) {\n                 return safeLoad(imp);\n             }\n         }\n \n         // See if in the package\n         if (mPkg !\u003d null) {\n             final String fqn \u003d mPkg + \".\" + aName;\n             if (isLoadable(fqn)) {\n                 return safeLoad(fqn);\n             }\n         }\n \n         // try \"java.lang.\"\n         final String langClass \u003d \"java.lang.\" + aName;\n         if (isLoadable(langClass)) {\n             return safeLoad(langClass);\n         }\n \n         // try star imports\n         it \u003d mImports.iterator();\n         while (it.hasNext()) {\n             final String imp \u003d (String) it.next();\n             if (imp.endsWith(\".*\")) {\n                 final String fqn \u003d imp.substring(0, imp.lastIndexOf(\u0027.\u0027) + 1)\n                     + aName;\n                 if (isLoadable(fqn)) {\n                     return safeLoad(fqn);\n                 }\n             }\n         }\n \n         // Giving up, the type is unknown, so load the class to generate an\n         // exception\n         return safeLoad(aName);\n     }\n\\ No newline at end of file\n"
    },
    "5fc3ff2bfbed94f88e1af95f38e970a832e4dbe6": {
      "type": "Ybodychange",
      "commitMessage": "Please ensure you thoroughly test code before committing it. As a sanity test,\nensure that the target \"checkstyle.checkstyle\" will run! If in doubt, do not\ncommit, but instead said a patch to the devel mailing list for a review.\n\nFinished the port of the ClassResolver code. Even though it compiled, it had\nno chance of working due to class casting problems. They have not been\nfixed. Also needed to ensure the correct class loader is being used.\n",
      "commitDate": 1036555078000,
      "commitName": "5fc3ff2bfbed94f88e1af95f38e970a832e4dbe6",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1036501994000,
      "commitNameOld": "c75f97dbc2123f550a1acc64886a8bebf4b888cf",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 0.61,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n     Class resolve(String aName) throws ClassNotFoundException\n     {\n         // See if the class is full qualified\n         if (isLoadable(aName)) {\n             return safeLoad(aName);\n         }\n \n         // try matching explicit imports\n         Iterator it \u003d mImports.iterator();\n         while (it.hasNext()) {\n-            final String imp \u003d ((DetailAST) it.next()).getText();\n+            final String imp \u003d (String) it.next();\n             if (imp.endsWith(aName) \u0026\u0026 isLoadable(imp)) {\n                 return safeLoad(imp);\n             }\n         }\n \n         // See if in the package\n         if (mPkg !\u003d null) {\n             final String fqn \u003d mPkg + \".\" + aName;\n             if (isLoadable(fqn)) {\n                 return safeLoad(fqn);\n             }\n         }\n \n         // try \"java.lang.\"\n         final String langClass \u003d \"java.lang.\" + aName;\n         if (isLoadable(langClass)) {\n             return safeLoad(langClass);\n         }\n \n         // try star imports\n         it \u003d mImports.iterator();\n         while (it.hasNext()) {\n-            final String imp \u003d ((DetailAST) it.next()).getText();\n+            final String imp \u003d (String) it.next();\n             if (imp.endsWith(\".*\")) {\n                 final String fqn \u003d imp.substring(0, imp.lastIndexOf(\u0027.\u0027) + 1)\n                     + aName;\n                 if (isLoadable(fqn)) {\n                     return safeLoad(fqn);\n                 }\n             }\n         }\n \n         // Giving up, the type is unknown, so load the class to generate an\n         // exception\n         return safeLoad(aName);\n     }\n\\ No newline at end of file\n"
    },
    "c75f97dbc2123f550a1acc64886a8bebf4b888cf": {
      "type": "Yintroduced",
      "commitMessage": "Javadoc method check\n",
      "commitDate": 1036501994000,
      "commitName": "c75f97dbc2123f550a1acc64886a8bebf4b888cf",
      "commitAuthor": "Rick Giles"
    }
  }
}