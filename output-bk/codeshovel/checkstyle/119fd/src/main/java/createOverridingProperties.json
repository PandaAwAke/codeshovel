{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "java",
  "functionId": "createOverridingProperties",
  "sourceFilePath": "src/main/java",
  "functionStartLine": 0,
  "functionEndLine": 474,
  "changeHistory": [
    "f65b17cbc30795247fef3077cce16a8bb53e9ffc",
    "ce196814d857a4244a80c51d5151cc35e90b6749",
    "abfc952fd0ed88f6246b1d969a8a980ea63f0bd6",
    "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86",
    "546f336e25b26d072f96e2cda139b885858ed5b0",
    "500bf308fac4adc61bd3087a664779c8622efb3b",
    "d9415ac10cfda8adb3eb3fb729f6334369ad931d",
    "06865630aa3da0b36064b9e00e0e95ff681f234e",
    "1dacd5303bfe94b9d5476059b6a5676146d96708",
    "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "bd8a1a545fd1bc19d5f84c5061c5383796a7c588",
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
    "f1afaf83f39b83cc3bd07a2388448b262652a76b",
    "35d1673788bbbac8263fdb69275dc6a63b095a24",
    "5d7063c660b241bce251f1a8c89394619f2791fb",
    "ee2e1a5cb3c7dd02bf6b63c418126e41735ee0ea",
    "a16368d3f85e8ad068ebf65a2025c8cf90cf7d3b",
    "2debda611fe487021711aa4acce56651799a778f",
    "6f4247181beca3530b5c2dc762d9c5c6a018a06c",
    "49eb0e934ee82cf33c6643a4a15eb74ad471a6a9"
  ],
  "changeHistoryShort": {
    "f65b17cbc30795247fef3077cce16a8bb53e9ffc": "Ybodychange",
    "ce196814d857a4244a80c51d5151cc35e90b6749": "Ybodychange",
    "abfc952fd0ed88f6246b1d969a8a980ea63f0bd6": "Ybodychange",
    "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86": "Ybodychange",
    "546f336e25b26d072f96e2cda139b885858ed5b0": "Ybodychange",
    "500bf308fac4adc61bd3087a664779c8622efb3b": "Yfilerename",
    "d9415ac10cfda8adb3eb3fb729f6334369ad931d": "Ybodychange",
    "06865630aa3da0b36064b9e00e0e95ff681f234e": "Ybodychange",
    "1dacd5303bfe94b9d5476059b6a5676146d96708": "Ybodychange",
    "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "bd8a1a545fd1bc19d5f84c5061c5383796a7c588": "Ybodychange",
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1": "Ybodychange",
    "f1afaf83f39b83cc3bd07a2388448b262652a76b": "Ybodychange",
    "35d1673788bbbac8263fdb69275dc6a63b095a24": "Ybodychange",
    "5d7063c660b241bce251f1a8c89394619f2791fb": "Ybodychange",
    "ee2e1a5cb3c7dd02bf6b63c418126e41735ee0ea": "Ybodychange",
    "a16368d3f85e8ad068ebf65a2025c8cf90cf7d3b": "Ybodychange",
    "2debda611fe487021711aa4acce56651799a778f": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
    "6f4247181beca3530b5c2dc762d9c5c6a018a06c": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
    "49eb0e934ee82cf33c6643a4a15eb74ad471a6a9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f65b17cbc30795247fef3077cce16a8bb53e9ffc": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2616: Fix CatchParameterName check violations in Checkstyle code\n",
      "commitDate": 1449184604000,
      "commitName": "f65b17cbc30795247fef3077cce16a8bb53e9ffc",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1448424970000,
      "commitNameOld": "2e243db3fbdf7b737f78ed7cef0b9bd94f351d25",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 8.79,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n     private Properties createOverridingProperties() {\n         final Properties returnValue \u003d new Properties();\n \n         // Load the properties file if specified\n         if (properties !\u003d null) {\n             FileInputStream inStream \u003d null;\n             try {\n                 inStream \u003d new FileInputStream(properties);\n                 returnValue.load(inStream);\n             }\n-            catch (final IOException e) {\n+            catch (final IOException ex) {\n                 throw new BuildException(\"Error loading Properties file \u0027\"\n-                        + properties + \"\u0027\", e, getLocation());\n+                        + properties + \"\u0027\", ex, getLocation());\n             }\n             finally {\n                 Closeables.closeQuietly(inStream);\n             }\n         }\n \n         // override with Ant properties like ${basedir}\n         final Map\u003cString, Object\u003e antProps \u003d getProject().getProperties();\n         for (Map.Entry\u003cString, Object\u003e entry : antProps.entrySet()) {\n             final String value \u003d String.valueOf(entry.getValue());\n             returnValue.setProperty(entry.getKey(), value);\n         }\n \n         // override with properties specified in subelements\n         for (Property p : overrideProps) {\n             returnValue.setProperty(p.getKey(), p.getValue());\n         }\n \n         return returnValue;\n     }\n\\ No newline at end of file\n"
    },
    "ce196814d857a4244a80c51d5151cc35e90b6749": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2080: Fix typos in code\n",
      "commitDate": 1445038509000,
      "commitName": "ce196814d857a4244a80c51d5151cc35e90b6749",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1444779430000,
      "commitNameOld": "be3e035ce39a610881cd2c1bfdce3eef101c2e3c",
      "commitAuthorOld": "Ruslan Diachenko",
      "daysBetweenCommits": 3.0,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n     private Properties createOverridingProperties() {\n-        final Properties retVal \u003d new Properties();\n+        final Properties returnValue \u003d new Properties();\n \n         // Load the properties file if specified\n         if (properties !\u003d null) {\n             FileInputStream inStream \u003d null;\n             try {\n                 inStream \u003d new FileInputStream(properties);\n-                retVal.load(inStream);\n+                returnValue.load(inStream);\n             }\n             catch (final IOException e) {\n                 throw new BuildException(\"Error loading Properties file \u0027\"\n                         + properties + \"\u0027\", e, getLocation());\n             }\n             finally {\n                 Closeables.closeQuietly(inStream);\n             }\n         }\n \n         // override with Ant properties like ${basedir}\n         final Map\u003cString, Object\u003e antProps \u003d getProject().getProperties();\n         for (Map.Entry\u003cString, Object\u003e entry : antProps.entrySet()) {\n             final String value \u003d String.valueOf(entry.getValue());\n-            retVal.setProperty(entry.getKey(), value);\n+            returnValue.setProperty(entry.getKey(), value);\n         }\n \n         // override with properties specified in subelements\n         for (Property p : overrideProps) {\n-            retVal.setProperty(p.getKey(), p.getValue());\n+            returnValue.setProperty(p.getKey(), p.getValue());\n         }\n \n-        return retVal;\n+        return returnValue;\n     }\n\\ No newline at end of file\n"
    },
    "abfc952fd0ed88f6246b1d969a8a980ea63f0bd6": {
      "type": "Ybodychange",
      "commitMessage": "Fix suspicious getters and setters. #1555\n\nFixes `SuspiciousGetterSetter` inspection violations.\n\nDescription:\n\u003eReports suspicious getter or setter methods. A getter or setter is suspicious if it accesses a different field than would be expected by its name.\n",
      "commitDate": 1440243789000,
      "commitName": "abfc952fd0ed88f6246b1d969a8a980ea63f0bd6",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1440041387000,
      "commitNameOld": "083c9eb1dc214cfe6de4dc4f9f83ff163ff6b79e",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 2.34,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n     private Properties createOverridingProperties() {\n         final Properties retVal \u003d new Properties();\n \n         // Load the properties file if specified\n-        if (propertiesFile !\u003d null) {\n+        if (properties !\u003d null) {\n             FileInputStream inStream \u003d null;\n             try {\n-                inStream \u003d new FileInputStream(propertiesFile);\n+                inStream \u003d new FileInputStream(properties);\n                 retVal.load(inStream);\n             }\n             catch (final IOException e) {\n                 throw new BuildException(\"Error loading Properties file \u0027\"\n-                        + propertiesFile + \"\u0027\", e, getLocation());\n+                        + properties + \"\u0027\", e, getLocation());\n             }\n             finally {\n                 Closeables.closeQuietly(inStream);\n             }\n         }\n \n         // override with Ant properties like ${basedir}\n         final Map\u003cString, Object\u003e antProps \u003d getProject().getProperties();\n         for (Map.Entry\u003cString, Object\u003e entry : antProps.entrySet()) {\n             final String value \u003d String.valueOf(entry.getValue());\n             retVal.setProperty(entry.getKey(), value);\n         }\n \n         // override with properties specified in subelements\n         for (Property p : overrideProps) {\n             retVal.setProperty(p.getKey(), p.getValue());\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n"
    },
    "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86": {
      "type": "Ybodychange",
      "commitMessage": "Remove unnecessary this keyword. #1555\n\nFixes `UnnecessaryThis` inspection violations.\n\nDescription:\n\u003eReports on any unnecessary uses of this in the code. Using this to disambiguate a code reference may easily become unnecessary via automatic refactorings, and is discouraged by many coding styles.\n For example:\n ```\n this.a \u003d 3;\n ```\n",
      "commitDate": 1439131302000,
      "commitName": "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1439087316000,
      "commitNameOld": "f7f377f5065c11d31b29fb8df19a14220ffb8500",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.51,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n     private Properties createOverridingProperties() {\n         final Properties retVal \u003d new Properties();\n \n         // Load the properties file if specified\n         if (propertiesFile !\u003d null) {\n             FileInputStream inStream \u003d null;\n             try {\n                 inStream \u003d new FileInputStream(propertiesFile);\n                 retVal.load(inStream);\n             }\n             catch (final IOException e) {\n                 throw new BuildException(\"Error loading Properties file \u0027\"\n                         + propertiesFile + \"\u0027\", e, getLocation());\n             }\n             finally {\n                 Closeables.closeQuietly(inStream);\n             }\n         }\n \n         // override with Ant properties like ${basedir}\n-        final Map\u003cString, Object\u003e antProps \u003d this.getProject().getProperties();\n+        final Map\u003cString, Object\u003e antProps \u003d getProject().getProperties();\n         for (Map.Entry\u003cString, Object\u003e entry : antProps.entrySet()) {\n             final String value \u003d String.valueOf(entry.getValue());\n             retVal.setProperty(entry.getKey(), value);\n         }\n \n         // override with properties specified in subelements\n         for (Property p : overrideProps) {\n             retVal.setProperty(p.getKey(), p.getValue());\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n"
    },
    "546f336e25b26d072f96e2cda139b885858ed5b0": {
      "type": "Ybodychange",
      "commitMessage": "Prevent corrupting Properties with non-String data. #1555\n\nFixes `UseOfPropertiesAsHashtable` inspection violations.\n\nDescription:\n\u003eReports any calls to the java.util.Hashtable methods put(), putAll() or get() on a java.util.Properties object. For reasons lost to history, Properties inherits from Hashtable, but use of those methods is discouraged to prevent corruption of properties values with non-String data.\n",
      "commitDate": 1439007516000,
      "commitName": "546f336e25b26d072f96e2cda139b885858ed5b0",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1439007161000,
      "commitNameOld": "8a3f5bf6d5389b9e175c9c769992faece6d76ada",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n     private Properties createOverridingProperties() {\n         final Properties retVal \u003d new Properties();\n \n         // Load the properties file if specified\n         if (propertiesFile !\u003d null) {\n             FileInputStream inStream \u003d null;\n             try {\n                 inStream \u003d new FileInputStream(propertiesFile);\n                 retVal.load(inStream);\n             }\n             catch (final IOException e) {\n                 throw new BuildException(\"Error loading Properties file \u0027\"\n                         + propertiesFile + \"\u0027\", e, getLocation());\n             }\n             finally {\n                 Closeables.closeQuietly(inStream);\n             }\n         }\n \n         // override with Ant properties like ${basedir}\n         final Map\u003cString, Object\u003e antProps \u003d this.getProject().getProperties();\n         for (Map.Entry\u003cString, Object\u003e entry : antProps.entrySet()) {\n             final String value \u003d String.valueOf(entry.getValue());\n-            retVal.put(entry.getKey(), value);\n+            retVal.setProperty(entry.getKey(), value);\n         }\n \n         // override with properties specified in subelements\n         for (Property p : overrideProps) {\n-            retVal.put(p.getKey(), p.getValue());\n+            retVal.setProperty(p.getKey(), p.getValue());\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n"
    },
    "500bf308fac4adc61bd3087a664779c8622efb3b": {
      "type": "Yfilerename",
      "commitMessage": "Rename CheckStyleTask to CheckstyleAntTask. #1108\n",
      "commitDate": 1433698738000,
      "commitName": "500bf308fac4adc61bd3087a664779c8622efb3b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1433691729000,
      "commitNameOld": "8a3ccee4918bc1ce5f6bc2dfea51389a59684eb0",
      "commitAuthorOld": "Bhavik Patel",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "d9415ac10cfda8adb3eb3fb729f6334369ad931d": {
      "type": "Ybodychange",
      "commitMessage": "Fix PMD violation from \u0027migrating\u0027 ruleset, issue #869\n",
      "commitDate": 1428686483000,
      "commitName": "d9415ac10cfda8adb3eb3fb729f6334369ad931d",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1427398517000,
      "commitNameOld": "06865630aa3da0b36064b9e00e0e95ff681f234e",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 14.91,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,34 @@\n     private Properties createOverridingProperties()\n     {\n         final Properties retVal \u003d new Properties();\n \n         // Load the properties file if specified\n         if (propertiesFile !\u003d null) {\n             FileInputStream inStream \u003d null;\n             try {\n                 inStream \u003d new FileInputStream(propertiesFile);\n                 retVal.load(inStream);\n             }\n             catch (final IOException e) {\n                 throw new BuildException(\"Error loading Properties file \u0027\"\n                         + propertiesFile + \"\u0027\", e, getLocation());\n             }\n             finally {\n                 Closeables.closeQuietly(inStream);\n             }\n         }\n \n         // override with Ant properties like ${basedir}\n-        final Hashtable\u003c?, ?\u003e antProps \u003d this.getProject().getProperties();\n-        for (Object name : antProps.keySet()) {\n-            final String key \u003d (String) name;\n-            final String value \u003d String.valueOf(antProps.get(key));\n-            retVal.put(key, value);\n+        final Map\u003cString, Object\u003e antProps \u003d this.getProject().getProperties();\n+        for (Map.Entry\u003cString, Object\u003e entry : antProps.entrySet()) {\n+            final String value \u003d String.valueOf(entry.getValue());\n+            retVal.put(entry.getKey(), value);\n         }\n \n         // override with properties specified in subelements\n         for (Property p : overrideProps) {\n             retVal.put(p.getKey(), p.getValue());\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n"
    },
    "06865630aa3da0b36064b9e00e0e95ff681f234e": {
      "type": "Ybodychange",
      "commitMessage": "Use Guava Closeables to manage closing exceptions\n\n\u003eWhile it\u0027s not safe in the general case to ignore exceptions that are thrown when closing an I/O resource, it should generally be safe in the case of a resource that\u0027s being used only for reading, such as a Reader. Unlike with writable resources, there\u0027s no chance that a failure that occurs when closing the reader indicates a meaningful problem such as a failure to flush all bytes to the underlying resource.\n\n`Reader` and `InputStream` instances are closed using `Closeables.closeQuietly()`, while `RandomAccessFile` is closed with `Closeables.close()` that throws `IOException` and needs to be handled.\n\nFrom Javadoc:\n\u003e```java\npublic static void close(@Nullable\n         Closeable closeable,\n         boolean swallowIOException)\n                  throws IOException\n```\n\u003eCloses a Closeable, with control over whether an IOException may be thrown. This is primarily useful in a finally block, where a thrown exception needs to be logged but not propagated (otherwise the original exception will be lost).\nIf swallowIOException is true then we never throw IOException but merely log it.\n\n\u003eExample:\n```java\n   public void useStreamNicely() throws IOException {\n     SomeStream stream \u003d new SomeStream(\"foo\");\n     boolean threw \u003d true;\n     try {\n       // ... code which does something with the stream ...\n       threw \u003d false;\n     } finally {\n       // If an exception occurs, rethrow it only if threw\u003d\u003dfalse:\n       Closeables.close(stream, threw);\n     }\n   }\n```\n\nMoreover, `Closeables.close()` and  `Flushables.flush()` are used to flush and close `OutputStream`.\n",
      "commitDate": 1427398517000,
      "commitName": "06865630aa3da0b36064b9e00e0e95ff681f234e",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1427233706000,
      "commitNameOld": "1dacd5303bfe94b9d5476059b6a5676146d96708",
      "commitAuthorOld": "Damian Szczepanik",
      "daysBetweenCommits": 1.91,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     private Properties createOverridingProperties()\n     {\n         final Properties retVal \u003d new Properties();\n \n         // Load the properties file if specified\n         if (propertiesFile !\u003d null) {\n             FileInputStream inStream \u003d null;\n             try {\n                 inStream \u003d new FileInputStream(propertiesFile);\n                 retVal.load(inStream);\n             }\n             catch (final IOException e) {\n                 throw new BuildException(\"Error loading Properties file \u0027\"\n                         + propertiesFile + \"\u0027\", e, getLocation());\n             }\n             finally {\n-                Utils.closeQuietly(inStream);\n+                Closeables.closeQuietly(inStream);\n             }\n         }\n \n         // override with Ant properties like ${basedir}\n         final Hashtable\u003c?, ?\u003e antProps \u003d this.getProject().getProperties();\n         for (Object name : antProps.keySet()) {\n             final String key \u003d (String) name;\n             final String value \u003d String.valueOf(antProps.get(key));\n             retVal.put(key, value);\n         }\n \n         // override with properties specified in subelements\n         for (Property p : overrideProps) {\n             retVal.put(p.getKey(), p.getValue());\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n"
    },
    "1dacd5303bfe94b9d5476059b6a5676146d96708": {
      "type": "Ybodychange",
      "commitMessage": "Merged catch blocks into one where possible\n\nPull #825\n",
      "commitDate": 1427233706000,
      "commitName": "1dacd5303bfe94b9d5476059b6a5676146d96708",
      "commitAuthor": "Damian Szczepanik",
      "commitDateOld": 1426655757000,
      "commitNameOld": "e36ae750f6378b9a3cd8e5171c6e6b710bf10959",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 6.69,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,35 @@\n     private Properties createOverridingProperties()\n     {\n         final Properties retVal \u003d new Properties();\n \n         // Load the properties file if specified\n         if (propertiesFile !\u003d null) {\n             FileInputStream inStream \u003d null;\n             try {\n                 inStream \u003d new FileInputStream(propertiesFile);\n                 retVal.load(inStream);\n             }\n-            catch (final FileNotFoundException e) {\n-                throw new BuildException(\"Could not find Properties file \u0027\"\n-                        + propertiesFile + \"\u0027\", e, getLocation());\n-            }\n             catch (final IOException e) {\n                 throw new BuildException(\"Error loading Properties file \u0027\"\n                         + propertiesFile + \"\u0027\", e, getLocation());\n             }\n             finally {\n                 Utils.closeQuietly(inStream);\n             }\n         }\n \n         // override with Ant properties like ${basedir}\n         final Hashtable\u003c?, ?\u003e antProps \u003d this.getProject().getProperties();\n         for (Object name : antProps.keySet()) {\n             final String key \u003d (String) name;\n             final String value \u003d String.valueOf(antProps.get(key));\n             retVal.put(key, value);\n         }\n \n         // override with properties specified in subelements\n         for (Property p : overrideProps) {\n             retVal.put(p.getKey(), p.getValue());\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n"
    },
    "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1": {
      "type": "Ybodychange",
      "commitMessage": "Prefixes, checkstyle, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java\n",
      "commitDate": 1421678312000,
      "commitName": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
      "commitAuthor": "alexkravin",
      "commitDateOld": 1393953491000,
      "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthorOld": "Ivan Sopov",
      "daysBetweenCommits": 320.89,
      "commitsBetweenForRepo": 476,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n     private Properties createOverridingProperties()\n     {\n         final Properties retVal \u003d new Properties();\n \n         // Load the properties file if specified\n-        if (mPropertiesFile !\u003d null) {\n+        if (propertiesFile !\u003d null) {\n             FileInputStream inStream \u003d null;\n             try {\n-                inStream \u003d new FileInputStream(mPropertiesFile);\n+                inStream \u003d new FileInputStream(propertiesFile);\n                 retVal.load(inStream);\n             }\n             catch (final FileNotFoundException e) {\n                 throw new BuildException(\"Could not find Properties file \u0027\"\n-                        + mPropertiesFile + \"\u0027\", e, getLocation());\n+                        + propertiesFile + \"\u0027\", e, getLocation());\n             }\n             catch (final IOException e) {\n                 throw new BuildException(\"Error loading Properties file \u0027\"\n-                        + mPropertiesFile + \"\u0027\", e, getLocation());\n+                        + propertiesFile + \"\u0027\", e, getLocation());\n             }\n             finally {\n                 Utils.closeQuietly(inStream);\n             }\n         }\n \n         // override with Ant properties like ${basedir}\n         final Hashtable\u003c?, ?\u003e antProps \u003d this.getProject().getProperties();\n         for (Object name : antProps.keySet()) {\n             final String key \u003d (String) name;\n             final String value \u003d String.valueOf(antProps.get(key));\n             retVal.put(key, value);\n         }\n \n         // override with properties specified in subelements\n-        for (Property p : mOverrideProps) {\n+        for (Property p : overrideProps) {\n             retVal.put(p.getKey(), p.getValue());\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n"
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "bd8a1a545fd1bc19d5f84c5061c5383796a7c588": {
      "type": "Ybodychange",
      "commitMessage": "New check FileTabCharacter  for ensuring that any files does not contain a tab character. It is now used to ensure the documentation files do not contain tabs.\n\nAlso introduced Utils.closeQuietly to clean up code.\n",
      "commitDate": 1225956072000,
      "commitName": "bd8a1a545fd1bc19d5f84c5061c5383796a7c588",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1209181531000,
      "commitNameOld": "911065320fb39299f442ea08f775cfe08ba2a2ed",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 194.15,
      "commitsBetweenForRepo": 45,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,39 @@\n     private Properties createOverridingProperties()\n     {\n         final Properties retVal \u003d new Properties();\n \n         // Load the properties file if specified\n         if (mPropertiesFile !\u003d null) {\n             FileInputStream inStream \u003d null;\n             try {\n                 inStream \u003d new FileInputStream(mPropertiesFile);\n                 retVal.load(inStream);\n             }\n             catch (final FileNotFoundException e) {\n                 throw new BuildException(\"Could not find Properties file \u0027\"\n                         + mPropertiesFile + \"\u0027\", e, getLocation());\n             }\n             catch (final IOException e) {\n                 throw new BuildException(\"Error loading Properties file \u0027\"\n                         + mPropertiesFile + \"\u0027\", e, getLocation());\n             }\n             finally {\n-                try {\n-                    if (inStream !\u003d null) {\n-                        inStream.close();\n-                    }\n-                }\n-                catch (final IOException e) {\n-                    throw new BuildException(\"Error closing Properties file \u0027\"\n-                            + mPropertiesFile + \"\u0027\", e, getLocation());\n-                }\n+                Utils.closeQuietly(inStream);\n             }\n         }\n \n         // override with Ant properties like ${basedir}\n         final Hashtable\u003c?, ?\u003e antProps \u003d this.getProject().getProperties();\n         for (Object name : antProps.keySet()) {\n             final String key \u003d (String) name;\n             final String value \u003d String.valueOf(antProps.get(key));\n             retVal.put(key, value);\n         }\n \n         // override with properties specified in subelements\n         for (Property p : mOverrideProps) {\n             retVal.put(p.getKey(), p.getValue());\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n"
    },
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1": {
      "type": "Ybodychange",
      "commitMessage": "Use the new syntactic sugar \"for loop\".\n\nEnd of the cosmetic changes.\n",
      "commitDate": 1197714527000,
      "commitName": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1197706480000,
      "commitNameOld": "f1afaf83f39b83cc3bd07a2388448b262652a76b",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,47 @@\n     private Properties createOverridingProperties()\n     {\n         final Properties retVal \u003d new Properties();\n \n         // Load the properties file if specified\n         if (mPropertiesFile !\u003d null) {\n             FileInputStream inStream \u003d null;\n             try {\n                 inStream \u003d new FileInputStream(mPropertiesFile);\n                 retVal.load(inStream);\n             }\n             catch (final FileNotFoundException e) {\n                 throw new BuildException(\"Could not find Properties file \u0027\"\n                         + mPropertiesFile + \"\u0027\", e, getLocation());\n             }\n             catch (final IOException e) {\n                 throw new BuildException(\"Error loading Properties file \u0027\"\n                         + mPropertiesFile + \"\u0027\", e, getLocation());\n             }\n             finally {\n                 try {\n                     if (inStream !\u003d null) {\n                         inStream.close();\n                     }\n                 }\n                 catch (final IOException e) {\n                     throw new BuildException(\"Error closing Properties file \u0027\"\n                             + mPropertiesFile + \"\u0027\", e, getLocation());\n                 }\n             }\n         }\n \n         // override with Ant properties like ${basedir}\n         final Hashtable\u003c?, ?\u003e antProps \u003d this.getProject().getProperties();\n-        for (final Iterator\u003c?\u003e it \u003d antProps.keySet().iterator(); it.hasNext();)\n-        {\n-            final String key \u003d (String) it.next();\n+        for (Object name : antProps.keySet()) {\n+            final String key \u003d (String) name;\n             final String value \u003d String.valueOf(antProps.get(key));\n             retVal.put(key, value);\n         }\n \n         // override with properties specified in subelements\n         for (Property p : mOverrideProps) {\n             retVal.put(p.getKey(), p.getValue());\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n"
    },
    "f1afaf83f39b83cc3bd07a2388448b262652a76b": {
      "type": "Ybodychange",
      "commitMessage": "Finish of adding generics.\n",
      "commitDate": 1197706480000,
      "commitName": "f1afaf83f39b83cc3bd07a2388448b262652a76b",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1180926242000,
      "commitNameOld": "02da493e64154d6bbac09a64d67a025f0e72cad1",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 194.22,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n     private Properties createOverridingProperties()\n     {\n         final Properties retVal \u003d new Properties();\n \n         // Load the properties file if specified\n         if (mPropertiesFile !\u003d null) {\n             FileInputStream inStream \u003d null;\n             try {\n                 inStream \u003d new FileInputStream(mPropertiesFile);\n                 retVal.load(inStream);\n             }\n             catch (final FileNotFoundException e) {\n                 throw new BuildException(\"Could not find Properties file \u0027\"\n                         + mPropertiesFile + \"\u0027\", e, getLocation());\n             }\n             catch (final IOException e) {\n                 throw new BuildException(\"Error loading Properties file \u0027\"\n                         + mPropertiesFile + \"\u0027\", e, getLocation());\n             }\n             finally {\n                 try {\n                     if (inStream !\u003d null) {\n                         inStream.close();\n                     }\n                 }\n                 catch (final IOException e) {\n                     throw new BuildException(\"Error closing Properties file \u0027\"\n                             + mPropertiesFile + \"\u0027\", e, getLocation());\n                 }\n             }\n         }\n \n         // override with Ant properties like ${basedir}\n-        final Hashtable antProps \u003d this.getProject().getProperties();\n-        for (final Iterator it \u003d antProps.keySet().iterator(); it.hasNext();) {\n+        final Hashtable\u003c?, ?\u003e antProps \u003d this.getProject().getProperties();\n+        for (final Iterator\u003c?\u003e it \u003d antProps.keySet().iterator(); it.hasNext();)\n+        {\n             final String key \u003d (String) it.next();\n             final String value \u003d String.valueOf(antProps.get(key));\n             retVal.put(key, value);\n         }\n \n         // override with properties specified in subelements\n-        for (final Iterator it \u003d mOverrideProps.iterator(); it.hasNext();) {\n-            final Property p \u003d (Property) it.next();\n+        for (Property p : mOverrideProps) {\n             retVal.put(p.getKey(), p.getValue());\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n"
    },
    "35d1673788bbbac8263fdb69275dc6a63b095a24": {
      "type": "Ybodychange",
      "commitMessage": "Making local variables final where possible.\n",
      "commitDate": 1152243856000,
      "commitName": "35d1673788bbbac8263fdb69275dc6a63b095a24",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1152242806000,
      "commitNameOld": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n     private Properties createOverridingProperties()\n     {\n         final Properties retVal \u003d new Properties();\n \n         // Load the properties file if specified\n         if (mPropertiesFile !\u003d null) {\n             FileInputStream inStream \u003d null;\n             try {\n                 inStream \u003d new FileInputStream(mPropertiesFile);\n                 retVal.load(inStream);\n             }\n-            catch (FileNotFoundException e) {\n+            catch (final FileNotFoundException e) {\n                 throw new BuildException(\"Could not find Properties file \u0027\"\n                         + mPropertiesFile + \"\u0027\", e, getLocation());\n             }\n-            catch (IOException e) {\n+            catch (final IOException e) {\n                 throw new BuildException(\"Error loading Properties file \u0027\"\n                         + mPropertiesFile + \"\u0027\", e, getLocation());\n             }\n             finally {\n                 try {\n                     if (inStream !\u003d null) {\n                         inStream.close();\n                     }\n                 }\n-                catch (IOException e) {\n+                catch (final IOException e) {\n                     throw new BuildException(\"Error closing Properties file \u0027\"\n                             + mPropertiesFile + \"\u0027\", e, getLocation());\n                 }\n             }\n         }\n \n         // override with Ant properties like ${basedir}\n         final Hashtable antProps \u003d this.getProject().getProperties();\n-        for (Iterator it \u003d antProps.keySet().iterator(); it.hasNext();) {\n+        for (final Iterator it \u003d antProps.keySet().iterator(); it.hasNext();) {\n             final String key \u003d (String) it.next();\n             final String value \u003d String.valueOf(antProps.get(key));\n             retVal.put(key, value);\n         }\n \n         // override with properties specified in subelements\n-        for (Iterator it \u003d mOverrideProps.iterator(); it.hasNext();) {\n+        for (final Iterator it \u003d mOverrideProps.iterator(); it.hasNext();) {\n             final Property p \u003d (Property) it.next();\n             retVal.put(p.getKey(), p.getValue());\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n"
    },
    "5d7063c660b241bce251f1a8c89394619f2791fb": {
      "type": "Ybodychange",
      "commitMessage": "Tighten up code\n",
      "commitDate": 1093527252000,
      "commitName": "5d7063c660b241bce251f1a8c89394619f2791fb",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1090410804000,
      "commitNameOld": "09dd78602f86ca6c996d1a79672c7614c5e42b96",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 36.07,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n     private Properties createOverridingProperties()\n     {\n         final Properties retVal \u003d new Properties();\n \n         // Load the properties file if specified\n         if (mPropertiesFile !\u003d null) {\n             FileInputStream inStream \u003d null;\n             try {\n                 inStream \u003d new FileInputStream(mPropertiesFile);\n                 retVal.load(inStream);\n             }\n             catch (FileNotFoundException e) {\n                 throw new BuildException(\n                     \"Could not find Properties file \u0027\" + mPropertiesFile + \"\u0027\",\n                     e, getLocation());\n             }\n             catch (IOException e) {\n                 throw new BuildException(\n                     \"Error loading Properties file \u0027\" + mPropertiesFile + \"\u0027\",\n                     e, getLocation());\n             }\n             finally {\n                 try {\n                     if (inStream !\u003d null) {\n                         inStream.close();\n                     }\n                 }\n                 catch (IOException e) {\n                     throw new BuildException(\n                         \"Error closing Properties file \u0027\"\n                         + mPropertiesFile + \"\u0027\",\n                         e, getLocation());\n                 }\n             }\n         }\n \n         // override with Ant properties like ${basedir}\n-        Hashtable antProps \u003d this.getProject().getProperties();\n+        final Hashtable antProps \u003d this.getProject().getProperties();\n         for (Iterator it \u003d antProps.keySet().iterator(); it.hasNext();) {\n             final String key \u003d (String) it.next();\n             final String value \u003d String.valueOf(antProps.get(key));\n             retVal.put(key, value);\n         }\n \n         // override with properties specified in subelements\n         for (Iterator it \u003d mOverrideProps.iterator(); it.hasNext();) {\n             final Property p \u003d (Property) it.next();\n             retVal.put(p.getKey(), p.getValue());\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n"
    },
    "ee2e1a5cb3c7dd02bf6b63c418126e41735ee0ea": {
      "type": "Ybodychange",
      "commitMessage": "moved property expansion from api package to private method of ConfigurationLoader (bug #670594)\nalso added property expansion of ANT properties\n",
      "commitDate": 1043783784000,
      "commitName": "ee2e1a5cb3c7dd02bf6b63c418126e41735ee0ea",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": 1043130225000,
      "commitNameOld": "a16368d3f85e8ad068ebf65a2025c8cf90cf7d3b",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 7.56,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,52 @@\n     private Properties createOverridingProperties()\n     {\n         final Properties retVal \u003d new Properties();\n \n         // Load the properties file if specified\n         if (mPropertiesFile !\u003d null) {\n             FileInputStream inStream \u003d null;\n             try {\n                 inStream \u003d new FileInputStream(mPropertiesFile);\n                 retVal.load(inStream);\n             }\n             catch (FileNotFoundException e) {\n                 throw new BuildException(\n                     \"Could not find Properties file \u0027\" + mPropertiesFile + \"\u0027\",\n                     e, getLocation());\n             }\n             catch (IOException e) {\n                 throw new BuildException(\n                     \"Error loading Properties file \u0027\" + mPropertiesFile + \"\u0027\",\n                     e, getLocation());\n             }\n             finally {\n                 try {\n                     if (inStream !\u003d null) {\n                         inStream.close();\n                     }\n                 }\n                 catch (IOException e) {\n                     throw new BuildException(\n                         \"Error closing Properties file \u0027\"\n                         + mPropertiesFile + \"\u0027\",\n                         e, getLocation());\n                 }\n             }\n         }\n \n-        // Now override the properties specified\n+        // override with Ant properties like ${basedir}\n+        Hashtable antProps \u003d this.getProject().getProperties();\n+        for (Iterator it \u003d antProps.keySet().iterator(); it.hasNext();) {\n+            final String key \u003d (String) it.next();\n+            final String value \u003d String.valueOf(antProps.get(key));\n+            retVal.put(key, value);\n+        }\n+\n+        // override with properties specified in subelements\n         for (Iterator it \u003d mOverrideProps.iterator(); it.hasNext();) {\n             final Property p \u003d (Property) it.next();\n             retVal.put(p.getKey(), p.getValue());\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n"
    },
    "a16368d3f85e8ad068ebf65a2025c8cf90cf7d3b": {
      "type": "Ybodychange",
      "commitMessage": "close the InputStream for property file loading explicitly\ninstead of relying on the stream\u0027s finalize method\n",
      "commitDate": 1043130225000,
      "commitName": "a16368d3f85e8ad068ebf65a2025c8cf90cf7d3b",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": 1042910017000,
      "commitNameOld": "a8c32f4d0f9efd7c31e3c490d0e1a265f0d5d5c0",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 2.55,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,44 @@\n     private Properties createOverridingProperties()\n     {\n         final Properties retVal \u003d new Properties();\n \n         // Load the properties file if specified\n         if (mPropertiesFile !\u003d null) {\n+            FileInputStream inStream \u003d null;\n             try {\n-                retVal.load(new FileInputStream(mPropertiesFile));\n+                inStream \u003d new FileInputStream(mPropertiesFile);\n+                retVal.load(inStream);\n             }\n             catch (FileNotFoundException e) {\n                 throw new BuildException(\n                     \"Could not find Properties file \u0027\" + mPropertiesFile + \"\u0027\",\n                     e, getLocation());\n             }\n             catch (IOException e) {\n                 throw new BuildException(\n                     \"Error loading Properties file \u0027\" + mPropertiesFile + \"\u0027\",\n                     e, getLocation());\n             }\n+            finally {\n+                try {\n+                    if (inStream !\u003d null) {\n+                        inStream.close();\n+                    }\n+                }\n+                catch (IOException e) {\n+                    throw new BuildException(\n+                        \"Error closing Properties file \u0027\"\n+                        + mPropertiesFile + \"\u0027\",\n+                        e, getLocation());\n+                }\n+            }\n         }\n \n         // Now override the properties specified\n         for (Iterator it \u003d mOverrideProps.iterator(); it.hasNext();) {\n             final Property p \u003d (Property) it.next();\n             retVal.put(p.getKey(), p.getValue());\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n"
    },
    "2debda611fe487021711aa4acce56651799a778f": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
      "commitMessage": "Added overriding global properties\nNeeds testing, especially in ant with CheckstyleTask.\n",
      "commitDate": 1037475487000,
      "commitName": "2debda611fe487021711aa4acce56651799a778f",
      "commitAuthor": "Rick Giles",
      "subchanges": [
        "Yrename",
        "Yreturntypechange",
        "Ybodychange"
      ]
    },
    "6f4247181beca3530b5c2dc762d9c5c6a018a06c": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
      "commitMessage": "rename Configuration to GlobalProperties\n",
      "commitDate": 1037268436000,
      "commitName": "6f4247181beca3530b5c2dc762d9c5c6a018a06c",
      "commitAuthor": "Rick Giles",
      "subchanges": [
        "Yrename",
        "Yreturntypechange",
        "Ybodychange"
      ]
    },
    "49eb0e934ee82cf33c6643a4a15eb74ad471a6a9": {
      "type": "Yintroduced",
      "commitMessage": "Yet another refactor to have the ANT task support a nested \u003cproperty\u003e\nelement. This let me remove the ugly have I put in to support relative\npaths. Got the idea from Vincet Massol. Bug 605141.\n",
      "commitDate": 1031362600000,
      "commitName": "49eb0e934ee82cf33c6643a4a15eb74ad471a6a9",
      "commitAuthor": "Oliver Burn"
    }
  }
}