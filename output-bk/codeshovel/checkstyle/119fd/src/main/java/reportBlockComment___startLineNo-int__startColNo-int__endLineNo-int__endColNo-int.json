{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "java",
  "functionId": "reportBlockComment___startLineNo-int__startColNo-int__endLineNo-int__endColNo-int",
  "sourceFilePath": "src/main/java",
  "functionStartLine": 0,
  "functionEndLine": 149,
  "changeHistory": [
    "66cc9d43c9620678078d2716308ee61916227fcb",
    "6e8d1e06728b7defbd734253b3818a33676b62bc",
    "fbf3f95c2273be23b966cba6e6ef89390a6fb020",
    "16493bfb502b73de0c19ca19d99f33bc3d6ce7e4",
    "4c1148db9982918e65f8d1156e8fb9c07b206fc9",
    "2f9b0f057c489d074967575696a0d53a34fec6b7",
    "b94bac0719851b65b59b4aafc5bd3ef029321ed7",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "3cd6646941eca3da7d3b9a221c88e4c1d214876e",
    "7552a0b72e07c9a0070e84789b5abe6d293de6e0",
    "22705bd0d4d4867f646b8c3aca115d7b3cb9c022",
    "262209477f39964a63103613f3e2c985da083371",
    "803dafc96a33bd987f84d930b9ae3ebf7a23e097",
    "2e572720e6c20f8b34b4616df470ad7fdb3d5b16",
    "7514320e04e4d35a4317172876e5f11e69a2c891",
    "7af9e82fc16545a8153b529fba91df0fb310e2e6"
  ],
  "changeHistoryShort": {
    "66cc9d43c9620678078d2716308ee61916227fcb": "Ymodifierchange",
    "6e8d1e06728b7defbd734253b3818a33676b62bc": "Ymultichange(Yrename,Ybodychange)",
    "fbf3f95c2273be23b966cba6e6ef89390a6fb020": "Ybodychange",
    "16493bfb502b73de0c19ca19d99f33bc3d6ce7e4": "Ybodychange",
    "4c1148db9982918e65f8d1156e8fb9c07b206fc9": "Ybodychange",
    "2f9b0f057c489d074967575696a0d53a34fec6b7": "Ybodychange",
    "b94bac0719851b65b59b4aafc5bd3ef029321ed7": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "3cd6646941eca3da7d3b9a221c88e4c1d214876e": "Ybodychange",
    "7552a0b72e07c9a0070e84789b5abe6d293de6e0": "Ybodychange",
    "22705bd0d4d4867f646b8c3aca115d7b3cb9c022": "Ybodychange",
    "262209477f39964a63103613f3e2c985da083371": "Ybodychange",
    "803dafc96a33bd987f84d930b9ae3ebf7a23e097": "Ybodychange",
    "2e572720e6c20f8b34b4616df470ad7fdb3d5b16": "Ybodychange",
    "7514320e04e4d35a4317172876e5f11e69a2c891": "Ybodychange",
    "7af9e82fc16545a8153b529fba91df0fb310e2e6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "66cc9d43c9620678078d2716308ee61916227fcb": {
      "type": "Ymodifierchange",
      "commitMessage": "Issue #4801: partial resolve of WeakerAccess violations\n",
      "commitDate": 1502306263000,
      "commitName": "66cc9d43c9620678078d2716308ee61916227fcb",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": 1499372568000,
      "commitNameOld": "82979737c4201b4913ea30b9c9431e71783d1c02",
      "commitAuthorOld": "Timur",
      "daysBetweenCommits": 33.95,
      "commitsBetweenForRepo": 196,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n-    public void reportBlockComment(int startLineNo, int startColNo,\n+    private void reportBlockComment(int startLineNo, int startColNo,\n             int endLineNo, int endColNo) {\n         final String[] cComment \u003d extractBlockComment(startLineNo, startColNo,\n                 endLineNo, endColNo);\n         final Comment comment \u003d new Comment(cComment, startColNo, endLineNo,\n                 endColNo);\n \n         // save the comment\n         if (clangComments.containsKey(startLineNo)) {\n             final List\u003cTextBlock\u003e entries \u003d clangComments.get(startLineNo);\n             entries.add(comment);\n         }\n         else {\n             final List\u003cTextBlock\u003e entries \u003d new ArrayList\u003c\u003e();\n             entries.add(comment);\n             clangComments.put(startLineNo, entries);\n         }\n \n         // Remember if possible Javadoc comment\n         final String firstLine \u003d line(startLineNo - 1);\n         if (firstLine.contains(\"/**\") \u0026\u0026 !firstLine.contains(\"/**/\")) {\n             javadocComments.put(endLineNo - 1, comment);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "6e8d1e06728b7defbd734253b3818a33676b62bc": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "Issue #3721: enforced no abbreviations in checkstyle",
      "commitDate": 1487369078000,
      "commitName": "6e8d1e06728b7defbd734253b3818a33676b62bc",
      "commitAuthor": "rnveach",
      "subchanges": [
        "Yrename",
        "Ybodychange"
      ]
    },
    "fbf3f95c2273be23b966cba6e6ef89390a6fb020": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3433: Cut down on Checkstyle\u0027s dependencies on Guava (part 2) (#3454)\n\n",
      "commitDate": 1474426326000,
      "commitName": "fbf3f95c2273be23b966cba6e6ef89390a6fb020",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": 1453646135000,
      "commitNameOld": "0d8e93ce79ea33b72b3e904d8796984271ee3d8d",
      "commitAuthorOld": "Bhavik Patel",
      "daysBetweenCommits": 240.51,
      "commitsBetweenForRepo": 521,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n     public void reportCComment(int startLineNo, int startColNo,\n             int endLineNo, int endColNo) {\n         final String[] cComment \u003d extractCComment(startLineNo, startColNo,\n                 endLineNo, endColNo);\n         final Comment comment \u003d new Comment(cComment, startColNo, endLineNo,\n                 endColNo);\n \n         // save the comment\n         if (clangComments.containsKey(startLineNo)) {\n             final List\u003cTextBlock\u003e entries \u003d clangComments.get(startLineNo);\n             entries.add(comment);\n         }\n         else {\n-            final List\u003cTextBlock\u003e entries \u003d Lists.newArrayList();\n+            final List\u003cTextBlock\u003e entries \u003d new ArrayList\u003c\u003e();\n             entries.add(comment);\n             clangComments.put(startLineNo, entries);\n         }\n \n         // Remember if possible Javadoc comment\n         final String firstLine \u003d line(startLineNo - 1);\n         if (firstLine.contains(\"/**\") \u0026\u0026 !firstLine.contains(\"/**/\")) {\n             javadocComments.put(endLineNo - 1, comment);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "16493bfb502b73de0c19ca19d99f33bc3d6ce7e4": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2387: Do not recognize \u0027/**/\u0027 as valid Javadoc\n",
      "commitDate": 1446329527000,
      "commitName": "16493bfb502b73de0c19ca19d99f33bc3d6ce7e4",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1445038509000,
      "commitNameOld": "ce196814d857a4244a80c51d5151cc35e90b6749",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 14.94,
      "commitsBetweenForRepo": 86,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n     public void reportCComment(int startLineNo, int startColNo,\n             int endLineNo, int endColNo) {\n         final String[] cComment \u003d extractCComment(startLineNo, startColNo,\n                 endLineNo, endColNo);\n         final Comment comment \u003d new Comment(cComment, startColNo, endLineNo,\n                 endColNo);\n \n         // save the comment\n         if (clangComments.containsKey(startLineNo)) {\n             final List\u003cTextBlock\u003e entries \u003d clangComments.get(startLineNo);\n             entries.add(comment);\n         }\n         else {\n             final List\u003cTextBlock\u003e entries \u003d Lists.newArrayList();\n             entries.add(comment);\n             clangComments.put(startLineNo, entries);\n         }\n \n         // Remember if possible Javadoc comment\n-        if (line(startLineNo - 1).indexOf(\"/**\", startColNo) !\u003d -1) {\n+        final String firstLine \u003d line(startLineNo - 1);\n+        if (firstLine.contains(\"/**\") \u0026\u0026 !firstLine.contains(\"/**/\")) {\n             javadocComments.put(endLineNo - 1, comment);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "4c1148db9982918e65f8d1156e8fb9c07b206fc9": {
      "type": "Ybodychange",
      "commitMessage": "Rename variables with questionable names. #1555\n\nFixes `QuestionableName` inspection violations.\n\nDescription:\n\u003eReports on any variables, methods, or classes with questionable names. This inspection is best used to report common metasyntactic variables which may be used as names by lazy or confused developers.\n Use the list below to specify names which should be reported\n",
      "commitDate": 1439008817000,
      "commitName": "4c1148db9982918e65f8d1156e8fb9c07b206fc9",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1439007067000,
      "commitNameOld": "7d513f08c27c741105f712dc882fd4c3553f71e7",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     public void reportCComment(int startLineNo, int startColNo,\n             int endLineNo, int endColNo) {\n-        final String[] cc \u003d extractCComment(startLineNo, startColNo,\n+        final String[] cComment \u003d extractCComment(startLineNo, startColNo,\n                 endLineNo, endColNo);\n-        final Comment comment \u003d new Comment(cc, startColNo, endLineNo,\n+        final Comment comment \u003d new Comment(cComment, startColNo, endLineNo,\n                 endColNo);\n \n         // save the comment\n         if (clangComments.containsKey(startLineNo)) {\n             final List\u003cTextBlock\u003e entries \u003d clangComments.get(startLineNo);\n             entries.add(comment);\n         }\n         else {\n             final List\u003cTextBlock\u003e entries \u003d Lists.newArrayList();\n             entries.add(comment);\n             clangComments.put(startLineNo, entries);\n         }\n \n         // Remember if possible Javadoc comment\n         if (line(startLineNo - 1).indexOf(\"/**\", startColNo) !\u003d -1) {\n             javadocComments.put(endLineNo - 1, comment);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "2f9b0f057c489d074967575696a0d53a34fec6b7": {
      "type": "Ybodychange",
      "commitMessage": "additional fixes for naming after MemberName Check is using Google pattern\n",
      "commitDate": 1421802935000,
      "commitName": "2f9b0f057c489d074967575696a0d53a34fec6b7",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": 1421678312000,
      "commitNameOld": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 1.44,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n     public void reportCComment(int startLineNo, int startColNo,\n             int endLineNo, int endColNo)\n     {\n         final String[] cc \u003d extractCComment(startLineNo, startColNo,\n                 endLineNo, endColNo);\n         final Comment comment \u003d new Comment(cc, startColNo, endLineNo,\n                 endColNo);\n \n         // save the comment\n-        if (cComments.containsKey(startLineNo)) {\n-            final List\u003cTextBlock\u003e entries \u003d cComments.get(startLineNo);\n+        if (clangComments.containsKey(startLineNo)) {\n+            final List\u003cTextBlock\u003e entries \u003d clangComments.get(startLineNo);\n             entries.add(comment);\n         }\n         else {\n             final List\u003cTextBlock\u003e entries \u003d Lists.newArrayList();\n             entries.add(comment);\n-            cComments.put(startLineNo, entries);\n+            clangComments.put(startLineNo, entries);\n         }\n \n         // Remember if possible Javadoc comment\n         if (line(startLineNo - 1).indexOf(\"/**\", startColNo) !\u003d -1) {\n             javadocComments.put(endLineNo - 1, comment);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "b94bac0719851b65b59b4aafc5bd3ef029321ed7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, api, #512\n",
      "commitDate": 1421677181000,
      "commitName": "b94bac0719851b65b59b4aafc5bd3ef029321ed7",
      "commitAuthor": "alexkravin",
      "subchanges": [
        "Yparameterchange",
        "Ybodychange"
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "3cd6646941eca3da7d3b9a221c88e4c1d214876e": {
      "type": "Ybodychange",
      "commitMessage": "Apply patch #2783226 that uses FileText as an implementation for\nList\u003cString\u003e to pass lines around\n",
      "commitDate": 1277730133000,
      "commitName": "3cd6646941eca3da7d3b9a221c88e4c1d214876e",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1266029835000,
      "commitNameOld": "523080bbf2be11354b94b851ac85d06e7e8a2c14",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 135.42,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n     public void reportCComment(int aStartLineNo, int aStartColNo,\n             int aEndLineNo, int aEndColNo)\n     {\n         final String[] cc \u003d extractCComment(aStartLineNo, aStartColNo,\n                 aEndLineNo, aEndColNo);\n         final Comment comment \u003d new Comment(cc, aStartColNo, aEndLineNo,\n                 aEndColNo);\n \n         // save the comment\n         if (mCComments.containsKey(aStartLineNo)) {\n             final List\u003cTextBlock\u003e entries \u003d mCComments.get(aStartLineNo);\n             entries.add(comment);\n         }\n         else {\n             final List\u003cTextBlock\u003e entries \u003d Lists.newArrayList();\n             entries.add(comment);\n             mCComments.put(aStartLineNo, entries);\n         }\n \n         // Remember if possible Javadoc comment\n-        if (mLines[aStartLineNo - 1].indexOf(\"/**\", aStartColNo) !\u003d -1) {\n+        if (line(aStartLineNo - 1).indexOf(\"/**\", aStartColNo) !\u003d -1) {\n             mJavadocComments.put(aEndLineNo - 1, comment);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "7552a0b72e07c9a0070e84789b5abe6d293de6e0": {
      "type": "Ybodychange",
      "commitMessage": "Drinking the \"Google Collections\" Kool-Aid.\n\nI like the reduced duplication.\n",
      "commitDate": 1208867287000,
      "commitName": "7552a0b72e07c9a0070e84789b5abe6d293de6e0",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1200192438000,
      "commitNameOld": "5a7e221b757e91d49be1aea105eb4b839e653fbd",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 100.4,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n     public void reportCComment(int aStartLineNo, int aStartColNo,\n             int aEndLineNo, int aEndColNo)\n     {\n         final String[] cc \u003d extractCComment(aStartLineNo, aStartColNo,\n                 aEndLineNo, aEndColNo);\n         final Comment comment \u003d new Comment(cc, aStartColNo, aEndLineNo,\n                 aEndColNo);\n \n         // save the comment\n         if (mCComments.containsKey(aStartLineNo)) {\n             final List\u003cTextBlock\u003e entries \u003d mCComments.get(aStartLineNo);\n             entries.add(comment);\n         }\n         else {\n-            final List\u003cTextBlock\u003e entries \u003d new ArrayList\u003cTextBlock\u003e();\n+            final List\u003cTextBlock\u003e entries \u003d Lists.newArrayList();\n             entries.add(comment);\n             mCComments.put(aStartLineNo, entries);\n         }\n \n         // Remember if possible Javadoc comment\n         if (mLines[aStartLineNo - 1].indexOf(\"/**\", aStartColNo) !\u003d -1) {\n             mJavadocComments.put(aEndLineNo - 1, comment);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "22705bd0d4d4867f646b8c3aca115d7b3cb9c022": {
      "type": "Ybodychange",
      "commitMessage": "Removal of explicit boxing.\n",
      "commitDate": 1198150614000,
      "commitName": "22705bd0d4d4867f646b8c3aca115d7b3cb9c022",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1197714527000,
      "commitNameOld": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 5.05,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,24 @@\n     public void reportCComment(int aStartLineNo, int aStartColNo,\n             int aEndLineNo, int aEndColNo)\n     {\n         final String[] cc \u003d extractCComment(aStartLineNo, aStartColNo,\n                 aEndLineNo, aEndColNo);\n         final Comment comment \u003d new Comment(cc, aStartColNo, aEndLineNo,\n                 aEndColNo);\n \n         // save the comment\n-        final Integer key \u003d new Integer(aStartLineNo);\n-        if (mCComments.containsKey(key)) {\n-            final List\u003cTextBlock\u003e entries \u003d mCComments.get(key);\n+        if (mCComments.containsKey(aStartLineNo)) {\n+            final List\u003cTextBlock\u003e entries \u003d mCComments.get(aStartLineNo);\n             entries.add(comment);\n         }\n         else {\n             final List\u003cTextBlock\u003e entries \u003d new ArrayList\u003cTextBlock\u003e();\n             entries.add(comment);\n-            mCComments.put(key, entries);\n+            mCComments.put(aStartLineNo, entries);\n         }\n \n         // Remember if possible Javadoc comment\n         if (mLines[aStartLineNo - 1].indexOf(\"/**\", aStartColNo) !\u003d -1) {\n-            mJavadocComments.put(new Integer(aEndLineNo - 1), comment);\n+            mJavadocComments.put(aEndLineNo - 1, comment);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "262209477f39964a63103613f3e2c985da083371": {
      "type": "Ybodychange",
      "commitMessage": "Start of adding generics.\n",
      "commitDate": 1197697256000,
      "commitName": "262209477f39964a63103613f3e2c985da083371",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1169909494000,
      "commitNameOld": "1efc394250b8f1c79bd7f8344b738a7d13396ed3",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 321.62,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n     public void reportCComment(int aStartLineNo, int aStartColNo,\n-                               int aEndLineNo, int aEndColNo)\n+            int aEndLineNo, int aEndColNo)\n     {\n         final String[] cc \u003d extractCComment(aStartLineNo, aStartColNo,\n-                                            aEndLineNo, aEndColNo);\n+                aEndLineNo, aEndColNo);\n         final Comment comment \u003d new Comment(cc, aStartColNo, aEndLineNo,\n-                                            aEndColNo);\n+                aEndColNo);\n \n         // save the comment\n         final Integer key \u003d new Integer(aStartLineNo);\n         if (mCComments.containsKey(key)) {\n-            final List entries \u003d (List) mCComments.get(key);\n+            final List\u003cTextBlock\u003e entries \u003d mCComments.get(key);\n             entries.add(comment);\n         }\n         else {\n-            final List entries \u003d new ArrayList();\n+            final List\u003cTextBlock\u003e entries \u003d new ArrayList\u003cTextBlock\u003e();\n             entries.add(comment);\n             mCComments.put(key, entries);\n         }\n \n         // Remember if possible Javadoc comment\n         if (mLines[aStartLineNo - 1].indexOf(\"/**\", aStartColNo) !\u003d -1) {\n             mJavadocComments.put(new Integer(aEndLineNo - 1), comment);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "803dafc96a33bd987f84d930b9ae3ebf7a23e097": {
      "type": "Ybodychange",
      "commitMessage": "Implemented 885993 (Wrap all comments into TextBlocks).\nDraft implementation for 744970 (Forbid endline comments)\n",
      "commitDate": 1075344110000,
      "commitName": "803dafc96a33bd987f84d930b9ae3ebf7a23e097",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1074114639000,
      "commitNameOld": "5670252b46f4915b276e647fa000361915eb4ff4",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 14.23,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n     public void reportCComment(int aStartLineNo, int aStartColNo,\n                                int aEndLineNo, int aEndColNo)\n     {\n         final String[] cc \u003d extractCComment(aStartLineNo, aStartColNo,\n                                             aEndLineNo, aEndColNo);\n+        final Comment comment \u003d new Comment(cc, aStartColNo, aEndLineNo,\n+                                            aEndColNo);\n \n         // save the comment\n         final Integer key \u003d new Integer(aStartLineNo);\n         if (mCComments.containsKey(key)) {\n             final List entries \u003d (List) mCComments.get(key);\n-            entries.add(cc);\n+            entries.add(comment);\n         }\n         else {\n             final List entries \u003d new ArrayList();\n-            entries.add(cc);\n+            entries.add(comment);\n             mCComments.put(key, entries);\n         }\n \n         // Remember if possible Javadoc comment\n         if (mLines[aStartLineNo - 1].indexOf(\"/**\", aStartColNo) !\u003d -1) {\n-            Comment comment \u003d new Comment(cc, aStartColNo, aEndLineNo);\n-\n             mJavadocComments.put(new Integer(aEndLineNo - 1), comment);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "2e572720e6c20f8b34b4616df470ad7fdb3d5b16": {
      "type": "Ybodychange",
      "commitMessage": "added column information to text blocks\nThis is a step towards implementing RFE #680988, Don\u0027t apply GenericIllegalRegexp on comments\n",
      "commitDate": 1073399331000,
      "commitName": "2e572720e6c20f8b34b4616df470ad7fdb3d5b16",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": 1069656302000,
      "commitNameOld": "8fb2acd39b7db6223486f5e06126c7f0a2642a72",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 43.32,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,25 @@\n     public void reportCComment(int aStartLineNo, int aStartColNo,\n                                int aEndLineNo, int aEndColNo)\n     {\n         final String[] cc \u003d extractCComment(aStartLineNo, aStartColNo,\n                                             aEndLineNo, aEndColNo);\n \n         // save the comment\n         final Integer key \u003d new Integer(aStartLineNo);\n         if (mCComments.containsKey(key)) {\n             final List entries \u003d (List) mCComments.get(key);\n             entries.add(cc);\n         }\n         else {\n             final List entries \u003d new ArrayList();\n             entries.add(cc);\n             mCComments.put(key, entries);\n         }\n \n         // Remember if possible Javadoc comment\n         if (mLines[aStartLineNo - 1].indexOf(\"/**\", aStartColNo) !\u003d -1) {\n-            mJavadocComments.put(new Integer(aEndLineNo - 1), cc);\n+            Comment comment \u003d new Comment(cc, aStartColNo, aEndLineNo);\n+\n+            mJavadocComments.put(new Integer(aEndLineNo - 1), comment);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "7514320e04e4d35a4317172876e5f11e69a2c891": {
      "type": "Ybodychange",
      "commitMessage": "Implemented the TODO check that goes against comments only.\n",
      "commitDate": 1037153986000,
      "commitName": "7514320e04e4d35a4317172876e5f11e69a2c891",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1036957584000,
      "commitNameOld": "851bdcdfa56e2a1dbf9f865d08df323b5b072984",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 2.27,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,23 @@\n     public void reportCComment(int aStartLineNo, int aStartColNo,\n                                int aEndLineNo, int aEndColNo)\n     {\n         final String[] cc \u003d extractCComment(aStartLineNo, aStartColNo,\n                                             aEndLineNo, aEndColNo);\n \n+        // save the comment\n+        final Integer key \u003d new Integer(aStartLineNo);\n+        if (mCComments.containsKey(key)) {\n+            final List entries \u003d (List) mCComments.get(key);\n+            entries.add(cc);\n+        }\n+        else {\n+            final List entries \u003d new ArrayList();\n+            entries.add(cc);\n+            mCComments.put(key, entries);\n+        }\n+\n         // Remember if possible Javadoc comment\n         if (mLines[aStartLineNo - 1].indexOf(\"/**\", aStartColNo) !\u003d -1) {\n             mJavadocComments.put(new Integer(aEndLineNo - 1), cc);\n         }\n     }\n\\ No newline at end of file\n"
    },
    "7af9e82fc16545a8153b529fba91df0fb310e2e6": {
      "type": "Yintroduced",
      "commitMessage": "Refactored the comment manager class to having a file contents class. This\nclass has the file name, lines and comments.\n",
      "commitDate": 1035466470000,
      "commitName": "7af9e82fc16545a8153b529fba91df0fb310e2e6",
      "commitAuthor": "Oliver Burn"
    }
  }
}