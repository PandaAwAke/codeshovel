{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/ncbradley/codeshovel-repos/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "java",
  "functionId": "createRootModule",
  "sourceFilePath": "src/main/java",
  "functionStartLine": 0,
  "functionEndLine": 434,
  "changeHistory": [
    "dc88a9954baf88df6543cf73baabed710f882363",
    "036582d728d2e2bb37f360bb3a74f899f04d587d",
    "61f2ef243a13f4105965dad88b647f5c64e41f86",
    "db21f8b13a1e593711727c1cb0192af46409a343",
    "785ed054a6e14465f8b2b717d28ec1a700de23a1",
    "f65b17cbc30795247fef3077cce16a8bb53e9ffc",
    "346387c717048391485fb28f877531aab1095de1",
    "be3e035ce39a610881cd2c1bfdce3eef101c2e3c",
    "3ef918920c58c550169ccef3cfe1706aede11a6e",
    "f1e80e4ecae727087ca135dfd02f72e2d6213efb",
    "8a3f5bf6d5389b9e175c9c769992faece6d76ada",
    "500bf308fac4adc61bd3087a664779c8622efb3b",
    "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "fe9057366308642868c25d427c3ee94411b37170",
    "585f7c20a1e9e3ca4a04ffedf4e1cedc449acd97",
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
    "35d1673788bbbac8263fdb69275dc6a63b095a24",
    "adce874628730a881c533bb04db2688d03a60fc6",
    "33f75977205625bc5f9620a2c63e16a11f9663a5",
    "66325cbd72882454193765322efa716537ce9c93",
    "b1123e96e452b41c5fb22de20bb7a99d376d0380"
  ],
  "changeHistoryShort": {
    "dc88a9954baf88df6543cf73baabed710f882363": "Ybodychange",
    "036582d728d2e2bb37f360bb3a74f899f04d587d": "Ybodychange",
    "61f2ef243a13f4105965dad88b647f5c64e41f86": "Ybodychange",
    "db21f8b13a1e593711727c1cb0192af46409a343": "Ybodychange",
    "785ed054a6e14465f8b2b717d28ec1a700de23a1": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
    "f65b17cbc30795247fef3077cce16a8bb53e9ffc": "Ybodychange",
    "346387c717048391485fb28f877531aab1095de1": "Ybodychange",
    "be3e035ce39a610881cd2c1bfdce3eef101c2e3c": "Ybodychange",
    "3ef918920c58c550169ccef3cfe1706aede11a6e": "Ybodychange",
    "f1e80e4ecae727087ca135dfd02f72e2d6213efb": "Ybodychange",
    "8a3f5bf6d5389b9e175c9c769992faece6d76ada": "Ybodychange",
    "500bf308fac4adc61bd3087a664779c8622efb3b": "Yfilerename",
    "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "fe9057366308642868c25d427c3ee94411b37170": "Ybodychange",
    "585f7c20a1e9e3ca4a04ffedf4e1cedc449acd97": "Ybodychange",
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1": "Ybodychange",
    "35d1673788bbbac8263fdb69275dc6a63b095a24": "Ybodychange",
    "adce874628730a881c533bb04db2688d03a60fc6": "Ybodychange",
    "33f75977205625bc5f9620a2c63e16a11f9663a5": "Ybodychange",
    "66325cbd72882454193765322efa716537ce9c93": "Ybodychange",
    "b1123e96e452b41c5fb22de20bb7a99d376d0380": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dc88a9954baf88df6543cf73baabed710f882363": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4709: fix avoid boolean parameters for public methods\n",
      "commitDate": 1502279688000,
      "commitName": "dc88a9954baf88df6543cf73baabed710f882363",
      "commitAuthor": "vasilyeva",
      "commitDateOld": 1500859159000,
      "commitNameOld": "4c10bc55b4aea0f7e3b95b06d820eedb7c6a6fb2",
      "commitAuthorOld": "vasilyeva",
      "daysBetweenCommits": 16.44,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,41 @@\n     private RootModule createRootModule() {\n         final RootModule rootModule;\n         try {\n             final Properties props \u003d createOverridingProperties();\n             final ThreadModeSettings threadModeSettings \u003d\n                     ThreadModeSettings.SINGLE_THREAD_MODE_INSTANCE;\n-            final Configuration configuration \u003d ConfigurationLoader.loadConfiguration(\n-                    config, new PropertiesExpander(props),\n-                    !executeIgnoredModules, threadModeSettings);\n+            final ConfigurationLoader.IgnoredModulesOptions ignoredModulesOptions;\n+            if (executeIgnoredModules) {\n+                ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.EXECUTE;\n+            }\n+            else {\n+                ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.OMIT;\n+            }\n+\n+            final Configuration configuration \u003d ConfigurationLoader.loadConfiguration(config,\n+                    new PropertiesExpander(props), ignoredModulesOptions, threadModeSettings);\n \n             final ClassLoader moduleClassLoader \u003d\n                 Checker.class.getClassLoader();\n \n             final ModuleFactory factory \u003d new PackageObjectFactory(\n                     Checker.class.getPackage().getName() + \".\", moduleClassLoader);\n \n             rootModule \u003d (RootModule) factory.createModule(configuration.getName());\n             rootModule.setModuleClassLoader(moduleClassLoader);\n \n             if (rootModule instanceof Checker) {\n                 final ClassLoader loader \u003d new AntClassLoader(getProject(),\n                         classpath);\n \n                 ((Checker) rootModule).setClassLoader(loader);\n             }\n \n             rootModule.configure(configuration);\n         }\n         catch (final CheckstyleException ex) {\n             throw new BuildException(String.format(Locale.ROOT, \"Unable to create Root Module: \"\n                     + \"config {%s}, classpath {%s}.\", config, classpath), ex);\n         }\n         return rootModule;\n     }\n\\ No newline at end of file\n"
    },
    "036582d728d2e2bb37f360bb3a74f899f04d587d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4370: Add multi thread mode to checkstyle launcher\n",
      "commitDate": 1499049797000,
      "commitName": "036582d728d2e2bb37f360bb3a74f899f04d587d",
      "commitAuthor": "Andrew Kuchev",
      "commitDateOld": 1498432309000,
      "commitNameOld": "61f2ef243a13f4105965dad88b647f5c64e41f86",
      "commitAuthorOld": "Michael Diamond",
      "daysBetweenCommits": 7.15,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     private RootModule createRootModule() {\n         final RootModule rootModule;\n         try {\n             final Properties props \u003d createOverridingProperties();\n-            final Configuration configuration \u003d\n-                ConfigurationLoader.loadConfiguration(\n-                    config,\n-                    new PropertiesExpander(props),\n-                    !executeIgnoredModules);\n+            final ThreadModeSettings threadModeSettings \u003d\n+                    ThreadModeSettings.SINGLE_THREAD_MODE_INSTANCE;\n+            final Configuration configuration \u003d ConfigurationLoader.loadConfiguration(\n+                    config, new PropertiesExpander(props),\n+                    !executeIgnoredModules, threadModeSettings);\n \n             final ClassLoader moduleClassLoader \u003d\n                 Checker.class.getClassLoader();\n \n             final ModuleFactory factory \u003d new PackageObjectFactory(\n                     Checker.class.getPackage().getName() + \".\", moduleClassLoader);\n \n             rootModule \u003d (RootModule) factory.createModule(configuration.getName());\n             rootModule.setModuleClassLoader(moduleClassLoader);\n \n             if (rootModule instanceof Checker) {\n                 final ClassLoader loader \u003d new AntClassLoader(getProject(),\n                         classpath);\n \n                 ((Checker) rootModule).setClassLoader(loader);\n             }\n \n             rootModule.configure(configuration);\n         }\n         catch (final CheckstyleException ex) {\n             throw new BuildException(String.format(Locale.ROOT, \"Unable to create Root Module: \"\n                     + \"config {%s}, classpath {%s}.\", config, classpath), ex);\n         }\n         return rootModule;\n     }\n\\ No newline at end of file\n"
    },
    "61f2ef243a13f4105965dad88b647f5c64e41f86": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4449: Remove the Ant configUrl attribute and let config accept arbitrary strings, to be consistent with other config logic\n",
      "commitDate": 1498432309000,
      "commitName": "61f2ef243a13f4105965dad88b647f5c64e41f86",
      "commitAuthor": "Michael Diamond",
      "commitDateOld": 1497909220000,
      "commitNameOld": "db21f8b13a1e593711727c1cb0192af46409a343",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 6.05,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     private RootModule createRootModule() {\n         final RootModule rootModule;\n         try {\n             final Properties props \u003d createOverridingProperties();\n-            final Configuration config \u003d\n+            final Configuration configuration \u003d\n                 ConfigurationLoader.loadConfiguration(\n-                    configLocation,\n+                    config,\n                     new PropertiesExpander(props),\n                     !executeIgnoredModules);\n \n             final ClassLoader moduleClassLoader \u003d\n                 Checker.class.getClassLoader();\n \n             final ModuleFactory factory \u003d new PackageObjectFactory(\n                     Checker.class.getPackage().getName() + \".\", moduleClassLoader);\n \n-            rootModule \u003d (RootModule) factory.createModule(config.getName());\n+            rootModule \u003d (RootModule) factory.createModule(configuration.getName());\n             rootModule.setModuleClassLoader(moduleClassLoader);\n \n             if (rootModule instanceof Checker) {\n                 final ClassLoader loader \u003d new AntClassLoader(getProject(),\n                         classpath);\n \n                 ((Checker) rootModule).setClassLoader(loader);\n             }\n \n-            rootModule.configure(config);\n+            rootModule.configure(configuration);\n         }\n         catch (final CheckstyleException ex) {\n             throw new BuildException(String.format(Locale.ROOT, \"Unable to create Root Module: \"\n-                    + \"configLocation {%s}, classpath {%s}.\", configLocation, classpath), ex);\n+                    + \"config {%s}, classpath {%s}.\", config, classpath), ex);\n         }\n         return rootModule;\n     }\n\\ No newline at end of file\n"
    },
    "db21f8b13a1e593711727c1cb0192af46409a343": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3566: renamed ant\u0027s omitIgnoredModules",
      "commitDate": 1497909220000,
      "commitName": "db21f8b13a1e593711727c1cb0192af46409a343",
      "commitAuthor": "rnveach",
      "commitDateOld": 1493480910000,
      "commitNameOld": "48f9e33c3f73f50051e8618ae83aa9444bae9784",
      "commitAuthorOld": "Andrew Kuchev",
      "daysBetweenCommits": 51.25,
      "commitsBetweenForRepo": 122,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     private RootModule createRootModule() {\n         final RootModule rootModule;\n         try {\n             final Properties props \u003d createOverridingProperties();\n             final Configuration config \u003d\n                 ConfigurationLoader.loadConfiguration(\n                     configLocation,\n                     new PropertiesExpander(props),\n-                    omitIgnoredModules);\n+                    !executeIgnoredModules);\n \n             final ClassLoader moduleClassLoader \u003d\n                 Checker.class.getClassLoader();\n \n             final ModuleFactory factory \u003d new PackageObjectFactory(\n                     Checker.class.getPackage().getName() + \".\", moduleClassLoader);\n \n             rootModule \u003d (RootModule) factory.createModule(config.getName());\n             rootModule.setModuleClassLoader(moduleClassLoader);\n \n             if (rootModule instanceof Checker) {\n                 final ClassLoader loader \u003d new AntClassLoader(getProject(),\n                         classpath);\n \n                 ((Checker) rootModule).setClassLoader(loader);\n             }\n \n             rootModule.configure(config);\n         }\n         catch (final CheckstyleException ex) {\n             throw new BuildException(String.format(Locale.ROOT, \"Unable to create Root Module: \"\n                     + \"configLocation {%s}, classpath {%s}.\", configLocation, classpath), ex);\n         }\n         return rootModule;\n     }\n\\ No newline at end of file\n"
    },
    "785ed054a6e14465f8b2b717d28ec1a700de23a1": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
      "commitMessage": "Issue #3530: allowed ant to override and swap checker",
      "commitDate": 1485644054000,
      "commitName": "785ed054a6e14465f8b2b717d28ec1a700de23a1",
      "commitAuthor": "rnveach",
      "subchanges": [
        "Yrename",
        "Yreturntypechange",
        "Ybodychange"
      ]
    },
    "f65b17cbc30795247fef3077cce16a8bb53e9ffc": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2616: Fix CatchParameterName check violations in Checkstyle code\n",
      "commitDate": 1449184604000,
      "commitName": "f65b17cbc30795247fef3077cce16a8bb53e9ffc",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1448424970000,
      "commitNameOld": "2e243db3fbdf7b737f78ed7cef0b9bd94f351d25",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 8.79,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     private Checker createChecker() {\n         final Checker checker;\n         try {\n             final Properties props \u003d createOverridingProperties();\n             final Configuration config \u003d\n                 ConfigurationLoader.loadConfiguration(\n                     configLocation,\n                     new PropertiesExpander(props),\n                     omitIgnoredModules);\n \n             final DefaultContext context \u003d new DefaultContext();\n             final ClassLoader loader \u003d new AntClassLoader(getProject(),\n                     classpath);\n             context.add(\"classloader\", loader);\n \n             final ClassLoader moduleClassLoader \u003d\n                 Checker.class.getClassLoader();\n             context.add(\"moduleClassLoader\", moduleClassLoader);\n \n             checker \u003d new Checker();\n             checker.contextualize(context);\n             checker.configure(config);\n         }\n-        catch (final CheckstyleException e) {\n+        catch (final CheckstyleException ex) {\n             throw new BuildException(String.format(Locale.ROOT, \"Unable to create a Checker: \"\n-                    + \"configLocation {%s}, classpath {%s}.\", configLocation, classpath), e);\n+                    + \"configLocation {%s}, classpath {%s}.\", configLocation, classpath), ex);\n         }\n         return checker;\n     }\n\\ No newline at end of file\n"
    },
    "346387c717048391485fb28f877531aab1095de1": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1551: Fix FinalLocalVariable violations in checkstyle",
      "commitDate": 1446385289000,
      "commitName": "346387c717048391485fb28f877531aab1095de1",
      "commitAuthor": "Vladislav Lisetskiy",
      "commitDateOld": 1445038509000,
      "commitNameOld": "ce196814d857a4244a80c51d5151cc35e90b6749",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 15.59,
      "commitsBetweenForRepo": 99,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     private Checker createChecker() {\n-        Checker checker;\n+        final Checker checker;\n         try {\n             final Properties props \u003d createOverridingProperties();\n             final Configuration config \u003d\n                 ConfigurationLoader.loadConfiguration(\n                     configLocation,\n                     new PropertiesExpander(props),\n                     omitIgnoredModules);\n \n             final DefaultContext context \u003d new DefaultContext();\n             final ClassLoader loader \u003d new AntClassLoader(getProject(),\n                     classpath);\n             context.add(\"classloader\", loader);\n \n             final ClassLoader moduleClassLoader \u003d\n                 Checker.class.getClassLoader();\n             context.add(\"moduleClassLoader\", moduleClassLoader);\n \n             checker \u003d new Checker();\n             checker.contextualize(context);\n             checker.configure(config);\n         }\n         catch (final CheckstyleException e) {\n             throw new BuildException(String.format(Locale.ROOT, \"Unable to create a Checker: \"\n                     + \"configLocation {%s}, classpath {%s}.\", configLocation, classpath), e);\n         }\n         return checker;\n     }\n\\ No newline at end of file\n"
    },
    "be3e035ce39a610881cd2c1bfdce3eef101c2e3c": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1217: fixes for violations from \u0027forbiddenapis\u0027 verification tool\n",
      "commitDate": 1444779430000,
      "commitName": "be3e035ce39a610881cd2c1bfdce3eef101c2e3c",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": 1444179400000,
      "commitNameOld": "ca7f7f855630cbc816e47637ef36ae433d0e745f",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 6.94,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     private Checker createChecker() {\n         Checker checker;\n         try {\n             final Properties props \u003d createOverridingProperties();\n             final Configuration config \u003d\n                 ConfigurationLoader.loadConfiguration(\n                     configLocation,\n                     new PropertiesExpander(props),\n                     omitIgnoredModules);\n \n             final DefaultContext context \u003d new DefaultContext();\n             final ClassLoader loader \u003d new AntClassLoader(getProject(),\n                     classpath);\n             context.add(\"classloader\", loader);\n \n             final ClassLoader moduleClassLoader \u003d\n                 Checker.class.getClassLoader();\n             context.add(\"moduleClassLoader\", moduleClassLoader);\n \n             checker \u003d new Checker();\n             checker.contextualize(context);\n             checker.configure(config);\n         }\n         catch (final CheckstyleException e) {\n-            throw new BuildException(String.format(\"Unable to create a Checker: \"\n+            throw new BuildException(String.format(Locale.ROOT, \"Unable to create a Checker: \"\n                     + \"configLocation {%s}, classpath {%s}.\", configLocation, classpath), e);\n         }\n         return checker;\n     }\n\\ No newline at end of file\n"
    },
    "3ef918920c58c550169ccef3cfe1706aede11a6e": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: IllegalCatch violations fixed for CheckstyleAntTask\n",
      "commitDate": 1440997448000,
      "commitName": "3ef918920c58c550169ccef3cfe1706aede11a6e",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": 1440942808000,
      "commitNameOld": "bf4a25317356219807eabad0e075934a287ed27e",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.63,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,29 @@\n     private Checker createChecker() {\n         Checker checker;\n         try {\n             final Properties props \u003d createOverridingProperties();\n             final Configuration config \u003d\n                 ConfigurationLoader.loadConfiguration(\n                     configLocation,\n                     new PropertiesExpander(props),\n                     omitIgnoredModules);\n \n             final DefaultContext context \u003d new DefaultContext();\n             final ClassLoader loader \u003d new AntClassLoader(getProject(),\n                     classpath);\n             context.add(\"classloader\", loader);\n \n             final ClassLoader moduleClassLoader \u003d\n                 Checker.class.getClassLoader();\n             context.add(\"moduleClassLoader\", moduleClassLoader);\n \n             checker \u003d new Checker();\n-\n             checker.contextualize(context);\n             checker.configure(config);\n-\n-            // setup the listeners\n-            final AuditListener[] listeners \u003d getListeners();\n-            for (AuditListener element : listeners) {\n-                checker.addListener(element);\n-            }\n         }\n-        catch (final Exception e) {\n-            throw new BuildException(\"Unable to create a Checker: \"\n-                    + e.getMessage(), e);\n+        catch (final CheckstyleException e) {\n+            throw new BuildException(String.format(\"Unable to create a Checker: \"\n+                    + \"configLocation {%s}, classpath {%s}.\", configLocation, classpath), e);\n         }\n-\n         return checker;\n     }\n\\ No newline at end of file\n"
    },
    "f1e80e4ecae727087ca135dfd02f72e2d6213efb": {
      "type": "Ybodychange",
      "commitMessage": "Rename variables with \u0027standard\u0027 names of unexpected types. #1555\n\nFixes `StandardVariableNames` inspection violations.\n\nDescription:\n\u003eReports on any variables with \u0027standard\u0027 names which are of unexpected types. Such names may be confusing. Standard names and types are as follows:\n* i, j, k, m, n - int\n* f - float\n* d - double\n* b - byte\n* c, ch - char\n* l - long\n* s, str - String\n",
      "commitDate": 1439008721000,
      "commitName": "f1e80e4ecae727087ca135dfd02f72e2d6213efb",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1439007516000,
      "commitNameOld": "546f336e25b26d072f96e2cda139b885858ed5b0",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     private Checker createChecker() {\n-        Checker c;\n+        Checker checker;\n         try {\n             final Properties props \u003d createOverridingProperties();\n             final Configuration config \u003d\n                 ConfigurationLoader.loadConfiguration(\n                     configLocation,\n                     new PropertiesExpander(props),\n                     omitIgnoredModules);\n \n             final DefaultContext context \u003d new DefaultContext();\n             final ClassLoader loader \u003d new AntClassLoader(getProject(),\n                     classpath);\n             context.add(\"classloader\", loader);\n \n             final ClassLoader moduleClassLoader \u003d\n                 Checker.class.getClassLoader();\n             context.add(\"moduleClassLoader\", moduleClassLoader);\n \n-            c \u003d new Checker();\n+            checker \u003d new Checker();\n \n-            c.contextualize(context);\n-            c.configure(config);\n+            checker.contextualize(context);\n+            checker.configure(config);\n \n             // setup the listeners\n             final AuditListener[] listeners \u003d getListeners();\n             for (AuditListener element : listeners) {\n-                c.addListener(element);\n+                checker.addListener(element);\n             }\n         }\n         catch (final Exception e) {\n             throw new BuildException(\"Unable to create a Checker: \"\n                     + e.getMessage(), e);\n         }\n \n-        return c;\n+        return checker;\n     }\n\\ No newline at end of file\n"
    },
    "8a3f5bf6d5389b9e175c9c769992faece6d76ada": {
      "type": "Ybodychange",
      "commitMessage": "Remove unused assignments. #1555\n\nFixes UnusedAssignment inspection violations.\n\nDescription:\n\u003eThis inspection points out the cases where a variable value is never used after its assignment, i.e.:\n- the variable never gets read after assignment OR\n- the value is always overwritten with another assignment before the next variable read OR\n - the variable initializer is redundant (for one of the above two reasons) OR\n - the variable is never used.\n",
      "commitDate": 1439007161000,
      "commitName": "8a3f5bf6d5389b9e175c9c769992faece6d76ada",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1438460687000,
      "commitNameOld": "081c654df8d801f576506265681654a730cfc375",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 6.32,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     private Checker createChecker() {\n-        Checker c \u003d null;\n+        Checker c;\n         try {\n             final Properties props \u003d createOverridingProperties();\n             final Configuration config \u003d\n                 ConfigurationLoader.loadConfiguration(\n                     configLocation,\n                     new PropertiesExpander(props),\n                     omitIgnoredModules);\n \n             final DefaultContext context \u003d new DefaultContext();\n             final ClassLoader loader \u003d new AntClassLoader(getProject(),\n                     classpath);\n             context.add(\"classloader\", loader);\n \n             final ClassLoader moduleClassLoader \u003d\n                 Checker.class.getClassLoader();\n             context.add(\"moduleClassLoader\", moduleClassLoader);\n \n             c \u003d new Checker();\n \n             c.contextualize(context);\n             c.configure(config);\n \n             // setup the listeners\n             final AuditListener[] listeners \u003d getListeners();\n             for (AuditListener element : listeners) {\n                 c.addListener(element);\n             }\n         }\n         catch (final Exception e) {\n             throw new BuildException(\"Unable to create a Checker: \"\n                     + e.getMessage(), e);\n         }\n \n         return c;\n     }\n\\ No newline at end of file\n"
    },
    "500bf308fac4adc61bd3087a664779c8622efb3b": {
      "type": "Yfilerename",
      "commitMessage": "Rename CheckStyleTask to CheckstyleAntTask. #1108\n",
      "commitDate": 1433698738000,
      "commitName": "500bf308fac4adc61bd3087a664779c8622efb3b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": 1433691729000,
      "commitNameOld": "8a3ccee4918bc1ce5f6bc2dfea51389a59684eb0",
      "commitAuthorOld": "Bhavik Patel",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1": {
      "type": "Ybodychange",
      "commitMessage": "Prefixes, checkstyle, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java\n",
      "commitDate": 1421678312000,
      "commitName": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
      "commitAuthor": "alexkravin",
      "commitDateOld": 1393953491000,
      "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthorOld": "Ivan Sopov",
      "daysBetweenCommits": 320.89,
      "commitsBetweenForRepo": 476,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n     private Checker createChecker()\n     {\n         Checker c \u003d null;\n         try {\n             final Properties props \u003d createOverridingProperties();\n             final Configuration config \u003d\n                 ConfigurationLoader.loadConfiguration(\n-                    mConfigLocation,\n+                    configLocation,\n                     new PropertiesExpander(props),\n-                    mOmitIgnoredModules);\n+                    omitIgnoredModules);\n \n             final DefaultContext context \u003d new DefaultContext();\n             final ClassLoader loader \u003d new AntClassLoader(getProject(),\n-                    mClasspath);\n+                    classpath);\n             context.add(\"classloader\", loader);\n \n             final ClassLoader moduleClassLoader \u003d\n                 Checker.class.getClassLoader();\n             context.add(\"moduleClassLoader\", moduleClassLoader);\n \n             c \u003d new Checker();\n \n             c.contextualize(context);\n             c.configure(config);\n \n             // setup the listeners\n             final AuditListener[] listeners \u003d getListeners();\n             for (AuditListener element : listeners) {\n                 c.addListener(element);\n             }\n         }\n         catch (final Exception e) {\n             throw new BuildException(\"Unable to create a Checker: \"\n                     + e.getMessage(), e);\n         }\n \n         return c;\n     }\n\\ No newline at end of file\n"
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": 1393953491000,
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": 1393482905000,
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": ""
    },
    "fe9057366308642868c25d427c3ee94411b37170": {
      "type": "Ybodychange",
      "commitMessage": "Apply patch #1914806 for PackageNamesLoader from Lars Koedderitzsch.\n",
      "commitDate": 1207618517000,
      "commitName": "fe9057366308642868c25d427c3ee94411b37170",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1206616709000,
      "commitNameOld": "585f7c20a1e9e3ca4a04ffedf4e1cedc449acd97",
      "commitAuthorOld": "Michael Studman",
      "daysBetweenCommits": 11.6,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,38 @@\n     private Checker createChecker()\n     {\n         Checker c \u003d null;\n         try {\n             final Properties props \u003d createOverridingProperties();\n             final Configuration config \u003d\n                 ConfigurationLoader.loadConfiguration(\n                     mConfigLocation,\n                     new PropertiesExpander(props),\n                     mOmitIgnoredModules);\n \n             final DefaultContext context \u003d new DefaultContext();\n             final ClassLoader loader \u003d new AntClassLoader(getProject(),\n                     mClasspath);\n             context.add(\"classloader\", loader);\n \n+            final ClassLoader moduleClassLoader \u003d\n+                Checker.class.getClassLoader();\n+            context.add(\"moduleClassLoader\", moduleClassLoader);\n+\n             c \u003d new Checker();\n \n-            //load the set of package names\n-            if (mPackageNamesFile !\u003d null) {\n-                final ModuleFactory moduleFactory \u003d PackageNamesLoader\n-                        .loadModuleFactory(mPackageNamesFile.getAbsolutePath());\n-                c.setModuleFactory(moduleFactory);\n-            }\n             c.contextualize(context);\n             c.configure(config);\n \n             // setup the listeners\n             final AuditListener[] listeners \u003d getListeners();\n             for (AuditListener element : listeners) {\n                 c.addListener(element);\n             }\n         }\n         catch (final Exception e) {\n             throw new BuildException(\"Unable to create a Checker: \"\n                     + e.getMessage(), e);\n         }\n \n         return c;\n     }\n\\ No newline at end of file\n"
    },
    "585f7c20a1e9e3ca4a04ffedf4e1cedc449acd97": {
      "type": "Ybodychange",
      "commitMessage": "Adding omitIgnoredModules attribute to the checkstyle task (for WriteTag) and adding enum/annotation support to WriteTag\n",
      "commitDate": 1206616709000,
      "commitName": "585f7c20a1e9e3ca4a04ffedf4e1cedc449acd97",
      "commitAuthor": "Michael Studman",
      "commitDateOld": 1200352313000,
      "commitNameOld": "315033ff5647ef9896130573d9212fee6fe141db",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 72.5,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,40 @@\n     private Checker createChecker()\n     {\n         Checker c \u003d null;\n         try {\n             final Properties props \u003d createOverridingProperties();\n-            final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n-                    mConfigLocation, new PropertiesExpander(props), true);\n+            final Configuration config \u003d\n+                ConfigurationLoader.loadConfiguration(\n+                    mConfigLocation,\n+                    new PropertiesExpander(props),\n+                    mOmitIgnoredModules);\n \n             final DefaultContext context \u003d new DefaultContext();\n             final ClassLoader loader \u003d new AntClassLoader(getProject(),\n                     mClasspath);\n             context.add(\"classloader\", loader);\n \n             c \u003d new Checker();\n \n             //load the set of package names\n             if (mPackageNamesFile !\u003d null) {\n                 final ModuleFactory moduleFactory \u003d PackageNamesLoader\n                         .loadModuleFactory(mPackageNamesFile.getAbsolutePath());\n                 c.setModuleFactory(moduleFactory);\n             }\n             c.contextualize(context);\n             c.configure(config);\n \n             // setup the listeners\n             final AuditListener[] listeners \u003d getListeners();\n             for (AuditListener element : listeners) {\n                 c.addListener(element);\n             }\n         }\n         catch (final Exception e) {\n             throw new BuildException(\"Unable to create a Checker: \"\n                     + e.getMessage(), e);\n         }\n \n         return c;\n     }\n\\ No newline at end of file\n"
    },
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1": {
      "type": "Ybodychange",
      "commitMessage": "Use the new syntactic sugar \"for loop\".\n\nEnd of the cosmetic changes.\n",
      "commitDate": 1197714527000,
      "commitName": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1197706480000,
      "commitNameOld": "f1afaf83f39b83cc3bd07a2388448b262652a76b",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     private Checker createChecker()\n     {\n         Checker c \u003d null;\n         try {\n             final Properties props \u003d createOverridingProperties();\n             final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n                     mConfigLocation, new PropertiesExpander(props), true);\n \n             final DefaultContext context \u003d new DefaultContext();\n             final ClassLoader loader \u003d new AntClassLoader(getProject(),\n                     mClasspath);\n             context.add(\"classloader\", loader);\n \n             c \u003d new Checker();\n \n             //load the set of package names\n             if (mPackageNamesFile !\u003d null) {\n                 final ModuleFactory moduleFactory \u003d PackageNamesLoader\n                         .loadModuleFactory(mPackageNamesFile.getAbsolutePath());\n                 c.setModuleFactory(moduleFactory);\n             }\n             c.contextualize(context);\n             c.configure(config);\n \n             // setup the listeners\n             final AuditListener[] listeners \u003d getListeners();\n-            for (int i \u003d 0; i \u003c listeners.length; i++) {\n-                c.addListener(listeners[i]);\n+            for (AuditListener element : listeners) {\n+                c.addListener(element);\n             }\n         }\n         catch (final Exception e) {\n             throw new BuildException(\"Unable to create a Checker: \"\n                     + e.getMessage(), e);\n         }\n \n         return c;\n     }\n\\ No newline at end of file\n"
    },
    "35d1673788bbbac8263fdb69275dc6a63b095a24": {
      "type": "Ybodychange",
      "commitMessage": "Making local variables final where possible.\n",
      "commitDate": 1152243856000,
      "commitName": "35d1673788bbbac8263fdb69275dc6a63b095a24",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1152242806000,
      "commitNameOld": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     private Checker createChecker()\n     {\n         Checker c \u003d null;\n         try {\n             final Properties props \u003d createOverridingProperties();\n             final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n                     mConfigLocation, new PropertiesExpander(props), true);\n \n             final DefaultContext context \u003d new DefaultContext();\n             final ClassLoader loader \u003d new AntClassLoader(getProject(),\n                     mClasspath);\n             context.add(\"classloader\", loader);\n \n             c \u003d new Checker();\n \n             //load the set of package names\n             if (mPackageNamesFile !\u003d null) {\n                 final ModuleFactory moduleFactory \u003d PackageNamesLoader\n                         .loadModuleFactory(mPackageNamesFile.getAbsolutePath());\n                 c.setModuleFactory(moduleFactory);\n             }\n             c.contextualize(context);\n             c.configure(config);\n \n             // setup the listeners\n             final AuditListener[] listeners \u003d getListeners();\n             for (int i \u003d 0; i \u003c listeners.length; i++) {\n                 c.addListener(listeners[i]);\n             }\n         }\n-        catch (Exception e) {\n+        catch (final Exception e) {\n             throw new BuildException(\"Unable to create a Checker: \"\n                     + e.getMessage(), e);\n         }\n \n         return c;\n     }\n\\ No newline at end of file\n"
    },
    "adce874628730a881c533bb04db2688d03a60fc6": {
      "type": "Ybodychange",
      "commitMessage": "Added patch (id 1193251) to suppress processing of checks with \u0027ignore\u0027\nseverity. From Lars Koedderitzsch.\n",
      "commitDate": 1121598220000,
      "commitName": "adce874628730a881c533bb04db2688d03a60fc6",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": 1120056460000,
      "commitNameOld": "c8aae6e57e6e348e0ad113a6d9522ca247f40cba",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 17.84,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n     private Checker createChecker()\n     {\n         Checker c \u003d null;\n         try {\n             final Properties props \u003d createOverridingProperties();\n             final Configuration config \u003d\n                 ConfigurationLoader.loadConfiguration(\n-                    mConfigLocation, new PropertiesExpander(props));\n+                    mConfigLocation, new PropertiesExpander(props), true);\n \n             final DefaultContext context \u003d new DefaultContext();\n             final ClassLoader loader \u003d\n                 new AntClassLoader(getProject(), mClasspath);\n             context.add(\"classloader\", loader);\n \n             c \u003d new Checker();\n \n             //load the set of package names\n             if (mPackageNamesFile !\u003d null) {\n                 final ModuleFactory moduleFactory \u003d\n                     PackageNamesLoader.loadModuleFactory(\n                         mPackageNamesFile.getAbsolutePath());\n                 c.setModuleFactory(moduleFactory);\n             }\n             c.contextualize(context);\n             c.configure(config);\n \n             // setup the listeners\n             final AuditListener[] listeners \u003d getListeners();\n             for (int i \u003d 0; i \u003c listeners.length; i++) {\n                 c.addListener(listeners[i]);\n             }\n         }\n         catch (Exception e) {\n             throw new BuildException(\n                 \"Unable to create a Checker: \" + e.getMessage(), e);\n         }\n \n         return c;\n     }\n\\ No newline at end of file\n"
    },
    "33f75977205625bc5f9620a2c63e16a11f9663a5": {
      "type": "Ybodychange",
      "commitMessage": "Undo for ClassLoader fix.\n",
      "commitDate": 1066710700000,
      "commitName": "33f75977205625bc5f9620a2c63e16a11f9663a5",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1066564909000,
      "commitNameOld": "66325cbd72882454193765322efa716537ce9c93",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 1.69,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,39 @@\n     private Checker createChecker()\n     {\n         Checker c \u003d null;\n         try {\n             final Properties props \u003d createOverridingProperties();\n             final Configuration config \u003d\n                 ConfigurationLoader.loadConfiguration(\n                     mConfigLocation, new PropertiesExpander(props));\n \n             final DefaultContext context \u003d new DefaultContext();\n-            final ClassLoader taskLoader \u003d this.getClass().getClassLoader();\n             final ClassLoader loader \u003d\n-                new AntClassLoader(taskLoader, getProject(), mClasspath, true);\n+                new AntClassLoader(getProject(), mClasspath);\n             context.add(\"classloader\", loader);\n \n             c \u003d new Checker();\n \n             //load the set of package names\n             if (mPackageNamesFile !\u003d null) {\n                 final ModuleFactory moduleFactory \u003d\n                     PackageNamesLoader.loadModuleFactory(\n                         mPackageNamesFile.getAbsolutePath());\n                 c.setModuleFactory(moduleFactory);\n             }\n             c.contextualize(context);\n             c.configure(config);\n \n             // setup the listeners\n             final AuditListener[] listeners \u003d getListeners();\n             for (int i \u003d 0; i \u003c listeners.length; i++) {\n                 c.addListener(listeners[i]);\n             }\n         }\n         catch (Exception e) {\n             throw new BuildException(\n                 \"Unable to create a Checker: \" + e.getMessage(), e);\n         }\n \n         return c;\n     }\n\\ No newline at end of file\n"
    },
    "66325cbd72882454193765322efa716537ce9c93": {
      "type": "Ybodychange",
      "commitMessage": "Now PackageObjectFactory uses custom class loader.\n",
      "commitDate": 1066564909000,
      "commitName": "66325cbd72882454193765322efa716537ce9c93",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": 1065635218000,
      "commitNameOld": "984eb8d7427038effd8ee8d2d9c90c74eee57e2b",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 10.76,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,40 @@\n     private Checker createChecker()\n     {\n         Checker c \u003d null;\n         try {\n             final Properties props \u003d createOverridingProperties();\n             final Configuration config \u003d\n                 ConfigurationLoader.loadConfiguration(\n                     mConfigLocation, new PropertiesExpander(props));\n \n             final DefaultContext context \u003d new DefaultContext();\n+            final ClassLoader taskLoader \u003d this.getClass().getClassLoader();\n             final ClassLoader loader \u003d\n-                new AntClassLoader(getProject(), mClasspath);\n+                new AntClassLoader(taskLoader, getProject(), mClasspath, true);\n             context.add(\"classloader\", loader);\n \n             c \u003d new Checker();\n \n             //load the set of package names\n             if (mPackageNamesFile !\u003d null) {\n                 final ModuleFactory moduleFactory \u003d\n                     PackageNamesLoader.loadModuleFactory(\n                         mPackageNamesFile.getAbsolutePath());\n                 c.setModuleFactory(moduleFactory);\n             }\n             c.contextualize(context);\n             c.configure(config);\n \n             // setup the listeners\n             final AuditListener[] listeners \u003d getListeners();\n             for (int i \u003d 0; i \u003c listeners.length; i++) {\n                 c.addListener(listeners[i]);\n             }\n         }\n         catch (Exception e) {\n             throw new BuildException(\n                 \"Unable to create a Checker: \" + e.getMessage(), e);\n         }\n \n         return c;\n     }\n\\ No newline at end of file\n"
    },
    "b1123e96e452b41c5fb22de20bb7a99d376d0380": {
      "type": "Yintroduced",
      "commitMessage": "Small refactoring to reduce cyclomatic complexity of CheckStyleTask.execute().\n",
      "commitDate": 1064633694000,
      "commitName": "b1123e96e452b41c5fb22de20bb7a99d376d0380",
      "commitAuthor": "Oleg Sukhodolsky"
    }
  }
}