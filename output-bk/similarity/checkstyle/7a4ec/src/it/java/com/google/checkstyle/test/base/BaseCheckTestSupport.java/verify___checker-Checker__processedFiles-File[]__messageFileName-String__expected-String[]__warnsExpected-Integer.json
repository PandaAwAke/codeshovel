{
  "function": {
    "commitName": "7a4ec11d123dc0bbf7db943af715d19814d2e332",
    "name": "verify",
    "path": "verify___checker-Checker__processedFiles-File[]__messageFileName-String__expected-String[]__warnsExpected-Integer",
    "body": "{\n    stream.flush();\n    final List\u003cFile\u003e theFiles \u003d Lists.newArrayList();\n    Collections.addAll(theFiles, processedFiles);\n    final List\u003cInteger\u003e theWarnings \u003d Lists.newArrayList();\n    Collections.addAll(theWarnings, warnsExpected);\n    final int errs \u003d checker.process(theFiles);\n    // process each of the lines\n    final ByteArrayInputStream inputStream \u003d new ByteArrayInputStream(stream.toByteArray());\n    try (final LineNumberReader lnr \u003d new LineNumberReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8))) {\n        for (int i \u003d 0; i \u003c expected.length; i++) {\n            final String expectedResult \u003d messageFileName + \":\" + expected[i];\n            final String actual \u003d lnr.readLine();\n            assertEquals(\"error message \" + i, expectedResult, actual);\n            String parseInt \u003d removeDeviceFromPathOnWindows(actual);\n            parseInt \u003d parseInt.substring(parseInt.indexOf(\u0027:\u0027) + 1);\n            parseInt \u003d parseInt.substring(0, parseInt.indexOf(\u0027:\u0027));\n            final int lineNumber \u003d Integer.parseInt(parseInt);\n            assertNotNull(\"expected input file to have warning comment on line number \" + lineNumber, theWarnings.remove((Integer) lineNumber));\n        }\n        assertEquals(\"unexpected output: \" + lnr.readLine(), expected.length, errs);\n        assertTrue(\"unexpected warnings \" + theWarnings, theWarnings.size() \u003d\u003d 0);\n    }\n    checker.destroy();\n}"
  },
  "mostSimilarFunction": {
    "commitName": "344ea5c012d1814441b5758013a2b035c6e1613a",
    "name": "verify",
    "path": "verify___aC-Checker__aProcessedFiles-File[]__aMessageFileName-String__aExpected-String[]__aWarnsExpected-Integer",
    "body": "{\n    stream.flush();\n    final List\u003cFile\u003e theFiles \u003d Lists.newArrayList();\n    Collections.addAll(theFiles, aProcessedFiles);\n    final int errs \u003d aC.process(theFiles);\n    // process each of the lines\n    final ByteArrayInputStream localStream \u003d new ByteArrayInputStream(stream.toByteArray());\n    try (final LineNumberReader lnr \u003d new LineNumberReader(new InputStreamReader(localStream, StandardCharsets.UTF_8))) {\n        for (int i \u003d 0; i \u003c aExpected.length; i++) {\n            final String expected \u003d aMessageFileName + \":\" + aExpected[i];\n            final String actual \u003d lnr.readLine();\n            assertEquals(\"error message \" + i, expected, actual);\n            String parseInt \u003d removeDeviceFromPathOnWindows(actual);\n            parseInt \u003d parseInt.substring(parseInt.indexOf(\u0027:\u0027) + 1);\n            parseInt \u003d parseInt.substring(0, parseInt.indexOf(\u0027:\u0027));\n            final int lineNumber \u003d Integer.parseInt(parseInt);\n            Integer integer \u003d 0;\n            if (Arrays.asList(aWarnsExpected).contains(lineNumber)) {\n                integer \u003d lineNumber;\n            }\n            assertEquals(\"error message \" + i, (long) integer, lineNumber);\n        }\n        assertEquals(\"unexpected output: \" + lnr.readLine(), aExpected.length, errs);\n    }\n    aC.destroy();\n}"
  },
  "similarity": {
    "crossFile": false,
    "bodySimilarity": 0.8283713433358001,
    "lineNumberSimilarity": 0.9831932773109243,
    "scopeSimilarity": 1.0,
    "overallSimilarity": 0.70709283583395,
    "nameSimilarity": 1.0
  }
}