=== COMPARE FUNCTION ===

COMMIT: d843dd8439cc5163bcd743443f970c392f4ae30e
NAME: getMissingFileName
PATH: getMissingFileName___bundle-ResourceBundle__languageCode-String
BODY:
{
    final String fileNameRegexp;
    final boolean searchForDefaultTranslation;
    final String extension = bundle.getExtension();
    final String baseName = bundle.getBaseName();
    if (languageCode == null) {
        searchForDefaultTranslation = true;
        fileNameRegexp = String.format(Locale.ROOT, REGEXP_FORMAT_TO_CHECK_DEFAULT_TRANSLATIONS, baseName, extension);
    } else {
        searchForDefaultTranslation = false;
        fileNameRegexp = String.format(Locale.ROOT, REGEXP_FORMAT_TO_CHECK_REQUIRED_TRANSLATIONS, baseName, languageCode, extension);
    }
    Optional<String> missingFileName = Optional.absent();
    if (!bundle.containsFile(fileNameRegexp)) {
        if (searchForDefaultTranslation) {
            missingFileName = Optional.of(String.format(Locale.ROOT, DEFAULT_TRANSLATION_FILE_NAME_FORMATTER, baseName, extension));
        } else {
            missingFileName = Optional.of(String.format(Locale.ROOT, FILE_NAME_WITH_LANGUAGE_CODE_FORMATTER, baseName, languageCode, extension));
        }
    }
    return missingFileName;
}


=== MOST SIMILAR FUNCTION ===

COMMIT: dea6dab124d3db9508da7c86bc331a9516cbb6e9
NAME: logMissingTranslation
PATH: logMissingTranslation___fullyQualifiedFileName-String
BODY:
{
    final String filePath = extractPath(fullyQualifiedFileName);
    final MessageDispatcher dispatcher = getMessageDispatcher();
    dispatcher.fireFileStarted(filePath);
    log(0, MSG_KEY_MISSING_TRANSLATION_FILE, extractName(fullyQualifiedFileName));
    fireErrors(filePath);
    dispatcher.fireFileFinished(filePath);
}


=== SIMILARITY ===
BodySimilarity: 0.5977785838268767; ScopeSimilarity: 1.0; NameSimilarity: 0.6813371813371814; LineNumberSimilarity: 0.9226519337016574 --- Overall: 0.5697789412910145